# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (10)
# #########################################################################

class ComplexOptional(BaseModel):
    data: typing.Optional["OptionalData"] = None
    items: typing.List["OptionalItem"]
    mapping: typing.Dict[str, typing.Optional["OptionalValue"]]

class MixedOptionalNullable(BaseModel):
    id: int
    description: typing.Optional[str] = None
    metadata: typing.Optional[str] = None
    notes: typing.Optional[str] = None
    tags: typing.List[str]
    categories: typing.Optional[typing.List[str]] = None
    keywords: typing.Optional[typing.List[str]] = None
    primaryUser: "User"
    secondaryUser: typing.Optional["User"] = None
    tertiaryUser: typing.Optional["User"] = None

class NullableTypes(BaseModel):
    nullableString: typing.Optional[str] = None
    nullableInt: typing.Optional[int] = None
    nullableFloat: typing.Optional[float] = None
    nullableBool: typing.Optional[bool] = None
    nullableArray: typing.Optional[typing.List[str]] = None
    nullableObject: typing.Optional["User"] = None

class OptionalData(BaseModel):
    value: str
    count: typing.Optional[int] = None
    enabled: typing.Optional[bool] = None

class OptionalFields(BaseModel):
    requiredString: str
    optionalString: typing.Optional[str] = None
    requiredInt: int
    optionalInt: typing.Optional[int] = None
    requiredBool: bool
    optionalBool: typing.Optional[bool] = None
    optionalArray: typing.Optional[typing.List[str]] = None
    optionalMap: typing.Optional[typing.Dict[str, str]] = None

class OptionalItem(BaseModel):
    id: int
    name: str
    description: typing.Optional[str] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None

class OptionalValue(BaseModel):
    data: typing.Optional[typing.Union[str, int]] = None
    optional: typing.Optional[str] = None

class Product(BaseModel):
    id: int
    name: str
    price: typing.Optional[float] = None

class UnionWithNull(BaseModel):
    simpleUnion: typing.Union[str, int]
    nullableUnion: typing.Optional[typing.Union[str, int]] = None
    optionalUnion: typing.Optional[typing.Union[str, int]] = None
    complexUnion: typing.Optional[typing.Union["User", "Product"]] = None

class User(BaseModel):
    id: int
    name: str
    email: typing.Optional[str] = None
    phone: typing.Optional[str] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################

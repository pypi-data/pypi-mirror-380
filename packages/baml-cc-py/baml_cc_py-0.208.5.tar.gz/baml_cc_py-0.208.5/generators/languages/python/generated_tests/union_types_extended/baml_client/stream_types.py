# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (23)
# #########################################################################

class Admin(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    permissions: typing.List[str]
    type: typing.Optional[str] = None

class ApiError(BaseModel):
    status: typing.Optional[str] = None
    message: typing.Optional[str] = None
    code: typing.Optional[int] = None

class ApiPending(BaseModel):
    status: typing.Optional[str] = None
    progress: typing.Optional[float] = None
    eta: typing.Optional[int] = None

class ApiSuccess(BaseModel):
    status: typing.Optional[str] = None
    data: typing.Dict[str, str]

class Bird(BaseModel):
    species: typing.Optional[str] = None
    canFly: typing.Optional[bool] = None
    wingspan: typing.Optional[float] = None

class Cat(BaseModel):
    species: typing.Optional[str] = None
    color: typing.Optional[str] = None
    lives: typing.Optional[int] = None

class Circle(BaseModel):
    shape: typing.Optional[str] = None
    radius: typing.Optional[float] = None

class ComplexUnions(BaseModel):
    userOrProduct: typing.Optional[typing.Union["User", "Product"]] = None
    userOrProductOrAdmin: typing.Optional[typing.Union["User", "Product", "Admin"]] = None
    dataOrError: typing.Optional[typing.Union["DataResponse", "ErrorResponse"]] = None
    resultOrNull: typing.Optional["Result"] = None
    multiTypeResult: typing.Optional[typing.Union["Success", "Warning", "Error"]] = None

class DataResponse(BaseModel):
    data: typing.Optional[str] = None
    timestamp: typing.Optional[int] = None
    status: typing.Optional[str] = None

class DiscriminatedUnions(BaseModel):
    shape: typing.Optional[typing.Union["Circle", "Rectangle", "Triangle"]] = None
    animal: typing.Optional[typing.Union["Dog", "Cat", "Bird"]] = None
    response: typing.Optional[typing.Union["ApiSuccess", "ApiError", "ApiPending"]] = None

class Dog(BaseModel):
    species: typing.Optional[str] = None
    breed: typing.Optional[str] = None
    goodBoy: typing.Optional[bool] = None

class Error(BaseModel):
    type: typing.Optional[str] = None
    message: typing.Optional[str] = None
    code: typing.Optional[int] = None
    details: typing.Optional[str] = None

class ErrorResponse(BaseModel):
    error: typing.Optional[str] = None
    code: typing.Optional[int] = None
    status: typing.Optional[str] = None

class PrimitiveUnions(BaseModel):
    stringOrInt: typing.Optional[typing.Union[str, int]] = None
    stringOrFloat: typing.Optional[typing.Union[str, float]] = None
    intOrFloat: typing.Optional[typing.Union[int, float]] = None
    boolOrString: typing.Optional[typing.Union[bool, str]] = None
    anyPrimitive: typing.Optional[typing.Union[str, int, float, bool]] = None

class Product(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    price: typing.Optional[float] = None
    type: typing.Optional[str] = None

class Rectangle(BaseModel):
    shape: typing.Optional[str] = None
    width: typing.Optional[float] = None
    height: typing.Optional[float] = None

class RecursiveUnion(BaseModel):
    value: typing.Optional[typing.Union[str, int, "RecursiveUnion"]] = None
    children: typing.List[typing.Union[str, "RecursiveUnion"]]

class Result(BaseModel):
    value: typing.Optional[typing.Union[str, int, float]] = None
    metadata: typing.Dict[str, str]

class Success(BaseModel):
    type: typing.Optional[str] = None
    message: typing.Optional[str] = None
    data: typing.Dict[str, str]

class Triangle(BaseModel):
    shape: typing.Optional[str] = None
    base: typing.Optional[float] = None
    height: typing.Optional[float] = None

class UnionArrays(BaseModel):
    mixedArray: typing.List[typing.Union[str, int]]
    nullableItems: typing.List[typing.Optional[str]]
    objectArray: typing.List[typing.Union["User", "Product"]]
    nestedUnionArray: typing.List[typing.Union[str, typing.List[int]]]

class User(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    type: typing.Optional[str] = None

class Warning(BaseModel):
    type: typing.Optional[str] = None
    message: typing.Optional[str] = None
    level: typing.Optional[int] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################

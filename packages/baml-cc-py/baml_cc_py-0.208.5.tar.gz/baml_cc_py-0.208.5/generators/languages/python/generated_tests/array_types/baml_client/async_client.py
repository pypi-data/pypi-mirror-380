# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__


class BamlAsyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        on_tick: typing.Optional[typing.Callable[[str, baml_py.baml_py.FunctionLog], None]] = None,
    ) -> "BamlAsyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        if on_tick is not None:
            options["on_tick"] = on_tick
        return BamlAsyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    async def TestEmptyArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SimpleArrays:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestEmptyArrays(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestEmptyArrays", args={
                "input": input,
            })
            return typing.cast(types.SimpleArrays, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestLargeArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SimpleArrays:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestLargeArrays(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestLargeArrays", args={
                "input": input,
            })
            return typing.cast(types.SimpleArrays, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestMixedArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.MixedArrays:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestMixedArrays(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestMixedArrays", args={
                "input": input,
            })
            return typing.cast(types.MixedArrays, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestNestedArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.NestedArrays:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestNestedArrays(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestNestedArrays", args={
                "input": input,
            })
            return typing.cast(types.NestedArrays, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestObjectArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ObjectArrays:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestObjectArrays(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestObjectArrays", args={
                "input": input,
            })
            return typing.cast(types.ObjectArrays, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestSimpleArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SimpleArrays:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestSimpleArrays(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestSimpleArrays", args={
                "input": input,
            })
            return typing.cast(types.SimpleArrays, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevel3DArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[typing.List[typing.List[str]]]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevel3DArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevel3DArray", args={
                "input": input,
            })
            return typing.cast(typing.List[typing.List[typing.List[str]]], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelArrayOfMaps(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[typing.Dict[str, int]]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelArrayOfMaps(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelArrayOfMaps", args={
                "input": input,
            })
            return typing.cast(typing.List[typing.Dict[str, int]], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelBoolArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[bool]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelBoolArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelBoolArray", args={
                "input": input,
            })
            return typing.cast(typing.List[bool], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelEmptyArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[str]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelEmptyArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelEmptyArray", args={
                "input": input,
            })
            return typing.cast(typing.List[str], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelFloatArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[float]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelFloatArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelFloatArray", args={
                "input": input,
            })
            return typing.cast(typing.List[float], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelIntArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[int]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelIntArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelIntArray", args={
                "input": input,
            })
            return typing.cast(typing.List[int], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelMixedArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[typing.Union[str, int, bool]]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelMixedArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelMixedArray", args={
                "input": input,
            })
            return typing.cast(typing.List[typing.Union[str, int, bool]], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelNestedArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[typing.List[int]]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelNestedArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelNestedArray", args={
                "input": input,
            })
            return typing.cast(typing.List[typing.List[int]], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelNullableArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[typing.Optional[str]]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelNullableArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelNullableArray", args={
                "input": input,
            })
            return typing.cast(typing.List[typing.Optional[str]], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelObjectArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List["types.User"]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelObjectArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelObjectArray", args={
                "input": input,
            })
            return typing.cast(typing.List["types.User"], result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelStringArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.List[str]:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelStringArray(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelStringArray", args={
                "input": input,
            })
            return typing.cast(typing.List[str], result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def TestEmptyArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SimpleArrays, types.SimpleArrays]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestEmptyArrays", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.SimpleArrays, types.SimpleArrays](
          result,
          lambda x: typing.cast(stream_types.SimpleArrays, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SimpleArrays, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestLargeArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SimpleArrays, types.SimpleArrays]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestLargeArrays", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.SimpleArrays, types.SimpleArrays](
          result,
          lambda x: typing.cast(stream_types.SimpleArrays, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SimpleArrays, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestMixedArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.MixedArrays, types.MixedArrays]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestMixedArrays", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.MixedArrays, types.MixedArrays](
          result,
          lambda x: typing.cast(stream_types.MixedArrays, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.MixedArrays, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestNestedArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.NestedArrays, types.NestedArrays]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestNestedArrays", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.NestedArrays, types.NestedArrays](
          result,
          lambda x: typing.cast(stream_types.NestedArrays, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.NestedArrays, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestObjectArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ObjectArrays, types.ObjectArrays]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestObjectArrays", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.ObjectArrays, types.ObjectArrays](
          result,
          lambda x: typing.cast(stream_types.ObjectArrays, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ObjectArrays, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestSimpleArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SimpleArrays, types.SimpleArrays]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestSimpleArrays", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.SimpleArrays, types.SimpleArrays](
          result,
          lambda x: typing.cast(stream_types.SimpleArrays, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SimpleArrays, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevel3DArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[typing.List[typing.List[str]]], typing.List[typing.List[typing.List[str]]]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevel3DArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[typing.List[typing.List[str]]], typing.List[typing.List[typing.List[str]]]](
          result,
          lambda x: typing.cast(typing.List[typing.List[typing.List[str]]], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[typing.List[typing.List[str]]], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelArrayOfMaps(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[typing.Dict[str, int]], typing.List[typing.Dict[str, int]]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelArrayOfMaps", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[typing.Dict[str, int]], typing.List[typing.Dict[str, int]]](
          result,
          lambda x: typing.cast(typing.List[typing.Dict[str, int]], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[typing.Dict[str, int]], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelBoolArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[bool], typing.List[bool]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelBoolArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[bool], typing.List[bool]](
          result,
          lambda x: typing.cast(typing.List[bool], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[bool], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelEmptyArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[str], typing.List[str]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelEmptyArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[str], typing.List[str]](
          result,
          lambda x: typing.cast(typing.List[str], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[str], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelFloatArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[float], typing.List[float]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelFloatArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[float], typing.List[float]](
          result,
          lambda x: typing.cast(typing.List[float], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[float], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelIntArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[int], typing.List[int]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelIntArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[int], typing.List[int]](
          result,
          lambda x: typing.cast(typing.List[int], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[int], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelMixedArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[typing.Union[str, int, bool]], typing.List[typing.Union[str, int, bool]]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelMixedArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[typing.Union[str, int, bool]], typing.List[typing.Union[str, int, bool]]](
          result,
          lambda x: typing.cast(typing.List[typing.Union[str, int, bool]], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[typing.Union[str, int, bool]], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelNestedArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[typing.List[int]], typing.List[typing.List[int]]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelNestedArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[typing.List[int]], typing.List[typing.List[int]]](
          result,
          lambda x: typing.cast(typing.List[typing.List[int]], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[typing.List[int]], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelNullableArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[typing.Optional[str]], typing.List[typing.Optional[str]]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelNullableArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[typing.Optional[str]], typing.List[typing.Optional[str]]](
          result,
          lambda x: typing.cast(typing.List[typing.Optional[str]], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[typing.Optional[str]], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelObjectArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List["stream_types.User"], typing.List["types.User"]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelObjectArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List["stream_types.User"], typing.List["types.User"]](
          result,
          lambda x: typing.cast(typing.List["stream_types.User"], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List["types.User"], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelStringArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.List[str], typing.List[str]]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelStringArray", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.List[str], typing.List[str]](
          result,
          lambda x: typing.cast(typing.List[str], x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.List[str], x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def TestEmptyArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestEmptyArrays", args={
            "input": input,
        }, mode="request")
        return result
    async def TestLargeArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestLargeArrays", args={
            "input": input,
        }, mode="request")
        return result
    async def TestMixedArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestMixedArrays", args={
            "input": input,
        }, mode="request")
        return result
    async def TestNestedArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestNestedArrays", args={
            "input": input,
        }, mode="request")
        return result
    async def TestObjectArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestObjectArrays", args={
            "input": input,
        }, mode="request")
        return result
    async def TestSimpleArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestSimpleArrays", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevel3DArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevel3DArray", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelArrayOfMaps(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelArrayOfMaps", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelBoolArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelBoolArray", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelEmptyArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelEmptyArray", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelFloatArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelFloatArray", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelIntArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelIntArray", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelMixedArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelMixedArray", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelNestedArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelNestedArray", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelNullableArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelNullableArray", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelObjectArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelObjectArray", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelStringArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelStringArray", args={
            "input": input,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def TestEmptyArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestEmptyArrays", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestLargeArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestLargeArrays", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestMixedArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestMixedArrays", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestNestedArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestNestedArrays", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestObjectArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestObjectArrays", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestSimpleArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestSimpleArrays", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevel3DArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevel3DArray", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelArrayOfMaps(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelArrayOfMaps", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelBoolArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelBoolArray", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelEmptyArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelEmptyArray", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelFloatArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelFloatArray", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelIntArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelIntArray", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelMixedArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelMixedArray", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelNestedArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelNestedArray", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelNullableArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelNullableArray", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelObjectArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelObjectArray", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelStringArray(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelStringArray", args={
            "input": input,
        }, mode="stream")
        return result
    

b = BamlAsyncClient(DoNotUseDirectlyCallManager({}))
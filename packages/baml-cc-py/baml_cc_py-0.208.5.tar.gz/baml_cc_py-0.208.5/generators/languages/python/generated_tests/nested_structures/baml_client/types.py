# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (30)
# #########################################################################

class Address(BaseModel):
    street: str
    city: str
    state: str
    country: str
    postalCode: str
    coordinates: typing.Optional["Coordinates"] = None

class Approval(BaseModel):
    approver: str
    date: str
    amount: float
    notes: typing.Optional[str] = None

class Budget(BaseModel):
    total: float
    spent: float
    categories: typing.Dict[str, float]
    approvals: typing.List["Approval"]

class Company(BaseModel):
    id: int
    name: str
    address: "Address"
    departments: typing.List["Department"]
    metadata: "CompanyMetadata"

class CompanyMetadata(BaseModel):
    founded: str
    industry: str
    size: typing.Union[typing_extensions.Literal['small'], typing_extensions.Literal['medium'], typing_extensions.Literal['large'], typing_extensions.Literal['enterprise']]
    certifications: typing.List[str]
    partnerships: typing.Optional[typing.List["Company"]] = None

class ComplexNested(BaseModel):
    company: "Company"
    employees: typing.List["Employee"]
    projects: typing.List["Project"]

class Contact(BaseModel):
    name: str
    relationship: str
    phone: str
    email: typing.Optional[str] = None

class Coordinates(BaseModel):
    latitude: float
    longitude: float

class DeeplyNested(BaseModel):
    level1: "Level1"

class Department(BaseModel):
    id: int
    name: str
    manager: typing.Optional["Employee"] = None
    members: typing.List["Employee"]
    budget: float
    projects: typing.List["Project"]

class DisplaySettings(BaseModel):
    fontSize: int
    colorScheme: str
    layout: typing.Union[typing_extensions.Literal['grid'], typing_extensions.Literal['list']]

class Employee(BaseModel):
    id: int
    name: str
    email: str
    role: str
    department: str
    skills: typing.List[str]
    address: typing.Optional["Address"] = None
    emergencyContact: typing.Optional["Contact"] = None

class Level1(BaseModel):
    data: str
    level2: "Level2"

class Level2(BaseModel):
    data: str
    level3: "Level3"

class Level3(BaseModel):
    data: str
    level4: "Level4"

class Level4(BaseModel):
    data: str
    level5: "Level5"

class Level5(BaseModel):
    data: str
    items: typing.List[str]
    mapping: typing.Dict[str, int]

class Metadata(BaseModel):
    createdAt: str
    updatedAt: str
    version: int
    tags: typing.List[str]
    attributes: typing.Dict[str, str]

class Milestone(BaseModel):
    id: int
    name: str
    dueDate: str
    completed: bool
    tasks: typing.List["Task"]

class NotificationSettings(BaseModel):
    email: bool
    push: bool
    sms: bool
    frequency: typing.Union[typing_extensions.Literal['immediate'], typing_extensions.Literal['daily'], typing_extensions.Literal['weekly']]

class Preferences(BaseModel):
    theme: typing.Union[typing_extensions.Literal['light'], typing_extensions.Literal['dark']]
    language: str
    notifications: "NotificationSettings"

class PrivacySettings(BaseModel):
    profileVisibility: typing.Union[typing_extensions.Literal['public'], typing_extensions.Literal['private'], typing_extensions.Literal['friends']]
    showEmail: bool
    showPhone: bool

class Profile(BaseModel):
    bio: str
    avatar: str
    social: "SocialLinks"
    preferences: "Preferences"

class Project(BaseModel):
    id: int
    name: str
    description: str
    status: typing.Union[typing_extensions.Literal['planning'], typing_extensions.Literal['active'], typing_extensions.Literal['completed'], typing_extensions.Literal['cancelled']]
    team: typing.List["Employee"]
    milestones: typing.List["Milestone"]
    budget: "Budget"

class RecursiveStructure(BaseModel):
    id: int
    name: str
    children: typing.List["RecursiveStructure"]
    parent: typing.Optional["RecursiveStructure"] = None
    metadata: typing.Dict[str, typing.Union[str, int, bool]]

class SimpleNested(BaseModel):
    user: "User"
    address: "Address"
    metadata: "Metadata"

class SocialLinks(BaseModel):
    twitter: typing.Optional[str] = None
    github: typing.Optional[str] = None
    linkedin: typing.Optional[str] = None
    website: typing.Optional[str] = None

class Task(BaseModel):
    id: int
    title: str
    description: str
    assignee: str
    priority: typing.Union[typing_extensions.Literal['low'], typing_extensions.Literal['medium'], typing_extensions.Literal['high']]
    status: typing.Union[typing_extensions.Literal['todo'], typing_extensions.Literal['in_progress'], typing_extensions.Literal['done']]
    subtasks: typing.Optional[typing.List["Task"]] = None

class User(BaseModel):
    id: int
    name: str
    profile: "Profile"
    settings: "UserSettings"

class UserSettings(BaseModel):
    privacy: "PrivacySettings"
    display: "DisplaySettings"
    advanced: typing.Dict[str, str]

# #########################################################################
# Generated type aliases (0)
# #########################################################################

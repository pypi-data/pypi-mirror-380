// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type MediaAnalysisResultClassView struct {
    inner baml.ClassBuilder
}

func (t *MediaAnalysisResultClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MediaAnalysisResultClassView) PropertyTopics() (ClassPropertyView, error) {
    return t.inner.Property("topics")
}

func (t *MediaAnalysisResultClassView) PropertyAnalysisText() (ClassPropertyView, error) {
    return t.inner.Property("analysisText")
}


func (t *TypeBuilder) MediaAnalysisResult() (*MediaAnalysisResultClassView, error) {
	bld, err := t.inner.Class("MediaAnalysisResult")
	if err != nil {
		return nil, err
	}
	return &MediaAnalysisResultClassView{inner: bld}, nil
}

func (t *MediaAnalysisResultClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type MediaArrayAnalysisResultClassView struct {
    inner baml.ClassBuilder
}

func (t *MediaArrayAnalysisResultClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MediaArrayAnalysisResultClassView) PropertyAnalysisText() (ClassPropertyView, error) {
    return t.inner.Property("analysisText")
}

func (t *MediaArrayAnalysisResultClassView) PropertyMediaCount() (ClassPropertyView, error) {
    return t.inner.Property("mediaCount")
}


func (t *TypeBuilder) MediaArrayAnalysisResult() (*MediaArrayAnalysisResultClassView, error) {
	bld, err := t.inner.Class("MediaArrayAnalysisResult")
	if err != nil {
		return nil, err
	}
	return &MediaArrayAnalysisResultClassView{inner: bld}, nil
}

func (t *MediaArrayAnalysisResultClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type MediaMapAnalysisResultClassView struct {
    inner baml.ClassBuilder
}

func (t *MediaMapAnalysisResultClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MediaMapAnalysisResultClassView) PropertyAnalysisText() (ClassPropertyView, error) {
    return t.inner.Property("analysisText")
}

func (t *MediaMapAnalysisResultClassView) PropertyKeyCount() (ClassPropertyView, error) {
    return t.inner.Property("keyCount")
}

func (t *MediaMapAnalysisResultClassView) PropertyKeys() (ClassPropertyView, error) {
    return t.inner.Property("keys")
}


func (t *TypeBuilder) MediaMapAnalysisResult() (*MediaMapAnalysisResultClassView, error) {
	bld, err := t.inner.Class("MediaMapAnalysisResult")
	if err != nil {
		return nil, err
	}
	return &MediaMapAnalysisResultClassView{inner: bld}, nil
}

func (t *MediaMapAnalysisResultClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type MixedMediaAnalysisResultClassView struct {
    inner baml.ClassBuilder
}

func (t *MixedMediaAnalysisResultClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MixedMediaAnalysisResultClassView) PropertyTitle() (ClassPropertyView, error) {
    return t.inner.Property("title")
}

func (t *MixedMediaAnalysisResultClassView) PropertyDescription() (ClassPropertyView, error) {
    return t.inner.Property("description")
}

func (t *MixedMediaAnalysisResultClassView) PropertyHasImage() (ClassPropertyView, error) {
    return t.inner.Property("hasImage")
}

func (t *MixedMediaAnalysisResultClassView) PropertyHasVideo() (ClassPropertyView, error) {
    return t.inner.Property("hasVideo")
}

func (t *MixedMediaAnalysisResultClassView) PropertyHasAudio() (ClassPropertyView, error) {
    return t.inner.Property("hasAudio")
}

func (t *MixedMediaAnalysisResultClassView) PropertyHasPdf() (ClassPropertyView, error) {
    return t.inner.Property("hasPdf")
}

func (t *MixedMediaAnalysisResultClassView) PropertyAdditionalImageCount() (ClassPropertyView, error) {
    return t.inner.Property("additionalImageCount")
}

func (t *MixedMediaAnalysisResultClassView) PropertyMetadataKeys() (ClassPropertyView, error) {
    return t.inner.Property("metadataKeys")
}


func (t *TypeBuilder) MixedMediaAnalysisResult() (*MixedMediaAnalysisResultClassView, error) {
	bld, err := t.inner.Class("MixedMediaAnalysisResult")
	if err != nil {
		return nil, err
	}
	return &MixedMediaAnalysisResultClassView{inner: bld}, nil
}

func (t *MixedMediaAnalysisResultClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type OptionalMediaAnalysisResultClassView struct {
    inner baml.ClassBuilder
}

func (t *OptionalMediaAnalysisResultClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *OptionalMediaAnalysisResultClassView) PropertyAnalysisText() (ClassPropertyView, error) {
    return t.inner.Property("analysisText")
}

func (t *OptionalMediaAnalysisResultClassView) PropertyProvidedMediaTypes() (ClassPropertyView, error) {
    return t.inner.Property("providedMediaTypes")
}

func (t *OptionalMediaAnalysisResultClassView) PropertyMissingMediaTypes() (ClassPropertyView, error) {
    return t.inner.Property("missingMediaTypes")
}


func (t *TypeBuilder) OptionalMediaAnalysisResult() (*OptionalMediaAnalysisResultClassView, error) {
	bld, err := t.inner.Class("OptionalMediaAnalysisResult")
	if err != nil {
		return nil, err
	}
	return &OptionalMediaAnalysisResultClassView{inner: bld}, nil
}

func (t *OptionalMediaAnalysisResultClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

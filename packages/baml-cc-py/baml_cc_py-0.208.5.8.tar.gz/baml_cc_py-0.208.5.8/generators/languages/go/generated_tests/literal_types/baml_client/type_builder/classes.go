// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type BooleanLiteralsClassView struct {
    inner baml.ClassBuilder
}

func (t *BooleanLiteralsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *BooleanLiteralsClassView) PropertyAlwaysTrue() (ClassPropertyView, error) {
    return t.inner.Property("alwaysTrue")
}

func (t *BooleanLiteralsClassView) PropertyAlwaysFalse() (ClassPropertyView, error) {
    return t.inner.Property("alwaysFalse")
}

func (t *BooleanLiteralsClassView) PropertyEitherBool() (ClassPropertyView, error) {
    return t.inner.Property("eitherBool")
}


func (t *TypeBuilder) BooleanLiterals() (*BooleanLiteralsClassView, error) {
	bld, err := t.inner.Class("BooleanLiterals")
	if err != nil {
		return nil, err
	}
	return &BooleanLiteralsClassView{inner: bld}, nil
}

func (t *BooleanLiteralsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ComplexLiteralsClassView struct {
    inner baml.ClassBuilder
}

func (t *ComplexLiteralsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ComplexLiteralsClassView) PropertyState() (ClassPropertyView, error) {
    return t.inner.Property("state")
}

func (t *ComplexLiteralsClassView) PropertyRetryCount() (ClassPropertyView, error) {
    return t.inner.Property("retryCount")
}

func (t *ComplexLiteralsClassView) PropertyResponse() (ClassPropertyView, error) {
    return t.inner.Property("response")
}

func (t *ComplexLiteralsClassView) PropertyFlags() (ClassPropertyView, error) {
    return t.inner.Property("flags")
}

func (t *ComplexLiteralsClassView) PropertyCodes() (ClassPropertyView, error) {
    return t.inner.Property("codes")
}


func (t *TypeBuilder) ComplexLiterals() (*ComplexLiteralsClassView, error) {
	bld, err := t.inner.Class("ComplexLiterals")
	if err != nil {
		return nil, err
	}
	return &ComplexLiteralsClassView{inner: bld}, nil
}

func (t *ComplexLiteralsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type IntegerLiteralsClassView struct {
    inner baml.ClassBuilder
}

func (t *IntegerLiteralsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *IntegerLiteralsClassView) PropertyPriority() (ClassPropertyView, error) {
    return t.inner.Property("priority")
}

func (t *IntegerLiteralsClassView) PropertyHttpStatus() (ClassPropertyView, error) {
    return t.inner.Property("httpStatus")
}

func (t *IntegerLiteralsClassView) PropertyMaxRetries() (ClassPropertyView, error) {
    return t.inner.Property("maxRetries")
}


func (t *TypeBuilder) IntegerLiterals() (*IntegerLiteralsClassView, error) {
	bld, err := t.inner.Class("IntegerLiterals")
	if err != nil {
		return nil, err
	}
	return &IntegerLiteralsClassView{inner: bld}, nil
}

func (t *IntegerLiteralsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type MixedLiteralsClassView struct {
    inner baml.ClassBuilder
}

func (t *MixedLiteralsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MixedLiteralsClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *MixedLiteralsClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *MixedLiteralsClassView) PropertyLevel() (ClassPropertyView, error) {
    return t.inner.Property("level")
}

func (t *MixedLiteralsClassView) PropertyIsActive() (ClassPropertyView, error) {
    return t.inner.Property("isActive")
}

func (t *MixedLiteralsClassView) PropertyApiVersion() (ClassPropertyView, error) {
    return t.inner.Property("apiVersion")
}


func (t *TypeBuilder) MixedLiterals() (*MixedLiteralsClassView, error) {
	bld, err := t.inner.Class("MixedLiterals")
	if err != nil {
		return nil, err
	}
	return &MixedLiteralsClassView{inner: bld}, nil
}

func (t *MixedLiteralsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type StringLiteralsClassView struct {
    inner baml.ClassBuilder
}

func (t *StringLiteralsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *StringLiteralsClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}

func (t *StringLiteralsClassView) PropertyEnvironment() (ClassPropertyView, error) {
    return t.inner.Property("environment")
}

func (t *StringLiteralsClassView) PropertyMethod() (ClassPropertyView, error) {
    return t.inner.Property("method")
}


func (t *TypeBuilder) StringLiterals() (*StringLiteralsClassView, error) {
	bld, err := t.inner.Class("StringLiterals")
	if err != nil {
		return nil, err
	}
	return &StringLiteralsClassView{inner: bld}, nil
}

func (t *StringLiteralsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

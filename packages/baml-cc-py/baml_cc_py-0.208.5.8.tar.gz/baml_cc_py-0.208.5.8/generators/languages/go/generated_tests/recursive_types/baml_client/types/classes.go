// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package types

import (
    "encoding/json"
    "fmt"

    baml "github.com/boundaryml/baml/engine/language_client_go/pkg"
    "github.com/boundaryml/baml/engine/language_client_go/pkg/cffi"
)


type UseMyUnion struct {
    
U *Union3IntOrRecursive1OrString `json:"u"`
    
}

func (c *UseMyUnion) Decode(holder *cffi.CFFIValueClass, typeMap baml.TypeMap) {
	typeName := holder.Name
	if typeName.Namespace != cffi.CFFITypeNamespace_TYPES {
		panic(fmt.Sprintf("expected cffi.CFFITypeNamespace_TYPES, got %s", string(typeName.Namespace.String())))
	}
	if typeName.Name != "UseMyUnion" {
		panic(fmt.Sprintf("expected UseMyUnion, got %s", typeName.Name))
	}

   

	
	for _, field := range holder.Fields {
		key := field.Key
		valueHolder := field.Value
			switch key {
				
				case "u":
					c.U = baml.Decode(valueHolder).Interface().(*Union3IntOrRecursive1OrString)
				
		default:
			
			panic(fmt.Sprintf("unexpected field: %s in class UseMyUnion", key))
			
		}
	}

}

func (c UseMyUnion) Encode() (*cffi.CFFIValueHolder, error) {
    fields := map[string]any{}
    
    fields["u"] = c.U
    
    return baml.EncodeClass(c.BamlEncodeName, fields, nil)
}

func (c UseMyUnion) BamlTypeName() string {
    return "UseMyUnion"
}

func (u UseMyUnion) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Namespace: cffi.CFFITypeNamespace_TYPES,
        Name:      "UseMyUnion",
    }
}


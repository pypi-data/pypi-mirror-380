// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package baml_client

var file_map = map[string]string{
  
  "baml_src/main.baml": "type JSON = string | null | int | float | map<string, JSON> | JSON[]\n\nfunction Foo(x: int) -> JSON {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        print out a json object with the following fields:\n        - a: {{ x }}\n        - b: \"hello\"\n        - c: [1, 2, 3]\n        - d: { \"e\": [\"f\"] }\n        - f: null\n        - g: 1.0\n        - h: { a: 1, b: null, c: [1, 2, 3] }\n        \n        {{ ctx.output_format }}\n    \"#\n}\n\nfunction JsonInput(x: JSON) -> JSON {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        repeat back to me:\n        {{ x }}\n        \n        {{ ctx.output_format }}\n    \"#\n}\n\n// This union uses a mix of recursive and non-recursive types.\n// It is meant to test that codegeneration simplifies to\n// a smaller union before generation of a Go type.\n//\n// Should generate a union in the client like:\n// type Recursive1 = int | Recursive1[]\n// int | Recursive1[] | string | null\ntype MyUnion = Recursive1 | Nonrecursive1 | Nonrecursive2\n\ntype Recursive1 = int | Recursive1[]\n\ntype Nonrecursive1 = int | null\n\ntype Nonrecursive2 = (null | string) | null | (null | null)\n\nclass UseMyUnion {\n    u MyUnion\n}\n",  
}

func getBamlFiles() map[string]string {
  return file_map
}
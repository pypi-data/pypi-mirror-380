// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type ArrayWithConstraintsClassView struct {
    inner baml.ClassBuilder
}

func (t *ArrayWithConstraintsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ArrayWithConstraintsClassView) PropertyNonEmptyStrings() (ClassPropertyView, error) {
    return t.inner.Property("nonEmptyStrings")
}

func (t *ArrayWithConstraintsClassView) PropertyLimitedInts() (ClassPropertyView, error) {
    return t.inner.Property("limitedInts")
}

func (t *ArrayWithConstraintsClassView) PropertyPositiveFloats() (ClassPropertyView, error) {
    return t.inner.Property("positiveFloats")
}


func (t *TypeBuilder) ArrayWithConstraints() (*ArrayWithConstraintsClassView, error) {
	bld, err := t.inner.Class("ArrayWithConstraints")
	if err != nil {
		return nil, err
	}
	return &ArrayWithConstraintsClassView{inner: bld}, nil
}

func (t *ArrayWithConstraintsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type MixedArraysClassView struct {
    inner baml.ClassBuilder
}

func (t *MixedArraysClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MixedArraysClassView) PropertyPrimitiveArray() (ClassPropertyView, error) {
    return t.inner.Property("primitiveArray")
}

func (t *MixedArraysClassView) PropertyNullableArray() (ClassPropertyView, error) {
    return t.inner.Property("nullableArray")
}

func (t *MixedArraysClassView) PropertyOptionalItems() (ClassPropertyView, error) {
    return t.inner.Property("optionalItems")
}

func (t *MixedArraysClassView) PropertyArrayOfArrays() (ClassPropertyView, error) {
    return t.inner.Property("arrayOfArrays")
}

func (t *MixedArraysClassView) PropertyComplexMixed() (ClassPropertyView, error) {
    return t.inner.Property("complexMixed")
}


func (t *TypeBuilder) MixedArrays() (*MixedArraysClassView, error) {
	bld, err := t.inner.Class("MixedArrays")
	if err != nil {
		return nil, err
	}
	return &MixedArraysClassView{inner: bld}, nil
}

func (t *MixedArraysClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type NestedArraysClassView struct {
    inner baml.ClassBuilder
}

func (t *NestedArraysClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *NestedArraysClassView) PropertyMatrix() (ClassPropertyView, error) {
    return t.inner.Property("matrix")
}

func (t *NestedArraysClassView) PropertyStringMatrix() (ClassPropertyView, error) {
    return t.inner.Property("stringMatrix")
}

func (t *NestedArraysClassView) PropertyThreeDimensional() (ClassPropertyView, error) {
    return t.inner.Property("threeDimensional")
}


func (t *TypeBuilder) NestedArrays() (*NestedArraysClassView, error) {
	bld, err := t.inner.Class("NestedArrays")
	if err != nil {
		return nil, err
	}
	return &NestedArraysClassView{inner: bld}, nil
}

func (t *NestedArraysClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ObjectArraysClassView struct {
    inner baml.ClassBuilder
}

func (t *ObjectArraysClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ObjectArraysClassView) PropertyUsers() (ClassPropertyView, error) {
    return t.inner.Property("users")
}

func (t *ObjectArraysClassView) PropertyProducts() (ClassPropertyView, error) {
    return t.inner.Property("products")
}

func (t *ObjectArraysClassView) PropertyTags() (ClassPropertyView, error) {
    return t.inner.Property("tags")
}


func (t *TypeBuilder) ObjectArrays() (*ObjectArraysClassView, error) {
	bld, err := t.inner.Class("ObjectArrays")
	if err != nil {
		return nil, err
	}
	return &ObjectArraysClassView{inner: bld}, nil
}

func (t *ObjectArraysClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ProductClassView struct {
    inner baml.ClassBuilder
}

func (t *ProductClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ProductClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *ProductClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *ProductClassView) PropertyPrice() (ClassPropertyView, error) {
    return t.inner.Property("price")
}

func (t *ProductClassView) PropertyTags() (ClassPropertyView, error) {
    return t.inner.Property("tags")
}

func (t *ProductClassView) PropertyInStock() (ClassPropertyView, error) {
    return t.inner.Property("inStock")
}


func (t *TypeBuilder) Product() (*ProductClassView, error) {
	bld, err := t.inner.Class("Product")
	if err != nil {
		return nil, err
	}
	return &ProductClassView{inner: bld}, nil
}

func (t *ProductClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SimpleArraysClassView struct {
    inner baml.ClassBuilder
}

func (t *SimpleArraysClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SimpleArraysClassView) PropertyStrings() (ClassPropertyView, error) {
    return t.inner.Property("strings")
}

func (t *SimpleArraysClassView) PropertyIntegers() (ClassPropertyView, error) {
    return t.inner.Property("integers")
}

func (t *SimpleArraysClassView) PropertyFloats() (ClassPropertyView, error) {
    return t.inner.Property("floats")
}

func (t *SimpleArraysClassView) PropertyBooleans() (ClassPropertyView, error) {
    return t.inner.Property("booleans")
}


func (t *TypeBuilder) SimpleArrays() (*SimpleArraysClassView, error) {
	bld, err := t.inner.Class("SimpleArrays")
	if err != nil {
		return nil, err
	}
	return &SimpleArraysClassView{inner: bld}, nil
}

func (t *SimpleArraysClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type TagClassView struct {
    inner baml.ClassBuilder
}

func (t *TagClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *TagClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *TagClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *TagClassView) PropertyColor() (ClassPropertyView, error) {
    return t.inner.Property("color")
}


func (t *TypeBuilder) Tag() (*TagClassView, error) {
	bld, err := t.inner.Class("Tag")
	if err != nil {
		return nil, err
	}
	return &TagClassView{inner: bld}, nil
}

func (t *TagClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UserClassView struct {
    inner baml.ClassBuilder
}

func (t *UserClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UserClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *UserClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *UserClassView) PropertyEmail() (ClassPropertyView, error) {
    return t.inner.Property("email")
}

func (t *UserClassView) PropertyIsActive() (ClassPropertyView, error) {
    return t.inner.Property("isActive")
}


func (t *TypeBuilder) User() (*UserClassView, error) {
	bld, err := t.inner.Class("User")
	if err != nil {
		return nil, err
	}
	return &UserClassView{inner: bld}, nil
}

func (t *UserClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

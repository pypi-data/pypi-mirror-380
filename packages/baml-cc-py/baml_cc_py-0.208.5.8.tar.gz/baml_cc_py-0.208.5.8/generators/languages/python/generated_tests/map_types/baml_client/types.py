# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (1)
# #########################################################################

class Status(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    PENDING = "PENDING"

# #########################################################################
# Generated classes (8)
# #########################################################################

class ComplexMaps(BaseModel):
    userMap: typing.Dict[str, "User"]
    productMap: typing.Dict[str, "Product"]
    nestedMap: typing.Dict[str, typing.Dict[str, str]]
    arrayMap: typing.Dict[str, typing.List[int]]
    mapArray: typing.List[typing.Dict[str, str]]

class Config(BaseModel):
    url: str
    port: int
    debug: bool

class EdgeCaseMaps(BaseModel):
    emptyMap: typing.Dict[str, str]
    nullableValues: typing.Dict[str, typing.Optional[str]]
    optionalValues: typing.Dict[str, typing.Optional[str]]
    unionValues: typing.Dict[str, typing.Union[str, int, bool]]

class MixedKeyMaps(BaseModel):
    stringIntMap: typing.Dict[str, int]
    intStringMap: typing.Dict[str, str]
    enumMap: typing.Dict[str, str]
    literalMap: typing.Dict[str, "Config"]

class NestedMaps(BaseModel):
    simple: typing.Dict[str, str]
    oneLevelNested: typing.Dict[str, typing.Dict[str, int]]
    twoLevelNested: typing.Dict[str, typing.Dict[str, typing.Dict[str, bool]]]
    mapOfArrays: typing.Dict[str, typing.List[str]]
    mapOfMaps: typing.Dict[str, typing.Dict[str, float]]

class Product(BaseModel):
    id: int
    name: str
    price: float
    tags: typing.List[str]

class SimpleMaps(BaseModel):
    stringToString: typing.Dict[str, str]
    stringToInt: typing.Dict[str, int]
    stringToFloat: typing.Dict[str, float]
    stringToBool: typing.Dict[str, bool]
    intToString: typing.Dict[str, str]

class User(BaseModel):
    id: int
    name: str
    email: str
    active: bool

# #########################################################################
# Generated type aliases (0)
# #########################################################################

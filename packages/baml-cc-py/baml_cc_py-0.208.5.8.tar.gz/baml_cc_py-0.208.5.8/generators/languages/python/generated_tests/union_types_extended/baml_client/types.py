# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (23)
# #########################################################################

class Admin(BaseModel):
    id: int
    name: str
    permissions: typing.List[str]
    type: typing_extensions.Literal['admin']

class ApiError(BaseModel):
    status: typing_extensions.Literal['error']
    message: str
    code: int

class ApiPending(BaseModel):
    status: typing_extensions.Literal['pending']
    progress: float
    eta: typing.Optional[int] = None

class ApiSuccess(BaseModel):
    status: typing_extensions.Literal['success']
    data: typing.Dict[str, str]

class Bird(BaseModel):
    species: typing_extensions.Literal['bird']
    canFly: bool
    wingspan: typing.Optional[float] = None

class Cat(BaseModel):
    species: typing_extensions.Literal['cat']
    color: str
    lives: int

class Circle(BaseModel):
    shape: typing_extensions.Literal['circle']
    radius: float

class ComplexUnions(BaseModel):
    userOrProduct: typing.Union["User", "Product"]
    userOrProductOrAdmin: typing.Union["User", "Product", "Admin"]
    dataOrError: typing.Union["DataResponse", "ErrorResponse"]
    resultOrNull: typing.Optional["Result"] = None
    multiTypeResult: typing.Union["Success", "Warning", "Error"]

class DataResponse(BaseModel):
    data: str
    timestamp: int
    status: typing_extensions.Literal['success']

class DiscriminatedUnions(BaseModel):
    shape: typing.Union["Circle", "Rectangle", "Triangle"]
    animal: typing.Union["Dog", "Cat", "Bird"]
    response: typing.Union["ApiSuccess", "ApiError", "ApiPending"]

class Dog(BaseModel):
    species: typing_extensions.Literal['dog']
    breed: str
    goodBoy: bool

class Error(BaseModel):
    type: typing_extensions.Literal['error']
    message: str
    code: int
    details: typing.Optional[str] = None

class ErrorResponse(BaseModel):
    error: str
    code: int
    status: typing_extensions.Literal['error']

class PrimitiveUnions(BaseModel):
    stringOrInt: typing.Union[str, int]
    stringOrFloat: typing.Union[str, float]
    intOrFloat: typing.Union[int, float]
    boolOrString: typing.Union[bool, str]
    anyPrimitive: typing.Union[str, int, float, bool]

class Product(BaseModel):
    id: int
    name: str
    price: float
    type: typing_extensions.Literal['product']

class Rectangle(BaseModel):
    shape: typing_extensions.Literal['rectangle']
    width: float
    height: float

class RecursiveUnion(BaseModel):
    value: typing.Union[str, int, "RecursiveUnion"]
    children: typing.List[typing.Union[str, "RecursiveUnion"]]

class Result(BaseModel):
    value: typing.Union[str, int, float]
    metadata: typing.Dict[str, str]

class Success(BaseModel):
    type: typing_extensions.Literal['success']
    message: str
    data: typing.Dict[str, str]

class Triangle(BaseModel):
    shape: typing_extensions.Literal['triangle']
    base: float
    height: float

class UnionArrays(BaseModel):
    mixedArray: typing.List[typing.Union[str, int]]
    nullableItems: typing.List[typing.Optional[str]]
    objectArray: typing.List[typing.Union["User", "Product"]]
    nestedUnionArray: typing.List[typing.Union[str, typing.List[int]]]

class User(BaseModel):
    id: int
    name: str
    type: typing_extensions.Literal['user']

class Warning(BaseModel):
    type: typing_extensions.Literal['warning']
    message: str
    level: int

# #########################################################################
# Generated type aliases (0)
# #########################################################################

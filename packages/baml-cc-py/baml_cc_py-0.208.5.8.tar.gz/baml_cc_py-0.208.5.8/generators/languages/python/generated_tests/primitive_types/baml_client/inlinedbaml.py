# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "baml_src/main.baml": "// Test all primitive types in BAML\n\nclass PrimitiveTypes {\n  stringField string\n  intField int\n  floatField float\n  boolField bool\n  nullField null\n}\n\nclass PrimitiveArrays {\n  stringArray string[]\n  intArray int[]\n  floatArray float[]\n  boolArray bool[]\n}\n\nclass PrimitiveMaps {\n  stringMap map<string, string>\n  intMap map<string, int>\n  floatMap map<string, float>\n  boolMap map<string, bool>\n}\n\nclass MixedPrimitives {\n  name string\n  age int\n  height float\n  isActive bool\n  metadata null\n  tags string[]\n  scores int[]\n  measurements float[]\n  flags bool[]\n}\n\nfunction TestPrimitiveTypes(input: string) -> PrimitiveTypes {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a PrimitiveTypes object with the following values:\n    - stringField: \"Hello, BAML!\"\n    - intField: 42\n    - floatField: 3.14159\n    - boolField: true\n    - nullField: null\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestPrimitiveArrays(input: string) -> PrimitiveArrays {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a PrimitiveArrays object with the following values:\n    - stringArray: [\"hello\", \"world\", \"baml\"]\n    - intArray: [1, 2, 3, 4, 5]\n    - floatArray: [1.1, 2.2, 3.3, 4.4]\n    - boolArray: [true, false, true, false]\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestPrimitiveMaps(input: string) -> PrimitiveMaps {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a PrimitiveMaps object with the following values:\n    - stringMap: {\"key1\": \"value1\", \"key2\": \"value2\"}\n    - intMap: {\"one\": 1, \"two\": 2, \"three\": 3}\n    - floatMap: {\"pi\": 3.14159, \"e\": 2.71828}\n    - boolMap: {\"isTrue\": true, \"isFalse\": false}\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestMixedPrimitives(input: string) -> MixedPrimitives {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a MixedPrimitives object with realistic test data.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestEmptyCollections(input: string) -> PrimitiveArrays {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a PrimitiveArrays object with all empty arrays.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\n// Test functions for top-level primitive types\nfunction TestTopLevelString(input: string) -> string {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return the string \"Hello from BAML!\" exactly as written.\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelInt(input: string) -> int {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return the integer 42.\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelFloat(input: string) -> float {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return the floating point number 3.14159.\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelBool(input: string) -> bool {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return the boolean value true.\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelNull(input: string) -> null {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return null.\n    \n    Input: {{ input }}\n  \"#\n}",
}

def get_baml_files():
    return _file_map
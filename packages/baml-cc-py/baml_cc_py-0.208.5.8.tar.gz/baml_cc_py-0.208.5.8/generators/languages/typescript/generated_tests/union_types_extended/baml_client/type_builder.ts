/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export { FieldType, EnumBuilder, ClassBuilder }

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    Admin: ClassViewer<'Admin', "id" | "name" | "permissions" | "type">;
    
    ApiError: ClassViewer<'ApiError', "status" | "message" | "code">;
    
    ApiPending: ClassViewer<'ApiPending', "status" | "progress" | "eta">;
    
    ApiSuccess: ClassViewer<'ApiSuccess', "status" | "data">;
    
    Bird: ClassViewer<'Bird', "species" | "canFly" | "wingspan">;
    
    Cat: ClassViewer<'Cat', "species" | "color" | "lives">;
    
    Circle: ClassViewer<'Circle', "shape" | "radius">;
    
    ComplexUnions: ClassViewer<'ComplexUnions', "userOrProduct" | "userOrProductOrAdmin" | "dataOrError" | "resultOrNull" | "multiTypeResult">;
    
    DataResponse: ClassViewer<'DataResponse', "data" | "timestamp" | "status">;
    
    DiscriminatedUnions: ClassViewer<'DiscriminatedUnions', "shape" | "animal" | "response">;
    
    Dog: ClassViewer<'Dog', "species" | "breed" | "goodBoy">;
    
    Error: ClassViewer<'Error', "type" | "message" | "code" | "details">;
    
    ErrorResponse: ClassViewer<'ErrorResponse', "error" | "code" | "status">;
    
    PrimitiveUnions: ClassViewer<'PrimitiveUnions', "stringOrInt" | "stringOrFloat" | "intOrFloat" | "boolOrString" | "anyPrimitive">;
    
    Product: ClassViewer<'Product', "id" | "name" | "price" | "type">;
    
    Rectangle: ClassViewer<'Rectangle', "shape" | "width" | "height">;
    
    RecursiveUnion: ClassViewer<'RecursiveUnion', "value" | "children">;
    
    Result: ClassViewer<'Result', "value" | "metadata">;
    
    Success: ClassViewer<'Success', "type" | "message" | "data">;
    
    Triangle: ClassViewer<'Triangle', "shape" | "base" | "height">;
    
    UnionArrays: ClassViewer<'UnionArrays', "mixedArray" | "nullableItems" | "objectArray" | "nestedUnionArray">;
    
    User: ClassViewer<'User', "id" | "name" | "type">;
    
    Warning: ClassViewer<'Warning', "type" | "message" | "level">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "Admin","ApiError","ApiPending","ApiSuccess","Bird","Cat","Circle","ComplexUnions","DataResponse","DiscriminatedUnions","Dog","Error","ErrorResponse","PrimitiveUnions","Product","Rectangle","RecursiveUnion","Result","Success","Triangle","UnionArrays","User","Warning",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.Admin = this.tb.classViewer("Admin", [
          "id","name","permissions","type",
        ]);
        
        this.ApiError = this.tb.classViewer("ApiError", [
          "status","message","code",
        ]);
        
        this.ApiPending = this.tb.classViewer("ApiPending", [
          "status","progress","eta",
        ]);
        
        this.ApiSuccess = this.tb.classViewer("ApiSuccess", [
          "status","data",
        ]);
        
        this.Bird = this.tb.classViewer("Bird", [
          "species","canFly","wingspan",
        ]);
        
        this.Cat = this.tb.classViewer("Cat", [
          "species","color","lives",
        ]);
        
        this.Circle = this.tb.classViewer("Circle", [
          "shape","radius",
        ]);
        
        this.ComplexUnions = this.tb.classViewer("ComplexUnions", [
          "userOrProduct","userOrProductOrAdmin","dataOrError","resultOrNull","multiTypeResult",
        ]);
        
        this.DataResponse = this.tb.classViewer("DataResponse", [
          "data","timestamp","status",
        ]);
        
        this.DiscriminatedUnions = this.tb.classViewer("DiscriminatedUnions", [
          "shape","animal","response",
        ]);
        
        this.Dog = this.tb.classViewer("Dog", [
          "species","breed","goodBoy",
        ]);
        
        this.Error = this.tb.classViewer("Error", [
          "type","message","code","details",
        ]);
        
        this.ErrorResponse = this.tb.classViewer("ErrorResponse", [
          "error","code","status",
        ]);
        
        this.PrimitiveUnions = this.tb.classViewer("PrimitiveUnions", [
          "stringOrInt","stringOrFloat","intOrFloat","boolOrString","anyPrimitive",
        ]);
        
        this.Product = this.tb.classViewer("Product", [
          "id","name","price","type",
        ]);
        
        this.Rectangle = this.tb.classViewer("Rectangle", [
          "shape","width","height",
        ]);
        
        this.RecursiveUnion = this.tb.classViewer("RecursiveUnion", [
          "value","children",
        ]);
        
        this.Result = this.tb.classViewer("Result", [
          "value","metadata",
        ]);
        
        this.Success = this.tb.classViewer("Success", [
          "type","message","data",
        ]);
        
        this.Triangle = this.tb.classViewer("Triangle", [
          "shape","base","height",
        ]);
        
        this.UnionArrays = this.tb.classViewer("UnionArrays", [
          "mixedArray","nullableItems","objectArray","nestedUnionArray",
        ]);
        
        this.User = this.tb.classViewer("User", [
          "id","name","type",
        ]);
        
        this.Warning = this.tb.classViewer("Warning", [
          "type","message","level",
        ]);
        
        
    }

    reset(): void {
        this.tb.reset();
        // TODO: This should happen in Rust. Problem is, when we construct the
        // typebuilder we instantiate class builders once and it seems to make
        // a JS copy, bypassing the Rust side? In Python however, every time we
        // access a class builder with @property, we get a new instance that
        // wraps over the Rust type builder, so we only need to call tb.reset().
        // In JS it's not possible unless we refactor the way class builders are
        // accessed.
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}
/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "baml_src/main.baml": "// Test extended union types in BAML\n\nclass PrimitiveUnions {\n  stringOrInt string | int\n  stringOrFloat string | float\n  intOrFloat int | float\n  boolOrString bool | string\n  anyPrimitive string | int | float | bool\n}\n\nclass UnionArrays {\n  mixedArray (string | int)[]\n  nullableItems (string | null)[]\n  objectArray (User | Product)[]\n  nestedUnionArray (string | int[])[]\n}\n\nclass User {\n  id int\n  name string\n  type \"user\"\n}\n\nclass Product {\n  id int\n  name string\n  price float\n  type \"product\"\n}\n\nclass Admin {\n  id int\n  name string\n  permissions string[]\n  type \"admin\"\n}\n\nclass ComplexUnions {\n  userOrProduct User | Product\n  userOrProductOrAdmin User | Product | Admin\n  dataOrError DataResponse | ErrorResponse\n  resultOrNull Result | null\n  multiTypeResult Success | Warning | Error\n}\n\nclass DataResponse {\n  data string\n  timestamp int\n  status \"success\"\n}\n\nclass ErrorResponse {\n  error string\n  code int\n  status \"error\"\n}\n\nclass Result {\n  value string | int | float\n  metadata map<string, string>\n}\n\nclass Success {\n  type \"success\"\n  message string\n  data map<string, string>\n}\n\nclass Warning {\n  type \"warning\"\n  message string\n  level int\n}\n\nclass Error {\n  type \"error\"\n  message string\n  code int\n  details string?\n}\n\nclass DiscriminatedUnions {\n  shape Circle | Rectangle | Triangle\n  animal Dog | Cat | Bird\n  response ApiSuccess | ApiError | ApiPending\n}\n\nclass Circle {\n  shape \"circle\"\n  radius float\n}\n\nclass Rectangle {\n  shape \"rectangle\"\n  width float\n  height float\n}\n\nclass Triangle {\n  shape \"triangle\"\n  base float\n  height float\n}\n\nclass Dog {\n  species \"dog\"\n  breed string\n  goodBoy bool\n}\n\nclass Cat {\n  species \"cat\"\n  color string\n  lives int\n}\n\nclass Bird {\n  species \"bird\"\n  canFly bool\n  wingspan float?\n}\n\nclass ApiSuccess {\n  status \"success\"\n  data map<string, string>\n}\n\nclass ApiError {\n  status \"error\"\n  message string\n  code int\n}\n\nclass ApiPending {\n  status \"pending\"\n  progress float\n  eta int?\n}\n\nclass RecursiveUnion {\n  value string | int | RecursiveUnion\n  children (string | RecursiveUnion)[]\n}\n\nfunction TestPrimitiveUnions(input: string) -> PrimitiveUnions {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a PrimitiveUnions object with:\n    - stringOrInt: 42 (as int)\n    - stringOrFloat: \"hello\" (as string)\n    - intOrFloat: 3.14 (as float)\n    - boolOrString: true (as bool)\n    - anyPrimitive: \"mixed\" (as string)\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestComplexUnions(input: string) -> ComplexUnions {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a ComplexUnions object with various union types populated.\n    Mix between different types in the unions.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestDiscriminatedUnions(input: string) -> DiscriminatedUnions {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a DiscriminatedUnions object with:\n    - shape: a circle with radius 5.0\n    - animal: a dog that is a golden retriever and is a good boy\n    - response: an error with message \"Not found\" and code 404\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestUnionArrays(input: string) -> UnionArrays {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a UnionArrays object with:\n    - mixedArray: [\"hello\", 1, \"world\", 2]\n    - nullableItems: [\"present\", null, \"also present\", null]\n    - objectArray: mix of User and Product objects\n    - nestedUnionArray: [\"string\", [1, 2, 3], \"another\", [4, 5]]\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}
/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export { FieldType, EnumBuilder, ClassBuilder }

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    Address: ClassViewer<'Address', "street" | "city" | "state" | "country" | "postalCode" | "coordinates">;
    
    Approval: ClassViewer<'Approval', "approver" | "date" | "amount" | "notes">;
    
    Budget: ClassViewer<'Budget', "total" | "spent" | "categories" | "approvals">;
    
    Company: ClassViewer<'Company', "id" | "name" | "address" | "departments" | "metadata">;
    
    CompanyMetadata: ClassViewer<'CompanyMetadata', "founded" | "industry" | "size" | "certifications" | "partnerships">;
    
    ComplexNested: ClassViewer<'ComplexNested', "company" | "employees" | "projects">;
    
    Contact: ClassViewer<'Contact', "name" | "relationship" | "phone" | "email">;
    
    Coordinates: ClassViewer<'Coordinates', "latitude" | "longitude">;
    
    DeeplyNested: ClassViewer<'DeeplyNested', "level1">;
    
    Department: ClassViewer<'Department', "id" | "name" | "manager" | "members" | "budget" | "projects">;
    
    DisplaySettings: ClassViewer<'DisplaySettings', "fontSize" | "colorScheme" | "layout">;
    
    Employee: ClassViewer<'Employee', "id" | "name" | "email" | "role" | "department" | "skills" | "address" | "emergencyContact">;
    
    Level1: ClassViewer<'Level1', "data" | "level2">;
    
    Level2: ClassViewer<'Level2', "data" | "level3">;
    
    Level3: ClassViewer<'Level3', "data" | "level4">;
    
    Level4: ClassViewer<'Level4', "data" | "level5">;
    
    Level5: ClassViewer<'Level5', "data" | "items" | "mapping">;
    
    Metadata: ClassViewer<'Metadata', "createdAt" | "updatedAt" | "version" | "tags" | "attributes">;
    
    Milestone: ClassViewer<'Milestone', "id" | "name" | "dueDate" | "completed" | "tasks">;
    
    NotificationSettings: ClassViewer<'NotificationSettings', "email" | "push" | "sms" | "frequency">;
    
    Preferences: ClassViewer<'Preferences', "theme" | "language" | "notifications">;
    
    PrivacySettings: ClassViewer<'PrivacySettings', "profileVisibility" | "showEmail" | "showPhone">;
    
    Profile: ClassViewer<'Profile', "bio" | "avatar" | "social" | "preferences">;
    
    Project: ClassViewer<'Project', "id" | "name" | "description" | "status" | "team" | "milestones" | "budget">;
    
    RecursiveStructure: ClassViewer<'RecursiveStructure', "id" | "name" | "children" | "parent" | "metadata">;
    
    SimpleNested: ClassViewer<'SimpleNested', "user" | "address" | "metadata">;
    
    SocialLinks: ClassViewer<'SocialLinks', "twitter" | "github" | "linkedin" | "website">;
    
    Task: ClassViewer<'Task', "id" | "title" | "description" | "assignee" | "priority" | "status" | "subtasks">;
    
    User: ClassViewer<'User', "id" | "name" | "profile" | "settings">;
    
    UserSettings: ClassViewer<'UserSettings', "privacy" | "display" | "advanced">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "Address","Approval","Budget","Company","CompanyMetadata","ComplexNested","Contact","Coordinates","DeeplyNested","Department","DisplaySettings","Employee","Level1","Level2","Level3","Level4","Level5","Metadata","Milestone","NotificationSettings","Preferences","PrivacySettings","Profile","Project","RecursiveStructure","SimpleNested","SocialLinks","Task","User","UserSettings",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.Address = this.tb.classViewer("Address", [
          "street","city","state","country","postalCode","coordinates",
        ]);
        
        this.Approval = this.tb.classViewer("Approval", [
          "approver","date","amount","notes",
        ]);
        
        this.Budget = this.tb.classViewer("Budget", [
          "total","spent","categories","approvals",
        ]);
        
        this.Company = this.tb.classViewer("Company", [
          "id","name","address","departments","metadata",
        ]);
        
        this.CompanyMetadata = this.tb.classViewer("CompanyMetadata", [
          "founded","industry","size","certifications","partnerships",
        ]);
        
        this.ComplexNested = this.tb.classViewer("ComplexNested", [
          "company","employees","projects",
        ]);
        
        this.Contact = this.tb.classViewer("Contact", [
          "name","relationship","phone","email",
        ]);
        
        this.Coordinates = this.tb.classViewer("Coordinates", [
          "latitude","longitude",
        ]);
        
        this.DeeplyNested = this.tb.classViewer("DeeplyNested", [
          "level1",
        ]);
        
        this.Department = this.tb.classViewer("Department", [
          "id","name","manager","members","budget","projects",
        ]);
        
        this.DisplaySettings = this.tb.classViewer("DisplaySettings", [
          "fontSize","colorScheme","layout",
        ]);
        
        this.Employee = this.tb.classViewer("Employee", [
          "id","name","email","role","department","skills","address","emergencyContact",
        ]);
        
        this.Level1 = this.tb.classViewer("Level1", [
          "data","level2",
        ]);
        
        this.Level2 = this.tb.classViewer("Level2", [
          "data","level3",
        ]);
        
        this.Level3 = this.tb.classViewer("Level3", [
          "data","level4",
        ]);
        
        this.Level4 = this.tb.classViewer("Level4", [
          "data","level5",
        ]);
        
        this.Level5 = this.tb.classViewer("Level5", [
          "data","items","mapping",
        ]);
        
        this.Metadata = this.tb.classViewer("Metadata", [
          "createdAt","updatedAt","version","tags","attributes",
        ]);
        
        this.Milestone = this.tb.classViewer("Milestone", [
          "id","name","dueDate","completed","tasks",
        ]);
        
        this.NotificationSettings = this.tb.classViewer("NotificationSettings", [
          "email","push","sms","frequency",
        ]);
        
        this.Preferences = this.tb.classViewer("Preferences", [
          "theme","language","notifications",
        ]);
        
        this.PrivacySettings = this.tb.classViewer("PrivacySettings", [
          "profileVisibility","showEmail","showPhone",
        ]);
        
        this.Profile = this.tb.classViewer("Profile", [
          "bio","avatar","social","preferences",
        ]);
        
        this.Project = this.tb.classViewer("Project", [
          "id","name","description","status","team","milestones","budget",
        ]);
        
        this.RecursiveStructure = this.tb.classViewer("RecursiveStructure", [
          "id","name","children","parent","metadata",
        ]);
        
        this.SimpleNested = this.tb.classViewer("SimpleNested", [
          "user","address","metadata",
        ]);
        
        this.SocialLinks = this.tb.classViewer("SocialLinks", [
          "twitter","github","linkedin","website",
        ]);
        
        this.Task = this.tb.classViewer("Task", [
          "id","title","description","assignee","priority","status","subtasks",
        ]);
        
        this.User = this.tb.classViewer("User", [
          "id","name","profile","settings",
        ]);
        
        this.UserSettings = this.tb.classViewer("UserSettings", [
          "privacy","display","advanced",
        ]);
        
        
    }

    reset(): void {
        this.tb.reset();
        // TODO: This should happen in Rust. Problem is, when we construct the
        // typebuilder we instantiate class builders once and it seems to make
        // a JS copy, bypassing the Rust side? In Python however, every time we
        // access a class builder with @property, we get a new instance that
        // wraps over the Rust type builder, so we only need to call tb.reset().
        // In JS it's not possible unless we refactor the way class builders are
        // accessed.
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}
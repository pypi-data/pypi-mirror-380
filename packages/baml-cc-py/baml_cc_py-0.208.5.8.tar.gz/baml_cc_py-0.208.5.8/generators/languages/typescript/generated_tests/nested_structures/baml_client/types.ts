/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface Address {
  street: string
  city: string
  state: string
  country: string
  postalCode: string
  coordinates?: Coordinates | null
  
}

export interface Approval {
  approver: string
  date: string
  amount: number
  notes?: string | null
  
}

export interface Budget {
  total: number
  spent: number
  categories: Record<string, number>
  approvals: Approval[]
  
}

export interface Company {
  id: number
  name: string
  address: Address
  departments: Department[]
  metadata: CompanyMetadata
  
}

export interface CompanyMetadata {
  founded: string
  industry: string
  size: "small" | "medium" | "large" | "enterprise"
  certifications: string[]
  partnerships?: Company[] | null
  
}

export interface ComplexNested {
  company: Company
  employees: Employee[]
  projects: Project[]
  
}

export interface Contact {
  name: string
  relationship: string
  phone: string
  email?: string | null
  
}

export interface Coordinates {
  latitude: number
  longitude: number
  
}

export interface DeeplyNested {
  level1: Level1
  
}

export interface Department {
  id: number
  name: string
  manager?: Employee | null
  members: Employee[]
  budget: number
  projects: Project[]
  
}

export interface DisplaySettings {
  fontSize: number
  colorScheme: string
  layout: "grid" | "list"
  
}

export interface Employee {
  id: number
  name: string
  email: string
  role: string
  department: string
  skills: string[]
  address?: Address | null
  emergencyContact?: Contact | null
  
}

export interface Level1 {
  data: string
  level2: Level2
  
}

export interface Level2 {
  data: string
  level3: Level3
  
}

export interface Level3 {
  data: string
  level4: Level4
  
}

export interface Level4 {
  data: string
  level5: Level5
  
}

export interface Level5 {
  data: string
  items: string[]
  mapping: Record<string, number>
  
}

export interface Metadata {
  createdAt: string
  updatedAt: string
  version: number
  tags: string[]
  attributes: Record<string, string>
  
}

export interface Milestone {
  id: number
  name: string
  dueDate: string
  completed: boolean
  tasks: Task[]
  
}

export interface NotificationSettings {
  email: boolean
  push: boolean
  sms: boolean
  frequency: "immediate" | "daily" | "weekly"
  
}

export interface Preferences {
  theme: "light" | "dark"
  language: string
  notifications: NotificationSettings
  
}

export interface PrivacySettings {
  profileVisibility: "public" | "private" | "friends"
  showEmail: boolean
  showPhone: boolean
  
}

export interface Profile {
  bio: string
  avatar: string
  social: SocialLinks
  preferences: Preferences
  
}

export interface Project {
  id: number
  name: string
  description: string
  status: "planning" | "active" | "completed" | "cancelled"
  team: Employee[]
  milestones: Milestone[]
  budget: Budget
  
}

export interface RecursiveStructure {
  id: number
  name: string
  children: RecursiveStructure[]
  parent?: RecursiveStructure | null
  metadata: Record<string, string | number | boolean>
  
}

export interface SimpleNested {
  user: User
  address: Address
  metadata: Metadata
  
}

export interface SocialLinks {
  twitter?: string | null
  github?: string | null
  linkedin?: string | null
  website?: string | null
  
}

export interface Task {
  id: number
  title: string
  description: string
  assignee: string
  priority: "low" | "medium" | "high"
  status: "todo" | "in_progress" | "done"
  subtasks?: Task[] | null
  
}

export interface User {
  id: number
  name: string
  profile: Profile
  settings: UserSettings
  
}

export interface UserSettings {
  privacy: PrivacySettings
  display: DisplaySettings
  advanced: Record<string, string>
  
}

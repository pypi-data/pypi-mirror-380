/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  AllNullable,  BooleanEdgeCases,  CircularReference,  DeepRecursion,  EmptyCollections,  InnerNullable,  LargeStructure,  MixedEdgeCases,  NestedNullable,  NullEdgeCases,  NumberEdgeCases,  OptionalEverything,  OuterNullable,  SomeNullable,  SpecialCharacters,  User,  VeryLongStrings } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface AllNullable {
      nullString?: string | null
      nullInt?: number | null
      nullFloat?: number | null
      nullBool?: boolean | null
      nullArray?: string[] | null
      nullObject?: User | null
    }
    export interface BooleanEdgeCases {
      explicitTrue?: boolean | null
      explicitFalse?: boolean | null
      arrayOfTrue: boolean[]
      arrayOfFalse: boolean[]
      mixedBoolArray: boolean[]
    }
    export interface CircularReference {
      id?: number | null
      name?: string | null
      parent?: CircularReference | null
      children: CircularReference[]
      relatedItems: CircularReference[]
    }
    export interface DeepRecursion {
      value?: string | null
      next?: DeepRecursion | null
    }
    export interface EmptyCollections {
      emptyStringArray: string[]
      emptyIntArray: number[]
      emptyObjectArray: User[]
      emptyMap: Record<string, string>
      emptyNestedArray: string[][]
    }
    export interface InnerNullable {
      value?: string | null
    }
    export interface LargeStructure {
      field1?: string | null
      field2?: string | null
      field3?: string | null
      field4?: string | null
      field5?: string | null
      field6?: number | null
      field7?: number | null
      field8?: number | null
      field9?: number | null
      field10?: number | null
      field11?: number | null
      field12?: number | null
      field13?: number | null
      field14?: number | null
      field15?: number | null
      field16?: boolean | null
      field17?: boolean | null
      field18?: boolean | null
      field19?: boolean | null
      field20?: boolean | null
      array1: string[]
      array2: number[]
      array3: number[]
      array4: boolean[]
      array5: User[]
      map1: Record<string, string>
      map2: Record<string, number>
      map3: Record<string, number>
      map4: Record<string, boolean>
      map5: Record<string, User>
    }
    export interface MixedEdgeCases {
      emptyString?: string | null
      singleChar?: string | null
      veryLongArray: string[]
      deeplyNestedMap: Record<string, Record<string, Record<string, string>>>
      mixedTypeArray: (string | number | boolean)[]
      optionalEverything?: OptionalEverything | null
    }
    export interface NestedNullable {
      outer?: OuterNullable | null
    }
    export interface NullEdgeCases {
      allNull?: AllNullable | null
      someNull?: SomeNullable | null
      nestedNull?: NestedNullable | null
    }
    export interface NumberEdgeCases {
      zero?: number | null
      negativeInt?: number | null
      largeInt?: number | null
      veryLargeInt?: number | null
      smallFloat?: number | null
      largeFloat?: number | null
      negativeFloat?: number | null
      scientificNotation?: number | null
      infinity?: number | null
      notANumber?: number | null
    }
    export interface OptionalEverything {
      optString?: string | null
      optInt?: number | null
      optFloat?: number | null
      optBool?: boolean | null
      optArray?: string[] | null
      optMap?: Record<string, string> | null
      optObject?: User | null
    }
    export interface OuterNullable {
      inner?: InnerNullable | null
    }
    export interface SomeNullable {
      presentString?: string | null
      nullString?: string | null
      presentInt?: number | null
      nullInt?: number | null
    }
    export interface SpecialCharacters {
      normalText?: string | null
      withNewlines?: string | null
      withTabs?: string | null
      withQuotes?: string | null
      withBackslashes?: string | null
      withUnicode?: string | null
      withEmoji?: string | null
      withMixedSpecial?: string | null
    }
    export interface User {
      id?: number | null
      name?: string | null
    }
    export interface VeryLongStrings {
      shortString?: string | null
      mediumString?: string | null
      longString?: string | null
      veryLongString?: string | null
      extremelyLongString?: string | null
    }
}
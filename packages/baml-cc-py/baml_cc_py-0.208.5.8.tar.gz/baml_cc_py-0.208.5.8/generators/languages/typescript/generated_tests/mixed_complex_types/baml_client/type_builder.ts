/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export { FieldType, EnumBuilder, ClassBuilder }

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    Action: ClassViewer<'Action', "type" | "parameters" | "async_">;
    
    Asset: ClassViewer<'Asset', "id" | "type" | "metadata" | "tags">;
    
    AssetMetadata: ClassViewer<'AssetMetadata', "filename" | "size" | "mimeType" | "uploaded" | "checksum">;
    
    ButtonWidget: ClassViewer<'ButtonWidget', "label" | "action" | "style">;
    
    ComplexData: ClassViewer<'ComplexData', "primary" | "secondary" | "tertiary">;
    
    Condition: ClassViewer<'Condition', "type" | "conditions">;
    
    Configuration: ClassViewer<'Configuration', "version" | "features" | "environments" | "rules">;
    
    ContainerWidget: ClassViewer<'ContainerWidget', "layout" | "children" | "style">;
    
    DataObject: ClassViewer<'DataObject', "type" | "value">;
    
    Dimensions: ClassViewer<'Dimensions', "width" | "height">;
    
    Environment: ClassViewer<'Environment', "name" | "url" | "variables" | "secrets">;
    
    Error: ClassViewer<'Error', "type" | "message" | "code">;
    
    ErrorDetail: ClassViewer<'ErrorDetail', "code" | "message" | "details">;
    
    Feature: ClassViewer<'Feature', "name" | "enabled" | "config" | "dependencies">;
    
    ImageWidget: ClassViewer<'ImageWidget', "alt" | "dimensions">;
    
    Item: ClassViewer<'Item', "id" | "name" | "variants" | "attributes">;
    
    KitchenSink: ClassViewer<'KitchenSink', "id" | "name" | "score" | "active" | "nothing" | "status" | "priority" | "tags" | "numbers" | "matrix" | "metadata" | "scores" | "description" | "notes" | "data" | "result" | "user" | "items" | "config">;
    
    Node: ClassViewer<'Node', "id" | "type" | "value" | "metadata">;
    
    NodeMetadata: ClassViewer<'NodeMetadata', "created" | "modified" | "tags" | "attributes">;
    
    PrimaryData: ClassViewer<'PrimaryData', "values" | "mappings" | "flags">;
    
    Record: ClassViewer<'Record', "id" | "data" | "related">;
    
    ResponseMetadata: ClassViewer<'ResponseMetadata', "timestamp" | "requestId" | "duration" | "retries">;
    
    Rule: ClassViewer<'Rule', "id" | "name" | "condition" | "actions" | "priority">;
    
    SecondaryData: ClassViewer<'SecondaryData', "records" | "index">;
    
    Setting: ClassViewer<'Setting', "key" | "value" | "metadata">;
    
    SimpleCondition: ClassViewer<'SimpleCondition', "field" | "operator" | "value">;
    
    Success: ClassViewer<'Success', "type" | "data">;
    
    TertiaryData: ClassViewer<'TertiaryData', "raw" | "parsed" | "valid">;
    
    TextWidget: ClassViewer<'TextWidget', "content" | "format" | "style">;
    
    UltraComplex: ClassViewer<'UltraComplex', "tree" | "widgets" | "data" | "response" | "assets">;
    
    User: ClassViewer<'User', "id" | "profile" | "settings">;
    
    UserProfile: ClassViewer<'UserProfile', "name" | "email" | "bio" | "links">;
    
    UserResponse: ClassViewer<'UserResponse', "status" | "data" | "error" | "metadata">;
    
    Variant: ClassViewer<'Variant', "sku" | "price" | "stock" | "options">;
    
    Widget: ClassViewer<'Widget', "type" | "button" | "text" | "image" | "container">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "Action","Asset","AssetMetadata","ButtonWidget","ComplexData","Condition","Configuration","ContainerWidget","DataObject","Dimensions","Environment","Error","ErrorDetail","Feature","ImageWidget","Item","KitchenSink","Node","NodeMetadata","PrimaryData","Record","ResponseMetadata","Rule","SecondaryData","Setting","SimpleCondition","Success","TertiaryData","TextWidget","UltraComplex","User","UserProfile","UserResponse","Variant","Widget",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.Action = this.tb.classViewer("Action", [
          "type","parameters","async_",
        ]);
        
        this.Asset = this.tb.classViewer("Asset", [
          "id","type","metadata","tags",
        ]);
        
        this.AssetMetadata = this.tb.classViewer("AssetMetadata", [
          "filename","size","mimeType","uploaded","checksum",
        ]);
        
        this.ButtonWidget = this.tb.classViewer("ButtonWidget", [
          "label","action","style",
        ]);
        
        this.ComplexData = this.tb.classViewer("ComplexData", [
          "primary","secondary","tertiary",
        ]);
        
        this.Condition = this.tb.classViewer("Condition", [
          "type","conditions",
        ]);
        
        this.Configuration = this.tb.classViewer("Configuration", [
          "version","features","environments","rules",
        ]);
        
        this.ContainerWidget = this.tb.classViewer("ContainerWidget", [
          "layout","children","style",
        ]);
        
        this.DataObject = this.tb.classViewer("DataObject", [
          "type","value",
        ]);
        
        this.Dimensions = this.tb.classViewer("Dimensions", [
          "width","height",
        ]);
        
        this.Environment = this.tb.classViewer("Environment", [
          "name","url","variables","secrets",
        ]);
        
        this.Error = this.tb.classViewer("Error", [
          "type","message","code",
        ]);
        
        this.ErrorDetail = this.tb.classViewer("ErrorDetail", [
          "code","message","details",
        ]);
        
        this.Feature = this.tb.classViewer("Feature", [
          "name","enabled","config","dependencies",
        ]);
        
        this.ImageWidget = this.tb.classViewer("ImageWidget", [
          "alt","dimensions",
        ]);
        
        this.Item = this.tb.classViewer("Item", [
          "id","name","variants","attributes",
        ]);
        
        this.KitchenSink = this.tb.classViewer("KitchenSink", [
          "id","name","score","active","nothing","status","priority","tags","numbers","matrix","metadata","scores","description","notes","data","result","user","items","config",
        ]);
        
        this.Node = this.tb.classViewer("Node", [
          "id","type","value","metadata",
        ]);
        
        this.NodeMetadata = this.tb.classViewer("NodeMetadata", [
          "created","modified","tags","attributes",
        ]);
        
        this.PrimaryData = this.tb.classViewer("PrimaryData", [
          "values","mappings","flags",
        ]);
        
        this.Record = this.tb.classViewer("Record", [
          "id","data","related",
        ]);
        
        this.ResponseMetadata = this.tb.classViewer("ResponseMetadata", [
          "timestamp","requestId","duration","retries",
        ]);
        
        this.Rule = this.tb.classViewer("Rule", [
          "id","name","condition","actions","priority",
        ]);
        
        this.SecondaryData = this.tb.classViewer("SecondaryData", [
          "records","index",
        ]);
        
        this.Setting = this.tb.classViewer("Setting", [
          "key","value","metadata",
        ]);
        
        this.SimpleCondition = this.tb.classViewer("SimpleCondition", [
          "field","operator","value",
        ]);
        
        this.Success = this.tb.classViewer("Success", [
          "type","data",
        ]);
        
        this.TertiaryData = this.tb.classViewer("TertiaryData", [
          "raw","parsed","valid",
        ]);
        
        this.TextWidget = this.tb.classViewer("TextWidget", [
          "content","format","style",
        ]);
        
        this.UltraComplex = this.tb.classViewer("UltraComplex", [
          "tree","widgets","data","response","assets",
        ]);
        
        this.User = this.tb.classViewer("User", [
          "id","profile","settings",
        ]);
        
        this.UserProfile = this.tb.classViewer("UserProfile", [
          "name","email","bio","links",
        ]);
        
        this.UserResponse = this.tb.classViewer("UserResponse", [
          "status","data","error","metadata",
        ]);
        
        this.Variant = this.tb.classViewer("Variant", [
          "sku","price","stock","options",
        ]);
        
        this.Widget = this.tb.classViewer("Widget", [
          "type","button","text","image","container",
        ]);
        
        
    }

    reset(): void {
        this.tb.reset();
        // TODO: This should happen in Rust. Problem is, when we construct the
        // typebuilder we instantiate class builders once and it seems to make
        // a JS copy, bypassing the Rust side? In Python however, every time we
        // access a class builder with @property, we get a new instance that
        // wraps over the Rust type builder, so we only need to call tb.reset().
        // In JS it's not possible unless we refactor the way class builders are
        // accessed.
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}
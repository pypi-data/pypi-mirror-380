/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "baml_src/main.baml": "// Test optional and nullable types in BAML\n\nclass OptionalFields {\n  requiredString string\n  optionalString string?\n  requiredInt int\n  optionalInt int?\n  requiredBool bool\n  optionalBool bool?\n  optionalArray string[]?\n  optionalMap map<string, string>?\n}\n\nclass NullableTypes {\n  nullableString string | null\n  nullableInt int | null\n  nullableFloat float | null\n  nullableBool bool | null\n  nullableArray string[] | null\n  nullableObject User | null\n}\n\nclass User {\n  id int\n  name string\n  email string?\n  phone string | null\n}\n\nclass MixedOptionalNullable {\n  // Required field\n  id int\n  \n  // Optional field (may not be present)\n  description string?\n  \n  // Nullable field (present but can be null)\n  metadata string | null\n  \n  // Optional and nullable\n  notes string? | null\n  \n  // Arrays\n  tags string[]  // required, can be empty\n  categories string[]?  // optional\n  keywords string[] | null  // nullable\n  \n  // Nested\n  primaryUser User\n  secondaryUser User?\n  tertiaryUser User | null\n}\n\nclass ComplexOptional {\n  data OptionalData?\n  items OptionalItem[]\n  mapping map<string, OptionalValue?>\n}\n\nclass OptionalData {\n  value string\n  count int?\n  enabled bool?\n}\n\nclass OptionalItem {\n  id int\n  name string\n  description string?\n  metadata map<string, string>?\n}\n\nclass OptionalValue {\n  data string | int | null\n  optional string?\n}\n\nclass UnionWithNull {\n  simpleUnion string | int\n  nullableUnion string | int | null\n  optionalUnion (string | int)?\n  complexUnion (User | Product | null)\n}\n\nclass Product {\n  id int\n  name string\n  price float?\n}\n\nfunction TestOptionalFields(input: string) -> OptionalFields {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an OptionalFields object with:\n    - requiredString: \"hello\"\n    - optionalString: \"world\"\n    - requiredInt: 42\n    - optionalInt: null (omitted)\n    - requiredBool: true\n    - optionalBool: false\n    - optionalArray: [\"a\", \"b\", \"c\"]\n    - optionalMap: null (omitted)\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestNullableTypes(input: string) -> NullableTypes {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a NullableTypes object with:\n    - nullableString: \"present\"\n    - nullableInt: null\n    - nullableFloat: 3.14\n    - nullableBool: null\n    - nullableArray: [\"item1\", \"item2\"]\n    - nullableObject: null\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestMixedOptionalNullable(input: string) -> MixedOptionalNullable {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a MixedOptionalNullable object demonstrating different combinations:\n    - Some optional fields present, others omitted\n    - Some nullable fields with values, others null\n    - Mix of empty and populated arrays\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestAllNull(input: string) -> NullableTypes {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a NullableTypes object with all fields set to null.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestAllOptionalOmitted(input: string) -> OptionalFields {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an OptionalFields object with:\n    - All required fields with values (use 124 for int values, true for bool values, etc)\n    - All optional fields omitted (not present)\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}
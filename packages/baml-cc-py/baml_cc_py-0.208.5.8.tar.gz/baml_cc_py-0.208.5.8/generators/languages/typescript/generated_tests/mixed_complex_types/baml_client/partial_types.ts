/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  Action,  Asset,  AssetMetadata,  ButtonWidget,  ComplexData,  Condition,  Configuration,  ContainerWidget,  DataObject,  Dimensions,  Environment,  Error,  ErrorDetail,  Feature,  ImageWidget,  Item,  KitchenSink,  Node,  NodeMetadata,  PrimaryData,  Record,  ResponseMetadata,  Rule,  SecondaryData,  Setting,  SimpleCondition,  Success,  TertiaryData,  TextWidget,  UltraComplex,  User,  UserProfile,  UserResponse,  Variant,  Widget } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface Action {
      type?: string | null
      parameters: Record<string, string | number | boolean>
      async_?: boolean | null
    }
    export interface Asset {
      id?: number | null
      type?: "image" | "audio" | "document" | null
      metadata?: AssetMetadata | null
      tags: string[]
    }
    export interface AssetMetadata {
      filename?: string | null
      size?: number | null
      mimeType?: string | null
      uploaded?: string | null
      checksum?: string | null
    }
    export interface ButtonWidget {
      label?: string | null
      action?: string | null
      style: Record<string, string>
    }
    export interface ComplexData {
      primary?: PrimaryData | null
      secondary?: SecondaryData | null
      tertiary?: TertiaryData | null
    }
    export interface Condition {
      type?: "and" | "or" | "not" | null
      conditions: (Condition | SimpleCondition)[]
    }
    export interface Configuration {
      version?: string | null
      features: Feature[]
      environments: Record<string, Environment>
      rules: Rule[]
    }
    export interface ContainerWidget {
      layout?: "flex" | "grid" | "stack" | null
      children: Widget[]
      style: Record<string, string>
    }
    export interface DataObject {
      type?: "object" | null
      value: Record<string, string>
    }
    export interface Dimensions {
      width?: number | null
      height?: number | null
    }
    export interface Environment {
      name?: string | null
      url?: string | null
      variables: Record<string, string>
      secrets?: Record<string, string> | null
    }
    export interface Error {
      type?: "error" | null
      message?: string | null
      code?: number | null
    }
    export interface ErrorDetail {
      code?: string | null
      message?: string | null
      details?: Record<string, string> | null
    }
    export interface Feature {
      name?: string | null
      enabled?: boolean | null
      config?: Record<string, string | number | boolean> | null
      dependencies: string[]
    }
    export interface ImageWidget {
      alt?: string | null
      dimensions?: Dimensions | null
    }
    export interface Item {
      id?: number | null
      name?: string | null
      variants: Variant[]
      attributes: Record<string, string | number | number | boolean>
    }
    export interface KitchenSink {
      id?: number | null
      name?: string | null
      score?: number | null
      active?: boolean | null
      nothing: undefined
      status?: "draft" | "published" | "archived" | null
      priority?: 1 | 2 | 3 | 4 | 5 | null
      tags: string[]
      numbers: number[]
      matrix: number[][]
      metadata: Record<string, string>
      scores: Record<string, number>
      description?: string | null
      notes?: string | null
      data?: string | number | DataObject | null
      result?: Success | Error | null
      user?: User | null
      items: Item[]
      config?: Configuration | null
    }
    export interface Node {
      id?: number | null
      type?: "leaf" | "branch" | null
      value?: string | number | Node[] | Record<string, Node> | null
      metadata?: NodeMetadata | null
    }
    export interface NodeMetadata {
      created?: string | null
      modified?: string | null
      tags: string[]
      attributes: Record<string, string | number | boolean | null>
    }
    export interface PrimaryData {
      values: (string | number | number)[]
      mappings: Record<string, Record<string, string>>
      flags: boolean[]
    }
    export interface Record {
      id?: number | null
      data: Record<string, string | number | boolean | null>
      related?: Record[] | null
    }
    export interface ResponseMetadata {
      timestamp?: string | null
      requestId?: string | null
      duration?: number | null
      retries?: number | null
    }
    export interface Rule {
      id?: number | null
      name?: string | null
      condition?: Condition | null
      actions: Action[]
      priority?: number | null
    }
    export interface SecondaryData {
      records: Record[]
      index: Record<string, Record>
    }
    export interface Setting {
      key?: string | null
      value?: string | number | boolean | null
      metadata?: Record<string, string> | null
    }
    export interface SimpleCondition {
      field?: string | null
      operator?: "eq" | "ne" | "gt" | "lt" | "contains" | null
      value?: string | number | number | boolean | null
    }
    export interface Success {
      type?: "success" | null
      data: Record<string, string>
    }
    export interface TertiaryData {
      raw?: string | null
      parsed?: Record<string, string> | null
      valid?: boolean | null
    }
    export interface TextWidget {
      content?: string | null
      format?: "plain" | "markdown" | "html" | null
      style: Record<string, string>
    }
    export interface UltraComplex {
      tree?: Node | null
      widgets: Widget[]
      data?: ComplexData | null
      response?: UserResponse | null
      assets: Asset[]
    }
    export interface User {
      id?: number | null
      profile?: UserProfile | null
      settings: Record<string, Setting>
    }
    export interface UserProfile {
      name?: string | null
      email?: string | null
      bio?: string | null
      links: string[]
    }
    export interface UserResponse {
      status?: "success" | "error" | null
      data?: User | null
      error?: ErrorDetail | null
      metadata?: ResponseMetadata | null
    }
    export interface Variant {
      sku?: string | null
      price?: number | null
      stock?: number | null
      options: Record<string, string>
    }
    export interface Widget {
      type?: "button" | "text" | "image" | "container" | null
      button?: ButtonWidget | null
      text?: TextWidget | null
      image?: ImageWidget | null
      container?: ContainerWidget | null
    }
}
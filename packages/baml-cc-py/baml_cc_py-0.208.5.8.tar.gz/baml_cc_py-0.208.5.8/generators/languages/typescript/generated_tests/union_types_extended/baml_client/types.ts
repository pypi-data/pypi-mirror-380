/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface Admin {
  id: number
  name: string
  permissions: string[]
  type: "admin"
  
}

export interface ApiError {
  status: "error"
  message: string
  code: number
  
}

export interface ApiPending {
  status: "pending"
  progress: number
  eta?: number | null
  
}

export interface ApiSuccess {
  status: "success"
  data: Record<string, string>
  
}

export interface Bird {
  species: "bird"
  canFly: boolean
  wingspan?: number | null
  
}

export interface Cat {
  species: "cat"
  color: string
  lives: number
  
}

export interface Circle {
  shape: "circle"
  radius: number
  
}

export interface ComplexUnions {
  userOrProduct: User | Product
  userOrProductOrAdmin: User | Product | Admin
  dataOrError: DataResponse | ErrorResponse
  resultOrNull?: Result | null
  multiTypeResult: Success | Warning | Error
  
}

export interface DataResponse {
  data: string
  timestamp: number
  status: "success"
  
}

export interface DiscriminatedUnions {
  shape: Circle | Rectangle | Triangle
  animal: Dog | Cat | Bird
  response: ApiSuccess | ApiError | ApiPending
  
}

export interface Dog {
  species: "dog"
  breed: string
  goodBoy: boolean
  
}

export interface Error {
  type: "error"
  message: string
  code: number
  details?: string | null
  
}

export interface ErrorResponse {
  error: string
  code: number
  status: "error"
  
}

export interface PrimitiveUnions {
  stringOrInt: string | number
  stringOrFloat: string | number
  intOrFloat: number | number
  boolOrString: boolean | string
  anyPrimitive: string | number | number | boolean
  
}

export interface Product {
  id: number
  name: string
  price: number
  type: "product"
  
}

export interface Rectangle {
  shape: "rectangle"
  width: number
  height: number
  
}

export interface RecursiveUnion {
  value: string | number | RecursiveUnion
  children: (string | RecursiveUnion)[]
  
}

export interface Result {
  value: string | number | number
  metadata: Record<string, string>
  
}

export interface Success {
  type: "success"
  message: string
  data: Record<string, string>
  
}

export interface Triangle {
  shape: "triangle"
  base: number
  height: number
  
}

export interface UnionArrays {
  mixedArray: (string | number)[]
  nullableItems: (string | null)[]
  objectArray: (User | Product)[]
  nestedUnionArray: (string | number[])[]
  
}

export interface User {
  id: number
  name: string
  type: "user"
  
}

export interface Warning {
  type: "warning"
  message: string
  level: number
  
}

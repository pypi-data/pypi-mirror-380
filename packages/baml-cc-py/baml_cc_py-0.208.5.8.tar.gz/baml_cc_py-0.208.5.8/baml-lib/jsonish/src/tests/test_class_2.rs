use baml_types::{ir_type::UnionConstructor, TypeIR};

use super::*;

const TEST_FILE: &str = r###"
class ServerActionTask {
    type "server_action" @description(#"
        A server action is a function that will be generated by the codegen agent.
    "#)
    name string
    description string
    signature string @alias("function_signature")
}

class PageTask {
    type "page"
    name string
    description string
    required_components string[]
    required_actions string[]
    route string
}

class ComponentTask {
    type "component"
    name string
    description string
    props string
}

class Task {
    tasks (ServerActionTask | PageTask | ComponentTask)[]
}
"###;

test_deserializer!(
  test_single_page_task,
  TEST_FILE,
  r#"
{
      type: page,
      name: HomePage,
      description: Landing page with post list,
      required_components: [PostCard, PostFilter],
      required_actions: [fetchPosts],
      route: /
}  
  "#,
  TypeIR::class("PageTask"),
  {
    "type": "page",
    "name": "HomePage",
    "description": "Landing page with post list",
    "required_components": ["PostCard", "PostFilter"],
    "required_actions": ["fetchPosts"],
    "route": "/"
  }
);

test_deserializer!(
  test_class_2_single,
  TEST_FILE,
  r#"[
    {
      type: server_action,
      name: fetchPosts,
      description: Fetch paginated blog posts with sorting and filtering,
      function_signature: async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>
    }
  ]"#,
  TypeIR::union(vec![
    TypeIR::class("ServerActionTask"),
    TypeIR::class("PageTask"),
    TypeIR::class("ComponentTask"),
  ]).as_list(),
  [
    {
      "type": "server_action",
      "name": "fetchPosts",
      "description": "Fetch paginated blog posts with sorting and filtering",
      "signature": "async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>"
    }
  ]
);

test_deserializer!(
  test_class_2_two,
  TEST_FILE,
  r#"[
    {
      type: server_action,
      name: fetchPosts,
      description: Fetch paginated blog posts with sorting and filtering,
      function_signature: async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>
    },
    {
      type: component,
      name: PostCard,
      description: Card component for displaying post preview on home page,
      props: {title: string, excerpt: string, author: Author, date: string, onClick: () => void}
    }
  ]"#,
  TypeIR::union(vec![
    TypeIR::class("ServerActionTask"),
    TypeIR::class("PageTask"),
    TypeIR::class("ComponentTask"),
  ]).as_list(),
  [
    {
      "type": "server_action",
      "name": "fetchPosts",
      "description": "Fetch paginated blog posts with sorting and filtering",
      "signature": "async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>"
    },
    {
      "type": "component",
      "name": "PostCard",
      "description": "Card component for displaying post preview on home page",
      "props": "{title: string, excerpt: string, author: Author, date: string, onClick: () => void}"
    }
  ]
);

test_deserializer!(
  test_class_2_three,
  TEST_FILE,
  r#"[
    {
      type: server_action,
      name: fetchPosts,
      description: Fetch paginated blog posts with sorting and filtering,
      function_signature: async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>
    },
    {
      type: component,
      name: PostCard,
      description: Card component for displaying post preview on home page,
      props: {title: string, excerpt: string, author: Author, date: string, onClick: () => void}
    },
    {
      type: page,
      name: HomePage,
      description: Landing page with post list,
      required_components: [PostCard, PostFilter],
      required_actions: [fetchPosts],
      route: /
    }
  ]"#,
  TypeIR::union(vec![
    TypeIR::class("ServerActionTask"),
    TypeIR::class("PageTask"),
    TypeIR::class("ComponentTask"),
  ]).as_list(),
  [
    {
      "type": "server_action",
      "name": "fetchPosts",
      "description": "Fetch paginated blog posts with sorting and filtering",
      "signature": "async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>"
    },
    {
      "type": "component",
      "name": "PostCard",
      "description": "Card component for displaying post preview on home page",
      "props": "{title: string, excerpt: string, author: Author, date: string, onClick: () => void}"
    },
    {
      "type": "page",
      "name": "HomePage",
      "description": "Landing page with post list",
      "required_components": ["PostCard", "PostFilter"],
      "required_actions": ["fetchPosts"],
      "route": "/"
    }
  ]
);

test_deserializer!(
  test_class_2_four,
  TEST_FILE,
  r#"[
    {
      type: server_action,
      name: fetchPosts,
      description: Fetch paginated blog posts with sorting and filtering,
      function_signature: async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>
    },
    {
      type: component,
      name: PostCard,
      description: Card component for displaying post preview on home page,
      props: {title: string, excerpt: string, author: Author, date: string, onClick: () => void}
    },
    {
      type: page,
      name: HomePage,
      description: Landing page with post list,
      required_components: [PostCard, PostFilter],
      required_actions: [fetchPosts],
      route: /
    },
    {
      type: server_action,
      name: fetchPostById,
      description: Fetch single post with full content and metadata,
      function_signature: async function fetchPostById(id: string): Promise<Post>
    }
  ]"#,
  TypeIR::union(vec![
    TypeIR::class("ServerActionTask"),
    TypeIR::class("PageTask"),
    TypeIR::class("ComponentTask"),
  ]).as_list(),
  [
    {
      "type": "server_action",
      "name": "fetchPosts",
      "description": "Fetch paginated blog posts with sorting and filtering",
      "signature": "async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>"
    },
    {
      "type": "component",
      "name": "PostCard",
      "description": "Card component for displaying post preview on home page",
      "props": "{title: string, excerpt: string, author: Author, date: string, onClick: () => void}"
    },
    {
      "type": "page",
      "name": "HomePage",
      "description": "Landing page with post list",
      "required_components": ["PostCard", "PostFilter"],
      "required_actions": ["fetchPosts"],
      "route": "/"
    },
    {
      "type": "server_action",
      "name": "fetchPostById",
      "description": "Fetch single post with full content and metadata",
      "signature": "async function fetchPostById(id: string): Promise<Post>"
    }
  ]
);

test_deserializer!(
  test_full,
  TEST_FILE,
  r###"
Let me break this down page by page:

Page 1: Home (/)
---
Features:
- List of blog post previews with title, excerpt, author
- Sort posts by date/popularity
- Filter by category/tag
Data:
- List of posts with preview data
- Sort/filter state
Actions:
- Fetch posts with sorting/filtering
- Navigate to individual posts
---

Page 2: Post Detail (/post/[id])
---
Features:
- Full post content display
- Author information section
- Comments section with add/reply
Data:
- Complete post data
- Author details
- Comments thread
Actions:
- Fetch post by ID
- Fetch comments
- Add/delete comments
---

Page 3: New Post (/new)
---
Features:
- Rich text editor interface
- Image upload capability
- Live preview
Data:
- Post draft data
- Uploaded images
Actions:
- Create new post
- Upload images
- Save draft
---

Page 4: Profile (/profile)
---
Features:
- User profile information
- Profile picture
- User's posts list
- Edit capabilities
Data:
- User profile data
- User's posts
Actions:
- Fetch user data
- Update profile
- Upload profile picture
---

[
  {
    type: server_action,
    name: fetchPosts,
    description: Fetch paginated blog posts with sorting and filtering,
    function_signature: async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>
  },
  {
    type: server_action,
    name: fetchPostById,
    description: Fetch single post with full content and metadata,
    function_signature: async function fetchPostById(id: string): Promise<Post>
  },
  {
    type: server_action,
    name: createPost,
    description: Create new blog post with content and images,
    function_signature: async function createPost(title: string, content: string, images: File[]): Promise<Post>
  },
  {
    type: server_action,
    name: fetchComments,
    description: Fetch comments for a post,
    function_signature: async function fetchComments(postId: string): Promise<Comment[]>
  },
  {
    type: server_action,
    name: addComment,
    description: Add new comment to a post,
    function_signature: async function addComment(postId: string, content: string): Promise<Comment>
  },
  {
    type: server_action,
    name: fetchUserProfile,
    description: Fetch user profile data and posts,
    function_signature: async function fetchUserProfile(userId: string): Promise<UserProfile>
  },
  {
    type: server_action,
    name: updateProfile,
    description: Update user profile information,
    function_signature: async function updateProfile(userId: string, data: ProfileData): Promise<UserProfile>
  },
  {
    type: component,
    name: PostCard,
    description: Card component for displaying post preview on home page,
    props: "{title: string, excerpt: string, author: Author, date: string, onClick: () => void}"
  },
   {
    type: component,
    name: PostFilter,
    description: Filter and sort controls for post list,
    props: "{onFilterChange: (filters: object) => void, onSortChange: (sort: string) => void}"
  },
   {
    type: component,
    name: RichTextEditor,
    description: Rich text editor component for creating posts,
    props: "{value: string, onChange: (content: string) => void, onImageUpload: (file: File) => Promise<string>}"
  },
  {
    type: component,
    name: CommentSection,
    description: Comments display and input component,
    props: {comments: Comment[], postId: string, onAddComment: (content: string) => void}
  },
  {
    type: component,
    name: ProfileHeader,
    description: User profile information display component,
    props: "{user: UserProfile, isEditable: boolean, onEdit: () => void}"
  },
  {
    type: page,
    name: HomePage,
    description: Landing page with post list,
    required_components: [PostCard, PostFilter],
    required_actions: [fetchPosts],
    route: /
  },
  {
    type: page,
    name: PostDetailPage,
    description: Full post display page,
    required_components: [CommentSection],
    required_actions: [fetchPostById, fetchComments, addComment],
    route: /post/[id]
  },
  {
    type: page,
    name: NewPostPage,
    description: Create new post page,
    required_components: [RichTextEditor],
    required_actions: [createPost],
    route: /new
  },
  {
    type: page,
    name: ProfilePage,
    description: User profile page,
    required_components: [ProfileHeader, PostCard],
    required_actions: [fetchUserProfile, updateProfile],
    route: /profile
  }
]
  "###,
  TypeIR::union(vec![
    TypeIR::class("ServerActionTask"),
    TypeIR::class("PageTask"),
    TypeIR::class("ComponentTask"),
  ]).as_list(),
  [
    {
      "type": "server_action",
      "name": "fetchPosts",
      "description": "Fetch paginated blog posts with sorting and filtering",
      "signature": "async function fetchPosts(page: number, sort: string, filters: object): Promise<PostList>"
    },
    {
      "type": "server_action",
      "name": "fetchPostById",
      "description": "Fetch single post with full content and metadata",
      "signature": "async function fetchPostById(id: string): Promise<Post>"
    },
    {
      "type": "server_action",
      "name": "createPost",
      "description": "Create new blog post with content and images",
      "signature": "async function createPost(title: string, content: string, images: File[]): Promise<Post>"
    },
    {
      "type": "server_action",
      "name": "fetchComments",
      "description": "Fetch comments for a post",
      "signature": "async function fetchComments(postId: string): Promise<Comment[]>"
    },
    {
      "type": "server_action",
      "name": "addComment",
      "description": "Add new comment to a post",
      "signature": "async function addComment(postId: string, content: string): Promise<Comment>"
    },
    {
      "type": "server_action",
      "name": "fetchUserProfile",
      "description": "Fetch user profile data and posts",
      "signature": "async function fetchUserProfile(userId: string): Promise<UserProfile>"
    },
    {
      "type": "server_action",
      "name": "updateProfile",
      "description": "Update user profile information",
      "signature": "async function updateProfile(userId: string, data: ProfileData): Promise<UserProfile>"
    },
    {
      "type": "component",
      "name": "PostCard",
      "description": "Card component for displaying post preview on home page",
      "props": "{title: string, excerpt: string, author: Author, date: string, onClick: () => void}"
    },
    {
      "type": "component",
      "name": "PostFilter",
      "description": "Filter and sort controls for post list",
      "props": "{onFilterChange: (filters: object) => void, onSortChange: (sort: string) => void}"
    },
    {
      "type": "component",
      "name": "RichTextEditor",
      "description": "Rich text editor component for creating posts",
      "props": "{value: string, onChange: (content: string) => void, onImageUpload: (file: File) => Promise<string>}"
    },
    {
      "type": "component",
      "name": "CommentSection",
      "description": "Comments display and input component",
      "props": "{comments: Comment[], postId: string, onAddComment: (content: string) => void}"
    },
    {
      "type": "component",
      "name": "ProfileHeader",
      "description": "User profile information display component",
      "props": "{user: UserProfile, isEditable: boolean, onEdit: () => void}"
    },
    {
      "type": "page",
      "name": "HomePage",
      "description": "Landing page with post list",
      "required_components": ["PostCard", "PostFilter"],
      "required_actions": ["fetchPosts"],
      "route": "/"
    },
    {
      "type": "page",
      "name": "PostDetailPage",
      "description": "Full post display page",
      "required_components": ["CommentSection"],
      "required_actions": ["fetchPostById", "fetchComments", "addComment"],
      "route": "/post/[id]"
    },
    {
      "type": "page",
      "name": "NewPostPage",
      "description": "Create new post page",
      "required_components": ["RichTextEditor"],
      "required_actions": ["createPost"],
      "route": "/new"
    },
    {
      "type": "page",
      "name": "ProfilePage",
      "description": "User profile page",
      "required_components": ["ProfileHeader", "PostCard"],
      "required_actions": ["fetchUserProfile", "updateProfile"],
      "route": "/profile"
    }
  ]
);

const TEST_FILE_STREAMING_NOT_NULL_LIST: &str = r###"
class SemanticContainer2 {    
    three_small_things SmallThing[] @description("Should have three items.")
}

class SemanticContainer {
    sixteen_digit_number int
    string_with_twenty_words string @stream.done
    class_1 ClassWithoutDone
    class_2 ClassWithBlockDone
    class_done_needed ClassWithBlockDone @stream.not_null
    class_needed ClassWithoutDone @stream.not_null
    three_small_things SmallThing[] @description("Should have three items.")
    final_string string
}

class ClassWithoutDone {
    i_16_digits int
    s_20_words string @description("A string with 20 words in it") @stream.with_state
}

class ClassWithBlockDone {
    i_16_digits int
    s_20_words string
    @@stream.done
}

class SmallThing {
    i_16_digits int @stream.not_null
    i_8_digits int
}

function MakeSemanticContainer() -> SemanticContainer {
    client "openai/gpt-4o"
    prompt #"
        {{ ctx.output_format }}
    "#
}
"###;

test_deserializer!(
  test_streaming_not_null_list,
  TEST_FILE_STREAMING_NOT_NULL_LIST,
  r#"
      {
      "sixteen_digit_number": 1234567890123456,
      "string_with_twenty_words": "This is an example string that contains exactly twenty words for the requested output in JSON format. It is quite informative.",
      "class_1": {
        "i_16_digits": 9876543210123456,
        "s_20_words": "Another example string used for class one with twenty distinct words to complete the requirements of this JSON structure."
      },
      "class_2": {
        "i_16_digits": 4567890123456789,
        "s_20_words": "Class two also has a longer description that encompasses twenty unique words to fulfill the output specifications."
      },
      "class_done_needed": {
        "i_16_digits": 7890123456789012,
        "s_20_words": "This class indicates what has been completed and also includes twenty words in its description for clarity."
      },
      "class_needed": {
        "i_16_digits": 3210987654321098,
        "s_20_words": "Another class that explains what is currently needed for completion includes another twenty-word explanation for better understanding."
      },
      "three_small_things": [
        {
          "i_16_digits": 1357924680135792,
          "i_8_digits": 24681357
        },
        {
          "i_16_digits": 2468135790246813,
          "i_8_digits": 86421357
        },
        {
          "i_16_digits": 3571598642035791,
          "i_8_digits": 97586421
        }
      ],
      "final_string": "This final string provides a brief conclusion or summary of the entire JSON formatted data provided above."
  }  
  "#,
  TypeIR::class("SemanticContainer"),
  {
    "sixteen_digit_number": 1234567890123456i64,
    "string_with_twenty_words": "This is an example string that contains exactly twenty words for the requested output in JSON format. It is quite informative.",
    "class_1": {
      "i_16_digits": 9876543210123456i64,
      "s_20_words": "Another example string used for class one with twenty distinct words to complete the requirements of this JSON structure."
    },
    "class_2": {
      "i_16_digits": 4567890123456789i64,
      "s_20_words": "Class two also has a longer description that encompasses twenty unique words to fulfill the output specifications."
    },
    "class_done_needed": {
      "i_16_digits": 7890123456789012i64,
      "s_20_words": "This class indicates what has been completed and also includes twenty words in its description for clarity."
    },
    "class_needed": {
      "i_16_digits": 3210987654321098i64,
      "s_20_words": "Another class that explains what is currently needed for completion includes another twenty-word explanation for better understanding."
    },
    "three_small_things": [
      {
        "i_16_digits": 1357924680135792i64,
        "i_8_digits": 24681357
      },
      {
        "i_16_digits": 2468135790246813i64,
        "i_8_digits": 86421357
      },
      {
        "i_16_digits": 3571598642035791i64,
        "i_8_digits": 97586421
      }
    ],
    "final_string": "This final string provides a brief conclusion or summary of the entire JSON formatted data provided above."
  }
);

test_partial_deserializer!(
  test_streaming_not_null_list_partial,
  TEST_FILE_STREAMING_NOT_NULL_LIST,
  r#"
      {
      "sixteen_digit_number": 1234567890123456,
      "string_with_twenty_words": "This is an example string that contains exactly twenty words for the requested output in JSON format. It is quite informative.",
      "class_1": {
        "i_16_digits": 9876543210123456,
        "s_20_words": "Another example string used for class one with twenty distinct words to complete the requirements of this JSON structure."
      },
      "class_2": {
        "i_16_digits": 4567890123456789,
        "s_20_words": "Class two also has a longer description that encompasses twenty unique words to fulfill the output specifications."
      },
      "class_done_needed": {
        "i_16_digits": 7890123456789012,
        "s_20_words": "This class indicates what has been completed and also includes twenty words in its description for clarity."
      },
      "class_needed": {
        "i_16_digits": 3210987654321098,
        "s_20_words": "Another class that explains what is currently needed for completion includes another twenty-word explanation for better understanding."
      },
      "three_small_things": [{
        "i_16_digits": 123
        
  "#,
  TypeIR::class("SemanticContainer"),
  {
    "sixteen_digit_number": 1234567890123456i64,
    "string_with_twenty_words": "This is an example string that contains exactly twenty words for the requested output in JSON format. It is quite informative.",
    "class_1": {
      "i_16_digits": 9876543210123456i64,
      "s_20_words": "Another example string used for class one with twenty distinct words to complete the requirements of this JSON structure."
    },
    "class_2": {
      "i_16_digits": 4567890123456789i64,
      "s_20_words": "Class two also has a longer description that encompasses twenty unique words to fulfill the output specifications."
    },
    "class_done_needed": {
      "i_16_digits": 7890123456789012i64,
      "s_20_words": "This class indicates what has been completed and also includes twenty words in its description for clarity."
    },
    "class_needed": {
      "i_16_digits": 3210987654321098i64,
      "s_20_words": "Another class that explains what is currently needed for completion includes another twenty-word explanation for better understanding."
    },
    "three_small_things": [
    ],
    "final_string": null
  }
);

test_deserializer!(
  test_streaming_not_null_list_partial_2,
  TEST_FILE_STREAMING_NOT_NULL_LIST,
  r#"
      {
        "i_16_digits": 123456789012345,
        "i_8_digits": 12345
      }
  "#,
  TypeIR::class("SmallThing"),
  {
    "i_16_digits": 123456789012345i64,
    "i_8_digits": 12345
  }
);

test_partial_deserializer!(
    test_streaming_not_null_list_partial_3_0,
    TEST_FILE_STREAMING_NOT_NULL_LIST,
    r#"
      {
        "three_small_things": [
          {
            "i_16_digits": 123456789012345
  "#,
  TypeIR::class("SemanticContainer2"),
  // we should return an empty list here, not null
  // SmallThing.i_16_digits is not_null, so the entry is not valid
  // until the number is complete
  {
    "three_small_things": [
    ]
  }
);

test_partial_deserializer!(
  test_streaming_not_null_list_partial_3_1,
  TEST_FILE_STREAMING_NOT_NULL_LIST,
  r#"
    {
      "three_small_things": [
        {
          "i_16_digits": 123456789012345,
"#,
TypeIR::class("SemanticContainer2"),
// we should return an empty list here, not null
// SmallThing.i_16_digits is not_null, so the entry is not valid
// until the number is complete
{
  "three_small_things": [
    {
      "i_16_digits": 123456789012345i64,
      "i_8_digits": null
    }
  ]
}
);

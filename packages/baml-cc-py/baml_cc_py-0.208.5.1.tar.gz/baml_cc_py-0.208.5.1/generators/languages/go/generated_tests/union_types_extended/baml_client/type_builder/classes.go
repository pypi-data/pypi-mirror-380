// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type AdminClassView struct {
    inner baml.ClassBuilder
}

func (t *AdminClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *AdminClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *AdminClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *AdminClassView) PropertyPermissions() (ClassPropertyView, error) {
    return t.inner.Property("permissions")
}

func (t *AdminClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}


func (t *TypeBuilder) Admin() (*AdminClassView, error) {
	bld, err := t.inner.Class("Admin")
	if err != nil {
		return nil, err
	}
	return &AdminClassView{inner: bld}, nil
}

func (t *AdminClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ApiErrorClassView struct {
    inner baml.ClassBuilder
}

func (t *ApiErrorClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ApiErrorClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}

func (t *ApiErrorClassView) PropertyMessage() (ClassPropertyView, error) {
    return t.inner.Property("message")
}

func (t *ApiErrorClassView) PropertyCode() (ClassPropertyView, error) {
    return t.inner.Property("code")
}


func (t *TypeBuilder) ApiError() (*ApiErrorClassView, error) {
	bld, err := t.inner.Class("ApiError")
	if err != nil {
		return nil, err
	}
	return &ApiErrorClassView{inner: bld}, nil
}

func (t *ApiErrorClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ApiPendingClassView struct {
    inner baml.ClassBuilder
}

func (t *ApiPendingClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ApiPendingClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}

func (t *ApiPendingClassView) PropertyProgress() (ClassPropertyView, error) {
    return t.inner.Property("progress")
}

func (t *ApiPendingClassView) PropertyEta() (ClassPropertyView, error) {
    return t.inner.Property("eta")
}


func (t *TypeBuilder) ApiPending() (*ApiPendingClassView, error) {
	bld, err := t.inner.Class("ApiPending")
	if err != nil {
		return nil, err
	}
	return &ApiPendingClassView{inner: bld}, nil
}

func (t *ApiPendingClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ApiSuccessClassView struct {
    inner baml.ClassBuilder
}

func (t *ApiSuccessClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ApiSuccessClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}

func (t *ApiSuccessClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}


func (t *TypeBuilder) ApiSuccess() (*ApiSuccessClassView, error) {
	bld, err := t.inner.Class("ApiSuccess")
	if err != nil {
		return nil, err
	}
	return &ApiSuccessClassView{inner: bld}, nil
}

func (t *ApiSuccessClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type BirdClassView struct {
    inner baml.ClassBuilder
}

func (t *BirdClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *BirdClassView) PropertySpecies() (ClassPropertyView, error) {
    return t.inner.Property("species")
}

func (t *BirdClassView) PropertyCanFly() (ClassPropertyView, error) {
    return t.inner.Property("canFly")
}

func (t *BirdClassView) PropertyWingspan() (ClassPropertyView, error) {
    return t.inner.Property("wingspan")
}


func (t *TypeBuilder) Bird() (*BirdClassView, error) {
	bld, err := t.inner.Class("Bird")
	if err != nil {
		return nil, err
	}
	return &BirdClassView{inner: bld}, nil
}

func (t *BirdClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type CatClassView struct {
    inner baml.ClassBuilder
}

func (t *CatClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *CatClassView) PropertySpecies() (ClassPropertyView, error) {
    return t.inner.Property("species")
}

func (t *CatClassView) PropertyColor() (ClassPropertyView, error) {
    return t.inner.Property("color")
}

func (t *CatClassView) PropertyLives() (ClassPropertyView, error) {
    return t.inner.Property("lives")
}


func (t *TypeBuilder) Cat() (*CatClassView, error) {
	bld, err := t.inner.Class("Cat")
	if err != nil {
		return nil, err
	}
	return &CatClassView{inner: bld}, nil
}

func (t *CatClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type CircleClassView struct {
    inner baml.ClassBuilder
}

func (t *CircleClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *CircleClassView) PropertyShape() (ClassPropertyView, error) {
    return t.inner.Property("shape")
}

func (t *CircleClassView) PropertyRadius() (ClassPropertyView, error) {
    return t.inner.Property("radius")
}


func (t *TypeBuilder) Circle() (*CircleClassView, error) {
	bld, err := t.inner.Class("Circle")
	if err != nil {
		return nil, err
	}
	return &CircleClassView{inner: bld}, nil
}

func (t *CircleClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ComplexUnionsClassView struct {
    inner baml.ClassBuilder
}

func (t *ComplexUnionsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ComplexUnionsClassView) PropertyUserOrProduct() (ClassPropertyView, error) {
    return t.inner.Property("userOrProduct")
}

func (t *ComplexUnionsClassView) PropertyUserOrProductOrAdmin() (ClassPropertyView, error) {
    return t.inner.Property("userOrProductOrAdmin")
}

func (t *ComplexUnionsClassView) PropertyDataOrError() (ClassPropertyView, error) {
    return t.inner.Property("dataOrError")
}

func (t *ComplexUnionsClassView) PropertyResultOrNull() (ClassPropertyView, error) {
    return t.inner.Property("resultOrNull")
}

func (t *ComplexUnionsClassView) PropertyMultiTypeResult() (ClassPropertyView, error) {
    return t.inner.Property("multiTypeResult")
}


func (t *TypeBuilder) ComplexUnions() (*ComplexUnionsClassView, error) {
	bld, err := t.inner.Class("ComplexUnions")
	if err != nil {
		return nil, err
	}
	return &ComplexUnionsClassView{inner: bld}, nil
}

func (t *ComplexUnionsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type DataResponseClassView struct {
    inner baml.ClassBuilder
}

func (t *DataResponseClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *DataResponseClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *DataResponseClassView) PropertyTimestamp() (ClassPropertyView, error) {
    return t.inner.Property("timestamp")
}

func (t *DataResponseClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}


func (t *TypeBuilder) DataResponse() (*DataResponseClassView, error) {
	bld, err := t.inner.Class("DataResponse")
	if err != nil {
		return nil, err
	}
	return &DataResponseClassView{inner: bld}, nil
}

func (t *DataResponseClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type DiscriminatedUnionsClassView struct {
    inner baml.ClassBuilder
}

func (t *DiscriminatedUnionsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *DiscriminatedUnionsClassView) PropertyShape() (ClassPropertyView, error) {
    return t.inner.Property("shape")
}

func (t *DiscriminatedUnionsClassView) PropertyAnimal() (ClassPropertyView, error) {
    return t.inner.Property("animal")
}

func (t *DiscriminatedUnionsClassView) PropertyResponse() (ClassPropertyView, error) {
    return t.inner.Property("response")
}


func (t *TypeBuilder) DiscriminatedUnions() (*DiscriminatedUnionsClassView, error) {
	bld, err := t.inner.Class("DiscriminatedUnions")
	if err != nil {
		return nil, err
	}
	return &DiscriminatedUnionsClassView{inner: bld}, nil
}

func (t *DiscriminatedUnionsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type DogClassView struct {
    inner baml.ClassBuilder
}

func (t *DogClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *DogClassView) PropertySpecies() (ClassPropertyView, error) {
    return t.inner.Property("species")
}

func (t *DogClassView) PropertyBreed() (ClassPropertyView, error) {
    return t.inner.Property("breed")
}

func (t *DogClassView) PropertyGoodBoy() (ClassPropertyView, error) {
    return t.inner.Property("goodBoy")
}


func (t *TypeBuilder) Dog() (*DogClassView, error) {
	bld, err := t.inner.Class("Dog")
	if err != nil {
		return nil, err
	}
	return &DogClassView{inner: bld}, nil
}

func (t *DogClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ErrorClassView struct {
    inner baml.ClassBuilder
}

func (t *ErrorClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ErrorClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *ErrorClassView) PropertyMessage() (ClassPropertyView, error) {
    return t.inner.Property("message")
}

func (t *ErrorClassView) PropertyCode() (ClassPropertyView, error) {
    return t.inner.Property("code")
}

func (t *ErrorClassView) PropertyDetails() (ClassPropertyView, error) {
    return t.inner.Property("details")
}


func (t *TypeBuilder) Error() (*ErrorClassView, error) {
	bld, err := t.inner.Class("Error")
	if err != nil {
		return nil, err
	}
	return &ErrorClassView{inner: bld}, nil
}

func (t *ErrorClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ErrorResponseClassView struct {
    inner baml.ClassBuilder
}

func (t *ErrorResponseClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ErrorResponseClassView) PropertyError() (ClassPropertyView, error) {
    return t.inner.Property("error")
}

func (t *ErrorResponseClassView) PropertyCode() (ClassPropertyView, error) {
    return t.inner.Property("code")
}

func (t *ErrorResponseClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}


func (t *TypeBuilder) ErrorResponse() (*ErrorResponseClassView, error) {
	bld, err := t.inner.Class("ErrorResponse")
	if err != nil {
		return nil, err
	}
	return &ErrorResponseClassView{inner: bld}, nil
}

func (t *ErrorResponseClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type PrimitiveUnionsClassView struct {
    inner baml.ClassBuilder
}

func (t *PrimitiveUnionsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *PrimitiveUnionsClassView) PropertyStringOrInt() (ClassPropertyView, error) {
    return t.inner.Property("stringOrInt")
}

func (t *PrimitiveUnionsClassView) PropertyStringOrFloat() (ClassPropertyView, error) {
    return t.inner.Property("stringOrFloat")
}

func (t *PrimitiveUnionsClassView) PropertyIntOrFloat() (ClassPropertyView, error) {
    return t.inner.Property("intOrFloat")
}

func (t *PrimitiveUnionsClassView) PropertyBoolOrString() (ClassPropertyView, error) {
    return t.inner.Property("boolOrString")
}

func (t *PrimitiveUnionsClassView) PropertyAnyPrimitive() (ClassPropertyView, error) {
    return t.inner.Property("anyPrimitive")
}


func (t *TypeBuilder) PrimitiveUnions() (*PrimitiveUnionsClassView, error) {
	bld, err := t.inner.Class("PrimitiveUnions")
	if err != nil {
		return nil, err
	}
	return &PrimitiveUnionsClassView{inner: bld}, nil
}

func (t *PrimitiveUnionsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ProductClassView struct {
    inner baml.ClassBuilder
}

func (t *ProductClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ProductClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *ProductClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *ProductClassView) PropertyPrice() (ClassPropertyView, error) {
    return t.inner.Property("price")
}

func (t *ProductClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}


func (t *TypeBuilder) Product() (*ProductClassView, error) {
	bld, err := t.inner.Class("Product")
	if err != nil {
		return nil, err
	}
	return &ProductClassView{inner: bld}, nil
}

func (t *ProductClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type RectangleClassView struct {
    inner baml.ClassBuilder
}

func (t *RectangleClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *RectangleClassView) PropertyShape() (ClassPropertyView, error) {
    return t.inner.Property("shape")
}

func (t *RectangleClassView) PropertyWidth() (ClassPropertyView, error) {
    return t.inner.Property("width")
}

func (t *RectangleClassView) PropertyHeight() (ClassPropertyView, error) {
    return t.inner.Property("height")
}


func (t *TypeBuilder) Rectangle() (*RectangleClassView, error) {
	bld, err := t.inner.Class("Rectangle")
	if err != nil {
		return nil, err
	}
	return &RectangleClassView{inner: bld}, nil
}

func (t *RectangleClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type RecursiveUnionClassView struct {
    inner baml.ClassBuilder
}

func (t *RecursiveUnionClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *RecursiveUnionClassView) PropertyValue() (ClassPropertyView, error) {
    return t.inner.Property("value")
}

func (t *RecursiveUnionClassView) PropertyChildren() (ClassPropertyView, error) {
    return t.inner.Property("children")
}


func (t *TypeBuilder) RecursiveUnion() (*RecursiveUnionClassView, error) {
	bld, err := t.inner.Class("RecursiveUnion")
	if err != nil {
		return nil, err
	}
	return &RecursiveUnionClassView{inner: bld}, nil
}

func (t *RecursiveUnionClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ResultClassView struct {
    inner baml.ClassBuilder
}

func (t *ResultClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ResultClassView) PropertyValue() (ClassPropertyView, error) {
    return t.inner.Property("value")
}

func (t *ResultClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}


func (t *TypeBuilder) Result() (*ResultClassView, error) {
	bld, err := t.inner.Class("Result")
	if err != nil {
		return nil, err
	}
	return &ResultClassView{inner: bld}, nil
}

func (t *ResultClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SuccessClassView struct {
    inner baml.ClassBuilder
}

func (t *SuccessClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SuccessClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *SuccessClassView) PropertyMessage() (ClassPropertyView, error) {
    return t.inner.Property("message")
}

func (t *SuccessClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}


func (t *TypeBuilder) Success() (*SuccessClassView, error) {
	bld, err := t.inner.Class("Success")
	if err != nil {
		return nil, err
	}
	return &SuccessClassView{inner: bld}, nil
}

func (t *SuccessClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type TriangleClassView struct {
    inner baml.ClassBuilder
}

func (t *TriangleClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *TriangleClassView) PropertyShape() (ClassPropertyView, error) {
    return t.inner.Property("shape")
}

func (t *TriangleClassView) PropertyBase() (ClassPropertyView, error) {
    return t.inner.Property("base")
}

func (t *TriangleClassView) PropertyHeight() (ClassPropertyView, error) {
    return t.inner.Property("height")
}


func (t *TypeBuilder) Triangle() (*TriangleClassView, error) {
	bld, err := t.inner.Class("Triangle")
	if err != nil {
		return nil, err
	}
	return &TriangleClassView{inner: bld}, nil
}

func (t *TriangleClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UnionArraysClassView struct {
    inner baml.ClassBuilder
}

func (t *UnionArraysClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UnionArraysClassView) PropertyMixedArray() (ClassPropertyView, error) {
    return t.inner.Property("mixedArray")
}

func (t *UnionArraysClassView) PropertyNullableItems() (ClassPropertyView, error) {
    return t.inner.Property("nullableItems")
}

func (t *UnionArraysClassView) PropertyObjectArray() (ClassPropertyView, error) {
    return t.inner.Property("objectArray")
}

func (t *UnionArraysClassView) PropertyNestedUnionArray() (ClassPropertyView, error) {
    return t.inner.Property("nestedUnionArray")
}


func (t *TypeBuilder) UnionArrays() (*UnionArraysClassView, error) {
	bld, err := t.inner.Class("UnionArrays")
	if err != nil {
		return nil, err
	}
	return &UnionArraysClassView{inner: bld}, nil
}

func (t *UnionArraysClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UserClassView struct {
    inner baml.ClassBuilder
}

func (t *UserClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UserClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *UserClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *UserClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}


func (t *TypeBuilder) User() (*UserClassView, error) {
	bld, err := t.inner.Class("User")
	if err != nil {
		return nil, err
	}
	return &UserClassView{inner: bld}, nil
}

func (t *UserClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type WarningClassView struct {
    inner baml.ClassBuilder
}

func (t *WarningClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *WarningClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *WarningClassView) PropertyMessage() (ClassPropertyView, error) {
    return t.inner.Property("message")
}

func (t *WarningClassView) PropertyLevel() (ClassPropertyView, error) {
    return t.inner.Property("level")
}


func (t *TypeBuilder) Warning() (*WarningClassView, error) {
	bld, err := t.inner.Class("Warning")
	if err != nil {
		return nil, err
	}
	return &WarningClassView{inner: bld}, nil
}

func (t *WarningClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

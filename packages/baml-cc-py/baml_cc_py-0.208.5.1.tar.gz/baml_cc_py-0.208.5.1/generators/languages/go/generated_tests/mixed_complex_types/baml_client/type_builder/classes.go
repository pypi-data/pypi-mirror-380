// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type ActionClassView struct {
    inner baml.ClassBuilder
}

func (t *ActionClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ActionClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *ActionClassView) PropertyParameters() (ClassPropertyView, error) {
    return t.inner.Property("parameters")
}

func (t *ActionClassView) PropertyAsync_() (ClassPropertyView, error) {
    return t.inner.Property("async_")
}


func (t *TypeBuilder) Action() (*ActionClassView, error) {
	bld, err := t.inner.Class("Action")
	if err != nil {
		return nil, err
	}
	return &ActionClassView{inner: bld}, nil
}

func (t *ActionClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type AssetClassView struct {
    inner baml.ClassBuilder
}

func (t *AssetClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *AssetClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *AssetClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *AssetClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}

func (t *AssetClassView) PropertyTags() (ClassPropertyView, error) {
    return t.inner.Property("tags")
}


func (t *TypeBuilder) Asset() (*AssetClassView, error) {
	bld, err := t.inner.Class("Asset")
	if err != nil {
		return nil, err
	}
	return &AssetClassView{inner: bld}, nil
}

func (t *AssetClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type AssetMetadataClassView struct {
    inner baml.ClassBuilder
}

func (t *AssetMetadataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *AssetMetadataClassView) PropertyFilename() (ClassPropertyView, error) {
    return t.inner.Property("filename")
}

func (t *AssetMetadataClassView) PropertySize() (ClassPropertyView, error) {
    return t.inner.Property("size")
}

func (t *AssetMetadataClassView) PropertyMimeType() (ClassPropertyView, error) {
    return t.inner.Property("mimeType")
}

func (t *AssetMetadataClassView) PropertyUploaded() (ClassPropertyView, error) {
    return t.inner.Property("uploaded")
}

func (t *AssetMetadataClassView) PropertyChecksum() (ClassPropertyView, error) {
    return t.inner.Property("checksum")
}


func (t *TypeBuilder) AssetMetadata() (*AssetMetadataClassView, error) {
	bld, err := t.inner.Class("AssetMetadata")
	if err != nil {
		return nil, err
	}
	return &AssetMetadataClassView{inner: bld}, nil
}

func (t *AssetMetadataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ButtonWidgetClassView struct {
    inner baml.ClassBuilder
}

func (t *ButtonWidgetClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ButtonWidgetClassView) PropertyLabel() (ClassPropertyView, error) {
    return t.inner.Property("label")
}

func (t *ButtonWidgetClassView) PropertyAction() (ClassPropertyView, error) {
    return t.inner.Property("action")
}

func (t *ButtonWidgetClassView) PropertyStyle() (ClassPropertyView, error) {
    return t.inner.Property("style")
}


func (t *TypeBuilder) ButtonWidget() (*ButtonWidgetClassView, error) {
	bld, err := t.inner.Class("ButtonWidget")
	if err != nil {
		return nil, err
	}
	return &ButtonWidgetClassView{inner: bld}, nil
}

func (t *ButtonWidgetClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ComplexDataClassView struct {
    inner baml.ClassBuilder
}

func (t *ComplexDataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ComplexDataClassView) PropertyPrimary() (ClassPropertyView, error) {
    return t.inner.Property("primary")
}

func (t *ComplexDataClassView) PropertySecondary() (ClassPropertyView, error) {
    return t.inner.Property("secondary")
}

func (t *ComplexDataClassView) PropertyTertiary() (ClassPropertyView, error) {
    return t.inner.Property("tertiary")
}


func (t *TypeBuilder) ComplexData() (*ComplexDataClassView, error) {
	bld, err := t.inner.Class("ComplexData")
	if err != nil {
		return nil, err
	}
	return &ComplexDataClassView{inner: bld}, nil
}

func (t *ComplexDataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ConditionClassView struct {
    inner baml.ClassBuilder
}

func (t *ConditionClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ConditionClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *ConditionClassView) PropertyConditions() (ClassPropertyView, error) {
    return t.inner.Property("conditions")
}


func (t *TypeBuilder) Condition() (*ConditionClassView, error) {
	bld, err := t.inner.Class("Condition")
	if err != nil {
		return nil, err
	}
	return &ConditionClassView{inner: bld}, nil
}

func (t *ConditionClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ConfigurationClassView struct {
    inner baml.ClassBuilder
}

func (t *ConfigurationClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ConfigurationClassView) PropertyVersion() (ClassPropertyView, error) {
    return t.inner.Property("version")
}

func (t *ConfigurationClassView) PropertyFeatures() (ClassPropertyView, error) {
    return t.inner.Property("features")
}

func (t *ConfigurationClassView) PropertyEnvironments() (ClassPropertyView, error) {
    return t.inner.Property("environments")
}

func (t *ConfigurationClassView) PropertyRules() (ClassPropertyView, error) {
    return t.inner.Property("rules")
}


func (t *TypeBuilder) Configuration() (*ConfigurationClassView, error) {
	bld, err := t.inner.Class("Configuration")
	if err != nil {
		return nil, err
	}
	return &ConfigurationClassView{inner: bld}, nil
}

func (t *ConfigurationClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ContainerWidgetClassView struct {
    inner baml.ClassBuilder
}

func (t *ContainerWidgetClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ContainerWidgetClassView) PropertyLayout() (ClassPropertyView, error) {
    return t.inner.Property("layout")
}

func (t *ContainerWidgetClassView) PropertyChildren() (ClassPropertyView, error) {
    return t.inner.Property("children")
}

func (t *ContainerWidgetClassView) PropertyStyle() (ClassPropertyView, error) {
    return t.inner.Property("style")
}


func (t *TypeBuilder) ContainerWidget() (*ContainerWidgetClassView, error) {
	bld, err := t.inner.Class("ContainerWidget")
	if err != nil {
		return nil, err
	}
	return &ContainerWidgetClassView{inner: bld}, nil
}

func (t *ContainerWidgetClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type DataObjectClassView struct {
    inner baml.ClassBuilder
}

func (t *DataObjectClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *DataObjectClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *DataObjectClassView) PropertyValue() (ClassPropertyView, error) {
    return t.inner.Property("value")
}


func (t *TypeBuilder) DataObject() (*DataObjectClassView, error) {
	bld, err := t.inner.Class("DataObject")
	if err != nil {
		return nil, err
	}
	return &DataObjectClassView{inner: bld}, nil
}

func (t *DataObjectClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type DimensionsClassView struct {
    inner baml.ClassBuilder
}

func (t *DimensionsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *DimensionsClassView) PropertyWidth() (ClassPropertyView, error) {
    return t.inner.Property("width")
}

func (t *DimensionsClassView) PropertyHeight() (ClassPropertyView, error) {
    return t.inner.Property("height")
}


func (t *TypeBuilder) Dimensions() (*DimensionsClassView, error) {
	bld, err := t.inner.Class("Dimensions")
	if err != nil {
		return nil, err
	}
	return &DimensionsClassView{inner: bld}, nil
}

func (t *DimensionsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type EnvironmentClassView struct {
    inner baml.ClassBuilder
}

func (t *EnvironmentClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *EnvironmentClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *EnvironmentClassView) PropertyUrl() (ClassPropertyView, error) {
    return t.inner.Property("url")
}

func (t *EnvironmentClassView) PropertyVariables() (ClassPropertyView, error) {
    return t.inner.Property("variables")
}

func (t *EnvironmentClassView) PropertySecrets() (ClassPropertyView, error) {
    return t.inner.Property("secrets")
}


func (t *TypeBuilder) Environment() (*EnvironmentClassView, error) {
	bld, err := t.inner.Class("Environment")
	if err != nil {
		return nil, err
	}
	return &EnvironmentClassView{inner: bld}, nil
}

func (t *EnvironmentClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ErrorClassView struct {
    inner baml.ClassBuilder
}

func (t *ErrorClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ErrorClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *ErrorClassView) PropertyMessage() (ClassPropertyView, error) {
    return t.inner.Property("message")
}

func (t *ErrorClassView) PropertyCode() (ClassPropertyView, error) {
    return t.inner.Property("code")
}


func (t *TypeBuilder) Error() (*ErrorClassView, error) {
	bld, err := t.inner.Class("Error")
	if err != nil {
		return nil, err
	}
	return &ErrorClassView{inner: bld}, nil
}

func (t *ErrorClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ErrorDetailClassView struct {
    inner baml.ClassBuilder
}

func (t *ErrorDetailClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ErrorDetailClassView) PropertyCode() (ClassPropertyView, error) {
    return t.inner.Property("code")
}

func (t *ErrorDetailClassView) PropertyMessage() (ClassPropertyView, error) {
    return t.inner.Property("message")
}

func (t *ErrorDetailClassView) PropertyDetails() (ClassPropertyView, error) {
    return t.inner.Property("details")
}


func (t *TypeBuilder) ErrorDetail() (*ErrorDetailClassView, error) {
	bld, err := t.inner.Class("ErrorDetail")
	if err != nil {
		return nil, err
	}
	return &ErrorDetailClassView{inner: bld}, nil
}

func (t *ErrorDetailClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type FeatureClassView struct {
    inner baml.ClassBuilder
}

func (t *FeatureClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *FeatureClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *FeatureClassView) PropertyEnabled() (ClassPropertyView, error) {
    return t.inner.Property("enabled")
}

func (t *FeatureClassView) PropertyConfig() (ClassPropertyView, error) {
    return t.inner.Property("config")
}

func (t *FeatureClassView) PropertyDependencies() (ClassPropertyView, error) {
    return t.inner.Property("dependencies")
}


func (t *TypeBuilder) Feature() (*FeatureClassView, error) {
	bld, err := t.inner.Class("Feature")
	if err != nil {
		return nil, err
	}
	return &FeatureClassView{inner: bld}, nil
}

func (t *FeatureClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ImageWidgetClassView struct {
    inner baml.ClassBuilder
}

func (t *ImageWidgetClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ImageWidgetClassView) PropertyAlt() (ClassPropertyView, error) {
    return t.inner.Property("alt")
}

func (t *ImageWidgetClassView) PropertyDimensions() (ClassPropertyView, error) {
    return t.inner.Property("dimensions")
}


func (t *TypeBuilder) ImageWidget() (*ImageWidgetClassView, error) {
	bld, err := t.inner.Class("ImageWidget")
	if err != nil {
		return nil, err
	}
	return &ImageWidgetClassView{inner: bld}, nil
}

func (t *ImageWidgetClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ItemClassView struct {
    inner baml.ClassBuilder
}

func (t *ItemClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ItemClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *ItemClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *ItemClassView) PropertyVariants() (ClassPropertyView, error) {
    return t.inner.Property("variants")
}

func (t *ItemClassView) PropertyAttributes() (ClassPropertyView, error) {
    return t.inner.Property("attributes")
}


func (t *TypeBuilder) Item() (*ItemClassView, error) {
	bld, err := t.inner.Class("Item")
	if err != nil {
		return nil, err
	}
	return &ItemClassView{inner: bld}, nil
}

func (t *ItemClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type KitchenSinkClassView struct {
    inner baml.ClassBuilder
}

func (t *KitchenSinkClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *KitchenSinkClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *KitchenSinkClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *KitchenSinkClassView) PropertyScore() (ClassPropertyView, error) {
    return t.inner.Property("score")
}

func (t *KitchenSinkClassView) PropertyActive() (ClassPropertyView, error) {
    return t.inner.Property("active")
}

func (t *KitchenSinkClassView) PropertyNothing() (ClassPropertyView, error) {
    return t.inner.Property("nothing")
}

func (t *KitchenSinkClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}

func (t *KitchenSinkClassView) PropertyPriority() (ClassPropertyView, error) {
    return t.inner.Property("priority")
}

func (t *KitchenSinkClassView) PropertyTags() (ClassPropertyView, error) {
    return t.inner.Property("tags")
}

func (t *KitchenSinkClassView) PropertyNumbers() (ClassPropertyView, error) {
    return t.inner.Property("numbers")
}

func (t *KitchenSinkClassView) PropertyMatrix() (ClassPropertyView, error) {
    return t.inner.Property("matrix")
}

func (t *KitchenSinkClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}

func (t *KitchenSinkClassView) PropertyScores() (ClassPropertyView, error) {
    return t.inner.Property("scores")
}

func (t *KitchenSinkClassView) PropertyDescription() (ClassPropertyView, error) {
    return t.inner.Property("description")
}

func (t *KitchenSinkClassView) PropertyNotes() (ClassPropertyView, error) {
    return t.inner.Property("notes")
}

func (t *KitchenSinkClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *KitchenSinkClassView) PropertyResult() (ClassPropertyView, error) {
    return t.inner.Property("result")
}

func (t *KitchenSinkClassView) PropertyUser() (ClassPropertyView, error) {
    return t.inner.Property("user")
}

func (t *KitchenSinkClassView) PropertyItems() (ClassPropertyView, error) {
    return t.inner.Property("items")
}

func (t *KitchenSinkClassView) PropertyConfig() (ClassPropertyView, error) {
    return t.inner.Property("config")
}


func (t *TypeBuilder) KitchenSink() (*KitchenSinkClassView, error) {
	bld, err := t.inner.Class("KitchenSink")
	if err != nil {
		return nil, err
	}
	return &KitchenSinkClassView{inner: bld}, nil
}

func (t *KitchenSinkClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type NodeClassView struct {
    inner baml.ClassBuilder
}

func (t *NodeClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *NodeClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *NodeClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *NodeClassView) PropertyValue() (ClassPropertyView, error) {
    return t.inner.Property("value")
}

func (t *NodeClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}


func (t *TypeBuilder) Node() (*NodeClassView, error) {
	bld, err := t.inner.Class("Node")
	if err != nil {
		return nil, err
	}
	return &NodeClassView{inner: bld}, nil
}

func (t *NodeClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type NodeMetadataClassView struct {
    inner baml.ClassBuilder
}

func (t *NodeMetadataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *NodeMetadataClassView) PropertyCreated() (ClassPropertyView, error) {
    return t.inner.Property("created")
}

func (t *NodeMetadataClassView) PropertyModified() (ClassPropertyView, error) {
    return t.inner.Property("modified")
}

func (t *NodeMetadataClassView) PropertyTags() (ClassPropertyView, error) {
    return t.inner.Property("tags")
}

func (t *NodeMetadataClassView) PropertyAttributes() (ClassPropertyView, error) {
    return t.inner.Property("attributes")
}


func (t *TypeBuilder) NodeMetadata() (*NodeMetadataClassView, error) {
	bld, err := t.inner.Class("NodeMetadata")
	if err != nil {
		return nil, err
	}
	return &NodeMetadataClassView{inner: bld}, nil
}

func (t *NodeMetadataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type PrimaryDataClassView struct {
    inner baml.ClassBuilder
}

func (t *PrimaryDataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *PrimaryDataClassView) PropertyValues() (ClassPropertyView, error) {
    return t.inner.Property("values")
}

func (t *PrimaryDataClassView) PropertyMappings() (ClassPropertyView, error) {
    return t.inner.Property("mappings")
}

func (t *PrimaryDataClassView) PropertyFlags() (ClassPropertyView, error) {
    return t.inner.Property("flags")
}


func (t *TypeBuilder) PrimaryData() (*PrimaryDataClassView, error) {
	bld, err := t.inner.Class("PrimaryData")
	if err != nil {
		return nil, err
	}
	return &PrimaryDataClassView{inner: bld}, nil
}

func (t *PrimaryDataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type RecordClassView struct {
    inner baml.ClassBuilder
}

func (t *RecordClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *RecordClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *RecordClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *RecordClassView) PropertyRelated() (ClassPropertyView, error) {
    return t.inner.Property("related")
}


func (t *TypeBuilder) Record() (*RecordClassView, error) {
	bld, err := t.inner.Class("Record")
	if err != nil {
		return nil, err
	}
	return &RecordClassView{inner: bld}, nil
}

func (t *RecordClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ResponseMetadataClassView struct {
    inner baml.ClassBuilder
}

func (t *ResponseMetadataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ResponseMetadataClassView) PropertyTimestamp() (ClassPropertyView, error) {
    return t.inner.Property("timestamp")
}

func (t *ResponseMetadataClassView) PropertyRequestId() (ClassPropertyView, error) {
    return t.inner.Property("requestId")
}

func (t *ResponseMetadataClassView) PropertyDuration() (ClassPropertyView, error) {
    return t.inner.Property("duration")
}

func (t *ResponseMetadataClassView) PropertyRetries() (ClassPropertyView, error) {
    return t.inner.Property("retries")
}


func (t *TypeBuilder) ResponseMetadata() (*ResponseMetadataClassView, error) {
	bld, err := t.inner.Class("ResponseMetadata")
	if err != nil {
		return nil, err
	}
	return &ResponseMetadataClassView{inner: bld}, nil
}

func (t *ResponseMetadataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type RuleClassView struct {
    inner baml.ClassBuilder
}

func (t *RuleClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *RuleClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *RuleClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *RuleClassView) PropertyCondition() (ClassPropertyView, error) {
    return t.inner.Property("condition")
}

func (t *RuleClassView) PropertyActions() (ClassPropertyView, error) {
    return t.inner.Property("actions")
}

func (t *RuleClassView) PropertyPriority() (ClassPropertyView, error) {
    return t.inner.Property("priority")
}


func (t *TypeBuilder) Rule() (*RuleClassView, error) {
	bld, err := t.inner.Class("Rule")
	if err != nil {
		return nil, err
	}
	return &RuleClassView{inner: bld}, nil
}

func (t *RuleClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SecondaryDataClassView struct {
    inner baml.ClassBuilder
}

func (t *SecondaryDataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SecondaryDataClassView) PropertyRecords() (ClassPropertyView, error) {
    return t.inner.Property("records")
}

func (t *SecondaryDataClassView) PropertyIndex() (ClassPropertyView, error) {
    return t.inner.Property("index")
}


func (t *TypeBuilder) SecondaryData() (*SecondaryDataClassView, error) {
	bld, err := t.inner.Class("SecondaryData")
	if err != nil {
		return nil, err
	}
	return &SecondaryDataClassView{inner: bld}, nil
}

func (t *SecondaryDataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SettingClassView struct {
    inner baml.ClassBuilder
}

func (t *SettingClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SettingClassView) PropertyKey() (ClassPropertyView, error) {
    return t.inner.Property("key")
}

func (t *SettingClassView) PropertyValue() (ClassPropertyView, error) {
    return t.inner.Property("value")
}

func (t *SettingClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}


func (t *TypeBuilder) Setting() (*SettingClassView, error) {
	bld, err := t.inner.Class("Setting")
	if err != nil {
		return nil, err
	}
	return &SettingClassView{inner: bld}, nil
}

func (t *SettingClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SimpleConditionClassView struct {
    inner baml.ClassBuilder
}

func (t *SimpleConditionClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SimpleConditionClassView) PropertyField() (ClassPropertyView, error) {
    return t.inner.Property("field")
}

func (t *SimpleConditionClassView) PropertyOperator() (ClassPropertyView, error) {
    return t.inner.Property("operator")
}

func (t *SimpleConditionClassView) PropertyValue() (ClassPropertyView, error) {
    return t.inner.Property("value")
}


func (t *TypeBuilder) SimpleCondition() (*SimpleConditionClassView, error) {
	bld, err := t.inner.Class("SimpleCondition")
	if err != nil {
		return nil, err
	}
	return &SimpleConditionClassView{inner: bld}, nil
}

func (t *SimpleConditionClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SuccessClassView struct {
    inner baml.ClassBuilder
}

func (t *SuccessClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SuccessClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *SuccessClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}


func (t *TypeBuilder) Success() (*SuccessClassView, error) {
	bld, err := t.inner.Class("Success")
	if err != nil {
		return nil, err
	}
	return &SuccessClassView{inner: bld}, nil
}

func (t *SuccessClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type TertiaryDataClassView struct {
    inner baml.ClassBuilder
}

func (t *TertiaryDataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *TertiaryDataClassView) PropertyRaw() (ClassPropertyView, error) {
    return t.inner.Property("raw")
}

func (t *TertiaryDataClassView) PropertyParsed() (ClassPropertyView, error) {
    return t.inner.Property("parsed")
}

func (t *TertiaryDataClassView) PropertyValid() (ClassPropertyView, error) {
    return t.inner.Property("valid")
}


func (t *TypeBuilder) TertiaryData() (*TertiaryDataClassView, error) {
	bld, err := t.inner.Class("TertiaryData")
	if err != nil {
		return nil, err
	}
	return &TertiaryDataClassView{inner: bld}, nil
}

func (t *TertiaryDataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type TextWidgetClassView struct {
    inner baml.ClassBuilder
}

func (t *TextWidgetClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *TextWidgetClassView) PropertyContent() (ClassPropertyView, error) {
    return t.inner.Property("content")
}

func (t *TextWidgetClassView) PropertyFormat() (ClassPropertyView, error) {
    return t.inner.Property("format")
}

func (t *TextWidgetClassView) PropertyStyle() (ClassPropertyView, error) {
    return t.inner.Property("style")
}


func (t *TypeBuilder) TextWidget() (*TextWidgetClassView, error) {
	bld, err := t.inner.Class("TextWidget")
	if err != nil {
		return nil, err
	}
	return &TextWidgetClassView{inner: bld}, nil
}

func (t *TextWidgetClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UltraComplexClassView struct {
    inner baml.ClassBuilder
}

func (t *UltraComplexClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UltraComplexClassView) PropertyTree() (ClassPropertyView, error) {
    return t.inner.Property("tree")
}

func (t *UltraComplexClassView) PropertyWidgets() (ClassPropertyView, error) {
    return t.inner.Property("widgets")
}

func (t *UltraComplexClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *UltraComplexClassView) PropertyResponse() (ClassPropertyView, error) {
    return t.inner.Property("response")
}

func (t *UltraComplexClassView) PropertyAssets() (ClassPropertyView, error) {
    return t.inner.Property("assets")
}


func (t *TypeBuilder) UltraComplex() (*UltraComplexClassView, error) {
	bld, err := t.inner.Class("UltraComplex")
	if err != nil {
		return nil, err
	}
	return &UltraComplexClassView{inner: bld}, nil
}

func (t *UltraComplexClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UserClassView struct {
    inner baml.ClassBuilder
}

func (t *UserClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UserClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *UserClassView) PropertyProfile() (ClassPropertyView, error) {
    return t.inner.Property("profile")
}

func (t *UserClassView) PropertySettings() (ClassPropertyView, error) {
    return t.inner.Property("settings")
}


func (t *TypeBuilder) User() (*UserClassView, error) {
	bld, err := t.inner.Class("User")
	if err != nil {
		return nil, err
	}
	return &UserClassView{inner: bld}, nil
}

func (t *UserClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UserProfileClassView struct {
    inner baml.ClassBuilder
}

func (t *UserProfileClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UserProfileClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *UserProfileClassView) PropertyEmail() (ClassPropertyView, error) {
    return t.inner.Property("email")
}

func (t *UserProfileClassView) PropertyBio() (ClassPropertyView, error) {
    return t.inner.Property("bio")
}

func (t *UserProfileClassView) PropertyLinks() (ClassPropertyView, error) {
    return t.inner.Property("links")
}


func (t *TypeBuilder) UserProfile() (*UserProfileClassView, error) {
	bld, err := t.inner.Class("UserProfile")
	if err != nil {
		return nil, err
	}
	return &UserProfileClassView{inner: bld}, nil
}

func (t *UserProfileClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UserResponseClassView struct {
    inner baml.ClassBuilder
}

func (t *UserResponseClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UserResponseClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}

func (t *UserResponseClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *UserResponseClassView) PropertyError() (ClassPropertyView, error) {
    return t.inner.Property("error")
}

func (t *UserResponseClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}


func (t *TypeBuilder) UserResponse() (*UserResponseClassView, error) {
	bld, err := t.inner.Class("UserResponse")
	if err != nil {
		return nil, err
	}
	return &UserResponseClassView{inner: bld}, nil
}

func (t *UserResponseClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type VariantClassView struct {
    inner baml.ClassBuilder
}

func (t *VariantClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *VariantClassView) PropertySku() (ClassPropertyView, error) {
    return t.inner.Property("sku")
}

func (t *VariantClassView) PropertyPrice() (ClassPropertyView, error) {
    return t.inner.Property("price")
}

func (t *VariantClassView) PropertyStock() (ClassPropertyView, error) {
    return t.inner.Property("stock")
}

func (t *VariantClassView) PropertyOptions() (ClassPropertyView, error) {
    return t.inner.Property("options")
}


func (t *TypeBuilder) Variant() (*VariantClassView, error) {
	bld, err := t.inner.Class("Variant")
	if err != nil {
		return nil, err
	}
	return &VariantClassView{inner: bld}, nil
}

func (t *VariantClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type WidgetClassView struct {
    inner baml.ClassBuilder
}

func (t *WidgetClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *WidgetClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *WidgetClassView) PropertyButton() (ClassPropertyView, error) {
    return t.inner.Property("button")
}

func (t *WidgetClassView) PropertyText() (ClassPropertyView, error) {
    return t.inner.Property("text")
}

func (t *WidgetClassView) PropertyImg() (ClassPropertyView, error) {
    return t.inner.Property("img")
}

func (t *WidgetClassView) PropertyContainer() (ClassPropertyView, error) {
    return t.inner.Property("container")
}


func (t *TypeBuilder) Widget() (*WidgetClassView, error) {
	bld, err := t.inner.Class("Widget")
	if err != nil {
		return nil, err
	}
	return &WidgetClassView{inner: bld}, nil
}

func (t *WidgetClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package baml_client

import (
    "context"

    "edge_cases/baml_client/types"
    "edge_cases/baml_client/stream_types"
    baml "github.com/boundaryml/baml/engine/language_client_go/pkg"
)

type stream struct {}
var Stream = &stream{}

type StreamValue[TStream any, TFinal any] struct {
    IsError   bool
    Error     error
    IsFinal   bool
    as_final  *TFinal
    as_stream *TStream
}

func (s *StreamValue[TStream, TFinal]) Final() *TFinal {
    return s.as_final
}

func (s *StreamValue[TStream, TFinal]) Stream() *TStream {
    return s.as_stream
}


/// Streaming version of TestCircularReference
func (*stream) TestCircularReference(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.CircularReference, types.CircularReference], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestCircularReference: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestCircularReference", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.CircularReference, types.CircularReference])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.CircularReference, types.CircularReference]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.CircularReference)
                    channel <- StreamValue[stream_types.CircularReference, types.CircularReference]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.CircularReference)
                channel <- StreamValue[stream_types.CircularReference, types.CircularReference]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestDeepRecursion
func (*stream) TestDeepRecursion(ctx context.Context, depth int64, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.DeepRecursion, types.DeepRecursion], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "depth": depth, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestDeepRecursion: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestDeepRecursion", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.DeepRecursion, types.DeepRecursion])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.DeepRecursion, types.DeepRecursion]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.DeepRecursion)
                    channel <- StreamValue[stream_types.DeepRecursion, types.DeepRecursion]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.DeepRecursion)
                channel <- StreamValue[stream_types.DeepRecursion, types.DeepRecursion]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestEmptyCollections
func (*stream) TestEmptyCollections(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.EmptyCollections, types.EmptyCollections], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestEmptyCollections: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestEmptyCollections", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.EmptyCollections, types.EmptyCollections])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.EmptyCollections, types.EmptyCollections]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.EmptyCollections)
                    channel <- StreamValue[stream_types.EmptyCollections, types.EmptyCollections]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.EmptyCollections)
                channel <- StreamValue[stream_types.EmptyCollections, types.EmptyCollections]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestLargeStructure
func (*stream) TestLargeStructure(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.LargeStructure, types.LargeStructure], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestLargeStructure: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestLargeStructure", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.LargeStructure, types.LargeStructure])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.LargeStructure, types.LargeStructure]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.LargeStructure)
                    channel <- StreamValue[stream_types.LargeStructure, types.LargeStructure]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.LargeStructure)
                channel <- StreamValue[stream_types.LargeStructure, types.LargeStructure]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestNumberEdgeCases
func (*stream) TestNumberEdgeCases(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.NumberEdgeCases, types.NumberEdgeCases], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestNumberEdgeCases: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestNumberEdgeCases", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.NumberEdgeCases, types.NumberEdgeCases])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.NumberEdgeCases, types.NumberEdgeCases]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.NumberEdgeCases)
                    channel <- StreamValue[stream_types.NumberEdgeCases, types.NumberEdgeCases]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.NumberEdgeCases)
                channel <- StreamValue[stream_types.NumberEdgeCases, types.NumberEdgeCases]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestSpecialCharacters
func (*stream) TestSpecialCharacters(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.SpecialCharacters, types.SpecialCharacters], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestSpecialCharacters: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestSpecialCharacters", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.SpecialCharacters, types.SpecialCharacters])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.SpecialCharacters, types.SpecialCharacters]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.SpecialCharacters)
                    channel <- StreamValue[stream_types.SpecialCharacters, types.SpecialCharacters]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.SpecialCharacters)
                channel <- StreamValue[stream_types.SpecialCharacters, types.SpecialCharacters]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

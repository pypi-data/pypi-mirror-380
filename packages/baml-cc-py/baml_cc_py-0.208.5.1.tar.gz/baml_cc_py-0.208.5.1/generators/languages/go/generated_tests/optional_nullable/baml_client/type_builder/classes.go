// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type ComplexOptionalClassView struct {
    inner baml.ClassBuilder
}

func (t *ComplexOptionalClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ComplexOptionalClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *ComplexOptionalClassView) PropertyItems() (ClassPropertyView, error) {
    return t.inner.Property("items")
}

func (t *ComplexOptionalClassView) PropertyMapping() (ClassPropertyView, error) {
    return t.inner.Property("mapping")
}


func (t *TypeBuilder) ComplexOptional() (*ComplexOptionalClassView, error) {
	bld, err := t.inner.Class("ComplexOptional")
	if err != nil {
		return nil, err
	}
	return &ComplexOptionalClassView{inner: bld}, nil
}

func (t *ComplexOptionalClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type MixedOptionalNullableClassView struct {
    inner baml.ClassBuilder
}

func (t *MixedOptionalNullableClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MixedOptionalNullableClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *MixedOptionalNullableClassView) PropertyDescription() (ClassPropertyView, error) {
    return t.inner.Property("description")
}

func (t *MixedOptionalNullableClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}

func (t *MixedOptionalNullableClassView) PropertyNotes() (ClassPropertyView, error) {
    return t.inner.Property("notes")
}

func (t *MixedOptionalNullableClassView) PropertyTags() (ClassPropertyView, error) {
    return t.inner.Property("tags")
}

func (t *MixedOptionalNullableClassView) PropertyCategories() (ClassPropertyView, error) {
    return t.inner.Property("categories")
}

func (t *MixedOptionalNullableClassView) PropertyKeywords() (ClassPropertyView, error) {
    return t.inner.Property("keywords")
}

func (t *MixedOptionalNullableClassView) PropertyPrimaryUser() (ClassPropertyView, error) {
    return t.inner.Property("primaryUser")
}

func (t *MixedOptionalNullableClassView) PropertySecondaryUser() (ClassPropertyView, error) {
    return t.inner.Property("secondaryUser")
}

func (t *MixedOptionalNullableClassView) PropertyTertiaryUser() (ClassPropertyView, error) {
    return t.inner.Property("tertiaryUser")
}


func (t *TypeBuilder) MixedOptionalNullable() (*MixedOptionalNullableClassView, error) {
	bld, err := t.inner.Class("MixedOptionalNullable")
	if err != nil {
		return nil, err
	}
	return &MixedOptionalNullableClassView{inner: bld}, nil
}

func (t *MixedOptionalNullableClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type NullableTypesClassView struct {
    inner baml.ClassBuilder
}

func (t *NullableTypesClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *NullableTypesClassView) PropertyNullableString() (ClassPropertyView, error) {
    return t.inner.Property("nullableString")
}

func (t *NullableTypesClassView) PropertyNullableInt() (ClassPropertyView, error) {
    return t.inner.Property("nullableInt")
}

func (t *NullableTypesClassView) PropertyNullableFloat() (ClassPropertyView, error) {
    return t.inner.Property("nullableFloat")
}

func (t *NullableTypesClassView) PropertyNullableBool() (ClassPropertyView, error) {
    return t.inner.Property("nullableBool")
}

func (t *NullableTypesClassView) PropertyNullableArray() (ClassPropertyView, error) {
    return t.inner.Property("nullableArray")
}

func (t *NullableTypesClassView) PropertyNullableObject() (ClassPropertyView, error) {
    return t.inner.Property("nullableObject")
}


func (t *TypeBuilder) NullableTypes() (*NullableTypesClassView, error) {
	bld, err := t.inner.Class("NullableTypes")
	if err != nil {
		return nil, err
	}
	return &NullableTypesClassView{inner: bld}, nil
}

func (t *NullableTypesClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type OptionalDataClassView struct {
    inner baml.ClassBuilder
}

func (t *OptionalDataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *OptionalDataClassView) PropertyValue() (ClassPropertyView, error) {
    return t.inner.Property("value")
}

func (t *OptionalDataClassView) PropertyCount() (ClassPropertyView, error) {
    return t.inner.Property("count")
}

func (t *OptionalDataClassView) PropertyEnabled() (ClassPropertyView, error) {
    return t.inner.Property("enabled")
}


func (t *TypeBuilder) OptionalData() (*OptionalDataClassView, error) {
	bld, err := t.inner.Class("OptionalData")
	if err != nil {
		return nil, err
	}
	return &OptionalDataClassView{inner: bld}, nil
}

func (t *OptionalDataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type OptionalFieldsClassView struct {
    inner baml.ClassBuilder
}

func (t *OptionalFieldsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *OptionalFieldsClassView) PropertyRequiredString() (ClassPropertyView, error) {
    return t.inner.Property("requiredString")
}

func (t *OptionalFieldsClassView) PropertyOptionalString() (ClassPropertyView, error) {
    return t.inner.Property("optionalString")
}

func (t *OptionalFieldsClassView) PropertyRequiredInt() (ClassPropertyView, error) {
    return t.inner.Property("requiredInt")
}

func (t *OptionalFieldsClassView) PropertyOptionalInt() (ClassPropertyView, error) {
    return t.inner.Property("optionalInt")
}

func (t *OptionalFieldsClassView) PropertyRequiredBool() (ClassPropertyView, error) {
    return t.inner.Property("requiredBool")
}

func (t *OptionalFieldsClassView) PropertyOptionalBool() (ClassPropertyView, error) {
    return t.inner.Property("optionalBool")
}

func (t *OptionalFieldsClassView) PropertyOptionalArray() (ClassPropertyView, error) {
    return t.inner.Property("optionalArray")
}

func (t *OptionalFieldsClassView) PropertyOptionalMap() (ClassPropertyView, error) {
    return t.inner.Property("optionalMap")
}


func (t *TypeBuilder) OptionalFields() (*OptionalFieldsClassView, error) {
	bld, err := t.inner.Class("OptionalFields")
	if err != nil {
		return nil, err
	}
	return &OptionalFieldsClassView{inner: bld}, nil
}

func (t *OptionalFieldsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type OptionalItemClassView struct {
    inner baml.ClassBuilder
}

func (t *OptionalItemClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *OptionalItemClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *OptionalItemClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *OptionalItemClassView) PropertyDescription() (ClassPropertyView, error) {
    return t.inner.Property("description")
}

func (t *OptionalItemClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}


func (t *TypeBuilder) OptionalItem() (*OptionalItemClassView, error) {
	bld, err := t.inner.Class("OptionalItem")
	if err != nil {
		return nil, err
	}
	return &OptionalItemClassView{inner: bld}, nil
}

func (t *OptionalItemClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type OptionalValueClassView struct {
    inner baml.ClassBuilder
}

func (t *OptionalValueClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *OptionalValueClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *OptionalValueClassView) PropertyOptional() (ClassPropertyView, error) {
    return t.inner.Property("optional")
}


func (t *TypeBuilder) OptionalValue() (*OptionalValueClassView, error) {
	bld, err := t.inner.Class("OptionalValue")
	if err != nil {
		return nil, err
	}
	return &OptionalValueClassView{inner: bld}, nil
}

func (t *OptionalValueClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ProductClassView struct {
    inner baml.ClassBuilder
}

func (t *ProductClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ProductClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *ProductClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *ProductClassView) PropertyPrice() (ClassPropertyView, error) {
    return t.inner.Property("price")
}


func (t *TypeBuilder) Product() (*ProductClassView, error) {
	bld, err := t.inner.Class("Product")
	if err != nil {
		return nil, err
	}
	return &ProductClassView{inner: bld}, nil
}

func (t *ProductClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UnionWithNullClassView struct {
    inner baml.ClassBuilder
}

func (t *UnionWithNullClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UnionWithNullClassView) PropertySimpleUnion() (ClassPropertyView, error) {
    return t.inner.Property("simpleUnion")
}

func (t *UnionWithNullClassView) PropertyNullableUnion() (ClassPropertyView, error) {
    return t.inner.Property("nullableUnion")
}

func (t *UnionWithNullClassView) PropertyOptionalUnion() (ClassPropertyView, error) {
    return t.inner.Property("optionalUnion")
}

func (t *UnionWithNullClassView) PropertyComplexUnion() (ClassPropertyView, error) {
    return t.inner.Property("complexUnion")
}


func (t *TypeBuilder) UnionWithNull() (*UnionWithNullClassView, error) {
	bld, err := t.inner.Class("UnionWithNull")
	if err != nil {
		return nil, err
	}
	return &UnionWithNullClassView{inner: bld}, nil
}

func (t *UnionWithNullClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UserClassView struct {
    inner baml.ClassBuilder
}

func (t *UserClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UserClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *UserClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *UserClassView) PropertyEmail() (ClassPropertyView, error) {
    return t.inner.Property("email")
}

func (t *UserClassView) PropertyPhone() (ClassPropertyView, error) {
    return t.inner.Property("phone")
}


func (t *TypeBuilder) User() (*UserClassView, error) {
	bld, err := t.inner.Class("User")
	if err != nil {
		return nil, err
	}
	return &UserClassView{inner: bld}, nil
}

func (t *UserClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

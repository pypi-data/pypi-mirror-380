// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package types

import (
    "encoding/json"
    "fmt"

    baml "github.com/boundaryml/baml/engine/language_client_go/pkg"
    "github.com/boundaryml/baml/engine/language_client_go/pkg/cffi"
)

type Union2KdarkOrKlight struct {
    variant string
    
    variant_Klight *string
    
    variant_Kdark *string
    
}

func (u *Union2KdarkOrKlight) Decode(holder *cffi.CFFIValueUnionVariant, typeMap baml.TypeMap) {
    valueHolder := holder.Value
    variantName := holder.VariantName
	switch variantName {
    case "string_light":
            u.variant = "Klight"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Klight = &value
    case "string_dark":
            u.variant = "Kdark"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kdark = &value
    
    default:
        panic(fmt.Sprintf("invalid union variant: %s", variantName))
	}
}


func (u Union2KdarkOrKlight) Encode() (*cffi.CFFIValueHolder, error) {
    switch u.variant {
    
    case "Klight":
        return baml.EncodeUnion(u.BamlEncodeName, "string_light", *u.variant_Klight)
    
    case "Kdark":
        return baml.EncodeUnion(u.BamlEncodeName, "string_dark", *u.variant_Kdark)
    
    case "":
        return nil, fmt.Errorf("invalid union variant: [unset]")
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u Union2KdarkOrKlight) BamlTypeName() string {
    return "Union2KdarkOrKlight"
}

func (u Union2KdarkOrKlight) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Name:      "Union__string_dark__string_light",
        Namespace: cffi.CFFITypeNamespace_TYPES,
    }
}

func (u Union2KdarkOrKlight) MarshalJSON() ([]byte, error) {
    switch u.variant {
    
    case "Klight":
        return json.Marshal(u.variant_Klight)
    
    case "Kdark":
        return json.Marshal(u.variant_Kdark)
    
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u *Union2KdarkOrKlight) UnmarshalJSON(data []byte) error {
    var err error
    
    err = json.Unmarshal(data, &u.variant_Klight)
    if err == nil {
        u.variant = "Klight"
        return nil
    } else {
        u.variant_Klight = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kdark)
    if err == nil {
        u.variant = "Kdark"
        return nil
    } else {
        u.variant_Kdark = nil
    }
    
    return fmt.Errorf("invalid union variant: %s", string(data))
}


func Union2KdarkOrKlight__NewKlight() Union2KdarkOrKlight {
    
    var v string = "light"
    
    return Union2KdarkOrKlight{
        variant: "Klight",
        variant_Klight: &v,
    }
}

func (u *Union2KdarkOrKlight) SetKlight() {
    
    var v string = "light"
    
    u.variant = "Klight"
    u.variant_Klight = &v
    
    u.variant_Kdark = nil
    
}

func (u *Union2KdarkOrKlight) IsKlight() bool {
    return u.variant == "Klight"
}

func (u *Union2KdarkOrKlight) AsKlight() *string {
    if u.variant != "Klight" {
        return nil
    }
    return u.variant_Klight
}

func Union2KdarkOrKlight__NewKdark() Union2KdarkOrKlight {
    
    var v string = "dark"
    
    return Union2KdarkOrKlight{
        variant: "Kdark",
        variant_Kdark: &v,
    }
}

func (u *Union2KdarkOrKlight) SetKdark() {
    
    var v string = "dark"
    
    u.variant = "Kdark"
    u.variant_Kdark = &v
    
    u.variant_Klight = nil
    
}

func (u *Union2KdarkOrKlight) IsKdark() bool {
    return u.variant == "Kdark"
}

func (u *Union2KdarkOrKlight) AsKdark() *string {
    if u.variant != "Kdark" {
        return nil
    }
    return u.variant_Kdark
}

type Union2KgridOrKlist struct {
    variant string
    
    variant_Kgrid *string
    
    variant_Klist *string
    
}

func (u *Union2KgridOrKlist) Decode(holder *cffi.CFFIValueUnionVariant, typeMap baml.TypeMap) {
    valueHolder := holder.Value
    variantName := holder.VariantName
	switch variantName {
    case "string_grid":
            u.variant = "Kgrid"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kgrid = &value
    case "string_list":
            u.variant = "Klist"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Klist = &value
    
    default:
        panic(fmt.Sprintf("invalid union variant: %s", variantName))
	}
}


func (u Union2KgridOrKlist) Encode() (*cffi.CFFIValueHolder, error) {
    switch u.variant {
    
    case "Kgrid":
        return baml.EncodeUnion(u.BamlEncodeName, "string_grid", *u.variant_Kgrid)
    
    case "Klist":
        return baml.EncodeUnion(u.BamlEncodeName, "string_list", *u.variant_Klist)
    
    case "":
        return nil, fmt.Errorf("invalid union variant: [unset]")
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u Union2KgridOrKlist) BamlTypeName() string {
    return "Union2KgridOrKlist"
}

func (u Union2KgridOrKlist) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Name:      "Union__string_grid__string_list",
        Namespace: cffi.CFFITypeNamespace_TYPES,
    }
}

func (u Union2KgridOrKlist) MarshalJSON() ([]byte, error) {
    switch u.variant {
    
    case "Kgrid":
        return json.Marshal(u.variant_Kgrid)
    
    case "Klist":
        return json.Marshal(u.variant_Klist)
    
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u *Union2KgridOrKlist) UnmarshalJSON(data []byte) error {
    var err error
    
    err = json.Unmarshal(data, &u.variant_Kgrid)
    if err == nil {
        u.variant = "Kgrid"
        return nil
    } else {
        u.variant_Kgrid = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Klist)
    if err == nil {
        u.variant = "Klist"
        return nil
    } else {
        u.variant_Klist = nil
    }
    
    return fmt.Errorf("invalid union variant: %s", string(data))
}


func Union2KgridOrKlist__NewKgrid() Union2KgridOrKlist {
    
    var v string = "grid"
    
    return Union2KgridOrKlist{
        variant: "Kgrid",
        variant_Kgrid: &v,
    }
}

func (u *Union2KgridOrKlist) SetKgrid() {
    
    var v string = "grid"
    
    u.variant = "Kgrid"
    u.variant_Kgrid = &v
    
    u.variant_Klist = nil
    
}

func (u *Union2KgridOrKlist) IsKgrid() bool {
    return u.variant == "Kgrid"
}

func (u *Union2KgridOrKlist) AsKgrid() *string {
    if u.variant != "Kgrid" {
        return nil
    }
    return u.variant_Kgrid
}

func Union2KgridOrKlist__NewKlist() Union2KgridOrKlist {
    
    var v string = "list"
    
    return Union2KgridOrKlist{
        variant: "Klist",
        variant_Klist: &v,
    }
}

func (u *Union2KgridOrKlist) SetKlist() {
    
    var v string = "list"
    
    u.variant = "Klist"
    u.variant_Klist = &v
    
    u.variant_Kgrid = nil
    
}

func (u *Union2KgridOrKlist) IsKlist() bool {
    return u.variant == "Klist"
}

func (u *Union2KgridOrKlist) AsKlist() *string {
    if u.variant != "Klist" {
        return nil
    }
    return u.variant_Klist
}

type Union3BoolOrIntOrString struct {
    variant string
    
    variant_String *string
    
    variant_Int *int64
    
    variant_Bool *bool
    
}

func (u *Union3BoolOrIntOrString) Decode(holder *cffi.CFFIValueUnionVariant, typeMap baml.TypeMap) {
    valueHolder := holder.Value
    variantName := holder.VariantName
	switch variantName {
    case "string":
            u.variant = "String"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_String = &value
    case "int":
            u.variant = "Int"
            value := baml.Decode(valueHolder).Interface().(int64)
            u.variant_Int = &value
    case "bool":
            u.variant = "Bool"
            value := baml.Decode(valueHolder).Interface().(bool)
            u.variant_Bool = &value
    
    default:
        panic(fmt.Sprintf("invalid union variant: %s", variantName))
	}
}


func (u Union3BoolOrIntOrString) Encode() (*cffi.CFFIValueHolder, error) {
    switch u.variant {
    
    case "String":
        return baml.EncodeUnion(u.BamlEncodeName, "string", *u.variant_String)
    
    case "Int":
        return baml.EncodeUnion(u.BamlEncodeName, "int", *u.variant_Int)
    
    case "Bool":
        return baml.EncodeUnion(u.BamlEncodeName, "bool", *u.variant_Bool)
    
    case "":
        return nil, fmt.Errorf("invalid union variant: [unset]")
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u Union3BoolOrIntOrString) BamlTypeName() string {
    return "Union3BoolOrIntOrString"
}

func (u Union3BoolOrIntOrString) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Name:      "Union__bool__int__string",
        Namespace: cffi.CFFITypeNamespace_TYPES,
    }
}

func (u Union3BoolOrIntOrString) MarshalJSON() ([]byte, error) {
    switch u.variant {
    
    case "String":
        return json.Marshal(u.variant_String)
    
    case "Int":
        return json.Marshal(u.variant_Int)
    
    case "Bool":
        return json.Marshal(u.variant_Bool)
    
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u *Union3BoolOrIntOrString) UnmarshalJSON(data []byte) error {
    var err error
    
    err = json.Unmarshal(data, &u.variant_String)
    if err == nil {
        u.variant = "String"
        return nil
    } else {
        u.variant_String = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Int)
    if err == nil {
        u.variant = "Int"
        return nil
    } else {
        u.variant_Int = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Bool)
    if err == nil {
        u.variant = "Bool"
        return nil
    } else {
        u.variant_Bool = nil
    }
    
    return fmt.Errorf("invalid union variant: %s", string(data))
}


func Union3BoolOrIntOrString__NewString(v string) Union3BoolOrIntOrString {
    
    return Union3BoolOrIntOrString{
        variant: "String",
        variant_String: &v,
    }
}

func (u *Union3BoolOrIntOrString) SetString(v string) {
    
    u.variant = "String"
    u.variant_String = &v
    
    u.variant_Int = nil
    
    u.variant_Bool = nil
    
}

func (u *Union3BoolOrIntOrString) IsString() bool {
    return u.variant == "String"
}

func (u *Union3BoolOrIntOrString) AsString() *string {
    if u.variant != "String" {
        return nil
    }
    return u.variant_String
}

func Union3BoolOrIntOrString__NewInt(v int64) Union3BoolOrIntOrString {
    
    return Union3BoolOrIntOrString{
        variant: "Int",
        variant_Int: &v,
    }
}

func (u *Union3BoolOrIntOrString) SetInt(v int64) {
    
    u.variant = "Int"
    u.variant_Int = &v
    
    u.variant_String = nil
    
    u.variant_Bool = nil
    
}

func (u *Union3BoolOrIntOrString) IsInt() bool {
    return u.variant == "Int"
}

func (u *Union3BoolOrIntOrString) AsInt() *int64 {
    if u.variant != "Int" {
        return nil
    }
    return u.variant_Int
}

func Union3BoolOrIntOrString__NewBool(v bool) Union3BoolOrIntOrString {
    
    return Union3BoolOrIntOrString{
        variant: "Bool",
        variant_Bool: &v,
    }
}

func (u *Union3BoolOrIntOrString) SetBool(v bool) {
    
    u.variant = "Bool"
    u.variant_Bool = &v
    
    u.variant_String = nil
    
    u.variant_Int = nil
    
}

func (u *Union3BoolOrIntOrString) IsBool() bool {
    return u.variant == "Bool"
}

func (u *Union3BoolOrIntOrString) AsBool() *bool {
    if u.variant != "Bool" {
        return nil
    }
    return u.variant_Bool
}

type Union3KdailyOrKimmediateOrKweekly struct {
    variant string
    
    variant_Kimmediate *string
    
    variant_Kdaily *string
    
    variant_Kweekly *string
    
}

func (u *Union3KdailyOrKimmediateOrKweekly) Decode(holder *cffi.CFFIValueUnionVariant, typeMap baml.TypeMap) {
    valueHolder := holder.Value
    variantName := holder.VariantName
	switch variantName {
    case "string_immediate":
            u.variant = "Kimmediate"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kimmediate = &value
    case "string_daily":
            u.variant = "Kdaily"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kdaily = &value
    case "string_weekly":
            u.variant = "Kweekly"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kweekly = &value
    
    default:
        panic(fmt.Sprintf("invalid union variant: %s", variantName))
	}
}


func (u Union3KdailyOrKimmediateOrKweekly) Encode() (*cffi.CFFIValueHolder, error) {
    switch u.variant {
    
    case "Kimmediate":
        return baml.EncodeUnion(u.BamlEncodeName, "string_immediate", *u.variant_Kimmediate)
    
    case "Kdaily":
        return baml.EncodeUnion(u.BamlEncodeName, "string_daily", *u.variant_Kdaily)
    
    case "Kweekly":
        return baml.EncodeUnion(u.BamlEncodeName, "string_weekly", *u.variant_Kweekly)
    
    case "":
        return nil, fmt.Errorf("invalid union variant: [unset]")
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u Union3KdailyOrKimmediateOrKweekly) BamlTypeName() string {
    return "Union3KdailyOrKimmediateOrKweekly"
}

func (u Union3KdailyOrKimmediateOrKweekly) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Name:      "Union__string_daily__string_immediate__string_weekly",
        Namespace: cffi.CFFITypeNamespace_TYPES,
    }
}

func (u Union3KdailyOrKimmediateOrKweekly) MarshalJSON() ([]byte, error) {
    switch u.variant {
    
    case "Kimmediate":
        return json.Marshal(u.variant_Kimmediate)
    
    case "Kdaily":
        return json.Marshal(u.variant_Kdaily)
    
    case "Kweekly":
        return json.Marshal(u.variant_Kweekly)
    
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u *Union3KdailyOrKimmediateOrKweekly) UnmarshalJSON(data []byte) error {
    var err error
    
    err = json.Unmarshal(data, &u.variant_Kimmediate)
    if err == nil {
        u.variant = "Kimmediate"
        return nil
    } else {
        u.variant_Kimmediate = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kdaily)
    if err == nil {
        u.variant = "Kdaily"
        return nil
    } else {
        u.variant_Kdaily = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kweekly)
    if err == nil {
        u.variant = "Kweekly"
        return nil
    } else {
        u.variant_Kweekly = nil
    }
    
    return fmt.Errorf("invalid union variant: %s", string(data))
}


func Union3KdailyOrKimmediateOrKweekly__NewKimmediate() Union3KdailyOrKimmediateOrKweekly {
    
    var v string = "immediate"
    
    return Union3KdailyOrKimmediateOrKweekly{
        variant: "Kimmediate",
        variant_Kimmediate: &v,
    }
}

func (u *Union3KdailyOrKimmediateOrKweekly) SetKimmediate() {
    
    var v string = "immediate"
    
    u.variant = "Kimmediate"
    u.variant_Kimmediate = &v
    
    u.variant_Kdaily = nil
    
    u.variant_Kweekly = nil
    
}

func (u *Union3KdailyOrKimmediateOrKweekly) IsKimmediate() bool {
    return u.variant == "Kimmediate"
}

func (u *Union3KdailyOrKimmediateOrKweekly) AsKimmediate() *string {
    if u.variant != "Kimmediate" {
        return nil
    }
    return u.variant_Kimmediate
}

func Union3KdailyOrKimmediateOrKweekly__NewKdaily() Union3KdailyOrKimmediateOrKweekly {
    
    var v string = "daily"
    
    return Union3KdailyOrKimmediateOrKweekly{
        variant: "Kdaily",
        variant_Kdaily: &v,
    }
}

func (u *Union3KdailyOrKimmediateOrKweekly) SetKdaily() {
    
    var v string = "daily"
    
    u.variant = "Kdaily"
    u.variant_Kdaily = &v
    
    u.variant_Kimmediate = nil
    
    u.variant_Kweekly = nil
    
}

func (u *Union3KdailyOrKimmediateOrKweekly) IsKdaily() bool {
    return u.variant == "Kdaily"
}

func (u *Union3KdailyOrKimmediateOrKweekly) AsKdaily() *string {
    if u.variant != "Kdaily" {
        return nil
    }
    return u.variant_Kdaily
}

func Union3KdailyOrKimmediateOrKweekly__NewKweekly() Union3KdailyOrKimmediateOrKweekly {
    
    var v string = "weekly"
    
    return Union3KdailyOrKimmediateOrKweekly{
        variant: "Kweekly",
        variant_Kweekly: &v,
    }
}

func (u *Union3KdailyOrKimmediateOrKweekly) SetKweekly() {
    
    var v string = "weekly"
    
    u.variant = "Kweekly"
    u.variant_Kweekly = &v
    
    u.variant_Kimmediate = nil
    
    u.variant_Kdaily = nil
    
}

func (u *Union3KdailyOrKimmediateOrKweekly) IsKweekly() bool {
    return u.variant == "Kweekly"
}

func (u *Union3KdailyOrKimmediateOrKweekly) AsKweekly() *string {
    if u.variant != "Kweekly" {
        return nil
    }
    return u.variant_Kweekly
}

type Union3KdoneOrKin_progressOrKtodo struct {
    variant string
    
    variant_Ktodo *string
    
    variant_Kin_progress *string
    
    variant_Kdone *string
    
}

func (u *Union3KdoneOrKin_progressOrKtodo) Decode(holder *cffi.CFFIValueUnionVariant, typeMap baml.TypeMap) {
    valueHolder := holder.Value
    variantName := holder.VariantName
	switch variantName {
    case "string_todo":
            u.variant = "Ktodo"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Ktodo = &value
    case "string_in_progress":
            u.variant = "Kin_progress"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kin_progress = &value
    case "string_done":
            u.variant = "Kdone"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kdone = &value
    
    default:
        panic(fmt.Sprintf("invalid union variant: %s", variantName))
	}
}


func (u Union3KdoneOrKin_progressOrKtodo) Encode() (*cffi.CFFIValueHolder, error) {
    switch u.variant {
    
    case "Ktodo":
        return baml.EncodeUnion(u.BamlEncodeName, "string_todo", *u.variant_Ktodo)
    
    case "Kin_progress":
        return baml.EncodeUnion(u.BamlEncodeName, "string_in_progress", *u.variant_Kin_progress)
    
    case "Kdone":
        return baml.EncodeUnion(u.BamlEncodeName, "string_done", *u.variant_Kdone)
    
    case "":
        return nil, fmt.Errorf("invalid union variant: [unset]")
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u Union3KdoneOrKin_progressOrKtodo) BamlTypeName() string {
    return "Union3KdoneOrKin_progressOrKtodo"
}

func (u Union3KdoneOrKin_progressOrKtodo) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Name:      "Union__string_done__string_in_progress__string_todo",
        Namespace: cffi.CFFITypeNamespace_TYPES,
    }
}

func (u Union3KdoneOrKin_progressOrKtodo) MarshalJSON() ([]byte, error) {
    switch u.variant {
    
    case "Ktodo":
        return json.Marshal(u.variant_Ktodo)
    
    case "Kin_progress":
        return json.Marshal(u.variant_Kin_progress)
    
    case "Kdone":
        return json.Marshal(u.variant_Kdone)
    
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u *Union3KdoneOrKin_progressOrKtodo) UnmarshalJSON(data []byte) error {
    var err error
    
    err = json.Unmarshal(data, &u.variant_Ktodo)
    if err == nil {
        u.variant = "Ktodo"
        return nil
    } else {
        u.variant_Ktodo = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kin_progress)
    if err == nil {
        u.variant = "Kin_progress"
        return nil
    } else {
        u.variant_Kin_progress = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kdone)
    if err == nil {
        u.variant = "Kdone"
        return nil
    } else {
        u.variant_Kdone = nil
    }
    
    return fmt.Errorf("invalid union variant: %s", string(data))
}


func Union3KdoneOrKin_progressOrKtodo__NewKtodo() Union3KdoneOrKin_progressOrKtodo {
    
    var v string = "todo"
    
    return Union3KdoneOrKin_progressOrKtodo{
        variant: "Ktodo",
        variant_Ktodo: &v,
    }
}

func (u *Union3KdoneOrKin_progressOrKtodo) SetKtodo() {
    
    var v string = "todo"
    
    u.variant = "Ktodo"
    u.variant_Ktodo = &v
    
    u.variant_Kin_progress = nil
    
    u.variant_Kdone = nil
    
}

func (u *Union3KdoneOrKin_progressOrKtodo) IsKtodo() bool {
    return u.variant == "Ktodo"
}

func (u *Union3KdoneOrKin_progressOrKtodo) AsKtodo() *string {
    if u.variant != "Ktodo" {
        return nil
    }
    return u.variant_Ktodo
}

func Union3KdoneOrKin_progressOrKtodo__NewKin_progress() Union3KdoneOrKin_progressOrKtodo {
    
    var v string = "in_progress"
    
    return Union3KdoneOrKin_progressOrKtodo{
        variant: "Kin_progress",
        variant_Kin_progress: &v,
    }
}

func (u *Union3KdoneOrKin_progressOrKtodo) SetKin_progress() {
    
    var v string = "in_progress"
    
    u.variant = "Kin_progress"
    u.variant_Kin_progress = &v
    
    u.variant_Ktodo = nil
    
    u.variant_Kdone = nil
    
}

func (u *Union3KdoneOrKin_progressOrKtodo) IsKin_progress() bool {
    return u.variant == "Kin_progress"
}

func (u *Union3KdoneOrKin_progressOrKtodo) AsKin_progress() *string {
    if u.variant != "Kin_progress" {
        return nil
    }
    return u.variant_Kin_progress
}

func Union3KdoneOrKin_progressOrKtodo__NewKdone() Union3KdoneOrKin_progressOrKtodo {
    
    var v string = "done"
    
    return Union3KdoneOrKin_progressOrKtodo{
        variant: "Kdone",
        variant_Kdone: &v,
    }
}

func (u *Union3KdoneOrKin_progressOrKtodo) SetKdone() {
    
    var v string = "done"
    
    u.variant = "Kdone"
    u.variant_Kdone = &v
    
    u.variant_Ktodo = nil
    
    u.variant_Kin_progress = nil
    
}

func (u *Union3KdoneOrKin_progressOrKtodo) IsKdone() bool {
    return u.variant == "Kdone"
}

func (u *Union3KdoneOrKin_progressOrKtodo) AsKdone() *string {
    if u.variant != "Kdone" {
        return nil
    }
    return u.variant_Kdone
}

type Union3KfriendsOrKprivateOrKpublic struct {
    variant string
    
    variant_Kpublic *string
    
    variant_Kprivate *string
    
    variant_Kfriends *string
    
}

func (u *Union3KfriendsOrKprivateOrKpublic) Decode(holder *cffi.CFFIValueUnionVariant, typeMap baml.TypeMap) {
    valueHolder := holder.Value
    variantName := holder.VariantName
	switch variantName {
    case "string_public":
            u.variant = "Kpublic"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kpublic = &value
    case "string_private":
            u.variant = "Kprivate"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kprivate = &value
    case "string_friends":
            u.variant = "Kfriends"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kfriends = &value
    
    default:
        panic(fmt.Sprintf("invalid union variant: %s", variantName))
	}
}


func (u Union3KfriendsOrKprivateOrKpublic) Encode() (*cffi.CFFIValueHolder, error) {
    switch u.variant {
    
    case "Kpublic":
        return baml.EncodeUnion(u.BamlEncodeName, "string_public", *u.variant_Kpublic)
    
    case "Kprivate":
        return baml.EncodeUnion(u.BamlEncodeName, "string_private", *u.variant_Kprivate)
    
    case "Kfriends":
        return baml.EncodeUnion(u.BamlEncodeName, "string_friends", *u.variant_Kfriends)
    
    case "":
        return nil, fmt.Errorf("invalid union variant: [unset]")
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u Union3KfriendsOrKprivateOrKpublic) BamlTypeName() string {
    return "Union3KfriendsOrKprivateOrKpublic"
}

func (u Union3KfriendsOrKprivateOrKpublic) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Name:      "Union__string_friends__string_private__string_public",
        Namespace: cffi.CFFITypeNamespace_TYPES,
    }
}

func (u Union3KfriendsOrKprivateOrKpublic) MarshalJSON() ([]byte, error) {
    switch u.variant {
    
    case "Kpublic":
        return json.Marshal(u.variant_Kpublic)
    
    case "Kprivate":
        return json.Marshal(u.variant_Kprivate)
    
    case "Kfriends":
        return json.Marshal(u.variant_Kfriends)
    
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u *Union3KfriendsOrKprivateOrKpublic) UnmarshalJSON(data []byte) error {
    var err error
    
    err = json.Unmarshal(data, &u.variant_Kpublic)
    if err == nil {
        u.variant = "Kpublic"
        return nil
    } else {
        u.variant_Kpublic = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kprivate)
    if err == nil {
        u.variant = "Kprivate"
        return nil
    } else {
        u.variant_Kprivate = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kfriends)
    if err == nil {
        u.variant = "Kfriends"
        return nil
    } else {
        u.variant_Kfriends = nil
    }
    
    return fmt.Errorf("invalid union variant: %s", string(data))
}


func Union3KfriendsOrKprivateOrKpublic__NewKpublic() Union3KfriendsOrKprivateOrKpublic {
    
    var v string = "public"
    
    return Union3KfriendsOrKprivateOrKpublic{
        variant: "Kpublic",
        variant_Kpublic: &v,
    }
}

func (u *Union3KfriendsOrKprivateOrKpublic) SetKpublic() {
    
    var v string = "public"
    
    u.variant = "Kpublic"
    u.variant_Kpublic = &v
    
    u.variant_Kprivate = nil
    
    u.variant_Kfriends = nil
    
}

func (u *Union3KfriendsOrKprivateOrKpublic) IsKpublic() bool {
    return u.variant == "Kpublic"
}

func (u *Union3KfriendsOrKprivateOrKpublic) AsKpublic() *string {
    if u.variant != "Kpublic" {
        return nil
    }
    return u.variant_Kpublic
}

func Union3KfriendsOrKprivateOrKpublic__NewKprivate() Union3KfriendsOrKprivateOrKpublic {
    
    var v string = "private"
    
    return Union3KfriendsOrKprivateOrKpublic{
        variant: "Kprivate",
        variant_Kprivate: &v,
    }
}

func (u *Union3KfriendsOrKprivateOrKpublic) SetKprivate() {
    
    var v string = "private"
    
    u.variant = "Kprivate"
    u.variant_Kprivate = &v
    
    u.variant_Kpublic = nil
    
    u.variant_Kfriends = nil
    
}

func (u *Union3KfriendsOrKprivateOrKpublic) IsKprivate() bool {
    return u.variant == "Kprivate"
}

func (u *Union3KfriendsOrKprivateOrKpublic) AsKprivate() *string {
    if u.variant != "Kprivate" {
        return nil
    }
    return u.variant_Kprivate
}

func Union3KfriendsOrKprivateOrKpublic__NewKfriends() Union3KfriendsOrKprivateOrKpublic {
    
    var v string = "friends"
    
    return Union3KfriendsOrKprivateOrKpublic{
        variant: "Kfriends",
        variant_Kfriends: &v,
    }
}

func (u *Union3KfriendsOrKprivateOrKpublic) SetKfriends() {
    
    var v string = "friends"
    
    u.variant = "Kfriends"
    u.variant_Kfriends = &v
    
    u.variant_Kpublic = nil
    
    u.variant_Kprivate = nil
    
}

func (u *Union3KfriendsOrKprivateOrKpublic) IsKfriends() bool {
    return u.variant == "Kfriends"
}

func (u *Union3KfriendsOrKprivateOrKpublic) AsKfriends() *string {
    if u.variant != "Kfriends" {
        return nil
    }
    return u.variant_Kfriends
}

type Union3KhighOrKlowOrKmedium struct {
    variant string
    
    variant_Klow *string
    
    variant_Kmedium *string
    
    variant_Khigh *string
    
}

func (u *Union3KhighOrKlowOrKmedium) Decode(holder *cffi.CFFIValueUnionVariant, typeMap baml.TypeMap) {
    valueHolder := holder.Value
    variantName := holder.VariantName
	switch variantName {
    case "string_low":
            u.variant = "Klow"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Klow = &value
    case "string_medium":
            u.variant = "Kmedium"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kmedium = &value
    case "string_high":
            u.variant = "Khigh"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Khigh = &value
    
    default:
        panic(fmt.Sprintf("invalid union variant: %s", variantName))
	}
}


func (u Union3KhighOrKlowOrKmedium) Encode() (*cffi.CFFIValueHolder, error) {
    switch u.variant {
    
    case "Klow":
        return baml.EncodeUnion(u.BamlEncodeName, "string_low", *u.variant_Klow)
    
    case "Kmedium":
        return baml.EncodeUnion(u.BamlEncodeName, "string_medium", *u.variant_Kmedium)
    
    case "Khigh":
        return baml.EncodeUnion(u.BamlEncodeName, "string_high", *u.variant_Khigh)
    
    case "":
        return nil, fmt.Errorf("invalid union variant: [unset]")
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u Union3KhighOrKlowOrKmedium) BamlTypeName() string {
    return "Union3KhighOrKlowOrKmedium"
}

func (u Union3KhighOrKlowOrKmedium) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Name:      "Union__string_high__string_low__string_medium",
        Namespace: cffi.CFFITypeNamespace_TYPES,
    }
}

func (u Union3KhighOrKlowOrKmedium) MarshalJSON() ([]byte, error) {
    switch u.variant {
    
    case "Klow":
        return json.Marshal(u.variant_Klow)
    
    case "Kmedium":
        return json.Marshal(u.variant_Kmedium)
    
    case "Khigh":
        return json.Marshal(u.variant_Khigh)
    
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u *Union3KhighOrKlowOrKmedium) UnmarshalJSON(data []byte) error {
    var err error
    
    err = json.Unmarshal(data, &u.variant_Klow)
    if err == nil {
        u.variant = "Klow"
        return nil
    } else {
        u.variant_Klow = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kmedium)
    if err == nil {
        u.variant = "Kmedium"
        return nil
    } else {
        u.variant_Kmedium = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Khigh)
    if err == nil {
        u.variant = "Khigh"
        return nil
    } else {
        u.variant_Khigh = nil
    }
    
    return fmt.Errorf("invalid union variant: %s", string(data))
}


func Union3KhighOrKlowOrKmedium__NewKlow() Union3KhighOrKlowOrKmedium {
    
    var v string = "low"
    
    return Union3KhighOrKlowOrKmedium{
        variant: "Klow",
        variant_Klow: &v,
    }
}

func (u *Union3KhighOrKlowOrKmedium) SetKlow() {
    
    var v string = "low"
    
    u.variant = "Klow"
    u.variant_Klow = &v
    
    u.variant_Kmedium = nil
    
    u.variant_Khigh = nil
    
}

func (u *Union3KhighOrKlowOrKmedium) IsKlow() bool {
    return u.variant == "Klow"
}

func (u *Union3KhighOrKlowOrKmedium) AsKlow() *string {
    if u.variant != "Klow" {
        return nil
    }
    return u.variant_Klow
}

func Union3KhighOrKlowOrKmedium__NewKmedium() Union3KhighOrKlowOrKmedium {
    
    var v string = "medium"
    
    return Union3KhighOrKlowOrKmedium{
        variant: "Kmedium",
        variant_Kmedium: &v,
    }
}

func (u *Union3KhighOrKlowOrKmedium) SetKmedium() {
    
    var v string = "medium"
    
    u.variant = "Kmedium"
    u.variant_Kmedium = &v
    
    u.variant_Klow = nil
    
    u.variant_Khigh = nil
    
}

func (u *Union3KhighOrKlowOrKmedium) IsKmedium() bool {
    return u.variant == "Kmedium"
}

func (u *Union3KhighOrKlowOrKmedium) AsKmedium() *string {
    if u.variant != "Kmedium" {
        return nil
    }
    return u.variant_Kmedium
}

func Union3KhighOrKlowOrKmedium__NewKhigh() Union3KhighOrKlowOrKmedium {
    
    var v string = "high"
    
    return Union3KhighOrKlowOrKmedium{
        variant: "Khigh",
        variant_Khigh: &v,
    }
}

func (u *Union3KhighOrKlowOrKmedium) SetKhigh() {
    
    var v string = "high"
    
    u.variant = "Khigh"
    u.variant_Khigh = &v
    
    u.variant_Klow = nil
    
    u.variant_Kmedium = nil
    
}

func (u *Union3KhighOrKlowOrKmedium) IsKhigh() bool {
    return u.variant == "Khigh"
}

func (u *Union3KhighOrKlowOrKmedium) AsKhigh() *string {
    if u.variant != "Khigh" {
        return nil
    }
    return u.variant_Khigh
}

type Union4KactiveOrKcancelledOrKcompletedOrKplanning struct {
    variant string
    
    variant_Kplanning *string
    
    variant_Kactive *string
    
    variant_Kcompleted *string
    
    variant_Kcancelled *string
    
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) Decode(holder *cffi.CFFIValueUnionVariant, typeMap baml.TypeMap) {
    valueHolder := holder.Value
    variantName := holder.VariantName
	switch variantName {
    case "string_planning":
            u.variant = "Kplanning"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kplanning = &value
    case "string_active":
            u.variant = "Kactive"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kactive = &value
    case "string_completed":
            u.variant = "Kcompleted"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kcompleted = &value
    case "string_cancelled":
            u.variant = "Kcancelled"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kcancelled = &value
    
    default:
        panic(fmt.Sprintf("invalid union variant: %s", variantName))
	}
}


func (u Union4KactiveOrKcancelledOrKcompletedOrKplanning) Encode() (*cffi.CFFIValueHolder, error) {
    switch u.variant {
    
    case "Kplanning":
        return baml.EncodeUnion(u.BamlEncodeName, "string_planning", *u.variant_Kplanning)
    
    case "Kactive":
        return baml.EncodeUnion(u.BamlEncodeName, "string_active", *u.variant_Kactive)
    
    case "Kcompleted":
        return baml.EncodeUnion(u.BamlEncodeName, "string_completed", *u.variant_Kcompleted)
    
    case "Kcancelled":
        return baml.EncodeUnion(u.BamlEncodeName, "string_cancelled", *u.variant_Kcancelled)
    
    case "":
        return nil, fmt.Errorf("invalid union variant: [unset]")
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u Union4KactiveOrKcancelledOrKcompletedOrKplanning) BamlTypeName() string {
    return "Union4KactiveOrKcancelledOrKcompletedOrKplanning"
}

func (u Union4KactiveOrKcancelledOrKcompletedOrKplanning) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Name:      "Union__string_active__string_cancelled__string_completed__string_planning",
        Namespace: cffi.CFFITypeNamespace_TYPES,
    }
}

func (u Union4KactiveOrKcancelledOrKcompletedOrKplanning) MarshalJSON() ([]byte, error) {
    switch u.variant {
    
    case "Kplanning":
        return json.Marshal(u.variant_Kplanning)
    
    case "Kactive":
        return json.Marshal(u.variant_Kactive)
    
    case "Kcompleted":
        return json.Marshal(u.variant_Kcompleted)
    
    case "Kcancelled":
        return json.Marshal(u.variant_Kcancelled)
    
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) UnmarshalJSON(data []byte) error {
    var err error
    
    err = json.Unmarshal(data, &u.variant_Kplanning)
    if err == nil {
        u.variant = "Kplanning"
        return nil
    } else {
        u.variant_Kplanning = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kactive)
    if err == nil {
        u.variant = "Kactive"
        return nil
    } else {
        u.variant_Kactive = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kcompleted)
    if err == nil {
        u.variant = "Kcompleted"
        return nil
    } else {
        u.variant_Kcompleted = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kcancelled)
    if err == nil {
        u.variant = "Kcancelled"
        return nil
    } else {
        u.variant_Kcancelled = nil
    }
    
    return fmt.Errorf("invalid union variant: %s", string(data))
}


func Union4KactiveOrKcancelledOrKcompletedOrKplanning__NewKplanning() Union4KactiveOrKcancelledOrKcompletedOrKplanning {
    
    var v string = "planning"
    
    return Union4KactiveOrKcancelledOrKcompletedOrKplanning{
        variant: "Kplanning",
        variant_Kplanning: &v,
    }
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) SetKplanning() {
    
    var v string = "planning"
    
    u.variant = "Kplanning"
    u.variant_Kplanning = &v
    
    u.variant_Kactive = nil
    
    u.variant_Kcompleted = nil
    
    u.variant_Kcancelled = nil
    
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) IsKplanning() bool {
    return u.variant == "Kplanning"
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) AsKplanning() *string {
    if u.variant != "Kplanning" {
        return nil
    }
    return u.variant_Kplanning
}

func Union4KactiveOrKcancelledOrKcompletedOrKplanning__NewKactive() Union4KactiveOrKcancelledOrKcompletedOrKplanning {
    
    var v string = "active"
    
    return Union4KactiveOrKcancelledOrKcompletedOrKplanning{
        variant: "Kactive",
        variant_Kactive: &v,
    }
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) SetKactive() {
    
    var v string = "active"
    
    u.variant = "Kactive"
    u.variant_Kactive = &v
    
    u.variant_Kplanning = nil
    
    u.variant_Kcompleted = nil
    
    u.variant_Kcancelled = nil
    
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) IsKactive() bool {
    return u.variant == "Kactive"
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) AsKactive() *string {
    if u.variant != "Kactive" {
        return nil
    }
    return u.variant_Kactive
}

func Union4KactiveOrKcancelledOrKcompletedOrKplanning__NewKcompleted() Union4KactiveOrKcancelledOrKcompletedOrKplanning {
    
    var v string = "completed"
    
    return Union4KactiveOrKcancelledOrKcompletedOrKplanning{
        variant: "Kcompleted",
        variant_Kcompleted: &v,
    }
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) SetKcompleted() {
    
    var v string = "completed"
    
    u.variant = "Kcompleted"
    u.variant_Kcompleted = &v
    
    u.variant_Kplanning = nil
    
    u.variant_Kactive = nil
    
    u.variant_Kcancelled = nil
    
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) IsKcompleted() bool {
    return u.variant == "Kcompleted"
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) AsKcompleted() *string {
    if u.variant != "Kcompleted" {
        return nil
    }
    return u.variant_Kcompleted
}

func Union4KactiveOrKcancelledOrKcompletedOrKplanning__NewKcancelled() Union4KactiveOrKcancelledOrKcompletedOrKplanning {
    
    var v string = "cancelled"
    
    return Union4KactiveOrKcancelledOrKcompletedOrKplanning{
        variant: "Kcancelled",
        variant_Kcancelled: &v,
    }
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) SetKcancelled() {
    
    var v string = "cancelled"
    
    u.variant = "Kcancelled"
    u.variant_Kcancelled = &v
    
    u.variant_Kplanning = nil
    
    u.variant_Kactive = nil
    
    u.variant_Kcompleted = nil
    
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) IsKcancelled() bool {
    return u.variant == "Kcancelled"
}

func (u *Union4KactiveOrKcancelledOrKcompletedOrKplanning) AsKcancelled() *string {
    if u.variant != "Kcancelled" {
        return nil
    }
    return u.variant_Kcancelled
}

type Union4KenterpriseOrKlargeOrKmediumOrKsmall struct {
    variant string
    
    variant_Ksmall *string
    
    variant_Kmedium *string
    
    variant_Klarge *string
    
    variant_Kenterprise *string
    
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) Decode(holder *cffi.CFFIValueUnionVariant, typeMap baml.TypeMap) {
    valueHolder := holder.Value
    variantName := holder.VariantName
	switch variantName {
    case "string_small":
            u.variant = "Ksmall"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Ksmall = &value
    case "string_medium":
            u.variant = "Kmedium"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kmedium = &value
    case "string_large":
            u.variant = "Klarge"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Klarge = &value
    case "string_enterprise":
            u.variant = "Kenterprise"
            value := baml.Decode(valueHolder).Interface().(string)
            u.variant_Kenterprise = &value
    
    default:
        panic(fmt.Sprintf("invalid union variant: %s", variantName))
	}
}


func (u Union4KenterpriseOrKlargeOrKmediumOrKsmall) Encode() (*cffi.CFFIValueHolder, error) {
    switch u.variant {
    
    case "Ksmall":
        return baml.EncodeUnion(u.BamlEncodeName, "string_small", *u.variant_Ksmall)
    
    case "Kmedium":
        return baml.EncodeUnion(u.BamlEncodeName, "string_medium", *u.variant_Kmedium)
    
    case "Klarge":
        return baml.EncodeUnion(u.BamlEncodeName, "string_large", *u.variant_Klarge)
    
    case "Kenterprise":
        return baml.EncodeUnion(u.BamlEncodeName, "string_enterprise", *u.variant_Kenterprise)
    
    case "":
        return nil, fmt.Errorf("invalid union variant: [unset]")
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u Union4KenterpriseOrKlargeOrKmediumOrKsmall) BamlTypeName() string {
    return "Union4KenterpriseOrKlargeOrKmediumOrKsmall"
}

func (u Union4KenterpriseOrKlargeOrKmediumOrKsmall) BamlEncodeName() *cffi.CFFITypeName {
    return &cffi.CFFITypeName{
        Name:      "Union__string_enterprise__string_large__string_medium__string_small",
        Namespace: cffi.CFFITypeNamespace_TYPES,
    }
}

func (u Union4KenterpriseOrKlargeOrKmediumOrKsmall) MarshalJSON() ([]byte, error) {
    switch u.variant {
    
    case "Ksmall":
        return json.Marshal(u.variant_Ksmall)
    
    case "Kmedium":
        return json.Marshal(u.variant_Kmedium)
    
    case "Klarge":
        return json.Marshal(u.variant_Klarge)
    
    case "Kenterprise":
        return json.Marshal(u.variant_Kenterprise)
    
    }

    return nil, fmt.Errorf("invalid union variant: %s", u.variant)
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) UnmarshalJSON(data []byte) error {
    var err error
    
    err = json.Unmarshal(data, &u.variant_Ksmall)
    if err == nil {
        u.variant = "Ksmall"
        return nil
    } else {
        u.variant_Ksmall = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kmedium)
    if err == nil {
        u.variant = "Kmedium"
        return nil
    } else {
        u.variant_Kmedium = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Klarge)
    if err == nil {
        u.variant = "Klarge"
        return nil
    } else {
        u.variant_Klarge = nil
    }
    
    err = json.Unmarshal(data, &u.variant_Kenterprise)
    if err == nil {
        u.variant = "Kenterprise"
        return nil
    } else {
        u.variant_Kenterprise = nil
    }
    
    return fmt.Errorf("invalid union variant: %s", string(data))
}


func Union4KenterpriseOrKlargeOrKmediumOrKsmall__NewKsmall() Union4KenterpriseOrKlargeOrKmediumOrKsmall {
    
    var v string = "small"
    
    return Union4KenterpriseOrKlargeOrKmediumOrKsmall{
        variant: "Ksmall",
        variant_Ksmall: &v,
    }
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) SetKsmall() {
    
    var v string = "small"
    
    u.variant = "Ksmall"
    u.variant_Ksmall = &v
    
    u.variant_Kmedium = nil
    
    u.variant_Klarge = nil
    
    u.variant_Kenterprise = nil
    
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) IsKsmall() bool {
    return u.variant == "Ksmall"
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) AsKsmall() *string {
    if u.variant != "Ksmall" {
        return nil
    }
    return u.variant_Ksmall
}

func Union4KenterpriseOrKlargeOrKmediumOrKsmall__NewKmedium() Union4KenterpriseOrKlargeOrKmediumOrKsmall {
    
    var v string = "medium"
    
    return Union4KenterpriseOrKlargeOrKmediumOrKsmall{
        variant: "Kmedium",
        variant_Kmedium: &v,
    }
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) SetKmedium() {
    
    var v string = "medium"
    
    u.variant = "Kmedium"
    u.variant_Kmedium = &v
    
    u.variant_Ksmall = nil
    
    u.variant_Klarge = nil
    
    u.variant_Kenterprise = nil
    
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) IsKmedium() bool {
    return u.variant == "Kmedium"
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) AsKmedium() *string {
    if u.variant != "Kmedium" {
        return nil
    }
    return u.variant_Kmedium
}

func Union4KenterpriseOrKlargeOrKmediumOrKsmall__NewKlarge() Union4KenterpriseOrKlargeOrKmediumOrKsmall {
    
    var v string = "large"
    
    return Union4KenterpriseOrKlargeOrKmediumOrKsmall{
        variant: "Klarge",
        variant_Klarge: &v,
    }
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) SetKlarge() {
    
    var v string = "large"
    
    u.variant = "Klarge"
    u.variant_Klarge = &v
    
    u.variant_Ksmall = nil
    
    u.variant_Kmedium = nil
    
    u.variant_Kenterprise = nil
    
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) IsKlarge() bool {
    return u.variant == "Klarge"
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) AsKlarge() *string {
    if u.variant != "Klarge" {
        return nil
    }
    return u.variant_Klarge
}

func Union4KenterpriseOrKlargeOrKmediumOrKsmall__NewKenterprise() Union4KenterpriseOrKlargeOrKmediumOrKsmall {
    
    var v string = "enterprise"
    
    return Union4KenterpriseOrKlargeOrKmediumOrKsmall{
        variant: "Kenterprise",
        variant_Kenterprise: &v,
    }
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) SetKenterprise() {
    
    var v string = "enterprise"
    
    u.variant = "Kenterprise"
    u.variant_Kenterprise = &v
    
    u.variant_Ksmall = nil
    
    u.variant_Kmedium = nil
    
    u.variant_Klarge = nil
    
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) IsKenterprise() bool {
    return u.variant == "Kenterprise"
}

func (u *Union4KenterpriseOrKlargeOrKmediumOrKsmall) AsKenterprise() *string {
    if u.variant != "Kenterprise" {
        return nil
    }
    return u.variant_Kenterprise
}



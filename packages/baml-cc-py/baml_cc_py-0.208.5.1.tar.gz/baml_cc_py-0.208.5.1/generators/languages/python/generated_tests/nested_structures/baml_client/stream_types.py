# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (30)
# #########################################################################

class Address(BaseModel):
    street: typing.Optional[str] = None
    city: typing.Optional[str] = None
    state: typing.Optional[str] = None
    country: typing.Optional[str] = None
    postalCode: typing.Optional[str] = None
    coordinates: typing.Optional["Coordinates"] = None

class Approval(BaseModel):
    approver: typing.Optional[str] = None
    date: typing.Optional[str] = None
    amount: typing.Optional[float] = None
    notes: typing.Optional[str] = None

class Budget(BaseModel):
    total: typing.Optional[float] = None
    spent: typing.Optional[float] = None
    categories: typing.Dict[str, float]
    approvals: typing.List["Approval"]

class Company(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    address: typing.Optional["Address"] = None
    departments: typing.List["Department"]
    metadata: typing.Optional["CompanyMetadata"] = None

class CompanyMetadata(BaseModel):
    founded: typing.Optional[str] = None
    industry: typing.Optional[str] = None
    size: typing.Optional[typing.Union[str, str, str, str]] = None
    certifications: typing.List[str]
    partnerships: typing.Optional[typing.List["Company"]] = None

class ComplexNested(BaseModel):
    company: typing.Optional["Company"] = None
    employees: typing.List["Employee"]
    projects: typing.List["Project"]

class Contact(BaseModel):
    name: typing.Optional[str] = None
    relationship: typing.Optional[str] = None
    phone: typing.Optional[str] = None
    email: typing.Optional[str] = None

class Coordinates(BaseModel):
    latitude: typing.Optional[float] = None
    longitude: typing.Optional[float] = None

class DeeplyNested(BaseModel):
    level1: typing.Optional["Level1"] = None

class Department(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    manager: typing.Optional["Employee"] = None
    members: typing.List["Employee"]
    budget: typing.Optional[float] = None
    projects: typing.List["Project"]

class DisplaySettings(BaseModel):
    fontSize: typing.Optional[int] = None
    colorScheme: typing.Optional[str] = None
    layout: typing.Optional[typing.Union[str, str]] = None

class Employee(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    email: typing.Optional[str] = None
    role: typing.Optional[str] = None
    department: typing.Optional[str] = None
    skills: typing.List[str]
    address: typing.Optional["Address"] = None
    emergencyContact: typing.Optional["Contact"] = None

class Level1(BaseModel):
    data: typing.Optional[str] = None
    level2: typing.Optional["Level2"] = None

class Level2(BaseModel):
    data: typing.Optional[str] = None
    level3: typing.Optional["Level3"] = None

class Level3(BaseModel):
    data: typing.Optional[str] = None
    level4: typing.Optional["Level4"] = None

class Level4(BaseModel):
    data: typing.Optional[str] = None
    level5: typing.Optional["Level5"] = None

class Level5(BaseModel):
    data: typing.Optional[str] = None
    items: typing.List[str]
    mapping: typing.Dict[str, int]

class Metadata(BaseModel):
    createdAt: typing.Optional[str] = None
    updatedAt: typing.Optional[str] = None
    version: typing.Optional[int] = None
    tags: typing.List[str]
    attributes: typing.Dict[str, str]

class Milestone(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    dueDate: typing.Optional[str] = None
    completed: typing.Optional[bool] = None
    tasks: typing.List["Task"]

class NotificationSettings(BaseModel):
    email: typing.Optional[bool] = None
    push: typing.Optional[bool] = None
    sms: typing.Optional[bool] = None
    frequency: typing.Optional[typing.Union[str, str, str]] = None

class Preferences(BaseModel):
    theme: typing.Optional[typing.Union[str, str]] = None
    language: typing.Optional[str] = None
    notifications: typing.Optional["NotificationSettings"] = None

class PrivacySettings(BaseModel):
    profileVisibility: typing.Optional[typing.Union[str, str, str]] = None
    showEmail: typing.Optional[bool] = None
    showPhone: typing.Optional[bool] = None

class Profile(BaseModel):
    bio: typing.Optional[str] = None
    avatar: typing.Optional[str] = None
    social: typing.Optional["SocialLinks"] = None
    preferences: typing.Optional["Preferences"] = None

class Project(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    description: typing.Optional[str] = None
    status: typing.Optional[typing.Union[str, str, str, str]] = None
    team: typing.List["Employee"]
    milestones: typing.List["Milestone"]
    budget: typing.Optional["Budget"] = None

class RecursiveStructure(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    children: typing.List["RecursiveStructure"]
    parent: typing.Optional["RecursiveStructure"] = None
    metadata: typing.Dict[str, typing.Union[str, int, bool]]

class SimpleNested(BaseModel):
    user: typing.Optional["User"] = None
    address: typing.Optional["Address"] = None
    metadata: typing.Optional["Metadata"] = None

class SocialLinks(BaseModel):
    twitter: typing.Optional[str] = None
    github: typing.Optional[str] = None
    linkedin: typing.Optional[str] = None
    website: typing.Optional[str] = None

class Task(BaseModel):
    id: typing.Optional[int] = None
    title: typing.Optional[str] = None
    description: typing.Optional[str] = None
    assignee: typing.Optional[str] = None
    priority: typing.Optional[typing.Union[str, str, str]] = None
    status: typing.Optional[typing.Union[str, str, str]] = None
    subtasks: typing.Optional[typing.List["Task"]] = None

class User(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    profile: typing.Optional["Profile"] = None
    settings: typing.Optional["UserSettings"] = None

class UserSettings(BaseModel):
    privacy: typing.Optional["PrivacySettings"] = None
    display: typing.Optional["DisplaySettings"] = None
    advanced: typing.Dict[str, str]

# #########################################################################
# Generated type aliases (0)
# #########################################################################

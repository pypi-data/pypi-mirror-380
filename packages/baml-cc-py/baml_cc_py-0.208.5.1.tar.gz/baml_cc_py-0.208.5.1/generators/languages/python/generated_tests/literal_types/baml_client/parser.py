# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def TestBooleanLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.BooleanLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestBooleanLiterals", llm_response=llm_response, mode="request")
        return typing.cast(types.BooleanLiterals, result)

    def TestComplexLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ComplexLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestComplexLiterals", llm_response=llm_response, mode="request")
        return typing.cast(types.ComplexLiterals, result)

    def TestIntegerLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.IntegerLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestIntegerLiterals", llm_response=llm_response, mode="request")
        return typing.cast(types.IntegerLiterals, result)

    def TestMixedLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.MixedLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestMixedLiterals", llm_response=llm_response, mode="request")
        return typing.cast(types.MixedLiterals, result)

    def TestStringLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.StringLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestStringLiterals", llm_response=llm_response, mode="request")
        return typing.cast(types.StringLiterals, result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def TestBooleanLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.BooleanLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestBooleanLiterals", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.BooleanLiterals, result)

    def TestComplexLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ComplexLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestComplexLiterals", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ComplexLiterals, result)

    def TestIntegerLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.IntegerLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestIntegerLiterals", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.IntegerLiterals, result)

    def TestMixedLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.MixedLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestMixedLiterals", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.MixedLiterals, result)

    def TestStringLiterals(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.StringLiterals:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestStringLiterals", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.StringLiterals, result)

    
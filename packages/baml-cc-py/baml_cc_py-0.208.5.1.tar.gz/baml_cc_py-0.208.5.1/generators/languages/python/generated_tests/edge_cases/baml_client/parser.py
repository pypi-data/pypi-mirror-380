# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def TestCircularReference(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CircularReference:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestCircularReference", llm_response=llm_response, mode="request")
        return typing.cast(types.CircularReference, result)

    def TestDeepRecursion(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.DeepRecursion:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestDeepRecursion", llm_response=llm_response, mode="request")
        return typing.cast(types.DeepRecursion, result)

    def TestEmptyCollections(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.EmptyCollections:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestEmptyCollections", llm_response=llm_response, mode="request")
        return typing.cast(types.EmptyCollections, result)

    def TestLargeStructure(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.LargeStructure:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestLargeStructure", llm_response=llm_response, mode="request")
        return typing.cast(types.LargeStructure, result)

    def TestNumberEdgeCases(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.NumberEdgeCases:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestNumberEdgeCases", llm_response=llm_response, mode="request")
        return typing.cast(types.NumberEdgeCases, result)

    def TestSpecialCharacters(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SpecialCharacters:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestSpecialCharacters", llm_response=llm_response, mode="request")
        return typing.cast(types.SpecialCharacters, result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def TestCircularReference(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CircularReference:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestCircularReference", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CircularReference, result)

    def TestDeepRecursion(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.DeepRecursion:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestDeepRecursion", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.DeepRecursion, result)

    def TestEmptyCollections(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.EmptyCollections:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestEmptyCollections", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.EmptyCollections, result)

    def TestLargeStructure(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.LargeStructure:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestLargeStructure", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.LargeStructure, result)

    def TestNumberEdgeCases(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.NumberEdgeCases:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestNumberEdgeCases", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.NumberEdgeCases, result)

    def TestSpecialCharacters(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SpecialCharacters:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestSpecialCharacters", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SpecialCharacters, result)

    
# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (2)
# #########################################################################

class ExistingSystemComponent(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    type: typing.Optional[str] = None
    category: typing.Optional[typing.Union[str, str]] = None
    explanation: typing.Optional[str] = None

class UseMyUnion(BaseModel):
    u: typing.Optional[typing.Union["Recursive1", int, str]] = None

# #########################################################################
# Generated type aliases (5)
# #########################################################################


MyUnion: typing_extensions.TypeAlias = typing.Optional[typing.Union["Recursive1", int, str]]


Nonrecursive1: typing_extensions.TypeAlias = typing.Optional[int]


Nonrecursive2: typing_extensions.TypeAlias = typing.Optional[str]


Recursive1: typing_extensions.TypeAlias = typing.Optional[typing.Union[int, typing.List["Recursive1"]]]


SystemComponentCategory: typing_extensions.TypeAlias = typing.Optional[typing.Union[str, str]]

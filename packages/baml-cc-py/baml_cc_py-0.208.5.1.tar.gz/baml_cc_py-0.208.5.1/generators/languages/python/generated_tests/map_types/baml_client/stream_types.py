# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (8)
# #########################################################################

class ComplexMaps(BaseModel):
    userMap: typing.Dict[str, "User"]
    productMap: typing.Dict[str, "Product"]
    nestedMap: typing.Dict[str, typing.Dict[str, str]]
    arrayMap: typing.Dict[str, typing.List[int]]
    mapArray: typing.List[typing.Dict[str, str]]

class Config(BaseModel):
    url: typing.Optional[str] = None
    port: typing.Optional[int] = None
    debug: typing.Optional[bool] = None

class EdgeCaseMaps(BaseModel):
    emptyMap: typing.Dict[str, str]
    nullableValues: typing.Dict[str, typing.Optional[str]]
    optionalValues: typing.Dict[str, typing.Optional[str]]
    unionValues: typing.Dict[str, typing.Union[str, int, bool]]

class MixedKeyMaps(BaseModel):
    stringIntMap: typing.Dict[str, int]
    intStringMap: typing.Dict[str, str]
    enumMap: typing.Dict[str, str]
    literalMap: typing.Dict[str, "Config"]

class NestedMaps(BaseModel):
    simple: typing.Dict[str, str]
    oneLevelNested: typing.Dict[str, typing.Dict[str, int]]
    twoLevelNested: typing.Dict[str, typing.Dict[str, typing.Dict[str, bool]]]
    mapOfArrays: typing.Dict[str, typing.List[str]]
    mapOfMaps: typing.Dict[str, typing.Dict[str, float]]

class Product(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    price: typing.Optional[float] = None
    tags: typing.List[str]

class SimpleMaps(BaseModel):
    stringToString: typing.Dict[str, str]
    stringToInt: typing.Dict[str, int]
    stringToFloat: typing.Dict[str, float]
    stringToBool: typing.Dict[str, bool]
    intToString: typing.Dict[str, str]

class User(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    email: typing.Optional[str] = None
    active: typing.Optional[bool] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################

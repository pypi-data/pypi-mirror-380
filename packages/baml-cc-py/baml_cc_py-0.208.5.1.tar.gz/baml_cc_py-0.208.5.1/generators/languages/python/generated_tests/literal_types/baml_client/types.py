# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (5)
# #########################################################################

class BooleanLiterals(BaseModel):
    alwaysTrue: typing_extensions.Literal[True]
    alwaysFalse: typing_extensions.Literal[False]
    eitherBool: typing.Union[typing_extensions.Literal[True], typing_extensions.Literal[False]]

class ComplexLiterals(BaseModel):
    state: typing.Union[typing_extensions.Literal['draft'], typing_extensions.Literal['published'], typing_extensions.Literal['archived'], typing_extensions.Literal['deleted']]
    retryCount: typing.Union[typing_extensions.Literal[0], typing_extensions.Literal[1], typing_extensions.Literal[2], typing_extensions.Literal[3], typing_extensions.Literal[5], typing_extensions.Literal[8], typing_extensions.Literal[13]]
    response: typing.Union[typing_extensions.Literal['success'], typing_extensions.Literal['error'], typing_extensions.Literal['timeout']]
    flags: typing.List[typing.Union[typing_extensions.Literal[True], typing_extensions.Literal[False]]]
    codes: typing.List[typing.Union[typing_extensions.Literal[200], typing_extensions.Literal[404], typing_extensions.Literal[500]]]

class IntegerLiterals(BaseModel):
    priority: typing.Union[typing_extensions.Literal[1], typing_extensions.Literal[2], typing_extensions.Literal[3], typing_extensions.Literal[4], typing_extensions.Literal[5]]
    httpStatus: typing.Union[typing_extensions.Literal[200], typing_extensions.Literal[201], typing_extensions.Literal[400], typing_extensions.Literal[404], typing_extensions.Literal[500]]
    maxRetries: typing.Union[typing_extensions.Literal[0], typing_extensions.Literal[1], typing_extensions.Literal[3], typing_extensions.Literal[5]]

class MixedLiterals(BaseModel):
    id: int
    type: typing.Union[typing_extensions.Literal['user'], typing_extensions.Literal['admin'], typing_extensions.Literal['guest']]
    level: typing.Union[typing_extensions.Literal[1], typing_extensions.Literal[2], typing_extensions.Literal[3]]
    isActive: typing.Union[typing_extensions.Literal[True], typing_extensions.Literal[False]]
    apiVersion: typing.Union[typing_extensions.Literal['v1'], typing_extensions.Literal['v2'], typing_extensions.Literal['v3']]

class StringLiterals(BaseModel):
    status: typing.Union[typing_extensions.Literal['active'], typing_extensions.Literal['inactive'], typing_extensions.Literal['pending']]
    environment: typing.Union[typing_extensions.Literal['dev'], typing_extensions.Literal['staging'], typing_extensions.Literal['prod']]
    method: typing.Union[typing_extensions.Literal['GET'], typing_extensions.Literal['POST'], typing_extensions.Literal['PUT'], typing_extensions.Literal['DELETE']]

# #########################################################################
# Generated type aliases (0)
# #########################################################################

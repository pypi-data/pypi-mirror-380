# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (17)
# #########################################################################

class AllNullable(BaseModel):
    nullString: typing.Optional[str] = None
    nullInt: typing.Optional[int] = None
    nullFloat: typing.Optional[float] = None
    nullBool: typing.Optional[bool] = None
    nullArray: typing.Optional[typing.List[str]] = None
    nullObject: typing.Optional["User"] = None

class BooleanEdgeCases(BaseModel):
    explicitTrue: typing.Optional[bool] = None
    explicitFalse: typing.Optional[bool] = None
    arrayOfTrue: typing.List[bool]
    arrayOfFalse: typing.List[bool]
    mixedBoolArray: typing.List[bool]

class CircularReference(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    parent: typing.Optional["CircularReference"] = None
    children: typing.List["CircularReference"]
    relatedItems: typing.List["CircularReference"]

class DeepRecursion(BaseModel):
    value: typing.Optional[str] = None
    next: typing.Optional["DeepRecursion"] = None

class EmptyCollections(BaseModel):
    emptyStringArray: typing.List[str]
    emptyIntArray: typing.List[int]
    emptyObjectArray: typing.List["User"]
    emptyMap: typing.Dict[str, str]
    emptyNestedArray: typing.List[typing.List[str]]

class InnerNullable(BaseModel):
    value: typing.Optional[str] = None

class LargeStructure(BaseModel):
    field1: typing.Optional[str] = None
    field2: typing.Optional[str] = None
    field3: typing.Optional[str] = None
    field4: typing.Optional[str] = None
    field5: typing.Optional[str] = None
    field6: typing.Optional[int] = None
    field7: typing.Optional[int] = None
    field8: typing.Optional[int] = None
    field9: typing.Optional[int] = None
    field10: typing.Optional[int] = None
    field11: typing.Optional[float] = None
    field12: typing.Optional[float] = None
    field13: typing.Optional[float] = None
    field14: typing.Optional[float] = None
    field15: typing.Optional[float] = None
    field16: typing.Optional[bool] = None
    field17: typing.Optional[bool] = None
    field18: typing.Optional[bool] = None
    field19: typing.Optional[bool] = None
    field20: typing.Optional[bool] = None
    array1: typing.List[str]
    array2: typing.List[int]
    array3: typing.List[float]
    array4: typing.List[bool]
    array5: typing.List["User"]
    map1: typing.Dict[str, str]
    map2: typing.Dict[str, int]
    map3: typing.Dict[str, float]
    map4: typing.Dict[str, bool]
    map5: typing.Dict[str, "User"]

class MixedEdgeCases(BaseModel):
    emptyString: typing.Optional[str] = None
    singleChar: typing.Optional[str] = None
    veryLongArray: typing.List[str]
    deeplyNestedMap: typing.Dict[str, typing.Dict[str, typing.Dict[str, str]]]
    mixedTypeArray: typing.List[typing.Optional[typing.Union[str, int, bool]]]
    optionalEverything: typing.Optional["OptionalEverything"] = None

class NestedNullable(BaseModel):
    outer: typing.Optional["OuterNullable"] = None

class NullEdgeCases(BaseModel):
    allNull: typing.Optional["AllNullable"] = None
    someNull: typing.Optional["SomeNullable"] = None
    nestedNull: typing.Optional["NestedNullable"] = None

class NumberEdgeCases(BaseModel):
    zero: typing.Optional[int] = None
    negativeInt: typing.Optional[int] = None
    largeInt: typing.Optional[int] = None
    veryLargeInt: typing.Optional[int] = None
    smallFloat: typing.Optional[float] = None
    largeFloat: typing.Optional[float] = None
    negativeFloat: typing.Optional[float] = None
    scientificNotation: typing.Optional[float] = None
    infinity: typing.Optional[float] = None
    notANumber: typing.Optional[float] = None

class OptionalEverything(BaseModel):
    optString: typing.Optional[str] = None
    optInt: typing.Optional[int] = None
    optFloat: typing.Optional[float] = None
    optBool: typing.Optional[bool] = None
    optArray: typing.Optional[typing.List[str]] = None
    optMap: typing.Optional[typing.Dict[str, str]] = None
    optObject: typing.Optional["User"] = None

class OuterNullable(BaseModel):
    inner: typing.Optional["InnerNullable"] = None

class SomeNullable(BaseModel):
    presentString: typing.Optional[str] = None
    nullString: typing.Optional[str] = None
    presentInt: typing.Optional[int] = None
    nullInt: typing.Optional[int] = None

class SpecialCharacters(BaseModel):
    normalText: typing.Optional[str] = None
    withNewlines: typing.Optional[str] = None
    withTabs: typing.Optional[str] = None
    withQuotes: typing.Optional[str] = None
    withBackslashes: typing.Optional[str] = None
    withUnicode: typing.Optional[str] = None
    withEmoji: typing.Optional[str] = None
    withMixedSpecial: typing.Optional[str] = None

class User(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None

class VeryLongStrings(BaseModel):
    shortString: typing.Optional[str] = None
    mediumString: typing.Optional[str] = None
    longString: typing.Optional[str] = None
    veryLongString: typing.Optional[str] = None
    extremelyLongString: typing.Optional[str] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################

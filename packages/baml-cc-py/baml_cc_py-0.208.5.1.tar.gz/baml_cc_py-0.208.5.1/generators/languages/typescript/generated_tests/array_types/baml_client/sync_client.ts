/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, FunctionResult, BamlCtxManager, Image, Audio, Pdf, Video, ClientRegistry, Collector, FunctionLog } from "@boundaryml/baml"
import { toBamlError, BamlAbortError, type HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type * as types from "./types"
import type {ArrayWithConstraints, MixedArrays, NestedArrays, ObjectArrays, Product, SimpleArrays, Tag, User} from "./types"
import type TypeBuilder from "./type_builder"
import { HttpRequest, HttpStreamRequest } from "./sync_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 * Example:
 * ```ts
 * import { RecursivePartialNull } from './baml_client/types'
 * ```
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>;

type TickReason = "Unknown";

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
  env?: Record<string, string | undefined>
  abortSignal?: AbortSignal
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
}

export class BamlSyncClient {
  private httpRequest: HttpRequest
  private httpStreamRequest: HttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.httpRequest = new HttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new HttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlSyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  /*
  * @deprecated NOT IMPLEMENTED as streaming must by async. We
  * are not providing an async version as we want to reserve the
  * right to provide a sync version in the future.
  */
  get stream() {
    throw new Error("stream is not available in BamlSyncClient. Use `import { b } from 'baml_client/async_client")
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  TestEmptyArrays(
      input: string,
      __baml_options__?: BamlCallOptions
  ): types.SimpleArrays {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestEmptyArrays",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.SimpleArrays
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestLargeArrays(
      input: string,
      __baml_options__?: BamlCallOptions
  ): types.SimpleArrays {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestLargeArrays",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.SimpleArrays
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestMixedArrays(
      input: string,
      __baml_options__?: BamlCallOptions
  ): types.MixedArrays {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestMixedArrays",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.MixedArrays
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestNestedArrays(
      input: string,
      __baml_options__?: BamlCallOptions
  ): types.NestedArrays {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestNestedArrays",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.NestedArrays
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestObjectArrays(
      input: string,
      __baml_options__?: BamlCallOptions
  ): types.ObjectArrays {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestObjectArrays",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.ObjectArrays
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestSimpleArrays(
      input: string,
      __baml_options__?: BamlCallOptions
  ): types.SimpleArrays {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestSimpleArrays",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.SimpleArrays
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevel3DArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): string[][][] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevel3DArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string[][][]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelArrayOfMaps(
      input: string,
      __baml_options__?: BamlCallOptions
  ): Record<string, number>[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelArrayOfMaps",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as Record<string, number>[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelBoolArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): boolean[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelBoolArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as boolean[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelEmptyArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): string[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelEmptyArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelFloatArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): number[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelFloatArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as number[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelIntArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): number[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelIntArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as number[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelMixedArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): (string | number | boolean)[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelMixedArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as (string | number | boolean)[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelNestedArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): number[][] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelNestedArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as number[][]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelNullableArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): (string | null)[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelNullableArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as (string | null)[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelObjectArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): types.User[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelObjectArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.User[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  TestTopLevelStringArray(
      input: string,
      __baml_options__?: BamlCallOptions
  ): string[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error("onTick is not supported for synchronous functions. Please use the async client instead.");
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.callFunctionSync(
        "TestTopLevelStringArray",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as string[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)
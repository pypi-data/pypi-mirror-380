/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface ArrayWithConstraints {
  nonEmptyStrings: string[]
  limitedInts: number[]
  positiveFloats: number[]
  
}

export interface MixedArrays {
  primitiveArray: (string | number | number | boolean)[]
  nullableArray: (string | null)[]
  optionalItems: (string | null)[]
  arrayOfArrays: string[][]
  complexMixed: (User | Product | Tag)[]
  
}

export interface NestedArrays {
  matrix: number[][]
  stringMatrix: string[][]
  threeDimensional: number[][][]
  
}

export interface ObjectArrays {
  users: User[]
  products: Product[]
  tags: Tag[]
  
}

export interface Product {
  id: number
  name: string
  price: number
  tags: string[]
  inStock: boolean
  
}

export interface SimpleArrays {
  strings: string[]
  integers: number[]
  floats: number[]
  booleans: boolean[]
  
}

export interface Tag {
  id: number
  name: string
  color: string
  
}

export interface User {
  id: number
  name: string
  email: string
  isActive: boolean
  
}

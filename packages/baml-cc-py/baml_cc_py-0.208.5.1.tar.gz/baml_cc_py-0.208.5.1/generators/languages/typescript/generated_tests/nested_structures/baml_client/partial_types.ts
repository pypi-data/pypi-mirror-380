/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  Address,  Approval,  Budget,  Company,  CompanyMetadata,  ComplexNested,  Contact,  Coordinates,  DeeplyNested,  Department,  DisplaySettings,  Employee,  Level1,  Level2,  Level3,  Level4,  Level5,  Metadata,  Milestone,  NotificationSettings,  Preferences,  PrivacySettings,  Profile,  Project,  RecursiveStructure,  SimpleNested,  SocialLinks,  Task,  User,  UserSettings } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface Address {
      street?: string | null
      city?: string | null
      state?: string | null
      country?: string | null
      postalCode?: string | null
      coordinates?: Coordinates | null
    }
    export interface Approval {
      approver?: string | null
      date?: string | null
      amount?: number | null
      notes?: string | null
    }
    export interface Budget {
      total?: number | null
      spent?: number | null
      categories: Record<string, number>
      approvals: Approval[]
    }
    export interface Company {
      id?: number | null
      name?: string | null
      address?: Address | null
      departments: Department[]
      metadata?: CompanyMetadata | null
    }
    export interface CompanyMetadata {
      founded?: string | null
      industry?: string | null
      size?: "small" | "medium" | "large" | "enterprise" | null
      certifications: string[]
      partnerships?: Company[] | null
    }
    export interface ComplexNested {
      company?: Company | null
      employees: Employee[]
      projects: Project[]
    }
    export interface Contact {
      name?: string | null
      relationship?: string | null
      phone?: string | null
      email?: string | null
    }
    export interface Coordinates {
      latitude?: number | null
      longitude?: number | null
    }
    export interface DeeplyNested {
      level1?: Level1 | null
    }
    export interface Department {
      id?: number | null
      name?: string | null
      manager?: Employee | null
      members: Employee[]
      budget?: number | null
      projects: Project[]
    }
    export interface DisplaySettings {
      fontSize?: number | null
      colorScheme?: string | null
      layout?: "grid" | "list" | null
    }
    export interface Employee {
      id?: number | null
      name?: string | null
      email?: string | null
      role?: string | null
      department?: string | null
      skills: string[]
      address?: Address | null
      emergencyContact?: Contact | null
    }
    export interface Level1 {
      data?: string | null
      level2?: Level2 | null
    }
    export interface Level2 {
      data?: string | null
      level3?: Level3 | null
    }
    export interface Level3 {
      data?: string | null
      level4?: Level4 | null
    }
    export interface Level4 {
      data?: string | null
      level5?: Level5 | null
    }
    export interface Level5 {
      data?: string | null
      items: string[]
      mapping: Record<string, number>
    }
    export interface Metadata {
      createdAt?: string | null
      updatedAt?: string | null
      version?: number | null
      tags: string[]
      attributes: Record<string, string>
    }
    export interface Milestone {
      id?: number | null
      name?: string | null
      dueDate?: string | null
      completed?: boolean | null
      tasks: Task[]
    }
    export interface NotificationSettings {
      email?: boolean | null
      push?: boolean | null
      sms?: boolean | null
      frequency?: "immediate" | "daily" | "weekly" | null
    }
    export interface Preferences {
      theme?: "light" | "dark" | null
      language?: string | null
      notifications?: NotificationSettings | null
    }
    export interface PrivacySettings {
      profileVisibility?: "public" | "private" | "friends" | null
      showEmail?: boolean | null
      showPhone?: boolean | null
    }
    export interface Profile {
      bio?: string | null
      avatar?: string | null
      social?: SocialLinks | null
      preferences?: Preferences | null
    }
    export interface Project {
      id?: number | null
      name?: string | null
      description?: string | null
      status?: "planning" | "active" | "completed" | "cancelled" | null
      team: Employee[]
      milestones: Milestone[]
      budget?: Budget | null
    }
    export interface RecursiveStructure {
      id?: number | null
      name?: string | null
      children: RecursiveStructure[]
      parent?: RecursiveStructure | null
      metadata: Record<string, string | number | boolean>
    }
    export interface SimpleNested {
      user?: User | null
      address?: Address | null
      metadata?: Metadata | null
    }
    export interface SocialLinks {
      twitter?: string | null
      github?: string | null
      linkedin?: string | null
      website?: string | null
    }
    export interface Task {
      id?: number | null
      title?: string | null
      description?: string | null
      assignee?: string | null
      priority?: "low" | "medium" | "high" | null
      status?: "todo" | "in_progress" | "done" | null
      subtasks?: Task[] | null
    }
    export interface User {
      id?: number | null
      name?: string | null
      profile?: Profile | null
      settings?: UserSettings | null
    }
    export interface UserSettings {
      privacy?: PrivacySettings | null
      display?: DisplaySettings | null
      advanced: Record<string, string>
    }
}
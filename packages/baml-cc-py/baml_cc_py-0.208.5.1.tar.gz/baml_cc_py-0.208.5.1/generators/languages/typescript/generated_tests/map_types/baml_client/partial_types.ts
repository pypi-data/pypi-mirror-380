/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  ComplexMaps,  Config,  EdgeCaseMaps,  MixedKeyMaps,  NestedMaps,  Product,  SimpleMaps,  Status,  User } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface ComplexMaps {
      userMap: Record<string, User>
      productMap: Record<string, Product>
      nestedMap: Record<string, Record<string, string>>
      arrayMap: Record<string, number[]>
      mapArray: Record<string, string>[]
    }
    export interface Config {
      url?: string | null
      port?: number | null
      debug?: boolean | null
    }
    export interface EdgeCaseMaps {
      emptyMap: Record<string, string>
      nullableValues: Record<string, string | null>
      optionalValues: Record<string, string | null>
      unionValues: Record<string, string | number | boolean>
    }
    export interface MixedKeyMaps {
      stringIntMap: Record<string, number>
      intStringMap: Record<string, string>
      enumMap: Record<string, string>
      literalMap: Record<string, Config>
    }
    export interface NestedMaps {
      simple: Record<string, string>
      oneLevelNested: Record<string, Record<string, number>>
      twoLevelNested: Record<string, Record<string, Record<string, boolean>>>
      mapOfArrays: Record<string, string[]>
      mapOfMaps: Record<string, Record<string, number>>
    }
    export interface Product {
      id?: number | null
      name?: string | null
      price?: number | null
      tags: string[]
    }
    export interface SimpleMaps {
      stringToString: Record<string, string>
      stringToInt: Record<string, number>
      stringToFloat: Record<string, number>
      stringToBool: Record<string, boolean>
      intToString: Record<string, string>
    }
    export interface User {
      id?: number | null
      name?: string | null
      email?: string | null
      active?: boolean | null
    }
}
/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface ComplexOptional {
  data?: OptionalData | null
  items: OptionalItem[]
  mapping: Record<string, OptionalValue | null>
  
}

export interface MixedOptionalNullable {
  id: number
  description?: string | null
  metadata?: string | null
  notes?: string | null
  tags: string[]
  categories?: string[] | null
  keywords?: string[] | null
  primaryUser: User
  secondaryUser?: User | null
  tertiaryUser?: User | null
  
}

export interface NullableTypes {
  nullableString?: string | null
  nullableInt?: number | null
  nullableFloat?: number | null
  nullableBool?: boolean | null
  nullableArray?: string[] | null
  nullableObject?: User | null
  
}

export interface OptionalData {
  value: string
  count?: number | null
  enabled?: boolean | null
  
}

export interface OptionalFields {
  requiredString: string
  optionalString?: string | null
  requiredInt: number
  optionalInt?: number | null
  requiredBool: boolean
  optionalBool?: boolean | null
  optionalArray?: string[] | null
  optionalMap?: Record<string, string> | null
  
}

export interface OptionalItem {
  id: number
  name: string
  description?: string | null
  metadata?: Record<string, string> | null
  
}

export interface OptionalValue {
  data?: string | number | null
  optional?: string | null
  
}

export interface Product {
  id: number
  name: string
  price?: number | null
  
}

export interface UnionWithNull {
  simpleUnion: string | number
  nullableUnion?: string | number | null
  optionalUnion?: string | number | null
  complexUnion?: User | Product | null
  
}

export interface User {
  id: number
  name: string
  email?: string | null
  phone?: string | null
  
}

/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum Status {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  PENDING = "PENDING",
}

export interface ComplexMaps {
  userMap: Record<string, User>
  productMap: Record<string, Product>
  nestedMap: Record<string, Record<string, string>>
  arrayMap: Record<string, number[]>
  mapArray: Record<string, string>[]
  
}

export interface Config {
  url: string
  port: number
  debug: boolean
  
}

export interface EdgeCaseMaps {
  emptyMap: Record<string, string>
  nullableValues: Record<string, string | null>
  optionalValues: Record<string, string | null>
  unionValues: Record<string, string | number | boolean>
  
}

export interface MixedKeyMaps {
  stringIntMap: Record<string, number>
  intStringMap: Record<string, string>
  enumMap: Record<string, string>
  literalMap: Record<string, Config>
  
}

export interface NestedMaps {
  simple: Record<string, string>
  oneLevelNested: Record<string, Record<string, number>>
  twoLevelNested: Record<string, Record<string, Record<string, boolean>>>
  mapOfArrays: Record<string, string[]>
  mapOfMaps: Record<string, Record<string, number>>
  
}

export interface Product {
  id: number
  name: string
  price: number
  tags: string[]
  
}

export interface SimpleMaps {
  stringToString: Record<string, string>
  stringToInt: Record<string, number>
  stringToFloat: Record<string, number>
  stringToBool: Record<string, boolean>
  intToString: Record<string, string>
  
}

export interface User {
  id: number
  name: string
  email: string
  active: boolean
  
}

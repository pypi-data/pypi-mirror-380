# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import geopm_service_pb2 as geopm__service__pb2


class GEOPMServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserAccess = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/GetUserAccess',
                request_serializer=geopm__service__pb2.SessionKey.SerializeToString,
                response_deserializer=geopm__service__pb2.AccessLists.FromString,
                )
        self.GetSignalInfo = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/GetSignalInfo',
                request_serializer=geopm__service__pb2.InfoRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.SignalInfoList.FromString,
                )
        self.GetControlInfo = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/GetControlInfo',
                request_serializer=geopm__service__pb2.InfoRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.ControlInfoList.FromString,
                )
        self.StartBatch = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/StartBatch',
                request_serializer=geopm__service__pb2.BatchRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.BatchKey.FromString,
                )
        self.StopBatch = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/StopBatch',
                request_serializer=geopm__service__pb2.BatchSession.SerializeToString,
                response_deserializer=geopm__service__pb2.Empty.FromString,
                )
        self.ReadSignal = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/ReadSignal',
                request_serializer=geopm__service__pb2.ReadRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.Sample.FromString,
                )
        self.WriteControl = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/WriteControl',
                request_serializer=geopm__service__pb2.WriteRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.Empty.FromString,
                )
        self.TopoGetCache = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/TopoGetCache',
                request_serializer=geopm__service__pb2.Empty.SerializeToString,
                response_deserializer=geopm__service__pb2.TopoCache.FromString,
                )
        self.OpenSession = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/OpenSession',
                request_serializer=geopm__service__pb2.SessionKey.SerializeToString,
                response_deserializer=geopm__service__pb2.SessionKey.FromString,
                )
        self.CloseSession = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/CloseSession',
                request_serializer=geopm__service__pb2.SessionKey.SerializeToString,
                response_deserializer=geopm__service__pb2.Empty.FromString,
                )
        self.RestoreControl = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/RestoreControl',
                request_serializer=geopm__service__pb2.SessionKey.SerializeToString,
                response_deserializer=geopm__service__pb2.Empty.FromString,
                )
        self.StartProfile = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/StartProfile',
                request_serializer=geopm__service__pb2.ProfileRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.Empty.FromString,
                )
        self.StopProfile = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/StopProfile',
                request_serializer=geopm__service__pb2.ProfileRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.Empty.FromString,
                )
        self.GetProfilePids = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/GetProfilePids',
                request_serializer=geopm__service__pb2.ProfileRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.PidList.FromString,
                )
        self.PopProfileRegionNames = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/PopProfileRegionNames',
                request_serializer=geopm__service__pb2.ProfileRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.NameList.FromString,
                )
        self.SetGroupAccess = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/SetGroupAccess',
                request_serializer=geopm__service__pb2.GroupAccessRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.Empty.FromString,
                )
        self.SetGroupAccessSignals = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/SetGroupAccessSignals',
                request_serializer=geopm__service__pb2.GroupAccessRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.Empty.FromString,
                )
        self.SetGroupAccessControls = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/SetGroupAccessControls',
                request_serializer=geopm__service__pb2.GroupAccessRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.Empty.FromString,
                )
        self.GetAllAccess = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/GetAllAccess',
                request_serializer=geopm__service__pb2.Empty.SerializeToString,
                response_deserializer=geopm__service__pb2.AccessLists.FromString,
                )
        self.GetGroupAccess = channel.unary_unary(
                '/GEOPMPackage.GEOPMService/GetGroupAccess',
                request_serializer=geopm__service__pb2.GroupAccessRequest.SerializeToString,
                response_deserializer=geopm__service__pb2.AccessLists.FromString,
                )


class GEOPMServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUserAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignalInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetControlInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TopoGetCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestoreControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProfilePids(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PopProfileRegionNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGroupAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGroupAccessSignals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGroupAccessControls(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GEOPMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserAccess,
                    request_deserializer=geopm__service__pb2.SessionKey.FromString,
                    response_serializer=geopm__service__pb2.AccessLists.SerializeToString,
            ),
            'GetSignalInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignalInfo,
                    request_deserializer=geopm__service__pb2.InfoRequest.FromString,
                    response_serializer=geopm__service__pb2.SignalInfoList.SerializeToString,
            ),
            'GetControlInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetControlInfo,
                    request_deserializer=geopm__service__pb2.InfoRequest.FromString,
                    response_serializer=geopm__service__pb2.ControlInfoList.SerializeToString,
            ),
            'StartBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBatch,
                    request_deserializer=geopm__service__pb2.BatchRequest.FromString,
                    response_serializer=geopm__service__pb2.BatchKey.SerializeToString,
            ),
            'StopBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.StopBatch,
                    request_deserializer=geopm__service__pb2.BatchSession.FromString,
                    response_serializer=geopm__service__pb2.Empty.SerializeToString,
            ),
            'ReadSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadSignal,
                    request_deserializer=geopm__service__pb2.ReadRequest.FromString,
                    response_serializer=geopm__service__pb2.Sample.SerializeToString,
            ),
            'WriteControl': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteControl,
                    request_deserializer=geopm__service__pb2.WriteRequest.FromString,
                    response_serializer=geopm__service__pb2.Empty.SerializeToString,
            ),
            'TopoGetCache': grpc.unary_unary_rpc_method_handler(
                    servicer.TopoGetCache,
                    request_deserializer=geopm__service__pb2.Empty.FromString,
                    response_serializer=geopm__service__pb2.TopoCache.SerializeToString,
            ),
            'OpenSession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenSession,
                    request_deserializer=geopm__service__pb2.SessionKey.FromString,
                    response_serializer=geopm__service__pb2.SessionKey.SerializeToString,
            ),
            'CloseSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseSession,
                    request_deserializer=geopm__service__pb2.SessionKey.FromString,
                    response_serializer=geopm__service__pb2.Empty.SerializeToString,
            ),
            'RestoreControl': grpc.unary_unary_rpc_method_handler(
                    servicer.RestoreControl,
                    request_deserializer=geopm__service__pb2.SessionKey.FromString,
                    response_serializer=geopm__service__pb2.Empty.SerializeToString,
            ),
            'StartProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.StartProfile,
                    request_deserializer=geopm__service__pb2.ProfileRequest.FromString,
                    response_serializer=geopm__service__pb2.Empty.SerializeToString,
            ),
            'StopProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.StopProfile,
                    request_deserializer=geopm__service__pb2.ProfileRequest.FromString,
                    response_serializer=geopm__service__pb2.Empty.SerializeToString,
            ),
            'GetProfilePids': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProfilePids,
                    request_deserializer=geopm__service__pb2.ProfileRequest.FromString,
                    response_serializer=geopm__service__pb2.PidList.SerializeToString,
            ),
            'PopProfileRegionNames': grpc.unary_unary_rpc_method_handler(
                    servicer.PopProfileRegionNames,
                    request_deserializer=geopm__service__pb2.ProfileRequest.FromString,
                    response_serializer=geopm__service__pb2.NameList.SerializeToString,
            ),
            'SetGroupAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGroupAccess,
                    request_deserializer=geopm__service__pb2.GroupAccessRequest.FromString,
                    response_serializer=geopm__service__pb2.Empty.SerializeToString,
            ),
            'SetGroupAccessSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGroupAccessSignals,
                    request_deserializer=geopm__service__pb2.GroupAccessRequest.FromString,
                    response_serializer=geopm__service__pb2.Empty.SerializeToString,
            ),
            'SetGroupAccessControls': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGroupAccessControls,
                    request_deserializer=geopm__service__pb2.GroupAccessRequest.FromString,
                    response_serializer=geopm__service__pb2.Empty.SerializeToString,
            ),
            'GetAllAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAccess,
                    request_deserializer=geopm__service__pb2.Empty.FromString,
                    response_serializer=geopm__service__pb2.AccessLists.SerializeToString,
            ),
            'GetGroupAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupAccess,
                    request_deserializer=geopm__service__pb2.GroupAccessRequest.FromString,
                    response_serializer=geopm__service__pb2.AccessLists.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GEOPMPackage.GEOPMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GEOPMService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUserAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/GetUserAccess',
            geopm__service__pb2.SessionKey.SerializeToString,
            geopm__service__pb2.AccessLists.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSignalInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/GetSignalInfo',
            geopm__service__pb2.InfoRequest.SerializeToString,
            geopm__service__pb2.SignalInfoList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetControlInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/GetControlInfo',
            geopm__service__pb2.InfoRequest.SerializeToString,
            geopm__service__pb2.ControlInfoList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/StartBatch',
            geopm__service__pb2.BatchRequest.SerializeToString,
            geopm__service__pb2.BatchKey.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/StopBatch',
            geopm__service__pb2.BatchSession.SerializeToString,
            geopm__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/ReadSignal',
            geopm__service__pb2.ReadRequest.SerializeToString,
            geopm__service__pb2.Sample.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/WriteControl',
            geopm__service__pb2.WriteRequest.SerializeToString,
            geopm__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TopoGetCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/TopoGetCache',
            geopm__service__pb2.Empty.SerializeToString,
            geopm__service__pb2.TopoCache.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/OpenSession',
            geopm__service__pb2.SessionKey.SerializeToString,
            geopm__service__pb2.SessionKey.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/CloseSession',
            geopm__service__pb2.SessionKey.SerializeToString,
            geopm__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RestoreControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/RestoreControl',
            geopm__service__pb2.SessionKey.SerializeToString,
            geopm__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/StartProfile',
            geopm__service__pb2.ProfileRequest.SerializeToString,
            geopm__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/StopProfile',
            geopm__service__pb2.ProfileRequest.SerializeToString,
            geopm__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProfilePids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/GetProfilePids',
            geopm__service__pb2.ProfileRequest.SerializeToString,
            geopm__service__pb2.PidList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PopProfileRegionNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/PopProfileRegionNames',
            geopm__service__pb2.ProfileRequest.SerializeToString,
            geopm__service__pb2.NameList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGroupAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/SetGroupAccess',
            geopm__service__pb2.GroupAccessRequest.SerializeToString,
            geopm__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGroupAccessSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/SetGroupAccessSignals',
            geopm__service__pb2.GroupAccessRequest.SerializeToString,
            geopm__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGroupAccessControls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/SetGroupAccessControls',
            geopm__service__pb2.GroupAccessRequest.SerializeToString,
            geopm__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/GetAllAccess',
            geopm__service__pb2.Empty.SerializeToString,
            geopm__service__pb2.AccessLists.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroupAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GEOPMPackage.GEOPMService/GetGroupAccess',
            geopm__service__pb2.GroupAccessRequest.SerializeToString,
            geopm__service__pb2.AccessLists.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

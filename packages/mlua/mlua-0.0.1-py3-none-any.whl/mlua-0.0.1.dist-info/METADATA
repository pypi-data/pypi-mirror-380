Metadata-Version: 2.4
Name: mlua
Version: 0.0.1
Summary: A lua module manager library for python, it can transfer lua module to python object and call it.
Home-page: https://github.com/FreeStar007/mlua
Author: FreeStar007
Author-email: 3089666858@qq.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: lupa
Requires-Dist: colorama
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# MLuaCore Module Documentation

## Overview
Core module for Python-Lua interaction providing Lua environment management, module loading and installation capabilities.

## Classes

### `MLuaObject`
- **Purpose**: Container for loaded Lua functions and values
- **Attributes**:
  - `functions`: Stores Lua functions (`_Functions` class instance)
  - `values`: Stores Lua non-function values (`_Values` class instance)
- **Methods**:
  - `__str__()`: Returns string representation of contained functions/values

### `MLuaEnvironment` 
- **Purpose**: Manages Lua runtime environment
- **Methods**:
  - `environment() -> LuaRuntime`: Returns the underlying Lua runtime
  - `reset(*args, **kwargs)`: Reinitializes the Lua runtime
  - `__str__()`: Returns environment description

### `MLuaModule`
- **Purpose**: Loads and manages Lua modules
- **Initialization**:
  ```python
  MLuaModule(module_path: str)
DiffExpandCopyInsert
Methods:
mount(env: MLuaEnvironment, security=True) -> MLuaObject: Loads module into environment
name() -> str: Gets module name (without extension)
path() -> str: Gets source file path
source() -> str: Gets raw module source code
__str__(): Returns module identifier
MLuaModuleInstaller
Purpose: Batch installation of multiple Lua modules
Initialization:
MLuaModuleInstaller(*mlua_modules: MLuaModule)
DiffCopyInsert
Methods:
mount_all(lua: MLuaEnvironment) -> list[MLuaObject]: Installs all modules
__str__(): Returns installer description
Usage Example
# Initialize environment
lua_env = MLuaEnvironment(unpack_returned_tuples=True)

# Load module
module = MLuaModule("./scripts/utils.lua")

# Mount module (safe mode)
result = module.mount(lua_env)
print(result.values.config)  # Access exported values
print(result.functions.calc)  # Access exported functions

# Batch installation
installer = MLuaModuleInstaller(
    MLuaModule("./mod1.lua"),
    MLuaModule("./mod2.lua")
)
results = installer.mount_all(lua_env)
DiffExpandCopyInsert
Implementation Notes
Security Mode:

Enabled by default in mount()
Uses setattr() for safer attribute assignment
Disable for ~20% faster loading (no type checks)
Path Handling:

All paths are resolved via pathlib.Path
Relative paths are resolved from working directory
Type Conversion:

Automatic Python-Lua type conversion via Lupa
Functions are wrapped as callable objects
Performance:

Module source is read once during initialization
Separate loops for functions/values optimize large modules

This maintains pure Markdown format with:
- Proper code blocks (triple backticks)
- Consistent header levels
- Clear section separation
- Type annotations preserved
- All implementation details from source
- Practical usage examples
- Important technical notes

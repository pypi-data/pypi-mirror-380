[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "autowsgr"
dynamic = ["version"]
description = "Auto Warship Girls Framework."
readme = "README.md"
requires-python = ">=3.12,<3.13"
license = { text = "MIT" }
classifiers = [
    "Programming Language :: Python :: 3.12",
    "Environment :: GPU :: NVIDIA CUDA",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "wheel",
    "thefuzz",
    "setuptools",
    "rich",
    "pre-commit",
    "opencv-python",
    "opencv-python-headless",
    "opencv-contrib-python",
    "loguru",
    "keyboard",
    "inquirer>=3.2.4",
    "easyocr>=1.7.1",
    "airtest-openwsgr>=1.3.9",
]

[project.urls]
Homepage = "https://github.com/OpenWSGR/AutoWSGR"
Documentation = "https://autowsgr.readthedocs.io/"
Repository = "https://github.com/OpenWSGR/AutoWSGR.git"

[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "autowsgr.__version__"}

[tool.setuptools.package-data]
"*" = [
    "data/**",
    "requirements.txt",
    "bin/**",
    "c_src/**",
]

[tool.codespell]
ignore-words = "docs/spelling_wordlist.txt"

[tool.ruff]
target-version = "py312"
line-length = 100
output-format = "full"
src = ["autowsgr", "tools"]

[tool.ruff.format]
quote-style = "single"
docstring-code-format = false
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "I",       # isort
    "N",       # pep8-naming
    "UP",      # pyupgrade
    "ANN",     # flake8-annotations
    "BLE",     # flake8-blind-except
    "B",       # flake8-bugbear
    "COM",     # flake8-commas
    "C4",      # flake8-comprehensions
    "EXE",     # flake8-executable
    "FA",      # flake8-future-annotations
    "ISC",     # flake8-implicit-str-concat
    "LOG",     # flake8-logging
    "PIE",     # flake8-pie
    "PYI",     # flake8-pyi
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "TC",      # flake8-type-checking
    "T20",     # flake8-print
    "PERF",    # perflint
    "FURB",    # refurb
    "TRY",     # tryceratops
    "RUF",     # ruff
    "ASYNC",   # flake8-async
]
preview = true
explicit-preview-rules = true
ignore = [
    # TODO: temporarily ignore until all annotations are added
    "ANN001",
    "ANN201",
    "ANN202",
    # TODO: temporarily ignore until all exceptions are handled
    "E722",
    "BLE001",
    "B904",
    "TRY002",
    "TRY201",
    "TRY300",
    "TRY301",
    "TRY400",
    "PERF203",
    "T201",    # `print` found
    "N801",    # Class name `EventFightPlan2025_0424` should use CapWords convention
    "N806",    # Variable `EXP_AREA` in function should be lowercase

    "ANN002",  # missing-type-args
    "ANN003",  # missing-type-kwargs
    "ANN204",  # missing-return-type-special-method
    "ANN401",  # any-type
    "B027",    # empty-method-without-abstract-decorator
    "B905",    # zip-without-explicit-strict, we use `zip-strict-fixer` instead
    "C401",    # unnecessary set comprehension
    "C416",    # unnecessary-comprehension
    "COM812",  # missing-trailing-comma
    "E501",    # line-too-long
    "N802",    # invalid-function-name
    "RUF005",  # collection-literal-concatenation
    "RUF052",  # https://docs.astral.sh/ruff/rules/used-dummy-variable/
    "SIM105",  # suppressible-exception
    "SIM108",  # if-else-block-instead-of-if-exp
    "TID252",  # relative-imports
    "TRY301",  # raise-within-try
    "TRY003",  # raise-vanilla-args
    "TRY400",  # error-instead-of-exception
    "W505",    # doc-line-too-long
]
allowed-confusables = ["，", "。", "：", "？", "！", "、", "（", "）", "；", "“", "”"]
extend-safe-fixes = [
    "C408",     # unnecessary-collection-call
    "E711",     # none-comparison
    "FURB129",  # readlines-in-for
    "PERF102",  # incorrect-dict-iterator
    "PIE810",   # multiple-starts-ends-with
    "SIM102",   # collapsible-if
    "TC001",    # typing-only-first-party-import
    "TC002",    # typing-only-third-party-import
    "TC003",    # typing-only-standard-library-import
    "TC004",    # runtime-import-in-type-checking-block
    "TRY201",   # verbose-raise
    "UP004",    # useless-object-inheritance
    "UP008",    # super-call-with-parameters
    "UP038",    # non-pep604-isinstance
    "UP039",    # unnecessary-class-parentheses
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",    # unused-import
]

[tool.ruff.lint.mccabe]
max-complexity = 17

[tool.ruff.lint.pylint]
max-args = 15
max-positional-args = 7
max-statements = 60

[tool.ruff.lint.isort]
known-first-party = ["autowsgr"]
known-local-folder = ["autowsgr", "tools", "examples"]
lines-after-imports = 2

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true


[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
runtime-evaluated-decorators = ["pydantic.validate_call"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/letsramp/dev/cmd/libs */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 7 "client.go"

struct worker_info {
    char *container_name;
    char *error;
};

struct response_wrapper {
    char *response;
    char *error;
};

#line 1 "cgo-generated-wrapper"

#line 7 "endpoint.go"

	struct tester_info {
	    char *tester_id;
	    char *error;
	};

	struct tester_generate_info {
	    char *generated_files;
	    char *error;
	};

#line 1 "cgo-generated-wrapper"




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt32 GoInt;
typedef GoUint32 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_32_bit_pointer_matching_GoInt[sizeof(void*)==32/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern char* removeLocalWrapper();
extern char* removeClusterFromConfigWrapper(char* clusterName);
extern char* loginWrapper();
extern char* logoutWrapper();
extern char* getKubeConfigPath();
extern char* applyLocalWrapper();
extern char* addKubeconfigWrapper(char* context, char* clusterName, char* kubeconfigPath);
extern char* setProjectDirectoryWrapper(char* context);
extern char* getEndpointFromProjectWrapper(char* endpointName, char* projectPath);
extern char* deployTargetWrapper(char* filePath, char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* workerImage, GoUint8 localImage);
extern char* deploySkyrampWorkerWrapper(char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* workerImage, GoUint8 localImage);
extern char* deleteTargetWrapper(char* filePath, char* namespace, char* kubePath, char* kubeContext, char* clusterName);
extern char* deleteSkyrampWorkerWrapper(char* namespace, char* kubePath, char* kubeContext, char* clusterName);
extern char* initTargetWrapper(char* fileName);
extern struct worker_info newStartDockerSkyrampWorkerWrapper(char* image, char* tag, GoInt hostPort, char* targetNetworkName, char* testServiceAlias);
extern char* newDeleteDockerSkyrampWorkerWrapper(char* containerName);
extern char* runTesterCurlWrapper(char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* address, char* request);
extern struct response_wrapper sendScenarioWrapper(char* address, char* dockerNetwork, char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* scenarios, char* until, char* loadTestConfig, char* dependenciesFilePath, char* workerImage, GoUint8 blocked, GoUint8 localImage, GoUint8 skipCertVerify);
extern struct response_wrapper sendRequestWrapper(char* address, char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* request, char* dockerNetwork, char* workerImage, char* clientID, GoUint8 localImage);

/* Return type for getJSONValueWrapper */
struct getJSONValueWrapper_return {
	char* r0;
	char* r1;
};
extern struct getJSONValueWrapper_return getJSONValueWrapper(char* jsonS, char* path);
extern int checkStatusCodeWrapper(int actualStatus, char* expectedStatus);
extern char* deployDockerDashboardWrapper(char* networkName);
extern char* deployK8sDashboardWrapper(char* networkName);
extern struct response_wrapper checkSchemaWrapper(char* requestBody, char* sampleSchema);
extern struct response_wrapper getHtmlInputValueWrapper(char* htmlS, char* nodeName);
extern char* getResponseValueWithKeyWrapper(char* doc, char* key);
extern char* getOverallStatusWrapper(char* status);
extern char* getDetailedScenarioStatusWrapper(char* status, char* scenarioName);
extern char* applyMockObjectWrapper(char* address, char* dockerNetwork, char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* mockV2CStr, char* workerImage, GoUint8 localImage);
extern struct response_wrapper improvePlywrightSelectorWrapper(char* requestJson);
extern char* newGrpcEndpointWrapper(char* name, char* serviceName, GoInt port, char* inputFile);
extern char* newRestEndpointWrapper(char* name, char* openApiTag, GoInt port, char* inputFile, char* restPath);
extern char* getEndpointWrapper(char* service, GoInt port, char* restPath);
extern char* writeMockDescriptionWrapper(char* mockDescription, char* kubernetesService);
extern char* writeTestDescriptionWrapper(char* testDescription, char* testName);
extern char* applyMockDescriptionWrapper(char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* address, char* mockDescription, char* mockPath, char* projectPath);
extern char* buildRequestsWrapper(char* mockDescription);
extern struct tester_info runTesterStartWrapper(char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* address, char* testDescription, GoUint8 block, GoUint8 generateResult);
extern struct tester_generate_info runTesterGenerateRestWrapper(char* protocol, char* apiSchemaPath, char* alias, char* endpointPath, char* language, char* tag, char* sampleRequestPath, char* projectPath, GoInt port, GoUint8 generateRobot, GoUint8 functionalScenario, GoUint8 negativeScenario);
extern struct tester_info runTesterStartWrapperWithGlobalHeaders(char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* address, char* testDescription, char* testFileName, char* testName, char* globalJsonHeaders, GoUint8 generateResult, GoUint8 blocked, char* projectPath, char* overrideFile, char* overrideDict);
extern char* runTesterStatusWrapper(char* namespace, char* kubePath, char* kubeContext, char* clusterName, char* address, char* testerId, GoUint8 blocked, GoUint8 isFormattingEnabled);
extern char* generateRestTestWrapper(char* test, char* uri, char* methodX, char* language, char* framework, char* output, char* outputDir, char* runtime, char* dockerNetwork, char* dockerWorkerPort, char* k8sNamespace, char* k8sConfig, char* k8sContext, char* authHeader, char* authType, char* requestData, char* responseData, char* responseStatusCode, GoUint8 force, GoUint8 deployDashboard, char* formParams, char* pathParams, char* queryParams, char* apiSchema, char* traceFilePath, char* generateInclude, char* generateExclude, char* generateNoProxy, GoUint8 generateInsecure, char* assertOption, GoUint8 playwright, char* playwrightOutput, char* playwrightInput, char* loadCount, char* loadDuration, char* loadNumThreads, char* loadRampupDuration, char* loadRampupInterval, char* loadTargetRPS, char* rawTrace, GoUint8 unblock, char* entrypoint);
extern char* traceCollectWrapper(char* output, char* workerContainerName, GoUint8 playwright, char* playwrightOutput, char* outputDirectory);
extern char* analyzeOpenapiWrapper(char* apiSchema, char* uri);
extern char* SanitizePayloadWrapper(char* payload);
extern char* SanitizeHeadersAndCookiesWrapper(char* dataMap);
extern char* getJsonValue(char* jsonString, char* jsonPath);
extern char* generateJsonTreePathsFromBlob(char* blob);
extern char* getRequestName(char* path, char* method);
extern char* sanitizeTestResultsWrapper(char* testResults);
extern GoUint8 hasJavascript(char* c);

#ifdef __cplusplus
}
#endif

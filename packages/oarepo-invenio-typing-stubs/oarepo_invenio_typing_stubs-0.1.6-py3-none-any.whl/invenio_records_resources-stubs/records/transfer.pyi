from collections.abc import Iterator, Mapping
from typing import Any, overload

from invenio_records.systemfields import SystemField
from invenio_records_resources.records.api import FileRecord

class TransferFieldData(Mapping[str, Any]):
    _field: dict[str, Any]

    def __init__(self, field: dict[str, Any]) -> None: ...
    @property
    def transfer_type(self) -> str: ...
    @transfer_type.setter
    def transfer_type(self, value: str) -> None: ...
    def get(self, key: str, default: Any = None) -> Any: ...
    def set(self, values: dict[str, Any]) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...

class TransferField(SystemField[FileRecord, TransferFieldData]):
    @overload
    def __get__(self, record: None, owner: type[FileRecord]) -> "TransferField": ...
    @overload
    def __get__(
        self, record: FileRecord, owner: type[FileRecord] | None = None
    ) -> TransferFieldData: ...
    def __set__(self, record: FileRecord, value: TransferFieldData) -> None: ...

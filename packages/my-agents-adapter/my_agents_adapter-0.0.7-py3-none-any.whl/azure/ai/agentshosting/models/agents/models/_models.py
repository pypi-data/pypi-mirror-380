# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from ...openai.models import ItemParam, ItemResource, Tool
from ...openai.models._enums import ItemType, ToolType
from .._utils.model_base import Model as _Model, rest_discriminator, rest_field
from ._enums import AgentEventHandlerDestinationType, AgentKind, OpenApiAuthType

if TYPE_CHECKING:
    from .. import models as _models
    from ...openai import models as _openai_models5


class A2ATool(Tool, discriminator="a2a"):
    """An agent implementing the A2A protocol.

    :ivar type: The type of the tool. Always ``a2a``. Required.
    :vartype type: str or ~openai.models.A2_A
    :ivar base_url: Base URL of the agent. Required.
    :vartype base_url: str
    :ivar agent_card_path: The path to the agent card relative to the ``base_url``.
     If not provided, defaults to  ``/.well-known/agent-card.json``.
    :vartype agent_card_path: str
    """

    type: Literal[ToolType.A2_A] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The type of the tool. Always ``a2a``. Required."""
    base_url: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Base URL of the agent. Required."""
    agent_card_path: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The path to the agent card relative to the ``base_url``.
     If not provided, defaults to  ``/.well-known/agent-card.json``."""

    @overload
    def __init__(
        self,
        *,
        base_url: str,
        agent_card_path: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.A2_A  # type: ignore


class AgentContainerObject(_Model):
    """The details of the container of a specific version of an agent.

    :ivar object: The object type, which is always 'agent.container'. Required. Default value is
     "agent.container".
    :vartype object: str
    :ivar status: The status of the container of a specific version of an agent. Required. Known
     values are: "Starting", "Running", "Stopping", "Stopped", "Failed", "Deleting", "Deleted", and
     "Updating".
    :vartype status: str or ~azure.ai.agents.models.AgentContainerStatus
    :ivar max_replicas: The maximum number of replicas for the container. Default is 1.
    :vartype max_replicas: int
    :ivar min_replicas: The minimum number of replicas for the container. Default is 1.
    :vartype min_replicas: int
    :ivar error_message: The error message if the container failed to operate, if any.
    :vartype error_message: str
    :ivar created_at: The creation time of the container. Required.
    :vartype created_at: ~datetime.datetime
    :ivar updated_at: The last update time of the container. Required.
    :vartype updated_at: ~datetime.datetime
    """

    object: Literal["agent.container"] = rest_field(visibility=["read"])
    """The object type, which is always 'agent.container'. Required. Default value is
     \"agent.container\"."""
    status: Union[str, "_models.AgentContainerStatus"] = rest_field(visibility=["read"])
    """The status of the container of a specific version of an agent. Required. Known values are:
     \"Starting\", \"Running\", \"Stopping\", \"Stopped\", \"Failed\", \"Deleting\", \"Deleted\",
     and \"Updating\"."""
    max_replicas: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The maximum number of replicas for the container. Default is 1."""
    min_replicas: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The minimum number of replicas for the container. Default is 1."""
    error_message: Optional[str] = rest_field(visibility=["read"])
    """The error message if the container failed to operate, if any."""
    created_at: datetime.datetime = rest_field(visibility=["read"], format="rfc3339")
    """The creation time of the container. Required."""
    updated_at: datetime.datetime = rest_field(visibility=["read"], format="rfc3339")
    """The last update time of the container. Required."""

    @overload
    def __init__(
        self,
        *,
        max_replicas: Optional[int] = None,
        min_replicas: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.object: Literal["agent.container"] = "agent.container"


class AgentContainerOperationError(_Model):
    """The error details of the container operation, if any.

    :ivar code: The error code of the container operation, if any. Required.
    :vartype code: str
    :ivar type: The error type of the container operation, if any. Required.
    :vartype type: str
    :ivar message: The error message of the container operation, if any. Required.
    :vartype message: str
    """

    code: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error code of the container operation, if any. Required."""
    type: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error type of the container operation, if any. Required."""
    message: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error message of the container operation, if any. Required."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        type: str,
        message: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentContainerOperationObject(_Model):
    """The container operation for a specific version of an agent.

    :ivar id: The ID of the container operation. This id is unique identifier across the system.
     Required.
    :vartype id: str
    :ivar agent_id: The ID of the agent. Required.
    :vartype agent_id: str
    :ivar agent_version_id: The ID of the agent version. Required.
    :vartype agent_version_id: str
    :ivar status: The status of the container operation. Required. Known values are: "NotStarted",
     "InProgress", "Succeeded", and "Failed".
    :vartype status: str or ~azure.ai.agents.models.AgentContainerOperationStatus
    :ivar error: The error of the container operation, if any.
    :vartype error: ~azure.ai.agents.models.AgentContainerOperationError
    :ivar container: The container of the specific version of an agent.
    :vartype container: ~azure.ai.agents.models.AgentContainerObject
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The ID of the container operation. This id is unique identifier across the system. Required."""
    agent_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The ID of the agent. Required."""
    agent_version_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The ID of the agent version. Required."""
    status: Union[str, "_models.AgentContainerOperationStatus"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the container operation. Required. Known values are: \"NotStarted\",
     \"InProgress\", \"Succeeded\", and \"Failed\"."""
    error: Optional["_models.AgentContainerOperationError"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The error of the container operation, if any."""
    container: Optional["_models.AgentContainerObject"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The container of the specific version of an agent."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        agent_id: str,
        agent_version_id: str,
        status: Union[str, "_models.AgentContainerOperationStatus"],
        error: Optional["_models.AgentContainerOperationError"] = None,
        container: Optional["_models.AgentContainerObject"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentDefinition(_Model):
    """AgentDefinition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ContainerAppAgentDefinition, HostedAgentDefinition, PromptAgentDefinition, WorkflowDefinition

    :ivar kind: Required. Known values are: "prompt", "hosted", "container_app", and "workflow".
    :vartype kind: str or ~azure.ai.agents.models.AgentKind
    """

    __mapping__: dict[str, _Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """Required. Known values are: \"prompt\", \"hosted\", \"container_app\", and \"workflow\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentEventHandlerDestination(_Model):
    """AgentEventHandlerDestination.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    EvalsDestination

    :ivar type: Required. "evals"
    :vartype type: str or ~azure.ai.agents.models.AgentEventHandlerDestinationType
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Required. \"evals\""""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentEventHandlerFilter(_Model):
    """AgentEventHandlerFilter.

    :ivar agent_versions: The agent versions where this handler is applicable. Required.
    :vartype agent_versions: list[str]
    """

    agent_versions: list[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The agent versions where this handler is applicable. Required."""

    @overload
    def __init__(
        self,
        *,
        agent_versions: list[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentEventHandlerObject(_Model):
    """An object that listens for agent-generated events and forwards them to a destination for
    processing.

    :ivar object: The object type, which is always 'agent.event_handler'. Required. Default value
     is "agent.event_handler".
    :vartype object: str
    :ivar id: The unique identifier of the event handler. Every event handler update creates a new
     ID. Required.
    :vartype id: str
    :ivar name: The name of the event handler. Required.
    :vartype name: str
    :ivar metadata: Arbitrary key-value metadata to associate with the event handler.
    :vartype metadata: dict[str, str]
    :ivar created_at: The Unix timestamp (seconds) when the event handler was created. Required.
    :vartype created_at: ~datetime.datetime
    :ivar event_types: The event types the handler listens to. Required.
    :vartype event_types: list[str or ~azure.ai.agents.models.AgentEventType]
    :ivar filter: An optional filter condition where this event handler is applicable.
    :vartype filter: ~azure.ai.agents.models.AgentEventHandlerFilter
    :ivar destination: The destination where the event handler will send the event. Required.
    :vartype destination: ~azure.ai.agents.models.AgentEventHandlerDestination
    """

    object: Literal["agent.event_handler"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The object type, which is always 'agent.event_handler'. Required. Default value is
     \"agent.event_handler\"."""
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique identifier of the event handler. Every event handler update creates a new ID.
     Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the event handler. Required."""
    metadata: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Arbitrary key-value metadata to associate with the event handler."""
    created_at: datetime.datetime = rest_field(
        visibility=["read", "create", "update", "delete", "query"], format="unix-timestamp"
    )
    """The Unix timestamp (seconds) when the event handler was created. Required."""
    event_types: list[Union[str, "_models.AgentEventType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The event types the handler listens to. Required."""
    filter: Optional["_models.AgentEventHandlerFilter"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """An optional filter condition where this event handler is applicable."""
    destination: "_models.AgentEventHandlerDestination" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The destination where the event handler will send the event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        created_at: datetime.datetime,
        event_types: list[Union[str, "_models.AgentEventType"]],
        destination: "_models.AgentEventHandlerDestination",
        metadata: Optional[dict[str, str]] = None,
        filter: Optional["_models.AgentEventHandlerFilter"] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.object: Literal["agent.event_handler"] = "agent.event_handler"


class AgentEventHandlerRequest(_Model):
    """AgentEventHandlerRequest.

    :ivar name: The name of the event handler. Required.
    :vartype name: str
    :ivar metadata: Arbitrary key-value metadata to associate with the event handler.
    :vartype metadata: dict[str, str]
    :ivar event_types: The event types the handler listens to. Required.
    :vartype event_types: list[str or ~azure.ai.agents.models.AgentEventType]
    :ivar filter: An optional filter condition where this event handler is applicable.
    :vartype filter: ~azure.ai.agents.models.AgentEventHandlerFilter
    :ivar destination: The destination where the event handler will send the event. Required.
    :vartype destination: ~azure.ai.agents.models.AgentEventHandlerDestination
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the event handler. Required."""
    metadata: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Arbitrary key-value metadata to associate with the event handler."""
    event_types: list[Union[str, "_models.AgentEventType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The event types the handler listens to. Required."""
    filter: Optional["_models.AgentEventHandlerFilter"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """An optional filter condition where this event handler is applicable."""
    destination: "_models.AgentEventHandlerDestination" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The destination where the event handler will send the event. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        event_types: list[Union[str, "_models.AgentEventType"]],
        destination: "_models.AgentEventHandlerDestination",
        metadata: Optional[dict[str, str]] = None,
        filter: Optional["_models.AgentEventHandlerFilter"] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentId(_Model):
    """AgentId.

    :ivar type: Required. Default value is "agent_id".
    :vartype type: str
    :ivar name: The name of the agent. Required.
    :vartype name: str
    :ivar version: The version identifier of the agent. Required.
    :vartype version: str
    """

    type: Literal["agent_id"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required. Default value is \"agent_id\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the agent. Required."""
    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version identifier of the agent. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type: Literal["agent_id"] = "agent_id"


class AgentObject(_Model):
    """AgentObject.

    :ivar object: The object type, which is always 'agent'. Required. Default value is "agent".
    :vartype object: str
    :ivar id: The unique identifier of the agent. Required.
    :vartype id: str
    :ivar name: The name of the agent. Required.
    :vartype name: str
    :ivar versions: The latest version of the agent. Required.
    :vartype versions: ~azure.ai.agents.models.AgentObjectVersions
    """

    object: Literal["agent"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The object type, which is always 'agent'. Required. Default value is \"agent\"."""
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique identifier of the agent. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the agent. Required."""
    versions: "_models.AgentObjectVersions" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The latest version of the agent. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        versions: "_models.AgentObjectVersions",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.object: Literal["agent"] = "agent"


class AgentObjectVersions(_Model):
    """AgentObjectVersions.

    :ivar latest: Required.
    :vartype latest: ~azure.ai.agents.models.AgentVersionObject
    """

    latest: "_models.AgentVersionObject" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""

    @overload
    def __init__(
        self,
        *,
        latest: "_models.AgentVersionObject",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentReference(_Model):
    """AgentReference.

    :ivar type: Required. Default value is "agent_reference".
    :vartype type: str
    :ivar name: The name of the agent. Required.
    :vartype name: str
    :ivar version: The version identifier of the agent.
    :vartype version: str
    """

    type: Literal["agent_reference"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required. Default value is \"agent_reference\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the agent. Required."""
    version: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version identifier of the agent."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        version: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type: Literal["agent_reference"] = "agent_reference"


class AgentsPagedResultAgentContainerOperationObject(_Model):  # pylint: disable=name-too-long
    """The response data for a requested list of items.

    :ivar data: The requested list of items. Required.
    :vartype data: list[~azure.ai.agents.models.AgentContainerOperationObject]
    :ivar first_id: The first ID represented in this list.
    :vartype first_id: str
    :ivar last_id: The last ID represented in this list.
    :vartype last_id: str
    :ivar has_more: A value indicating whether there are additional values available not captured
     in this list. Required.
    :vartype has_more: bool
    """

    data: list["_models.AgentContainerOperationObject"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The requested list of items. Required."""
    first_id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The first ID represented in this list."""
    last_id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The last ID represented in this list."""
    has_more: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A value indicating whether there are additional values available not captured in this list.
     Required."""

    @overload
    def __init__(
        self,
        *,
        data: list["_models.AgentContainerOperationObject"],
        has_more: bool,
        first_id: Optional[str] = None,
        last_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentsPagedResultItemResource(_Model):
    """The response data for a requested list of items.

    :ivar data: The requested list of items. Required.
    :vartype data: list[~openai.models.ItemResource]
    :ivar first_id: The first ID represented in this list.
    :vartype first_id: str
    :ivar last_id: The last ID represented in this list.
    :vartype last_id: str
    :ivar has_more: A value indicating whether there are additional values available not captured
     in this list. Required.
    :vartype has_more: bool
    """

    data: list["_openai_models5.ItemResource"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The requested list of items. Required."""
    first_id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The first ID represented in this list."""
    last_id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The last ID represented in this list."""
    has_more: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A value indicating whether there are additional values available not captured in this list.
     Required."""

    @overload
    def __init__(
        self,
        *,
        data: list["_openai_models5.ItemResource"],
        has_more: bool,
        first_id: Optional[str] = None,
        last_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentVersionObject(_Model):
    """AgentVersionObject.

    :ivar object: The object type, which is always 'agent.version'. Required. Default value is
     "agent.version".
    :vartype object: str
    :ivar id: The unique identifier of the agent version. Required.
    :vartype id: str
    :ivar name: The name of the agent. Name can be used to retrieve/update/delete the agent.
     Required.
    :vartype name: str
    :ivar version: The version identifier of the agent. Agents are immutable and every update
     creates a new version while keeping the name same. Required.
    :vartype version: str
    :ivar description: A human-readable description of the agent.
    :vartype description: str
    :ivar metadata: Arbitrary key-value metadata to associate with the agent.
    :vartype metadata: dict[str, str]
    :ivar created_at: The Unix timestamp (seconds) when the agent was created. Required.
    :vartype created_at: ~datetime.datetime
    :ivar definition: Required.
    :vartype definition: ~azure.ai.agents.models.AgentDefinition
    """

    object: Literal["agent.version"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The object type, which is always 'agent.version'. Required. Default value is \"agent.version\"."""
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique identifier of the agent version. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the agent. Name can be used to retrieve/update/delete the agent. Required."""
    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version identifier of the agent. Agents are immutable and every update creates a new
     version while keeping the name same. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A human-readable description of the agent."""
    metadata: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Arbitrary key-value metadata to associate with the agent."""
    created_at: datetime.datetime = rest_field(
        visibility=["read", "create", "update", "delete", "query"], format="unix-timestamp"
    )
    """The Unix timestamp (seconds) when the agent was created. Required."""
    definition: "_models.AgentDefinition" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        version: str,
        created_at: datetime.datetime,
        definition: "_models.AgentDefinition",
        description: Optional[str] = None,
        metadata: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.object: Literal["agent.version"] = "agent.version"


class ApiError(_Model):
    """ApiError.

    :ivar code: Required.
    :vartype code: str
    :ivar message: Required.
    :vartype message: str
    :ivar details:
    :vartype details: str
    :ivar errors:
    :vartype errors: dict[str, list[str]]
    """

    code: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    message: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    details: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    errors: Optional[dict[str, list[str]]] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        details: Optional[str] = None,
        errors: Optional[dict[str, list[str]]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureAISearchAgentTool(Tool, discriminator="azure_ai_search"):
    """The input definition information for an Azure AI search tool as used to configure an agent.

    :ivar type: The object type, which is always 'azure_ai_search'. Required.
    :vartype type: str or ~openai.models.AZURE_AI_SEARCH
    """

    type: Literal[ToolType.AZURE_AI_SEARCH] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'azure_ai_search'. Required."""

    @overload
    def __init__(
        self,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.AZURE_AI_SEARCH  # type: ignore


class BingCustomSearchAgentTool(Tool, discriminator="bing_custom_search"):
    """The input definition information for a Bing custom search tool as used to configure an agent.

    :ivar type: The object type, which is always 'bing_custom_search'. Required.
    :vartype type: str or ~openai.models.BING_CUSTOM_SEARCH
    :ivar bing_custom_search: The bing custom search tool parameters. Required.
    :vartype bing_custom_search: ~azure.ai.agents.models.BingCustomSearchToolParameters
    """

    type: Literal[ToolType.BING_CUSTOM_SEARCH] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'bing_custom_search'. Required."""
    bing_custom_search: "_models.BingCustomSearchToolParameters" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The bing custom search tool parameters. Required."""

    @overload
    def __init__(
        self,
        *,
        bing_custom_search: "_models.BingCustomSearchToolParameters",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.BING_CUSTOM_SEARCH  # type: ignore


class BingCustomSearchConfiguration(_Model):
    """A bing custom search configuration.

    :ivar project_connection_id: Project connection id for grounding with bing search. Required.
    :vartype project_connection_id: str
    :ivar instance_name: Name of the custom configuration instance given to config. Required.
    :vartype instance_name: str
    :ivar market: The market where the results come from.
    :vartype market: str
    :ivar set_lang: The language to use for user interface strings when calling Bing API.
    :vartype set_lang: str
    :ivar count: The number of search results to return in the bing api response.
    :vartype count: int
    :ivar freshness: Filter search results by a specific time range. Accepted values:
     `https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters
     <https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters>`_.
    :vartype freshness: str
    """

    project_connection_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Project connection id for grounding with bing search. Required."""
    instance_name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the custom configuration instance given to config. Required."""
    market: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The market where the results come from."""
    set_lang: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The language to use for user interface strings when calling Bing API."""
    count: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The number of search results to return in the bing api response."""
    freshness: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Filter search results by a specific time range. Accepted values:
     `https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters
     <https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters>`_."""

    @overload
    def __init__(
        self,
        *,
        project_connection_id: str,
        instance_name: str,
        market: Optional[str] = None,
        set_lang: Optional[str] = None,
        count: Optional[int] = None,
        freshness: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BingCustomSearchToolParameters(_Model):
    """The bing custom search tool parameters.

    :ivar search_configurations: The project connections attached to this tool. There can be a
     maximum of 1 connection
     resource attached to the tool. Required.
    :vartype search_configurations: list[~azure.ai.agents.models.BingCustomSearchConfiguration]
    """

    search_configurations: list["_models.BingCustomSearchConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The project connections attached to this tool. There can be a maximum of 1 connection
     resource attached to the tool. Required."""

    @overload
    def __init__(
        self,
        *,
        search_configurations: list["_models.BingCustomSearchConfiguration"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BingGroundingAgentTool(Tool, discriminator="bing_grounding"):
    """The input definition information for a bing grounding search tool as used to configure an
    agent.

    :ivar type: The object type, which is always 'bing_grounding'. Required.
    :vartype type: str or ~openai.models.BING_GROUNDING
    :ivar bing_grounding: The bing grounding search tool parameters. Required.
    :vartype bing_grounding: ~azure.ai.agents.models.BingGroundingSearchToolParameters
    """

    type: Literal[ToolType.BING_GROUNDING] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'bing_grounding'. Required."""
    bing_grounding: "_models.BingGroundingSearchToolParameters" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The bing grounding search tool parameters. Required."""

    @overload
    def __init__(
        self,
        *,
        bing_grounding: "_models.BingGroundingSearchToolParameters",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.BING_GROUNDING  # type: ignore


class BingGroundingSearchConfiguration(_Model):
    """Search configuration for Bing Grounding.

    :ivar project_connection_id: Project connection id for grounding with bing search. Required.
    :vartype project_connection_id: str
    :ivar market: The market where the results come from.
    :vartype market: str
    :ivar set_lang: The language to use for user interface strings when calling Bing API.
    :vartype set_lang: str
    :ivar count: The number of search results to return in the bing api response.
    :vartype count: int
    :ivar freshness: Filter search results by a specific time range. Accepted values:
     `https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters
     <https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters>`_.
    :vartype freshness: str
    """

    project_connection_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Project connection id for grounding with bing search. Required."""
    market: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The market where the results come from."""
    set_lang: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The language to use for user interface strings when calling Bing API."""
    count: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The number of search results to return in the bing api response."""
    freshness: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Filter search results by a specific time range. Accepted values:
     `https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters
     <https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters>`_."""

    @overload
    def __init__(
        self,
        *,
        project_connection_id: str,
        market: Optional[str] = None,
        set_lang: Optional[str] = None,
        count: Optional[int] = None,
        freshness: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BingGroundingSearchToolParameters(_Model):
    """The bing grounding search tool parameters.

    :ivar project_connections: The project connections attached to this tool. There can be a
     maximum of 1 connection
     resource attached to the tool. Required.
    :vartype project_connections: ~azure.ai.agents.models.ToolProjectConnectionList
    :ivar search_configurations: The search configurations attached to this tool. There can be a
     maximum of 1
     search configuration resource attached to the tool. Required.
    :vartype search_configurations: list[~azure.ai.agents.models.BingGroundingSearchConfiguration]
    """

    project_connections: "_models.ToolProjectConnectionList" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The project connections attached to this tool. There can be a maximum of 1 connection
     resource attached to the tool. Required."""
    search_configurations: list["_models.BingGroundingSearchConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The search configurations attached to this tool. There can be a maximum of 1
     search configuration resource attached to the tool. Required."""

    @overload
    def __init__(
        self,
        *,
        project_connections: "_models.ToolProjectConnectionList",
        search_configurations: list["_models.BingGroundingSearchConfiguration"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrowserAutomationAgentTool(Tool, discriminator="browser_automation"):
    """The input definition information for a Browser Automation Tool, as used to configure an Agent.

    :ivar type: The object type, which is always 'browser_automation'. Required.
    :vartype type: str or ~openai.models.BROWSER_AUTOMATION
    :ivar browser_automation: The Browser Automation Tool parameters. Required.
    :vartype browser_automation: ~azure.ai.agents.models.BrowserAutomationToolParameters
    """

    type: Literal[ToolType.BROWSER_AUTOMATION] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'browser_automation'. Required."""
    browser_automation: "_models.BrowserAutomationToolParameters" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The Browser Automation Tool parameters. Required."""

    @overload
    def __init__(
        self,
        *,
        browser_automation: "_models.BrowserAutomationToolParameters",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.BROWSER_AUTOMATION  # type: ignore


class BrowserAutomationToolConnectionParameters(_Model):  # pylint: disable=name-too-long
    """Definition of input parameters for the connection used by the Browser Automation Tool.

    :ivar id: The ID of the project connection to your Azure Playwright resource. Required.
    :vartype id: str
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The ID of the project connection to your Azure Playwright resource. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BrowserAutomationToolParameters(_Model):
    """Definition of input parameters for the Browser Automation Tool.

    :ivar project_connection: The project connection parameters associated with the Browser
     Automation Tool. Required.
    :vartype project_connection: ~azure.ai.agents.models.BrowserAutomationToolConnectionParameters
    """

    project_connection: "_models.BrowserAutomationToolConnectionParameters" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The project connection parameters associated with the Browser Automation Tool. Required."""

    @overload
    def __init__(
        self,
        *,
        project_connection: "_models.BrowserAutomationToolConnectionParameters",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CaptureSemanticEventsTool(Tool, discriminator="capture_semantic_events"):
    """CaptureSemanticEventsTool.

    :ivar type: The type of the tool. Always ``capture_semantic_events``. Required.
    :vartype type: str or ~openai.models.CAPTURE_SEMANTIC_EVENTS
    :ivar events: The set of structured events to capture from the model. Required.
    :vartype events: dict[str, ~azure.ai.agents.models.SemanticEventDefinition]
    """

    type: Literal[ToolType.CAPTURE_SEMANTIC_EVENTS] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The type of the tool. Always ``capture_semantic_events``. Required."""
    events: dict[str, "_models.SemanticEventDefinition"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The set of structured events to capture from the model. Required."""

    @overload
    def __init__(
        self,
        *,
        events: dict[str, "_models.SemanticEventDefinition"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.CAPTURE_SEMANTIC_EVENTS  # type: ignore


class CaptureStructuredOutputsTool(Tool, discriminator="capture_structured_outputs"):
    """A tool for capturing structured outputs.

    :ivar type: The type of the tool. Always ``capture_structured_outputs``. Required.
    :vartype type: str or ~openai.models.CAPTURE_STRUCTURED_OUTPUTS
    :ivar outputs: Set of structured outputs to capture from the model. Required.
    :vartype outputs: dict[str, ~azure.ai.agents.models.StructuredOutputDefinition]
    """

    type: Literal[ToolType.CAPTURE_STRUCTURED_OUTPUTS] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The type of the tool. Always ``capture_structured_outputs``. Required."""
    outputs: dict[str, "_models.StructuredOutputDefinition"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Set of structured outputs to capture from the model. Required."""

    @overload
    def __init__(
        self,
        *,
        outputs: dict[str, "_models.StructuredOutputDefinition"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.CAPTURE_STRUCTURED_OUTPUTS  # type: ignore


class ConnectedAgentAgentTool(Tool, discriminator="connected_agent"):
    """The input definition information for a connected agent tool which defines a domain specific
    sub-agent.

    :ivar type: The object type, which is always 'connected_agent'. Required.
    :vartype type: str or ~openai.models.CONNECTED_AGENT
    :ivar connected_agent: The sub-agent to connect. Required.
    :vartype connected_agent: ~azure.ai.agents.models.ConnectedAgentDetails
    """

    type: Literal[ToolType.CONNECTED_AGENT] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'connected_agent'. Required."""
    connected_agent: "_models.ConnectedAgentDetails" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The sub-agent to connect. Required."""

    @overload
    def __init__(
        self,
        *,
        connected_agent: "_models.ConnectedAgentDetails",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.CONNECTED_AGENT  # type: ignore


class ConnectedAgentDetails(_Model):
    """Information for connecting one agent to another as a tool.

    :ivar id: The identifier of the child agent. Required.
    :vartype id: str
    :ivar name: The name of the agent to be called. Required.
    :vartype name: str
    :ivar description: A description of what the agent does, used by the model to choose when and
     how to call the agent. Required.
    :vartype description: str
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The identifier of the child agent. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the agent to be called. Required."""
    description: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of what the agent does, used by the model to choose when and how to call the
     agent. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        description: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContainerAppAgentDefinition(AgentDefinition, discriminator="container_app"):
    """The container app agent definition.

    :ivar kind: Required.
    :vartype kind: str or ~azure.ai.agents.models.CONTAINER_APP
    :ivar container_protocol_versions: The protocols that the agent supports for ingress
     communication of the containers. Required.
    :vartype container_protocol_versions: list[~azure.ai.agents.models.ProtocolVersionRecord]
    :ivar container_app_resource_id: The resource ID of the Azure Container App that hosts this
     agent. Not mutable across versions. Required.
    :vartype container_app_resource_id: str
    :ivar ingress_subdomain_suffix: The suffix to apply to the app subdomain when sending ingress
     to the agent. This can be a label (e.g., '---current'), a specific revision (e.g.,
     '--0000001'), or empty to use the default endpoint for the container app. Required.
    :vartype ingress_subdomain_suffix: str
    """

    kind: Literal[AgentKind.CONTAINER_APP] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    container_protocol_versions: list["_models.ProtocolVersionRecord"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The protocols that the agent supports for ingress communication of the containers. Required."""
    container_app_resource_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The resource ID of the Azure Container App that hosts this agent. Not mutable across versions.
     Required."""
    ingress_subdomain_suffix: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The suffix to apply to the app subdomain when sending ingress to the agent. This can be a label
     (e.g., '---current'), a specific revision (e.g., '--0000001'), or empty to use the default
     endpoint for the container app. Required."""

    @overload
    def __init__(
        self,
        *,
        container_protocol_versions: list["_models.ProtocolVersionRecord"],
        container_app_resource_id: str,
        ingress_subdomain_suffix: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind = AgentKind.CONTAINER_APP  # type: ignore


class CreateAgentVersionRequest(_Model):
    """CreateAgentVersionRequest.

    :ivar description: A human-readable description of the agent.
    :vartype description: str
    :ivar metadata: Arbitrary key-value metadata to associate with the agent.
    :vartype metadata: dict[str, str]
    :ivar definition: The agent definition. This can be a workflow, hosted agent, or a simple agent
     definition. Required.
    :vartype definition: ~azure.ai.agents.models.AgentDefinition
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A human-readable description of the agent."""
    metadata: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Arbitrary key-value metadata to associate with the agent."""
    definition: "_models.AgentDefinition" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The agent definition. This can be a workflow, hosted agent, or a simple agent definition.
     Required."""

    @overload
    def __init__(
        self,
        *,
        definition: "_models.AgentDefinition",
        description: Optional[str] = None,
        metadata: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DeleteAgentEventHandlerResponse(_Model):
    """A deleted agent event handler Object.

    :ivar object: The object type. Always 'agent.deleted'. Required. Default value is
     "agent.event_handler.deleted".
    :vartype object: str
    :ivar name: The event handler name of the agent. Required.
    :vartype name: str
    :ivar deleted: Whether the agent event handlerwas successfully deleted. Required.
    :vartype deleted: bool
    """

    object: Literal["agent.event_handler.deleted"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The object type. Always 'agent.deleted'. Required. Default value is
     \"agent.event_handler.deleted\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The event handler name of the agent. Required."""
    deleted: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Whether the agent event handlerwas successfully deleted. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        deleted: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.object: Literal["agent.event_handler.deleted"] = "agent.event_handler.deleted"


class DeleteAgentResponse(_Model):
    """A deleted agent Object.

    :ivar object: The object type. Always 'agent.deleted'. Required. Default value is
     "agent.deleted".
    :vartype object: str
    :ivar name: The name of the agent. Required.
    :vartype name: str
    :ivar deleted: Whether the agent was successfully deleted. Required.
    :vartype deleted: bool
    """

    object: Literal["agent.deleted"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The object type. Always 'agent.deleted'. Required. Default value is \"agent.deleted\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the agent. Required."""
    deleted: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Whether the agent was successfully deleted. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        deleted: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.object: Literal["agent.deleted"] = "agent.deleted"


class DeleteAgentVersionResponse(_Model):
    """A deleted agent version Object.

    :ivar object: The object type. Always 'agent.deleted'. Required. Default value is
     "agent.version.deleted".
    :vartype object: str
    :ivar name: The name of the agent. Required.
    :vartype name: str
    :ivar version: The version identifier of the agent. Required.
    :vartype version: str
    :ivar deleted: Whether the agent was successfully deleted. Required.
    :vartype deleted: bool
    """

    object: Literal["agent.version.deleted"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The object type. Always 'agent.deleted'. Required. Default value is \"agent.version.deleted\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the agent. Required."""
    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version identifier of the agent. Required."""
    deleted: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Whether the agent was successfully deleted. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        version: str,
        deleted: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.object: Literal["agent.version.deleted"] = "agent.version.deleted"


class DeleteResponseResult(_Model):
    """The result of a delete response operation.

    :ivar id: The operation ID. Required.
    :vartype id: str
    :ivar object: Always return 'response'. Required. Default value is "response".
    :vartype object: str
    :ivar deleted: Always return true. Required. Default value is True.
    :vartype deleted: bool
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The operation ID. Required."""
    object: Literal["response"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Always return 'response'. Required. Default value is \"response\"."""
    deleted: Literal[True] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Always return true. Required. Default value is True."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.object: Literal["response"] = "response"
        self.deleted: Literal[True] = True


class EvalsDestination(AgentEventHandlerDestination, discriminator="evals"):
    """EvalsDestination.

    :ivar type: Required.
    :vartype type: str or ~azure.ai.agents.models.EVALS
    :ivar eval_id: The eval Id where new run for the agent response will be created. Required.
    :vartype eval_id: str
    :ivar max_hourly_runs: The maximum number of times the eval runs will be invoked via this
     handler per hour.
    :vartype max_hourly_runs: int
    """

    type: Literal[AgentEventHandlerDestinationType.EVALS] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    eval_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The eval Id where new run for the agent response will be created. Required."""
    max_hourly_runs: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The maximum number of times the eval runs will be invoked via this handler per hour."""

    @overload
    def __init__(
        self,
        *,
        eval_id: str,
        max_hourly_runs: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = AgentEventHandlerDestinationType.EVALS  # type: ignore


class FabricDataAgentToolParameters(_Model):
    """The fabric data agent tool parameters.

    :ivar project_connections: The project connections attached to this tool. There can be a
     maximum of 1 connection
     resource attached to the tool.
    :vartype project_connections: list[~azure.ai.agents.models.ToolProjectConnection]
    """

    project_connections: Optional[list["_models.ToolProjectConnection"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The project connections attached to this tool. There can be a maximum of 1 connection
     resource attached to the tool."""

    @overload
    def __init__(
        self,
        *,
        project_connections: Optional[list["_models.ToolProjectConnection"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HostedAgentDefinition(AgentDefinition, discriminator="hosted"):
    """The hosted agent definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ImageBasedHostedAgentDefinition

    :ivar kind: Required.
    :vartype kind: str or ~azure.ai.agents.models.HOSTED
    :ivar container_protocol_versions: The protocols that the agent supports for ingress
     communication of the containers. Required.
    :vartype container_protocol_versions: list[~azure.ai.agents.models.ProtocolVersionRecord]
    :ivar cpu: The CPU configuration for the hosted agent. Required.
    :vartype cpu: str
    :ivar memory: The memory configuration for the hosted agent. Required.
    :vartype memory: str
    :ivar environment_variables: Environment variables to set in the hosted agent container.
    :vartype environment_variables: dict[str, str]
    """

    __mapping__: dict[str, _Model] = {}
    kind: Literal[AgentKind.HOSTED] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    container_protocol_versions: list["_models.ProtocolVersionRecord"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The protocols that the agent supports for ingress communication of the containers. Required."""
    cpu: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The CPU configuration for the hosted agent. Required."""
    memory: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The memory configuration for the hosted agent. Required."""
    environment_variables: Optional[dict[str, str]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Environment variables to set in the hosted agent container."""

    @overload
    def __init__(
        self,
        *,
        container_protocol_versions: list["_models.ProtocolVersionRecord"],
        cpu: str,
        memory: str,
        environment_variables: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind = AgentKind.HOSTED  # type: ignore


class ImageBasedHostedAgentDefinition(HostedAgentDefinition, discriminator="hosted"):
    """The image-based deployment definition for a hosted agent.

    :ivar container_protocol_versions: The protocols that the agent supports for ingress
     communication of the containers. Required.
    :vartype container_protocol_versions: list[~azure.ai.agents.models.ProtocolVersionRecord]
    :ivar cpu: The CPU configuration for the hosted agent. Required.
    :vartype cpu: str
    :ivar memory: The memory configuration for the hosted agent. Required.
    :vartype memory: str
    :ivar environment_variables: Environment variables to set in the hosted agent container.
    :vartype environment_variables: dict[str, str]
    :ivar kind: Required.
    :vartype kind: str or ~azure.ai.agents.models.HOSTED
    :ivar image: The image for the hosted agent. Required.
    :vartype image: str
    """

    image: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The image for the hosted agent. Required."""

    @overload
    def __init__(
        self,
        *,
        container_protocol_versions: list["_models.ProtocolVersionRecord"],
        cpu: str,
        memory: str,
        image: str,
        environment_variables: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WorkflowActionOutputItemResource(ItemResource, discriminator="workflow_action"):
    """WorkflowActionOutputItemResource.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    InvokeAzureAgentWorkflowActionOutputItemResource

    :ivar id: Required.
    :vartype id: str
    :ivar type: Required.
    :vartype type: str or ~openai.models.WORKFLOW_ACTION
    :ivar kind: The kind of CPSDL action (e.g., 'SetVariable', 'InvokeAzureAgent'). Required.
     Default value is None.
    :vartype kind: str
    :ivar action_id: Unique identifier for the action. Required.
    :vartype action_id: str
    :ivar parent_action_id: ID of the parent action if this is a nested action.
    :vartype parent_action_id: str
    :ivar previous_action_id: ID of the previous action if this action follows another.
    :vartype previous_action_id: str
    :ivar status: Status of the action (e.g., 'in_progress', 'completed', 'failed', 'cancelled').
     Required. Is one of the following types: Literal["completed"], Literal["failed"],
     Literal["in_progress"], Literal["cancelled"]
    :vartype status: str or str or str or str
    """

    __mapping__: dict[str, _Model] = {}
    type: Literal[ItemType.WORKFLOW_ACTION] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """The kind of CPSDL action (e.g., 'SetVariable', 'InvokeAzureAgent'). Required. Default value is
     None."""
    action_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unique identifier for the action. Required."""
    parent_action_id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID of the parent action if this is a nested action."""
    previous_action_id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID of the previous action if this action follows another."""
    status: Literal["completed", "failed", "in_progress", "cancelled"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Status of the action (e.g., 'in_progress', 'completed', 'failed', 'cancelled'). Required. Is
     one of the following types: Literal[\"completed\"], Literal[\"failed\"],
     Literal[\"in_progress\"], Literal[\"cancelled\"]"""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        kind: str,
        action_id: str,
        status: Literal["completed", "failed", "in_progress", "cancelled"],
        parent_action_id: Optional[str] = None,
        previous_action_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ItemType.WORKFLOW_ACTION  # type: ignore


class InvokeAzureAgentWorkflowActionOutputItemResource(
    WorkflowActionOutputItemResource, discriminator="InvokeAzureAgent"
):  # pylint: disable=name-too-long
    """Details about an agent invocation as part of a workflow action.

    :ivar id: Required.
    :vartype id: str
    :ivar type: Required.
    :vartype type: str or ~openai.models.WORKFLOW_ACTION
    :ivar action_id: Unique identifier for the action. Required.
    :vartype action_id: str
    :ivar parent_action_id: ID of the parent action if this is a nested action.
    :vartype parent_action_id: str
    :ivar previous_action_id: ID of the previous action if this action follows another.
    :vartype previous_action_id: str
    :ivar status: Status of the action (e.g., 'in_progress', 'completed', 'failed', 'cancelled').
     Required. Is one of the following types: Literal["completed"], Literal["failed"],
     Literal["in_progress"], Literal["cancelled"]
    :vartype status: str or str or str or str
    :ivar kind: Required. Default value is "InvokeAzureAgent".
    :vartype kind: str
    :ivar agent: Agent id. Required.
    :vartype agent: ~azure.ai.agents.models.AgentId
    :ivar conversation_id: ID of the conversation for the agent invocation.
    :vartype conversation_id: str
    :ivar response_id: The response id for the agent invocation. Required.
    :vartype response_id: str
    """

    __mapping__: dict[str, _Model] = {}
    kind: Literal["InvokeAzureAgent"] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"InvokeAzureAgent\"."""
    agent: "_models.AgentId" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Agent id. Required."""
    conversation_id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID of the conversation for the agent invocation."""
    response_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The response id for the agent invocation. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        action_id: str,
        status: Literal["completed", "failed", "in_progress", "cancelled"],
        agent: "_models.AgentId",
        response_id: str,
        parent_action_id: Optional[str] = None,
        previous_action_id: Optional[str] = None,
        conversation_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind = "InvokeAzureAgent"  # type: ignore


class MicrosoftFabricAgentTool(Tool, discriminator="fabric_dataagent"):
    """The input definition information for a Microsoft Fabric tool as used to configure an agent.

    :ivar type: The object type, which is always 'fabric_dataagent'. Required.
    :vartype type: str or ~openai.models.FABRIC_DATAAGENT
    :ivar fabric_dataagent: The fabric data agent tool parameters. Required.
    :vartype fabric_dataagent: ~azure.ai.agents.models.FabricDataAgentToolParameters
    """

    type: Literal[ToolType.FABRIC_DATAAGENT] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'fabric_dataagent'. Required."""
    fabric_dataagent: "_models.FabricDataAgentToolParameters" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The fabric data agent tool parameters. Required."""

    @overload
    def __init__(
        self,
        *,
        fabric_dataagent: "_models.FabricDataAgentToolParameters",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.FABRIC_DATAAGENT  # type: ignore


class OpenApiAgentTool(Tool, discriminator="openapi"):
    """The input definition information for an OpenAPI tool as used to configure an agent.

    :ivar type: The object type, which is always 'openapi'. Required.
    :vartype type: str or ~openai.models.OPENAPI
    :ivar openapi: The openapi function definition. Required.
    :vartype openapi: ~azure.ai.agents.models.OpenApiFunctionDefinition
    """

    type: Literal[ToolType.OPENAPI] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'openapi'. Required."""
    openapi: "_models.OpenApiFunctionDefinition" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The openapi function definition. Required."""

    @overload
    def __init__(
        self,
        *,
        openapi: "_models.OpenApiFunctionDefinition",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.OPENAPI  # type: ignore


class OpenApiAuthDetails(_Model):
    """authentication details for OpenApiFunctionDefinition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    OpenApiAnonymousAuthDetails, OpenApiManagedAuthDetails, OpenApiProjectConnectionAuthDetails

    :ivar type: The type of authentication, must be anonymous/project_connection/managed_identity.
     Required. Known values are: "anonymous", "project_connection", and "managed_identity".
    :vartype type: str or ~azure.ai.agents.models.OpenApiAuthType
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """The type of authentication, must be anonymous/project_connection/managed_identity. Required.
     Known values are: \"anonymous\", \"project_connection\", and \"managed_identity\"."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OpenApiAnonymousAuthDetails(OpenApiAuthDetails, discriminator="anonymous"):
    """Security details for OpenApi anonymous authentication.

    :ivar type: The object type, which is always 'anonymous'. Required.
    :vartype type: str or ~azure.ai.agents.models.ANONYMOUS
    """

    type: Literal[OpenApiAuthType.ANONYMOUS] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'anonymous'. Required."""

    @overload
    def __init__(
        self,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = OpenApiAuthType.ANONYMOUS  # type: ignore


class OpenApiFunctionDefinition(_Model):
    """The input definition information for an openapi function.

    :ivar name: The name of the function to be called. Required.
    :vartype name: str
    :ivar description: A description of what the function does, used by the model to choose when
     and how to call the function.
    :vartype description: str
    :ivar spec: The openapi function shape, described as a JSON Schema object. Required.
    :vartype spec: any
    :ivar auth: Open API authentication details. Required.
    :vartype auth: ~azure.ai.agents.models.OpenApiAuthDetails
    :ivar default_params: List of OpenAPI spec parameters that will use user-provided defaults.
    :vartype default_params: list[str]
    :ivar functions: List of function definitions used by OpenApi tool.
    :vartype functions: list[~azure.ai.agents.models.OpenApiFunctionDefinitionFunction]
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the function to be called. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of what the function does, used by the model to choose when and how to call the
     function."""
    spec: Any = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The openapi function shape, described as a JSON Schema object. Required."""
    auth: "_models.OpenApiAuthDetails" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Open API authentication details. Required."""
    default_params: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of OpenAPI spec parameters that will use user-provided defaults."""
    functions: Optional[list["_models.OpenApiFunctionDefinitionFunction"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of function definitions used by OpenApi tool."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        spec: Any,
        auth: "_models.OpenApiAuthDetails",
        description: Optional[str] = None,
        default_params: Optional[list[str]] = None,
        functions: Optional[list["_models.OpenApiFunctionDefinitionFunction"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OpenApiFunctionDefinitionFunction(_Model):
    """OpenApiFunctionDefinitionFunction.

    :ivar name: The name of the function to be called. Required.
    :vartype name: str
    :ivar description: A description of what the function does, used by the model to choose when
     and how to call the function.
    :vartype description: str
    :ivar parameters: The parameters the functions accepts, described as a JSON Schema object.
     Required.
    :vartype parameters: any
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the function to be called. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of what the function does, used by the model to choose when and how to call the
     function."""
    parameters: Any = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The parameters the functions accepts, described as a JSON Schema object. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        parameters: Any,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OpenApiManagedAuthDetails(OpenApiAuthDetails, discriminator="managed_identity"):
    """Security details for OpenApi managed_identity authentication.

    :ivar type: The object type, which is always 'managed_identity'. Required.
    :vartype type: str or ~azure.ai.agents.models.MANAGED_IDENTITY
    :ivar security_scheme: Connection auth security details. Required.
    :vartype security_scheme: ~azure.ai.agents.models.OpenApiManagedSecurityScheme
    """

    type: Literal[OpenApiAuthType.MANAGED_IDENTITY] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'managed_identity'. Required."""
    security_scheme: "_models.OpenApiManagedSecurityScheme" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Connection auth security details. Required."""

    @overload
    def __init__(
        self,
        *,
        security_scheme: "_models.OpenApiManagedSecurityScheme",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = OpenApiAuthType.MANAGED_IDENTITY  # type: ignore


class OpenApiManagedSecurityScheme(_Model):
    """Security scheme for OpenApi managed_identity authentication.

    :ivar audience: Authentication scope for managed_identity auth type. Required.
    :vartype audience: str
    """

    audience: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Authentication scope for managed_identity auth type. Required."""

    @overload
    def __init__(
        self,
        *,
        audience: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OpenApiProjectConnectionAuthDetails(OpenApiAuthDetails, discriminator="project_connection"):
    """Security details for OpenApi project connection authentication.

    :ivar type: The object type, which is always 'project_connection'. Required.
    :vartype type: str or ~azure.ai.agents.models.PROJECT_CONNECTION
    :ivar security_scheme: Project connection auth security details. Required.
    :vartype security_scheme: ~azure.ai.agents.models.OpenApiProjectConnectionSecurityScheme
    """

    type: Literal[OpenApiAuthType.PROJECT_CONNECTION] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'project_connection'. Required."""
    security_scheme: "_models.OpenApiProjectConnectionSecurityScheme" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Project connection auth security details. Required."""

    @overload
    def __init__(
        self,
        *,
        security_scheme: "_models.OpenApiProjectConnectionSecurityScheme",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = OpenApiAuthType.PROJECT_CONNECTION  # type: ignore


class OpenApiProjectConnectionSecurityScheme(_Model):
    """Security scheme for OpenApi managed_identity authentication.

    :ivar project_connection_id: Project connection id for Project Connection auth type. Required.
    :vartype project_connection_id: str
    """

    project_connection_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Project connection id for Project Connection auth type. Required."""

    @overload
    def __init__(
        self,
        *,
        project_connection_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PromptAgentDefinition(AgentDefinition, discriminator="prompt"):
    """The prompt agent definition.

    :ivar kind: Required.
    :vartype kind: str or ~azure.ai.agents.models.PROMPT
    :ivar model: The model deployment to use for this agent. Required.
    :vartype model: str
    :ivar instructions: A system (or developer) message inserted into the model's context.
    :vartype instructions: str
    :ivar temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8
     will make the output more random, while lower values like 0.2 will make it more focused and
     deterministic.
     We generally recommend altering this or ``top_p`` but not both.
    :vartype temperature: float
    :ivar top_p: An alternative to sampling with temperature, called nucleus sampling,
     where the model considers the results of the tokens with top_p probability
     mass. So 0.1 means only the tokens comprising the top 10% probability mass
     are considered.

     We generally recommend altering this or ``temperature`` but not both.
    :vartype top_p: float
    :ivar reasoning:
    :vartype reasoning: ~openai.models.Reasoning
    :ivar tools: An array of tools the model may call while generating a response. You
     can specify which tool to use by setting the ``tool_choice`` parameter.
    :vartype tools: list[~openai.models.Tool]
    :ivar text: Configuration options for a text response from the model. Can be plain text or
     structured JSON data.
    :vartype text: ~azure.ai.agents.models.PromptAgentDefinitionText
    :ivar structured_inputs: Set of structured inputs that can participate in prompt template
     substitution or tool argument bindings.
    :vartype structured_inputs: dict[str, ~azure.ai.agents.models.StructuredInputDefinition]
    """

    kind: Literal[AgentKind.PROMPT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    model: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The model deployment to use for this agent. Required."""
    instructions: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A system (or developer) message inserted into the model's context."""
    temperature: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
     more random, while lower values like 0.2 will make it more focused and deterministic.
     We generally recommend altering this or ``top_p`` but not both."""
    top_p: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An alternative to sampling with temperature, called nucleus sampling,
     where the model considers the results of the tokens with top_p probability
     mass. So 0.1 means only the tokens comprising the top 10% probability mass
     are considered.
     
     We generally recommend altering this or ``temperature`` but not both."""
    reasoning: Optional["_openai_models5.Reasoning"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    tools: Optional[list["_openai_models5.Tool"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """An array of tools the model may call while generating a response. You
     can specify which tool to use by setting the ``tool_choice`` parameter."""
    text: Optional["_models.PromptAgentDefinitionText"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Configuration options for a text response from the model. Can be plain text or structured JSON
     data."""
    structured_inputs: Optional[dict[str, "_models.StructuredInputDefinition"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Set of structured inputs that can participate in prompt template substitution or tool argument
     bindings."""

    @overload
    def __init__(
        self,
        *,
        model: str,
        instructions: Optional[str] = None,
        temperature: Optional[float] = None,
        top_p: Optional[float] = None,
        reasoning: Optional["_openai_models5.Reasoning"] = None,
        tools: Optional[list["_openai_models5.Tool"]] = None,
        text: Optional["_models.PromptAgentDefinitionText"] = None,
        structured_inputs: Optional[dict[str, "_models.StructuredInputDefinition"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind = AgentKind.PROMPT  # type: ignore


class PromptAgentDefinitionText(_Model):
    """PromptAgentDefinitionText.

    :ivar format:
    :vartype format: ~openai.models.ResponseTextFormatConfiguration
    """

    format: Optional["_openai_models5.ResponseTextFormatConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        format: Optional["_openai_models5.ResponseTextFormatConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProtocolVersionRecord(_Model):
    """A record mapping for a single protocol and its version.

    :ivar protocol: The protocol type. Required. Known values are: "activity_protocol" and
     "responses".
    :vartype protocol: str or ~azure.ai.agents.models.AgentProtocol
    :ivar version: The version string for the protocol, e.g. 'v0.1.1'. Required.
    :vartype version: str
    """

    protocol: Union[str, "_models.AgentProtocol"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The protocol type. Required. Known values are: \"activity_protocol\" and \"responses\"."""
    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version string for the protocol, e.g. 'v0.1.1'. Required."""

    @overload
    def __init__(
        self,
        *,
        protocol: Union[str, "_models.AgentProtocol"],
        version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SemanticEventDefinition(_Model):
    """An event that can be raised by the agent based on a semantic condition.

    :ivar condition: A condition that specifies when the event must be raised. Used by the model to
     determine when to raise the event. Required.
    :vartype condition: str
    """

    condition: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A condition that specifies when the event must be raised. Used by the model to determine when
     to raise the event. Required."""

    @overload
    def __init__(
        self,
        *,
        condition: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SemanticEventsOutputItemResource(ItemResource, discriminator="semantic_event"):
    """SemanticEventsOutputItemResource.

    :ivar id: Required.
    :vartype id: str
    :ivar type: Required.
    :vartype type: str or ~openai.models.SEMANTIC_EVENT
    :ivar name: The name of the semantic event. Required.
    :vartype name: str
    """

    type: Literal[ItemType.SEMANTIC_EVENT] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the semantic event. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ItemType.SEMANTIC_EVENT  # type: ignore


class SharepointAgentTool(Tool, discriminator="sharepoint_grounding"):
    """The input definition information for a sharepoint tool as used to configure an agent.

    :ivar type: The object type, which is always 'sharepoint_grounding'. Required.
    :vartype type: str or ~openai.models.SHAREPOINT_GROUNDING
    :ivar sharepoint_grounding: The sharepoint grounding tool parameters. Required.
    :vartype sharepoint_grounding: ~azure.ai.agents.models.SharepointGroundingToolParameters
    """

    type: Literal[ToolType.SHAREPOINT_GROUNDING] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The object type, which is always 'sharepoint_grounding'. Required."""
    sharepoint_grounding: "_models.SharepointGroundingToolParameters" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The sharepoint grounding tool parameters. Required."""

    @overload
    def __init__(
        self,
        *,
        sharepoint_grounding: "_models.SharepointGroundingToolParameters",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ToolType.SHAREPOINT_GROUNDING  # type: ignore


class SharepointGroundingToolParameters(_Model):
    """The sharepoint grounding tool parameters.

    :ivar project_connections: The project connections attached to this tool. There can be a
     maximum of 1 connection
     resource attached to the tool.
    :vartype project_connections: list[~azure.ai.agents.models.ToolProjectConnection]
    """

    project_connections: Optional[list["_models.ToolProjectConnection"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The project connections attached to this tool. There can be a maximum of 1 connection
     resource attached to the tool."""

    @overload
    def __init__(
        self,
        *,
        project_connections: Optional[list["_models.ToolProjectConnection"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StructuredInputDefinition(_Model):
    """An structured input that can participate in prompt template substitutions and tool argument
    binding.

    :ivar description: A human-readable description of the input.
    :vartype description: str
    :ivar default_value: The default value for the input if no run-time value is provided.
    :vartype default_value: any
    :ivar tool_argument_bindings: When provided, the input value is binded to the specified tool
     arguments.
    :vartype tool_argument_bindings: list[~azure.ai.agents.models.ToolArgumentBinding]
    :ivar schema: The JSON schema for the structured input (optional).
    :vartype schema: any
    :ivar required: Whether the input property is required when the agent is invoked.
    :vartype required: bool
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A human-readable description of the input."""
    default_value: Optional[Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The default value for the input if no run-time value is provided."""
    tool_argument_bindings: Optional[list["_models.ToolArgumentBinding"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """When provided, the input value is binded to the specified tool arguments."""
    schema: Optional[Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The JSON schema for the structured input (optional)."""
    required: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Whether the input property is required when the agent is invoked."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        default_value: Optional[Any] = None,
        tool_argument_bindings: Optional[list["_models.ToolArgumentBinding"]] = None,
        schema: Optional[Any] = None,
        required: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StructuredInputsItemParam(ItemParam, discriminator="structured_inputs"):
    """StructuredInputsItemParam.

    :ivar type: Required.
    :vartype type: str or ~openai.models.STRUCTURED_INPUTS
    :ivar inputs: The structured inputs to the response.
    :vartype inputs: dict[str, any]
    """

    type: Literal[ItemType.STRUCTURED_INPUTS] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    inputs: Optional[dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The structured inputs to the response."""

    @overload
    def __init__(
        self,
        *,
        inputs: Optional[dict[str, Any]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ItemType.STRUCTURED_INPUTS  # type: ignore


class StructuredInputsItemResource(ItemResource, discriminator="structured_inputs"):
    """StructuredInputsItemResource.

    :ivar id: Required.
    :vartype id: str
    :ivar type: Required.
    :vartype type: str or ~openai.models.STRUCTURED_INPUTS
    :ivar inputs: The structured inputs provided to the response.
    :vartype inputs: dict[str, any]
    """

    type: Literal[ItemType.STRUCTURED_INPUTS] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    inputs: Optional[dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The structured inputs provided to the response."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        inputs: Optional[dict[str, Any]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ItemType.STRUCTURED_INPUTS  # type: ignore


class StructuredOutputDefinition(_Model):
    """A structured output that can be produced by the agent.

    :ivar description: A description of the output to emit. Used by the model to determine when to
     emit the output.
    :vartype description: str
    :ivar schema: The JSON schema for the structured output. Required.
    :vartype schema: dict[str, any]
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of the output to emit. Used by the model to determine when to emit the output."""
    schema: dict[str, Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The JSON schema for the structured output. Required."""

    @overload
    def __init__(
        self,
        *,
        schema: dict[str, Any],
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StructuredOutputsItemResource(ItemResource, discriminator="structured_outputs"):
    """StructuredOutputsItemResource.

    :ivar id: Required.
    :vartype id: str
    :ivar type: Required.
    :vartype type: str or ~openai.models.STRUCTURED_OUTPUTS
    :ivar outputs: The structured outputs captured during the response.
    :vartype outputs: dict[str, any]
    """

    type: Literal[ItemType.STRUCTURED_OUTPUTS] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    outputs: Optional[dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The structured outputs captured during the response."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        outputs: Optional[dict[str, Any]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type = ItemType.STRUCTURED_OUTPUTS  # type: ignore


class ToolArgumentBinding(_Model):
    """ToolArgumentBinding.

    :ivar tool_name: The name of the tool to participate in the argument binding. If not provided,
     then all tools with matching arguments will participate in binding.
    :vartype tool_name: str
    :ivar argument_name: The name of the argument within the tool. Required.
    :vartype argument_name: str
    """

    tool_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the tool to participate in the argument binding. If not provided, then all tools
     with matching arguments will participate in binding."""
    argument_name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the argument within the tool. Required."""

    @overload
    def __init__(
        self,
        *,
        argument_name: str,
        tool_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ToolProjectConnection(_Model):
    """A project connection resource.

    :ivar project_connection_id: A project connection in a ToolProjectConnectionList attached to
     this tool. Required.
    :vartype project_connection_id: str
    """

    project_connection_id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A project connection in a ToolProjectConnectionList attached to this tool. Required."""

    @overload
    def __init__(
        self,
        *,
        project_connection_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ToolProjectConnectionList(_Model):
    """A set of project connection resources currently used by either the ``bing_grounding``,
    ``fabric_dataagent``, or ``sharepoint_grounding`` tools.

    :ivar project_connections: The project connections attached to this tool. There can be a
     maximum of 1 connection
     resource attached to the tool.
    :vartype project_connections: list[~azure.ai.agents.models.ToolProjectConnection]
    """

    project_connections: Optional[list["_models.ToolProjectConnection"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The project connections attached to this tool. There can be a maximum of 1 connection
     resource attached to the tool."""

    @overload
    def __init__(
        self,
        *,
        project_connections: Optional[list["_models.ToolProjectConnection"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WorkflowDefinition(AgentDefinition, discriminator="workflow"):
    """The workflow specification in CPSDL format.

    :ivar kind: Required.
    :vartype kind: str or ~azure.ai.agents.models.WORKFLOW
    :ivar begin_workflow: Required.
    :vartype begin_workflow: dict[str, any]
    """

    kind: Literal[AgentKind.WORKFLOW] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required."""
    begin_workflow: dict[str, Any] = rest_field(
        name="beginWorkflow", visibility=["read", "create", "update", "delete", "query"]
    )
    """Required."""

    @overload
    def __init__(
        self,
        *,
        begin_workflow: dict[str, Any],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind = AgentKind.WORKFLOW  # type: ignore

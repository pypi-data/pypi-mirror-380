Output:
NodeGraph:
  Edges:
     graph:f1 -> [graph:f2, graph:f3, graph:f4]
     graph:f2 -> [graph:f4]
     graph:f3 -> [graph:f4]
     graph:f4 -> []
  Nodes:
     Node(name=graph:f1, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH1>), StringBuffer(_buffer=<_io.StringIO object at HASH2>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)])
     Node(name=graph:f2, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH2>), StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH4>)])
     Node(name=graph:f3, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH5>)])
     Node(name=graph:f4, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>), StringBuffer(_buffer=<_io.StringIO object at HASH4>), StringBuffer(_buffer=<_io.StringIO object at HASH5>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH6>)])
Hello + world! / world! - Hello + world! + Hello + world! * 2
NodeGraph:
  Edges:
     graph:f1 -> [graph:f2, graph:f3, graph:f4]
     graph:f2 -> [graph:f4]
     graph:f3 -> [graph:f4]
     graph:f4 -> []
  Nodes:
     Node(name=graph:f1, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH1>), StringBuffer(_buffer=<_io.StringIO object at HASH2>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)])
     Node(name=graph:f2, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH2>), StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH4>)])
     Node(name=graph:f3, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH5>)])
     Node(name=graph:f4, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>), StringBuffer(_buffer=<_io.StringIO object at HASH4>), StringBuffer(_buffer=<_io.StringIO object at HASH5>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH6>)])
Hello + world! / world! - Hello + world! + Hello + world! * 2
NodeGraph:
  Edges:
     graph:f1 -> [graph:f2, graph:f3, graph:f4]
     graph:f2 -> [graph:f4]
     graph:f3 -> [graph:f4]
     graph:f4 -> []
  Nodes:
     Node(name=graph:f1, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH1>), StringBuffer(_buffer=<_io.StringIO object at HASH2>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)])
     Node(name=graph:f2, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH2>), StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH4>)])
     Node(name=graph:f3, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH5>)])
     Node(name=graph:f4, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>), StringBuffer(_buffer=<_io.StringIO object at HASH4>), StringBuffer(_buffer=<_io.StringIO object at HASH5>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH6>)])
Hello + world! / world! - Hello + world! + Hello + world! * 2

Logging:
INFO	ordeq.framework.io	Loading StringBuffer(_buffer=<_io.StringIO object at HASH1>)
INFO	ordeq.framework.io	Loading StringBuffer(_buffer=<_io.StringIO object at HASH2>)
INFO	ordeq.framework.runner	Running node Node(name=graph:f1, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH1>), StringBuffer(_buffer=<_io.StringIO object at HASH2>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)])
INFO	ordeq.framework.io	Saving StringBuffer(_buffer=<_io.StringIO object at HASH3>)
INFO	ordeq.framework.runner	Running node Node(name=graph:f3, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH5>)])
INFO	ordeq.framework.io	Saving StringBuffer(_buffer=<_io.StringIO object at HASH5>)
INFO	ordeq.framework.runner	Running node Node(name=graph:f2, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH2>), StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH4>)])
INFO	ordeq.framework.io	Saving StringBuffer(_buffer=<_io.StringIO object at HASH4>)
INFO	ordeq.framework.runner	Running node Node(name=graph:f4, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>), StringBuffer(_buffer=<_io.StringIO object at HASH4>), StringBuffer(_buffer=<_io.StringIO object at HASH5>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH6>)])
INFO	ordeq.framework.io	Saving StringBuffer(_buffer=<_io.StringIO object at HASH6>)
INFO	ordeq.framework.io	Loading StringBuffer(_buffer=<_io.StringIO object at HASH1>)
INFO	ordeq.framework.io	Loading StringBuffer(_buffer=<_io.StringIO object at HASH2>)
INFO	ordeq.framework.runner	Running node Node(name=graph:f1, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH1>), StringBuffer(_buffer=<_io.StringIO object at HASH2>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)])
INFO	ordeq.framework.runner	Running node Node(name=graph:f3, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH5>)])
INFO	ordeq.framework.runner	Running node Node(name=graph:f2, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH2>), StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH4>)])
INFO	ordeq.framework.runner	Running node Node(name=graph:f4, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>), StringBuffer(_buffer=<_io.StringIO object at HASH4>), StringBuffer(_buffer=<_io.StringIO object at HASH5>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH6>)])
INFO	ordeq.framework.io	Saving StringBuffer(_buffer=<_io.StringIO object at HASH6>)
INFO	ordeq.framework.io	Loading StringBuffer(_buffer=<_io.StringIO object at HASH1>)
INFO	ordeq.framework.io	Loading StringBuffer(_buffer=<_io.StringIO object at HASH2>)
INFO	ordeq.framework.runner	Running node Node(name=graph:f1, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH1>), StringBuffer(_buffer=<_io.StringIO object at HASH2>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)])
INFO	ordeq.framework.runner	Running node Node(name=graph:f3, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH5>)])
INFO	ordeq.framework.runner	Running node Node(name=graph:f2, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH2>), StringBuffer(_buffer=<_io.StringIO object at HASH3>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH4>)])
INFO	ordeq.framework.runner	Running node Node(name=graph:f4, inputs=[StringBuffer(_buffer=<_io.StringIO object at HASH3>), StringBuffer(_buffer=<_io.StringIO object at HASH4>), StringBuffer(_buffer=<_io.StringIO object at HASH5>)], outputs=[StringBuffer(_buffer=<_io.StringIO object at HASH6>)])

Typing:
packages/ordeq/tests/resources/runner/graph.py:35: error: No overload variant of "run" matches argument types "set[function]", "str", "bool"  [call-overload]
packages/ordeq/tests/resources/runner/graph.py:35: note: Possible overload variants:
packages/ordeq/tests/resources/runner/graph.py:35: note:     def [T] run(*runnables: Module, hooks: Sequence[NodeHook | RunHook] = ..., save: Literal['all', 'sinks', 'none'] = ..., verbose: bool = ..., io: dict[Input[T] | Output[T], Input[T] | Output[T]] | None = ...) -> dict[Input[Any] | Output[Any], Any]
packages/ordeq/tests/resources/runner/graph.py:35: note:     def [T] run(*runnables: Callable[..., Any], hooks: Sequence[NodeHook | RunHook] = ..., save: Literal['all', 'sinks', 'none'] = ..., verbose: bool = ..., io: dict[Input[T] | Output[T], Input[T] | Output[T]] | None = ...) -> dict[Input[Any] | Output[Any], Any]
packages/ordeq/tests/resources/runner/graph.py:38: error: No overload variant of "run" matches argument types "set[function]", "str", "bool"  [call-overload]
packages/ordeq/tests/resources/runner/graph.py:38: note: Possible overload variants:
packages/ordeq/tests/resources/runner/graph.py:38: note:     def [T] run(*runnables: Module, hooks: Sequence[NodeHook | RunHook] = ..., save: Literal['all', 'sinks', 'none'] = ..., verbose: bool = ..., io: dict[Input[T] | Output[T], Input[T] | Output[T]] | None = ...) -> dict[Input[Any] | Output[Any], Any]
packages/ordeq/tests/resources/runner/graph.py:38: note:     def [T] run(*runnables: Callable[..., Any], hooks: Sequence[NodeHook | RunHook] = ..., save: Literal['all', 'sinks', 'none'] = ..., verbose: bool = ..., io: dict[Input[T] | Output[T], Input[T] | Output[T]] | None = ...) -> dict[Input[Any] | Output[Any], Any]
packages/ordeq/tests/resources/runner/graph.py:41: error: No overload variant of "run" matches argument types "set[function]", "str", "bool"  [call-overload]
packages/ordeq/tests/resources/runner/graph.py:41: note: Possible overload variants:
packages/ordeq/tests/resources/runner/graph.py:41: note:     def [T] run(*runnables: Module, hooks: Sequence[NodeHook | RunHook] = ..., save: Literal['all', 'sinks', 'none'] = ..., verbose: bool = ..., io: dict[Input[T] | Output[T], Input[T] | Output[T]] | None = ...) -> dict[Input[Any] | Output[Any], Any]
packages/ordeq/tests/resources/runner/graph.py:41: note:     def [T] run(*runnables: Callable[..., Any], hooks: Sequence[NodeHook | RunHook] = ..., save: Literal['all', 'sinks', 'none'] = ..., verbose: bool = ..., io: dict[Input[T] | Output[T], Input[T] | Output[T]] | None = ...) -> dict[Input[Any] | Output[Any], Any]
Found 3 errors in 1 file (checked 1 source file)
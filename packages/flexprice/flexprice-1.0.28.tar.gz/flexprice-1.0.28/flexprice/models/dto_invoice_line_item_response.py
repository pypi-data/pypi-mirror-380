# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.dto_source_usage_item import DtoSourceUsageItem
from flexprice.models.dto_usage_breakdown_item import DtoUsageBreakdownItem
from typing import Optional, Set
from typing_extensions import Self

class DtoInvoiceLineItemResponse(BaseModel):
    """
    DtoInvoiceLineItemResponse
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="amount is the monetary amount for this line item")
    created_at: Optional[StrictStr] = Field(default=None, description="created_at is the timestamp when this line item was created")
    created_by: Optional[StrictStr] = Field(default=None, description="created_by is the identifier of the user who created this line item")
    currency: Optional[StrictStr] = Field(default=None, description="currency is the three-letter ISO currency code for this line item")
    customer_id: Optional[StrictStr] = Field(default=None, description="customer_id is the unique identifier of the customer associated with this line item")
    display_name: Optional[StrictStr] = Field(default=None, description="display_name is the optional human-readable name for this line item")
    entity_id: Optional[StrictStr] = Field(default=None, description="entity_id is the optional unique identifier of the entity associated with this line item")
    entity_type: Optional[StrictStr] = Field(default=None, description="entity_type is the optional type of the entity associated with this line item")
    id: Optional[StrictStr] = Field(default=None, description="id is the unique identifier for this line item")
    invoice_id: Optional[StrictStr] = Field(default=None, description="invoice_id is the unique identifier of the invoice this line item belongs to")
    metadata: Optional[Dict[str, StrictStr]] = None
    meter_display_name: Optional[StrictStr] = Field(default=None, description="meter_display_name is the optional human-readable name of the meter")
    meter_id: Optional[StrictStr] = Field(default=None, description="meter_id is the optional unique identifier of the meter used for usage tracking")
    period_end: Optional[StrictStr] = Field(default=None, description="period_end is the optional end date of the period this line item covers")
    period_start: Optional[StrictStr] = Field(default=None, description="period_start is the optional start date of the period this line item covers")
    plan_display_name: Optional[StrictStr] = Field(default=None, description="plan_display_name is the optional human-readable name of the plan")
    plan_id: Optional[StrictStr] = Field(default=None, description="plan_id is the optional unique identifier of the plan associated with this line item")
    price_id: Optional[StrictStr] = Field(default=None, description="price_id is the optional unique identifier of the price associated with this line item")
    price_type: Optional[StrictStr] = Field(default=None, description="price_type indicates the type of pricing (fixed, usage, tiered, etc.)")
    price_unit: Optional[StrictStr] = Field(default=None, description="price_unit is the optional 3-digit ISO code of the price unit associated with this line item")
    price_unit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price_unit_amount is the optional amount converted to the price unit currency")
    price_unit_id: Optional[StrictStr] = Field(default=None, description="price_unit_id is the optional unique identifier of the price unit associated with this line item")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="quantity is the quantity of units for this line item")
    status: Optional[StrictStr] = Field(default=None, description="status represents the current status of this line item")
    subscription_id: Optional[StrictStr] = Field(default=None, description="subscription_id is the optional unique identifier of the subscription associated with this line item")
    tenant_id: Optional[StrictStr] = Field(default=None, description="tenant_id is the unique identifier of the tenant this line item belongs to")
    updated_at: Optional[StrictStr] = Field(default=None, description="updated_at is the timestamp when this line item was last updated")
    updated_by: Optional[StrictStr] = Field(default=None, description="updated_by is the identifier of the user who last updated this line item")
    usage_analytics: Optional[List[DtoSourceUsageItem]] = Field(default=None, description="usage_analytics contains usage analytics for this line item (legacy - grouped by source)")
    usage_breakdown: Optional[List[DtoUsageBreakdownItem]] = Field(default=None, description="usage_breakdown contains flexible usage breakdown for this line item (supports any grouping)")
    __properties: ClassVar[List[str]] = ["amount", "created_at", "created_by", "currency", "customer_id", "display_name", "entity_id", "entity_type", "id", "invoice_id", "metadata", "meter_display_name", "meter_id", "period_end", "period_start", "plan_display_name", "plan_id", "price_id", "price_type", "price_unit", "price_unit_amount", "price_unit_id", "quantity", "status", "subscription_id", "tenant_id", "updated_at", "updated_by", "usage_analytics", "usage_breakdown"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoInvoiceLineItemResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in usage_analytics (list)
        _items = []
        if self.usage_analytics:
            for _item_usage_analytics in self.usage_analytics:
                if _item_usage_analytics:
                    _items.append(_item_usage_analytics.to_dict())
            _dict['usage_analytics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in usage_breakdown (list)
        _items = []
        if self.usage_breakdown:
            for _item_usage_breakdown in self.usage_breakdown:
                if _item_usage_breakdown:
                    _items.append(_item_usage_breakdown.to_dict())
            _dict['usage_breakdown'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoInvoiceLineItemResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "currency": obj.get("currency"),
            "customer_id": obj.get("customer_id"),
            "display_name": obj.get("display_name"),
            "entity_id": obj.get("entity_id"),
            "entity_type": obj.get("entity_type"),
            "id": obj.get("id"),
            "invoice_id": obj.get("invoice_id"),
            "metadata": obj.get("metadata"),
            "meter_display_name": obj.get("meter_display_name"),
            "meter_id": obj.get("meter_id"),
            "period_end": obj.get("period_end"),
            "period_start": obj.get("period_start"),
            "plan_display_name": obj.get("plan_display_name"),
            "plan_id": obj.get("plan_id"),
            "price_id": obj.get("price_id"),
            "price_type": obj.get("price_type"),
            "price_unit": obj.get("price_unit"),
            "price_unit_amount": obj.get("price_unit_amount"),
            "price_unit_id": obj.get("price_unit_id"),
            "quantity": obj.get("quantity"),
            "status": obj.get("status"),
            "subscription_id": obj.get("subscription_id"),
            "tenant_id": obj.get("tenant_id"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "usage_analytics": [DtoSourceUsageItem.from_dict(_item) for _item in obj["usage_analytics"]] if obj.get("usage_analytics") is not None else None,
            "usage_breakdown": [DtoUsageBreakdownItem.from_dict(_item) for _item in obj["usage_breakdown"]] if obj.get("usage_breakdown") is not None else None
        })
        return _obj



# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.dto_coupon_application_response import DtoCouponApplicationResponse
from flexprice.models.dto_customer_response import DtoCustomerResponse
from flexprice.models.dto_invoice_line_item_response import DtoInvoiceLineItemResponse
from flexprice.models.dto_tax_applied_response import DtoTaxAppliedResponse
from flexprice.models.types_invoice_status import TypesInvoiceStatus
from flexprice.models.types_invoice_type import TypesInvoiceType
from flexprice.models.types_payment_status import TypesPaymentStatus
from typing import Optional, Set
from typing_extensions import Self

class DtoInvoiceResponse(BaseModel):
    """
    DtoInvoiceResponse
    """ # noqa: E501
    amount_due: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="amount_due is the total amount that needs to be paid for this invoice")
    amount_paid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="amount_paid is the amount that has been paid towards this invoice")
    amount_remaining: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="amount_remaining is the amount still outstanding on this invoice")
    billing_period: Optional[StrictStr] = Field(default=None, description="billing_period is the period this invoice covers (e.g., \"monthly\", \"yearly\")")
    billing_reason: Optional[StrictStr] = Field(default=None, description="billing_reason indicates why this invoice was created (subscription_cycle, manual, etc.)")
    billing_sequence: Optional[StrictInt] = Field(default=None, description="billing_sequence is the optional sequence number for billing cycles")
    coupon_applications: Optional[List[DtoCouponApplicationResponse]] = Field(default=None, description="coupon_applications contains the coupon applications associated with this invoice")
    created_at: Optional[StrictStr] = Field(default=None, description="created_at is the timestamp when this invoice was created")
    created_by: Optional[StrictStr] = Field(default=None, description="created_by is the identifier of the user who created this invoice")
    currency: Optional[StrictStr] = Field(default=None, description="currency is the three-letter ISO currency code (e.g., USD, EUR) for the invoice")
    customer: Optional[DtoCustomerResponse] = None
    customer_id: Optional[StrictStr] = Field(default=None, description="customer_id is the unique identifier of the customer this invoice belongs to")
    description: Optional[StrictStr] = Field(default=None, description="description is the optional text description of the invoice")
    due_date: Optional[StrictStr] = Field(default=None, description="due_date is the date by which payment is expected")
    finalized_at: Optional[StrictStr] = Field(default=None, description="finalized_at is the timestamp when this invoice was finalized")
    id: Optional[StrictStr] = Field(default=None, description="id is the unique identifier for this invoice")
    idempotency_key: Optional[StrictStr] = Field(default=None, description="idempotency_key is the optional key used to prevent duplicate invoice creation")
    invoice_number: Optional[StrictStr] = Field(default=None, description="invoice_number is the optional human-readable identifier for the invoice")
    invoice_pdf_url: Optional[StrictStr] = Field(default=None, description="invoice_pdf_url is the optional URL to the PDF version of this invoice")
    invoice_status: Optional[TypesInvoiceStatus] = None
    invoice_type: Optional[TypesInvoiceType] = None
    line_items: Optional[List[DtoInvoiceLineItemResponse]] = Field(default=None, description="line_items contains the individual items that make up this invoice")
    metadata: Optional[Dict[str, StrictStr]] = None
    overpaid_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="overpaid_amount is the amount overpaid if payment_status is OVERPAID (amount_paid - total)")
    paid_at: Optional[StrictStr] = Field(default=None, description="paid_at is the timestamp when this invoice was paid")
    payment_status: Optional[TypesPaymentStatus] = None
    period_end: Optional[StrictStr] = Field(default=None, description="period_end is the end date of the billing period")
    period_start: Optional[StrictStr] = Field(default=None, description="period_start is the start date of the billing period")
    status: Optional[StrictStr] = Field(default=None, description="status represents the current status of this invoice")
    subscription: Optional[DtoSubscriptionResponse] = None
    subscription_id: Optional[StrictStr] = Field(default=None, description="subscription_id is the optional unique identifier of the subscription associated with this invoice")
    subtotal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="subtotal is the amount before taxes and discounts are applied")
    taxes: Optional[List[DtoTaxAppliedResponse]] = Field(default=None, description="tax_applied_records contains the tax applied records associated with this invoice")
    tenant_id: Optional[StrictStr] = Field(default=None, description="tenant_id is the unique identifier of the tenant this invoice belongs to")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total is the total amount of the invoice including taxes and discounts")
    total_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total_discount is the total discount amount from coupon applications")
    total_tax: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total_tax is the total tax amount for this invoice")
    updated_at: Optional[StrictStr] = Field(default=None, description="updated_at is the timestamp when this invoice was last updated")
    updated_by: Optional[StrictStr] = Field(default=None, description="updated_by is the identifier of the user who last updated this invoice")
    version: Optional[StrictInt] = Field(default=None, description="version is the version number of this invoice")
    voided_at: Optional[StrictStr] = Field(default=None, description="voided_at is the timestamp when this invoice was voided")
    __properties: ClassVar[List[str]] = ["amount_due", "amount_paid", "amount_remaining", "billing_period", "billing_reason", "billing_sequence", "coupon_applications", "created_at", "created_by", "currency", "customer", "customer_id", "description", "due_date", "finalized_at", "id", "idempotency_key", "invoice_number", "invoice_pdf_url", "invoice_status", "invoice_type", "line_items", "metadata", "overpaid_amount", "paid_at", "payment_status", "period_end", "period_start", "status", "subscription", "subscription_id", "subtotal", "taxes", "tenant_id", "total", "total_discount", "total_tax", "updated_at", "updated_by", "version", "voided_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoInvoiceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in coupon_applications (list)
        _items = []
        if self.coupon_applications:
            for _item_coupon_applications in self.coupon_applications:
                if _item_coupon_applications:
                    _items.append(_item_coupon_applications.to_dict())
            _dict['coupon_applications'] = _items
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taxes (list)
        _items = []
        if self.taxes:
            for _item_taxes in self.taxes:
                if _item_taxes:
                    _items.append(_item_taxes.to_dict())
            _dict['taxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoInvoiceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount_due": obj.get("amount_due"),
            "amount_paid": obj.get("amount_paid"),
            "amount_remaining": obj.get("amount_remaining"),
            "billing_period": obj.get("billing_period"),
            "billing_reason": obj.get("billing_reason"),
            "billing_sequence": obj.get("billing_sequence"),
            "coupon_applications": [DtoCouponApplicationResponse.from_dict(_item) for _item in obj["coupon_applications"]] if obj.get("coupon_applications") is not None else None,
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "currency": obj.get("currency"),
            "customer": DtoCustomerResponse.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "customer_id": obj.get("customer_id"),
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "finalized_at": obj.get("finalized_at"),
            "id": obj.get("id"),
            "idempotency_key": obj.get("idempotency_key"),
            "invoice_number": obj.get("invoice_number"),
            "invoice_pdf_url": obj.get("invoice_pdf_url"),
            "invoice_status": obj.get("invoice_status"),
            "invoice_type": obj.get("invoice_type"),
            "line_items": [DtoInvoiceLineItemResponse.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "metadata": obj.get("metadata"),
            "overpaid_amount": obj.get("overpaid_amount"),
            "paid_at": obj.get("paid_at"),
            "payment_status": obj.get("payment_status"),
            "period_end": obj.get("period_end"),
            "period_start": obj.get("period_start"),
            "status": obj.get("status"),
            "subscription": DtoSubscriptionResponse.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "subscription_id": obj.get("subscription_id"),
            "subtotal": obj.get("subtotal"),
            "taxes": [DtoTaxAppliedResponse.from_dict(_item) for _item in obj["taxes"]] if obj.get("taxes") is not None else None,
            "tenant_id": obj.get("tenant_id"),
            "total": obj.get("total"),
            "total_discount": obj.get("total_discount"),
            "total_tax": obj.get("total_tax"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "version": obj.get("version"),
            "voided_at": obj.get("voided_at")
        })
        return _obj

from flexprice.models.dto_subscription_response import DtoSubscriptionResponse
# TODO: Rewrite to not use raise_errors
DtoInvoiceResponse.model_rebuild(raise_errors=False)


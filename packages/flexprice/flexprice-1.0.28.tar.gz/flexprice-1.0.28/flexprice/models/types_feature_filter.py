# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from flexprice.models.types_filter_condition import TypesFilterCondition
from flexprice.models.types_sort_condition import TypesSortCondition
from flexprice.models.types_status import TypesStatus
from typing import Optional, Set
from typing_extensions import Self

class TypesFeatureFilter(BaseModel):
    """
    TypesFeatureFilter
    """ # noqa: E501
    end_time: Optional[StrictStr] = None
    expand: Optional[StrictStr] = None
    feature_ids: Optional[List[StrictStr]] = Field(default=None, description="Feature specific filters")
    filters: Optional[List[TypesFilterCondition]] = Field(default=None, description="filters allows complex filtering based on multiple fields")
    limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None
    lookup_key: Optional[StrictStr] = None
    meter_ids: Optional[List[StrictStr]] = None
    name_contains: Optional[StrictStr] = None
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    order: Optional[StrictStr] = None
    sort: Optional[List[TypesSortCondition]] = None
    start_time: Optional[StrictStr] = None
    status: Optional[TypesStatus] = None
    __properties: ClassVar[List[str]] = ["end_time", "expand", "feature_ids", "filters", "limit", "lookup_key", "meter_ids", "name_contains", "offset", "order", "sort", "start_time", "status"]

    @field_validator('order')
    def order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['asc', 'desc']):
            raise ValueError("must be one of enum values ('asc', 'desc')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TypesFeatureFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sort (list)
        _items = []
        if self.sort:
            for _item_sort in self.sort:
                if _item_sort:
                    _items.append(_item_sort.to_dict())
            _dict['sort'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TypesFeatureFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "end_time": obj.get("end_time"),
            "expand": obj.get("expand"),
            "feature_ids": obj.get("feature_ids"),
            "filters": [TypesFilterCondition.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "limit": obj.get("limit"),
            "lookup_key": obj.get("lookup_key"),
            "meter_ids": obj.get("meter_ids"),
            "name_contains": obj.get("name_contains"),
            "offset": obj.get("offset"),
            "order": obj.get("order"),
            "sort": [TypesSortCondition.from_dict(_item) for _item in obj["sort"]] if obj.get("sort") is not None else None,
            "start_time": obj.get("start_time"),
            "status": obj.get("status")
        })
        return _obj



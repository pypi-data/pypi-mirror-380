# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from flexprice.models.dto_integration_entity_mapping import DtoIntegrationEntityMapping
from typing import Optional, Set
from typing_extensions import Self

class DtoUpdateCustomerRequest(BaseModel):
    """
    Request object for updating an existing customer. All fields are optional - only provided fields will be updated
    """ # noqa: E501
    address_city: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="address_city is the updated city name with maximum 100 characters")
    address_country: Optional[StrictStr] = Field(default=None, description="address_country is the updated two-letter ISO 3166-1 alpha-2 country code")
    address_line1: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="address_line1 is the updated primary address line with maximum 255 characters")
    address_line2: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="address_line2 is the updated secondary address line with maximum 255 characters")
    address_postal_code: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="address_postal_code is the updated postal code with maximum 20 characters")
    address_state: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="address_state is the updated state, province, or region name with maximum 100 characters")
    email: Optional[StrictStr] = Field(default=None, description="email is the updated email address and must be a valid email format if provided")
    external_id: Optional[StrictStr] = Field(default=None, description="external_id is the updated external identifier for the customer")
    integration_entity_mapping: Optional[List[DtoIntegrationEntityMapping]] = Field(default=None, description="integration_entity_mapping contains provider integration mappings for this customer")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="metadata contains updated key-value pairs that will replace existing metadata")
    name: Optional[StrictStr] = Field(default=None, description="name is the updated name or company name for the customer")
    __properties: ClassVar[List[str]] = ["address_city", "address_country", "address_line1", "address_line2", "address_postal_code", "address_state", "email", "external_id", "integration_entity_mapping", "metadata", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoUpdateCustomerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in integration_entity_mapping (list)
        _items = []
        if self.integration_entity_mapping:
            for _item_integration_entity_mapping in self.integration_entity_mapping:
                if _item_integration_entity_mapping:
                    _items.append(_item_integration_entity_mapping.to_dict())
            _dict['integration_entity_mapping'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoUpdateCustomerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address_city": obj.get("address_city"),
            "address_country": obj.get("address_country"),
            "address_line1": obj.get("address_line1"),
            "address_line2": obj.get("address_line2"),
            "address_postal_code": obj.get("address_postal_code"),
            "address_state": obj.get("address_state"),
            "email": obj.get("email"),
            "external_id": obj.get("external_id"),
            "integration_entity_mapping": [DtoIntegrationEntityMapping.from_dict(_item) for _item in obj["integration_entity_mapping"]] if obj.get("integration_entity_mapping") is not None else None,
            "metadata": obj.get("metadata"),
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.dto_create_invoice_line_item_request import DtoCreateInvoiceLineItemRequest
from flexprice.models.dto_invoice_coupon import DtoInvoiceCoupon
from flexprice.models.dto_invoice_line_item_coupon import DtoInvoiceLineItemCoupon
from flexprice.models.dto_tax_rate_override import DtoTaxRateOverride
from flexprice.models.dto_tax_rate_response import DtoTaxRateResponse
from flexprice.models.types_invoice_billing_reason import TypesInvoiceBillingReason
from flexprice.models.types_invoice_status import TypesInvoiceStatus
from flexprice.models.types_invoice_type import TypesInvoiceType
from flexprice.models.types_payment_status import TypesPaymentStatus
from typing import Optional, Set
from typing_extensions import Self

class DtoCreateInvoiceRequest(BaseModel):
    """
    DtoCreateInvoiceRequest
    """ # noqa: E501
    amount_due: Union[StrictFloat, StrictInt] = Field(description="amount_due is the total amount that needs to be paid for this invoice")
    amount_paid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="amount_paid is the amount that has been paid towards this invoice")
    billing_period: Optional[StrictStr] = Field(default=None, description="billing_period is the period this invoice covers (e.g., \"monthly\", \"yearly\")")
    billing_reason: Optional[TypesInvoiceBillingReason] = None
    coupons: Optional[List[StrictStr]] = Field(default=None, description="coupons")
    currency: StrictStr = Field(description="currency is the three-letter ISO currency code (e.g., USD, EUR) for the invoice")
    customer_id: StrictStr = Field(description="customer_id is the unique identifier of the customer this invoice belongs to")
    description: Optional[StrictStr] = Field(default=None, description="description is an optional text description of the invoice")
    due_date: Optional[StrictStr] = Field(default=None, description="due_date is the date by which payment is expected")
    environment_id: Optional[StrictStr] = Field(default=None, description="environment_id is the unique identifier of the environment this invoice belongs to")
    idempotency_key: Optional[StrictStr] = Field(default=None, description="idempotency_key is an optional key used to prevent duplicate invoice creation")
    invoice_coupons: Optional[List[DtoInvoiceCoupon]] = Field(default=None, description="Invoice Coupns")
    invoice_number: Optional[StrictStr] = Field(default=None, description="invoice_number is an optional human-readable identifier for the invoice")
    invoice_pdf_url: Optional[StrictStr] = Field(default=None, description="invoice_pdf_url is the URL where customers can download the PDF version of this invoice")
    invoice_status: Optional[TypesInvoiceStatus] = None
    invoice_type: Optional[TypesInvoiceType] = None
    line_item_coupons: Optional[List[DtoInvoiceLineItemCoupon]] = Field(default=None, description="Invoice Line Item Coupons")
    line_items: Optional[List[DtoCreateInvoiceLineItemRequest]] = Field(default=None, description="line_items contains the individual items that make up this invoice")
    metadata: Optional[Dict[str, StrictStr]] = None
    payment_status: Optional[TypesPaymentStatus] = None
    period_end: Optional[StrictStr] = Field(default=None, description="period_end is the end date of the billing period")
    period_start: Optional[StrictStr] = Field(default=None, description="period_start is the start date of the billing period")
    prepared_tax_rates: Optional[List[DtoTaxRateResponse]] = Field(default=None, description="prepared_tax_rates contains the tax rates pre-resolved by the caller (e.g., billing service) These are applied at invoice level by the invoice service without further resolution")
    subscription_id: Optional[StrictStr] = Field(default=None, description="subscription_id is the optional unique identifier of the subscription associated with this invoice")
    subtotal: Union[StrictFloat, StrictInt] = Field(description="subtotal is the amount before taxes and discounts are applied")
    tax_rate_overrides: Optional[List[DtoTaxRateOverride]] = Field(default=None, description="tax_rate_overrides is the tax rate overrides to be applied to the invoice")
    tax_rates: Optional[List[StrictStr]] = Field(default=None, description="tax_rates")
    total: Union[StrictFloat, StrictInt] = Field(description="total is the total amount of the invoice including taxes and discounts")
    __properties: ClassVar[List[str]] = ["amount_due", "amount_paid", "billing_period", "billing_reason", "coupons", "currency", "customer_id", "description", "due_date", "environment_id", "idempotency_key", "invoice_coupons", "invoice_number", "invoice_pdf_url", "invoice_status", "invoice_type", "line_item_coupons", "line_items", "metadata", "payment_status", "period_end", "period_start", "prepared_tax_rates", "subscription_id", "subtotal", "tax_rate_overrides", "tax_rates", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoCreateInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_coupons (list)
        _items = []
        if self.invoice_coupons:
            for _item_invoice_coupons in self.invoice_coupons:
                if _item_invoice_coupons:
                    _items.append(_item_invoice_coupons.to_dict())
            _dict['invoice_coupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_item_coupons (list)
        _items = []
        if self.line_item_coupons:
            for _item_line_item_coupons in self.line_item_coupons:
                if _item_line_item_coupons:
                    _items.append(_item_line_item_coupons.to_dict())
            _dict['line_item_coupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prepared_tax_rates (list)
        _items = []
        if self.prepared_tax_rates:
            for _item_prepared_tax_rates in self.prepared_tax_rates:
                if _item_prepared_tax_rates:
                    _items.append(_item_prepared_tax_rates.to_dict())
            _dict['prepared_tax_rates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_rate_overrides (list)
        _items = []
        if self.tax_rate_overrides:
            for _item_tax_rate_overrides in self.tax_rate_overrides:
                if _item_tax_rate_overrides:
                    _items.append(_item_tax_rate_overrides.to_dict())
            _dict['tax_rate_overrides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoCreateInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount_due": obj.get("amount_due"),
            "amount_paid": obj.get("amount_paid"),
            "billing_period": obj.get("billing_period"),
            "billing_reason": obj.get("billing_reason"),
            "coupons": obj.get("coupons"),
            "currency": obj.get("currency"),
            "customer_id": obj.get("customer_id"),
            "description": obj.get("description"),
            "due_date": obj.get("due_date"),
            "environment_id": obj.get("environment_id"),
            "idempotency_key": obj.get("idempotency_key"),
            "invoice_coupons": [DtoInvoiceCoupon.from_dict(_item) for _item in obj["invoice_coupons"]] if obj.get("invoice_coupons") is not None else None,
            "invoice_number": obj.get("invoice_number"),
            "invoice_pdf_url": obj.get("invoice_pdf_url"),
            "invoice_status": obj.get("invoice_status"),
            "invoice_type": obj.get("invoice_type"),
            "line_item_coupons": [DtoInvoiceLineItemCoupon.from_dict(_item) for _item in obj["line_item_coupons"]] if obj.get("line_item_coupons") is not None else None,
            "line_items": [DtoCreateInvoiceLineItemRequest.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "metadata": obj.get("metadata"),
            "payment_status": obj.get("payment_status"),
            "period_end": obj.get("period_end"),
            "period_start": obj.get("period_start"),
            "prepared_tax_rates": [DtoTaxRateResponse.from_dict(_item) for _item in obj["prepared_tax_rates"]] if obj.get("prepared_tax_rates") is not None else None,
            "subscription_id": obj.get("subscription_id"),
            "subtotal": obj.get("subtotal"),
            "tax_rate_overrides": [DtoTaxRateOverride.from_dict(_item) for _item in obj["tax_rate_overrides"]] if obj.get("tax_rate_overrides") is not None else None,
            "tax_rates": obj.get("tax_rates"),
            "total": obj.get("total")
        })
        return _obj



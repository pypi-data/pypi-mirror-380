# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DtoProrationDetails(BaseModel):
    """
    DtoProrationDetails
    """ # noqa: E501
    charge_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="charge_amount is the charge amount for the new subscription")
    charge_description: Optional[StrictStr] = Field(default=None, description="charge_description describes what the charge is for")
    credit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="credit_amount is the credit amount from the old subscription")
    credit_description: Optional[StrictStr] = Field(default=None, description="credit_description describes what the credit is for")
    currency: Optional[StrictStr] = Field(default=None, description="currency is the currency for all amounts")
    current_period_end: Optional[StrictStr] = Field(default=None, description="current_period_end is the end of the current billing period")
    current_period_start: Optional[StrictStr] = Field(default=None, description="current_period_start is the start of the current billing period")
    days_remaining: Optional[StrictInt] = Field(default=None, description="days_remaining is the number of days remaining in the current period")
    days_used: Optional[StrictInt] = Field(default=None, description="days_used is the number of days used in the current period")
    net_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="net_amount is the net amount (charge - credit)")
    proration_date: Optional[StrictStr] = Field(default=None, description="proration_date is the date used for proration calculations")
    __properties: ClassVar[List[str]] = ["charge_amount", "charge_description", "credit_amount", "credit_description", "currency", "current_period_end", "current_period_start", "days_remaining", "days_used", "net_amount", "proration_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoProrationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoProrationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "charge_amount": obj.get("charge_amount"),
            "charge_description": obj.get("charge_description"),
            "credit_amount": obj.get("credit_amount"),
            "credit_description": obj.get("credit_description"),
            "currency": obj.get("currency"),
            "current_period_end": obj.get("current_period_end"),
            "current_period_start": obj.get("current_period_start"),
            "days_remaining": obj.get("days_remaining"),
            "days_used": obj.get("days_used"),
            "net_amount": obj.get("net_amount"),
            "proration_date": obj.get("proration_date")
        })
        return _obj



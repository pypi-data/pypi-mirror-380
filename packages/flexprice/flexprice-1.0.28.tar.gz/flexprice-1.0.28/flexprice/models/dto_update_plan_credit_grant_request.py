# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.types_credit_grant_cadence import TypesCreditGrantCadence
from flexprice.models.types_credit_grant_expiry_duration_unit import TypesCreditGrantExpiryDurationUnit
from flexprice.models.types_credit_grant_expiry_type import TypesCreditGrantExpiryType
from flexprice.models.types_credit_grant_period import TypesCreditGrantPeriod
from flexprice.models.types_credit_grant_scope import TypesCreditGrantScope
from typing import Optional, Set
from typing_extensions import Self

class DtoUpdatePlanCreditGrantRequest(BaseModel):
    """
    DtoUpdatePlanCreditGrantRequest
    """ # noqa: E501
    cadence: TypesCreditGrantCadence
    credits: Union[StrictFloat, StrictInt]
    expiration_duration: Optional[StrictInt] = None
    expiration_duration_unit: Optional[TypesCreditGrantExpiryDurationUnit] = None
    expiration_type: Optional[TypesCreditGrantExpiryType] = None
    id: Optional[StrictStr] = Field(default=None, description="The ID of the credit grant to update (present if the credit grant is being updated)")
    metadata: Optional[Dict[str, StrictStr]] = None
    name: StrictStr
    period: Optional[TypesCreditGrantPeriod] = None
    period_count: Optional[StrictInt] = None
    plan_id: Optional[StrictStr] = None
    priority: Optional[StrictInt] = None
    scope: TypesCreditGrantScope
    subscription_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["cadence", "credits", "expiration_duration", "expiration_duration_unit", "expiration_type", "id", "metadata", "name", "period", "period_count", "plan_id", "priority", "scope", "subscription_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoUpdatePlanCreditGrantRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoUpdatePlanCreditGrantRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cadence": obj.get("cadence"),
            "credits": obj.get("credits"),
            "expiration_duration": obj.get("expiration_duration"),
            "expiration_duration_unit": obj.get("expiration_duration_unit"),
            "expiration_type": obj.get("expiration_type"),
            "id": obj.get("id"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "period": obj.get("period"),
            "period_count": obj.get("period_count"),
            "plan_id": obj.get("plan_id"),
            "priority": obj.get("priority"),
            "scope": obj.get("scope"),
            "subscription_id": obj.get("subscription_id")
        })
        return _obj



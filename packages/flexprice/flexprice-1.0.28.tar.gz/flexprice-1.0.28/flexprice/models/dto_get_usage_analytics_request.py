# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flexprice.models.types_window_size import TypesWindowSize
from typing import Optional, Set
from typing_extensions import Self

class DtoGetUsageAnalyticsRequest(BaseModel):
    """
    DtoGetUsageAnalyticsRequest
    """ # noqa: E501
    end_time: Optional[StrictStr] = None
    external_customer_id: StrictStr
    feature_ids: Optional[List[StrictStr]] = None
    group_by: Optional[List[StrictStr]] = Field(default=None, description="allowed values: \"source\", \"feature_id\", \"properties.<field_name>\"")
    property_filters: Optional[Dict[str, List[StrictStr]]] = Field(default=None, description="Property filters to filter the events by the keys in `properties` field of the event")
    sources: Optional[List[StrictStr]] = None
    start_time: Optional[StrictStr] = None
    window_size: Optional[TypesWindowSize] = None
    __properties: ClassVar[List[str]] = ["end_time", "external_customer_id", "feature_ids", "group_by", "property_filters", "sources", "start_time", "window_size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoGetUsageAnalyticsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoGetUsageAnalyticsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "end_time": obj.get("end_time"),
            "external_customer_id": obj.get("external_customer_id"),
            "feature_ids": obj.get("feature_ids"),
            "group_by": obj.get("group_by"),
            "property_filters": obj.get("property_filters"),
            "sources": obj.get("sources"),
            "start_time": obj.get("start_time"),
            "window_size": obj.get("window_size")
        })
        return _obj



# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.dto_credit_grant_response import DtoCreditGrantResponse
from flexprice.models.dto_subscription_line_item_response import DtoSubscriptionLineItemResponse
from typing import Optional, Set
from typing_extensions import Self

class DtoSubscriptionSchedulePhaseResponse(BaseModel):
    """
    DtoSubscriptionSchedulePhaseResponse
    """ # noqa: E501
    commitment_amount: Optional[Union[StrictFloat, StrictInt]] = None
    created_at: Optional[StrictStr] = None
    credit_grants: Optional[List[DtoCreditGrantResponse]] = None
    end_date: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    line_items: Optional[List[DtoSubscriptionLineItemResponse]] = None
    overage_factor: Optional[Union[StrictFloat, StrictInt]] = None
    phase_index: Optional[StrictInt] = None
    schedule_id: Optional[StrictStr] = None
    start_date: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["commitment_amount", "created_at", "credit_grants", "end_date", "id", "line_items", "overage_factor", "phase_index", "schedule_id", "start_date", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoSubscriptionSchedulePhaseResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credit_grants (list)
        _items = []
        if self.credit_grants:
            for _item_credit_grants in self.credit_grants:
                if _item_credit_grants:
                    _items.append(_item_credit_grants.to_dict())
            _dict['credit_grants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoSubscriptionSchedulePhaseResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitment_amount": obj.get("commitment_amount"),
            "created_at": obj.get("created_at"),
            "credit_grants": [DtoCreditGrantResponse.from_dict(_item) for _item in obj["credit_grants"]] if obj.get("credit_grants") is not None else None,
            "end_date": obj.get("end_date"),
            "id": obj.get("id"),
            "line_items": [DtoSubscriptionLineItemResponse.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "overage_factor": obj.get("overage_factor"),
            "phase_index": obj.get("phase_index"),
            "schedule_id": obj.get("schedule_id"),
            "start_date": obj.get("start_date"),
            "updated_at": obj.get("updated_at")
        })
        return _obj



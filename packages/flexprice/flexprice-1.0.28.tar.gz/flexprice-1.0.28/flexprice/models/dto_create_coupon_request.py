# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.types_coupon_cadence import TypesCouponCadence
from flexprice.models.types_coupon_type import TypesCouponType
from typing import Optional, Set
from typing_extensions import Self

class DtoCreateCouponRequest(BaseModel):
    """
    DtoCreateCouponRequest
    """ # noqa: E501
    amount_off: Optional[Union[StrictFloat, StrictInt]] = None
    cadence: TypesCouponCadence
    currency: Optional[StrictStr] = None
    duration_in_periods: Optional[StrictInt] = None
    max_redemptions: Optional[StrictInt] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    name: StrictStr
    percentage_off: Optional[Union[StrictFloat, StrictInt]] = None
    redeem_after: Optional[StrictStr] = None
    redeem_before: Optional[StrictStr] = None
    rules: Optional[Dict[str, Any]] = None
    type: TypesCouponType
    __properties: ClassVar[List[str]] = ["amount_off", "cadence", "currency", "duration_in_periods", "max_redemptions", "metadata", "name", "percentage_off", "redeem_after", "redeem_before", "rules", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoCreateCouponRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoCreateCouponRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount_off": obj.get("amount_off"),
            "cadence": obj.get("cadence"),
            "currency": obj.get("currency"),
            "duration_in_periods": obj.get("duration_in_periods"),
            "max_redemptions": obj.get("max_redemptions"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "percentage_off": obj.get("percentage_off"),
            "redeem_after": obj.get("redeem_after"),
            "redeem_before": obj.get("redeem_before"),
            "rules": obj.get("rules"),
            "type": obj.get("type")
        })
        return _obj



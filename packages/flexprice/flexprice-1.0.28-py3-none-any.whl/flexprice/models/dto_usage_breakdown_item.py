# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DtoUsageBreakdownItem(BaseModel):
    """
    DtoUsageBreakdownItem
    """ # noqa: E501
    cost: Optional[StrictStr] = Field(default=None, description="cost is the cost attributed to this group for the line item")
    event_count: Optional[StrictInt] = Field(default=None, description="event_count is the number of events from this group (optional)")
    grouped_by: Optional[Dict[str, StrictStr]] = Field(default=None, description="grouped_by contains the grouping field values (e.g., {\"source\": \"api\", \"org_id\": \"org123\"})")
    percentage: Optional[StrictStr] = Field(default=None, description="percentage is the percentage of total line item cost from this group (optional)")
    usage: Optional[StrictStr] = Field(default=None, description="usage is the total usage amount from this group (optional, for additional context)")
    __properties: ClassVar[List[str]] = ["cost", "event_count", "grouped_by", "percentage", "usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoUsageBreakdownItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoUsageBreakdownItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cost": obj.get("cost"),
            "event_count": obj.get("event_count"),
            "grouped_by": obj.get("grouped_by"),
            "percentage": obj.get("percentage"),
            "usage": obj.get("usage")
        })
        return _obj



# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.dto_alert_config import DtoAlertConfig
from flexprice.models.types_auto_topup_trigger import TypesAutoTopupTrigger
from flexprice.models.types_wallet_config import TypesWalletConfig
from typing import Optional, Set
from typing_extensions import Self

class DtoUpdateWalletRequest(BaseModel):
    """
    DtoUpdateWalletRequest
    """ # noqa: E501
    alert_config: Optional[DtoAlertConfig] = None
    alert_enabled: Optional[StrictBool] = None
    auto_topup_amount: Optional[Union[StrictFloat, StrictInt]] = None
    auto_topup_min_balance: Optional[Union[StrictFloat, StrictInt]] = None
    auto_topup_trigger: Optional[TypesAutoTopupTrigger] = None
    config: Optional[TypesWalletConfig] = None
    description: Optional[StrictStr] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["alert_config", "alert_enabled", "auto_topup_amount", "auto_topup_min_balance", "auto_topup_trigger", "config", "description", "metadata", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoUpdateWalletRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alert_config
        if self.alert_config:
            _dict['alert_config'] = self.alert_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoUpdateWalletRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alert_config": DtoAlertConfig.from_dict(obj["alert_config"]) if obj.get("alert_config") is not None else None,
            "alert_enabled": obj.get("alert_enabled"),
            "auto_topup_amount": obj.get("auto_topup_amount"),
            "auto_topup_min_balance": obj.get("auto_topup_min_balance"),
            "auto_topup_trigger": obj.get("auto_topup_trigger"),
            "config": TypesWalletConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "description": obj.get("description"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name")
        })
        return _obj



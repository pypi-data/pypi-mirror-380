# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.dto_invoice_line_item_preview import DtoInvoiceLineItemPreview
from typing import Optional, Set
from typing_extensions import Self

class DtoInvoicePreview(BaseModel):
    """
    DtoInvoicePreview
    """ # noqa: E501
    currency: Optional[StrictStr] = Field(default=None, description="currency is the currency for all amounts")
    due_date: Optional[StrictStr] = Field(default=None, description="due_date is when the invoice would be due")
    line_items: Optional[List[DtoInvoiceLineItemPreview]] = Field(default=None, description="line_items contains preview of line items")
    subtotal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="subtotal is the subtotal amount before taxes")
    tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="tax_amount is the total tax amount")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total is the total amount including taxes")
    __properties: ClassVar[List[str]] = ["currency", "due_date", "line_items", "subtotal", "tax_amount", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoInvoicePreview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoInvoicePreview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currency": obj.get("currency"),
            "due_date": obj.get("due_date"),
            "line_items": [DtoInvoiceLineItemPreview.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "subtotal": obj.get("subtotal"),
            "tax_amount": obj.get("tax_amount"),
            "total": obj.get("total")
        })
        return _obj



# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.types_billing_period import TypesBillingPeriod
from flexprice.models.types_invoice_cadence import TypesInvoiceCadence
from flexprice.models.types_price_type import TypesPriceType
from flexprice.models.types_status import TypesStatus
from flexprice.models.types_subscription_line_item_entity_type import TypesSubscriptionLineItemEntityType
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionSubscriptionLineItem(BaseModel):
    """
    SubscriptionSubscriptionLineItem
    """ # noqa: E501
    billing_period: Optional[TypesBillingPeriod] = None
    created_at: Optional[StrictStr] = None
    created_by: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    customer_id: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    end_date: Optional[StrictStr] = None
    entity_id: Optional[StrictStr] = None
    entity_type: Optional[TypesSubscriptionLineItemEntityType] = None
    environment_id: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    invoice_cadence: Optional[TypesInvoiceCadence] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    meter_display_name: Optional[StrictStr] = None
    meter_id: Optional[StrictStr] = None
    plan_display_name: Optional[StrictStr] = None
    price_id: Optional[StrictStr] = None
    price_type: Optional[TypesPriceType] = None
    price_unit: Optional[StrictStr] = None
    price_unit_id: Optional[StrictStr] = None
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    start_date: Optional[StrictStr] = None
    status: Optional[TypesStatus] = None
    subscription_id: Optional[StrictStr] = None
    tenant_id: Optional[StrictStr] = None
    trial_period: Optional[StrictInt] = None
    updated_at: Optional[StrictStr] = None
    updated_by: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["billing_period", "created_at", "created_by", "currency", "customer_id", "display_name", "end_date", "entity_id", "entity_type", "environment_id", "id", "invoice_cadence", "metadata", "meter_display_name", "meter_id", "plan_display_name", "price_id", "price_type", "price_unit", "price_unit_id", "quantity", "start_date", "status", "subscription_id", "tenant_id", "trial_period", "updated_at", "updated_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionSubscriptionLineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionSubscriptionLineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_period": obj.get("billing_period"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "currency": obj.get("currency"),
            "customer_id": obj.get("customer_id"),
            "display_name": obj.get("display_name"),
            "end_date": obj.get("end_date"),
            "entity_id": obj.get("entity_id"),
            "entity_type": obj.get("entity_type"),
            "environment_id": obj.get("environment_id"),
            "id": obj.get("id"),
            "invoice_cadence": obj.get("invoice_cadence"),
            "metadata": obj.get("metadata"),
            "meter_display_name": obj.get("meter_display_name"),
            "meter_id": obj.get("meter_id"),
            "plan_display_name": obj.get("plan_display_name"),
            "price_id": obj.get("price_id"),
            "price_type": obj.get("price_type"),
            "price_unit": obj.get("price_unit"),
            "price_unit_id": obj.get("price_unit_id"),
            "quantity": obj.get("quantity"),
            "start_date": obj.get("start_date"),
            "status": obj.get("status"),
            "subscription_id": obj.get("subscription_id"),
            "tenant_id": obj.get("tenant_id"),
            "trial_period": obj.get("trial_period"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by")
        })
        return _obj



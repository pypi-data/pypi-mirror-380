# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flexprice.models.types_transaction_reason import TypesTransactionReason
from typing import Optional, Set
from typing_extensions import Self

class DtoTopUpWalletRequest(BaseModel):
    """
    DtoTopUpWalletRequest
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="amount is the amount in the currency of the wallet to be added NOTE: this is not the number of credits to add, but the amount in the currency amount = credits_to_add * conversion_rate if both amount and credits_to_add are provided, amount will be ignored ex if the wallet has a conversion_rate of 2 then adding an amount of 10 USD in the wallet wil add 5 credits in the wallet")
    credits_to_add: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="credits_to_add is the number of credits to add to the wallet")
    description: Optional[StrictStr] = Field(default=None, description="description to add any specific details about the transaction")
    expiry_date_utc: Optional[StrictStr] = Field(default=None, description="expiry_date_utc is the expiry date in UTC timezone ex 2025-01-01 00:00:00 UTC")
    idempotency_key: StrictStr = Field(description="idempotency_key is a unique key for the transaction")
    metadata: Optional[Dict[str, StrictStr]] = None
    priority: Optional[StrictInt] = Field(default=None, description="priority is the priority of the transaction lower number means higher priority default is nil which means no priority at all")
    transaction_reason: TypesTransactionReason
    __properties: ClassVar[List[str]] = ["amount", "credits_to_add", "description", "expiry_date_utc", "idempotency_key", "metadata", "priority", "transaction_reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoTopUpWalletRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoTopUpWalletRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "credits_to_add": obj.get("credits_to_add"),
            "description": obj.get("description"),
            "expiry_date_utc": obj.get("expiry_date_utc"),
            "idempotency_key": obj.get("idempotency_key"),
            "metadata": obj.get("metadata"),
            "priority": obj.get("priority"),
            "transaction_reason": obj.get("transaction_reason")
        })
        return _obj



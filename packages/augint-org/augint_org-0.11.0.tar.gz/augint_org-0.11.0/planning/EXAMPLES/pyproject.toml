[project]
name = "augint-library"
version = "1.32.0"
description = "A template library for Python library projects using Poetry and Semantic Release."
authors = [
    {name = "Samuel Vange",email = "7166607+svange@users.noreply.github.com"}
]
readme = "README.md"
requires-python = ">=3.9,<4.0"
license = { file = "LICENSE" }
packages = [
    { include = "augint_library", from = "src" },
]

dependencies = [
    "click (>=8.1.0,<8.2.0)",
    "toml (>=0.10.0,<1.0.0)",
]

[project.scripts]
ai-test-script = "augint_library.cli:cli"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
python-semantic-release = "^10.2.0"
augint-github = "^1.3.1"
pytest = "^8.4.1"
pytest-html = "^4.1.1"
pytest-cov = "^6.2.1"
pre-commit = "^4.2.0"
ruff = "^0.12.1"
pdoc = "^15.0.4"
boto3 = "^1.39.3"
pytest-click = "^1.1.0"
mypy = "^1.0.0"
hypothesis = "^6.100.0"
pytest-benchmark = "^4.0.0"
pytest-mock = "^3.14.1"
mutmut = "^2.4.0"
pytest-watch = "^4.2.0"


[tool.poetry.group.security.dependencies]
bandit = {extras = ["toml"], version = "^1.8.6"}
safety = "^3.6.0"
pip-audit = "^2.9.0"
semgrep = "<1.100"


[tool.poetry.group.compliance.dependencies]
license-expression = "^30.4.3"
pip-licenses = "^5.0.0"


[tool.poetry.group.telemetry.dependencies]
sentry-sdk = "^2.0.0"

[tool.semantic_release]
assets = []
commit_message = "chore(release): {version}\n\nAutomatically generated by python-semantic-release [skip ci]"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = false
no_git_verify = false
tag_format = "v{version}"
version_toml = ["pyproject.toml:project.version"]
version_pattern = [
    "src/augint_library/__init__.py:__version__ = \"{version}\""
]
build_command = "poetry install && poetry build"
build_command_env = []

[tool.pytest.ini_options]
addopts = '-m "not slow and not ci_only" --html=test-report.html --self-contained-html --benchmark-skip'
log_cli = true
log_cli_level = "INFO"
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "pytest.log"
log_file_level = "INFO"
#environment_table_redact_list = ".*key.*"
#render_collapsed = "failed,error"
markers = [
    "unit: mark test as unit test (< 1 second, no external dependencies)",
    "integration: mark test as integration test (requires infrastructure like AWS, databases)",
    "slow: mark test as slow (does real AWS operations, takes several minutes)",
    "ci_only: mark test to only run in CI environment (requires infrastructure)",
]

[tool.pytest_benchmark]
# Benchmark configuration for performance testing
json_file = "benchmark-report.json"
histogram_file = "benchmark-histogram.svg"
compare_file = "benchmark-compare.json"
sort = "mean"
group_by = "group"
disable_gc = true
min_rounds = 5
timer = "time.perf_counter"
calibration_precision = 10
warmup = false
warmup_iterations = 100000
only_run_benchmarks = false


[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.dev]
match = "dev"
prerelease = true
prerelease_token = "dev"

[tool.semantic_release.changelog]
mode = "update"
insertion_flag = "<!-- version list -->"
template_dir = "templates"
exclude_commit_patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Initial [Cc]ommit.*''',
]

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "docs"]
other_allowed_tags = ["build", "chore", "ci", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
insecure = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"
fallback_env = "GITHUB_TOKEN"

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_context = true
show_column_numbers = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "sentry_sdk.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
# Library coverage requirement from CLAUDE.md
fail_under = 90
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "raise AssertionError",
    "if __name__ == .__main__.:",
    # Protocol method bodies that contain only ellipsis
    "^\\s*\\.\\.\\.$",
]

[tool.license-compliance]
# License exception override mechanism
# Allows explicitly approved GPL/AGPL dependencies with justification and expiration
# Format: { package = "name", license = "license-id", justification = "reason", approved_by = "team", expires = "YYYY-MM-DD" }
exceptions = [
    # Example exceptions (uncomment and modify for real usage):
    # { package = "mysqlclient", license = "GPL-2.0+", justification = "Database connector for internal dev tools only, not distributed", approved_by = "legal-team", expires = "2025-12-31" },
    # { package = "pytest-postgresql", license = "GPL-3.0", justification = "Test dependency only, not included in production build", approved_by = "security-team", expires = "2026-06-01" }
]

[tool.ruff]
# Ruff configuration for Python code quality
line-length = 100  # Reasonable for modern monitors
target-version = "py39"  # Match project's minimum Python version
src = ["src", "tests"]  # Explicit source directories

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "S",    # bandit security
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate (commented code)
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "RUF",  # ruff-specific rules
]
ignore = [
    "S101",    # Use of assert in tests is fine
    "PLR0913", # Too many arguments (library APIs need flexibility)
    "TRY003",  # Long exception messages are OK in libraries
    "B008",    # Function calls in argument defaults (needed for Click)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S", "ARG", "PLR2004", "PLC0415", "TRY301", "B904"]  # Tests have different requirements
"bootstrap-*.py" = ["T10", "S", "PTH", "PLR2004", "E501", "TRY300", "B904", "PLR0912", "PLR0915", "PLC0415"]  # Bootstrap scripts are one-time use
"src/augint_library/cli.py" = ["E501"]  # Long lines in docstring examples OK
"tests/conftest.py" = ["RUF003"]  # Unicode quotes in comments OK
"tests/unit/test_protocol_coverage.py" = ["E501"]  # Long comment line OK
"tests/test_license_exceptions.py" = ["DTZ005", "DTZ007", "PTH123", "PT011"]  # Date handling for license expiry
"tests/test_security_gates.py" = ["PTH123", "SIM102"]  # Path operations and nested conditions OK in tests
"tests/unit/test_resilience.py" = ["PT011"]  # pytest.raises match parameter not needed for simple tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mutmut]
# Mutation testing configuration
paths_to_mutate = "src/"
tests_dir = "tests/"
runner = "pytest -x -m 'not slow and not ci_only and not integration' --no-header -q"
dict_synonyms = "Struct,NamedStruct"

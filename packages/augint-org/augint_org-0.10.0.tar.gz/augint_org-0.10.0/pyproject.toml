[project]
name = "augint-org"
version = "0.10.0"
description = "CLI tool for managing AWS Organization accounts with Control Tower"
authors = [
    {name = "Samuel Vange", email = "sam@augmentingintegrations.com"}
]
readme = "README.md"
requires-python = ">=3.12"
license = { file = "LICENSE" }
keywords = ["aws", "control-tower", "organizations", "sso", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "Topic :: System :: Systems Administration",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "boto3>=1.34",
    "click>=8.1",
    "pyyaml>=6.0",
    "python-dotenv>=1.0",
    "rich>=13.7",
]

[project.scripts]
ai-org = "ai_org.cli:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "augint-github>=1.3.1",
    "pytest>=8.3.0",
    "pytest-click>=1.1.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=5.0.0",
    "pytest-html>=4.1.1",
    "moto[organizations,sso-admin]>=5.0.0",
    "mypy>=1.11.0",
    "ruff>=0.7.0",
    "pre-commit>=4.0.0",
    "python-semantic-release>=10.0.0",
    "pdoc>=15.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0",
    "pip-audit>=2.0.0",
]

compliance = [
    "pip-licenses>=5.0.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/ai_org"]

[tool.ruff]
line-length = 100
target-version = "py39"
src = ["src", "tests"]

[tool.ruff.lint]
select = ["E", "F", "I", "N", "UP", "S", "B", "A", "C4", "DTZ", "T10", "ISC", "ICN", "PIE", "PT", "RET", "SIM", "ARG", "PTH", "ERA", "PGH", "PL", "TRY", "RUF"]
ignore = [
    "S101",     # Use of assert
    "PLR0913",  # Too many arguments
    "TRY003",   # Long messages in exceptions
    "B008",     # Function calls in default arguments
    "TRY300",   # Consider moving statement to else block
    "TRY301",   # Abstract raise to inner function
    "S110",     # Try-except-pass without logging
    "PLR0912",  # Too many branches
    "PLR0915",  # Too many statements
    "RUF001",   # Ambiguous unicode character
    "PLC0415",  # Import should be at top level
    "TRY002",   # Create custom exception
    "E501",     # Line too long (handled by formatter)
    "PTH123",   # open() vs Path.open()
    "PLW0602",  # Global statement without assignment
    "PLW0603",  # Using global statement
    "SIM108",   # Use ternary operator
    "SIM105",   # Use contextlib.suppress
    "S108",     # Insecure temp file usage
    "DTZ005",   # Datetime without timezone
    "DTZ003",   # Datetime.utcnow
    "E722",     # Bare except
    "PLR2004",  # Magic value in comparison
    "B904",     # Raise without from inside except
    "ARG001",   # Unused function argument
    "F841",     # Local variable assigned but never used
]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disable_error_code = ["misc", "no-any-return"]  # Ignore untyped decorator and boto3 return warnings

[[tool.mypy.overrides]]
module = "boto3.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "-v --tb=short --html=test-report.html --self-contained-html --css=resources/pytest-html.css"
testpaths = ["tests"]
markers = [
    "unit: mark test as unit test (fast, no external dependencies)",
    "integration: mark test as integration test (may require AWS mocks)",
    "slow: mark test as slow (takes more than a few seconds)",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
fail_under = 30  # TODO: Increase to 80% with comprehensive test coverage
show_missing = true

[tool.semantic_release]
assets = []
commit_message = "chore(release): {version}\n\nAutomatically generated by python-semantic-release [skip ci]"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = false
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"
version_toml = ["pyproject.toml:project.version"]
# Version is now dynamically loaded from pyproject.toml via importlib.metadata
# No need to update __init__.py anymore
version_pattern = []
build_command = "uv sync && uv build"
build_command_env = []

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.dev]
match = "dev"
prerelease = true
prerelease_token = "dev"

[tool.semantic_release.changelog]
mode = "update"
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Initial [Cc]ommit.*''',
]

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "docs", "refactor"]
allowed_tags = ["build", "chore", "ci", "feat", "fix", "perf", "style", "refactor", "test", "docs"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = false  # We handle GitHub releases separately in the workflow

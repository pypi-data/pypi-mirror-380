from typing import Any, Generic, TypeVar

K = TypeVar("K")
V = TypeVar("V")

class SharedDict(Generic[K, V]):
    def __init__(
        self,
        name: str,
        data: dict[str, Any] | None = None,
        /,
        *,
        size: int = 128 * 1024 * 1024,
        create: bool = False,
        max_keys: int = 128,
    ) -> None: ...
    def close(self) -> None: ...
    def unlink(self) -> None: ...
    def is_closed(self) -> bool: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: K) -> bool: ...
    def __getitem__(self, key: K) -> V: ...
    def __setitem__(self, key: K, value: V) -> None: ...
    def __delitem__(self, key: K) -> None: ...
    def __iter__(self) -> Any: ...
    def get(self, key: K, default: V = None) -> V: ...
    def keys(self) -> list[K]: ...
    def keys_atomic(self) -> list[K]: ...
    def items(self) -> list[tuple[K, V]]: ...
    def recommend_sizing(
        self, target_entries: int | None = None
    ) -> dict[str, object]: ...

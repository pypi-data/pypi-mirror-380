{"!instanceof":{"InterfacePass":[],"ListOption":[],"Option":["anonymous_0","anonymous_1","anonymous_10","anonymous_11","anonymous_12","anonymous_13","anonymous_14","anonymous_15","anonymous_16","anonymous_2","anonymous_3","anonymous_4","anonymous_5","anonymous_6","anonymous_7","anonymous_8","anonymous_9"],"Pass":["AddPostprocess","Deinit","ExtraOptimize","FusePreprocess","ImportCalibrationTable","Init","ProcessorAssign","ProcessorOptimize","Pruning","QDQConvert","ShapeInfer","StructOptimize"],"PassBase":["AddPostprocess","Deinit","ExtraOptimize","FusePreprocess","ImportCalibrationTable","Init","ProcessorAssign","ProcessorOptimize","Pruning","QDQConvert","ShapeInfer","StructOptimize"],"Statistic":[]},"!tablegen_json_version":1,"AddPostprocess":{"!anonymous":false,"!fields":[],"!name":"AddPostprocess","!superclasses":["PassBase","Pass"],"argument":"add-postprocess","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createAddPostprocessPass()","dependentDialects":["TopDialect"],"description":"","options":[{"def":"anonymous_16","kind":"def","printable":"anonymous_16"}],"statistics":[],"summary":"post handle in mlir by tpuc-opt"},"Deinit":{"!anonymous":false,"!fields":[],"!name":"Deinit","!superclasses":["PassBase","Pass"],"argument":"deinit","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createDeinitPass()","dependentDialects":["TopDialect"],"description":"","options":[{"def":"anonymous_3","kind":"def","printable":"anonymous_3"}],"statistics":[],"summary":"deinit module"},"ExtraOptimize":{"!anonymous":false,"!fields":[],"!name":"ExtraOptimize","!superclasses":["PassBase","Pass"],"argument":"extra-optimize","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createExtraOptimizePass()","dependentDialects":["TopDialect"],"description":"","options":[],"statistics":[],"summary":"after top optimize in mlir by tpuc-opt"},"FusePreprocess":{"!anonymous":false,"!fields":[],"!name":"FusePreprocess","!superclasses":["PassBase","Pass"],"argument":"fuse-preprocess","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createFusePreprocessPass()","dependentDialects":["TopDialect","mlir::quant::QuantizationDialect"],"description":"","options":[{"def":"anonymous_13","kind":"def","printable":"anonymous_13"},{"def":"anonymous_14","kind":"def","printable":"anonymous_14"},{"def":"anonymous_15","kind":"def","printable":"anonymous_15"}],"statistics":[],"summary":"Fuse preprocess in cvimodels"},"ImportCalibrationTable":{"!anonymous":false,"!fields":[],"!name":"ImportCalibrationTable","!superclasses":["PassBase","Pass"],"argument":"import-calibration-table","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createImportCalibrationTablePass()","dependentDialects":["top::TopDialect","mlir::quant::QuantizationDialect"],"description":"","options":[{"def":"anonymous_10","kind":"def","printable":"anonymous_10"},{"def":"anonymous_11","kind":"def","printable":"anonymous_11"}],"statistics":[],"summary":"Import calibration table by tpuc-opt"},"Init":{"!anonymous":false,"!fields":[],"!name":"Init","!superclasses":["PassBase","Pass"],"argument":"init","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createInitPass()","dependentDialects":["TopDialect"],"description":"","options":[{"def":"anonymous_0","kind":"def","printable":"anonymous_0"},{"def":"anonymous_1","kind":"def","printable":"anonymous_1"},{"def":"anonymous_2","kind":"def","printable":"anonymous_2"}],"statistics":[],"summary":"init module"},"ProcessorAssign":{"!anonymous":false,"!fields":[],"!name":"ProcessorAssign","!superclasses":["PassBase","Pass"],"argument":"processor-assign","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createProcessorAssignPass()","dependentDialects":["TopDialect"],"description":"","options":[{"def":"anonymous_4","kind":"def","printable":"anonymous_4"},{"def":"anonymous_5","kind":"def","printable":"anonymous_5"},{"def":"anonymous_6","kind":"def","printable":"anonymous_6"},{"def":"anonymous_7","kind":"def","printable":"anonymous_7"},{"def":"anonymous_8","kind":"def","printable":"anonymous_8"},{"def":"anonymous_9","kind":"def","printable":"anonymous_9"}],"statistics":[],"summary":"Assign chip type"},"ProcessorOptimize":{"!anonymous":false,"!fields":[],"!name":"ProcessorOptimize","!superclasses":["PassBase","Pass"],"argument":"processor-top-optimize","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createProcessorOptimizePass()","dependentDialects":["TopDialect"],"description":"","options":[],"statistics":[],"summary":"Before lowering, do some extra Op conversions for different chips"},"Pruning":{"!anonymous":false,"!fields":[],"!name":"Pruning","!superclasses":["PassBase","Pass"],"argument":"pruning","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createPruningPass()","dependentDialects":["TopDialect"],"description":"","options":[{"def":"anonymous_12","kind":"def","printable":"anonymous_12"}],"statistics":[],"summary":"do pruning for matmul op"},"QDQConvert":{"!anonymous":false,"!fields":[],"!name":"QDQConvert","!superclasses":["PassBase","Pass"],"argument":"convert-qdq-to-calibrated-dialect","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createQDQConvertPass()","dependentDialects":["top::TopDialect","mlir::quant::QuantizationDialect"],"description":"","options":[],"statistics":[],"summary":"Convert from qdq model to regular quantized model"},"ShapeInfer":{"!anonymous":false,"!fields":[],"!name":"ShapeInfer","!superclasses":["PassBase","Pass"],"argument":"shape-infer","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createShapeInferPass()","dependentDialects":["TopDialect"],"description":"","options":[],"statistics":[],"summary":"do shape inference for each op"},"StructOptimize":{"!anonymous":false,"!fields":[],"!name":"StructOptimize","!superclasses":["PassBase","Pass"],"argument":"struct-optimize","baseClass":"::mlir::OperationPass<ModuleOp>","constructor":"createStructOptimizePass()","dependentDialects":["top::TopDialect"],"description":"","options":[],"statistics":[],"summary":"struct optimization"},"anonymous_0":{"!anonymous":true,"!fields":[],"!name":"anonymous_0","!superclasses":["Option"],"additionalOptFlags":"","argument":"freq","cppName":"freq","defaultValue":"","description":"chip frequance","type":"uint64_t"},"anonymous_1":{"!anonymous":true,"!fields":[],"!name":"anonymous_1","!superclasses":["Option"],"additionalOptFlags":"","argument":"weight_in_mem","cppName":"weight_in_mem","defaultValue":"false","description":"whether to save weight in memory instead of hard disk.","type":"bool"},"anonymous_10":{"!anonymous":true,"!fields":[],"!name":"anonymous_10","!superclasses":["Option"],"additionalOptFlags":"","argument":"file","cppName":"tableFile","defaultValue":"","description":"calibration table file path","type":"std::string"},"anonymous_11":{"!anonymous":true,"!fields":[],"!name":"anonymous_11","!superclasses":["Option"],"additionalOptFlags":"","argument":"asymmetric","cppName":"isAsymmetric","defaultValue":"true","description":"true for asymmetric quantization, or false for symmetric","type":"bool"},"anonymous_12":{"!anonymous":true,"!fields":[],"!name":"anonymous_12","!superclasses":["Option"],"additionalOptFlags":"","argument":"config","cppName":"config","defaultValue":"","description":"path of config_file.","type":"std::string"},"anonymous_13":{"!anonymous":true,"!fields":[],"!name":"anonymous_13","!superclasses":["Option"],"additionalOptFlags":"","argument":"mode","cppName":"mode","defaultValue":"","description":"default quantization mode: INT8/BF16","type":"std::string"},"anonymous_14":{"!anonymous":true,"!fields":[],"!name":"anonymous_14","!superclasses":["Option"],"additionalOptFlags":"","argument":"customization_format","cppName":"customization_format","defaultValue":"","description":"set input pixel_format","type":"std::string"},"anonymous_15":{"!anonymous":true,"!fields":[],"!name":"anonymous_15","!superclasses":["Option"],"additionalOptFlags":"","argument":"align","cppName":"align","defaultValue":"false","description":"whether input align, only for cv18xx","type":"bool"},"anonymous_16":{"!anonymous":true,"!fields":[],"!name":"anonymous_16","!superclasses":["Option"],"additionalOptFlags":"","argument":"type","cppName":"type","defaultValue":"","description":"type of add-postprocess.","type":"std::string"},"anonymous_2":{"!anonymous":true,"!fields":[],"!name":"anonymous_2","!superclasses":["Option"],"additionalOptFlags":"","argument":"level","cppName":"level","defaultValue":"","description":"log level","type":"uint64_t"},"anonymous_3":{"!anonymous":true,"!fields":[],"!name":"anonymous_3","!superclasses":["Option"],"additionalOptFlags":"","argument":"no_save_weight","cppName":"no_save_weight","defaultValue":"false","description":"whether to save weight.","type":"bool"},"anonymous_4":{"!anonymous":true,"!fields":[],"!name":"anonymous_4","!superclasses":["Option"],"additionalOptFlags":"","argument":"chip","cppName":"chip","defaultValue":"","description":"chip: cv183x/cv182x/cv186x/bm1684/bm1684x/bm1688/bm1690/cv184x/sgtpuv8/sg2262","type":"std::string"},"anonymous_5":{"!anonymous":true,"!fields":[],"!name":"anonymous_5","!superclasses":["Option"],"additionalOptFlags":"","argument":"mode","cppName":"mode","defaultValue":"","description":"default quantization mode: INT8/BF16/F16/F32/F8/F8E4M3/F8E5M2","type":"std::string"},"anonymous_6":{"!anonymous":true,"!fields":[],"!name":"anonymous_6","!superclasses":["Option"],"additionalOptFlags":"","argument":"num_device","cppName":"num_device","defaultValue":"1","description":"num of devices to distributed.","type":"int64_t"},"anonymous_7":{"!anonymous":true,"!fields":[],"!name":"anonymous_7","!superclasses":["Option"],"additionalOptFlags":"","argument":"num_core","cppName":"num_core","defaultValue":"1","description":"core_num=1: Set how many cores will be used to run model in parallel.","type":"int64_t"},"anonymous_8":{"!anonymous":true,"!fields":[],"!name":"anonymous_8","!superclasses":["Option"],"additionalOptFlags":"","argument":"addr_mode","cppName":"addr_mode","defaultValue":"\"auto\"","description":"addr assign mode","type":"std::string"},"anonymous_9":{"!anonymous":true,"!fields":[],"!name":"anonymous_9","!superclasses":["Option"],"additionalOptFlags":"","argument":"high_precision","cppName":"high_precision","defaultValue":"false","description":"force some ops goto fp32","type":"bool"}}

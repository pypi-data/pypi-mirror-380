// Demo curve editing with ImGuizmo
// See equivalent python program: bindings/imgui_bundle/demos/demos_imguizmo/demo_guizmo_sequence.py

#include "demo_utils/api_demos.h"

#include "imgui.h"
#define IMGUI_DEFINE_MATH_OPERATORS
#include "imgui_internal.h"
#include "immapp/immapp.h"
#include "ImGuizmoPure/ImSequencerPure.Draft_h"
#include "ImGuizmoPure/ImCurveEditPure.h"

#include <vector>
#include <deque>
#include <algorithm>


static std::vector<std::string> SequencerItemTypeNames = { "Camera","Music", "ScreenEffect", "FadeIn", "Animation" };


float kDpi()
{
    return ImGui::GetFontSize() / 14.5f;
}

// This is an extract from ImGuizmo example:
// https://github.com/CedricGuillemet/ImGuizmo/blob/master/vcpkg-example/main.cpp
struct RampEdit : public ImCurveEdit::DelegatePure
{
    RampEdit()
    {
        mPts = {
            {
                ImVec2(-10.f, 0),
                ImVec2(20.f, 0.6f),
                ImVec2(25.f, 0.2f),
                ImVec2(70.f, 0.4f),
                ImVec2(120.f, 1.f),
            },
            {
                ImVec2(-50.f, 0.2f),
                ImVec2(33.f, 0.7f),
                ImVec2(80.f, 0.2f),
                ImVec2(82.f, 0.8f),
            },
            {
                ImVec2(40.f, 0),
                ImVec2(60.f, 0.1f),
                ImVec2(90.f, 0.82f),
                ImVec2(150.f, 0.24f),
                ImVec2(200.f, 0.34f),
                ImVec2(250.f, 0.12f),
            }
        };
        mbVisible = {true, true, true};
        mMax = ImVec2(1.f, 1.f);
        mMin = ImVec2(0.f, 0.f);
    }
    size_t GetCurveCount() override
    {
        return 3;
    }

    bool IsVisible(size_t curveIndex) override
    {
        return mbVisible[curveIndex];
    }
    std::vector<ImVec2>& GetPointsList(size_t curveIndex) override
    {
        return mPts[curveIndex];
    }


    uint32_t GetCurveColor(size_t curveIndex) override
    {
        uint32_t cols[] = { 0xFF0000FF, 0xFF00FF00, 0xFFFF0000 };
        return cols[curveIndex];
    }

    virtual ImCurveEdit::CurveType GetCurveType(size_t curveIndex) const override { return ImCurveEdit::CurveSmooth; }
    virtual int EditPoint(size_t curveIndex, int pointIndex, ImVec2 value) override
    {
        mPts[curveIndex][pointIndex] = ImVec2(value.x, value.y);
        SortValues(curveIndex);
        for (size_t i = 0; i < GetPointCount(curveIndex); i++)
        {
            if (mPts[curveIndex][i].x == value.x)
                return (int)i;
        }
        return pointIndex;
    }
    virtual void AddPoint(size_t curveIndex, ImVec2 value) override
    {
        mPts[curveIndex].push_back(value);
        SortValues(curveIndex);
    }
    virtual ImVec2& GetMax() override { return mMax; }
    virtual ImVec2& GetMin() override { return mMin; }
    virtual unsigned int GetBackgroundColor() override { return 0; }

    std::vector<std::vector<ImVec2>> mPts;
    std::deque<bool> mbVisible; // avoid vector<bool>!
    ImVec2 mMin;
    ImVec2 mMax;
private:
    void SortValues(size_t curveIndex)
    {
        auto b = std::begin(mPts[curveIndex]);
        auto e = std::begin(mPts[curveIndex]) + GetPointCount(curveIndex);
        std::sort(b, e, [](ImVec2 a, ImVec2 b) { return a.x < b.x; });
    }
};


struct MySequence : public ImSequencer::SequenceInterfacePure
{
    // interface with sequencer

    virtual int GetFrameMin() const {
        return mFrameMin;
    }
    virtual int GetFrameMax() const {
        return mFrameMax;
    }
    virtual int GetItemCount() const { return (int)myItems.size(); }

    virtual int GetItemTypeCount() const { return SequencerItemTypeNames.size(); }
    virtual const char* GetItemTypeName(int typeIndex) const { return SequencerItemTypeNames[typeIndex].c_str(); }
    virtual const char* GetItemLabel(int index) const
    {
        static char tmps[512];
        snprintf(tmps, 512, "[%02d] %s", index, SequencerItemTypeNames[myItems[index].mType].c_str());
        return tmps;
    }

//    virtual void Get(int index, int** start, int** end, int* type, unsigned int* color)
//    {
//        MySequenceItem& item = myItems[index];
//        if (color)
//            *color = 0xFFAA8080; // same color for everyone, return color based on type
//        if (start)
//            *start = &item.mFrameStart;
//        if (end)
//            *end = &item.mFrameEnd;
//        if (type)
//            *type = item.mType;
//    }

    ImSequencer::SequenceInterfaceInfo GetPure(int index) override
    {
        MySequenceItem& item = myItems[index];

        ImSequencer::SequenceInterfaceInfo r;
        r.color = 0xFFAA8080; // same color for everyone, return color based on type
        r.values = { item.mFrameStart,  item.mFrameEnd };
        r.type = item.mType;
        return r;
    }

    virtual void Add(int type) { myItems.push_back(MySequenceItem{ type, 0, 10, false }); };
    virtual void Del(int index) { myItems.erase(myItems.begin() + index); }
    virtual void Duplicate(int index) { myItems.push_back(myItems[index]); }

    virtual size_t GetCustomHeight(int index) { return myItems[index].mExpanded ? 300 : 0; }

    // my datas
    MySequence() : mFrameMin(0), mFrameMax(0) {}
    int mFrameMin, mFrameMax;
    struct MySequenceItem
    {
        int mType;
        int mFrameStart, mFrameEnd;
        bool mExpanded;
    };
    std::vector<MySequenceItem> myItems;
    RampEdit rampEdit;

    virtual void DoubleClick(int index) {
        if (myItems[index].mExpanded)
        {
            myItems[index].mExpanded = false;
            return;
        }
        for (auto& item : myItems)
            item.mExpanded = false;
        myItems[index].mExpanded = !myItems[index].mExpanded;
    }

    virtual void CustomDraw(int index, ImDrawList* draw_list, const ImRect& rc, const ImRect& legendRect, const ImRect& clippingRect, const ImRect& legendClippingRect)
    {
        static const char* labels[] = { "Translation", "Rotation" , "Scale" };

        rampEdit.mMax = ImVec2(float(mFrameMax), 1.f);
        rampEdit.mMin = ImVec2(float(mFrameMin), 0.f);
        draw_list->PushClipRect(legendClippingRect.Min, legendClippingRect.Max, true);
        for (int i = 0; i < 3; i++)
        {
            ImVec2 pta(legendRect.Min.x + 30 * kDpi(), legendRect.Min.y + i * 14.f  * kDpi());
            ImVec2 ptb(legendRect.Max.x, legendRect.Min.y + (i + 1) * 14.f * kDpi());
            draw_list->AddText(pta, rampEdit.mbVisible[i] ? 0xFFFFFFFF : 0x80FFFFFF, labels[i]);
            if (ImRect(pta, ptb).Contains(ImGui::GetMousePos()) && ImGui::IsMouseClicked(0))
                rampEdit.mbVisible[i] = !rampEdit.mbVisible[i];
        }
        draw_list->PopClipRect();

        ImGui::SetCursorScreenPos(rc.Min);
        ImCurveEdit::Edit(rampEdit, rc.Max - rc.Min, 137  + index, &clippingRect);
    }

    virtual void CustomDrawCompact(int index, ImDrawList* draw_list, const ImRect& rc, const ImRect& clippingRect)
    {
        rampEdit.mMax = ImVec2(float(mFrameMax), 1.f);
        rampEdit.mMin = ImVec2(float(mFrameMin), 0.f);
        draw_list->PushClipRect(clippingRect.Min, clippingRect.Max, true);
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < rampEdit.GetPointCount(i); j++)
            {
                float p = rampEdit.mPts[i][j].x;
                if (p < myItems[index].mFrameStart || p > myItems[index].mFrameEnd)
                    continue;
                float r = (p - mFrameMin) / float(mFrameMax - mFrameMin);
                float x = ImLerp(rc.Min.x, rc.Max.x, r);
                draw_list->AddLine(ImVec2(x, rc.Min.y + 6  * kDpi()), ImVec2(x, rc.Max.y - 4 * kDpi()), 0xAA000000, 4.f * kDpi());
            }
        }
        draw_list->PopClipRect();
    }
};


// This returns a closure function that will later be invoked to run the app
GuiFunction make_closure_demo_guizmo_sequencer()
{
    // sequence with default values
    MySequence mySequence;
    {
        mySequence.mFrameMin = -100;
        mySequence.mFrameMax = 1000;
        mySequence.myItems.push_back(MySequence::MySequenceItem{ 0, 10, 30, false });
        mySequence.myItems.push_back(MySequence::MySequenceItem{ 1, 20, 30, true });
        mySequence.myItems.push_back(MySequence::MySequenceItem{ 3, 12, 60, false });
        mySequence.myItems.push_back(MySequence::MySequenceItem{ 2, 61, 90, false });
        mySequence.myItems.push_back(MySequence::MySequenceItem{ 4, 90, 99, false });
    }

    // let's create the sequencer
    //    static int selectedEntry = -1;
    static int firstFrame = 0;
    static bool expanded = true;
    static int currentFrame = 100;

    auto gui = [mySequence]() mutable // mutable => this is a closure
    {
        ImGui::PushItemWidth(130 * kDpi());
        ImGui::InputInt("Frame Min", &mySequence.mFrameMin);
        ImGui::SameLine();
        ImGui::InputInt("Frame ", &currentFrame);
        ImGui::SameLine();
        ImGui::InputInt("Frame Max", &mySequence.mFrameMax);
        ImGui::PopItemWidth();
//        Sequencer(
//            &mySequence,
//            &currentFrame, &expanded, &selectedEntry, &firstFrame, ImSequencer::SEQUENCER_EDIT_STARTEND | ImSequencer::SEQUENCER_ADD | ImSequencer::SEQUENCER_DEL | ImSequencer::SEQUENCER_COPYPASTE | ImSequencer::SEQUENCER_CHANGE_FRAME);

        auto sequencerResult = ImSequencer::SequencerPure(&mySequence);

        // add a UI to edit that particular item
        //if (selectedEntry != -1)
        if (sequencerResult.selectedEntry != -1)
        {
            const MySequence::MySequenceItem &item = mySequence.myItems[sequencerResult.selectedEntry];
            ImGui::Text("I am a %s, please edit me", SequencerItemTypeNames[item.mType].c_str());
            // switch (type) ....
        }
    };
    return gui;
}


#ifndef IMGUI_BUNDLE_BUILD_DEMO_AS_LIBRARY
int main()
{
    auto gui = make_closure_demo_guizmo_sequencer();

    // Run app
    HelloImGui::SimpleRunnerParams runnerParams{.guiFunction = gui, .windowSize = {1200, 700}};
    ImmApp::Run(runnerParams);
    return 0;
}
#endif

[build-system]
requires = ["scikit-build-core>=0.9.1", "nanobind>=2.4.0"]
build-backend = "scikit_build_core.build"

# To debug build backend, replace by:
# cf https://peps.python.org/pep-0517/#in-tree-build-backends
#    requires = ["pybind11", "packaging", "pathspec"]
#    build-backend = "scikit_build_core.build"
#    backend-path = ["_backends/scikit-build-core/src/"]

[project]
name = "imgui-bundle"
version = "1.92.4"  # 1.92.4  - Remember to mirror changes on line 2 of main CMakeLists! This mirrors IMGUI_VERSION_NUM in imgui.h
description="Dear ImGui Bundle: From expressive code to powerful GUIs in no time. A fast, feature-rich, cross-platform toolkit for C++ and Python."
readme = "bindings/imgui_bundle/Readme_pypi.md"
authors = [ { name = "Pascal Thomet", email = "pthomet@gmail.com" } ]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "numpy",
    "munch",
    "glfw",
    "PyOpenGL",
    "pillow",
]

[project.optional-dependencies]
test = ["pytest"]

[project.urls]
Homepage = "https://pthom.github.io/imgui_bundle/"
Documentation = "https://pthom.github.io/imgui_bundle/"
Repository = "https://github.com/pthom/imgui_bundle"
Issues = "https://github.com/pthom/imgui_bundle/issues"
Changelog = "https://github.com/pthom/imgui_bundle/blob/main/CHANGELOG.md"

[project.scripts]
demo_imgui_bundle="imgui_bundle.demos_python.demo_imgui_bundle:main"
imgui_bundle_demo="imgui_bundle.demos_python.demo_imgui_bundle:main"

[tool.scikit-build]
wheel.expand-macos-universal-tags = true
wheel.packages = ["bindings/imgui_bundle"]
sdist.exclude = ["bindings/imgui_bundle/doc", "devel_docs"]

cmake.version = ">=3.26.1"
build.verbose = true
logging.level = "INFO"


[tool.isort]
profile = "black"


#####################################
# Wheels options
#####################################
[tool.cibuildwheel]
build-verbosity = 1

# Target python versions:
build = ["cp311-*", "cp312-*", "cp313-*"]

# Tests
test-requires = "pytest"
test-command = "pytest {project}/tests"  # cibuildwheel doc says pytest {package}/tests !


#------------------------------------
# macos wheels options
#------------------------------------
[tool.cibuildwheel.macos]
# identify whether this is a M1 or intel
before-build = "uname -a"
# Skip trying to test arm64 builds on Intel Macs
# test-skip = ["*-macosx_arm64 *-macosx_universal2:arm64"]
#
# Skip trying to test x86_64 builds on Mac M1
# test-skip = ["*-macosx_x86_64 *-macosx_universal2:x86_64"]
# test-skip = ["*-macosx_arm64 *-macosx_universal2:arm64"]
test-skip = ["*"]
# Environment variables
# IMGUIBUNDLE_OPENCV_FETCH_SOURCE => Will fetch, build and install a very-minimalist OpenCV
environment = { MACOSX_DEPLOYMENT_TARGET="14.0" }

# Architectures
# -------------
# archs = ["universal2"] # building universal2 fails miserably at this time: see comment in external/immvision/find_opencv.cmake
# So, we build separately for x86_64 and arm64
# archs = ["x86_64", "arm64"]
# Actually, we (temporarily) do not build for arm64 on github's CI, since it succeeds to build a wheel,
# however the resulting wheel wants to link to intel IPP, which is not available on arm.
# => mac arm61 will need to be built and uploaded from an M1 mac
archs = ["x86_64"]

#------------------------------------
# linux wheels options
#------------------------------------
[tool.cibuildwheel.linux]
skip = ["*i686"]
test-skip = ["*-musllinux_*"] #  issue with OpenGL on musllinux
# Environment variables
# IMGUIBUNDLE_OPENCV_FETCH_SOURCE => Will fetch, build and install a very-minimalist OpenCV
# environment = { IMGUIBUNDLE_OPENCV_FETCH_SOURCE="ON" }
environment-pass = ["IMMVISION_OPENCV_GIT_REPO"]  # pass alternative git repo to docker build containers


# Install glfw dev packages on manylinux:
# --------------------------------------
# https://www.glfw.org/docs/3.3/compile.html#compile_deps
# https://iscinumpy.dev/post/cibuildwheel-2-2-0/
# cibuildwheel has added a new platform: musllinux
# Remember, the manylinux1 image has been in maintenance mode, has no support for Python 3.10,
# and will be fully retired at the end of 2021.
#
# This also means that installing things inside the images can vary even further;
# * manylinux1 (CentOS 5), manylinux2010 (CentOS 6), and manylinux2014 (CentOS 7) all use yum;
#     => yum install -y libXcursor-devel libXi-devel libXinerama-devel libXrandr-devel
# * manylinux_2_24 (Debian 8) uses apt (and is stuck on GCC 6),
#     => apt install xorg-dev
# * musllinux_1_1 MUSL based distributions of Linux (like Alpine). uses apk
#
# Also, do the equivalent of:
# sudo apt-get install -y xorg-dev libgl1-mesa-dev libglfw3-dev libglew-dev xvfb

# sudo apt-get install -y libgl1-mesa-dev
before-all = "yum install -y libXcursor-devel libXi-devel libXinerama-devel libXrandr-devel mesa-libGL-devel"
[[tool.cibuildwheel.overrides]]
select = "*-musllinux*"
before-all = "apk add xorg-server-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev mesa-dev mesa-gl"

#------------------------------------
# windows wheels options
#------------------------------------
[tool.cibuildwheel.windows]
skip = ["*win32"]

# Environment variables
# IMGUIBUNDLE_OPENCV_FETCH_SOURCE => Download a precompiled version of opencv4.6.0
# environment = { IMGUIBUNDLE_OPENCV_WIN_USE_OFFICIAL_PREBUILT_460="ON" }

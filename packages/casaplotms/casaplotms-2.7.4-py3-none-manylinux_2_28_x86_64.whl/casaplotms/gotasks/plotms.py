##################### generated by xml-casa (v2) from plotms.xml ####################
##################### efae38a9b6d9a736c50fa0d22e1e02de ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casaplotms.private.task_plotms import plotms as _plotms_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _plotms:
    """
    plotms ---- A plotter/interactive flagger for visibility data.

    
    
    Task for plotting and interacting with visibility data and
    calibration tables.
    
    Plotms provides a variety of axis choices (including data column)
    along with selection, averaging, and transformation options for
    MeasurementSets.  Flag extension parameters are also available for
    interactive flagging operations in the plotter.
    
    All of the provided parameters can also be set using the GUI once
    the application has been launched or through the plotms tool (pm).
    
    Most of the basic plotms functions will work for calibration tables.
    The correlation selection string may be used to select polarization
    in a cal table, including ratio plots ("/"), or use
    polarization selection.  The antenna selection string is used to
    select antenna1 only, rather than baselines as in an MS. When
    plotting parameterized CalTables, such as delays, antpos, gaincurve,
    or opacity, plotms will plot the simple parameters contained in the
    table, not the effective amplitudes or phases sampled at observing
    times, frequencies etc.  BPOLY and GSPLINE tables are supported but
    interactive flagging is not allowed.  Features currently unsupported
    for CalTables include transformations (velocity conversions, etc.)
    and some axis and selection options which do not exist in these
    tables. In the plotms GUI, many options irrelevant for CalTables are
    not hidden when interacting with a CalTable, and such settings will
    be ignored (when benign) or cause an error message.
    

    --------- parameter descriptions ---------------------------------------------

    vis                  Input MS or CalTable (blank for none)
    caltable             Input CalTable (blank for none)
    gridrows             Number of subplot rows
    gridcols             Number of subplot columns
    rowindex             Row location of the plot (0-based)
    colindex             Column location of the plot (0-based)
    plotindex            Index to address a subplot (0-based)
    xaxis                Plot x-axis (blank for default/current)
    xdatacolumn          Data column to use for x-axis (blank for default/current).  Note that unspecified residuals are complex (vector) differences or ratios.
    xframe               Coordinate frame to use for x-axis
    xinterp              Interpolation method for x-axis
    yaxis                Plot y-axis (blank for default/current)
    ydatacolumn          Data column to use for y-axis (blank for default/current). Note that unspecified residuals are complex (vector) differences or ratios.
    yframe               Coordinate frame to use for y-axis
    yinterp              Interpolation method for y-axis
    yaxislocation        Location of the y-axis (blank for default: left)
    selectdata           Enable data selection parameters
    field                Field names or ids (blank for all)
    spw                  Spectral windows:channels (blank for all)
    timerange            Time range (blank for all)
    uvrange              UV range (blank for all)
    antenna              Baseline/antenna names or ids (blank for all)
    scan                 Scan numbers (blank for all)
    correlation          Correlations/polarizations (blank for all)
    polarization         Polarizations (blank for all)
    antpos               Antenna positions (blank for all)
    array                (Sub)array numbers (blank for all)
    observation          Observation IDs (blank for all)
    intent               Observing intent (blank for all)
    feed                 Feed numbers (blank for all)
    msselect             MSSelection TaQL string (blank for none)
    averagedata          Enable data averaging parameters
    avgchannel           Average over channel (blank = False, otherwise value in channels)
    avgtime              Average over time (blank = False, otherwise value in seconds)
    avgscan              Average over scans. Only valid with time averaging
    avgfield             Average over fields. Only valid with time averaging
    avgbaseline          Average over all baselines (mutually exclusive with avgantenna)
    avgantenna           Average per antenna (mutually exclusive with avgbaseline)
    avgspw               Average over all spectral windows
    scalar               Scalar averaging (False=vector averaging)
    transform            Enable data transformations
    freqframe            The frame in which to render frequency and velocity axes
    restfreq             Rest frequency to use for velocity conversions
    veldef               The definition in which to render velocity
    phasecenter          The direction coordinates of the desired center
    extendflag           Extend flagging to other data points not plotted
    extcorr              Extend flags based on correlation
    extchannel           Extend flags based on channel
    iteraxis             The axis over which to iterate
    xselfscale           When True, iterated plots have a common x-axis range (scale).
    yselfscale           When True, iterated plots have a common y-axis range (scale).
    xsharedaxis          Iterated plots on a grid share a common external x-axis per column. Must also set xselfscale=True and gridrows>1.
    ysharedaxis          Iterated plots on a grid share a common external y-axis per row. Must also set yselfscale=True and gridcols>1.
    customsymbol         Enable custom symbol(s) for unflagged points
    symbolshape          Shape of plotted unflagged symbols
    symbolsize           Size of plotted unflagged symbols
    symbolcolor          Color (name or hex code) of plotted unflagged symbols
    symbolfill           Fill type of plotted unflagged symbols
    symboloutline        Outline plotted unflagged symbols
    coloraxis            Selects data axis for colorizing
    customflaggedsymbol  Enable custom symbol(s) for flagged points
    flaggedsymbolshape   Shape of plotted flagged symbols
    flaggedsymbolsize    Size of plotted flagged symbols
    flaggedsymbolcolor   Color (name or hex code) of plotted flagged symbols
    flaggedsymbolfill    Fill type of plotted flagged symbols
    flaggedsymboloutline Outline plotted flagged symbols
    xconnector           Set connector for data points (blank="none"; "line","step")
    timeconnector        Connect points by time rather than x-axis
    plotrange            Plot axes ranges: [xmin,xmax,ymin,ymax]
    title                Title at top of plot
    titlefont            Font size for plot title
    xlabel               Text for horizontal x-axis. Blank for default.
    xaxisfont            Font size for x-axis label
    ylabel               Text for vertical y-axis. Blank for default.
    yaxisfont            Font size for y-axis label
    showmajorgrid        Show major grid lines
    majorwidth           Line width in pixels of major grid lines
    majorstyle           Major grid line style
    majorcolor           Color (name or hex code) of major grid lines
    showminorgrid        Show minor grid lines
    minorwidth           Line width in pixels of minor grid lines
    minorstyle           Minor grid line style
    minorcolor           Color (name or hex code) of minor grid lines
    showlegend           Show a legend on the plot.
    legendposition       Legend position, default upperRight.
    plotfile             Name of plot file to save automatically
    expformat            Export format type. If not provided, plotfile extension will be used to determine type.
    verbose              Include metadata in text export
    exprange             Range of iteration plots to export, one plotfile per page.  Multipage pdf exports are not supported.
    highres              Use high resolution
    dpi                  DPI of exported plot
    width                Width in pixels of exported plot
    height               Height in pixels of exported plot
    overwrite            Overwrite plot file if it already exists
    showgui              Show GUI
    clearplots           Remove any existing plots so new ones can replace them.
    callib               Calibration library string or filename for on-the-fly calibration.
    headeritems          Comma-separated list of pre-defined page header items.
    showatm              Compute and overlay the atmospheric transmission curve
    showtsky             Compute and overlay the sky temperature curve
    showimage            Compute and overlay the image sideband curve
    colorizeoverlay      Colorize the curve overlay using coloraxis
    [1;42mRETURNS[1;m                 void

    --------- examples -----------------------------------------------------------

    
    
    Task for plotting and interacting with visibility
    data.  Limited support for caltable plotting is also
    included as of CASA v4.1.
    
    A variety of axes choices (including data column) along
    with MS selection and averaging options are provided for data
    selection.  Flag extension parameters are also available for
    flagging operations in the plotter.
    
    All of the provided parameters can also be set using the GUI once
    the application has been launched.  Additional and more specific
    operations are available through the GUI and/or through the plotms
    tool (pm).
    
    Most basic functions (plotting, iteration, locate, flagging)
    will work for most CalTables. Parameterized CalTables
    (delays, antpos, gaincurve, opacity), will, at best, currently
    just plot the simple parameters contained in the
    table, not the effective amplitudes or phases sampled at
    observing times, frequencies etc.  BPOLY and GSPLINE tables
    are supported.   Features currently unsupported for
    CalTables include transformation options, some selection options
    depending on table type, and MS-based axes choices.  In the plotms
    GUI, many options irrelevant for CalTables are not hidden when
    interacting with a CalTable, and such settings will be ignored
    (when benign) or cause an error message.
    
    Keyword arguments:
    vis -- input MS or CalTable
    default: ''  (will merely launch the gui unless caltable set)
    caltable -- input CalTable
    default: ''  (will merely launch the gui unless vis set)
    gridrows -- Number of subplot rows
    default: 1
    gridcols -- Number of subplot columns
    default: 1
    rowindex -- Row location of the subplot (0-based).
    default: 0
    colindex -- Column location of the subplot (0-based).
    default: 0
    plotindex -- Index to address a subplot (0-based).
    default: 0
    xaxis, yaxis -- what to plot on the two axes
    default: '' (defaults are xaxis='time',
    yaxis='amp' on first execution;
    thereafter the most recent
    settings are used)
    valid options (=indicates valid synonyms):
    MS Ids and other meta info:
    'scan'   (number)
    'field'  (index)
    'time',
    'interval'='timeint'='timeinterval'='time_interval'
    'spw'    (index)
    'chan'='channel'    (index)
    'freq'='frequency'  (GHz)
    'vel'='velocity'   (km/s)
    'corr'='correlation'  (index)
    'ant1'='antenna1'   (index)
    'ant2'='antenna2'   (index)
    'baseline'  (a baseline index)
    'row'   (absoute row Id from the MS)
    'observation' (index)
    'intent'      (index)
    'feed1'       (index)
    'feed2'       (index)
    Visibility values, flags:
    'amp'='amplitude'
    'phase'  (deg)
    'real'
    'imag'='imaginary'
    'wt'='weight'  (unchannelized)
    'wtsp'='weightspectrum'
    'flag'
    'flagrow'
    Observational geometry:
    'uvdist'  (meters)
    'uvwave'='uvdistl'='uvdist_l'  (wavelengths, per channel)
    'u'  (meters)
    'v'  (meters)
    'w'  (meters)
    'uwave'  ('u' in wavelengths, per channel)
    'vwave'  ('v' in wavelengths, per channel)
    'wwave'  ('w' in wavelengths, per channel)
    'azimuth'  (at array reference; degrees)
    'elevation'  (at array reference; degrees)
    'hourang'='hourangle'  (at array reference; hours)
    'parang'='parangle'='parallacticangle'  (at array reference; degrees)
    Antenna-based:
    'ant'='antenna'
    'ant-azimuth'
    'ant-elevation'
    'ant-ra'
    'ant-dec'
    'ant-parang'='ant-parangle'
    Calibration:
    'gainamp'='gamp'
    'gainphase'='gphase'
    'gainreal'='greal'
    'gainimag'='gimag'
    'delay'='del'
    'opacity'='opac'
    'swpower'='swp'='switchedpower'='spgain'
    'poln'='polarization'  (index)
    'antpos'='AntPos'
    
    
    >>> xaxis, yaxis expandable parameters
    xdatacolumn,
    ydatacolumn  -- data column to use for Visibility values:
    default: '' ('data' on first execution;
    thereafter the most recent
    setting is used)
    valid options:  'data'      (observed)
    'corrected'='corr'
    'model'
    'residual'  (aliases 'corrected-model')
    'corrected-model'
    'data-model'
    'data/model'
    'corected/model'
    'float'
    Note that residuals are complex (vector) differences or ratios.
    
    selectdata -- data selection parameters flag
    default: True  (reveals data selection parameters
    described below)
    Consult listobs output for data selection values,
    and see help par.selectdata for more detailed
    information on syntax; also, visit
    http://casa.nrao.edu/other_doc.shtml and click
    on "Measurement Set selection syntax" for more
    tips on using data selection parameters in CASA)
    
    >>> selectdata expandable parameters:
    
    field -- Select field using field id(s) or field name(s).
    default: ''=all fields
    If field string is a non-negative integer, it is assumed a
    field index,  otherwise, it is assumed a field name
    field='0~2'; field ids 0,1,2
    field='0,4,5~7'; field ids 0,4,5,6,7
    field='3C286,3C295'; field named 3C286 and 3C295
    field = '3,4C*'; field id 3, all names starting with 4C
    spw -- Select spectral window/channels
    type 'help par.selection' for more examples.
    spw='0~2,4'; spectral windows 0,1,2,4 (all channels)
    spw='<2';  spectral windows less than 2 (i.e. 0,1)
    spw='0:5~61'; spw 0, channels 5 to 61, INCLUSIVE
    spw='*:5~61'; all spw with channels 5 to 61
    spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45.
    spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each.
    spw='0:0~10;15~60'; spectral window 0 with channels 0-10,15-60
    NOTE ';' to separate channel selections
    
    timerange  -- Select data based on time range:
    default = '' (all); examples,
    timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
    Note: if YYYY/MM/DD is missing date defaults to first day in data set
    timerange='09:14:0~09:54:0' picks 40 min on first day
    timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day
    timerange='09:44:00' pick data within one integration of time
    timerange='>10:24:00' data after this time
    uvrange -- Select data within uvrange (default units meters)
    default: '' (all); example:
    uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda
    uvrange='>4klambda';uvranges greater than 4 kilo lambda
    
    antenna -- Select data based on antenna/baseline
    default: '' (all, including auto-correlations, if present)
    If antenna string is a non-negative integer, it is assumed an
    antenna index, otherwise, it is assumed as an antenna name
    antenna='5&6'; baseline between antenna index 5 and index 6.
    antenna='!ea02'; exclude EVLA antenna 2.
    antenna='ea13;!ea22'; EVLA antenna 13, excluding antenna 22.
    antenna='VA05&VA06'; baseline between VLA antenna 5 and 6.
    antenna='5&6;7&8'; baselines with indices 5-6 and 7-8
    antenna='5'; all baselines with antenna index 5
    antenna='05'; all baselines with antenna number 05 (VLA old name)
    antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers
    NB: For explicit selections, use a single ampersand (&) to
    select only cross-correlations among the specified antennas,
    double ampersands (&&) to select cross- and
    auto-correlations among the specified antennas, and
    triple ampersands (&&&) to select only
    auto-correlations.  E.g.:
    antenna='*&'; selects all cross-correlation baseline
    (excludes all auto-correlations)
    antenna='*&&&'; selects all auto-correlation baselines
    (excludes all cross-correlations)
    antenna='1&&1,2,3'; selects baselines 1-1 (auto), 1-2,1-3 (cross)
    antenna='VA05&&&'; selects the VA05 autocorrelation
    See the link noted above for more information.
    scan -- Scan numbers or ranges.
    default: ''  (all scans)
    scan='1,2,6,43'; scans 1, 2, 6, and 43
    scan='3~14'; scans 3 through 14, inclusive
    correlation -- Select by correlation (polarization when plotting cal tables)
    default: ''  (all correlations/polarizations)
    For measurement sets: 'RR','RL','LR','LL','XX','XY','YX','YY'
    For Stokes parameters and polarization quantities: 'I', 'Q', 'U', 'V',
    'Ptotal', 'Plinear', 'PFtotal', 'PFlinear', 'Pangle'
    For cal tables: 'R','L','RL','X','Y','XY','/' (for ratio plots)
    or any comma-separated combination; use basis (R/L or X/Y)
    appropriate to the table
    polarization -- Select by polarization when plotting cal tables
    default: ''  (all polarizations)
    options: 'R','L','RL','X','Y','XY','/' (for ratio plots)
    use basis (R/L or X/Y) appropriate to the table
    antpos -- Select by antenna position when plotting KAntPos Jones cal tables.
    Ignored for MS and other cal table types.
    default: ''  (all positions)
    antenna position options for KAntPos Jones table: 'X','Y','Z'
    or a combination 'XY', 'XZ', 'YZ', 'XYZ'
    array -- Select the array id
    default: ''  (all array ids)
    observation -- Select by observation ID(s).
    default: ''-->all;
    observation='0' (select obsID 0)
    intent -- Select observing intent
    default: ''  (no selection by intent)
    intent='*BANDPASS*'  (selects data labelled with
    BANDPASS intent)
    feed -- Select by feed IDs
    default: '' (all feeds)
    feed='1~2'
    msselect -- Optional TaQL data selection
    
    averagedata -- data averaging parameters flag
    default: True   (reveals expandable parameters
    described below)
    >>> averagedata expandable parameters
    avgchannel -- average over channel?  either blank for none, or a value
    in channels.
    default: '' (no channel averaging).
    avgtime -- average over time?  either blank for none, or a value in
    seconds.
    default: '' (no time averaging).
    avgscan -- average over scans?  only valid if time averaging is turned
    on.
    default: False.
    avgfield -- average over fields?  only valid if time averaging is
    turned on.
    default: False.
    avgbaseline -- average over selected baselines; mutually
    exclusive with avgantenna.
    default: False.  (no averaging over baseline)
    avgantenna -- form per-antenna averages; mutually exclusive with
    avgbaseline.
    default: False.   (no per-antenna averaging)
    avgspw -- average over selected spectral windows?
    default: False.  (no average of spectral windows)
    scalar -- scalar averaging?
    default: False  (i.e., do vector averaging)
    
    transform -- apply various transformations on data for plotting
    default: True
    >>> transform expandable parameters
    freqframe -- the coordinate frame in which to render frequency and velocity axes
    default: ''  (unspecified: will use frame in which data were taken)
    options: LSRK, LSRD, BARY, GEO, TOPO, GALACTO, LGROUP, CMB
    restfreq -- the rest frequency to use in velocity conversions (MHz)
    default: '' (use spw central frequency and show relative velocity)
    example: '22235.08MHz'
    veldef -- the velocity definition to use
    default: 'RADIO'
    options: 'RADIO','OPT','TRUE'
    phasecenter -- the direction coordinate of the desired center.
    default: '' (use phasecenter in MeasurementSet)
    
    extendflag -- have flagging extend to other data points?
    default: False.
    >>> extendflag expandable parameters
    extcorr -- extend flags based on correlation?
    default: False.
    extchannel -- extend flags based on channel?
    
    iteraxis -- axis upon which iterate plots (one plot per page, for now)
    default: '' (no iteration)
    options: 'scan','field','spw','baseline','antenna','time','corr'
    additional caltable options: 'poln','antpos' (for KAntPos Jones tables)
    >>> iteraxis expandable parameters
    xselfscale -- When True, iterated plots have a common x-axis range (scale).
    yselfscale -- When True, iterated plots have a common y-axis range (scale).
    default: false, which will scale all plots individually
    xsharedaxis -- Iterated plots on a grid share a common external x-axis per column (must also set xselfscale=True and gridcols>1)
    default: false, each plot will have its own x-axis.
    ysharedaxis -- Iterated plots on a grid share a common external y-axis per row (must also set yselfscale=True and gridrows>1)
    default: false, each plot will have its own y-axis.
    
    customsymbol -- If true, use a custom symbol for drawing unflagged points
    default: False
    >>> customsymbol expandable parameters
    symbolshape -- If true, use a custom shape to draw unflagged symbols
    default: 'autoscaling' (ignores symbolsize)
    options: 'autoscaling', 'circle', 'square', 'diamond', 'pixel', 'nosymbol'
    symbolsize -- size of the unflagged symbols in pixels
    default: 2
    symbolcolor -- color to use for unflagged symbols; can be a RGB hex code or a color name
    default: '0000ff'
    example: 'purple'
    symbolfill -- type of fill to use for unflagged symbols
    default: 'fill'
    options: 'fill', 'mesh1', 'mesh2', 'mesh3', 'nofill'
    symboloutline -- If true, outline unflagged symbols in black
    
    coloraxis -- axis upon which to colorize the plotted points
    default: ''  (use a single color for all points)
    options (= indicates synonyms):
    'scan',  'field',  'spw',  'antenna1'='ant1',  'antenna2'='ant2',
    'baseline',  'channel'='chan',  'corr'='correlation', 'time',
    'observation', 'intent'
    additional caltable options: 'poln'='polarization','antpos' (for KAntPos Jones tables)
    
    customflaggedsymbol -- If true, use a custom symbol for drawing flagged points
    default: False
    >>> customflaggedsymbol expandable parameters
    symbolshape -- If true, use a custom shape to draw flagged symbols
    default: 'nosymbol'
    options: 'autoscaling', 'circle', 'square', 'diamond', 'pixel', 'nosymbol'
    symbolsize -- size of the flagged symbols in pixels
    default: 2
    symbolcolor -- color to use for flagged symbols; can be a RGB hex code or a color name
    default: '0000ff'
    example: 'purple'
    symbolfill -- type of fill to use for flagged symbols
    default: 'fill'
    options: 'fill', 'mesh1', 'mesh2', 'mesh3', 'nofill'
    symboloutline -- If true, outline flagged symbols in black
    
    plotrange -- manual plot axis ranges: [xmin,xmax,ymin,ymax]
    Does not affect data selection.
    default: []; both axes will be autoscaled according
    to the ranges found in the selected data
    If xmin=xmax (or ymin=ymax) then that axis will
    be autoscaled, e.g.:
    [0,0,-2.0,14.0]; autoscale the xaxis, and use
    ymin=-2.0, ymax=14.0
    
    title  -- title along top of plot (called "canvas" in some places)
    titlefont -- plot title font size
    default: 0 (autosize depending on grid)
    xlabel -- text to label horizontal axis, with formatting using '%%'
    xaxisfont -- x-axis font size
    default: 0 (autosize)
    ylabel -- text to label horizontal axis, with formatting using '%%'
    yaxisfont -- y-axis font size
    default: 0 (autosize)
    
    
    showmajorgrid  -- show major grid lines
    default: False
    >>>  showmajorgrid expandable parameters
    majorwidth  -- line width in pixels of major grid lines
    majorstyle  -- major grid line style: solid dash dot none
    majorcolor  -- color in hex code of major grid lines
    
    showminorgrid  -- show minor grid lines
    default: False
    >>>  showminorgrid expandable parameters
    minorwidth  --  line width in pixels of minor grid lines
    minorstyle  --  minor grid line style: solid dash dot none
    minorcolor  --  color in hex code of minor grid lines
    
    plotfile -- name of plot file to save automatically
    default: ''  (i.e., draw an interactive plot in the gui)
    >>> plotfile expandable parameters
    expformat -- export format type; if 'txt' is used an ASCII dump of the plotted points is generated (also available in the export tab)
    default:  ''   (plotfile extension will be used)
    options: 'jpg', 'png', 'ps', 'pdf', 'txt'
    verbose -- when export format is 'txt', print metadata for x and y values
    default: True
    exprange -- pages to export for iteration plots
    default:   ''
    options: 'current', 'all'
    highres -- use high resolution in exported plot
    default: False (use screen resolution)
    dpi -- DPI of exported plot
    default: -1 (not set)
    width -- width of exported plot
    default: -1 (not set)
    height -- height of exported plot
    default: -1 (not set)
    overwrite -- overwrite plot file if it already exists
    default: False
    
    callib -- calibration library string, list of strings, or filename
    default: ''
    
    showgui - Whether or not to display the plotting GUI
    default: True
    
    headeritems -- append header items specific to this plot to the current list
    of page header items.
    Comma-separated string of header item selection keywords.
    Allowed keywords: 'obsdate','obstime','filename','projid',
    'targname','targdir','telescope','observer',
    'ycolumn'
    default: ''
    example: 'filename,projid,targname'


    """

    _info_group_ = """visualization, information,editing, manipulation"""
    _info_desc_ = """A plotter/interactive flagger for visibility data."""

    __schema = {'vis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'caltable': {'type': 'cStr', 'coerce': _coerce.to_str}, 'gridrows': {'type': 'cInt'}, 'gridcols': {'type': 'cInt'}, 'rowindex': {'type': 'cInt'}, 'colindex': {'type': 'cInt'}, 'plotindex': {'type': 'cInt'}, 'xaxis': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'parangle', 'baseline', 'delay', 'antenna position', 'swp', 'u', 'tec', 'ant-parang', 'gamp', 'Antenna1', 'UVdist', 'WeightSpectrum', 'Baseline', 'flag', 'Real', 'switchedpower', 'timeint', 'WtSp', 'Ant-Elevation', 'GainReal', 'time_interval', 'uvdist_l', 'GainAmp', 'ant1', 'flagrow', 'Wt', 'Velocity', 'opac', 'Feed2', 'corr', 'imaginary', 'gainamp', 'Vwave', 'wwave', 'Frequency', 'observation', 'feed1', 'ant-azimuth', 'rate', 'Elevation', 'Intent', 'Row', 'swpower', 'antpos', 'ant-elevation', 'antenna', 'v', 'V', 'interval', 'sigmaspectrum', 'DelayRate', 'tsys', 'gainphase', 'Ant-Parangle', 'imag', 'Radial Velocity', 'UVwave', 'Observation', 'Poln', 'W', 'timeinterval', 'Channel', 'snr', 'SNR', 'frequency', 'Interval', 'uvdistl', 'disp', 'Imag', 'dispdelay', 'Feed1', 'rho', 'Ant-RA', 'delayrate', 'spgain', 'Antenna', 'Uwave', 'SigmaSpectrum', 'Azimuth', 'Scan', 'Tsys', 'polarization', 'intent', 'phase', 'amp', 'ant-parangle', 'SigmaSp', 'freq', 'wt*amp', 'channel', 'uwave', 'Flag', 'correlation', 'FlagRow', 'TEC', 'SwPower', 'GainPhase', 'GainImag', 'ant-parallacticangle', 'real', 'Time', 'weight', 'antenna2', 'gainimag', 'gimag', 'Antenna2', 'spw', 'gphase', 'Opac', 'parang', 'Amp', 'ant-ra', 'Sigma', 'amplitude', 'Ant-DEC', 'HourAngle', 'U', 'row', 'Wt*Amp', 'gainreal', 'chan', 'Field', 'DispDelay', 'hourang', 'vwave', 'radialvelocity', 'sigma', 'Antenna Position', 'Delay', 'uvwave', 'vel', 'uvdist', 'velocity', 'hourangle', 'poln', 'ant2', 'Phase', 'azimuth', 'Corr', 'parallacticangle', 'weightspectrum', 'Ant-Azimuth', 'wtsp', '', 'Distance', 'opacity', 'antenna1', 'feed2', 'sigmasp', 'time', 'w', 'wt', 'field', 'greal', 'elevation', 'del', 'ant', 'ant-dec', 'Spw', 'scan', 'Wwave', 'ParAngle' ]}, 'xdatacolumn': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'model', 'corrected', 'data-model_vector', 'data-model', 'corrected/model_vector', 'residual', 'corrected-model', 'data/model', 'data/model_scalar', 'float', 'corrected/model_scalar', 'corrected/model', '', 'corrected-model_vector', 'data-model_scalar', 'corrected-model_scalar', 'data', 'data/model_vector' ]}, 'xframe': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'icrs', 'azelgeo', 'b1950', 'galactic', '', 'j2000' ]}, 'xinterp': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ '', 'nearest', 'cubic spline', 'spline' ]}, 'yaxis': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'ydatacolumn': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'yframe': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'yinterp': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'yaxislocation': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'selectdata': {'type': 'cBool'}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'uvrange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'antenna': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'correlation': {'type': 'cStr', 'coerce': _coerce.to_str}, 'polarization': {'type': 'cStr', 'coerce': _coerce.to_str}, 'antpos': {'type': 'cStr', 'coerce': _coerce.to_str}, 'array': {'type': 'cStr', 'coerce': _coerce.to_str}, 'observation': {'type': 'cStr', 'coerce': _coerce.to_str}, 'intent': {'type': 'cStr', 'coerce': _coerce.to_str}, 'feed': {'type': 'cStr', 'coerce': _coerce.to_str}, 'msselect': {'type': 'cStr', 'coerce': _coerce.to_str}, 'averagedata': {'type': 'cBool'}, 'avgchannel': {'type': 'cStr', 'coerce': _coerce.to_str}, 'avgtime': {'type': 'cStr', 'coerce': _coerce.to_str}, 'avgscan': {'type': 'cBool'}, 'avgfield': {'type': 'cBool'}, 'avgbaseline': {'type': 'cBool'}, 'avgantenna': {'type': 'cBool'}, 'avgspw': {'type': 'cBool'}, 'scalar': {'type': 'cBool'}, 'transform': {'type': 'cBool'}, 'freqframe': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'LSRK', 'CMB', 'GALACTO', 'GEO', 'TOPO', 'LSRD', 'LGROUP', 'BARY', '' ]}, 'restfreq': {'type': 'cStr', 'coerce': _coerce.to_str}, 'veldef': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'RADIO', 'OPTICAL', 'TRUE' ]}, 'phasecenter': {'type': 'cStr', 'coerce': _coerce.to_str}, 'extendflag': {'type': 'cBool'}, 'extcorr': {'type': 'cBool'}, 'extchannel': {'type': 'cBool'}, 'iteraxis': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'baseline', 'Baseline', 'corr', 'antpos', 'antenna', 'Poln', 'AntPos', 'Antenna', 'Scan', 'polarization', 'correlation', 'Time', 'spw', 'Field', 'poln', 'Corr', '', 'time', 'field', 'Spw', 'scan' ]}, 'xselfscale': {'type': 'cBool'}, 'yselfscale': {'type': 'cBool'}, 'xsharedaxis': {'type': 'cBool'}, 'ysharedaxis': {'type': 'cBool'}, 'customsymbol': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'symbolshape': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'symbolsize': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'symbolcolor': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'symbolfill': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'symboloutline': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'coloraxis': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'baseline', 'Antenna1', 'Baseline', 'ant1', 'corr', 'observation', 'Intent', 'antpos', 'Observation', 'Poln', 'Channel', 'AntPos', 'Scan', 'polarization', 'intent', 'channel', 'correlation', 'Time', 'antenna2', 'Antenna2', 'spw', 'chan', 'Field', 'poln', 'ant2', 'Corr', '', 'antenna1', 'time', 'field', 'Spw', 'scan' ]}, 'customflaggedsymbol': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'flaggedsymbolshape': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'flaggedsymbolsize': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'flaggedsymbolcolor': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'flaggedsymbolfill': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'flaggedsymboloutline': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'xconnector': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ '', 'none', 'line', 'step' ]}, 'timeconnector': {'type': 'cBool'}, 'plotrange': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'title': {'type': 'cStr', 'coerce': _coerce.to_str}, 'titlefont': {'type': 'cInt'}, 'xlabel': {'type': 'cStr', 'coerce': _coerce.to_str}, 'xaxisfont': {'type': 'cInt'}, 'ylabel': {'type': 'cStr', 'coerce': _coerce.to_str}, 'yaxisfont': {'type': 'cInt'}, 'showmajorgrid': {'type': 'cBool'}, 'majorwidth': {'type': 'cInt'}, 'majorstyle': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'none', 'dot', 'solid', 'dash', '' ]}, 'majorcolor': {'type': 'cStr', 'coerce': _coerce.to_str}, 'showminorgrid': {'type': 'cBool'}, 'minorwidth': {'type': 'cInt'}, 'minorstyle': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'none', 'dot', 'solid', 'dash', '' ]}, 'minorcolor': {'type': 'cStr', 'coerce': _coerce.to_str}, 'showlegend': {'type': 'cBool'}, 'legendposition': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'exteriorRight', 'lowerRight', 'exteriorTop', 'exteriorLeft', 'lowerLeft', 'upperRight', 'upperLeft', 'exteriorBottom', '' ]}, 'plotfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'expformat': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'pdf', 'jpg', 'png', 'txt', 'ps', '' ]}, 'verbose': {'type': 'cBool'}, 'exprange': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ '', 'current', 'all' ]}, 'highres': {'type': 'cBool'}, 'dpi': {'type': 'cInt'}, 'width': {'type': 'cInt'}, 'height': {'type': 'cInt'}, 'overwrite': {'type': 'cBool'}, 'showgui': {'type': 'cBool'}, 'clearplots': {'type': 'cBool'}, 'callib': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'headeritems': {'type': 'cStr', 'coerce': _coerce.to_str}, 'showatm': {'type': 'cBool'}, 'showtsky': {'type': 'cBool'}, 'showimage': {'type': 'cBool'}, 'colorizeoverlay': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 23 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __showtsky_dflt( self, glb ):
        return False

    def __showtsky( self, glb ):
        if 'showtsky' in glb: return glb['showtsky']
        return False

    def __callib_dflt( self, glb ):
        return [  ]

    def __callib( self, glb ):
        if 'callib' in glb: return glb['callib']
        return [  ]

    def __headeritems_dflt( self, glb ):
        return ''

    def __headeritems( self, glb ):
        if 'headeritems' in glb: return glb['headeritems']
        return ''

    def __xaxis_dflt( self, glb ):
        return ''

    def __xaxis( self, glb ):
        if 'xaxis' in glb: return glb['xaxis']
        return ''

    def __gridcols_dflt( self, glb ):
        return int(1)

    def __gridcols( self, glb ):
        if 'gridcols' in glb: return glb['gridcols']
        return int(1)

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __ylabel_dflt( self, glb ):
        return ''

    def __ylabel( self, glb ):
        if 'ylabel' in glb: return glb['ylabel']
        return ''

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __gridrows_dflt( self, glb ):
        return int(1)

    def __gridrows( self, glb ):
        if 'gridrows' in glb: return glb['gridrows']
        return int(1)

    def __colindex_dflt( self, glb ):
        return int(0)

    def __colindex( self, glb ):
        if 'colindex' in glb: return glb['colindex']
        return int(0)

    def __xaxisfont_dflt( self, glb ):
        return int(0)

    def __xaxisfont( self, glb ):
        if 'xaxisfont' in glb: return glb['xaxisfont']
        return int(0)

    def __rowindex_dflt( self, glb ):
        return int(0)

    def __rowindex( self, glb ):
        if 'rowindex' in glb: return glb['rowindex']
        return int(0)

    def __customflaggedsymbol_dflt( self, glb ):
        return False

    def __customflaggedsymbol( self, glb ):
        if 'customflaggedsymbol' in glb: return glb['customflaggedsymbol']
        return False

    def __transform_dflt( self, glb ):
        return True

    def __transform( self, glb ):
        if 'transform' in glb: return glb['transform']
        return True

    def __coloraxis_dflt( self, glb ):
        return ''

    def __coloraxis( self, glb ):
        if 'coloraxis' in glb: return glb['coloraxis']
        return ''

    def __iteraxis_dflt( self, glb ):
        return ''

    def __iteraxis( self, glb ):
        if 'iteraxis' in glb: return glb['iteraxis']
        return ''

    def __averagedata_dflt( self, glb ):
        return True

    def __averagedata( self, glb ):
        if 'averagedata' in glb: return glb['averagedata']
        return True

    def __yaxisfont_dflt( self, glb ):
        return int(0)

    def __yaxisfont( self, glb ):
        if 'yaxisfont' in glb: return glb['yaxisfont']
        return int(0)

    def __showmajorgrid_dflt( self, glb ):
        return False

    def __showmajorgrid( self, glb ):
        if 'showmajorgrid' in glb: return glb['showmajorgrid']
        return False

    def __selectdata_dflt( self, glb ):
        return True

    def __selectdata( self, glb ):
        if 'selectdata' in glb: return glb['selectdata']
        return True

    def __yaxislocation_dflt( self, glb ):
        return ''

    def __yaxislocation( self, glb ):
        if 'yaxislocation' in glb: return glb['yaxislocation']
        return ''

    def __showimage_dflt( self, glb ):
        return False

    def __showimage( self, glb ):
        if 'showimage' in glb: return glb['showimage']
        return False

    def __customsymbol_dflt( self, glb ):
        return [ ]

    def __customsymbol( self, glb ):
        if 'customsymbol' in glb: return glb['customsymbol']
        return [ ]

    def __plotfile_dflt( self, glb ):
        return ''

    def __plotfile( self, glb ):
        if 'plotfile' in glb: return glb['plotfile']
        return ''

    def __yaxis_dflt( self, glb ):
        return ''

    def __yaxis( self, glb ):
        if 'yaxis' in glb: return glb['yaxis']
        return ''

    def __plotindex_dflt( self, glb ):
        return int(0)

    def __plotindex( self, glb ):
        if 'plotindex' in glb: return glb['plotindex']
        return int(0)

    def __showlegend_dflt( self, glb ):
        return False

    def __showlegend( self, glb ):
        if 'showlegend' in glb: return glb['showlegend']
        return False

    def __showatm_dflt( self, glb ):
        return False

    def __showatm( self, glb ):
        if 'showatm' in glb: return glb['showatm']
        return False

    def __xconnector_dflt( self, glb ):
        return ''

    def __xconnector( self, glb ):
        if 'xconnector' in glb: return glb['xconnector']
        return ''

    def __extendflag_dflt( self, glb ):
        return False

    def __extendflag( self, glb ):
        if 'extendflag' in glb: return glb['extendflag']
        return False

    def __xlabel_dflt( self, glb ):
        return ''

    def __xlabel( self, glb ):
        if 'xlabel' in glb: return glb['xlabel']
        return ''

    def __showgui_dflt( self, glb ):
        return True

    def __showgui( self, glb ):
        if 'showgui' in glb: return glb['showgui']
        return True

    def __title_dflt( self, glb ):
        return ''

    def __title( self, glb ):
        if 'title' in glb: return glb['title']
        return ''

    def __colorizeoverlay_dflt( self, glb ):
        return False

    def __colorizeoverlay( self, glb ):
        if 'colorizeoverlay' in glb: return glb['colorizeoverlay']
        return False

    def __showminorgrid_dflt( self, glb ):
        return False

    def __showminorgrid( self, glb ):
        if 'showminorgrid' in glb: return glb['showminorgrid']
        return False

    def __plotrange_dflt( self, glb ):
        return [  ]

    def __plotrange( self, glb ):
        if 'plotrange' in glb: return glb['plotrange']
        return [  ]

    def __titlefont_dflt( self, glb ):
        return int(0)

    def __titlefont( self, glb ):
        if 'titlefont' in glb: return glb['titlefont']
        return int(0)



    #--------- return inp/go default --------------------------------------------------
    def __minorwidth_dflt( self, glb ):
        if self.__showminorgrid( glb ) == bool(True): return int(0)
        return None
    def __antenna_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __avgscan_dflt( self, glb ):
        if self.__averagedata( glb ) == bool(True): return bool(False)
        return None
    def __expformat_dflt( self, glb ):
        if self.__plotfile( glb ) != "": return ""
        return None
    def __clearplots_dflt( self, glb ):
        if self.__showgui( glb ) == bool(True): return bool(True)
        if self.__showgui( glb ) == bool(False): return bool(True)
        return None
    def __avgspw_dflt( self, glb ):
        if self.__averagedata( glb ) == bool(True): return bool(False)
        return None
    def __flaggedsymbolshape_dflt( self, glb ):
        if self.__customflaggedsymbol( glb ) == bool(True): return "nosymbol"
        return None
    def __field_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __symbolcolor_dflt( self, glb ):
        if self.__customsymbol( glb ) == bool(True): return "0000ff"
        return None
    def __highres_dflt( self, glb ):
        if self.__plotfile( glb ) != "": return bool(False)
        return None
    def __minorcolor_dflt( self, glb ):
        if self.__showminorgrid( glb ) == bool(True): return ""
        return None
    def __verbose_dflt( self, glb ):
        if self.__plotfile( glb ) != "": return bool(True)
        return None
    def __msselect_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __intent_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __xselfscale_dflt( self, glb ):
        if self.__iteraxis( glb ) != "": return bool(False)
        return None
    def __dpi_dflt( self, glb ):
        if self.__plotfile( glb ) != "": return int(-1)
        return None
    def __yframe_dflt( self, glb ):
        if self.__yaxis( glb ) == "ant-ra": return ""
        if self.__yaxis( glb ) == "ant-dec": return ""
        return None
    def __majorwidth_dflt( self, glb ):
        if self.__showmajorgrid( glb ) == bool(True): return int(0)
        return None
    def __minorstyle_dflt( self, glb ):
        if self.__showminorgrid( glb ) == bool(True): return ""
        return None
    def __exprange_dflt( self, glb ):
        if self.__plotfile( glb ) != "": return ""
        return None
    def __polarization_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __height_dflt( self, glb ):
        if self.__plotfile( glb ) != "": return int(-1)
        return None
    def __majorstyle_dflt( self, glb ):
        if self.__showmajorgrid( glb ) == bool(True): return ""
        return None
    def __scan_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __freqframe_dflt( self, glb ):
        if self.__transform( glb ) == bool(True): return ""
        return None
    def __flaggedsymbolfill_dflt( self, glb ):
        if self.__customflaggedsymbol( glb ) == bool(True): return "fill"
        return None
    def __array_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __xframe_dflt( self, glb ):
        if self.__xaxis( glb ) == "ant-ra": return ""
        if self.__xaxis( glb ) == "ant-dec": return ""
        return None
    def __xdatacolumn_dflt( self, glb ):
        if self.__xaxis( glb ) == "amp": return ""
        if self.__xaxis( glb ) == "amplitude": return ""
        if self.__xaxis( glb ) == "phase": return ""
        if self.__xaxis( glb ) == "real": return ""
        if self.__xaxis( glb ) == "imag": return ""
        if self.__xaxis( glb ) == "imaginary": return ""
        return None
    def __avgchannel_dflt( self, glb ):
        if self.__averagedata( glb ) == bool(True): return ""
        return None
    def __yinterp_dflt( self, glb ):
        if self.__yaxis( glb ) == "ant-ra": return ""
        if self.__yaxis( glb ) == "ant-dec": return ""
        return None
    def __scalar_dflt( self, glb ):
        if self.__averagedata( glb ) == bool(True): return bool(False)
        return None
    def __majorcolor_dflt( self, glb ):
        if self.__showmajorgrid( glb ) == bool(True): return ""
        return None
    def __restfreq_dflt( self, glb ):
        if self.__transform( glb ) == bool(True): return ""
        return None
    def __symbolfill_dflt( self, glb ):
        if self.__customsymbol( glb ) == bool(True): return "fill"
        return None
    def __extcorr_dflt( self, glb ):
        if self.__extendflag( glb ) == bool(True): return bool(False)
        return None
    def __flaggedsymbolcolor_dflt( self, glb ):
        if self.__customflaggedsymbol( glb ) == bool(True): return "ff0000"
        return None
    def __legendposition_dflt( self, glb ):
        if self.__showlegend( glb ) == bool(True): return ""
        return None
    def __correlation_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __symbolshape_dflt( self, glb ):
        if self.__customsymbol( glb ) == bool(True): return "autoscaling"
        return None
    def __yselfscale_dflt( self, glb ):
        if self.__iteraxis( glb ) != "": return bool(False)
        return None
    def __feed_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __ydatacolumn_dflt( self, glb ):
        if self.__yaxis( glb ) == "amp": return ""
        if self.__yaxis( glb ) == "amplitude": return ""
        if self.__yaxis( glb ) == "phase": return ""
        if self.__yaxis( glb ) == "real": return ""
        if self.__yaxis( glb ) == "imag": return ""
        if self.__yaxis( glb ) == "imaginary": return ""
        return None
    def __uvrange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __extchannel_dflt( self, glb ):
        if self.__extendflag( glb ) == bool(True): return bool(False)
        return None
    def __phasecenter_dflt( self, glb ):
        if self.__transform( glb ) == bool(True): return ""
        return None
    def __flaggedsymboloutline_dflt( self, glb ):
        if self.__customflaggedsymbol( glb ) == bool(True): return False
        return None
    def __flaggedsymbolsize_dflt( self, glb ):
        if self.__customflaggedsymbol( glb ) == bool(True): return 2
        return None
    def __antpos_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __overwrite_dflt( self, glb ):
        if self.__plotfile( glb ) != "": return bool(False)
        return None
    def __ysharedaxis_dflt( self, glb ):
        if self.__iteraxis( glb ) != "": return bool(False)
        return None
    def __veldef_dflt( self, glb ):
        if self.__transform( glb ) == bool(True): return "RADIO"
        return None
    def __avgbaseline_dflt( self, glb ):
        if self.__averagedata( glb ) == bool(True): return bool(False)
        return None
    def __observation_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __symbolsize_dflt( self, glb ):
        if self.__customsymbol( glb ) == bool(True): return 2
        return None
    def __timeconnector_dflt( self, glb ):
        if self.__xconnector( glb ) == "line": return bool(False)
        if self.__xconnector( glb ) == "step": return bool(False)
        return None
    def __width_dflt( self, glb ):
        if self.__plotfile( glb ) != "": return int(-1)
        return None
    def __avgantenna_dflt( self, glb ):
        if self.__averagedata( glb ) == bool(True): return bool(False)
        return None
    def __spw_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __xsharedaxis_dflt( self, glb ):
        if self.__iteraxis( glb ) != "": return bool(False)
        return None
    def __timerange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __avgfield_dflt( self, glb ):
        if self.__averagedata( glb ) == bool(True): return bool(False)
        return None
    def __xinterp_dflt( self, glb ):
        if self.__xaxis( glb ) == "ant-ra": return ""
        if self.__xaxis( glb ) == "ant-dec": return ""
        return None
    def __avgtime_dflt( self, glb ):
        if self.__averagedata( glb ) == bool(True): return ""
        return None
    def __symboloutline_dflt( self, glb ):
        if self.__customsymbol( glb ) == bool(True): return False
        return None

    #--------- return subparam values -------------------------------------------------
    def __xdatacolumn( self, glb ):
        if 'xdatacolumn' in glb: return glb['xdatacolumn']
        dflt = self.__xdatacolumn_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __xframe( self, glb ):
        if 'xframe' in glb: return glb['xframe']
        dflt = self.__xframe_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __xinterp( self, glb ):
        if 'xinterp' in glb: return glb['xinterp']
        dflt = self.__xinterp_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __ydatacolumn( self, glb ):
        if 'ydatacolumn' in glb: return glb['ydatacolumn']
        dflt = self.__ydatacolumn_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __yframe( self, glb ):
        if 'yframe' in glb: return glb['yframe']
        dflt = self.__yframe_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __yinterp( self, glb ):
        if 'yinterp' in glb: return glb['yinterp']
        dflt = self.__yinterp_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        dflt = self.__field_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        dflt = self.__spw_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __timerange( self, glb ):
        if 'timerange' in glb: return glb['timerange']
        dflt = self.__timerange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __uvrange( self, glb ):
        if 'uvrange' in glb: return glb['uvrange']
        dflt = self.__uvrange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        dflt = self.__antenna_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __scan( self, glb ):
        if 'scan' in glb: return glb['scan']
        dflt = self.__scan_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __correlation( self, glb ):
        if 'correlation' in glb: return glb['correlation']
        dflt = self.__correlation_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __polarization( self, glb ):
        if 'polarization' in glb: return glb['polarization']
        dflt = self.__polarization_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __antpos( self, glb ):
        if 'antpos' in glb: return glb['antpos']
        dflt = self.__antpos_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __array( self, glb ):
        if 'array' in glb: return glb['array']
        dflt = self.__array_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __observation( self, glb ):
        if 'observation' in glb: return glb['observation']
        dflt = self.__observation_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __intent( self, glb ):
        if 'intent' in glb: return glb['intent']
        dflt = self.__intent_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __feed( self, glb ):
        if 'feed' in glb: return glb['feed']
        dflt = self.__feed_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __msselect( self, glb ):
        if 'msselect' in glb: return glb['msselect']
        dflt = self.__msselect_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __avgchannel( self, glb ):
        if 'avgchannel' in glb: return glb['avgchannel']
        dflt = self.__avgchannel_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __avgtime( self, glb ):
        if 'avgtime' in glb: return glb['avgtime']
        dflt = self.__avgtime_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __avgscan( self, glb ):
        if 'avgscan' in glb: return glb['avgscan']
        dflt = self.__avgscan_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __avgfield( self, glb ):
        if 'avgfield' in glb: return glb['avgfield']
        dflt = self.__avgfield_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __avgbaseline( self, glb ):
        if 'avgbaseline' in glb: return glb['avgbaseline']
        dflt = self.__avgbaseline_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __avgantenna( self, glb ):
        if 'avgantenna' in glb: return glb['avgantenna']
        dflt = self.__avgantenna_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __avgspw( self, glb ):
        if 'avgspw' in glb: return glb['avgspw']
        dflt = self.__avgspw_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __scalar( self, glb ):
        if 'scalar' in glb: return glb['scalar']
        dflt = self.__scalar_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __freqframe( self, glb ):
        if 'freqframe' in glb: return glb['freqframe']
        dflt = self.__freqframe_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __restfreq( self, glb ):
        if 'restfreq' in glb: return glb['restfreq']
        dflt = self.__restfreq_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __veldef( self, glb ):
        if 'veldef' in glb: return glb['veldef']
        dflt = self.__veldef_dflt( glb )
        if dflt is not None: return dflt
        return 'RADIO'
    def __phasecenter( self, glb ):
        if 'phasecenter' in glb: return glb['phasecenter']
        dflt = self.__phasecenter_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __extcorr( self, glb ):
        if 'extcorr' in glb: return glb['extcorr']
        dflt = self.__extcorr_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __extchannel( self, glb ):
        if 'extchannel' in glb: return glb['extchannel']
        dflt = self.__extchannel_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __xselfscale( self, glb ):
        if 'xselfscale' in glb: return glb['xselfscale']
        dflt = self.__xselfscale_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __yselfscale( self, glb ):
        if 'yselfscale' in glb: return glb['yselfscale']
        dflt = self.__yselfscale_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __xsharedaxis( self, glb ):
        if 'xsharedaxis' in glb: return glb['xsharedaxis']
        dflt = self.__xsharedaxis_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __ysharedaxis( self, glb ):
        if 'ysharedaxis' in glb: return glb['ysharedaxis']
        dflt = self.__ysharedaxis_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __symbolshape( self, glb ):
        if 'symbolshape' in glb: return glb['symbolshape']
        dflt = self.__symbolshape_dflt( glb )
        if dflt is not None: return dflt
        return 'autoscaling'
    def __symbolsize( self, glb ):
        if 'symbolsize' in glb: return glb['symbolsize']
        dflt = self.__symbolsize_dflt( glb )
        if dflt is not None: return dflt
        return int(2)
    def __symbolcolor( self, glb ):
        if 'symbolcolor' in glb: return glb['symbolcolor']
        dflt = self.__symbolcolor_dflt( glb )
        if dflt is not None: return dflt
        return '0000ff'
    def __symbolfill( self, glb ):
        if 'symbolfill' in glb: return glb['symbolfill']
        dflt = self.__symbolfill_dflt( glb )
        if dflt is not None: return dflt
        return 'fill'
    def __symboloutline( self, glb ):
        if 'symboloutline' in glb: return glb['symboloutline']
        dflt = self.__symboloutline_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __flaggedsymbolshape( self, glb ):
        if 'flaggedsymbolshape' in glb: return glb['flaggedsymbolshape']
        dflt = self.__flaggedsymbolshape_dflt( glb )
        if dflt is not None: return dflt
        return 'circle'
    def __flaggedsymbolsize( self, glb ):
        if 'flaggedsymbolsize' in glb: return glb['flaggedsymbolsize']
        dflt = self.__flaggedsymbolsize_dflt( glb )
        if dflt is not None: return dflt
        return int(2)
    def __flaggedsymbolcolor( self, glb ):
        if 'flaggedsymbolcolor' in glb: return glb['flaggedsymbolcolor']
        dflt = self.__flaggedsymbolcolor_dflt( glb )
        if dflt is not None: return dflt
        return 'ff0000'
    def __flaggedsymbolfill( self, glb ):
        if 'flaggedsymbolfill' in glb: return glb['flaggedsymbolfill']
        dflt = self.__flaggedsymbolfill_dflt( glb )
        if dflt is not None: return dflt
        return 'fill'
    def __flaggedsymboloutline( self, glb ):
        if 'flaggedsymboloutline' in glb: return glb['flaggedsymboloutline']
        dflt = self.__flaggedsymboloutline_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __timeconnector( self, glb ):
        if 'timeconnector' in glb: return glb['timeconnector']
        dflt = self.__timeconnector_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __majorwidth( self, glb ):
        if 'majorwidth' in glb: return glb['majorwidth']
        dflt = self.__majorwidth_dflt( glb )
        if dflt is not None: return dflt
        return int(1)
    def __majorstyle( self, glb ):
        if 'majorstyle' in glb: return glb['majorstyle']
        dflt = self.__majorstyle_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __majorcolor( self, glb ):
        if 'majorcolor' in glb: return glb['majorcolor']
        dflt = self.__majorcolor_dflt( glb )
        if dflt is not None: return dflt
        return 'B0B0B0'
    def __minorwidth( self, glb ):
        if 'minorwidth' in glb: return glb['minorwidth']
        dflt = self.__minorwidth_dflt( glb )
        if dflt is not None: return dflt
        return int(1)
    def __minorstyle( self, glb ):
        if 'minorstyle' in glb: return glb['minorstyle']
        dflt = self.__minorstyle_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __minorcolor( self, glb ):
        if 'minorcolor' in glb: return glb['minorcolor']
        dflt = self.__minorcolor_dflt( glb )
        if dflt is not None: return dflt
        return 'D0D0D0'
    def __legendposition( self, glb ):
        if 'legendposition' in glb: return glb['legendposition']
        dflt = self.__legendposition_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __expformat( self, glb ):
        if 'expformat' in glb: return glb['expformat']
        dflt = self.__expformat_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        dflt = self.__verbose_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __exprange( self, glb ):
        if 'exprange' in glb: return glb['exprange']
        dflt = self.__exprange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __highres( self, glb ):
        if 'highres' in glb: return glb['highres']
        dflt = self.__highres_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __dpi( self, glb ):
        if 'dpi' in glb: return glb['dpi']
        dflt = self.__dpi_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)
    def __width( self, glb ):
        if 'width' in glb: return glb['width']
        dflt = self.__width_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)
    def __height( self, glb ):
        if 'height' in glb: return glb['height']
        dflt = self.__height_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)
    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        dflt = self.__overwrite_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __clearplots( self, glb ):
        if 'clearplots' in glb: return glb['clearplots']
        dflt = self.__clearplots_dflt( glb )
        if dflt is not None: return dflt
        return True

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Input MS or CalTable (blank for none)'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __caltable_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__caltable_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Input CalTable (blank for none)'
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('caltable',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __gridrows_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__gridrows_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(1)
        description = 'Number of subplot rows'
        value = self.__gridrows( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'gridrows': value},{'gridrows': self.__schema['gridrows']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('gridrows',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __gridcols_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__gridcols_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(1)
        description = 'Number of subplot columns'
        value = self.__gridcols( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'gridcols': value},{'gridcols': self.__schema['gridcols']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('gridcols',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __rowindex_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__rowindex_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'Row location of the plot (0-based)'
        value = self.__rowindex( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'rowindex': value},{'rowindex': self.__schema['rowindex']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('rowindex',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __colindex_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__colindex_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'Column location of the plot (0-based)'
        value = self.__colindex( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'colindex': value},{'colindex': self.__schema['colindex']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('colindex',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __plotindex_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__plotindex_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'Index to address a subplot (0-based)'
        value = self.__plotindex( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'plotindex': value},{'plotindex': self.__schema['plotindex']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('plotindex',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __xaxis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xaxis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Plot x-axis (blank for default/current)'
        value = self.__xaxis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xaxis': value},{'xaxis': self.__schema['xaxis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('xaxis',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __xdatacolumn_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xdatacolumn_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__xdatacolumn_dflt( self.__globals_( ) ) is not None:
             description = 'Data column to use for x-axis (blank for default/current).  Note that unspecified residuals are complex (vector) differences or ratios.'
             value = self.__xdatacolumn( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xdatacolumn': value},{'xdatacolumn': self.__schema['xdatacolumn']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('xdatacolumn',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __xframe_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xframe_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__xframe_dflt( self.__globals_( ) ) is not None:
             description = 'Coordinate frame to use for x-axis'
             value = self.__xframe( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xframe': value},{'xframe': self.__schema['xframe']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('xframe',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __xinterp_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xinterp_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__xinterp_dflt( self.__globals_( ) ) is not None:
             description = 'Interpolation method for x-axis'
             value = self.__xinterp( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xinterp': value},{'xinterp': self.__schema['xinterp']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('xinterp',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __yaxis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__yaxis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Plot y-axis (blank for default/current)'
        value = self.__yaxis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'yaxis': value},{'yaxis': self.__schema['yaxis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('yaxis',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __ydatacolumn_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__ydatacolumn_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__ydatacolumn_dflt( self.__globals_( ) ) is not None:
             description = 'Data column to use for y-axis (blank for default/current). Note that unspecified residuals are complex (vector) differences or ratios.'
             value = self.__ydatacolumn( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'ydatacolumn': value},{'ydatacolumn': self.__schema['ydatacolumn']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('ydatacolumn',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __yframe_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__yframe_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__yframe_dflt( self.__globals_( ) ) is not None:
             description = 'Coordinate frame to use for y-axis'
             value = self.__yframe( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'yframe': value},{'yframe': self.__schema['yframe']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('yframe',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __yinterp_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__yinterp_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__yinterp_dflt( self.__globals_( ) ) is not None:
             description = 'Interpolation method for y-axis'
             value = self.__yinterp( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'yinterp': value},{'yinterp': self.__schema['yinterp']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('yinterp',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __yaxislocation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__yaxislocation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Location of the y-axis (blank for default: left)'
        value = self.__yaxislocation( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'yaxislocation': value},{'yaxislocation': self.__schema['yaxislocation']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('yaxislocation',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __selectdata_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__selectdata_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Enable data selection parameters'
        value = self.__selectdata( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'selectdata': value},{'selectdata': self.__schema['selectdata']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('selectdata',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __field_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__field_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__field_dflt( self.__globals_( ) ) is not None:
             description = 'Field names or ids (blank for all)'
             value = self.__field( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __spw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__spw_dflt( self.__globals_( ) ) is not None:
             description = 'Spectral windows:channels (blank for all)'
             value = self.__spw( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __timerange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__timerange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__timerange_dflt( self.__globals_( ) ) is not None:
             description = 'Time range (blank for all)'
             value = self.__timerange( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'timerange': value},{'timerange': self.__schema['timerange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('timerange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __uvrange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__uvrange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__uvrange_dflt( self.__globals_( ) ) is not None:
             description = 'UV range (blank for all)'
             value = self.__uvrange( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'uvrange': value},{'uvrange': self.__schema['uvrange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('uvrange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __antenna_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__antenna_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__antenna_dflt( self.__globals_( ) ) is not None:
             description = 'Baseline/antenna names or ids (blank for all)'
             value = self.__antenna( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('antenna',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __scan_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__scan_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__scan_dflt( self.__globals_( ) ) is not None:
             description = 'Scan numbers (blank for all)'
             value = self.__scan( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'scan': value},{'scan': self.__schema['scan']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('scan',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __correlation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__correlation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__correlation_dflt( self.__globals_( ) ) is not None:
             description = 'Correlations/polarizations (blank for all)'
             value = self.__correlation( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'correlation': value},{'correlation': self.__schema['correlation']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('correlation',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __polarization_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__polarization_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__polarization_dflt( self.__globals_( ) ) is not None:
             description = 'Polarizations (blank for all)'
             value = self.__polarization( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'polarization': value},{'polarization': self.__schema['polarization']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('polarization',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __antpos_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__antpos_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__antpos_dflt( self.__globals_( ) ) is not None:
             description = 'Antenna positions (blank for all)'
             value = self.__antpos( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'antpos': value},{'antpos': self.__schema['antpos']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('antpos',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __array_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__array_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__array_dflt( self.__globals_( ) ) is not None:
             description = '(Sub)array numbers (blank for all)'
             value = self.__array( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'array': value},{'array': self.__schema['array']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('array',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __observation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__observation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__observation_dflt( self.__globals_( ) ) is not None:
             description = 'Observation IDs (blank for all)'
             value = self.__observation( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'observation': value},{'observation': self.__schema['observation']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('observation',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __intent_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__intent_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__intent_dflt( self.__globals_( ) ) is not None:
             description = 'Observing intent (blank for all)'
             value = self.__intent( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'intent': value},{'intent': self.__schema['intent']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('intent',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __feed_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__feed_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__feed_dflt( self.__globals_( ) ) is not None:
             description = 'Feed numbers (blank for all)'
             value = self.__feed( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'feed': value},{'feed': self.__schema['feed']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('feed',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __msselect_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__msselect_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__msselect_dflt( self.__globals_( ) ) is not None:
             description = 'MSSelection TaQL string (blank for none)'
             value = self.__msselect( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'msselect': value},{'msselect': self.__schema['msselect']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('msselect',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __averagedata_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__averagedata_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Enable data averaging parameters'
        value = self.__averagedata( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'averagedata': value},{'averagedata': self.__schema['averagedata']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('averagedata',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __avgchannel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__avgchannel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__avgchannel_dflt( self.__globals_( ) ) is not None:
             description = 'Average over channel (blank = False, otherwise value in channels)'
             value = self.__avgchannel( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'avgchannel': value},{'avgchannel': self.__schema['avgchannel']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('avgchannel',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __avgtime_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__avgtime_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__avgtime_dflt( self.__globals_( ) ) is not None:
             description = 'Average over time (blank = False, otherwise value in seconds)'
             value = self.__avgtime( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'avgtime': value},{'avgtime': self.__schema['avgtime']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('avgtime',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __avgscan_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__avgscan_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__avgscan_dflt( self.__globals_( ) ) is not None:
             description = 'Average over scans. Only valid with time averaging'
             value = self.__avgscan( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'avgscan': value},{'avgscan': self.__schema['avgscan']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('avgscan',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __avgfield_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__avgfield_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__avgfield_dflt( self.__globals_( ) ) is not None:
             description = 'Average over fields. Only valid with time averaging'
             value = self.__avgfield( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'avgfield': value},{'avgfield': self.__schema['avgfield']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('avgfield',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __avgbaseline_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__avgbaseline_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__avgbaseline_dflt( self.__globals_( ) ) is not None:
             description = 'Average over all baselines (mutually exclusive with avgantenna)'
             value = self.__avgbaseline( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'avgbaseline': value},{'avgbaseline': self.__schema['avgbaseline']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('avgbaseline',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __avgantenna_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__avgantenna_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__avgantenna_dflt( self.__globals_( ) ) is not None:
             description = 'Average per antenna (mutually exclusive with avgbaseline)'
             value = self.__avgantenna( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'avgantenna': value},{'avgantenna': self.__schema['avgantenna']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('avgantenna',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __avgspw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__avgspw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__avgspw_dflt( self.__globals_( ) ) is not None:
             description = 'Average over all spectral windows'
             value = self.__avgspw( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'avgspw': value},{'avgspw': self.__schema['avgspw']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('avgspw',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __scalar_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__scalar_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__scalar_dflt( self.__globals_( ) ) is not None:
             description = 'Scalar averaging (False=vector averaging)'
             value = self.__scalar( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'scalar': value},{'scalar': self.__schema['scalar']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('scalar',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __transform_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__transform_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Enable data transformations'
        value = self.__transform( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'transform': value},{'transform': self.__schema['transform']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('transform',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __freqframe_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__freqframe_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__freqframe_dflt( self.__globals_( ) ) is not None:
             description = 'The frame in which to render frequency and velocity axes'
             value = self.__freqframe( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'freqframe': value},{'freqframe': self.__schema['freqframe']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('freqframe',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __restfreq_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__restfreq_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__restfreq_dflt( self.__globals_( ) ) is not None:
             description = 'Rest frequency to use for velocity conversions'
             value = self.__restfreq( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'restfreq': value},{'restfreq': self.__schema['restfreq']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('restfreq',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __veldef_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__veldef_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'RADIO'
        if self.__veldef_dflt( self.__globals_( ) ) is not None:
             description = 'The definition in which to render velocity'
             value = self.__veldef( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'veldef': value},{'veldef': self.__schema['veldef']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('veldef',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __phasecenter_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__phasecenter_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__phasecenter_dflt( self.__globals_( ) ) is not None:
             description = 'The direction coordinates of the desired center'
             value = self.__phasecenter( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'phasecenter': value},{'phasecenter': self.__schema['phasecenter']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('phasecenter',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __extendflag_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__extendflag_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Extend flagging to other data points not plotted'
        value = self.__extendflag( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'extendflag': value},{'extendflag': self.__schema['extendflag']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('extendflag',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __extcorr_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__extcorr_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__extcorr_dflt( self.__globals_( ) ) is not None:
             description = 'Extend flags based on correlation'
             value = self.__extcorr( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'extcorr': value},{'extcorr': self.__schema['extcorr']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('extcorr',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __extchannel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__extchannel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__extchannel_dflt( self.__globals_( ) ) is not None:
             description = 'Extend flags based on channel'
             value = self.__extchannel( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'extchannel': value},{'extchannel': self.__schema['extchannel']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('extchannel',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __iteraxis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__iteraxis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'The axis over which to iterate'
        value = self.__iteraxis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'iteraxis': value},{'iteraxis': self.__schema['iteraxis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('iteraxis',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __xselfscale_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xselfscale_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__xselfscale_dflt( self.__globals_( ) ) is not None:
             description = 'When True, iterated plots have a common x-axis range (scale).'
             value = self.__xselfscale( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xselfscale': value},{'xselfscale': self.__schema['xselfscale']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('xselfscale',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __yselfscale_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__yselfscale_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__yselfscale_dflt( self.__globals_( ) ) is not None:
             description = 'When True, iterated plots have a common y-axis range (scale).'
             value = self.__yselfscale( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'yselfscale': value},{'yselfscale': self.__schema['yselfscale']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('yselfscale',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __xsharedaxis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xsharedaxis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__xsharedaxis_dflt( self.__globals_( ) ) is not None:
             description = 'Iterated plots on a grid share a common external x-axis per column. Must also set xselfscale=True and gridrows>1.'
             value = self.__xsharedaxis( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xsharedaxis': value},{'xsharedaxis': self.__schema['xsharedaxis']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('xsharedaxis',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __ysharedaxis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__ysharedaxis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__ysharedaxis_dflt( self.__globals_( ) ) is not None:
             description = 'Iterated plots on a grid share a common external y-axis per row. Must also set yselfscale=True and gridcols>1.'
             value = self.__ysharedaxis( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'ysharedaxis': value},{'ysharedaxis': self.__schema['ysharedaxis']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('ysharedaxis',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __customsymbol_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__customsymbol_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ ]
        description = 'Enable custom symbol(s) for unflagged points'
        value = self.__customsymbol( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'customsymbol': value},{'customsymbol': self.__schema['customsymbol']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('customsymbol',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __symbolshape_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__symbolshape_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'autoscaling'
        if self.__symbolshape_dflt( self.__globals_( ) ) is not None:
             description = 'Shape of plotted unflagged symbols'
             value = self.__symbolshape( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'symbolshape': value},{'symbolshape': self.__schema['symbolshape']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('symbolshape',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __symbolsize_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__symbolsize_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(2)
        if self.__symbolsize_dflt( self.__globals_( ) ) is not None:
             description = 'Size of plotted unflagged symbols'
             value = self.__symbolsize( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'symbolsize': value},{'symbolsize': self.__schema['symbolsize']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('symbolsize',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __symbolcolor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__symbolcolor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return '0000ff'
        if self.__symbolcolor_dflt( self.__globals_( ) ) is not None:
             description = 'Color (name or hex code) of plotted unflagged symbols'
             value = self.__symbolcolor( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'symbolcolor': value},{'symbolcolor': self.__schema['symbolcolor']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('symbolcolor',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __symbolfill_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__symbolfill_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'fill'
        if self.__symbolfill_dflt( self.__globals_( ) ) is not None:
             description = 'Fill type of plotted unflagged symbols'
             value = self.__symbolfill( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'symbolfill': value},{'symbolfill': self.__schema['symbolfill']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('symbolfill',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __symboloutline_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__symboloutline_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__symboloutline_dflt( self.__globals_( ) ) is not None:
             description = 'Outline plotted unflagged symbols'
             value = self.__symboloutline( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'symboloutline': value},{'symboloutline': self.__schema['symboloutline']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('symboloutline',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __coloraxis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__coloraxis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Selects data axis for colorizing'
        value = self.__coloraxis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'coloraxis': value},{'coloraxis': self.__schema['coloraxis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('coloraxis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __customflaggedsymbol_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__customflaggedsymbol_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Enable custom symbol(s) for flagged points'
        value = self.__customflaggedsymbol( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'customflaggedsymbol': value},{'customflaggedsymbol': self.__schema['customflaggedsymbol']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('customflaggedsymbol',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __flaggedsymbolshape_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__flaggedsymbolshape_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'circle'
        if self.__flaggedsymbolshape_dflt( self.__globals_( ) ) is not None:
             description = 'Shape of plotted flagged symbols'
             value = self.__flaggedsymbolshape( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'flaggedsymbolshape': value},{'flaggedsymbolshape': self.__schema['flaggedsymbolshape']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('flaggedsymbolshape',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __flaggedsymbolsize_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__flaggedsymbolsize_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(2)
        if self.__flaggedsymbolsize_dflt( self.__globals_( ) ) is not None:
             description = 'Size of plotted flagged symbols'
             value = self.__flaggedsymbolsize( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'flaggedsymbolsize': value},{'flaggedsymbolsize': self.__schema['flaggedsymbolsize']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('flaggedsymbolsize',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __flaggedsymbolcolor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__flaggedsymbolcolor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'ff0000'
        if self.__flaggedsymbolcolor_dflt( self.__globals_( ) ) is not None:
             description = 'Color (name or hex code) of plotted flagged symbols'
             value = self.__flaggedsymbolcolor( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'flaggedsymbolcolor': value},{'flaggedsymbolcolor': self.__schema['flaggedsymbolcolor']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('flaggedsymbolcolor',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __flaggedsymbolfill_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__flaggedsymbolfill_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'fill'
        if self.__flaggedsymbolfill_dflt( self.__globals_( ) ) is not None:
             description = 'Fill type of plotted flagged symbols'
             value = self.__flaggedsymbolfill( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'flaggedsymbolfill': value},{'flaggedsymbolfill': self.__schema['flaggedsymbolfill']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('flaggedsymbolfill',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __flaggedsymboloutline_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__flaggedsymboloutline_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__flaggedsymboloutline_dflt( self.__globals_( ) ) is not None:
             description = 'Outline plotted flagged symbols'
             value = self.__flaggedsymboloutline( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'flaggedsymboloutline': value},{'flaggedsymboloutline': self.__schema['flaggedsymboloutline']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('flaggedsymboloutline',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __xconnector_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xconnector_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Set connector for data points (blank="none"; "line","step")'
        value = self.__xconnector( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xconnector': value},{'xconnector': self.__schema['xconnector']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('xconnector',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __timeconnector_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__timeconnector_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__timeconnector_dflt( self.__globals_( ) ) is not None:
             description = 'Connect points by time rather than x-axis'
             value = self.__timeconnector( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'timeconnector': value},{'timeconnector': self.__schema['timeconnector']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('timeconnector',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __plotrange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__plotrange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'Plot axes ranges: [xmin,xmax,ymin,ymax]'
        value = self.__plotrange( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'plotrange': value},{'plotrange': self.__schema['plotrange']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('plotrange',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __title_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__title_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Title at top of plot'
        value = self.__title( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'title': value},{'title': self.__schema['title']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('title',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __titlefont_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__titlefont_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'Font size for plot title'
        value = self.__titlefont( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'titlefont': value},{'titlefont': self.__schema['titlefont']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('titlefont',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __xlabel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xlabel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Text for horizontal x-axis. Blank for default.'
        value = self.__xlabel( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xlabel': value},{'xlabel': self.__schema['xlabel']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('xlabel',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __xaxisfont_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xaxisfont_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'Font size for x-axis label'
        value = self.__xaxisfont( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xaxisfont': value},{'xaxisfont': self.__schema['xaxisfont']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('xaxisfont',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __ylabel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__ylabel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Text for vertical y-axis. Blank for default.'
        value = self.__ylabel( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'ylabel': value},{'ylabel': self.__schema['ylabel']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('ylabel',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __yaxisfont_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__yaxisfont_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'Font size for y-axis label'
        value = self.__yaxisfont( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'yaxisfont': value},{'yaxisfont': self.__schema['yaxisfont']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('yaxisfont',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __showmajorgrid_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showmajorgrid_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Show major grid lines'
        value = self.__showmajorgrid( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showmajorgrid': value},{'showmajorgrid': self.__schema['showmajorgrid']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('showmajorgrid',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __majorwidth_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__majorwidth_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(1)
        if self.__majorwidth_dflt( self.__globals_( ) ) is not None:
             description = 'Line width in pixels of major grid lines'
             value = self.__majorwidth( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'majorwidth': value},{'majorwidth': self.__schema['majorwidth']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('majorwidth',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __majorstyle_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__majorstyle_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__majorstyle_dflt( self.__globals_( ) ) is not None:
             description = 'Major grid line style'
             value = self.__majorstyle( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'majorstyle': value},{'majorstyle': self.__schema['majorstyle']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('majorstyle',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __majorcolor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__majorcolor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'B0B0B0'
        if self.__majorcolor_dflt( self.__globals_( ) ) is not None:
             description = 'Color (name or hex code) of major grid lines'
             value = self.__majorcolor( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'majorcolor': value},{'majorcolor': self.__schema['majorcolor']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('majorcolor',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showminorgrid_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showminorgrid_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Show minor grid lines'
        value = self.__showminorgrid( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showminorgrid': value},{'showminorgrid': self.__schema['showminorgrid']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('showminorgrid',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __minorwidth_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minorwidth_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(1)
        if self.__minorwidth_dflt( self.__globals_( ) ) is not None:
             description = 'Line width in pixels of minor grid lines'
             value = self.__minorwidth( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minorwidth': value},{'minorwidth': self.__schema['minorwidth']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('minorwidth',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __minorstyle_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minorstyle_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__minorstyle_dflt( self.__globals_( ) ) is not None:
             description = 'Minor grid line style'
             value = self.__minorstyle( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minorstyle': value},{'minorstyle': self.__schema['minorstyle']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('minorstyle',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __minorcolor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minorcolor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'D0D0D0'
        if self.__minorcolor_dflt( self.__globals_( ) ) is not None:
             description = 'Color (name or hex code) of minor grid lines'
             value = self.__minorcolor( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minorcolor': value},{'minorcolor': self.__schema['minorcolor']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('minorcolor',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showlegend_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showlegend_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Show a legend on the plot.'
        value = self.__showlegend( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showlegend': value},{'showlegend': self.__schema['showlegend']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('showlegend',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __legendposition_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__legendposition_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__legendposition_dflt( self.__globals_( ) ) is not None:
             description = 'Legend position, default upperRight.'
             value = self.__legendposition( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'legendposition': value},{'legendposition': self.__schema['legendposition']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('legendposition',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __plotfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__plotfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of plot file to save automatically'
        value = self.__plotfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'plotfile': value},{'plotfile': self.__schema['plotfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('plotfile',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __expformat_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__expformat_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__expformat_dflt( self.__globals_( ) ) is not None:
             description = 'Export format type. If not provided, plotfile extension will be used to determine type.'
             value = self.__expformat( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'expformat': value},{'expformat': self.__schema['expformat']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('expformat',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __verbose_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__verbose_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__verbose_dflt( self.__globals_( ) ) is not None:
             description = 'Include metadata in text export'
             value = self.__verbose( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('verbose',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __exprange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__exprange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__exprange_dflt( self.__globals_( ) ) is not None:
             description = 'Range of iteration plots to export, one plotfile per page.  Multipage pdf exports are not supported.'
             value = self.__exprange( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'exprange': value},{'exprange': self.__schema['exprange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('exprange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __highres_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__highres_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__highres_dflt( self.__globals_( ) ) is not None:
             description = 'Use high resolution'
             value = self.__highres( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'highres': value},{'highres': self.__schema['highres']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('highres',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __dpi_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dpi_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-1)
        if self.__dpi_dflt( self.__globals_( ) ) is not None:
             description = 'DPI of exported plot'
             value = self.__dpi( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dpi': value},{'dpi': self.__schema['dpi']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('dpi',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __width_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__width_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-1)
        if self.__width_dflt( self.__globals_( ) ) is not None:
             description = 'Width in pixels of exported plot'
             value = self.__width( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'width': value},{'width': self.__schema['width']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('width',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __height_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__height_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-1)
        if self.__height_dflt( self.__globals_( ) ) is not None:
             description = 'Height in pixels of exported plot'
             value = self.__height( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'height': value},{'height': self.__schema['height']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('height',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__overwrite_dflt( self.__globals_( ) ) is not None:
             description = 'Overwrite plot file if it already exists'
             value = self.__overwrite( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showgui_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showgui_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Show GUI'
        value = self.__showgui( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showgui': value},{'showgui': self.__schema['showgui']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-23.23s =\x1B[0m %s%-23s%s' % ('showgui',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __clearplots_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__clearplots_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__clearplots_dflt( self.__globals_( ) ) is not None:
             description = 'Remove any existing plots so new ones can replace them.'
             value = self.__clearplots( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'clearplots': value},{'clearplots': self.__schema['clearplots']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-20.20s =\x1B[0m %s%-23s%s' % ('clearplots',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __callib_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__callib_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'Calibration library string or filename for on-the-fly calibration.'
        value = self.__callib( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'callib': value},{'callib': self.__schema['callib']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('callib',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __headeritems_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__headeritems_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Comma-separated list of pre-defined page header items.'
        value = self.__headeritems( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'headeritems': value},{'headeritems': self.__schema['headeritems']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('headeritems',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __showatm_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showatm_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Compute and overlay the atmospheric transmission curve'
        value = self.__showatm( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showatm': value},{'showatm': self.__schema['showatm']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('showatm',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __showtsky_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showtsky_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Compute and overlay the sky temperature curve'
        value = self.__showtsky( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showtsky': value},{'showtsky': self.__schema['showtsky']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('showtsky',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __showimage_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showimage_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Compute and overlay the image sideband curve'
        value = self.__showimage( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showimage': value},{'showimage': self.__schema['showimage']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('showimage',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __colorizeoverlay_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__colorizeoverlay_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Colorize the curve overlay using coloraxis'
        value = self.__colorizeoverlay( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'colorizeoverlay': value},{'colorizeoverlay': self.__schema['colorizeoverlay']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-23.23s = %s%-23s%s' % ('colorizeoverlay',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'minorwidth' in glb: del glb['minorwidth']
        if 'antenna' in glb: del glb['antenna']
        if 'showgui' in glb: del glb['showgui']
        if 'callib' in glb: del glb['callib']
        if 'avgscan' in glb: del glb['avgscan']
        if 'rowindex' in glb: del glb['rowindex']
        if 'colorizeoverlay' in glb: del glb['colorizeoverlay']
        if 'expformat' in glb: del glb['expformat']
        if 'plotindex' in glb: del glb['plotindex']
        if 'clearplots' in glb: del glb['clearplots']
        if 'showimage' in glb: del glb['showimage']
        if 'avgspw' in glb: del glb['avgspw']
        if 'headeritems' in glb: del glb['headeritems']
        if 'extendflag' in glb: del glb['extendflag']
        if 'xconnector' in glb: del glb['xconnector']
        if 'flaggedsymbolshape' in glb: del glb['flaggedsymbolshape']
        if 'field' in glb: del glb['field']
        if 'ylabel' in glb: del glb['ylabel']
        if 'symbolcolor' in glb: del glb['symbolcolor']
        if 'highres' in glb: del glb['highres']
        if 'minorcolor' in glb: del glb['minorcolor']
        if 'verbose' in glb: del glb['verbose']
        if 'msselect' in glb: del glb['msselect']
        if 'intent' in glb: del glb['intent']
        if 'xselfscale' in glb: del glb['xselfscale']
        if 'gridrows' in glb: del glb['gridrows']
        if 'dpi' in glb: del glb['dpi']
        if 'yframe' in glb: del glb['yframe']
        if 'titlefont' in glb: del glb['titlefont']
        if 'majorwidth' in glb: del glb['majorwidth']
        if 'minorstyle' in glb: del glb['minorstyle']
        if 'exprange' in glb: del glb['exprange']
        if 'plotrange' in glb: del glb['plotrange']
        if 'polarization' in glb: del glb['polarization']
        if 'customsymbol' in glb: del glb['customsymbol']
        if 'height' in glb: del glb['height']
        if 'colindex' in glb: del glb['colindex']
        if 'majorstyle' in glb: del glb['majorstyle']
        if 'scan' in glb: del glb['scan']
        if 'vis' in glb: del glb['vis']
        if 'freqframe' in glb: del glb['freqframe']
        if 'flaggedsymbolfill' in glb: del glb['flaggedsymbolfill']
        if 'coloraxis' in glb: del glb['coloraxis']
        if 'yaxislocation' in glb: del glb['yaxislocation']
        if 'array' in glb: del glb['array']
        if 'xframe' in glb: del glb['xframe']
        if 'xdatacolumn' in glb: del glb['xdatacolumn']
        if 'avgchannel' in glb: del glb['avgchannel']
        if 'yinterp' in glb: del glb['yinterp']
        if 'scalar' in glb: del glb['scalar']
        if 'majorcolor' in glb: del glb['majorcolor']
        if 'restfreq' in glb: del glb['restfreq']
        if 'customflaggedsymbol' in glb: del glb['customflaggedsymbol']
        if 'symbolfill' in glb: del glb['symbolfill']
        if 'extcorr' in glb: del glb['extcorr']
        if 'yaxisfont' in glb: del glb['yaxisfont']
        if 'plotfile' in glb: del glb['plotfile']
        if 'flaggedsymbolcolor' in glb: del glb['flaggedsymbolcolor']
        if 'legendposition' in glb: del glb['legendposition']
        if 'averagedata' in glb: del glb['averagedata']
        if 'correlation' in glb: del glb['correlation']
        if 'xaxisfont' in glb: del glb['xaxisfont']
        if 'symbolshape' in glb: del glb['symbolshape']
        if 'yselfscale' in glb: del glb['yselfscale']
        if 'feed' in glb: del glb['feed']
        if 'xlabel' in glb: del glb['xlabel']
        if 'showatm' in glb: del glb['showatm']
        if 'ydatacolumn' in glb: del glb['ydatacolumn']
        if 'gridcols' in glb: del glb['gridcols']
        if 'uvrange' in glb: del glb['uvrange']
        if 'extchannel' in glb: del glb['extchannel']
        if 'phasecenter' in glb: del glb['phasecenter']
        if 'flaggedsymboloutline' in glb: del glb['flaggedsymboloutline']
        if 'flaggedsymbolsize' in glb: del glb['flaggedsymbolsize']
        if 'showmajorgrid' in glb: del glb['showmajorgrid']
        if 'title' in glb: del glb['title']
        if 'antpos' in glb: del glb['antpos']
        if 'overwrite' in glb: del glb['overwrite']
        if 'caltable' in glb: del glb['caltable']
        if 'ysharedaxis' in glb: del glb['ysharedaxis']
        if 'yaxis' in glb: del glb['yaxis']
        if 'xaxis' in glb: del glb['xaxis']
        if 'veldef' in glb: del glb['veldef']
        if 'avgbaseline' in glb: del glb['avgbaseline']
        if 'observation' in glb: del glb['observation']
        if 'symbolsize' in glb: del glb['symbolsize']
        if 'timeconnector' in glb: del glb['timeconnector']
        if 'transform' in glb: del glb['transform']
        if 'width' in glb: del glb['width']
        if 'showminorgrid' in glb: del glb['showminorgrid']
        if 'avgantenna' in glb: del glb['avgantenna']
        if 'spw' in glb: del glb['spw']
        if 'xsharedaxis' in glb: del glb['xsharedaxis']
        if 'selectdata' in glb: del glb['selectdata']
        if 'timerange' in glb: del glb['timerange']
        if 'avgfield' in glb: del glb['avgfield']
        if 'showlegend' in glb: del glb['showlegend']
        if 'showtsky' in glb: del glb['showtsky']
        if 'xinterp' in glb: del glb['xinterp']
        if 'avgtime' in glb: del glb['avgtime']
        if 'iteraxis' in glb: del glb['iteraxis']
        if 'symboloutline' in glb: del glb['symboloutline']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# plotms -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__caltable_inp( )
        self.__gridrows_inp( )
        self.__gridcols_inp( )
        self.__rowindex_inp( )
        self.__colindex_inp( )
        self.__plotindex_inp( )
        self.__xaxis_inp( )
        self.__xdatacolumn_inp( )
        self.__xframe_inp( )
        self.__xinterp_inp( )
        self.__yaxis_inp( )
        self.__ydatacolumn_inp( )
        self.__yframe_inp( )
        self.__yinterp_inp( )
        self.__yaxislocation_inp( )
        self.__selectdata_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__timerange_inp( )
        self.__uvrange_inp( )
        self.__antenna_inp( )
        self.__scan_inp( )
        self.__correlation_inp( )
        self.__polarization_inp( )
        self.__antpos_inp( )
        self.__array_inp( )
        self.__observation_inp( )
        self.__intent_inp( )
        self.__feed_inp( )
        self.__msselect_inp( )
        self.__averagedata_inp( )
        self.__avgchannel_inp( )
        self.__avgtime_inp( )
        self.__avgscan_inp( )
        self.__avgfield_inp( )
        self.__avgbaseline_inp( )
        self.__avgantenna_inp( )
        self.__avgspw_inp( )
        self.__scalar_inp( )
        self.__transform_inp( )
        self.__freqframe_inp( )
        self.__restfreq_inp( )
        self.__veldef_inp( )
        self.__phasecenter_inp( )
        self.__extendflag_inp( )
        self.__extcorr_inp( )
        self.__extchannel_inp( )
        self.__iteraxis_inp( )
        self.__xselfscale_inp( )
        self.__yselfscale_inp( )
        self.__xsharedaxis_inp( )
        self.__ysharedaxis_inp( )
        self.__customsymbol_inp( )
        self.__symbolshape_inp( )
        self.__symbolsize_inp( )
        self.__symbolcolor_inp( )
        self.__symbolfill_inp( )
        self.__symboloutline_inp( )
        self.__coloraxis_inp( )
        self.__customflaggedsymbol_inp( )
        self.__flaggedsymbolshape_inp( )
        self.__flaggedsymbolsize_inp( )
        self.__flaggedsymbolcolor_inp( )
        self.__flaggedsymbolfill_inp( )
        self.__flaggedsymboloutline_inp( )
        self.__xconnector_inp( )
        self.__timeconnector_inp( )
        self.__plotrange_inp( )
        self.__title_inp( )
        self.__titlefont_inp( )
        self.__xlabel_inp( )
        self.__xaxisfont_inp( )
        self.__ylabel_inp( )
        self.__yaxisfont_inp( )
        self.__showmajorgrid_inp( )
        self.__majorwidth_inp( )
        self.__majorstyle_inp( )
        self.__majorcolor_inp( )
        self.__showminorgrid_inp( )
        self.__minorwidth_inp( )
        self.__minorstyle_inp( )
        self.__minorcolor_inp( )
        self.__showlegend_inp( )
        self.__legendposition_inp( )
        self.__plotfile_inp( )
        self.__expformat_inp( )
        self.__verbose_inp( )
        self.__exprange_inp( )
        self.__highres_inp( )
        self.__dpi_inp( )
        self.__width_inp( )
        self.__height_inp( )
        self.__overwrite_inp( )
        self.__showgui_inp( )
        self.__clearplots_inp( )
        self.__callib_inp( )
        self.__headeritems_inp( )
        self.__showatm_inp( )
        self.__showtsky_inp( )
        self.__showimage_inp( )
        self.__colorizeoverlay_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "plotms.last" if os.path.isfile("plotms.last") else "plotms.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('plotms.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
        _invocation_parameters['gridrows'] = self.__gridrows( self.__globals_( ) )
        _invocation_parameters['gridcols'] = self.__gridcols( self.__globals_( ) )
        _invocation_parameters['rowindex'] = self.__rowindex( self.__globals_( ) )
        _invocation_parameters['colindex'] = self.__colindex( self.__globals_( ) )
        _invocation_parameters['plotindex'] = self.__plotindex( self.__globals_( ) )
        _invocation_parameters['xaxis'] = self.__xaxis( self.__globals_( ) )
        _invocation_parameters['xdatacolumn'] = self.__xdatacolumn( self.__globals_( ) )
        _invocation_parameters['xframe'] = self.__xframe( self.__globals_( ) )
        _invocation_parameters['xinterp'] = self.__xinterp( self.__globals_( ) )
        _invocation_parameters['yaxis'] = self.__yaxis( self.__globals_( ) )
        _invocation_parameters['ydatacolumn'] = self.__ydatacolumn( self.__globals_( ) )
        _invocation_parameters['yframe'] = self.__yframe( self.__globals_( ) )
        _invocation_parameters['yinterp'] = self.__yinterp( self.__globals_( ) )
        _invocation_parameters['yaxislocation'] = self.__yaxislocation( self.__globals_( ) )
        _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
        _invocation_parameters['field'] = self.__field( self.__globals_( ) )
        _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
        _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
        _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
        _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
        _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
        _invocation_parameters['correlation'] = self.__correlation( self.__globals_( ) )
        _invocation_parameters['polarization'] = self.__polarization( self.__globals_( ) )
        _invocation_parameters['antpos'] = self.__antpos( self.__globals_( ) )
        _invocation_parameters['array'] = self.__array( self.__globals_( ) )
        _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
        _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
        _invocation_parameters['feed'] = self.__feed( self.__globals_( ) )
        _invocation_parameters['msselect'] = self.__msselect( self.__globals_( ) )
        _invocation_parameters['averagedata'] = self.__averagedata( self.__globals_( ) )
        _invocation_parameters['avgchannel'] = self.__avgchannel( self.__globals_( ) )
        _invocation_parameters['avgtime'] = self.__avgtime( self.__globals_( ) )
        _invocation_parameters['avgscan'] = self.__avgscan( self.__globals_( ) )
        _invocation_parameters['avgfield'] = self.__avgfield( self.__globals_( ) )
        _invocation_parameters['avgbaseline'] = self.__avgbaseline( self.__globals_( ) )
        _invocation_parameters['avgantenna'] = self.__avgantenna( self.__globals_( ) )
        _invocation_parameters['avgspw'] = self.__avgspw( self.__globals_( ) )
        _invocation_parameters['scalar'] = self.__scalar( self.__globals_( ) )
        _invocation_parameters['transform'] = self.__transform( self.__globals_( ) )
        _invocation_parameters['freqframe'] = self.__freqframe( self.__globals_( ) )
        _invocation_parameters['restfreq'] = self.__restfreq( self.__globals_( ) )
        _invocation_parameters['veldef'] = self.__veldef( self.__globals_( ) )
        _invocation_parameters['phasecenter'] = self.__phasecenter( self.__globals_( ) )
        _invocation_parameters['extendflag'] = self.__extendflag( self.__globals_( ) )
        _invocation_parameters['extcorr'] = self.__extcorr( self.__globals_( ) )
        _invocation_parameters['extchannel'] = self.__extchannel( self.__globals_( ) )
        _invocation_parameters['iteraxis'] = self.__iteraxis( self.__globals_( ) )
        _invocation_parameters['xselfscale'] = self.__xselfscale( self.__globals_( ) )
        _invocation_parameters['yselfscale'] = self.__yselfscale( self.__globals_( ) )
        _invocation_parameters['xsharedaxis'] = self.__xsharedaxis( self.__globals_( ) )
        _invocation_parameters['ysharedaxis'] = self.__ysharedaxis( self.__globals_( ) )
        _invocation_parameters['customsymbol'] = self.__customsymbol( self.__globals_( ) )
        _invocation_parameters['symbolshape'] = self.__symbolshape( self.__globals_( ) )
        _invocation_parameters['symbolsize'] = self.__symbolsize( self.__globals_( ) )
        _invocation_parameters['symbolcolor'] = self.__symbolcolor( self.__globals_( ) )
        _invocation_parameters['symbolfill'] = self.__symbolfill( self.__globals_( ) )
        _invocation_parameters['symboloutline'] = self.__symboloutline( self.__globals_( ) )
        _invocation_parameters['coloraxis'] = self.__coloraxis( self.__globals_( ) )
        _invocation_parameters['customflaggedsymbol'] = self.__customflaggedsymbol( self.__globals_( ) )
        _invocation_parameters['flaggedsymbolshape'] = self.__flaggedsymbolshape( self.__globals_( ) )
        _invocation_parameters['flaggedsymbolsize'] = self.__flaggedsymbolsize( self.__globals_( ) )
        _invocation_parameters['flaggedsymbolcolor'] = self.__flaggedsymbolcolor( self.__globals_( ) )
        _invocation_parameters['flaggedsymbolfill'] = self.__flaggedsymbolfill( self.__globals_( ) )
        _invocation_parameters['flaggedsymboloutline'] = self.__flaggedsymboloutline( self.__globals_( ) )
        _invocation_parameters['xconnector'] = self.__xconnector( self.__globals_( ) )
        _invocation_parameters['timeconnector'] = self.__timeconnector( self.__globals_( ) )
        _invocation_parameters['plotrange'] = self.__plotrange( self.__globals_( ) )
        _invocation_parameters['title'] = self.__title( self.__globals_( ) )
        _invocation_parameters['titlefont'] = self.__titlefont( self.__globals_( ) )
        _invocation_parameters['xlabel'] = self.__xlabel( self.__globals_( ) )
        _invocation_parameters['xaxisfont'] = self.__xaxisfont( self.__globals_( ) )
        _invocation_parameters['ylabel'] = self.__ylabel( self.__globals_( ) )
        _invocation_parameters['yaxisfont'] = self.__yaxisfont( self.__globals_( ) )
        _invocation_parameters['showmajorgrid'] = self.__showmajorgrid( self.__globals_( ) )
        _invocation_parameters['majorwidth'] = self.__majorwidth( self.__globals_( ) )
        _invocation_parameters['majorstyle'] = self.__majorstyle( self.__globals_( ) )
        _invocation_parameters['majorcolor'] = self.__majorcolor( self.__globals_( ) )
        _invocation_parameters['showminorgrid'] = self.__showminorgrid( self.__globals_( ) )
        _invocation_parameters['minorwidth'] = self.__minorwidth( self.__globals_( ) )
        _invocation_parameters['minorstyle'] = self.__minorstyle( self.__globals_( ) )
        _invocation_parameters['minorcolor'] = self.__minorcolor( self.__globals_( ) )
        _invocation_parameters['showlegend'] = self.__showlegend( self.__globals_( ) )
        _invocation_parameters['legendposition'] = self.__legendposition( self.__globals_( ) )
        _invocation_parameters['plotfile'] = self.__plotfile( self.__globals_( ) )
        _invocation_parameters['expformat'] = self.__expformat( self.__globals_( ) )
        _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
        _invocation_parameters['exprange'] = self.__exprange( self.__globals_( ) )
        _invocation_parameters['highres'] = self.__highres( self.__globals_( ) )
        _invocation_parameters['dpi'] = self.__dpi( self.__globals_( ) )
        _invocation_parameters['width'] = self.__width( self.__globals_( ) )
        _invocation_parameters['height'] = self.__height( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['showgui'] = self.__showgui( self.__globals_( ) )
        _invocation_parameters['clearplots'] = self.__clearplots( self.__globals_( ) )
        _invocation_parameters['callib'] = self.__callib( self.__globals_( ) )
        _invocation_parameters['headeritems'] = self.__headeritems( self.__globals_( ) )
        _invocation_parameters['showatm'] = self.__showatm( self.__globals_( ) )
        _invocation_parameters['showtsky'] = self.__showtsky( self.__globals_( ) )
        _invocation_parameters['showimage'] = self.__showimage( self.__globals_( ) )
        _invocation_parameters['colorizeoverlay'] = self.__colorizeoverlay( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-20s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#plotms( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, caltable=None, gridrows=None, gridcols=None, rowindex=None, colindex=None, plotindex=None, xaxis=None, xdatacolumn=None, xframe=None, xinterp=None, yaxis=None, ydatacolumn=None, yframe=None, yinterp=None, yaxislocation=None, selectdata=None, field=None, spw=None, timerange=None, uvrange=None, antenna=None, scan=None, correlation=None, polarization=None, antpos=None, array=None, observation=None, intent=None, feed=None, msselect=None, averagedata=None, avgchannel=None, avgtime=None, avgscan=None, avgfield=None, avgbaseline=None, avgantenna=None, avgspw=None, scalar=None, transform=None, freqframe=None, restfreq=None, veldef=None, phasecenter=None, extendflag=None, extcorr=None, extchannel=None, iteraxis=None, xselfscale=None, yselfscale=None, xsharedaxis=None, ysharedaxis=None, customsymbol=None, symbolshape=None, symbolsize=None, symbolcolor=None, symbolfill=None, symboloutline=None, coloraxis=None, customflaggedsymbol=None, flaggedsymbolshape=None, flaggedsymbolsize=None, flaggedsymbolcolor=None, flaggedsymbolfill=None, flaggedsymboloutline=None, xconnector=None, timeconnector=None, plotrange=None, title=None, titlefont=None, xlabel=None, xaxisfont=None, ylabel=None, yaxisfont=None, showmajorgrid=None, majorwidth=None, majorstyle=None, majorcolor=None, showminorgrid=None, minorwidth=None, minorstyle=None, minorcolor=None, showlegend=None, legendposition=None, plotfile=None, expformat=None, verbose=None, exprange=None, highres=None, dpi=None, width=None, height=None, overwrite=None, showgui=None, clearplots=None, callib=None, headeritems=None, showatm=None, showtsky=None, showimage=None, colorizeoverlay=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('plotms.pre')
        _postfile = os.path.realpath('plotms.last')
        task_result = None
        _arguments = [vis,caltable,gridrows,gridcols,rowindex,colindex,plotindex,xaxis,xdatacolumn,xframe,xinterp,yaxis,ydatacolumn,yframe,yinterp,yaxislocation,selectdata,field,spw,timerange,uvrange,antenna,scan,correlation,polarization,antpos,array,observation,intent,feed,msselect,averagedata,avgchannel,avgtime,avgscan,avgfield,avgbaseline,avgantenna,avgspw,scalar,transform,freqframe,restfreq,veldef,phasecenter,extendflag,extcorr,extchannel,iteraxis,xselfscale,yselfscale,xsharedaxis,ysharedaxis,customsymbol,symbolshape,symbolsize,symbolcolor,symbolfill,symboloutline,coloraxis,customflaggedsymbol,flaggedsymbolshape,flaggedsymbolsize,flaggedsymbolcolor,flaggedsymbolfill,flaggedsymboloutline,xconnector,timeconnector,plotrange,title,titlefont,xlabel,xaxisfont,ylabel,yaxisfont,showmajorgrid,majorwidth,majorstyle,majorcolor,showminorgrid,minorwidth,minorstyle,minorcolor,showlegend,legendposition,plotfile,expformat,verbose,exprange,highres,dpi,width,height,overwrite,showgui,clearplots,callib,headeritems,showatm,showtsky,showimage,colorizeoverlay]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if caltable is not None: local_global['caltable'] = caltable
            if gridrows is not None: local_global['gridrows'] = gridrows
            if gridcols is not None: local_global['gridcols'] = gridcols
            if rowindex is not None: local_global['rowindex'] = rowindex
            if colindex is not None: local_global['colindex'] = colindex
            if plotindex is not None: local_global['plotindex'] = plotindex
            if xaxis is not None: local_global['xaxis'] = xaxis
            if yaxis is not None: local_global['yaxis'] = yaxis
            if yaxislocation is not None: local_global['yaxislocation'] = yaxislocation
            if selectdata is not None: local_global['selectdata'] = selectdata
            if averagedata is not None: local_global['averagedata'] = averagedata
            if transform is not None: local_global['transform'] = transform
            if extendflag is not None: local_global['extendflag'] = extendflag
            if iteraxis is not None: local_global['iteraxis'] = iteraxis
            if customsymbol is not None: local_global['customsymbol'] = customsymbol
            if coloraxis is not None: local_global['coloraxis'] = coloraxis
            if customflaggedsymbol is not None: local_global['customflaggedsymbol'] = customflaggedsymbol
            if xconnector is not None: local_global['xconnector'] = xconnector
            if plotrange is not None: local_global['plotrange'] = plotrange
            if title is not None: local_global['title'] = title
            if titlefont is not None: local_global['titlefont'] = titlefont
            if xlabel is not None: local_global['xlabel'] = xlabel
            if xaxisfont is not None: local_global['xaxisfont'] = xaxisfont
            if ylabel is not None: local_global['ylabel'] = ylabel
            if yaxisfont is not None: local_global['yaxisfont'] = yaxisfont
            if showmajorgrid is not None: local_global['showmajorgrid'] = showmajorgrid
            if showminorgrid is not None: local_global['showminorgrid'] = showminorgrid
            if showlegend is not None: local_global['showlegend'] = showlegend
            if plotfile is not None: local_global['plotfile'] = plotfile
            if showgui is not None: local_global['showgui'] = showgui
            if callib is not None: local_global['callib'] = callib
            if headeritems is not None: local_global['headeritems'] = headeritems
            if showatm is not None: local_global['showatm'] = showatm
            if showtsky is not None: local_global['showtsky'] = showtsky
            if showimage is not None: local_global['showimage'] = showimage
            if colorizeoverlay is not None: local_global['colorizeoverlay'] = colorizeoverlay

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['gridrows'] = self.__gridrows( local_global )
            _invocation_parameters['gridcols'] = self.__gridcols( local_global )
            _invocation_parameters['rowindex'] = self.__rowindex( local_global )
            _invocation_parameters['colindex'] = self.__colindex( local_global )
            _invocation_parameters['plotindex'] = self.__plotindex( local_global )
            _invocation_parameters['xaxis'] = self.__xaxis( local_global )
            _invocation_parameters['yaxis'] = self.__yaxis( local_global )
            _invocation_parameters['yaxislocation'] = self.__yaxislocation( local_global )
            _invocation_parameters['selectdata'] = self.__selectdata( local_global )
            _invocation_parameters['averagedata'] = self.__averagedata( local_global )
            _invocation_parameters['transform'] = self.__transform( local_global )
            _invocation_parameters['extendflag'] = self.__extendflag( local_global )
            _invocation_parameters['iteraxis'] = self.__iteraxis( local_global )
            _invocation_parameters['customsymbol'] = self.__customsymbol( local_global )
            _invocation_parameters['coloraxis'] = self.__coloraxis( local_global )
            _invocation_parameters['customflaggedsymbol'] = self.__customflaggedsymbol( local_global )
            _invocation_parameters['xconnector'] = self.__xconnector( local_global )
            _invocation_parameters['plotrange'] = self.__plotrange( local_global )
            _invocation_parameters['title'] = self.__title( local_global )
            _invocation_parameters['titlefont'] = self.__titlefont( local_global )
            _invocation_parameters['xlabel'] = self.__xlabel( local_global )
            _invocation_parameters['xaxisfont'] = self.__xaxisfont( local_global )
            _invocation_parameters['ylabel'] = self.__ylabel( local_global )
            _invocation_parameters['yaxisfont'] = self.__yaxisfont( local_global )
            _invocation_parameters['showmajorgrid'] = self.__showmajorgrid( local_global )
            _invocation_parameters['showminorgrid'] = self.__showminorgrid( local_global )
            _invocation_parameters['showlegend'] = self.__showlegend( local_global )
            _invocation_parameters['plotfile'] = self.__plotfile( local_global )
            _invocation_parameters['showgui'] = self.__showgui( local_global )
            _invocation_parameters['callib'] = self.__callib( local_global )
            _invocation_parameters['headeritems'] = self.__headeritems( local_global )
            _invocation_parameters['showatm'] = self.__showatm( local_global )
            _invocation_parameters['showtsky'] = self.__showtsky( local_global )
            _invocation_parameters['showimage'] = self.__showimage( local_global )
            _invocation_parameters['colorizeoverlay'] = self.__colorizeoverlay( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['xdatacolumn'] = self.__xdatacolumn( _invocation_parameters ) if xdatacolumn is None else xdatacolumn
            _invocation_parameters['xframe'] = self.__xframe( _invocation_parameters ) if xframe is None else xframe
            _invocation_parameters['xinterp'] = self.__xinterp( _invocation_parameters ) if xinterp is None else xinterp
            _invocation_parameters['ydatacolumn'] = self.__ydatacolumn( _invocation_parameters ) if ydatacolumn is None else ydatacolumn
            _invocation_parameters['yframe'] = self.__yframe( _invocation_parameters ) if yframe is None else yframe
            _invocation_parameters['yinterp'] = self.__yinterp( _invocation_parameters ) if yinterp is None else yinterp
            _invocation_parameters['field'] = self.__field( _invocation_parameters ) if field is None else field
            _invocation_parameters['spw'] = self.__spw( _invocation_parameters ) if spw is None else spw
            _invocation_parameters['timerange'] = self.__timerange( _invocation_parameters ) if timerange is None else timerange
            _invocation_parameters['uvrange'] = self.__uvrange( _invocation_parameters ) if uvrange is None else uvrange
            _invocation_parameters['antenna'] = self.__antenna( _invocation_parameters ) if antenna is None else antenna
            _invocation_parameters['scan'] = self.__scan( _invocation_parameters ) if scan is None else scan
            _invocation_parameters['correlation'] = self.__correlation( _invocation_parameters ) if correlation is None else correlation
            _invocation_parameters['polarization'] = self.__polarization( _invocation_parameters ) if polarization is None else polarization
            _invocation_parameters['antpos'] = self.__antpos( _invocation_parameters ) if antpos is None else antpos
            _invocation_parameters['array'] = self.__array( _invocation_parameters ) if array is None else array
            _invocation_parameters['observation'] = self.__observation( _invocation_parameters ) if observation is None else observation
            _invocation_parameters['intent'] = self.__intent( _invocation_parameters ) if intent is None else intent
            _invocation_parameters['feed'] = self.__feed( _invocation_parameters ) if feed is None else feed
            _invocation_parameters['msselect'] = self.__msselect( _invocation_parameters ) if msselect is None else msselect
            _invocation_parameters['avgchannel'] = self.__avgchannel( _invocation_parameters ) if avgchannel is None else avgchannel
            _invocation_parameters['avgtime'] = self.__avgtime( _invocation_parameters ) if avgtime is None else avgtime
            _invocation_parameters['avgscan'] = self.__avgscan( _invocation_parameters ) if avgscan is None else avgscan
            _invocation_parameters['avgfield'] = self.__avgfield( _invocation_parameters ) if avgfield is None else avgfield
            _invocation_parameters['avgbaseline'] = self.__avgbaseline( _invocation_parameters ) if avgbaseline is None else avgbaseline
            _invocation_parameters['avgantenna'] = self.__avgantenna( _invocation_parameters ) if avgantenna is None else avgantenna
            _invocation_parameters['avgspw'] = self.__avgspw( _invocation_parameters ) if avgspw is None else avgspw
            _invocation_parameters['scalar'] = self.__scalar( _invocation_parameters ) if scalar is None else scalar
            _invocation_parameters['freqframe'] = self.__freqframe( _invocation_parameters ) if freqframe is None else freqframe
            _invocation_parameters['restfreq'] = self.__restfreq( _invocation_parameters ) if restfreq is None else restfreq
            _invocation_parameters['veldef'] = self.__veldef( _invocation_parameters ) if veldef is None else veldef
            _invocation_parameters['phasecenter'] = self.__phasecenter( _invocation_parameters ) if phasecenter is None else phasecenter
            _invocation_parameters['extcorr'] = self.__extcorr( _invocation_parameters ) if extcorr is None else extcorr
            _invocation_parameters['extchannel'] = self.__extchannel( _invocation_parameters ) if extchannel is None else extchannel
            _invocation_parameters['xselfscale'] = self.__xselfscale( _invocation_parameters ) if xselfscale is None else xselfscale
            _invocation_parameters['yselfscale'] = self.__yselfscale( _invocation_parameters ) if yselfscale is None else yselfscale
            _invocation_parameters['xsharedaxis'] = self.__xsharedaxis( _invocation_parameters ) if xsharedaxis is None else xsharedaxis
            _invocation_parameters['ysharedaxis'] = self.__ysharedaxis( _invocation_parameters ) if ysharedaxis is None else ysharedaxis
            _invocation_parameters['symbolshape'] = self.__symbolshape( _invocation_parameters ) if symbolshape is None else symbolshape
            _invocation_parameters['symbolsize'] = self.__symbolsize( _invocation_parameters ) if symbolsize is None else symbolsize
            _invocation_parameters['symbolcolor'] = self.__symbolcolor( _invocation_parameters ) if symbolcolor is None else symbolcolor
            _invocation_parameters['symbolfill'] = self.__symbolfill( _invocation_parameters ) if symbolfill is None else symbolfill
            _invocation_parameters['symboloutline'] = self.__symboloutline( _invocation_parameters ) if symboloutline is None else symboloutline
            _invocation_parameters['flaggedsymbolshape'] = self.__flaggedsymbolshape( _invocation_parameters ) if flaggedsymbolshape is None else flaggedsymbolshape
            _invocation_parameters['flaggedsymbolsize'] = self.__flaggedsymbolsize( _invocation_parameters ) if flaggedsymbolsize is None else flaggedsymbolsize
            _invocation_parameters['flaggedsymbolcolor'] = self.__flaggedsymbolcolor( _invocation_parameters ) if flaggedsymbolcolor is None else flaggedsymbolcolor
            _invocation_parameters['flaggedsymbolfill'] = self.__flaggedsymbolfill( _invocation_parameters ) if flaggedsymbolfill is None else flaggedsymbolfill
            _invocation_parameters['flaggedsymboloutline'] = self.__flaggedsymboloutline( _invocation_parameters ) if flaggedsymboloutline is None else flaggedsymboloutline
            _invocation_parameters['timeconnector'] = self.__timeconnector( _invocation_parameters ) if timeconnector is None else timeconnector
            _invocation_parameters['majorwidth'] = self.__majorwidth( _invocation_parameters ) if majorwidth is None else majorwidth
            _invocation_parameters['majorstyle'] = self.__majorstyle( _invocation_parameters ) if majorstyle is None else majorstyle
            _invocation_parameters['majorcolor'] = self.__majorcolor( _invocation_parameters ) if majorcolor is None else majorcolor
            _invocation_parameters['minorwidth'] = self.__minorwidth( _invocation_parameters ) if minorwidth is None else minorwidth
            _invocation_parameters['minorstyle'] = self.__minorstyle( _invocation_parameters ) if minorstyle is None else minorstyle
            _invocation_parameters['minorcolor'] = self.__minorcolor( _invocation_parameters ) if minorcolor is None else minorcolor
            _invocation_parameters['legendposition'] = self.__legendposition( _invocation_parameters ) if legendposition is None else legendposition
            _invocation_parameters['expformat'] = self.__expformat( _invocation_parameters ) if expformat is None else expformat
            _invocation_parameters['verbose'] = self.__verbose( _invocation_parameters ) if verbose is None else verbose
            _invocation_parameters['exprange'] = self.__exprange( _invocation_parameters ) if exprange is None else exprange
            _invocation_parameters['highres'] = self.__highres( _invocation_parameters ) if highres is None else highres
            _invocation_parameters['dpi'] = self.__dpi( _invocation_parameters ) if dpi is None else dpi
            _invocation_parameters['width'] = self.__width( _invocation_parameters ) if width is None else width
            _invocation_parameters['height'] = self.__height( _invocation_parameters ) if height is None else height
            _invocation_parameters['overwrite'] = self.__overwrite( _invocation_parameters ) if overwrite is None else overwrite
            _invocation_parameters['clearplots'] = self.__clearplots( _invocation_parameters ) if clearplots is None else clearplots

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['gridrows'] = self.__gridrows( self.__globals_( ) )
            _invocation_parameters['gridcols'] = self.__gridcols( self.__globals_( ) )
            _invocation_parameters['rowindex'] = self.__rowindex( self.__globals_( ) )
            _invocation_parameters['colindex'] = self.__colindex( self.__globals_( ) )
            _invocation_parameters['plotindex'] = self.__plotindex( self.__globals_( ) )
            _invocation_parameters['xaxis'] = self.__xaxis( self.__globals_( ) )
            _invocation_parameters['xdatacolumn'] = self.__xdatacolumn( self.__globals_( ) )
            _invocation_parameters['xframe'] = self.__xframe( self.__globals_( ) )
            _invocation_parameters['xinterp'] = self.__xinterp( self.__globals_( ) )
            _invocation_parameters['yaxis'] = self.__yaxis( self.__globals_( ) )
            _invocation_parameters['ydatacolumn'] = self.__ydatacolumn( self.__globals_( ) )
            _invocation_parameters['yframe'] = self.__yframe( self.__globals_( ) )
            _invocation_parameters['yinterp'] = self.__yinterp( self.__globals_( ) )
            _invocation_parameters['yaxislocation'] = self.__yaxislocation( self.__globals_( ) )
            _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
            _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
            _invocation_parameters['correlation'] = self.__correlation( self.__globals_( ) )
            _invocation_parameters['polarization'] = self.__polarization( self.__globals_( ) )
            _invocation_parameters['antpos'] = self.__antpos( self.__globals_( ) )
            _invocation_parameters['array'] = self.__array( self.__globals_( ) )
            _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
            _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
            _invocation_parameters['feed'] = self.__feed( self.__globals_( ) )
            _invocation_parameters['msselect'] = self.__msselect( self.__globals_( ) )
            _invocation_parameters['averagedata'] = self.__averagedata( self.__globals_( ) )
            _invocation_parameters['avgchannel'] = self.__avgchannel( self.__globals_( ) )
            _invocation_parameters['avgtime'] = self.__avgtime( self.__globals_( ) )
            _invocation_parameters['avgscan'] = self.__avgscan( self.__globals_( ) )
            _invocation_parameters['avgfield'] = self.__avgfield( self.__globals_( ) )
            _invocation_parameters['avgbaseline'] = self.__avgbaseline( self.__globals_( ) )
            _invocation_parameters['avgantenna'] = self.__avgantenna( self.__globals_( ) )
            _invocation_parameters['avgspw'] = self.__avgspw( self.__globals_( ) )
            _invocation_parameters['scalar'] = self.__scalar( self.__globals_( ) )
            _invocation_parameters['transform'] = self.__transform( self.__globals_( ) )
            _invocation_parameters['freqframe'] = self.__freqframe( self.__globals_( ) )
            _invocation_parameters['restfreq'] = self.__restfreq( self.__globals_( ) )
            _invocation_parameters['veldef'] = self.__veldef( self.__globals_( ) )
            _invocation_parameters['phasecenter'] = self.__phasecenter( self.__globals_( ) )
            _invocation_parameters['extendflag'] = self.__extendflag( self.__globals_( ) )
            _invocation_parameters['extcorr'] = self.__extcorr( self.__globals_( ) )
            _invocation_parameters['extchannel'] = self.__extchannel( self.__globals_( ) )
            _invocation_parameters['iteraxis'] = self.__iteraxis( self.__globals_( ) )
            _invocation_parameters['xselfscale'] = self.__xselfscale( self.__globals_( ) )
            _invocation_parameters['yselfscale'] = self.__yselfscale( self.__globals_( ) )
            _invocation_parameters['xsharedaxis'] = self.__xsharedaxis( self.__globals_( ) )
            _invocation_parameters['ysharedaxis'] = self.__ysharedaxis( self.__globals_( ) )
            _invocation_parameters['customsymbol'] = self.__customsymbol( self.__globals_( ) )
            _invocation_parameters['symbolshape'] = self.__symbolshape( self.__globals_( ) )
            _invocation_parameters['symbolsize'] = self.__symbolsize( self.__globals_( ) )
            _invocation_parameters['symbolcolor'] = self.__symbolcolor( self.__globals_( ) )
            _invocation_parameters['symbolfill'] = self.__symbolfill( self.__globals_( ) )
            _invocation_parameters['symboloutline'] = self.__symboloutline( self.__globals_( ) )
            _invocation_parameters['coloraxis'] = self.__coloraxis( self.__globals_( ) )
            _invocation_parameters['customflaggedsymbol'] = self.__customflaggedsymbol( self.__globals_( ) )
            _invocation_parameters['flaggedsymbolshape'] = self.__flaggedsymbolshape( self.__globals_( ) )
            _invocation_parameters['flaggedsymbolsize'] = self.__flaggedsymbolsize( self.__globals_( ) )
            _invocation_parameters['flaggedsymbolcolor'] = self.__flaggedsymbolcolor( self.__globals_( ) )
            _invocation_parameters['flaggedsymbolfill'] = self.__flaggedsymbolfill( self.__globals_( ) )
            _invocation_parameters['flaggedsymboloutline'] = self.__flaggedsymboloutline( self.__globals_( ) )
            _invocation_parameters['xconnector'] = self.__xconnector( self.__globals_( ) )
            _invocation_parameters['timeconnector'] = self.__timeconnector( self.__globals_( ) )
            _invocation_parameters['plotrange'] = self.__plotrange( self.__globals_( ) )
            _invocation_parameters['title'] = self.__title( self.__globals_( ) )
            _invocation_parameters['titlefont'] = self.__titlefont( self.__globals_( ) )
            _invocation_parameters['xlabel'] = self.__xlabel( self.__globals_( ) )
            _invocation_parameters['xaxisfont'] = self.__xaxisfont( self.__globals_( ) )
            _invocation_parameters['ylabel'] = self.__ylabel( self.__globals_( ) )
            _invocation_parameters['yaxisfont'] = self.__yaxisfont( self.__globals_( ) )
            _invocation_parameters['showmajorgrid'] = self.__showmajorgrid( self.__globals_( ) )
            _invocation_parameters['majorwidth'] = self.__majorwidth( self.__globals_( ) )
            _invocation_parameters['majorstyle'] = self.__majorstyle( self.__globals_( ) )
            _invocation_parameters['majorcolor'] = self.__majorcolor( self.__globals_( ) )
            _invocation_parameters['showminorgrid'] = self.__showminorgrid( self.__globals_( ) )
            _invocation_parameters['minorwidth'] = self.__minorwidth( self.__globals_( ) )
            _invocation_parameters['minorstyle'] = self.__minorstyle( self.__globals_( ) )
            _invocation_parameters['minorcolor'] = self.__minorcolor( self.__globals_( ) )
            _invocation_parameters['showlegend'] = self.__showlegend( self.__globals_( ) )
            _invocation_parameters['legendposition'] = self.__legendposition( self.__globals_( ) )
            _invocation_parameters['plotfile'] = self.__plotfile( self.__globals_( ) )
            _invocation_parameters['expformat'] = self.__expformat( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
            _invocation_parameters['exprange'] = self.__exprange( self.__globals_( ) )
            _invocation_parameters['highres'] = self.__highres( self.__globals_( ) )
            _invocation_parameters['dpi'] = self.__dpi( self.__globals_( ) )
            _invocation_parameters['width'] = self.__width( self.__globals_( ) )
            _invocation_parameters['height'] = self.__height( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['showgui'] = self.__showgui( self.__globals_( ) )
            _invocation_parameters['clearplots'] = self.__clearplots( self.__globals_( ) )
            _invocation_parameters['callib'] = self.__callib( self.__globals_( ) )
            _invocation_parameters['headeritems'] = self.__headeritems( self.__globals_( ) )
            _invocation_parameters['showatm'] = self.__showatm( self.__globals_( ) )
            _invocation_parameters['showtsky'] = self.__showtsky( self.__globals_( ) )
            _invocation_parameters['showimage'] = self.__showimage( self.__globals_( ) )
            _invocation_parameters['colorizeoverlay'] = self.__colorizeoverlay( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-20s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#plotms( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'plotms', [ 'vis=' + repr(_pc.document['vis']), 'caltable=' + repr(_pc.document['caltable']), 'gridrows=' + repr(_pc.document['gridrows']), 'gridcols=' + repr(_pc.document['gridcols']), 'rowindex=' + repr(_pc.document['rowindex']), 'colindex=' + repr(_pc.document['colindex']), 'plotindex=' + repr(_pc.document['plotindex']), 'xaxis=' + repr(_pc.document['xaxis']), 'xdatacolumn=' + repr(_pc.document['xdatacolumn']), 'xframe=' + repr(_pc.document['xframe']), 'xinterp=' + repr(_pc.document['xinterp']), 'yaxis=' + repr(_pc.document['yaxis']), 'ydatacolumn=' + repr(_pc.document['ydatacolumn']), 'yframe=' + repr(_pc.document['yframe']), 'yinterp=' + repr(_pc.document['yinterp']), 'yaxislocation=' + repr(_pc.document['yaxislocation']), 'selectdata=' + repr(_pc.document['selectdata']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'timerange=' + repr(_pc.document['timerange']), 'uvrange=' + repr(_pc.document['uvrange']), 'antenna=' + repr(_pc.document['antenna']), 'scan=' + repr(_pc.document['scan']), 'correlation=' + repr(_pc.document['correlation']), 'polarization=' + repr(_pc.document['polarization']), 'antpos=' + repr(_pc.document['antpos']), 'array=' + repr(_pc.document['array']), 'observation=' + repr(_pc.document['observation']), 'intent=' + repr(_pc.document['intent']), 'feed=' + repr(_pc.document['feed']), 'msselect=' + repr(_pc.document['msselect']), 'averagedata=' + repr(_pc.document['averagedata']), 'avgchannel=' + repr(_pc.document['avgchannel']), 'avgtime=' + repr(_pc.document['avgtime']), 'avgscan=' + repr(_pc.document['avgscan']), 'avgfield=' + repr(_pc.document['avgfield']), 'avgbaseline=' + repr(_pc.document['avgbaseline']), 'avgantenna=' + repr(_pc.document['avgantenna']), 'avgspw=' + repr(_pc.document['avgspw']), 'scalar=' + repr(_pc.document['scalar']), 'transform=' + repr(_pc.document['transform']), 'freqframe=' + repr(_pc.document['freqframe']), 'restfreq=' + repr(_pc.document['restfreq']), 'veldef=' + repr(_pc.document['veldef']), 'phasecenter=' + repr(_pc.document['phasecenter']), 'extendflag=' + repr(_pc.document['extendflag']), 'extcorr=' + repr(_pc.document['extcorr']), 'extchannel=' + repr(_pc.document['extchannel']), 'iteraxis=' + repr(_pc.document['iteraxis']), 'xselfscale=' + repr(_pc.document['xselfscale']), 'yselfscale=' + repr(_pc.document['yselfscale']), 'xsharedaxis=' + repr(_pc.document['xsharedaxis']), 'ysharedaxis=' + repr(_pc.document['ysharedaxis']), 'customsymbol=' + repr(_pc.document['customsymbol']), 'symbolshape=' + repr(_pc.document['symbolshape']), 'symbolsize=' + repr(_pc.document['symbolsize']), 'symbolcolor=' + repr(_pc.document['symbolcolor']), 'symbolfill=' + repr(_pc.document['symbolfill']), 'symboloutline=' + repr(_pc.document['symboloutline']), 'coloraxis=' + repr(_pc.document['coloraxis']), 'customflaggedsymbol=' + repr(_pc.document['customflaggedsymbol']), 'flaggedsymbolshape=' + repr(_pc.document['flaggedsymbolshape']), 'flaggedsymbolsize=' + repr(_pc.document['flaggedsymbolsize']), 'flaggedsymbolcolor=' + repr(_pc.document['flaggedsymbolcolor']), 'flaggedsymbolfill=' + repr(_pc.document['flaggedsymbolfill']), 'flaggedsymboloutline=' + repr(_pc.document['flaggedsymboloutline']), 'xconnector=' + repr(_pc.document['xconnector']), 'timeconnector=' + repr(_pc.document['timeconnector']), 'plotrange=' + repr(_pc.document['plotrange']), 'title=' + repr(_pc.document['title']), 'titlefont=' + repr(_pc.document['titlefont']), 'xlabel=' + repr(_pc.document['xlabel']), 'xaxisfont=' + repr(_pc.document['xaxisfont']), 'ylabel=' + repr(_pc.document['ylabel']), 'yaxisfont=' + repr(_pc.document['yaxisfont']), 'showmajorgrid=' + repr(_pc.document['showmajorgrid']), 'majorwidth=' + repr(_pc.document['majorwidth']), 'majorstyle=' + repr(_pc.document['majorstyle']), 'majorcolor=' + repr(_pc.document['majorcolor']), 'showminorgrid=' + repr(_pc.document['showminorgrid']), 'minorwidth=' + repr(_pc.document['minorwidth']), 'minorstyle=' + repr(_pc.document['minorstyle']), 'minorcolor=' + repr(_pc.document['minorcolor']), 'showlegend=' + repr(_pc.document['showlegend']), 'legendposition=' + repr(_pc.document['legendposition']), 'plotfile=' + repr(_pc.document['plotfile']), 'expformat=' + repr(_pc.document['expformat']), 'verbose=' + repr(_pc.document['verbose']), 'exprange=' + repr(_pc.document['exprange']), 'highres=' + repr(_pc.document['highres']), 'dpi=' + repr(_pc.document['dpi']), 'width=' + repr(_pc.document['width']), 'height=' + repr(_pc.document['height']), 'overwrite=' + repr(_pc.document['overwrite']), 'showgui=' + repr(_pc.document['showgui']), 'clearplots=' + repr(_pc.document['clearplots']), 'callib=' + repr(_pc.document['callib']), 'headeritems=' + repr(_pc.document['headeritems']), 'showatm=' + repr(_pc.document['showatm']), 'showtsky=' + repr(_pc.document['showtsky']), 'showimage=' + repr(_pc.document['showimage']), 'colorizeoverlay=' + repr(_pc.document['colorizeoverlay']) ] )
            task_result = _plotms_t( _pc.document['vis'],_pc.document['caltable'],_pc.document['gridrows'],_pc.document['gridcols'],_pc.document['rowindex'],_pc.document['colindex'],_pc.document['plotindex'],_pc.document['xaxis'],_pc.document['xdatacolumn'],_pc.document['xframe'],_pc.document['xinterp'],_pc.document['yaxis'],_pc.document['ydatacolumn'],_pc.document['yframe'],_pc.document['yinterp'],_pc.document['yaxislocation'],_pc.document['selectdata'],_pc.document['field'],_pc.document['spw'],_pc.document['timerange'],_pc.document['uvrange'],_pc.document['antenna'],_pc.document['scan'],_pc.document['correlation'],_pc.document['polarization'],_pc.document['antpos'],_pc.document['array'],_pc.document['observation'],_pc.document['intent'],_pc.document['feed'],_pc.document['msselect'],_pc.document['averagedata'],_pc.document['avgchannel'],_pc.document['avgtime'],_pc.document['avgscan'],_pc.document['avgfield'],_pc.document['avgbaseline'],_pc.document['avgantenna'],_pc.document['avgspw'],_pc.document['scalar'],_pc.document['transform'],_pc.document['freqframe'],_pc.document['restfreq'],_pc.document['veldef'],_pc.document['phasecenter'],_pc.document['extendflag'],_pc.document['extcorr'],_pc.document['extchannel'],_pc.document['iteraxis'],_pc.document['xselfscale'],_pc.document['yselfscale'],_pc.document['xsharedaxis'],_pc.document['ysharedaxis'],_pc.document['customsymbol'],_pc.document['symbolshape'],_pc.document['symbolsize'],_pc.document['symbolcolor'],_pc.document['symbolfill'],_pc.document['symboloutline'],_pc.document['coloraxis'],_pc.document['customflaggedsymbol'],_pc.document['flaggedsymbolshape'],_pc.document['flaggedsymbolsize'],_pc.document['flaggedsymbolcolor'],_pc.document['flaggedsymbolfill'],_pc.document['flaggedsymboloutline'],_pc.document['xconnector'],_pc.document['timeconnector'],_pc.document['plotrange'],_pc.document['title'],_pc.document['titlefont'],_pc.document['xlabel'],_pc.document['xaxisfont'],_pc.document['ylabel'],_pc.document['yaxisfont'],_pc.document['showmajorgrid'],_pc.document['majorwidth'],_pc.document['majorstyle'],_pc.document['majorcolor'],_pc.document['showminorgrid'],_pc.document['minorwidth'],_pc.document['minorstyle'],_pc.document['minorcolor'],_pc.document['showlegend'],_pc.document['legendposition'],_pc.document['plotfile'],_pc.document['expformat'],_pc.document['verbose'],_pc.document['exprange'],_pc.document['highres'],_pc.document['dpi'],_pc.document['width'],_pc.document['height'],_pc.document['overwrite'],_pc.document['showgui'],_pc.document['clearplots'],_pc.document['callib'],_pc.document['headeritems'],_pc.document['showatm'],_pc.document['showtsky'],_pc.document['showimage'],_pc.document['colorizeoverlay'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('plotms')
            casalog.post("Exception Reported: Error in plotms: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'plotms', task_result )

        #Added if _plotms_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

plotms = _plotms( )


[build-system]
requires = ["setuptools>=67.6.1", "cython>=3.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "designer_dna"
authors = [{ name = "Jason C Del Rio", email = "spillthetea917@gmail.com" }]
maintainers = [{ name = "Jason C Del Rio", email = "spillthetea917@gmail.com" }]
description = "Project description here."
license = { file = "LICENSE" }
requires-python = ">=3.11"
keywords = ["DNA", "design", "ligation", "optimization"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dynamic = ["version", "readme", "dependencies"]

[project.urls]
homepage = "https://github.com/Spill-Tea/DesignerDNA"
issues = "https://github.com/Spill-Tea/DesignerDNA/issues"

[tool.setuptools.dynamic]
version = { attr = "designer_dna.__version__" }
readme = { file = ["README.md"], content-type = "text/markdown" }
dependencies = { file = ["requirements.txt"] }

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["benchmarks", "build", "docs", "tests", "scripts"]

[tool.setuptools.package-data]
"*" = ["py.typed", "*.pyi", "*.pxd"]
"designer_dna.headers" = ["*.h", "*.c", "*.hpp", "*.cpp"]

[project.optional-dependencies]
dev = ["designer_dna[doc,test,lint,type,commit]", "tox"]
commit = ["pre-commit"]
doc = ["sphinx", "furo", "sphinx_multiversion"]
test = ["pytest", "coverage", "pytest-xdist"]
lint = ["pylint", "ruff"]
type = ["mypy"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-n auto -rA"

[tool.coverage.run]
parallel = true
branch = true
source = ["designer_dna"]
disable_warnings = ["no-data-collected", "module-not-imported"]

[tool.coverage.paths]
source = ["src", "*/.tox/py*/**/site-packages"]

[tool.coverage.report]
fail_under = 95.0
precision = 1
show_missing = true
skip_empty = true
# skip_covered = true
exclude_also = ["def __repr__", 'if __name__ == "__main__"']

[tool.mypy]
mypy_path = "designer_dna"
warn_unused_ignores = true
allow_redefinition = false
force_uppercase_builtins = true

[tool.pylint.main]
# extension-pkg-whitelist = []
ignore = ["dist", "build"]
fail-under = 9.0
jobs = 0
limit-inference-results = 100
persistent = true
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
variable-naming-style = "snake_case"
module-naming-style = "any"

[tool.pylint.format]
max-line-length = 88

[tool.pylint."messages control"]
disable = [
  "R1731", # consider-using-max-builtin
  "E0401", # import-error
]

[tool.pylint."*.pyi"]
disable = [
  "W0613", # unused-argument
  "W0231", # super-init-not-called
]

[tool.ruff]
line-length = 88
indent-width = 4
respect-gitignore = true

[tool.ruff.lint]
select = [
  "B",       # bugbear
  "D",       # pydocstyle
  "E",       # pycodestyle
  "F",       # pyflakes
  "I",       # isort
  "PYI",     # flake8-pyi
  "RUF",     # ruff
  "W",       # pycodestyle
  "PIE",     # flake8-pie
  "PGH004",  # pygrep-hooks - Use specific rule codes when using noqa
  "PLE",     # pylint error
  "PLW",     # pylint warning
  "PLR1714", # Consider merging multiple comparisons
]
ignore = [
  "D102",    # undocumented-public-method (D102)
  "D105",    # undocumented-magic-method (D105)
  "D107",    # undocumented-public-init (D107)
  "D203",    # one-blank-line-before-class (D203)
  "D213",    # multi-line-summary-second-line (D213)
  "PLR0913", # too-many-arguments (PLR0913)
  "C408",    # unnecessary-collection-call (C408)
  "PYI021",  # docstring-in-stub (PYI021)
]

[tool.ruff.lint.pydocstyle]
convention = "google" # Accepts: "google" | "numpy" | "pep257"

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "E402", # Import Statement not at top of file
  "F401", # Unused Imports
]
"tests/*.py" = [
  "D",       # PyDocstyle
  "PLR2004", # magic-value-comparison (PLR2004)
  "F841",    # unused-variable (F841)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# coding: utf-8

"""
    URLR API Reference

    API powering the features of URLR.<br><br>Note that in order to facilitate integration, we provide SDKs for various languages at https://github.com/URLR.<br><br>Key API principles:<br>         <ul><li>All dates follow **ISO-8601** format</li><li>Most errors follow **RFC 9457** standard</li><li>All responses are delivered in English</li></ul>

    The version of the OpenAPI document: 1.12
    Contact: contact@urlr.me
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from urlr.models.list_links200_response import ListLinks200Response

class TestListLinks200Response(unittest.TestCase):
    """ListLinks200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListLinks200Response:
        """Test ListLinks200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListLinks200Response`
        """
        model = ListLinks200Response()
        if include_optional:
            return ListLinks200Response(
                links = [
                    urlr.models.link.Link(
                        id = '436b5d20-e174-4363-94e5-2b3dd4e74b5f', 
                        url = '', 
                        team_id = '', 
                        folder_id = '', 
                        domain = 'urlr.me', 
                        code = 'xxxxx', 
                        label = '', 
                        tags = [
                            urlr.models.link_tags_inner.Link_tags_inner(
                                id = '', 
                                name = '', )
                            ], 
                        password = '**********', 
                        qrcode = urlr.models.link_qrcode.Link_qrcode(
                            data = '', ), 
                        utm = urlr.models.link_utm.Link_utm(
                            campaign = '', 
                            medium = '', 
                            source = '', 
                            content = '', ), 
                        metatag = urlr.models.link_metatag.Link_metatag(
                            title = '', 
                            description = '', 
                            image = '', ), 
                        geolinks = [
                            urlr.models.link_geolinks_inner.Link_geolinks_inner(
                                conditions = [
                                    urlr.models.link_geolinks_inner_conditions_inner.Link_geolinks_inner_conditions_inner(
                                        type = 'country', 
                                        value = '', 
                                        operator = 'AND', )
                                    ], 
                                url = '', )
                            ], 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        delete_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expired_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expired_url = '', 
                        delete_after_expiration = True, )
                    ],
                total = 56,
                limit = 56,
                pages = 56,
                page = 56
            )
        else:
            return ListLinks200Response(
        )
        """

    def testListLinks200Response(self):
        """Test ListLinks200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

[build-system]
requires = ["hatchling>=1.25"]
build-backend = "hatchling.build"

[project]
name = "cachedx"
version = "0.2.1"
description = "Unified httpx cache (TTL/ETag) + DuckDB mirror (raw+normalized) with SQL/LLM helpers"
readme = "README.md"
requires-python = ">=3.12"
authors = [{name = "alywonder", email = "al@yiwonder.com"}]
license = {text = "MIT"}
keywords = ["httpx", "cache", "duckdb", "api", "sql", "llm", "json"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

dependencies = [
    "httpx>=0.27.0",
    "duckdb>=1.0.0",
    "orjson>=3.10.0",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.3.0",
    "typing-extensions>=4.9.0",
]

[project.optional-dependencies]
pandas = ["pandas>=2.2.0"]
dev = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.13.2",
    "mypy>=1.10.0",
    "respx>=0.21.0",
    "ipython>=8.24.0",
    "twine>=6.0.0",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/cachedx"
Documentation = "https://cachedx.readthedocs.io"
Repository = "https://github.com/yourusername/cachedx"
Issues = "https://github.com/yourusername/cachedx/issues"

[tool.hatch.build.targets.wheel]
packages = ["cachedx"]

[tool.uv]
index-url = "https://pypi.org/simple"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = ""
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.ruff]
line-length = 100
target-version = "py312"
src = ["cachedx", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = ["E501"]  # line too long (handled by formatter)

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__
"tests/*" = ["S101"]  # assert allowed in tests

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[[tool.mypy.overrides]]
module = "duckdb.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "orjson.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["cachedx"]
omit = ["tests/*", "**/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[dependency-groups]
dev = [
    "mypy>=1.18.2",
    "pandas-stubs>=2.3.2.250926",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "respx>=0.22.0",
    "ruff>=0.13.2",
    "twine>=6.2.0",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

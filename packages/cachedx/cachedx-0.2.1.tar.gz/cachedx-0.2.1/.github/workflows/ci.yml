name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run ruff check
        run: uv run ruff check cachedx

      - name: Run ruff format check
        run: uv run ruff format --check cachedx

      - name: Run mypy
        run: uv run mypy cachedx

      - name: Run bandit security check
        run: uv run bandit -r cachedx -f json -o bandit-report.json || true

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12", "3.13"]
        include:
          - os: ubuntu-latest
            python-version: "3.12"
            coverage: true

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run tests
        run: uv run pytest tests/ -v --tb=short
        if: ${{ !matrix.coverage }}

      - name: Run tests with coverage
        run: uv run pytest tests/ -v --tb=short --cov=cachedx --cov-report=xml --cov-report=term
        if: ${{ matrix.coverage }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: ${{ matrix.coverage }}
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --extra docs --dev

      - name: Build docs
        run: uv run mkdocs build --strict

      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: site/

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --dev

      - name: Build package
        run: uv build

      - name: Check package
        run: uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Test wheel installation
        run: |
          uv venv test-env
          ./test-env/bin/pip install dist/*.whl
          ./test-env/bin/python -c "import cachedx; print('✅ Wheel installation successful')"

      - name: Test source installation
        run: |
          uv venv test-source
          ./test-source/bin/pip install dist/*.tar.gz
          ./test-source/bin/python -c "import cachedx; print('✅ Source installation successful')"

  all-checks:
    if: always()
    runs-on: ubuntu-latest
    needs: [lint, test, docs, build]
    steps:
      - name: Check all jobs
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

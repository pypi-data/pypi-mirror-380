import warnings
from pathlib import Path
from typing import Dict, Any

from openpyxl import load_workbook


class SimpleExcelAnalyzer:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ Excel —Ñ–∞–π–ª–æ–≤
    –ü–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ read_only=True –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    """

    def __init__(self, file_path: str):
        """
        Args:
            file_path (str): –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        """
        self.file_path = Path(file_path).resolve()
        self.workbook = None
        self._open_workbook()

    def _open_workbook(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç Excel —Ñ–∞–π–ª"""
        if not self.file_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.file_path}")

        try:
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è openpyxl
            with warnings.catch_warnings():
                warnings.filterwarnings("ignore", category=UserWarning, module="openpyxl")

                # read_only=True –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                self.workbook = load_workbook(
                    filename=str(self.file_path),
                    read_only=True,  # –ö–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
                    data_only=True  # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ —Ñ–æ—Ä–º—É–ª—ã
                )

            print(f"‚úÖ –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {self.file_path.name}")
            print(f"üìä –õ–∏—Å—Ç–æ–≤: {len(self.workbook.sheetnames)}")

        except PermissionError as e:
            # –ï—Å–ª–∏ –≤—Å–µ-—Ç–∞–∫–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤—ã–≤–æ–¥–∏–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
            raise Exception(
                f"–§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω: {self.file_path}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"1. –ó–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ Excel\n"
                f"2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n"
                f"3. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ\n"
                f"–û—à–∏–±–∫–∞: {e}"
            )
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    def get_basic_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        file_stats = self.file_path.stat()

        info = {
            'file_name': self.file_path.name,
            'file_size_mb': round(file_stats.st_size / (1024 * 1024), 2),
            'sheets_count': len(self.workbook.sheetnames),
            'sheet_names': self.workbook.sheetnames,
        }

        # –†–∞–∑–º–µ—Ä—ã –ª–∏—Å—Ç–æ–≤
        dimensions = {}
        for sheet_name in self.workbook.sheetnames:
            ws = self.workbook[sheet_name]
            if ws.max_row == 1 and ws.max_column == 1 and ws.cell(1, 1).value is None:
                dimensions[sheet_name] = (0, 0)
            else:
                dimensions[sheet_name] = (ws.max_row, ws.max_column)

        info['sheet_dimensions'] = dimensions
        return info

    def get_detailed_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        basic = self.get_basic_info()

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        props = self.workbook.properties
        if props.creator:
            basic['author'] = props.creator
        if props.title:
            basic['title'] = props.title
        if props.modified:
            basic['modified'] = props.modified.strftime('%Y-%m-%d %H:%M:%S')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∞–∫—Ä–æ—Å—ã (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é)
        basic['has_macros'] = self.file_path.suffix.lower() == '.xlsm'

        return basic

    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É"""
        print("=" * 50)
        print("üìä –ê–ù–ê–õ–ò–ó EXCEL –§–ê–ô–õ–ê")
        print("=" * 50)

        info = self.get_detailed_info()

        print(f"\nüìÅ –§–∞–π–ª: {info['file_name']}")
        print(f"üíæ –†–∞–∑–º–µ—Ä: {info['file_size_mb']} MB")
        print(f"üìÑ –õ–∏—Å—Ç–æ–≤: {info['sheets_count']}")

        if info.get('author'):
            print(f"üë§ –ê–≤—Ç–æ—Ä: {info['author']}")
        if info.get('modified'):
            print(f"üìÖ –ò–∑–º–µ–Ω–µ–Ω: {info['modified']}")

        print(f"\nüìã –õ–∏—Å—Ç—ã:")
        for i, (name, (rows, cols)) in enumerate(info['sheet_dimensions'].items(), 1):
            print(f"  {i}. '{name}' - {rows} —Å—Ç—Ä–æ–∫ √ó {cols} —Å—Ç–æ–ª–±—Ü–æ–≤")

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª"""
        if self.workbook:
            self.workbook.close()
            print("üìÅ –§–∞–π–ª –∑–∞–∫—Ä—ã—Ç")

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

    def __del__(self):
        self.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
def quick_analyze(file_path: str) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ Excel —Ñ–∞–π–ª–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞

    Args:
        file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
    """
    try:
        with SimpleExcelAnalyzer(file_path) as analyzer:
            return analyzer.get_detailed_info()
    except Exception as e:
        return {'error': str(e)}


if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û –ü–û–î–•–û–î–ê")
    print("=" * 50)

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    file_path = r"V:\Accounting\Work\–ú–µ—Ä—Ü\2025\3 –∫–≤–∞—Ä—Ç–∞–ª 2025\–ê–≤–≥—É—Å—Ç 2025 –≥–æ–¥–∞\–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å\!–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ú–°–§–û_–∞–≤–≥—É—Å—Ç 2025.xlsx"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª

    try:
        # –°–ø–æ—Å–æ–± 1: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        print("\nüìã –°–ø–æ—Å–æ–± 1: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
        with SimpleExcelAnalyzer(file_path) as analyzer:
            analyzer.print_summary()

        # –°–ø–æ—Å–æ–± 2: –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        print("\n‚ö° –°–ø–æ—Å–æ–± 2: –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
        info = quick_analyze(file_path)
        if 'error' in info:
            print(f"‚ùå –û—à–∏–±–∫–∞: {info['error']}")
        else:
            print(f"‚úÖ –§–∞–π–ª: {info['file_name']}")
            print(f"üìä –õ–∏—Å—Ç–æ–≤: {info['sheets_count']}")
            print(f"üìã –ù–∞–∑–≤–∞–Ω–∏—è: {info['sheet_names']}")

        # –°–ø–æ—Å–æ–± 3: –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        print("\nüìñ –°–ø–æ—Å–æ–± 3: –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
        analyzer = SimpleExcelAnalyzer(file_path)
        basic_info = analyzer.get_basic_info()
        print(f"–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {basic_info}")
        analyzer.close()

    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ Excel —Ñ–∞–π–ª (.xlsx)")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ Excel")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç")
        print("4. read_only=True –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª–∏—Ç—å —á—Ç–µ–Ω–∏–µ")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    print(f"\nüéØ –í–´–í–û–î–´:")
    print(f"‚úÖ read_only=True —Ä–µ—à–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º")
    print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∫–æ–¥ = –º–µ–Ω—å—à–µ –±–∞–≥–æ–≤")
    print(f"‚úÖ openpyxl –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–º–Ω—ã–π —Å–∞–º –ø–æ —Å–µ–±–µ")
    print(f"‚ö†Ô∏è –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è edge cases")

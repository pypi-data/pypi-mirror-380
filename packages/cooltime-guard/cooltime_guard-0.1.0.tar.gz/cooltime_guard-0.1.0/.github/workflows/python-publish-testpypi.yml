# This workflow will upload a Python Package to TestPyPI manually

name: Upload Python Package to TestPyPI

on:
  # Manual trigger
  # See https://docs.github.com/ja/actions/how-tos/manage-workflow-runs/manually-run-a-workflow
  workflow_dispatch: {}

permissions:
  contents: read

env:
  CI: true

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version-file: ".python-version"

      - uses: astral-sh/setup-uv@v6

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Run tests
        run: |
          uv run pytest
          uv run ruff check src
          uv run mypy src

      - name: Build release distributions
        run: uv build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  testpypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: testpypi
      url: https://test.pypi.org/project/cooltime-guard/

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          packages-dir: dist/
          repository-url: https://test.pypi.org/legacy/

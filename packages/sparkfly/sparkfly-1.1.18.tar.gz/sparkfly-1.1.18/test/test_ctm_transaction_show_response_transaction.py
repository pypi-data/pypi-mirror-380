# coding: utf-8

"""
    Core Operations

    The Sparkfly Platform provides a full lifecycle for promotions and rewards from creation to distribution to settlement. The platform integrates in real-time at the point-of-sale and provides item level discounting and tracking. The capabilities of the Sparkfly Platform are available through the use of the Sparkfly Platform API.  The Sparkfly documentation site is under development. If the documentation you're after isn't available here, please contact support@sparkfly.com and we will get you what you need.

    The version of the OpenAPI document: 1.0
    Contact: support@sparkfly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sparkfly.models.ctm_transaction_show_response_transaction import CtmTransactionShowResponseTransaction

class TestCtmTransactionShowResponseTransaction(unittest.TestCase):
    """CtmTransactionShowResponseTransaction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CtmTransactionShowResponseTransaction:
        """Test CtmTransactionShowResponseTransaction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CtmTransactionShowResponseTransaction`
        """
        model = CtmTransactionShowResponseTransaction()
        if include_optional:
            return CtmTransactionShowResponseTransaction(
                errors = [
                    sparkfly.models.ctm_transaction_show_response_transaction_errors_inner.ctm_transaction_show_response_transaction_errors_inner(
                        message = '', 
                        pos_offer_code = '', 
                        pos_offer_code_type = '', 
                        validation_id = '', 
                        code = '', 
                        priority = null, )
                    ],
                display_messages = [
                    sparkfly.models.ctm_transaction_show_response_transaction_display_messages_inner.ctm_transaction_show_response_transaction_display_messages_inner(
                        message = '', 
                        priority = 56, )
                    ],
                reciept_messages = [
                    sparkfly.models.ctm_transaction_show_response_transaction_reciept_messages_inner.ctm_transaction_show_response_transaction_reciept_messages_inner(
                        message = '', 
                        barcode_format = '', 
                        priority = 56, 
                        reciept_type = 56, )
                    ],
                credentials = [
                    sparkfly.models.ctm_transaction_show_response_transaction_credentials_inner.ctm_transaction_show_response_transaction_credentials_inner(
                        valid = True, 
                        tx_credential = sparkfly.models.ctm_transaction_show_response_transaction_credentials_inner_tx_credential.ctm_transaction_show_response_transaction_credentials_inner_TxCredential(
                            rpe_identifier = '', 
                            display = '', 
                            external_identifier = '', 
                            external_identifier_type = '', ), )
                    ],
                add_offers = [
                    sparkfly.models.ctm_transaction_show_response_transaction_add_offers_inner.ctm_transaction_show_response_transaction_add_offers_inner(
                        credential_identifier = '', 
                        rpe_auth_code = '', 
                        pos_offer_code = '', 
                        pos_offer_code_type = '', 
                        quantity = '', 
                        ammount = '', 
                        name = '', 
                        qualifying_items = [
                            sparkfly.models.ctm_transaction_show_response_transaction_add_offers_inner_qualifying_items_inner.ctm_transaction_show_response_transaction_add_offers_inner_qualifying_items_inner(
                                line_number = '', 
                                entry_id = '', 
                                item_code = '', 
                                qualification_type = '', )
                            ], 
                        tip = '', 
                        identifier = '', 
                        auth = '', )
                    ],
                remove_offers = [
                    sparkfly.models.ctm_transaction_show_response_transaction_add_offers_inner.ctm_transaction_show_response_transaction_add_offers_inner(
                        credential_identifier = '', 
                        rpe_auth_code = '', 
                        pos_offer_code = '', 
                        pos_offer_code_type = '', 
                        quantity = '', 
                        ammount = '', 
                        name = '', 
                        qualifying_items = [
                            sparkfly.models.ctm_transaction_show_response_transaction_add_offers_inner_qualifying_items_inner.ctm_transaction_show_response_transaction_add_offers_inner_qualifying_items_inner(
                                line_number = '', 
                                entry_id = '', 
                                item_code = '', 
                                qualification_type = '', )
                            ], 
                        tip = '', 
                        identifier = '', 
                        auth = '', )
                    ],
                availible_offers = [
                    sparkfly.models.ctm_transaction_show_response_transaction_availible_offers_inner.ctm_transaction_show_response_transaction_availible_offers_inner(
                        offer_id = '', 
                        name = '', 
                        valid_now = True, 
                        invalid_reason = '', 
                        expiration_date = '', )
                    ]
            )
        else:
            return CtmTransactionShowResponseTransaction(
        )
        """

    def testCtmTransactionShowResponseTransaction(self):
        """Test CtmTransactionShowResponseTransaction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

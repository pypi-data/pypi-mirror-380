# coding: utf-8

"""
    Core Operations

    The Sparkfly Platform provides a full lifecycle for promotions and rewards from creation to distribution to settlement. The platform integrates in real-time at the point-of-sale and provides item level discounting and tracking. The capabilities of the Sparkfly Platform are available through the use of the Sparkfly Platform API.  The Sparkfly documentation site is under development. If the documentation you're after isn't available here, please contact support@sparkfly.com and we will get you what you need.

    The version of the OpenAPI document: 1.0
    Contact: support@sparkfly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sparkfly.api.audiences_api import AudiencesApi


class TestAudiencesApi(unittest.IsolatedAsyncioTestCase):
    """AudiencesApi unit test stubs"""

    async def asyncSetUp(self) -> None:
        self.api = AudiencesApi()

    async def asyncTearDown(self) -> None:
        await self.api.api_client.close()

    async def test_delete_audiences_id(self) -> None:
        """Test case for delete_audiences_id

        Remove an Audience
        """
        pass

    async def test_delete_audiences_id_sub_audiences_sub_audience_id(self) -> None:
        """Test case for delete_audiences_id_sub_audiences_sub_audience_id

        Remove a Sub-Audience
        """
        pass

    async def test_get_audiences(self) -> None:
        """Test case for get_audiences

        List all Audiences
        """
        pass

    async def test_get_audiences_id(self) -> None:
        """Test case for get_audiences_id

        Retrieve an Audience
        """
        pass

    async def test_get_audiences_id_sub_audiences(self) -> None:
        """Test case for get_audiences_id_sub_audiences

        List all Sub-Audiences
        """
        pass

    async def test_get_audiences_id_sub_audiences_sub_audience_id(self) -> None:
        """Test case for get_audiences_id_sub_audiences_sub_audience_id

        Retrieve a Sub-Audience
        """
        pass

    async def test_post_audiences(self) -> None:
        """Test case for post_audiences

        Create an Audience
        """
        pass

    async def test_post_audiences_id_sub_audiences(self) -> None:
        """Test case for post_audiences_id_sub_audiences

        Create a Sub-Audience
        """
        pass

    async def test_put_audiences_id(self) -> None:
        """Test case for put_audiences_id

        Update an Audience
        """
        pass

    async def test_put_audiences_id_sub_audiences_sub_audience_id(self) -> None:
        """Test case for put_audiences_id_sub_audiences_sub_audience_id

        Update a Sub-Audience
        """
        pass


if __name__ == '__main__':
    unittest.main()

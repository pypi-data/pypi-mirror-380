# coding: utf-8

"""
    Core Operations

    The Sparkfly Platform provides a full lifecycle for promotions and rewards from creation to distribution to settlement. The platform integrates in real-time at the point-of-sale and provides item level discounting and tracking. The capabilities of the Sparkfly Platform are available through the use of the Sparkfly Platform API.  The Sparkfly documentation site is under development. If the documentation you're after isn't available here, please contact support@sparkfly.com and we will get you what you need.

    The version of the OpenAPI document: 1.0
    Contact: support@sparkfly.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sparkfly.models.inline_object5 import InlineObject5

class TestInlineObject5(unittest.TestCase):
    """InlineObject5 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InlineObject5:
        """Test InlineObject5
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InlineObject5`
        """
        model = InlineObject5()
        if include_optional:
            return InlineObject5(
                member_profile = sparkfly.models.member_profile.MemberProfile(
                    first_name = '', 
                    last_name = '', 
                    phone = '', 
                    email = '', 
                    birth_month = 1, 
                    birth_day = 56, 
                    custom_data = sparkfly.models.custom_data.custom_data(), ),
                errors = sparkfly.models.response_body_errors.ResponseBodyErrors()
            )
        else:
            return InlineObject5(
        )
        """

    def testInlineObject5(self):
        """Test InlineObject5"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

"""Task planner interface - SRP: Separate planning from execution."""

from abc import ABC, abstractmethod
from typing import List, Optional
from dataclasses import dataclass, field
from src.entities import Agent, Task, ExecutionContext


@dataclass
class ExecutionPlan:
    """
    Execution plan generated by planner.

    Clean Architecture: Domain model at use case layer.
    """
    task_order: List[str]  # Ordered task IDs
    task_assignments: dict[str, str] = field(default_factory=dict)  # task_id -> agent_role
    parallel_groups: List[List[str]] = field(default_factory=list)  # Groups for parallel execution


class ITaskPlanner(ABC):
    """
    Interface for task planning.

    SRP: Single responsibility - planning execution strategy.
    DIP: Coordinator depends on this abstraction.
    """

    @abstractmethod
    async def create_plan(
        self,
        tasks: List[Task],
        agents: List[Agent],
        context: Optional[ExecutionContext] = None
    ) -> ExecutionPlan:
        """
        Create execution plan for tasks.

        Args:
            tasks: Tasks to be executed
            agents: Available agents
            context: Optional execution context

        Returns:
            ExecutionPlan with task order, assignments, and parallel groups
        """
        pass
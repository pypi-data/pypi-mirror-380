name: Release to PyPI and Docker Hub

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0

permissions:
  contents: write  # For creating GitHub releases

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .  # Install package in editable mode for tests
    
    - name: Run tests
      run: |
        pytest tests/ -v
    
    - name: Check coverage
      run: |
        pytest tests/ --cov=src --cov-report=term
  
  publish-pypi:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
  
  publish-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/unified-intelligence-cli:latest
          ${{ secrets.DOCKER_USERNAME }}/unified-intelligence-cli:${{ steps.version.outputs.VERSION }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
  
  create-github-release:
    needs: [publish-pypi, publish-docker]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s" HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          # Unified Intelligence CLI ${{ steps.version.outputs.VERSION }}
          
          ## Installation
          
          **PyPI:**
          ```bash
          pip install unified-intelligence-cli
          ```
          
          **Docker:**
          ```bash
          docker pull ${{ secrets.DOCKER_USERNAME }}/unified-intelligence-cli:${{ steps.version.outputs.VERSION }}
          ```
          
          ## Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Full Changelog
          See [IMPLEMENTATION_COMPLETE.md](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/IMPLEMENTATION_COMPLETE.md) for details.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

import geopandas as gpd
import pandas as pd
from .session import BaseBeaconSession as BaseBeaconSession
from _typeshed import Incomplete
from dataclasses import dataclass
from datetime import datetime
from numpy.typing import DTypeLike as DTypeLike
from requests import Response as Response
from typing_extensions import Self

@dataclass
class QueryNode:
    def to_dict(self) -> dict: ...

@dataclass
class Select(QueryNode): ...

@dataclass
class SelectColumn(Select):
    column: str
    alias: str | None = ...

@dataclass
class SelectFunction(Select):
    function: str
    args: list[Select] | None = ...
    alias: str | None = ...

class Functions:
    @staticmethod
    def concat(args: list[str | Select], alias: str) -> SelectFunction: ...
    @staticmethod
    def coalesce(args: list[str | Select], alias: str) -> SelectFunction: ...
    @staticmethod
    def try_cast_to_type(arg: str | Select, to_type: DTypeLike, alias: str) -> SelectFunction: ...
    @staticmethod
    def cast_byte_to_char(arg: str | Select, alias: str) -> SelectFunction: ...
    @staticmethod
    def map_wod_quality_flag_to_sdn_scheme(arg: str | Select, alias: str) -> SelectFunction: ...
    @staticmethod
    def map_pressure_to_depth(arg: str | Select, latitude_column: str | Select, alias: str) -> SelectFunction: ...

@dataclass
class SelectLiteral(Select):
    value: str | int | float | bool
    alias: str | None = ...

@dataclass
class Filter(QueryNode): ...

@dataclass
class RangeFilter(Filter):
    column: str
    gt_eq: str | int | float | datetime | None = ...
    lt_eq: str | int | float | datetime | None = ...

@dataclass
class EqualsFilter(Filter):
    column: str
    eq: str | int | float | bool | datetime

@dataclass
class NotEqualsFilter(Filter):
    column: str
    neq: str | int | float | bool | datetime

@dataclass
class FilerIsNull(Filter):
    column: str
    def to_dict(self) -> dict: ...

@dataclass
class IsNotNullFilter(Filter):
    column: str
    def to_dict(self) -> dict: ...

@dataclass
class AndFilter(Filter):
    filters: list[Filter]
    def to_dict(self) -> dict: ...

@dataclass
class OrFilter(Filter):
    filters: list[Filter]
    def to_dict(self) -> dict: ...

@dataclass
class PolygonFilter(Filter):
    longitude_column: str
    latitude_column: str
    polygon: list[tuple[float, float]]
    def to_dict(self) -> dict: ...

@dataclass
class Output(QueryNode): ...

@dataclass
class NetCDF(Output):
    def to_dict(self) -> dict: ...

@dataclass
class Arrow(Output):
    def to_dict(self) -> dict: ...

@dataclass
class Parquet(Output):
    def to_dict(self) -> dict: ...

@dataclass
class GeoParquet(Output):
    longitude_column: str
    latitude_column: str
    def to_dict(self) -> dict: ...

@dataclass
class CSV(Output):
    def to_dict(self) -> dict: ...

@dataclass
class OdvDataColumn(QueryNode):
    column_name: str
    qf_column: str | None = ...
    comment: str | None = ...
    unit: str | None = ...

@dataclass
class Odv(Output):
    longitude_column: OdvDataColumn
    latitude_column: OdvDataColumn
    time_column: OdvDataColumn
    depth_column: OdvDataColumn
    data_columns: list[OdvDataColumn]
    metadata_columns: list[OdvDataColumn]
    qf_schema: str
    key_column: str
    feature_type_column: str | None = ...
    def to_dict(self) -> dict: ...

class Query:
    http_session: Incomplete
    from_table: Incomplete
    from_file_path: Incomplete
    def __init__(self, http_session: BaseBeaconSession, from_table: str | None = None, from_file_path: str | None = None) -> None: ...
    selects: Incomplete
    def select(self, selects: list[Select]) -> Self: ...
    def add_select(self, select: Select) -> Self: ...
    def add_selects(self, selects: list[Select]) -> Self: ...
    def add_select_column(self, column: str, alias: str | None = None) -> Self: ...
    def add_select_columns(self, columns: list[tuple[str, str | None]]) -> Self: ...
    def add_select_coalesced(self, mergeable_columns: list[str], alias: str) -> Self: ...
    filters: Incomplete
    def filter(self, filters: list[Filter]) -> Self: ...
    def add_filter(self, filter: Filter) -> Self: ...
    def add_bbox_filter(self, longitude_column: str, latitude_column: str, bbox: tuple[float, float, float, float]) -> Self: ...
    def add_polygon_filter(self, longitude_column: str, latitude_column: str, polygon: list[tuple[float, float]]) -> Self: ...
    def add_range_filter(self, column: str, gt_eq: str | int | float | datetime | None = None, lt_eq: str | int | float | datetime | None = None) -> Self: ...
    def add_equals_filter(self, column: str, eq: str | int | float | bool | datetime) -> Self: ...
    def add_not_equals_filter(self, column: str, neq: str | int | float | bool | datetime) -> Self: ...
    def add_is_null_filter(self, column: str) -> Self: ...
    def add_is_not_null_filter(self, column: str) -> Self: ...
    output: Incomplete
    def set_output(self, output: Output) -> Self: ...
    def compile_query(self) -> str: ...
    def run(self) -> Response: ...
    def explain(self) -> dict: ...
    def explain_visualize(self): ...
    def to_netcdf(self, filename: str, build_nc_local: bool = True): ...
    def to_arrow(self, filename: str): ...
    def to_parquet(self, filename: str): ...
    def to_geoparquet(self, filename: str, longitude_column: str, latitude_column: str): ...
    def to_csv(self, filename: str): ...
    def to_zarr(self, filename: str): ...
    def to_pandas_dataframe(self) -> pd.DataFrame: ...
    def to_geo_pandas_dataframe(self, longitude_column: str, latitude_column: str, crs: str = 'EPSG:4326') -> gpd.GeoDataFrame: ...
    def to_odv(self, odv_output: Odv, filename: str): ...

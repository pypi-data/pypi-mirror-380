from types import CodeType
from typing import Any, Dict, List, Optional, Tuple

class Aggregation:
    function_id: str
    total_time: int
    total_calls: int
    sampled_calls: int
    total_squared_time: float
    exceptions: Dict[str, int]
    callers: Tuple[CodeType]
    flow_id: Optional[str]
    sketch_data: SketchData
    code_obj: CodeType
    caller_function_id: Optional[str]
    total_calls_since_start: int
    should_clean: bool

class SketchData:
    data: List[int]
    index_shift: int
    bin_width: float

    def __init__(self, bin_width: float) -> None: ...
    def add(self, value: float) -> None: ...

class Monitor:
    def __init__(self, function_id: str) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class RawInvestigation:
    first_exception: Optional[Exception]
    exceptions: Dict[
        Exception, List[Tuple[str, str]]
    ]  # {Exception: [(function_id_1, caller_function_id_1), (function_id_2, caller_function_id_2), ...]}
    start_time: int
    def __init__(self, start_time: int) -> None: ...

def get_and_swap_aggregations() -> Dict[str, Dict[str, Dict[str, Aggregation]]]: ...
def get_function_id(code: CodeType) -> Optional[str]: ...
def check_linked_code(code: CodeType) -> bool: ...
def mark_linked_code(code: CodeType) -> bool: ...

# get_time is not time since epoch, should only be used for relative time measurements
def get_time() -> int: ...
def get_hud_running_mode() -> int: ...
def set_hud_running_mode(value: int) -> None: ...
def set_frame_eval_hook() -> None: ...
def begin_flow(
    flow_id: Optional[str] = None, investigation: Optional[RawInvestigation] = None
) -> None: ...

# The flowid and investigation functions throw an exception if not in a flow context.
def set_flow_id(flow_id: Optional[str]) -> None: ...
def get_flow_id() -> Optional[str]: ...
def get_investigation() -> Optional[RawInvestigation]: ...
def set_investigation(investigation: Optional[RawInvestigation]) -> None: ...
def reset_after_fork() -> None: ...

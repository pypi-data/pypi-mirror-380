"""Main FastAPI application."""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.core.config import settings
{% if project_type == "api" %}
from app.api.v1.api import api_v1_router
{% else %}
from app.routers.test import router
from app.schemas.user import UserRead, UserCreate, UserUpdate
from app.core.users import fastapi_users
from app.core.security import auth_backend
{% endif %}

{% if orm_type == "beanie" %}
from contextlib import asynccontextmanager
from app.database.mongo import init_db, close_db
{% endif %}


def create_application() -> FastAPI:
    """Create FastAPI app with middleware and routes."""

    application = FastAPI(
        title=settings.PROJECT_NAME,
        description=settings.PROJECT_DESCRIPTION,
        version="0.1.0",
        {% if project_type == "api" %}
        openapi_url=None if settings.ENVIRONMENT == "production" else f"{settings.API_V1_STR}/openapi.json",
        docs_url=None if settings.ENVIRONMENT == "production" else f"{settings.API_V1_STR}/docs",
        redoc_url=None if settings.ENVIRONMENT == "production" else f"{settings.API_V1_STR}/redoc",
        {% else %}
        openapi_url=None if settings.ENVIRONMENT == "production" else "/openapi.json",
        docs_url=None if settings.ENVIRONMENT == "production" else "/docs",
        redoc_url=None if settings.ENVIRONMENT == "production" else "/redoc",
        {% endif %}
        {% if orm_type == "beanie" %}
        lifespan=lifespan,
        {% endif %}
    )

    # Set up CORS
    if settings.BACKEND_CORS_ORIGINS:
        application.add_middleware(
            CORSMiddleware,
            allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
    {% if not project_type == "api" %}
    # FastAPI-Users routers
    application.include_router(
        fastapi_users.get_auth_router(auth_backend),
        prefix="/auth/jwt",
        tags=["auth"],
    )
    application.include_router(
        fastapi_users.get_register_router(UserRead, UserCreate),
        prefix="/auth",
        tags=["auth"],
    )
    application.include_router(
        fastapi_users.get_verify_router(UserRead),
        prefix="/auth",
        tags=["auth"],
    )
    application.include_router(
        fastapi_users.get_users_router(UserRead, UserUpdate),
        prefix="/users",
        tags=["users"],
    )

    # Add Custom Routes
    application.include_router(router, prefix="/api", tags=["api"])
    {% else %}
    application.include_router(api_v1_router)
    {% endif %}
    return application


{% if orm_type == "beanie" %}
@asynccontextmanager
async def lifespan(app: FastAPI):
    await init_db()
    try:
        yield
    finally:
         await close_db()


{% endif %}
app = create_application()


@app.get("/")
def root():
    """Root endpoint."""
    return {
        "message": f"Welcome to {settings.PROJECT_NAME}",
        "version": "0.1.0",
        {% if project_type == "api" %}
        "docs": f"{settings.API_V1_STR}/docs",
        {% else %}
        "docs": "/docs",
        {% endif %}
    }

@app.get("/health")
async def health():
    return {"status": "ok"}

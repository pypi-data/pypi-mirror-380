"""Celery tasks for Beanie fullstack projects."""

import asyncio
from typing import Any

from celery import Task
from celery.utils.log import get_task_logger

from app.core.config import settings
from app.models.users import User
from app.workers.celery_app import celery_app

logger = get_task_logger(__name__)


class AsyncTask(Task):
    """Base task class that handles async operations."""

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Run async tasks in the event loop."""
        return asyncio.run(self.run_async(*args, **kwargs))

    async def run_async(self, *args: Any, **kwargs: Any) -> Any:
        """Override this method in subclasses."""
        raise NotImplementedError


@celery_app.task
def debug_task() -> str:
    """Debug task to test Celery setup."""
    logger.info("Debug task executed successfully")
    return "Debug task completed"


@celery_app.task(base=AsyncTask)
async def send_email_task(to_email: str, subject: str, body: str) -> str:
    """Send email asynchronously."""
    # In a real implementation, integrate with email service
    logger.info(f"Sending email to {to_email}: {subject}")
    await asyncio.sleep(1)  # Simulate email sending
    return f"Email sent to {to_email}"


@celery_app.task(base=AsyncTask)
async def process_user_registration(user_id: str) -> str:
    """Process user registration tasks."""
    from app.db.mongo import init_db

    await init_db()

    user = await User.get(user_id)
    if user:
        logger.info(f"Processing registration for user {user.email}")
        # Add any post-registration tasks here
        return f"Registration processed for user {user.email}"
    else:
        logger.error(f"User {user_id} not found")
        return f"User {user_id} not found"


@celery_app.task
def cleanup_expired_tokens() -> str:
    """Clean up expired authentication tokens."""
    logger.info("Cleaning up expired tokens")
    # Implement token cleanup logic
    return "Token cleanup completed"


@celery_app.task(base=AsyncTask)
async def generate_report(report_type: str, user_id: str) -> str:
    """Generate user-specific reports."""
    from app.db.mongo import init_db

    await init_db()

    user = await User.get(user_id)
    if user:
        logger.info(f"Generating {report_type} report for user {user.email}")
        # Implement report generation logic
        await asyncio.sleep(2)  # Simulate report generation
        return f"{report_type} report generated for user {user.email}"
    else:
        logger.error(f"User {user_id} not found")
        return f"User {user_id} not found"

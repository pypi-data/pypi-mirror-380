"""Sketch analyzer plugin for new output."""

from timesketch.lib.analyzers import interface
from timesketch.lib.analyzers import manager
from time import sleep


class NewOutput(interface.BaseAnalyzer):
    """Sketch analyzer for NewOutput."""

    NAME = "new_output"
    DISPLAY_NAME = "00_new_output"
    DESCRIPTION = "TODO: new_output description"

    DEPENDENCIES = frozenset()

    def __init__(self, index_name, sketch_id, timeline_id=None):
        """Initialize The Sketch Analyzer.

        Args:
            index_name: Opensearch index name
            sketch_id: Sketch ID
        """
        self.index_name = index_name
        super().__init__(index_name, sketch_id, timeline_id=timeline_id)

    def run(self):
        """Entry point for the analyzer.

        Returns:
            String with summary of the analyzer result
        """
        # TODO: Add Opensearch query to get the events you need.
        query = ""

        # TODO: Specify what returned fields you need for your analyzer.
        return_fields = ["message"]

        # Generator of events based on your query.
        # Swap for self.event_pandas to get pandas back instead of events.
        # events = self.event_stream(
        #     query_string=query, return_fields=return_fields)

        # TODO: If an emoji is needed fetch it here.
        # my_emoji = emojis.get_emoji('emoji_name')

        # TODO: Add analyzer logic here.
        # Methods available to use for sketch analyzers:
        # sketch.get_all_indices()
        # (If you add a view, please make sure the analyzer has results before
        # adding the view.)
        # view = self.sketch.add_view(
        #     view_name=name, analyzer_name=self.NAME,
        #     query_string=query_string, query_filter={})
        # event.add_attributes({'foo': 'bar'})
        # event.add_tags(['tag_name'])
        # event.add_label('label')
        # event.add_star()
        # event.add_comment('comment')
        # event.add_emojis([my_emoji])
        # event.add_human_readable('human readable text', self.NAME)
        # Remember you'll need to add event.commit() once all changes to the
        # event have been completed.
        # You can also add a story.
        # story = self.sketch.add_story(title='Story from analyzer')
        # story.add_text('## This is a markdown title')
        # story.add_view(view)
        # story.add_text('This is another paragraph')
        # for event in events:
        #     pass

        # TODO: Fill in and return the analyzer result object.
        # Fields that are available are:
        # self.output.result_status (str): [Required] Analyzer result status.
        #     Valid values are success or error.
        # self.output.result_priority (str): [Required] Priority of the result
        #     based on the analysis findings. Valid values are NOTE (default),
        #     LOW, MEDIUM, HIGH.
        # self.output.result_summary (str): [Required] A summary statement of
        #     the analyzer finding. A result summary must exist even if there is
        #     no finding.
        # self.output.result_markdown (str): [Optional] A detailed information
        #     about the analyzer finding in a markdown format.
        # self.output.references (List[str]): [Optional] A list of references
        #     about the analyzer or the issue the analyzer attempts to address.
        # self.output.result_attributes (dict): [Optional] A dict of key : value
        #     pairs that holds additional finding details.
        # self.output.platform_meta_data: (dict): A dict of key : value
        #     pairs that holds the following information:
        #     self.output.platform_meta_data["saved_views"] (List[int]):
        #         [Optional] Views generatred by the analyzer.
        #     self.output.platform_meta_data["saved_stories"] (List[int]):
        #         [Optional] Stories generated by the analyzer.
        #     self.output.platform_meta_data["saved_graphs"] (List[int]):
        #         [Optional] Graphs generated by the analyzer.
        #     self.output.platform_meta_data["saved_aggregations"] (List[int]):
        #         [Optional] Aggregations generated by the analyzer.
        #     self.output.platform_meta_data["created_tags"] (List[str]):
        #         [Optional] Tags created by the analyzer.

        sleep(10)
        self.output.result_status = "SUCCESS"
        self.output.result_priority = "HIGH"
        self.output.result_summary = "lorem ipsum dolor sit amet consectetur adipiscing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        self.output.result_markdown = "# This is a markdown title\nThis is the next line\n* With some bullet points\n* And another one\n* Another one\n## This is another title\nThis is another paragraph."
        self.output.add_reference(
            "https://osdfir.blogspot.com/2022/11/find-needle-faster-with-hashr-data.html"
        )
        self.output.add_reference("https://attack.mitre.org/techniques/T1053/")
        # self.output.add_saved_view([5, 3])
        # self.output.add_saved_story(1)
        # self.output.add_saved_graph(["winservice", "winlogins"])
        # self.output.add_saved_aggregation(1)
        # self.output.add_saved_aggregation(3)
        # self.output.add_created_tags(["bad", "suspicious", "good"])
        # self.output.add_created_tags("abcdef")
        # self.output.add_created_attributes(["domain", "url", "host"])

        return str(self.output)


manager.AnalysisManager.register_analyzer(NewOutput)

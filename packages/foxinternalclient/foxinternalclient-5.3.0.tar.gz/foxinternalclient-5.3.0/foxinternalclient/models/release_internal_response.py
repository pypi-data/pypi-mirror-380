# coding: utf-8

"""
    Fox API

     Warning: Please add a custom user agent header to your requests. This would help us fighting against DDoS attacks in future, while keeping your application's access to the API. In future, this may be a mandatory requirement.  To reduce the system load, the API endpoints are rate limited. The default limit is 30 requests per minute. Contact admin@orangefox.tech if you need a higher limit.  The requests may be logged for analytics and development purposes. 

    The version of the OpenAPI document: 5.3.0
    Contact: admin@orangefox.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from foxinternalclient.models.maintainer_short_model import MaintainerShortModel
from foxinternalclient.models.recovery_img_response import RecoveryImgResponse
from foxinternalclient.models.release_internal_response_prop_value import ReleaseInternalResponsePropValue
from foxinternalclient.models.release_stats_response import ReleaseStatsResponse
from foxinternalclient.models.release_type import ReleaseType
from typing import Optional, Set
from typing_extensions import Self

class ReleaseInternalResponse(BaseModel):
    """
    ReleaseInternalResponse
    """ # noqa: E501
    size: StrictInt
    id: StrictStr = Field(description="Release ID, that's how we indentify the release in the infrastructure")
    build_id: Optional[StrictStr] = None
    filename: StrictStr
    variant: StrictStr
    device_id: StrictStr
    var_date: Union[StrictFloat, StrictInt] = Field(description="Unix timestamp of the release date", alias="date")
    md5: StrictStr
    version: StrictStr
    type: ReleaseType
    maintainer_id: Optional[StrictStr] = None
    archived: StrictBool
    recovery_img: RecoveryImgResponse
    changelog: List[StrictStr]
    bugs: Optional[List[StrictStr]]
    notes: Optional[StrictStr]
    prop: Optional[Dict[str, ReleaseInternalResponsePropValue]] = None
    stats: Optional[ReleaseStatsResponse] = None
    maintainer: MaintainerShortModel
    url: StrictStr = Field(description="URL of the release on the official website")
    mirrors: Dict[str, StrictStr] = Field(description="Mirrors list (deprecated)")
    __properties: ClassVar[List[str]] = ["size", "id", "build_id", "filename", "variant", "device_id", "date", "md5", "version", "type", "maintainer_id", "archived", "recovery_img", "changelog", "bugs", "notes", "prop", "stats", "maintainer", "url", "mirrors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReleaseInternalResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "url",
            "mirrors",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recovery_img
        if self.recovery_img:
            _dict['recovery_img'] = self.recovery_img.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in prop (dict)
        _field_dict = {}
        if self.prop:
            for _key_prop in self.prop:
                if self.prop[_key_prop]:
                    _field_dict[_key_prop] = self.prop[_key_prop].to_dict()
            _dict['prop'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintainer
        if self.maintainer:
            _dict['maintainer'] = self.maintainer.to_dict()
        # set to None if build_id (nullable) is None
        # and model_fields_set contains the field
        if self.build_id is None and "build_id" in self.model_fields_set:
            _dict['build_id'] = None

        # set to None if maintainer_id (nullable) is None
        # and model_fields_set contains the field
        if self.maintainer_id is None and "maintainer_id" in self.model_fields_set:
            _dict['maintainer_id'] = None

        # set to None if bugs (nullable) is None
        # and model_fields_set contains the field
        if self.bugs is None and "bugs" in self.model_fields_set:
            _dict['bugs'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if prop (nullable) is None
        # and model_fields_set contains the field
        if self.prop is None and "prop" in self.model_fields_set:
            _dict['prop'] = None

        # set to None if stats (nullable) is None
        # and model_fields_set contains the field
        if self.stats is None and "stats" in self.model_fields_set:
            _dict['stats'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReleaseInternalResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "size": obj.get("size"),
            "id": obj.get("id"),
            "build_id": obj.get("build_id"),
            "filename": obj.get("filename"),
            "variant": obj.get("variant"),
            "device_id": obj.get("device_id"),
            "date": obj.get("date"),
            "md5": obj.get("md5"),
            "version": obj.get("version"),
            "type": obj.get("type"),
            "maintainer_id": obj.get("maintainer_id"),
            "archived": obj.get("archived"),
            "recovery_img": RecoveryImgResponse.from_dict(obj["recovery_img"]) if obj.get("recovery_img") is not None else None,
            "changelog": obj.get("changelog"),
            "bugs": obj.get("bugs"),
            "notes": obj.get("notes"),
            "prop": dict(
                (_k, ReleaseInternalResponsePropValue.from_dict(_v))
                for _k, _v in obj["prop"].items()
            )
            if obj.get("prop") is not None
            else None,
            "stats": ReleaseStatsResponse.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "maintainer": MaintainerShortModel.from_dict(obj["maintainer"]) if obj.get("maintainer") is not None else None,
            "url": obj.get("url"),
            "mirrors": obj.get("mirrors")
        })
        return _obj



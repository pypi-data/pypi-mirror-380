# coding: utf-8

"""
    Fox API

     Warning: Please add a custom user agent header to your requests. This would help us fighting against DDoS attacks in future, while keeping your application's access to the API. In future, this may be a mandatory requirement.  To reduce the system load, the API endpoints are rate limited. The default limit is 30 requests per minute. Contact admin@orangefox.tech if you need a higher limit.  The requests may be logged for analytics and development purposes. 

    The version of the OpenAPI document: 5.3.0
    Contact: admin@orangefox.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from foxinternalclient.models.build_status_enum import BuildStatusEnum
from foxinternalclient.models.release_type import ReleaseType
from foxinternalclient.models.short_device_response import ShortDeviceResponse
from typing import Optional, Set
from typing_extensions import Self

class BuildTaskShortResponse(BaseModel):
    """
    BuildTaskShortResponse
    """ # noqa: E501
    id: StrictStr
    started_by_id: StrictStr
    device: ShortDeviceResponse
    status: BuildStatusEnum
    version: Optional[StrictStr] = 'R12'
    type: Optional[ReleaseType] = None
    variant: Optional[StrictStr] = 'default'
    started_at: datetime
    finished_at: Optional[datetime] = None
    has_artifact: StrictBool
    __properties: ClassVar[List[str]] = ["id", "started_by_id", "device", "status", "version", "type", "variant", "started_at", "finished_at", "has_artifact"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildTaskShortResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        # set to None if finished_at (nullable) is None
        # and model_fields_set contains the field
        if self.finished_at is None and "finished_at" in self.model_fields_set:
            _dict['finished_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildTaskShortResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "started_by_id": obj.get("started_by_id"),
            "device": ShortDeviceResponse.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "status": obj.get("status"),
            "version": obj.get("version") if obj.get("version") is not None else 'R12',
            "type": obj.get("type"),
            "variant": obj.get("variant") if obj.get("variant") is not None else 'default',
            "started_at": obj.get("started_at"),
            "finished_at": obj.get("finished_at"),
            "has_artifact": obj.get("has_artifact")
        })
        return _obj



# coding: utf-8

"""
    Fox API

     Warning: Please add a custom user agent header to your requests. This would help us fighting against DDoS attacks in future, while keeping your application's access to the API. In future, this may be a mandatory requirement.  To reduce the system load, the API endpoints are rate limited. The default limit is 30 requests per minute. Contact admin@orangefox.tech if you need a higher limit.  The requests may be logged for analytics and development purposes. 

    The version of the OpenAPI document: 5.3.0
    Contact: admin@orangefox.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from foxinternalclient.models.short_device_response import ShortDeviceResponse
from foxinternalclient.models.user_gitlab import UserGitlab
from foxinternalclient.models.user_mail import UserMail
from foxinternalclient.models.user_telegram import UserTelegram
from typing import Optional, Set
from typing_extensions import Self

class UserInternalResponse(BaseModel):
    """
    UserInternalResponse
    """ # noqa: E501
    id: StrictStr
    username: StrictStr
    name: StrictStr
    freezed: StrictBool
    roles: List[StrictStr]
    telegram: Optional[UserTelegram] = None
    gitlab: Optional[UserGitlab] = None
    mail: Optional[UserMail] = None
    admin_notes: Optional[StrictStr] = None
    maintained_devices: List[ShortDeviceResponse]
    __properties: ClassVar[List[str]] = ["id", "username", "name", "freezed", "roles", "telegram", "gitlab", "mail", "admin_notes", "maintained_devices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserInternalResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of telegram
        if self.telegram:
            _dict['telegram'] = self.telegram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gitlab
        if self.gitlab:
            _dict['gitlab'] = self.gitlab.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mail
        if self.mail:
            _dict['mail'] = self.mail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in maintained_devices (list)
        _items = []
        if self.maintained_devices:
            for _item_maintained_devices in self.maintained_devices:
                if _item_maintained_devices:
                    _items.append(_item_maintained_devices.to_dict())
            _dict['maintained_devices'] = _items
        # set to None if telegram (nullable) is None
        # and model_fields_set contains the field
        if self.telegram is None and "telegram" in self.model_fields_set:
            _dict['telegram'] = None

        # set to None if gitlab (nullable) is None
        # and model_fields_set contains the field
        if self.gitlab is None and "gitlab" in self.model_fields_set:
            _dict['gitlab'] = None

        # set to None if mail (nullable) is None
        # and model_fields_set contains the field
        if self.mail is None and "mail" in self.model_fields_set:
            _dict['mail'] = None

        # set to None if admin_notes (nullable) is None
        # and model_fields_set contains the field
        if self.admin_notes is None and "admin_notes" in self.model_fields_set:
            _dict['admin_notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserInternalResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "username": obj.get("username"),
            "name": obj.get("name"),
            "freezed": obj.get("freezed"),
            "roles": obj.get("roles"),
            "telegram": UserTelegram.from_dict(obj["telegram"]) if obj.get("telegram") is not None else None,
            "gitlab": UserGitlab.from_dict(obj["gitlab"]) if obj.get("gitlab") is not None else None,
            "mail": UserMail.from_dict(obj["mail"]) if obj.get("mail") is not None else None,
            "admin_notes": obj.get("admin_notes"),
            "maintained_devices": [ShortDeviceResponse.from_dict(_item) for _item in obj["maintained_devices"]] if obj.get("maintained_devices") is not None else None
        })
        return _obj



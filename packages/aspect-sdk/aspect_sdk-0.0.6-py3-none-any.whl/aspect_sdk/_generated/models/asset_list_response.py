# coding: utf-8

"""
    Aspect Media Engine API

    A FastAPI application for AI media engine functionality

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from aspect_sdk._generated.models.asset_type import AssetType
from aspect_sdk._generated.models.feature_info import FeatureInfo
from aspect_sdk._generated.models.preview_get_response import PreviewGetResponse
from aspect_sdk._generated.models.proxy_get_response import ProxyGetResponse
from typing import Optional, Set
from typing_extensions import Self

class AssetListResponse(BaseModel):
    """
    API response schema for listing assets
    """ # noqa: E501
    id: StrictStr
    type: AssetType
    name: StrictStr
    size_bytes: StrictInt
    mime_type: StrictStr
    save_original: StrictBool
    duration: Optional[Union[StrictFloat, StrictInt]] = None
    user_id: StrictStr
    index_id: StrictStr
    features: Dict[str, FeatureInfo] = Field(description="Core feature states for an asset - maps core feature types to their current states")
    proxy: Optional[ProxyGetResponse] = None
    preview: Optional[PreviewGetResponse] = None
    created: datetime
    updated: datetime
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "type", "name", "size_bytes", "mime_type", "save_original", "duration", "user_id", "index_id", "features", "proxy", "preview", "created", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in features (dict)
        _field_dict = {}
        if self.features:
            for _key_features in self.features:
                if self.features[_key_features]:
                    _field_dict[_key_features] = self.features[_key_features].to_dict()
            _dict['features'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict['proxy'] = self.proxy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preview
        if self.preview:
            _dict['preview'] = self.preview.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict['duration'] = None

        # set to None if proxy (nullable) is None
        # and model_fields_set contains the field
        if self.proxy is None and "proxy" in self.model_fields_set:
            _dict['proxy'] = None

        # set to None if preview (nullable) is None
        # and model_fields_set contains the field
        if self.preview is None and "preview" in self.model_fields_set:
            _dict['preview'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "size_bytes": obj.get("size_bytes"),
            "mime_type": obj.get("mime_type"),
            "save_original": obj.get("save_original"),
            "duration": obj.get("duration"),
            "user_id": obj.get("user_id"),
            "index_id": obj.get("index_id"),
            "features": dict(
                (_k, FeatureInfo.from_dict(_v))
                for _k, _v in obj["features"].items()
            )
            if obj.get("features") is not None
            else None,
            "proxy": ProxyGetResponse.from_dict(obj["proxy"]) if obj.get("proxy") is not None else None,
            "preview": PreviewGetResponse.from_dict(obj["preview"]) if obj.get("preview") is not None else None,
            "created": obj.get("created"),
            "updated": obj.get("updated")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



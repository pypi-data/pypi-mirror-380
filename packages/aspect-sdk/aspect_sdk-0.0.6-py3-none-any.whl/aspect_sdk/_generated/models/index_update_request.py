# coding: utf-8

"""
    Aspect Media Engine API

    A FastAPI application for AI media engine functionality

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from aspect_sdk._generated.models.core_feature_type import CoreFeatureType
from typing import Optional, Set
from typing_extensions import Self

class IndexUpdateRequest(BaseModel):
    """
    API request schema for updating an index
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    default_features: Optional[List[CoreFeatureType]] = None
    num_assets: Optional[StrictInt] = None
    size_bytes: Optional[StrictInt] = None
    total_tokens_used: Optional[StrictInt] = None
    duration: Optional[Union[StrictFloat, StrictInt]] = None
    sample_prompts: Optional[List[StrictStr]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["name", "description", "default_features", "num_assets", "size_bytes", "total_tokens_used", "duration", "sample_prompts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if default_features (nullable) is None
        # and model_fields_set contains the field
        if self.default_features is None and "default_features" in self.model_fields_set:
            _dict['default_features'] = None

        # set to None if num_assets (nullable) is None
        # and model_fields_set contains the field
        if self.num_assets is None and "num_assets" in self.model_fields_set:
            _dict['num_assets'] = None

        # set to None if size_bytes (nullable) is None
        # and model_fields_set contains the field
        if self.size_bytes is None and "size_bytes" in self.model_fields_set:
            _dict['size_bytes'] = None

        # set to None if total_tokens_used (nullable) is None
        # and model_fields_set contains the field
        if self.total_tokens_used is None and "total_tokens_used" in self.model_fields_set:
            _dict['total_tokens_used'] = None

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict['duration'] = None

        # set to None if sample_prompts (nullable) is None
        # and model_fields_set contains the field
        if self.sample_prompts is None and "sample_prompts" in self.model_fields_set:
            _dict['sample_prompts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "default_features": obj.get("default_features"),
            "num_assets": obj.get("num_assets"),
            "size_bytes": obj.get("size_bytes"),
            "total_tokens_used": obj.get("total_tokens_used"),
            "duration": obj.get("duration"),
            "sample_prompts": obj.get("sample_prompts")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj



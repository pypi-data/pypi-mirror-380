[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sector8-sdk"
version = "1.0.0"
description = "Enterprise AI Security, Observability, and Intelligence SDK"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Sector8 Team", email = "support@sector8.ai"}
]
maintainers = [
    {name = "Sector8 Team", email = "support@sector8.ai"}
]
keywords = ["ai", "security", "observability", "intelligence", "llm", "telemetry", "monitoring"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "asyncio-mqtt>=0.11.0",
    "python-dotenv>=1.0.0",
    "typing-extensions>=4.0.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation>=0.52b0,<1.0.0",
    "wrapt>=1.14.0",
    "keyring>=25.0.0",
    "cryptography>=3.4.0",
    "tenacity>=8.0.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
# LLM Provider Integrations
openai = ["openai>=1.0.0"]
anthropic = ["anthropic>=0.7.0"]
google = ["google-generativeai>=0.3.0"]
azure = ["openai>=1.0.0"]

# Observability
otel = [
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation>=0.52b0,<1.0.0",
    "opentelemetry-exporter-otlp>=1.20.0",
]
prometheus = ["prometheus-client>=0.17.0"]
datadog = ["datadog>=0.44.0"]

# Data Science
ml = [
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
]

# Development
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Documentation
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

# All optional dependencies
all = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "google-generativeai>=0.3.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation>=0.52b0,<1.0.0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "prometheus-client>=0.17.0",
    "datadog>=0.44.0",
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
]

[project.urls]
Homepage = "https://sector8.ai"
Documentation = "https://docs.sector8.ai"
Repository = "https://github.com/sector8-labs/sector8-python-sdk"
"Bug Tracker" = "https://github.com/sector8-labs/sector8-python-sdk/issues"
"Source Code" = "https://github.com/sector8-labs/sector8-python-sdk"
"Security Policy" = "https://github.com/sector8-labs/sector8-python-sdk/security/policy"

[project.scripts]
sector8 = "sector8.cli:main"

[project.entry-points."sector8.providers"]
openai = "sector8.providers.openai:OpenAIProvider"
anthropic = "sector8.providers.anthropic:AnthropicProvider"
google = "sector8.providers.google:GoogleProvider"
azure = "sector8.providers.azure:AzureProvider"

[project.entry-points."sector8.guards"]
openai = "sector8.guard.providers:OpenAIGuard"
anthropic = "sector8.guard.providers:AnthropicGuard"
google = "sector8.guard.providers:GoogleGuard"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
sector8 = ["py.typed"]

# PyPI Publishing Configuration
[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.dynamic]
readme = {file = ["README.md"]}

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["sector8"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "aiohttp.*",
    "click.*",
    "rich.*",
    "pydantic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=sector8",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["src/sector8"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["sector8"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.pycodestyle]
max-doc-length = 88
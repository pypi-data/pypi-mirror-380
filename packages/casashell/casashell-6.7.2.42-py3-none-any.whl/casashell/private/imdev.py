##################### generated by xml-casa (v2) from imdev.xml #####################
##################### 5c1128ffa9091f060432190f8202f67f ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_imdev import imdev as _imdev_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imdev:
    """
    imdev ---- Create an image that can represent the statistical deviations of the input image.

    --------- parameter descriptions ---------------------------------------------

    imagename Input image name
    outfile   Output image file name. If left blank (the default), no image is written but a new image tool referencing the collapsed image is returned.
    region    Region selection. Default is to use the full image.
    box       Rectangular region(s) to select in direction plane. Default is to use the entire direction plane.
    chans     Channels to use. Default is to use all channels.
    stokes    Stokes planes to use. Default is to use all Stokes planes.
    mask      Mask to use. Default setting is none.
    overwrite Overwrite (unprompted) pre-existing output file? Ignored if "outfile" is left blank.
    stretch   Stretch the mask if necessary and possible? Default value is False.
    grid      x,y grid spacing. Array of exactly two positive integers.
    anchor    x,y anchor pixel location. Either "ref" to use the image reference pixel, or an array of exactly two integers.
    xlength   Either x coordinate length of box, or diameter of circle. Circle is used if ylength is empty string.
    ylength   y coordinate length of box. Use a circle if ylength is empty string.
    interp    Interpolation algorithm to use. One of "nearest", "linear", or "cubic". Minimum match supported.
    stattype  Statistic to compute. See full description for supported statistics.
    statalg   Statistics computation algorithm to use. Supported values are "chauvenet" and "classic", Minimum match is supported.
    zscore    For chauvenet, this is the target maximum number of standard deviations data may have to be included. If negative, use Chauvenet"s criterion. Ignored if algorithm is not "chauvenet".
    maxiter   For chauvenet, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, iterate until the zscore criterion is met. Ignored if algortihm is not "chauvenet".
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    This application creates an image that reflects the statistics of the input image. The output image has
    the same dimensions and coordinate system as the (selected region in) input image. The grid parameter
    describes how many pixels apart "grid" pixels are. Statistics are computed around each grid pixel. Grid
    pixels are limited to the direction plane only; independent statistics are computed for each direction plane
    (ie at each frequency/stokes pixel should the input image happen to have such additional axes). Using the
    xlength and ylength parameters, one may specify either a rectangular or circular region around each grid
    point that defines which surrounding pixels are used in the statistic computation for individual grid points.
    If the ylength parameter is the empty string, then a circle of diameter provided by xlength centered on
    the grid point is used. If ylength is not empty, then a rectangular box of dimensions xlength x ylength centered
    on the grid pixel is used. These two parameters may be specified in pixels, using either numerical values or
    valid quantities with "pix" as the unit (eg "4pix"). Otherwise, they must be specified as valid angular
    quantities, with recognized units (eg "4arcsec"). As with other region selections in CASA, full pixels are
    included in the computation even if the specified region includes only a fraction of that pixel. BEWARE OF
    MACHINE PRECISION ISSUES, because you may get a smaller number of pixels included in a region than you
    expect if you specify, eg, an integer number of pixels. In such cases, you probably want to specify that
    number plus a small epsilon value (eg "2.0001pix" rather than "2pix") to mitigate machine precision issues
    when computing region extents.
    
    The output image is formed by putting the statistics calculated at each grid point at the corresponding
    grid point in the output image. Interpolation of these output values is then used to compute values at
    non-grid-point pixels. The user may specify which interpolation algorithm to use for this computation
    using the interp parameter.
    
    The input image pixel mask is copied to the output image. If interpolation is performed, output pixels are
    masked where the interpolation fails.
    
    ANCHORING THE GRID
    
    The user may choose at which pixel to "anchor" the grid. For example, if one specifies grid=[4,4] and
    anchor=[0,0], grid points will be located at pixels [0,0], [0,4], [0,8] ... [4,0], [4,4], etc. This
    is exactly the same grid that would be produced if the user specified anchor=[4,4] or anchor=[20,44].
    If the user specifies anchor=[1, 2] and grid=[4,4], then the grid points will be at pixels [1,2], [5,2],
    [9,2]... [5,2], [5,6], etc. and the resulting grid is the same as it would be if the user specified eg
    anchor=[9,10] or anchor=[21, 18]. The value "ref", which is the default, indicates that the reference
    pixel of the input image should be used to anchor the grid. The x and y values of this pixel will be
    rounded to the nearest integer if necessary.
    
    SUPPORTED STATISTICS AND STATISTICS ALGORITHMS
    
    One may specify which statistic should be represented using the stattype parameter. The following values
    are recognized (minimum match supported):
    
    iqr                   inner quartile range (q3 - q1)
    max                   maximum
    mean                  mean
    medabsdevmed, madm    median absolute deviation from the median
    median                median
    min                   minimum
    npts                  number of points
    q1                    first quartile
    q3                    third quartile
    rms                   rms
    sigma, std            standard deviation
    sumsq                 sum of squares
    sum                   sum
    var                   variance
    xmadm                 median absolute deviation from the median multipied by x, where x is the reciprocal of Phi^-1(3/4),
    where Phi^-1 is the reciprocal of the quantile function. Numerically, x = 1.482602218505602. See, eg,
    https://en.wikipedia.org/wiki/Median_absolute_deviation#Relation_to_standard_deviation
    
    Using the statalg parameter, one may also select whether to use the Classical or Chauvenet/ZScore statistics algorithm to
    compute the desired statistic (see the help for ia.statistics() or imstat for a full description of these algorithms).
    
    # compute standard deviations in circles of diameter 10arcsec around
    # grid pixels spaced every 4 x 5 pixels and anchored at pixel [30, 40],
    # and use linear interpolation to compute values at non-grid-pixels
    imdev("my.im", "sigma.im", grid=[4, 5], anchor=[30, 40], xlength="10arcsec", stattype="sigma", interp="lin", statalg="cl")
    
    # compute median of the absolute deviations from the median values using
    # the z-score/Chauvenet algorithm, by fixing the maximum z-score to determine outliers to 5.
    # Use cubic interpolation to compute values for non-grid-point pixels. Use a rectangular region
    # of dimensions 5arcsec x 20arcsec centered on each grid point as the region in which to include
    # pixels for the computation of stats for that grid point.
    imdev("my.im", "madm.im", grid=[4, 5], anchor=[30, 40], xlength="5arcsec", ylength="20arcsec, stattype="madm", interp="cub", statalg="ch", zscore=5)


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Create an image that can represent the statistical deviations of the input image."""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'region': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cDict'}]}, 'box': {'type': 'cStr', 'coerce': _coerce.to_str}, 'chans': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stokes': {'type': 'cStr', 'coerce': _coerce.to_str}, 'mask': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}, 'stretch': {'type': 'cBool'}, 'grid': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'anchor': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'xlength': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cInt'}]}, 'ylength': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cInt'}]}, 'interp': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stattype': {'type': 'cStr', 'coerce': _coerce.to_str}, 'statalg': {'type': 'cStr', 'coerce': _coerce.to_str}, 'zscore': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'maxiter': {'type': 'cInt'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 10 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __anchor_dflt( self, glb ):
        return 'ref'

    def __anchor( self, glb ):
        if 'anchor' in glb: return glb['anchor']
        return 'ref'

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __ylength_dflt( self, glb ):
        return '1pix'

    def __ylength( self, glb ):
        if 'ylength' in glb: return glb['ylength']
        return '1pix'

    def __mask_dflt( self, glb ):
        return ''

    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        return ''

    def __stokes_dflt( self, glb ):
        return ''

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return ''

    def __region_dflt( self, glb ):
        return ''

    def __region( self, glb ):
        if 'region' in glb: return glb['region']
        return ''

    def __stattype_dflt( self, glb ):
        return 'sigma'

    def __stattype( self, glb ):
        if 'stattype' in glb: return glb['stattype']
        return 'sigma'

    def __grid_dflt( self, glb ):
        return [ int(1),int(1) ]

    def __grid( self, glb ):
        if 'grid' in glb: return glb['grid']
        return [ int(1),int(1) ]

    def __xlength_dflt( self, glb ):
        return '1pix'

    def __xlength( self, glb ):
        if 'xlength' in glb: return glb['xlength']
        return '1pix'

    def __interp_dflt( self, glb ):
        return 'cubic'

    def __interp( self, glb ):
        if 'interp' in glb: return glb['interp']
        return 'cubic'

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __box_dflt( self, glb ):
        return ''

    def __box( self, glb ):
        if 'box' in glb: return glb['box']
        return ''

    def __statalg_dflt( self, glb ):
        return 'classic'

    def __statalg( self, glb ):
        if 'statalg' in glb: return glb['statalg']
        return 'classic'

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __stretch_dflt( self, glb ):
        if self.__mask( glb ) != "": return bool(False)
        return None
    def __zscore_dflt( self, glb ):
        if self.__statalg( glb ) == "chauvenet": return float(-1)
        return None
    def __maxiter_dflt( self, glb ):
        if self.__statalg( glb ) == "chauvenet": return int(-1)
        return None

    #--------- return subparam values -------------------------------------------------
    def __stretch( self, glb ):
        if 'stretch' in glb: return glb['stretch']
        dflt = self.__stretch_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __zscore( self, glb ):
        if 'zscore' in glb: return glb['zscore']
        dflt = self.__zscore_dflt( glb )
        if dflt is not None: return dflt
        return float(-1)
    def __maxiter( self, glb ):
        if 'maxiter' in glb: return glb['maxiter']
        dflt = self.__maxiter_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Input image name'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Output image file name. If left blank (the default), no image is written but a new image tool referencing the collapsed image is returned.'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __region_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__region_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Region selection. Default is to use the full image.'
        value = self.__region( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'region': value},{'region': self.__schema['region']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('region',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __box_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__box_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Rectangular region(s) to select in direction plane. Default is to use the entire direction plane.'
        value = self.__box( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'box': value},{'box': self.__schema['box']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('box',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __chans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__chans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Channels to use. Default is to use all channels.'
        value = self.__chans( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('chans',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stokes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stokes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Stokes planes to use. Default is to use all Stokes planes.'
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('stokes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __mask_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__mask_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Mask to use. Default setting is none.'
        value = self.__mask( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-10.10s =\x1B[0m %s%-23s%s' % ('mask',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Overwrite (unprompted) pre-existing output file? Ignored if "outfile" is left blank.'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stretch_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stretch_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__stretch_dflt( self.__globals_( ) ) is not None:
             description = 'Stretch the mask if necessary and possible? Default value is False.'
             value = self.__stretch( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stretch': value},{'stretch': self.__schema['stretch']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-7.7s =\x1B[0m %s%-23s%s' % ('stretch',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __grid_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__grid_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ int(1),int(1) ]
        description = 'x,y grid spacing. Array of exactly two positive integers.'
        value = self.__grid( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'grid': value},{'grid': self.__schema['grid']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('grid',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __anchor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__anchor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'ref'
        description = 'x,y anchor pixel location. Either "ref" to use the image reference pixel, or an array of exactly two integers.'
        value = self.__anchor( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'anchor': value},{'anchor': self.__schema['anchor']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('anchor',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __xlength_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__xlength_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return '1pix'
        description = 'Either x coordinate length of box, or diameter of circle. Circle is used if ylength is empty string.'
        value = self.__xlength( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'xlength': value},{'xlength': self.__schema['xlength']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('xlength',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __ylength_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__ylength_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return '1pix'
        description = 'y coordinate length of box. Use a circle if ylength is empty string.'
        value = self.__ylength( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'ylength': value},{'ylength': self.__schema['ylength']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('ylength',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __interp_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__interp_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'cubic'
        description = 'Interpolation algorithm to use. One of "nearest", "linear", or "cubic". Minimum match supported.'
        value = self.__interp( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'interp': value},{'interp': self.__schema['interp']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('interp',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stattype_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stattype_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'sigma'
        description = 'Statistic to compute. See full description for supported statistics.'
        value = self.__stattype( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stattype': value},{'stattype': self.__schema['stattype']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('stattype',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __statalg_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__statalg_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'classic'
        description = 'Statistics computation algorithm to use. Supported values are "chauvenet" and "classic", Minimum match is supported.'
        value = self.__statalg( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'statalg': value},{'statalg': self.__schema['statalg']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-10.10s =\x1B[0m %s%-23s%s' % ('statalg',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __zscore_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__zscore_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(-1)
        if self.__zscore_dflt( self.__globals_( ) ) is not None:
             description = 'For chauvenet, this is the target maximum number of standard deviations data may have to be included. If negative, use Chauvenet"s criterion. Ignored if algorithm is not "chauvenet".'
             value = self.__zscore( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'zscore': value},{'zscore': self.__schema['zscore']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-7.7s =\x1B[0m %s%-23s%s' % ('zscore',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __maxiter_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__maxiter_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-1)
        if self.__maxiter_dflt( self.__globals_( ) ) is not None:
             description = 'For chauvenet, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, iterate until the zscore criterion is met. Ignored if algortihm is not "chauvenet".'
             value = self.__maxiter( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'maxiter': value},{'maxiter': self.__schema['maxiter']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-7.7s =\x1B[0m %s%-23s%s' % ('maxiter',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stattype' in glb: del glb['stattype']
        if 'anchor' in glb: del glb['anchor']
        if 'stokes' in glb: del glb['stokes']
        if 'outfile' in glb: del glb['outfile']
        if 'statalg' in glb: del glb['statalg']
        if 'mask' in glb: del glb['mask']
        if 'ylength' in glb: del glb['ylength']
        if 'stretch' in glb: del glb['stretch']
        if 'imagename' in glb: del glb['imagename']
        if 'interp' in glb: del glb['interp']
        if 'xlength' in glb: del glb['xlength']
        if 'grid' in glb: del glb['grid']
        if 'zscore' in glb: del glb['zscore']
        if 'maxiter' in glb: del glb['maxiter']
        if 'chans' in glb: del glb['chans']
        if 'region' in glb: del glb['region']
        if 'box' in glb: del glb['box']
        if 'overwrite' in glb: del glb['overwrite']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# imdev -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__outfile_inp( )
        self.__region_inp( )
        self.__box_inp( )
        self.__chans_inp( )
        self.__stokes_inp( )
        self.__mask_inp( )
        self.__overwrite_inp( )
        self.__stretch_inp( )
        self.__grid_inp( )
        self.__anchor_inp( )
        self.__xlength_inp( )
        self.__ylength_inp( )
        self.__interp_inp( )
        self.__stattype_inp( )
        self.__statalg_inp( )
        self.__zscore_inp( )
        self.__maxiter_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "imdev.last" if os.path.isfile("imdev.last") else "imdev.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('imdev.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['region'] = self.__region( self.__globals_( ) )
        _invocation_parameters['box'] = self.__box( self.__globals_( ) )
        _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
        _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
        _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
        _invocation_parameters['grid'] = self.__grid( self.__globals_( ) )
        _invocation_parameters['anchor'] = self.__anchor( self.__globals_( ) )
        _invocation_parameters['xlength'] = self.__xlength( self.__globals_( ) )
        _invocation_parameters['ylength'] = self.__ylength( self.__globals_( ) )
        _invocation_parameters['interp'] = self.__interp( self.__globals_( ) )
        _invocation_parameters['stattype'] = self.__stattype( self.__globals_( ) )
        _invocation_parameters['statalg'] = self.__statalg( self.__globals_( ) )
        _invocation_parameters['zscore'] = self.__zscore( self.__globals_( ) )
        _invocation_parameters['maxiter'] = self.__maxiter( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imdev( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, outfile=None, region=None, box=None, chans=None, stokes=None, mask=None, overwrite=None, stretch=None, grid=None, anchor=None, xlength=None, ylength=None, interp=None, stattype=None, statalg=None, zscore=None, maxiter=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imdev.pre')
        _postfile = os.path.realpath('imdev.last')
        task_result = None
        _arguments = [imagename,outfile,region,box,chans,stokes,mask,overwrite,stretch,grid,anchor,xlength,ylength,interp,stattype,statalg,zscore,maxiter]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if outfile is not None: local_global['outfile'] = outfile
            if region is not None: local_global['region'] = region
            if box is not None: local_global['box'] = box
            if chans is not None: local_global['chans'] = chans
            if stokes is not None: local_global['stokes'] = stokes
            if mask is not None: local_global['mask'] = mask
            if overwrite is not None: local_global['overwrite'] = overwrite
            if grid is not None: local_global['grid'] = grid
            if anchor is not None: local_global['anchor'] = anchor
            if xlength is not None: local_global['xlength'] = xlength
            if ylength is not None: local_global['ylength'] = ylength
            if interp is not None: local_global['interp'] = interp
            if stattype is not None: local_global['stattype'] = stattype
            if statalg is not None: local_global['statalg'] = statalg

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['region'] = self.__region( local_global )
            _invocation_parameters['box'] = self.__box( local_global )
            _invocation_parameters['chans'] = self.__chans( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )
            _invocation_parameters['mask'] = self.__mask( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['grid'] = self.__grid( local_global )
            _invocation_parameters['anchor'] = self.__anchor( local_global )
            _invocation_parameters['xlength'] = self.__xlength( local_global )
            _invocation_parameters['ylength'] = self.__ylength( local_global )
            _invocation_parameters['interp'] = self.__interp( local_global )
            _invocation_parameters['stattype'] = self.__stattype( local_global )
            _invocation_parameters['statalg'] = self.__statalg( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['stretch'] = self.__stretch( _invocation_parameters ) if stretch is None else stretch
            _invocation_parameters['zscore'] = self.__zscore( _invocation_parameters ) if zscore is None else zscore
            _invocation_parameters['maxiter'] = self.__maxiter( _invocation_parameters ) if maxiter is None else maxiter

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['region'] = self.__region( self.__globals_( ) )
            _invocation_parameters['box'] = self.__box( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
            _invocation_parameters['grid'] = self.__grid( self.__globals_( ) )
            _invocation_parameters['anchor'] = self.__anchor( self.__globals_( ) )
            _invocation_parameters['xlength'] = self.__xlength( self.__globals_( ) )
            _invocation_parameters['ylength'] = self.__ylength( self.__globals_( ) )
            _invocation_parameters['interp'] = self.__interp( self.__globals_( ) )
            _invocation_parameters['stattype'] = self.__stattype( self.__globals_( ) )
            _invocation_parameters['statalg'] = self.__statalg( self.__globals_( ) )
            _invocation_parameters['zscore'] = self.__zscore( self.__globals_( ) )
            _invocation_parameters['maxiter'] = self.__maxiter( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imdev( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'imdev', [ 'imagename=' + repr(_pc.document['imagename']), 'outfile=' + repr(_pc.document['outfile']), 'region=' + repr(_pc.document['region']), 'box=' + repr(_pc.document['box']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'mask=' + repr(_pc.document['mask']), 'overwrite=' + repr(_pc.document['overwrite']), 'stretch=' + repr(_pc.document['stretch']), 'grid=' + repr(_pc.document['grid']), 'anchor=' + repr(_pc.document['anchor']), 'xlength=' + repr(_pc.document['xlength']), 'ylength=' + repr(_pc.document['ylength']), 'interp=' + repr(_pc.document['interp']), 'stattype=' + repr(_pc.document['stattype']), 'statalg=' + repr(_pc.document['statalg']), 'zscore=' + repr(_pc.document['zscore']), 'maxiter=' + repr(_pc.document['maxiter']) ] )
            task_result = _imdev_t( _pc.document['imagename'],_pc.document['outfile'],_pc.document['region'],_pc.document['box'],_pc.document['chans'],_pc.document['stokes'],_pc.document['mask'],_pc.document['overwrite'],_pc.document['stretch'],_pc.document['grid'],_pc.document['anchor'],_pc.document['xlength'],_pc.document['ylength'],_pc.document['interp'],_pc.document['stattype'],_pc.document['statalg'],_pc.document['zscore'],_pc.document['maxiter'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('imdev')
            casalog.post("Exception Reported: Error in imdev: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'imdev', task_result )

        #Added if _imdev_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

imdev = _imdev( )


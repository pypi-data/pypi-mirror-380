##################### generated by xml-casa (v2) from msuvbinflag.xml ###############
##################### 82abe82f71c0bf31357db45d077c1513 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_msuvbinflag import msuvbinflag as _msuvbinflag_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _msuvbinflag:
    """
    msuvbinflag ---- An algorithm to identify outliers in the UV plane via the UV grid generated by msuvbin.
    Both msuvbin and msuvbinflag tasks are experimental
    

    
    Msuvbinflag is an automatic flagging algorithm for the identification
    of Radio Frequency Interference (RFI) in the UV plane. Prior to flagging,
    the visibilities in the input CASA Measurements Set (MS) have to be
    gridded onto a uniforme UV plane using the msuvbin task.
    
    The principle underlying this algorithm is that RFI typically appears as
    large scale ripples in the image domain, and therefore as compact structures
    in the UV domain. Astronomical sources tend to have the opposite behavior, i.e.,
    compact in the image domain and extended in the UV domain. Therefore by locating
    compact outlier structures in the UV domain it should be possible to flag RFI.
    
    

    --------- parameter descriptions ---------------------------------------------

    binnedvis d visibility data (MS) (the output of the msuvbin task).
              default: none;
              example: binnedvis='SNR_binnedvis.ms'
    method    are currently two algorithm options to identify outliers in the UV domain: radial_per_plane, radial_mean_annular
              
               radial_per_plane: This algorithm works independently
               on each plane (channel, polarization) of the binned ms. A mean radial profile is
               generated by doing a weighted average of all data at a given
               UV-radius. A polynomial is fit to the radially averaged
               profile. All the binned UV points that are larger than the
               nsigma threshold are flagged. The threshold is calculated as :
              
               originalValue[u,v] > radialfitValue[r]+nsigma*rms
              
               where (u,v) are the UV coordinates, r is the radial distance from the
               center, and rms is the rms of the radial profile at radius r.
              
              
               radial_mean_annular: This algorithm combines all the planes in the
               binned MS on to a single UV grid. This combined grid is then
               divided into annular circles from 0 through the maximum UV radius
               in log-spaced intervals. A radial profile is constructed by
               calculating the median values within each annulus, as well as
               the median absolute deviation scaled to the standard deviation.
               Similar to the radial_per_plane method, each plane is then individually
               treated, and a point in the UV plane is flagged if it is greater than
               the nsigma threshold. The threshold is calculated as :
              
               originalValue[u,v] > radiatValue[n] + nsigma*rms[n]
              
               where (u,v) are the UV coordinates, and n is the nth annulus.
              
              
              
              default: 'radial_per_plane'
              example: method='radial_mean_annular'
    nsigma    User defined nsigma value for flagging.
              The default value is 5.
    doplot    Generate plots of the radial profiles calculated prior to flagging. This can be useful to
              debug the performance of the algorithm, however it can severely impact runtime performance.
              In general you do not need to turn this option on.
              
              The default value is False.
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    
    
    msuvbinflag(binnedvis='SNR_G55_10s.ms', method='radial_per_plane', nsigma=5)
    
    Keyword arguments:
    binnedvis -- Name of input binned visibility file which is output from msuvbin.
    After msuvbinflag, binnedvis is modified with flagging info.
    
    method -- Three method options: "radian", "regional mean","median","gradient"
    default: 'radian'
    
    nsigma -- User set nsigma value for radial algorithm.
    default=5.0
    
    


    """

    _info_group_ = """flagging, manipulation, imaging"""
    _info_desc_ = """An algorithm to identify outliers in the UV plane via the UV grid generated by msuvbin.
      Both msuvbin and msuvbinflag tasks are experimental
  """

    __schema = {'binnedvis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'method': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'nsigma': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'doplot': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 9 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __binnedvis_dflt( self, glb ):
        return ''

    def __binnedvis( self, glb ):
        if 'binnedvis' in glb: return glb['binnedvis']
        return ''

    def __method_dflt( self, glb ):
        return 'radial_per_plane'

    def __method( self, glb ):
        if 'method' in glb: return glb['method']
        return 'radial_per_plane'

    def __doplot_dflt( self, glb ):
        return False

    def __doplot( self, glb ):
        if 'doplot' in glb: return glb['doplot']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __nsigma_dflt( self, glb ):
        if self.__method( glb ) == "radial_per_plane": return float(5)
        if self.__method( glb ) == "radial_mean_annular": return float(5)
        return None

    #--------- return subparam values -------------------------------------------------
    def __nsigma( self, glb ):
        if 'nsigma' in glb: return glb['nsigma']
        dflt = self.__nsigma_dflt( glb )
        if dflt is not None: return dflt
        return float(5.0)

    #--------- subparam inp output ----------------------------------------------------
    def __binnedvis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__binnedvis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input binned MS from msuvbin task.'
        value = self.__binnedvis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'binnedvis': value},{'binnedvis': self.__schema['binnedvis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('binnedvis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __method_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__method_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'radial_per_plane'
        description = 'Flagging algorithm (radial_per_plane, radial_mean_annular)'
        value = self.__method( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'method': value},{'method': self.__schema['method']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-9.9s =\x1B[0m %s%-23s%s' % ('method',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __nsigma_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__nsigma_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(5.0)
        if self.__nsigma_dflt( self.__globals_( ) ) is not None:
             description = 'nsigma threshold above which to flag'
             value = self.__nsigma( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'nsigma': value},{'nsigma': self.__schema['nsigma']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-6.6s =\x1B[0m %s%-23s%s' % ('nsigma',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __doplot_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__doplot_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Generate plots of the radial profiles, useful for debugging. Warning : This can severely impact runtime performance.'
        value = self.__doplot( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'doplot': value},{'doplot': self.__schema['doplot']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('doplot',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'binnedvis' in glb: del glb['binnedvis']
        if 'method' in glb: del glb['method']
        if 'nsigma' in glb: del glb['nsigma']
        if 'doplot' in glb: del glb['doplot']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# msuvbinflag -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__binnedvis_inp( )
        self.__method_inp( )
        self.__nsigma_inp( )
        self.__doplot_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "msuvbinflag.last" if os.path.isfile("msuvbinflag.last") else "msuvbinflag.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('msuvbinflag.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['binnedvis'] = self.__binnedvis( self.__globals_( ) )
        _invocation_parameters['method'] = self.__method( self.__globals_( ) )
        _invocation_parameters['nsigma'] = self.__nsigma( self.__globals_( ) )
        _invocation_parameters['doplot'] = self.__doplot( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#msuvbinflag( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, binnedvis=None, method=None, nsigma=None, doplot=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('msuvbinflag.pre')
        _postfile = os.path.realpath('msuvbinflag.last')
        task_result = None
        _arguments = [binnedvis,method,nsigma,doplot]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if binnedvis is not None: local_global['binnedvis'] = binnedvis
            if method is not None: local_global['method'] = method
            if doplot is not None: local_global['doplot'] = doplot

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['binnedvis'] = self.__binnedvis( local_global )
            _invocation_parameters['method'] = self.__method( local_global )
            _invocation_parameters['doplot'] = self.__doplot( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['nsigma'] = self.__nsigma( _invocation_parameters ) if nsigma is None else nsigma

        else:
            # invoke with inp/go semantics
            _invocation_parameters['binnedvis'] = self.__binnedvis( self.__globals_( ) )
            _invocation_parameters['method'] = self.__method( self.__globals_( ) )
            _invocation_parameters['nsigma'] = self.__nsigma( self.__globals_( ) )
            _invocation_parameters['doplot'] = self.__doplot( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#msuvbinflag( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'msuvbinflag', [ 'binnedvis=' + repr(_pc.document['binnedvis']), 'method=' + repr(_pc.document['method']), 'nsigma=' + repr(_pc.document['nsigma']), 'doplot=' + repr(_pc.document['doplot']) ] )
            task_result = _msuvbinflag_t( _pc.document['binnedvis'],_pc.document['method'],_pc.document['nsigma'],_pc.document['doplot'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('msuvbinflag')
            casalog.post("Exception Reported: Error in msuvbinflag: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'msuvbinflag', task_result )

        #Added if _msuvbinflag_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

msuvbinflag = _msuvbinflag( )


##################### generated by xml-casa (v2) from plotweather.xml ###############
##################### abe2a1783e25e06fd59f1f0120898342 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_plotweather import plotweather as _plotweather_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _plotweather:
    """
    plotweather ---- Plot elements of the weather table; estimate opacity

    --------- parameter descriptions ---------------------------------------------

    vis             MS name
    seasonal_weight weight of the seasonal model
    doPlot          set this to True to create a plot
    plotName        (Optional) the name of the plot file

    --------- examples -----------------------------------------------------------

    
    Generates opacity estimates from both the weather data and a seasonal model; intended for VLA use only.
    By default the returned opacity is the mean of these predictions, but this can be adjusted with seasonal_weight.
    
    These methods and models are described in detail in EVLA Memo 143, VLA Test Memo 232, VLA Scientific Memo 176, and references therein.
    
    Saves the plot to the following default file:  MS name + .plotweather.png
    Custom plot filenames must end in one of: .png, .pdf, .ps, .eps or .svg
    
    If run as a function, will return the mean zenith opacity per spectral window.
    
    The wind direction is defined as the direction where the wind is coming from.
    The wind direction is thus in the opposite side of the arrow, with north at
    the top and counterclockwise through west, south, and east.
    
    Written by Josh Marvil, revised 02/06/12
    
    example:
    myTau = plotweather(vis='myMS.ms',seasonal_weight=0.5, doPlot=True)


    """

    _info_group_ = """visualization"""
    _info_desc_ = """Plot elements of the weather table; estimate opacity"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'seasonal_weight': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'doPlot': {'type': 'cBool'}, 'plotName': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 15 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __seasonal_weight_dflt( self, glb ):
        return float(0.5)

    def __seasonal_weight( self, glb ):
        if 'seasonal_weight' in glb: return glb['seasonal_weight']
        return float(0.5)

    def __doPlot_dflt( self, glb ):
        return True

    def __doPlot( self, glb ):
        if 'doPlot' in glb: return glb['doPlot']
        return True

    def __plotName_dflt( self, glb ):
        return ''

    def __plotName( self, glb ):
        if 'plotName' in glb: return glb['plotName']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'MS name'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __seasonal_weight_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__seasonal_weight_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(0.5)
        description = 'weight of the seasonal model'
        value = self.__seasonal_weight( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'seasonal_weight': value},{'seasonal_weight': self.__schema['seasonal_weight']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('seasonal_weight',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __doPlot_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__doPlot_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'set this to True to create a plot'
        value = self.__doPlot( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'doPlot': value},{'doPlot': self.__schema['doPlot']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('doPlot',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __plotName_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__plotName_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = '(Optional) the name of the plot file'
        value = self.__plotName( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'plotName': value},{'plotName': self.__schema['plotName']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('plotName',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'vis' in glb: del glb['vis']
        if 'seasonal_weight' in glb: del glb['seasonal_weight']
        if 'doPlot' in glb: del glb['doPlot']
        if 'plotName' in glb: del glb['plotName']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# plotweather -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__seasonal_weight_inp( )
        self.__doPlot_inp( )
        self.__plotName_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "plotweather.last" if os.path.isfile("plotweather.last") else "plotweather.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('plotweather.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['seasonal_weight'] = self.__seasonal_weight( self.__globals_( ) )
        _invocation_parameters['doPlot'] = self.__doPlot( self.__globals_( ) )
        _invocation_parameters['plotName'] = self.__plotName( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-15s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#plotweather( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, seasonal_weight=None, doPlot=None, plotName=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('plotweather.pre')
        _postfile = os.path.realpath('plotweather.last')
        task_result = None
        _arguments = [vis,seasonal_weight,doPlot,plotName]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if seasonal_weight is not None: local_global['seasonal_weight'] = seasonal_weight
            if doPlot is not None: local_global['doPlot'] = doPlot
            if plotName is not None: local_global['plotName'] = plotName

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['seasonal_weight'] = self.__seasonal_weight( local_global )
            _invocation_parameters['doPlot'] = self.__doPlot( local_global )
            _invocation_parameters['plotName'] = self.__plotName( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['seasonal_weight'] = self.__seasonal_weight( self.__globals_( ) )
            _invocation_parameters['doPlot'] = self.__doPlot( self.__globals_( ) )
            _invocation_parameters['plotName'] = self.__plotName( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-15s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#plotweather( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'plotweather', [ 'vis=' + repr(_pc.document['vis']), 'seasonal_weight=' + repr(_pc.document['seasonal_weight']), 'doPlot=' + repr(_pc.document['doPlot']), 'plotName=' + repr(_pc.document['plotName']) ] )
            task_result = _plotweather_t( _pc.document['vis'],_pc.document['seasonal_weight'],_pc.document['doPlot'],_pc.document['plotName'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('plotweather')
            casalog.post("Exception Reported: Error in plotweather: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'plotweather', task_result )

        #Added if _plotweather_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

plotweather = _plotweather( )


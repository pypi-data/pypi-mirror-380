##################### generated by xml-casa (v2) from gaincal.xml ###################
##################### 7c21c599f57fdbdddd203514dcc55c60 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_gaincal import gaincal as _gaincal_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _gaincal:
    """
    gaincal ---- Determine temporal gains from calibrator observations

    
    The complex gains for each antenna/spwid are determined from the data
    column (raw data) divided by the model column. The gains can be
    obtained for a specified solution interval, spw combination and field
    combination. The GSPLINE spline (smooth) option is still under
    development.
    
    Previous calibrations (egs, bandpass, opacity, parallactic angle) can
    be applied on the fly. At present with dual-polarized data, both
    polarizations must be unflagged for any solution to be obtained.

    --------- parameter descriptions ---------------------------------------------

    vis          Name of input visibility file
                 Default: none
                 
                    Example: vis='ngc5921.ms'
    caltable     Name of output gain calibration table
                 Default: none
                 
                    Example: caltable='ngc5921.gcal'
    field        Select field using field id(s) or field name(s)
                 Default: '' (all fields)
                 
                 Use 'go listobs' to obtain the list id's or
                 names. If field string is a non-negative integer,
                 it is assumed a field index,  otherwise, it is
                 assumed a field name.
                 
                    Examples:
                    field='0~2'; field ids 0,1,2
                    field='0,4,5~7'; field ids 0,4,5,6,7
                    field='3C286,3C295'; field named 3C286 and
                    3C295
                    field = '3,4C\*'; field id 3, all names
                    starting with 4C
    spw          Select spectral window/channels
                 Default: '' (all spectral windows and channels)
                 
                    Examples:
                    spw='0~2,4'; spectral windows 0,1,2,4 (all
                    channels)
                    spw='<2';  spectral windows less than 2
                    (i.e. 0,1)
                    spw='0:5~61'; spw 0, channels 5 to 61,
                    INCLUSIVE
                    spw='\*:5~61'; all spw with channels 5 to 61
                    spw='0,10,3:3~45'; spw 0,10 all channels, spw
                    3, channels 3 to 45.
                    spw='0~2:2~6'; spw 0,1,2 with channels 2
                    through 6 in each.
                    spw='0:0~10;15~60'; spectral window 0 with
                    channels 0-10,15-60. (NOTE ';' to separate
                    channel selections)
                    spw='0:0~10^2,1:20~30^5'; spw 0, channels
                    0,2,4,6,8,10, spw 1, channels 20,25,30
    intent       Select observing intent
                 Default: '' (no selection by intent)
                 
                    Example: intent='*BANDPASS*'  (selects data
                    labelled with BANDPASS intent)
    selectdata   Other data selection parameters
                 Default: True
                 Options: True|False
    timerange    Select data based on time range
                 Subparameter of selectdata=True
                 Default = '' (all)
                 
                    Examples:
                    timerange =
                    'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
                    (Note: if YYYY/MM/DD is missing date defaults
                    to first day in data set.)
                    timerange='09:14:0~09:54:0' picks 40 min on
                    first day 
                    timerange= '25:00:00~27:30:00' picks 1 hr to 3
                    hr 30min on NEXT day
                    timerange='09:44:00' pick data within one
                    integration of time
                    timerange='>10:24:00' data after this time
    uvrange      Select data by baseline length.
                 Default = '' (all)
                 
                    Examples:
                    uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda
                    uvrange='>4klambda';uvranges greater than 4 kilo-lambda
                    uvrange='0~1000km'; uvrange in kilometers
    antenna      Select data based on antenna/baseline
                                    Subparameter of selectdata=True
                                    Default: '' (all)
                 
                                    If antenna string is a non-negative integer, it
                                    is assumed an antenna index, otherwise, it is
                                    assumed as an antenna name
                 
                                        Examples: 
                                        antenna='5&6'; baseline between antenna
                                        index 5 and index 6.
                                        antenna='VA05&VA06'; baseline between VLA
                                        antenna 5 and 6.
                                        antenna='5&6;7&8'; baselines with
                                        indices 5-6 and 7-8
                                        antenna='5'; all baselines with antenna index
                                        5
                                        antenna='05'; all baselines with antenna
                                        number 05 (VLA old name)
                                        antenna='5,6,10'; all baselines with antennas
                                        5,6,10 index numbers
    scan         Scan number range
                 Subparameter of selectdata=True
                 Default: '' = all
                 
                 Check 'go listobs' to insure the scan numbers are
                 in order.
    observation  Select by observation ID(s)
                 Subparameter of selectdata=True
                 Default: '' = all
                 
                     Example: observation='0~2,4'
    msselect     Optional complex data selection (ignore for now)
    solint       Solution interval
                 Default: 'inf' (infinite, up to boundaries
                 controlled by combine); 
                 Options: 'inf' (~infinite), 'int' (per
                 integration), any float or integer value with or
                 without units
                 
                    Examples: 
                    solint='1min'; solint='60s', solint=60 (i.e.,
                    1 minute); solint='0s'; solint=0; solint='int'
                    (i.e., per integration); solint-'-1s';
                    solint='inf' (i.e., ~infinite, up to
                    boundaries enforced by combine)
    combine      Data axes which to combine for solve
                 Default: 'scan' (solutions will break at obs,
                 field, and spw boundaries)
                 Options: '','obs','scan','spw',field', or any
                 comma-separated combination in a single string
                 
                    Example: combine='scan,spw' - Extend solutions
                    over scan boundaries (up to the solint), and
                    combine spws for solving
    preavg       Pre-averaging interval (sec)
                 Default: -1.0 (none)
                 
                 Rarely needed.  Will average data over periods
                 shorter than the solution interval first.
    refant       Reference antenna name(s); a prioritized list may be
                 specified
                 Default: '' (No refant applied)
                 
                    Examples: 
                    refant='4' (antenna with index 4)
                    refant='VA04' (VLA antenna #4)
                    refant='EA02,EA23,EA13' (EVLA antenna EA02,
                    use EA23 and EA13 as alternates if/when EA02
                    drops out)
                 
                 Use taskname=listobs for antenna listing
    refantmode   Reference antenna mode
                   Default: 'flex'
                 
                 - 'flex': If the preferred or current refant drops out, switch to another. Alternate reference antennas will be chosen from the refant parameter (if a nontrivial list of antennas is specified), or according to proximity to the last-used refant. If and when the preferred refant returns, the referencing will switch back to it. 
                 - 'strict': If the preferred or current refant is absent for a solution, flag all antennas at that solution. This mode ensures that the effective cross-hand phase will be maintained constant and equal to that of the chosen refant, and not subject to variation due to finite SNR when switching among reference antennas. If a list of antennas is specified in refant, only the first is used.
    minblperant  Minimum number of baselines required per antenna for each
                 solve
                 Default: 4
                 
                 Antennas with fewer baselines are excluded from
                 solutions.
                 
                    Example: minblperant=10 --> Antennas
                    participating on 10 or more baselines are
                    included in the solve
                 
                 minblperant = 1 will solve for all baseline
                 pairs, even if only one is present in the data
                 set.  Unless closure errors are expected, use
                 taskname=gaincal rather than taskname=blcal to
                 obtain more options in data analysis.
    minsnr       Reject solutions below this SNR
                 Default: 3.0
    solnorm      Normalize (squared) solution amplitudes (G, T only)
                 Default: False (no normalization)
    normtype     Solution normalization calculation type: mean or median
                 Default: 'mean'
    gaintype     Type of gain solution (G,T,GSPLINE,K,KCROSS)
                   Default: 'G'
                 
                      Example: gaintype='GSPLINE'
                 
                 - 'G' means determine gains for each polarization and sp_wid
                 - 'T' obtains one solution for both polarizations;
                   Hence. their phase offset must be first removed
                   using a prior G.
                 - 'GSPLINE' makes a spline fit to the calibrator
                   data. It is useful for noisy data and fits a
                   smooth curve through the calibrated amplitude and
                   phase. However, at present GSPLINE is somewhat
                   experimental. Use with caution and check
                   solutions.
                 - 'K' solves for simple antenna-based delays via
                   FFTs of the spectra on baselines to the reference
                   antenna.  (This is not global fringe-fitting.)
                   If combine includes 'spw', multi-band delays are
                   determined; otherwise, per-spw single-band delays
                   will be determined.
                 - 'KCROSS' solves for a global cross-hand delay.
                   Use parang=T and apply prior gain and bandpass
                   solutions.  Multi-band delay solves
                   (combine='spw') not yet supported for KCROSS.
    smodel       Point source Stokes parameters for source model
                 (experimental).
                 Default: [] (use MODEL_DATA column)
                 
                    Example: [1,0,0,0] (I=1, unpolarized)
    calmode      Type of solution" ('ap', 'p', 'a')
                 Default: 'ap' (amp and phase)
                 Options: 'p' (phase) ,'a' (amplitude), 'ap'
                 (amplitude and phase)
                 
                    Example: calmode='p'
    solmode      Robust solving mode: 
                 Options: '', 'L1', 'R', 'L1R'
    rmsthresh    RMS Threshold sequence
                 Subparameter of solmode='R' or 'L1R'
                 
                 See CASA Docs for more information
                 (https://casa.nrao.edu/casadocs/)
    corrdepflags f False (default), if any correlation is flagged, treat all correlations in
                             the visibility vector as flagged when solving (per channel, per baseline).
                             If True, use unflagged correlations in a visibility vector, even if one or more
                             other correlations are flagged.
                             
                                    Default: False (treat correlation vectors with one or more correlations flagged as entirely flagged)
                 
                                    Traditionally, CASA has observed a strict interpretation of 
                                    correlation-dependent flags: if one or more correlations 
                                    (for any baseline and channel) is flagged, then all available 
                                    correlations for the same baseline and channel are 
                                    treated as flagged.  However, it is desirable in some 
                                    circumstances to relax this stricture, e.g., to preserve use
                                    of data from antennas with only one good polarization (e.g., one polarization
                                    is bad or entirely absent).  Solutions for the bad or missing polarization 
                                    will be rendered as flagged.
    append       Append solutions to the (existing) table
                 Default: False (overwrite existing table or make
                 new table)
                 
                 Appended solutions must be derived from the same
                 MS as the existing caltable, and solution spws
                 must have the same meta-info (according to spw
                 selection and solint) or be non-overlapping.
    splinetime   Spline timescale(sec); All spw\'s are first averaged.
                 Subparameter of gaintype='GSPLINE'
                 Default: 3600 (1 hour)
                 
                    Example: splinetime=1000
                 
                 Typical splinetime should cover about 3 to 5
                 calibrator scans.
    npointaver   Tune phase-unwrapping algorithm
                 Subparameter of gaintype='GSPLINE'
                 Default: 3; Keep at this value
    phasewrap    Wrap the phase for jumps greater than this value
                 (degrees)
                 Subparameter of gaintype='GSPLINE'
                 Default: 180; Keep at this value
    docallib     Control means of specifying the caltables
                 Default: False (Use gaintable, gainfield, interp,
                 spwmap, calwt)
                 Options: False|True
                 
                 If True, specify a file containing cal library in
                 callib
    callib       Specify a file containing cal library directives
                 Subparameter of docallib=True
    gaintable    Gain calibration table(s) to apply on the fly
                 Default: '' (none)
                 Subparameter of docallib=False
                    Examples: 
                    gaintable='ngc5921.gcal'
                    gaintable=['ngc5921.ampcal','ngc5921.phcal']
    gainfield    Select a subset of calibrators from gaintable(s)
                 Default: '' (all sources on the sky)
                 
                 'nearest' ==> nearest (on sky) available field in
                 table otherwise, same syntax as field
                 
                    Examples: 
                    gainfield='0~2,5' means use fields 0,1,2,5
                    from gaintable
                    gainfield=['0~3','4~6'] means use field 0
                    through 3
    interp       Interpolation parmameters (in time[,freq]) for each gaintable, as a list of strings.
                   Default: '' --> 'linear,linear' for all gaintable(s)
                   Options: Time: 'nearest', 'linear'
                            Freq: 'nearest', 'linear', 'cubic',
                            'spline'
                 Specify a list of strings, aligned with the list of caltable specified
                 in gaintable, that contain the required interpolation parameters
                 for each caltable.
                 
                 - When frequency interpolation is relevant (B, Df,
                   Xf), separate time-dependent and freq-dependent
                   interp types with a comma (freq after the
                   comma). 
                 - Specifications for frequency are ignored when the
                   calibration table has no channel-dependence. 
                 - Time-dependent interp options ending in 'PD'
                   enable a "phase delay" correction per spw for
                   non-channel-dependent calibration types.
                 - For multi-obsId datasets, 'perobs' can be
                   appended to the time-dependent interpolation
                   specification to enforce obsId boundaries when
                   interpolating in time. 
                 - For multi-scan datasets, 'perscan' can be
                   appended to the time-dependent interpolation
                   specification to enforce scan boundaries when
                   interpolating in time. 
                 - Freq-dependent interp options can have 'flag' appended
                   to enforce channel-dependent flagging, and/or 'rel' 
                   appended to invoke relative frequency interpolation
                 
                      Examples: 
                      interp='nearest' (in time, freq-dep will be
                      linear, if relevant)
                      interp='linear,cubic'  (linear in time, cubic
                      in freq)
                      interp='linearperobs,splineflag' (linear in
                      time per obsId, spline in freq with
                      channelized flagging)
                      interp='nearest,linearflagrel' (nearest in
                      time, linear in freq with with channelized 
                      flagging and relative-frequency interpolation)
                      interp=',spline'  (spline in freq; linear in
                      time by default)
                      interp=['nearest,spline','linear']  (for
                      multiple gaintables)
    spwmap       Spectral window mappings to form for gaintable(s)
                 Only used if callib=False
                 default: [] (apply solutions from each calibration spw to
                  the same MS spw only)
                 Any available calibration spw can be mechanically mapped to any 
                  MS spw. 
                 Examples:
                    spwmap=[0,0,1,1] means apply calibration 
                      from cal spw = 0 to MS spw 0,1 and cal spw 1 to MS spws 2,3.
                    spwmap=[[0,0,1,1],[0,1,0,1]] (use a list of lists for multiple
                      gaintables)
    parang       Apply parallactic angle correction
                 Default: False
                 
                 If True, apply the parallactic angle correction
                 (required for polarization calibration)

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of gaincal in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Determine temporal gains from calibrator observations"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr', 'coerce': _coerce.to_str}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'intent': {'type': 'cStr', 'coerce': _coerce.to_str}, 'selectdata': {'type': 'cBool'}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'uvrange': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'antenna': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'observation': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cInt'}]}, 'msselect': {'type': 'cStr', 'coerce': _coerce.to_str}, 'solint': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'combine': {'type': 'cStr', 'coerce': _coerce.to_str}, 'preavg': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'refant': {'type': 'cStr', 'coerce': _coerce.to_str}, 'refantmode': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'flex', 'strict' ]}, 'minblperant': {'type': 'cInt'}, 'minsnr': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'solnorm': {'type': 'cBool'}, 'normtype': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'mean', 'median' ]}, 'gaintype': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'XYf+QU', 'XY+QU', 'K', 'KCROSS', 'T', 'G', 'GSPLINE' ]}, 'smodel': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'calmode': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'a', 'p', 'ap' ]}, 'solmode': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ '', 'L1', 'L1R', 'R' ]}, 'rmsthresh': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'corrdepflags': {'type': 'cBool'}, 'append': {'type': 'cBool'}, 'splinetime': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'npointaver': {'type': 'cInt'}, 'phasewrap': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'docallib': {'type': 'cBool'}, 'callib': {'type': 'cStr', 'coerce': _coerce.to_str}, 'gaintable': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'gainfield': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'interp': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'spwmap': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'parang': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 14 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __solint_dflt( self, glb ):
        return 'inf'

    def __solint( self, glb ):
        if 'solint' in glb: return glb['solint']
        return 'inf'

    def __parang_dflt( self, glb ):
        return False

    def __parang( self, glb ):
        if 'parang' in glb: return glb['parang']
        return False

    def __combine_dflt( self, glb ):
        return ''

    def __combine( self, glb ):
        if 'combine' in glb: return glb['combine']
        return ''

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __preavg_dflt( self, glb ):
        return float(-1.0)

    def __preavg( self, glb ):
        if 'preavg' in glb: return glb['preavg']
        return float(-1.0)

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __calmode_dflt( self, glb ):
        return 'ap'

    def __calmode( self, glb ):
        if 'calmode' in glb: return glb['calmode']
        return 'ap'

    def __refant_dflt( self, glb ):
        return ''

    def __refant( self, glb ):
        if 'refant' in glb: return glb['refant']
        return ''

    def __solmode_dflt( self, glb ):
        return ''

    def __solmode( self, glb ):
        if 'solmode' in glb: return glb['solmode']
        return ''

    def __solnorm_dflt( self, glb ):
        return False

    def __solnorm( self, glb ):
        if 'solnorm' in glb: return glb['solnorm']
        return False

    def __smodel_dflt( self, glb ):
        return [  ]

    def __smodel( self, glb ):
        if 'smodel' in glb: return glb['smodel']
        return [  ]

    def __selectdata_dflt( self, glb ):
        return True

    def __selectdata( self, glb ):
        if 'selectdata' in glb: return glb['selectdata']
        return True

    def __minblperant_dflt( self, glb ):
        return int(4)

    def __minblperant( self, glb ):
        if 'minblperant' in glb: return glb['minblperant']
        return int(4)

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __minsnr_dflt( self, glb ):
        return float(3.0)

    def __minsnr( self, glb ):
        if 'minsnr' in glb: return glb['minsnr']
        return float(3.0)

    def __rmsthresh_dflt( self, glb ):
        return [  ]

    def __rmsthresh( self, glb ):
        if 'rmsthresh' in glb: return glb['rmsthresh']
        return [  ]

    def __refantmode_dflt( self, glb ):
        return 'flex'

    def __refantmode( self, glb ):
        if 'refantmode' in glb: return glb['refantmode']
        return 'flex'

    def __append_dflt( self, glb ):
        return False

    def __append( self, glb ):
        if 'append' in glb: return glb['append']
        return False

    def __intent_dflt( self, glb ):
        return ''

    def __intent( self, glb ):
        if 'intent' in glb: return glb['intent']
        return ''

    def __gaintype_dflt( self, glb ):
        return 'G'

    def __gaintype( self, glb ):
        if 'gaintype' in glb: return glb['gaintype']
        return 'G'

    def __docallib_dflt( self, glb ):
        return False

    def __docallib( self, glb ):
        if 'docallib' in glb: return glb['docallib']
        return False

    def __corrdepflags_dflt( self, glb ):
        return False

    def __corrdepflags( self, glb ):
        if 'corrdepflags' in glb: return glb['corrdepflags']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __antenna_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __callib_dflt( self, glb ):
        if self.__docallib( glb ) == bool(True): return ""
        return None
    def __phasewrap_dflt( self, glb ):
        if self.__gaintype( glb ) == "GSPLINE": return float(180.0)
        return None
    def __gainfield_dflt( self, glb ):
        if self.__docallib( glb ) == bool(False): return []
        return None
    def __msselect_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __splinetime_dflt( self, glb ):
        if self.__gaintype( glb ) == "GSPLINE": return float(3600.0)
        return None
    def __spwmap_dflt( self, glb ):
        if self.__docallib( glb ) == bool(False): return []
        return None
    def __npointaver_dflt( self, glb ):
        if self.__gaintype( glb ) == "GSPLINE": return int(3)
        return None
    def __scan_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __interp_dflt( self, glb ):
        if self.__docallib( glb ) == bool(False): return []
        return None
    def __normtype_dflt( self, glb ):
        if self.__solnorm( glb ) == bool(True): return "mean"
        return None
    def __uvrange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __observation_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __timerange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __gaintable_dflt( self, glb ):
        if self.__docallib( glb ) == bool(False): return []
        return None

    #--------- return subparam values -------------------------------------------------
    def __timerange( self, glb ):
        if 'timerange' in glb: return glb['timerange']
        dflt = self.__timerange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __uvrange( self, glb ):
        if 'uvrange' in glb: return glb['uvrange']
        dflt = self.__uvrange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        dflt = self.__antenna_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __scan( self, glb ):
        if 'scan' in glb: return glb['scan']
        dflt = self.__scan_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __observation( self, glb ):
        if 'observation' in glb: return glb['observation']
        dflt = self.__observation_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __msselect( self, glb ):
        if 'msselect' in glb: return glb['msselect']
        dflt = self.__msselect_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __normtype( self, glb ):
        if 'normtype' in glb: return glb['normtype']
        dflt = self.__normtype_dflt( glb )
        if dflt is not None: return dflt
        return 'mean'
    def __splinetime( self, glb ):
        if 'splinetime' in glb: return glb['splinetime']
        dflt = self.__splinetime_dflt( glb )
        if dflt is not None: return dflt
        return float(3600.0)
    def __npointaver( self, glb ):
        if 'npointaver' in glb: return glb['npointaver']
        dflt = self.__npointaver_dflt( glb )
        if dflt is not None: return dflt
        return int(3)
    def __phasewrap( self, glb ):
        if 'phasewrap' in glb: return glb['phasewrap']
        dflt = self.__phasewrap_dflt( glb )
        if dflt is not None: return dflt
        return float(180.0)
    def __callib( self, glb ):
        if 'callib' in glb: return glb['callib']
        dflt = self.__callib_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __gaintable( self, glb ):
        if 'gaintable' in glb: return glb['gaintable']
        dflt = self.__gaintable_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __gainfield( self, glb ):
        if 'gainfield' in glb: return glb['gainfield']
        dflt = self.__gainfield_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __interp( self, glb ):
        if 'interp' in glb: return glb['interp']
        dflt = self.__interp_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __spwmap( self, glb ):
        if 'spwmap' in glb: return glb['spwmap']
        dflt = self.__spwmap_dflt( glb )
        if dflt is not None: return dflt
        return [ ]

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __caltable_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__caltable_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of output gain calibration table'
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('caltable',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __field_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__field_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select field using field id(s) or field name(s)'
        value = self.__field( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select spectral window/channels'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __intent_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__intent_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select observing intent'
        value = self.__intent( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'intent': value},{'intent': self.__schema['intent']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('intent',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __selectdata_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__selectdata_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Other data selection parameters'
        value = self.__selectdata( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'selectdata': value},{'selectdata': self.__schema['selectdata']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23s%s' % ('selectdata',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __timerange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__timerange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__timerange_dflt( self.__globals_( ) ) is not None:
             description = 'Select data based on time range'
             value = self.__timerange( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'timerange': value},{'timerange': self.__schema['timerange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('timerange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __uvrange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__uvrange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__uvrange_dflt( self.__globals_( ) ) is not None:
             description = 'Select data by baseline length.'
             value = self.__uvrange( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'uvrange': value},{'uvrange': self.__schema['uvrange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('uvrange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __antenna_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__antenna_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__antenna_dflt( self.__globals_( ) ) is not None:
             description = 'Select data based on antenna/baseline'
             value = self.__antenna( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('antenna',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __scan_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__scan_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__scan_dflt( self.__globals_( ) ) is not None:
             description = 'Scan number range'
             value = self.__scan( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'scan': value},{'scan': self.__schema['scan']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('scan',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __observation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__observation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__observation_dflt( self.__globals_( ) ) is not None:
             description = 'Select by observation ID(s)'
             value = self.__observation( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'observation': value},{'observation': self.__schema['observation']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('observation',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __msselect_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__msselect_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__msselect_dflt( self.__globals_( ) ) is not None:
             description = 'Optional complex data selection (ignore for now)'
             value = self.__msselect( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'msselect': value},{'msselect': self.__schema['msselect']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('msselect',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __solint_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__solint_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'inf'
        description = 'Solution interval'
        value = self.__solint( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'solint': value},{'solint': self.__schema['solint']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('solint',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __combine_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__combine_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Data axes which to combine for solve (obs, scan, spw, and/or field)'
        value = self.__combine( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'combine': value},{'combine': self.__schema['combine']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('combine',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __preavg_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__preavg_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(-1.0)
        description = 'Pre-averaging interval (sec) (rarely needed)'
        value = self.__preavg( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'preavg': value},{'preavg': self.__schema['preavg']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('preavg',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __refant_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__refant_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Reference antenna name(s)'
        value = self.__refant( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'refant': value},{'refant': self.__schema['refant']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('refant',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __refantmode_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__refantmode_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'flex'
        description = 'Reference antenna mode (flex, strict)'
        value = self.__refantmode( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'refantmode': value},{'refantmode': self.__schema['refantmode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('refantmode',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __minblperant_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minblperant_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(4)
        description = 'Minimum baselines _per antenna_ required for solve'
        value = self.__minblperant( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minblperant': value},{'minblperant': self.__schema['minblperant']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('minblperant',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __minsnr_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minsnr_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(3.0)
        description = 'Reject solutions below this SNR'
        value = self.__minsnr( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minsnr': value},{'minsnr': self.__schema['minsnr']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('minsnr',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __solnorm_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__solnorm_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Normalize (squared) solution amplitudes (G, T only)'
        value = self.__solnorm( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'solnorm': value},{'solnorm': self.__schema['solnorm']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23s%s' % ('solnorm',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __normtype_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__normtype_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'mean'
        if self.__normtype_dflt( self.__globals_( ) ) is not None:
             description = 'Solution normalization calculation type: mean or median'
             value = self.__normtype( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'normtype': value},{'normtype': self.__schema['normtype']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('normtype',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __gaintype_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__gaintype_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'G'
        description = 'Type of gain solution (G,T,GSPLINE,K,KCROSS)'
        value = self.__gaintype( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'gaintype': value},{'gaintype': self.__schema['gaintype']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23s%s' % ('gaintype',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __smodel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__smodel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'Point source Stokes parameters for source model.'
        value = self.__smodel( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'smodel': value},{'smodel': self.__schema['smodel']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('smodel',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __calmode_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__calmode_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'ap'
        description = 'Type of solution" (\'ap\', \'p\', \'a\')'
        value = self.__calmode( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'calmode': value},{'calmode': self.__schema['calmode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('calmode',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __solmode_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__solmode_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Robust solving mode: (\'\', \'L1\', \'R\',\'L1R\')'
        value = self.__solmode( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'solmode': value},{'solmode': self.__schema['solmode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('solmode',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __rmsthresh_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__rmsthresh_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'RMS Threshold sequence (for solmode=\'R\' or \'L1R\'; see help)'
        value = self.__rmsthresh( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'rmsthresh': value},{'rmsthresh': self.__schema['rmsthresh']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('rmsthresh',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __corrdepflags_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__corrdepflags_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Respect correlation-dependent flags'
        value = self.__corrdepflags( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'corrdepflags': value},{'corrdepflags': self.__schema['corrdepflags']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('corrdepflags',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __append_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__append_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Append solutions to the (existing) table'
        value = self.__append( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'append': value},{'append': self.__schema['append']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('append',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __splinetime_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__splinetime_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(3600.0)
        if self.__splinetime_dflt( self.__globals_( ) ) is not None:
             description = 'Spline timescale(sec); All spw\'s are first averaged.'
             value = self.__splinetime( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'splinetime': value},{'splinetime': self.__schema['splinetime']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('splinetime',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __npointaver_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__npointaver_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(3)
        if self.__npointaver_dflt( self.__globals_( ) ) is not None:
             description = 'The phase-unwrapping algorithm'
             value = self.__npointaver( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'npointaver': value},{'npointaver': self.__schema['npointaver']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('npointaver',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __phasewrap_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__phasewrap_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(180.0)
        if self.__phasewrap_dflt( self.__globals_( ) ) is not None:
             description = 'Wrap the phase for jumps greater than this value (degrees)'
             value = self.__phasewrap( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'phasewrap': value},{'phasewrap': self.__schema['phasewrap']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('phasewrap',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __docallib_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__docallib_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Use callib or traditional cal apply parameters'
        value = self.__docallib( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'docallib': value},{'docallib': self.__schema['docallib']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23s%s' % ('docallib',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __callib_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__callib_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__callib_dflt( self.__globals_( ) ) is not None:
             description = 'Cal Library filename'
             value = self.__callib( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'callib': value},{'callib': self.__schema['callib']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('callib',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __gaintable_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__gaintable_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        if self.__gaintable_dflt( self.__globals_( ) ) is not None:
             description = 'Gain calibration table(s) to apply on the fly'
             value = self.__gaintable( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'gaintable': value},{'gaintable': self.__schema['gaintable']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('gaintable',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __gainfield_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__gainfield_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        if self.__gainfield_dflt( self.__globals_( ) ) is not None:
             description = 'Select a subset of calibrators from gaintable(s)'
             value = self.__gainfield( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'gainfield': value},{'gainfield': self.__schema['gainfield']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('gainfield',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __interp_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__interp_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        if self.__interp_dflt( self.__globals_( ) ) is not None:
             description = 'Interpolation parameters for each gaintable, as a list'
             value = self.__interp( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'interp': value},{'interp': self.__schema['interp']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('interp',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __spwmap_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spwmap_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ ]
        if self.__spwmap_dflt( self.__globals_( ) ) is not None:
             description = 'Spectral window mappings to form for gaintable(s)'
             value = self.__spwmap( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spwmap': value},{'spwmap': self.__schema['spwmap']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('spwmap',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __parang_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__parang_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Apply parallactic angle correction'
        value = self.__parang( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'parang': value},{'parang': self.__schema['parang']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('parang',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'rmsthresh' in glb: del glb['rmsthresh']
        if 'antenna' in glb: del glb['antenna']
        if 'callib' in glb: del glb['callib']
        if 'phasewrap' in glb: del glb['phasewrap']
        if 'gainfield' in glb: del glb['gainfield']
        if 'preavg' in glb: del glb['preavg']
        if 'parang' in glb: del glb['parang']
        if 'field' in glb: del glb['field']
        if 'msselect' in glb: del glb['msselect']
        if 'splinetime' in glb: del glb['splinetime']
        if 'intent' in glb: del glb['intent']
        if 'spwmap' in glb: del glb['spwmap']
        if 'npointaver' in glb: del glb['npointaver']
        if 'refant' in glb: del glb['refant']
        if 'minsnr' in glb: del glb['minsnr']
        if 'corrdepflags' in glb: del glb['corrdepflags']
        if 'scan' in glb: del glb['scan']
        if 'vis' in glb: del glb['vis']
        if 'minblperant' in glb: del glb['minblperant']
        if 'solmode' in glb: del glb['solmode']
        if 'interp' in glb: del glb['interp']
        if 'normtype' in glb: del glb['normtype']
        if 'solnorm' in glb: del glb['solnorm']
        if 'docallib' in glb: del glb['docallib']
        if 'calmode' in glb: del glb['calmode']
        if 'combine' in glb: del glb['combine']
        if 'refantmode' in glb: del glb['refantmode']
        if 'uvrange' in glb: del glb['uvrange']
        if 'solint' in glb: del glb['solint']
        if 'caltable' in glb: del glb['caltable']
        if 'observation' in glb: del glb['observation']
        if 'gaintype' in glb: del glb['gaintype']
        if 'smodel' in glb: del glb['smodel']
        if 'spw' in glb: del glb['spw']
        if 'selectdata' in glb: del glb['selectdata']
        if 'timerange' in glb: del glb['timerange']
        if 'gaintable' in glb: del glb['gaintable']
        if 'append' in glb: del glb['append']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# gaincal -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__caltable_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__intent_inp( )
        self.__selectdata_inp( )
        self.__timerange_inp( )
        self.__uvrange_inp( )
        self.__antenna_inp( )
        self.__scan_inp( )
        self.__observation_inp( )
        self.__msselect_inp( )
        self.__solint_inp( )
        self.__combine_inp( )
        self.__preavg_inp( )
        self.__refant_inp( )
        self.__refantmode_inp( )
        self.__minblperant_inp( )
        self.__minsnr_inp( )
        self.__solnorm_inp( )
        self.__normtype_inp( )
        self.__gaintype_inp( )
        self.__smodel_inp( )
        self.__calmode_inp( )
        self.__solmode_inp( )
        self.__rmsthresh_inp( )
        self.__corrdepflags_inp( )
        self.__append_inp( )
        self.__splinetime_inp( )
        self.__npointaver_inp( )
        self.__phasewrap_inp( )
        self.__docallib_inp( )
        self.__callib_inp( )
        self.__gaintable_inp( )
        self.__gainfield_inp( )
        self.__interp_inp( )
        self.__spwmap_inp( )
        self.__parang_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "gaincal.last" if os.path.isfile("gaincal.last") else "gaincal.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('gaincal.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
        _invocation_parameters['field'] = self.__field( self.__globals_( ) )
        _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
        _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
        _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
        _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
        _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
        _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
        _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
        _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
        _invocation_parameters['msselect'] = self.__msselect( self.__globals_( ) )
        _invocation_parameters['solint'] = self.__solint( self.__globals_( ) )
        _invocation_parameters['combine'] = self.__combine( self.__globals_( ) )
        _invocation_parameters['preavg'] = self.__preavg( self.__globals_( ) )
        _invocation_parameters['refant'] = self.__refant( self.__globals_( ) )
        _invocation_parameters['refantmode'] = self.__refantmode( self.__globals_( ) )
        _invocation_parameters['minblperant'] = self.__minblperant( self.__globals_( ) )
        _invocation_parameters['minsnr'] = self.__minsnr( self.__globals_( ) )
        _invocation_parameters['solnorm'] = self.__solnorm( self.__globals_( ) )
        _invocation_parameters['normtype'] = self.__normtype( self.__globals_( ) )
        _invocation_parameters['gaintype'] = self.__gaintype( self.__globals_( ) )
        _invocation_parameters['smodel'] = self.__smodel( self.__globals_( ) )
        _invocation_parameters['calmode'] = self.__calmode( self.__globals_( ) )
        _invocation_parameters['solmode'] = self.__solmode( self.__globals_( ) )
        _invocation_parameters['rmsthresh'] = self.__rmsthresh( self.__globals_( ) )
        _invocation_parameters['corrdepflags'] = self.__corrdepflags( self.__globals_( ) )
        _invocation_parameters['append'] = self.__append( self.__globals_( ) )
        _invocation_parameters['splinetime'] = self.__splinetime( self.__globals_( ) )
        _invocation_parameters['npointaver'] = self.__npointaver( self.__globals_( ) )
        _invocation_parameters['phasewrap'] = self.__phasewrap( self.__globals_( ) )
        _invocation_parameters['docallib'] = self.__docallib( self.__globals_( ) )
        _invocation_parameters['callib'] = self.__callib( self.__globals_( ) )
        _invocation_parameters['gaintable'] = self.__gaintable( self.__globals_( ) )
        _invocation_parameters['gainfield'] = self.__gainfield( self.__globals_( ) )
        _invocation_parameters['interp'] = self.__interp( self.__globals_( ) )
        _invocation_parameters['spwmap'] = self.__spwmap( self.__globals_( ) )
        _invocation_parameters['parang'] = self.__parang( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-12s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#gaincal( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, caltable=None, field=None, spw=None, intent=None, selectdata=None, timerange=None, uvrange=None, antenna=None, scan=None, observation=None, msselect=None, solint=None, combine=None, preavg=None, refant=None, refantmode=None, minblperant=None, minsnr=None, solnorm=None, normtype=None, gaintype=None, smodel=None, calmode=None, solmode=None, rmsthresh=None, corrdepflags=None, append=None, splinetime=None, npointaver=None, phasewrap=None, docallib=None, callib=None, gaintable=None, gainfield=None, interp=None, spwmap=None, parang=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('gaincal.pre')
        _postfile = os.path.realpath('gaincal.last')
        task_result = None
        _arguments = [vis,caltable,field,spw,intent,selectdata,timerange,uvrange,antenna,scan,observation,msselect,solint,combine,preavg,refant,refantmode,minblperant,minsnr,solnorm,normtype,gaintype,smodel,calmode,solmode,rmsthresh,corrdepflags,append,splinetime,npointaver,phasewrap,docallib,callib,gaintable,gainfield,interp,spwmap,parang]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if caltable is not None: local_global['caltable'] = caltable
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if intent is not None: local_global['intent'] = intent
            if selectdata is not None: local_global['selectdata'] = selectdata
            if solint is not None: local_global['solint'] = solint
            if combine is not None: local_global['combine'] = combine
            if preavg is not None: local_global['preavg'] = preavg
            if refant is not None: local_global['refant'] = refant
            if refantmode is not None: local_global['refantmode'] = refantmode
            if minblperant is not None: local_global['minblperant'] = minblperant
            if minsnr is not None: local_global['minsnr'] = minsnr
            if solnorm is not None: local_global['solnorm'] = solnorm
            if gaintype is not None: local_global['gaintype'] = gaintype
            if smodel is not None: local_global['smodel'] = smodel
            if calmode is not None: local_global['calmode'] = calmode
            if solmode is not None: local_global['solmode'] = solmode
            if rmsthresh is not None: local_global['rmsthresh'] = rmsthresh
            if corrdepflags is not None: local_global['corrdepflags'] = corrdepflags
            if append is not None: local_global['append'] = append
            if docallib is not None: local_global['docallib'] = docallib
            if parang is not None: local_global['parang'] = parang

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['intent'] = self.__intent( local_global )
            _invocation_parameters['selectdata'] = self.__selectdata( local_global )
            _invocation_parameters['solint'] = self.__solint( local_global )
            _invocation_parameters['combine'] = self.__combine( local_global )
            _invocation_parameters['preavg'] = self.__preavg( local_global )
            _invocation_parameters['refant'] = self.__refant( local_global )
            _invocation_parameters['refantmode'] = self.__refantmode( local_global )
            _invocation_parameters['minblperant'] = self.__minblperant( local_global )
            _invocation_parameters['minsnr'] = self.__minsnr( local_global )
            _invocation_parameters['solnorm'] = self.__solnorm( local_global )
            _invocation_parameters['gaintype'] = self.__gaintype( local_global )
            _invocation_parameters['smodel'] = self.__smodel( local_global )
            _invocation_parameters['calmode'] = self.__calmode( local_global )
            _invocation_parameters['solmode'] = self.__solmode( local_global )
            _invocation_parameters['rmsthresh'] = self.__rmsthresh( local_global )
            _invocation_parameters['corrdepflags'] = self.__corrdepflags( local_global )
            _invocation_parameters['append'] = self.__append( local_global )
            _invocation_parameters['docallib'] = self.__docallib( local_global )
            _invocation_parameters['parang'] = self.__parang( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['timerange'] = self.__timerange( _invocation_parameters ) if timerange is None else timerange
            _invocation_parameters['uvrange'] = self.__uvrange( _invocation_parameters ) if uvrange is None else uvrange
            _invocation_parameters['antenna'] = self.__antenna( _invocation_parameters ) if antenna is None else antenna
            _invocation_parameters['scan'] = self.__scan( _invocation_parameters ) if scan is None else scan
            _invocation_parameters['observation'] = self.__observation( _invocation_parameters ) if observation is None else observation
            _invocation_parameters['msselect'] = self.__msselect( _invocation_parameters ) if msselect is None else msselect
            _invocation_parameters['normtype'] = self.__normtype( _invocation_parameters ) if normtype is None else normtype
            _invocation_parameters['splinetime'] = self.__splinetime( _invocation_parameters ) if splinetime is None else splinetime
            _invocation_parameters['npointaver'] = self.__npointaver( _invocation_parameters ) if npointaver is None else npointaver
            _invocation_parameters['phasewrap'] = self.__phasewrap( _invocation_parameters ) if phasewrap is None else phasewrap
            _invocation_parameters['callib'] = self.__callib( _invocation_parameters ) if callib is None else callib
            _invocation_parameters['gaintable'] = self.__gaintable( _invocation_parameters ) if gaintable is None else gaintable
            _invocation_parameters['gainfield'] = self.__gainfield( _invocation_parameters ) if gainfield is None else gainfield
            _invocation_parameters['interp'] = self.__interp( _invocation_parameters ) if interp is None else interp
            _invocation_parameters['spwmap'] = self.__spwmap( _invocation_parameters ) if spwmap is None else spwmap

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
            _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
            _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
            _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
            _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
            _invocation_parameters['msselect'] = self.__msselect( self.__globals_( ) )
            _invocation_parameters['solint'] = self.__solint( self.__globals_( ) )
            _invocation_parameters['combine'] = self.__combine( self.__globals_( ) )
            _invocation_parameters['preavg'] = self.__preavg( self.__globals_( ) )
            _invocation_parameters['refant'] = self.__refant( self.__globals_( ) )
            _invocation_parameters['refantmode'] = self.__refantmode( self.__globals_( ) )
            _invocation_parameters['minblperant'] = self.__minblperant( self.__globals_( ) )
            _invocation_parameters['minsnr'] = self.__minsnr( self.__globals_( ) )
            _invocation_parameters['solnorm'] = self.__solnorm( self.__globals_( ) )
            _invocation_parameters['normtype'] = self.__normtype( self.__globals_( ) )
            _invocation_parameters['gaintype'] = self.__gaintype( self.__globals_( ) )
            _invocation_parameters['smodel'] = self.__smodel( self.__globals_( ) )
            _invocation_parameters['calmode'] = self.__calmode( self.__globals_( ) )
            _invocation_parameters['solmode'] = self.__solmode( self.__globals_( ) )
            _invocation_parameters['rmsthresh'] = self.__rmsthresh( self.__globals_( ) )
            _invocation_parameters['corrdepflags'] = self.__corrdepflags( self.__globals_( ) )
            _invocation_parameters['append'] = self.__append( self.__globals_( ) )
            _invocation_parameters['splinetime'] = self.__splinetime( self.__globals_( ) )
            _invocation_parameters['npointaver'] = self.__npointaver( self.__globals_( ) )
            _invocation_parameters['phasewrap'] = self.__phasewrap( self.__globals_( ) )
            _invocation_parameters['docallib'] = self.__docallib( self.__globals_( ) )
            _invocation_parameters['callib'] = self.__callib( self.__globals_( ) )
            _invocation_parameters['gaintable'] = self.__gaintable( self.__globals_( ) )
            _invocation_parameters['gainfield'] = self.__gainfield( self.__globals_( ) )
            _invocation_parameters['interp'] = self.__interp( self.__globals_( ) )
            _invocation_parameters['spwmap'] = self.__spwmap( self.__globals_( ) )
            _invocation_parameters['parang'] = self.__parang( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-12s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#gaincal( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'gaincal', [ 'vis=' + repr(_pc.document['vis']), 'caltable=' + repr(_pc.document['caltable']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'intent=' + repr(_pc.document['intent']), 'selectdata=' + repr(_pc.document['selectdata']), 'timerange=' + repr(_pc.document['timerange']), 'uvrange=' + repr(_pc.document['uvrange']), 'antenna=' + repr(_pc.document['antenna']), 'scan=' + repr(_pc.document['scan']), 'observation=' + repr(_pc.document['observation']), 'msselect=' + repr(_pc.document['msselect']), 'solint=' + repr(_pc.document['solint']), 'combine=' + repr(_pc.document['combine']), 'preavg=' + repr(_pc.document['preavg']), 'refant=' + repr(_pc.document['refant']), 'refantmode=' + repr(_pc.document['refantmode']), 'minblperant=' + repr(_pc.document['minblperant']), 'minsnr=' + repr(_pc.document['minsnr']), 'solnorm=' + repr(_pc.document['solnorm']), 'normtype=' + repr(_pc.document['normtype']), 'gaintype=' + repr(_pc.document['gaintype']), 'smodel=' + repr(_pc.document['smodel']), 'calmode=' + repr(_pc.document['calmode']), 'solmode=' + repr(_pc.document['solmode']), 'rmsthresh=' + repr(_pc.document['rmsthresh']), 'corrdepflags=' + repr(_pc.document['corrdepflags']), 'append=' + repr(_pc.document['append']), 'splinetime=' + repr(_pc.document['splinetime']), 'npointaver=' + repr(_pc.document['npointaver']), 'phasewrap=' + repr(_pc.document['phasewrap']), 'docallib=' + repr(_pc.document['docallib']), 'callib=' + repr(_pc.document['callib']), 'gaintable=' + repr(_pc.document['gaintable']), 'gainfield=' + repr(_pc.document['gainfield']), 'interp=' + repr(_pc.document['interp']), 'spwmap=' + repr(_pc.document['spwmap']), 'parang=' + repr(_pc.document['parang']) ] )
            task_result = _gaincal_t( _pc.document['vis'],_pc.document['caltable'],_pc.document['field'],_pc.document['spw'],_pc.document['intent'],_pc.document['selectdata'],_pc.document['timerange'],_pc.document['uvrange'],_pc.document['antenna'],_pc.document['scan'],_pc.document['observation'],_pc.document['msselect'],_pc.document['solint'],_pc.document['combine'],_pc.document['preavg'],_pc.document['refant'],_pc.document['refantmode'],_pc.document['minblperant'],_pc.document['minsnr'],_pc.document['solnorm'],_pc.document['normtype'],_pc.document['gaintype'],_pc.document['smodel'],_pc.document['calmode'],_pc.document['solmode'],_pc.document['rmsthresh'],_pc.document['corrdepflags'],_pc.document['append'],_pc.document['splinetime'],_pc.document['npointaver'],_pc.document['phasewrap'],_pc.document['docallib'],_pc.document['callib'],_pc.document['gaintable'],_pc.document['gainfield'],_pc.document['interp'],_pc.document['spwmap'],_pc.document['parang'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('gaincal')
            casalog.post("Exception Reported: Error in gaincal: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'gaincal', task_result )

        #Added if _gaincal_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

gaincal = _gaincal( )


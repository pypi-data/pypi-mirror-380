##################### generated by xml-casa (v2) from plotprofilemap.xml ############
##################### b8e72814dcbd57ab3b49a9f1b6b9d3a8 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_plotprofilemap import plotprofilemap as _plotprofilemap_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _plotprofilemap:
    """
    plotprofilemap ---- Makes profile map

    
    The plotprofilemap makes spectral profile map from specified image.
    The task accepts both CASA image and FITS cube as an input.
    

    --------- parameter descriptions ---------------------------------------------

    imagename     Input image name (CASA image or FITS)
    figfile       Output figure name
    overwrite     Overwrite existing figfile
    transparent   Output transparent figure
    pol           Polarization component to be plotted
    spectralaxis  Type of spectral axis
    restfreq      Rest frequency
    plotrange     Spectral axis range to plot
    title         Title of the plot
    linecolor     Line color
    linestyle     Line style
    linewidth     Line width in points
    separatepanel Separate plots
    plotmasked    Masked data handling
    maskedcolor   Line color for masked data
    showaxislabel Show axis labels on the bottom left panel
    showtick      Show axis ticks
    showticklabel Show axis tick labels on the bottom left panel
    figsize       Size of the figure
    numpanels     Number of panels
    [1;42mRETURNS[1;m          variant

    --------- examples -----------------------------------------------------------

    
    
    The plotprofilemap makes spectral profile map from specified image.
    The task accepts both CASA image and FITS cube as an input.
    
    It is necessary to specify existing CASA image or FITS cube as an
    imagename. Otherwise, the task will fail. If figfile is specified,
    profile map is saved as an PNG image. Please set overwrite to False
    if you don't want to overwrite existing file.
    
    Keyword arguments:
    imagename -- input image name (CASA image or FITS cube)
    figfile -- output PNG image name. No output if figfile is empty
    default: '' (no output)
    overwrite -- overwrite existing output file
    default: False
    transparent -- output transparent figure
    default: False
    pol -- polarization component to be plotted. It is an index for stokes axis
    of the image.
    default: 0
    spectralaxis -- spectral axis type
    default: '' (use image's spectral axis)
    options: 'channel', 'freuquency', 'velocity'
    restfreq -- rest frequency
    default: '' (use image's rest frequency)
    example: '100GHz'
    plotrange -- spectral axis range to plot. unit for the range depends on
    what spectral axis is chosen: channel for 'channel', GHz for
    'frequency', and km/s for 'velocity'
    default: '' (whole range)
    example: '0~1000' (from 0.0 to 1000.0)
    '~1000' (from minimul value to 1000.0)
    '24~' (from 24.0 to maximum value)
    title -- title of the plot
    default: '' (no title)
    linecolor -- line color in matplotlib format
    default: 'b' (blue)
    example: 'r' (red), 'black', '#ff99ff'
    linestyle -- line style in matplotlib format
    default: '-' (solid line)
    example: '..' (dotted line), '.-' (solid line with point marker)
    linewidth -- line width in points
    default: 0.2
    separatepanel -- separate panels
    default: True
    plotmasked -- masked data handling
    default: 'empty' (show empty panel)
    option: 'zero' (plot zero level)
    'none' (show nothing)
    'text' (show text indicating 'NO DATA')
    'plot' (plot masked data with different
    color specified by maskedcolor)
    maskedcolor -- line color for masked data
    showaxislabel -- Show axis labels on the bottom left panel
    default: False
    showtick -- Show ticks
    default: False
    showticklabel -- Show tick labels on the bottom left panel
    default: False
    figsize -- size of the figure
    default: '' (matplotlib default)
    example: '10cm' (10cm square)
    '122mm,10cm' (122mm width and 10cm height)
    numpanels -- Number of panels
    default: '' (auto)
    example: '6,8' (nx=6, ny=8)
    '8' (nx=8, ny=8)
    
    Number of panels along horizontal and vertical direction can be specified
    via the parameter 'numpanels'. It should be a string containing numerical
    value indicating number of panels. If only one number is given it will be
    applied to both axes. If you want to provide different numbers to horizontal
    and vertical axes, you should give two numbers as a string separated by comma.
    See example of the above parameter description section.
    
    If the number of panels is less than the number of pixels of input image,
    more than one pixels are assigned to one panel. In that case, spectra to be
    shown are the average of the assigned spectra in each pixel.
    
    Default value for numpanels is empty string ('') which corresponds to an auto
    calculation of the number of panels based on the number of pixels of input
    image. Formula for the number of horizontal and vertical panels, nh and nv,
    are as follows:
    
    npanel = min(max(nx, ny), 8)
    step = (max(nx, ny) - 1) / npanel + 1
    nh = nx / step + 1
    nv = ny / step + 1
    
    where nx and ny are the number of pixels along direction axes. In the above
    calculation, upper limit for nh and nv is 9.
    
    


    """

    _info_group_ = """visualization"""
    _info_desc_ = """Makes profile map"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'figfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}, 'transparent': {'type': 'cBool'}, 'pol': {'type': 'cInt'}, 'spectralaxis': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ '', 'frequency', 'channel', 'velocity' ]}, 'restfreq': {'type': 'cStr', 'coerce': _coerce.to_str}, 'plotrange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'title': {'type': 'cStr', 'coerce': _coerce.to_str}, 'linecolor': {'type': 'cStr', 'coerce': _coerce.to_str}, 'linestyle': {'type': 'cStr', 'coerce': _coerce.to_str}, 'linewidth': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'separatepanel': {'type': 'cBool'}, 'plotmasked': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'none', 'plot', 'empty', 'zero', 'text' ]}, 'maskedcolor': {'type': 'cStr', 'coerce': _coerce.to_str}, 'showaxislabel': {'type': 'cBool'}, 'showtick': {'type': 'cBool'}, 'showticklabel': {'type': 'cBool'}, 'figsize': {'type': 'cStr', 'coerce': _coerce.to_str}, 'numpanels': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 16 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __numpanels_dflt( self, glb ):
        return ''

    def __numpanels( self, glb ):
        if 'numpanels' in glb: return glb['numpanels']
        return ''

    def __plotrange_dflt( self, glb ):
        return ''

    def __plotrange( self, glb ):
        if 'plotrange' in glb: return glb['plotrange']
        return ''

    def __linecolor_dflt( self, glb ):
        return 'b'

    def __linecolor( self, glb ):
        if 'linecolor' in glb: return glb['linecolor']
        return 'b'

    def __spectralaxis_dflt( self, glb ):
        return ''

    def __spectralaxis( self, glb ):
        if 'spectralaxis' in glb: return glb['spectralaxis']
        return ''

    def __showaxislabel_dflt( self, glb ):
        return False

    def __showaxislabel( self, glb ):
        if 'showaxislabel' in glb: return glb['showaxislabel']
        return False

    def __figfile_dflt( self, glb ):
        return ''

    def __figfile( self, glb ):
        if 'figfile' in glb: return glb['figfile']
        return ''

    def __showtick_dflt( self, glb ):
        return False

    def __showtick( self, glb ):
        if 'showtick' in glb: return glb['showtick']
        return False

    def __pol_dflt( self, glb ):
        return int(0)

    def __pol( self, glb ):
        if 'pol' in glb: return glb['pol']
        return int(0)

    def __separatepanel_dflt( self, glb ):
        return True

    def __separatepanel( self, glb ):
        if 'separatepanel' in glb: return glb['separatepanel']
        return True

    def __figsize_dflt( self, glb ):
        return ''

    def __figsize( self, glb ):
        if 'figsize' in glb: return glb['figsize']
        return ''

    def __linestyle_dflt( self, glb ):
        return '-'

    def __linestyle( self, glb ):
        if 'linestyle' in glb: return glb['linestyle']
        return '-'

    def __title_dflt( self, glb ):
        return ''

    def __title( self, glb ):
        if 'title' in glb: return glb['title']
        return ''

    def __linewidth_dflt( self, glb ):
        return float(0.2)

    def __linewidth( self, glb ):
        if 'linewidth' in glb: return glb['linewidth']
        return float(0.2)

    def __plotmasked_dflt( self, glb ):
        return 'empty'

    def __plotmasked( self, glb ):
        if 'plotmasked' in glb: return glb['plotmasked']
        return 'empty'

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __showticklabel_dflt( self, glb ):
        if self.__showtick( glb ) == bool(True): return bool(False)
        return None
    def __restfreq_dflt( self, glb ):
        if self.__spectralaxis( glb ) == "velocity": return ""
        return None
    def __transparent_dflt( self, glb ):
        if self.__figfile( glb ) != "": return bool(False)
        return None
    def __maskedcolor_dflt( self, glb ):
        if self.__plotmasked( glb ) == "plot": return "gray"
        if self.__plotmasked( glb ) == "zero": return "gray"
        return None
    def __overwrite_dflt( self, glb ):
        if self.__figfile( glb ) != "": return bool(False)
        return None

    #--------- return subparam values -------------------------------------------------
    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        dflt = self.__overwrite_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __transparent( self, glb ):
        if 'transparent' in glb: return glb['transparent']
        dflt = self.__transparent_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __restfreq( self, glb ):
        if 'restfreq' in glb: return glb['restfreq']
        dflt = self.__restfreq_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __maskedcolor( self, glb ):
        if 'maskedcolor' in glb: return glb['maskedcolor']
        dflt = self.__maskedcolor_dflt( glb )
        if dflt is not None: return dflt
        return 'gray'
    def __showticklabel( self, glb ):
        if 'showticklabel' in glb: return glb['showticklabel']
        dflt = self.__showticklabel_dflt( glb )
        if dflt is not None: return dflt
        return False

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Input image name (CASA image or FITS)'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __figfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__figfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Output figure name'
        value = self.__figfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'figfile': value},{'figfile': self.__schema['figfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-16.16s =\x1B[0m %s%-23s%s' % ('figfile',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__overwrite_dflt( self.__globals_( ) ) is not None:
             description = 'Overwrite existing figfile'
             value = self.__overwrite( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-13.13s =\x1B[0m %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __transparent_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__transparent_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__transparent_dflt( self.__globals_( ) ) is not None:
             description = 'Output transparent figure'
             value = self.__transparent( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'transparent': value},{'transparent': self.__schema['transparent']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-13.13s =\x1B[0m %s%-23s%s' % ('transparent',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __pol_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__pol_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'Polarization component to be plotted'
        value = self.__pol( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'pol': value},{'pol': self.__schema['pol']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('pol',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spectralaxis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spectralaxis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Type of spectral axis'
        value = self.__spectralaxis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spectralaxis': value},{'spectralaxis': self.__schema['spectralaxis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-16.16s =\x1B[0m %s%-23s%s' % ('spectralaxis',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __restfreq_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__restfreq_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__restfreq_dflt( self.__globals_( ) ) is not None:
             description = 'Rest frequency'
             value = self.__restfreq( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'restfreq': value},{'restfreq': self.__schema['restfreq']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-13.13s =\x1B[0m %s%-23s%s' % ('restfreq',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __plotrange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__plotrange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Spectral axis range to plot'
        value = self.__plotrange( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'plotrange': value},{'plotrange': self.__schema['plotrange']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('plotrange',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __title_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__title_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Title of the plot'
        value = self.__title( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'title': value},{'title': self.__schema['title']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('title',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __linecolor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__linecolor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'b'
        description = 'Line color'
        value = self.__linecolor( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'linecolor': value},{'linecolor': self.__schema['linecolor']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('linecolor',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __linestyle_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__linestyle_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return '-'
        description = 'Line style'
        value = self.__linestyle( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'linestyle': value},{'linestyle': self.__schema['linestyle']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('linestyle',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __linewidth_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__linewidth_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(0.2)
        description = 'Line width in points'
        value = self.__linewidth( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'linewidth': value},{'linewidth': self.__schema['linewidth']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('linewidth',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __separatepanel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__separatepanel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Separate plots'
        value = self.__separatepanel( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'separatepanel': value},{'separatepanel': self.__schema['separatepanel']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('separatepanel',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __plotmasked_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__plotmasked_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'empty'
        description = 'Masked data handling'
        value = self.__plotmasked( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'plotmasked': value},{'plotmasked': self.__schema['plotmasked']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-16.16s =\x1B[0m %s%-23s%s' % ('plotmasked',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __maskedcolor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__maskedcolor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'gray'
        if self.__maskedcolor_dflt( self.__globals_( ) ) is not None:
             description = 'Line color for masked data'
             value = self.__maskedcolor( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'maskedcolor': value},{'maskedcolor': self.__schema['maskedcolor']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-13.13s =\x1B[0m %s%-23s%s' % ('maskedcolor',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showaxislabel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showaxislabel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Show axis labels on the bottom left panel'
        value = self.__showaxislabel( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showaxislabel': value},{'showaxislabel': self.__schema['showaxislabel']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('showaxislabel',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __showtick_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showtick_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Show axis ticks'
        value = self.__showtick( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showtick': value},{'showtick': self.__schema['showtick']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-16.16s =\x1B[0m %s%-23s%s' % ('showtick',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __showticklabel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showticklabel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__showticklabel_dflt( self.__globals_( ) ) is not None:
             description = 'Show axis tick labels on the bottom left panel'
             value = self.__showticklabel( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showticklabel': value},{'showticklabel': self.__schema['showticklabel']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-13.13s =\x1B[0m %s%-23s%s' % ('showticklabel',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __figsize_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__figsize_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Size of the figure'
        value = self.__figsize( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'figsize': value},{'figsize': self.__schema['figsize']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('figsize',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __numpanels_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__numpanels_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Number of panels'
        value = self.__numpanels( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'numpanels': value},{'numpanels': self.__schema['numpanels']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-16.16s = %s%-23s%s' % ('numpanels',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'linewidth' in glb: del glb['linewidth']
        if 'spectralaxis' in glb: del glb['spectralaxis']
        if 'linecolor' in glb: del glb['linecolor']
        if 'linestyle' in glb: del glb['linestyle']
        if 'showticklabel' in glb: del glb['showticklabel']
        if 'plotrange' in glb: del glb['plotrange']
        if 'imagename' in glb: del glb['imagename']
        if 'figfile' in glb: del glb['figfile']
        if 'restfreq' in glb: del glb['restfreq']
        if 'plotmasked' in glb: del glb['plotmasked']
        if 'showtick' in glb: del glb['showtick']
        if 'separatepanel' in glb: del glb['separatepanel']
        if 'transparent' in glb: del glb['transparent']
        if 'maskedcolor' in glb: del glb['maskedcolor']
        if 'title' in glb: del glb['title']
        if 'overwrite' in glb: del glb['overwrite']
        if 'pol' in glb: del glb['pol']
        if 'showaxislabel' in glb: del glb['showaxislabel']
        if 'numpanels' in glb: del glb['numpanels']
        if 'figsize' in glb: del glb['figsize']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# plotprofilemap -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__figfile_inp( )
        self.__overwrite_inp( )
        self.__transparent_inp( )
        self.__pol_inp( )
        self.__spectralaxis_inp( )
        self.__restfreq_inp( )
        self.__plotrange_inp( )
        self.__title_inp( )
        self.__linecolor_inp( )
        self.__linestyle_inp( )
        self.__linewidth_inp( )
        self.__separatepanel_inp( )
        self.__plotmasked_inp( )
        self.__maskedcolor_inp( )
        self.__showaxislabel_inp( )
        self.__showtick_inp( )
        self.__showticklabel_inp( )
        self.__figsize_inp( )
        self.__numpanels_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "plotprofilemap.last" if os.path.isfile("plotprofilemap.last") else "plotprofilemap.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('plotprofilemap.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['figfile'] = self.__figfile( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['transparent'] = self.__transparent( self.__globals_( ) )
        _invocation_parameters['pol'] = self.__pol( self.__globals_( ) )
        _invocation_parameters['spectralaxis'] = self.__spectralaxis( self.__globals_( ) )
        _invocation_parameters['restfreq'] = self.__restfreq( self.__globals_( ) )
        _invocation_parameters['plotrange'] = self.__plotrange( self.__globals_( ) )
        _invocation_parameters['title'] = self.__title( self.__globals_( ) )
        _invocation_parameters['linecolor'] = self.__linecolor( self.__globals_( ) )
        _invocation_parameters['linestyle'] = self.__linestyle( self.__globals_( ) )
        _invocation_parameters['linewidth'] = self.__linewidth( self.__globals_( ) )
        _invocation_parameters['separatepanel'] = self.__separatepanel( self.__globals_( ) )
        _invocation_parameters['plotmasked'] = self.__plotmasked( self.__globals_( ) )
        _invocation_parameters['maskedcolor'] = self.__maskedcolor( self.__globals_( ) )
        _invocation_parameters['showaxislabel'] = self.__showaxislabel( self.__globals_( ) )
        _invocation_parameters['showtick'] = self.__showtick( self.__globals_( ) )
        _invocation_parameters['showticklabel'] = self.__showticklabel( self.__globals_( ) )
        _invocation_parameters['figsize'] = self.__figsize( self.__globals_( ) )
        _invocation_parameters['numpanels'] = self.__numpanels( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-13s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#plotprofilemap( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, figfile=None, overwrite=None, transparent=None, pol=None, spectralaxis=None, restfreq=None, plotrange=None, title=None, linecolor=None, linestyle=None, linewidth=None, separatepanel=None, plotmasked=None, maskedcolor=None, showaxislabel=None, showtick=None, showticklabel=None, figsize=None, numpanels=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('plotprofilemap.pre')
        _postfile = os.path.realpath('plotprofilemap.last')
        task_result = None
        _arguments = [imagename,figfile,overwrite,transparent,pol,spectralaxis,restfreq,plotrange,title,linecolor,linestyle,linewidth,separatepanel,plotmasked,maskedcolor,showaxislabel,showtick,showticklabel,figsize,numpanels]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if figfile is not None: local_global['figfile'] = figfile
            if pol is not None: local_global['pol'] = pol
            if spectralaxis is not None: local_global['spectralaxis'] = spectralaxis
            if plotrange is not None: local_global['plotrange'] = plotrange
            if title is not None: local_global['title'] = title
            if linecolor is not None: local_global['linecolor'] = linecolor
            if linestyle is not None: local_global['linestyle'] = linestyle
            if linewidth is not None: local_global['linewidth'] = linewidth
            if separatepanel is not None: local_global['separatepanel'] = separatepanel
            if plotmasked is not None: local_global['plotmasked'] = plotmasked
            if showaxislabel is not None: local_global['showaxislabel'] = showaxislabel
            if showtick is not None: local_global['showtick'] = showtick
            if figsize is not None: local_global['figsize'] = figsize
            if numpanels is not None: local_global['numpanels'] = numpanels

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['figfile'] = self.__figfile( local_global )
            _invocation_parameters['pol'] = self.__pol( local_global )
            _invocation_parameters['spectralaxis'] = self.__spectralaxis( local_global )
            _invocation_parameters['plotrange'] = self.__plotrange( local_global )
            _invocation_parameters['title'] = self.__title( local_global )
            _invocation_parameters['linecolor'] = self.__linecolor( local_global )
            _invocation_parameters['linestyle'] = self.__linestyle( local_global )
            _invocation_parameters['linewidth'] = self.__linewidth( local_global )
            _invocation_parameters['separatepanel'] = self.__separatepanel( local_global )
            _invocation_parameters['plotmasked'] = self.__plotmasked( local_global )
            _invocation_parameters['showaxislabel'] = self.__showaxislabel( local_global )
            _invocation_parameters['showtick'] = self.__showtick( local_global )
            _invocation_parameters['figsize'] = self.__figsize( local_global )
            _invocation_parameters['numpanels'] = self.__numpanels( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['overwrite'] = self.__overwrite( _invocation_parameters ) if overwrite is None else overwrite
            _invocation_parameters['transparent'] = self.__transparent( _invocation_parameters ) if transparent is None else transparent
            _invocation_parameters['restfreq'] = self.__restfreq( _invocation_parameters ) if restfreq is None else restfreq
            _invocation_parameters['maskedcolor'] = self.__maskedcolor( _invocation_parameters ) if maskedcolor is None else maskedcolor
            _invocation_parameters['showticklabel'] = self.__showticklabel( _invocation_parameters ) if showticklabel is None else showticklabel

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['figfile'] = self.__figfile( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['transparent'] = self.__transparent( self.__globals_( ) )
            _invocation_parameters['pol'] = self.__pol( self.__globals_( ) )
            _invocation_parameters['spectralaxis'] = self.__spectralaxis( self.__globals_( ) )
            _invocation_parameters['restfreq'] = self.__restfreq( self.__globals_( ) )
            _invocation_parameters['plotrange'] = self.__plotrange( self.__globals_( ) )
            _invocation_parameters['title'] = self.__title( self.__globals_( ) )
            _invocation_parameters['linecolor'] = self.__linecolor( self.__globals_( ) )
            _invocation_parameters['linestyle'] = self.__linestyle( self.__globals_( ) )
            _invocation_parameters['linewidth'] = self.__linewidth( self.__globals_( ) )
            _invocation_parameters['separatepanel'] = self.__separatepanel( self.__globals_( ) )
            _invocation_parameters['plotmasked'] = self.__plotmasked( self.__globals_( ) )
            _invocation_parameters['maskedcolor'] = self.__maskedcolor( self.__globals_( ) )
            _invocation_parameters['showaxislabel'] = self.__showaxislabel( self.__globals_( ) )
            _invocation_parameters['showtick'] = self.__showtick( self.__globals_( ) )
            _invocation_parameters['showticklabel'] = self.__showticklabel( self.__globals_( ) )
            _invocation_parameters['figsize'] = self.__figsize( self.__globals_( ) )
            _invocation_parameters['numpanels'] = self.__numpanels( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-13s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#plotprofilemap( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'plotprofilemap', [ 'imagename=' + repr(_pc.document['imagename']), 'figfile=' + repr(_pc.document['figfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'transparent=' + repr(_pc.document['transparent']), 'pol=' + repr(_pc.document['pol']), 'spectralaxis=' + repr(_pc.document['spectralaxis']), 'restfreq=' + repr(_pc.document['restfreq']), 'plotrange=' + repr(_pc.document['plotrange']), 'title=' + repr(_pc.document['title']), 'linecolor=' + repr(_pc.document['linecolor']), 'linestyle=' + repr(_pc.document['linestyle']), 'linewidth=' + repr(_pc.document['linewidth']), 'separatepanel=' + repr(_pc.document['separatepanel']), 'plotmasked=' + repr(_pc.document['plotmasked']), 'maskedcolor=' + repr(_pc.document['maskedcolor']), 'showaxislabel=' + repr(_pc.document['showaxislabel']), 'showtick=' + repr(_pc.document['showtick']), 'showticklabel=' + repr(_pc.document['showticklabel']), 'figsize=' + repr(_pc.document['figsize']), 'numpanels=' + repr(_pc.document['numpanels']) ] )
            task_result = _plotprofilemap_t( _pc.document['imagename'],_pc.document['figfile'],_pc.document['overwrite'],_pc.document['transparent'],_pc.document['pol'],_pc.document['spectralaxis'],_pc.document['restfreq'],_pc.document['plotrange'],_pc.document['title'],_pc.document['linecolor'],_pc.document['linestyle'],_pc.document['linewidth'],_pc.document['separatepanel'],_pc.document['plotmasked'],_pc.document['maskedcolor'],_pc.document['showaxislabel'],_pc.document['showtick'],_pc.document['showticklabel'],_pc.document['figsize'],_pc.document['numpanels'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('plotprofilemap')
            casalog.post("Exception Reported: Error in plotprofilemap: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'plotprofilemap', task_result )

        #Added if _plotprofilemap_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

plotprofilemap = _plotprofilemap( )


##################### generated by xml-casa (v2) from flagmanager.xml ###############
##################### 21144af62938a153fde0ca566cee198d ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_flagmanager import flagmanager as _flagmanager_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _flagmanager:
    """
    flagmanager ---- Enable list, save, restore, delete and rename flag version files.

    
    These flag version files are copies of the flag column for a
    measurement set.  They can be restored to the data set to get
    back to a previous flag version.  On running importvla, a flag
    version call 'Original' is automatically produced.
    

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input visibility file (MS)
    mode        Operation: list, save, restore, delete, rename
    versionname Flag version name
    oldname     Flag version to rename
    comment     Short description of a versionname
    merge       Merge option: replace will save or over-write the flags
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    
    
    
    The flag version files are copies of the FLAG column of a
    Measurement Set. They can be restored to the data set to obtain
    a previous flag version.  On running importasdm, a flag
    version called 'Original' is produced by default.  It is recommended to
    save a flagversion at the beginning or after serious editing.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none. example: vis='ngc5921.ms'
    
    mode -- Flag version operation
    default: 'list': it will list in the logger the existing flag versions of the MS.
    This option will also return by default a dictionary containing the
    name of the MS, the name of the flag version and the comment. This
    information is taken from the FLAG_VERSION_LIST file inside the
    .flagversions directory.
    
    'save': will save the FLAG column from vis to a specified flag file. If the name given
    in versionname already exists, the task will give a warning and rename it
    to a name with a suffix '.old.timestamp'. The respective entry in FLAG_VERSION_LIST
    will also be updated.
    
    'restore': will place the specified flag file into vis
    
    'delete': will delete specified flag file
    
    'rename': will rename a specified flag file
    
    versionname -- Flag version name
    default: none; example: versionname='original_data'
    No imbedded blanks in the versionname
    
    comment -- Short description of a versionname, when mode is 'save' or 'rename'
    default: ''; example: comment='Clip above 1.85'
    comment = versionname
    
    oldname -- When mode='rename', the flag file to rename
    
    merge -- Merge operation
    Options: 'or','and', but not recommended for now.
    
    


    """

    _info_group_ = """flagging"""
    _info_desc_ = """Enable list, save, restore, delete and rename flag version files."""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'mode': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'rename', 'save', 'delete', 'list', 'restore' ]}, 'versionname': {'type': 'cStr', 'coerce': _coerce.to_str}, 'oldname': {'type': 'cStr', 'coerce': _coerce.to_str}, 'comment': {'type': 'cStr', 'coerce': _coerce.to_str}, 'merge': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 14 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __mode_dflt( self, glb ):
        return 'list'

    def __mode( self, glb ):
        if 'mode' in glb: return glb['mode']
        return 'list'



    #--------- return inp/go default --------------------------------------------------
    def __versionname_dflt( self, glb ):
        if self.__mode( glb ) == "save": return ""
        if self.__mode( glb ) == "restore": return ""
        if self.__mode( glb ) == "delete": return ""
        if self.__mode( glb ) == "rename": return ""
        return None
    def __comment_dflt( self, glb ):
        if self.__mode( glb ) == "save": return ""
        if self.__mode( glb ) == "rename": return ""
        return None
    def __merge_dflt( self, glb ):
        if self.__mode( glb ) == "save": return "replace"
        if self.__mode( glb ) == "restore": return "replace"
        return None
    def __oldname_dflt( self, glb ):
        if self.__mode( glb ) == "rename": return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __versionname( self, glb ):
        if 'versionname' in glb: return glb['versionname']
        dflt = self.__versionname_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __oldname( self, glb ):
        if 'oldname' in glb: return glb['oldname']
        dflt = self.__oldname_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __comment( self, glb ):
        if 'comment' in glb: return glb['comment']
        dflt = self.__comment_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __merge( self, glb ):
        if 'merge' in glb: return glb['merge']
        dflt = self.__merge_dflt( glb )
        if dflt is not None: return dflt
        return 'replace'

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input visibility file (MS)'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __mode_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__mode_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'list'
        description = 'Operation: list, save, restore, delete, rename'
        value = self.__mode( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'mode': value},{'mode': self.__schema['mode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23s%s' % ('mode',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __versionname_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__versionname_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__versionname_dflt( self.__globals_( ) ) is not None:
             description = 'Flag version name'
             value = self.__versionname( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'versionname': value},{'versionname': self.__schema['versionname']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('versionname',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __oldname_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__oldname_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__oldname_dflt( self.__globals_( ) ) is not None:
             description = 'Flag version to rename'
             value = self.__oldname( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'oldname': value},{'oldname': self.__schema['oldname']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('oldname',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __comment_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__comment_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__comment_dflt( self.__globals_( ) ) is not None:
             description = 'Short description of a versionname'
             value = self.__comment( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'comment': value},{'comment': self.__schema['comment']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('comment',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __merge_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__merge_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'replace'
        if self.__merge_dflt( self.__globals_( ) ) is not None:
             description = 'Merge option: replace will save or over-write the flags'
             value = self.__merge( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'merge': value},{'merge': self.__schema['merge']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('merge',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'oldname' in glb: del glb['oldname']
        if 'versionname' in glb: del glb['versionname']
        if 'vis' in glb: del glb['vis']
        if 'merge' in glb: del glb['merge']
        if 'comment' in glb: del glb['comment']
        if 'mode' in glb: del glb['mode']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# flagmanager -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__mode_inp( )
        self.__versionname_inp( )
        self.__oldname_inp( )
        self.__comment_inp( )
        self.__merge_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "flagmanager.last" if os.path.isfile("flagmanager.last") else "flagmanager.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('flagmanager.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['mode'] = self.__mode( self.__globals_( ) )
        _invocation_parameters['versionname'] = self.__versionname( self.__globals_( ) )
        _invocation_parameters['oldname'] = self.__oldname( self.__globals_( ) )
        _invocation_parameters['comment'] = self.__comment( self.__globals_( ) )
        _invocation_parameters['merge'] = self.__merge( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#flagmanager( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, mode=None, versionname=None, oldname=None, comment=None, merge=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('flagmanager.pre')
        _postfile = os.path.realpath('flagmanager.last')
        task_result = None
        _arguments = [vis,mode,versionname,oldname,comment,merge]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if mode is not None: local_global['mode'] = mode

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['mode'] = self.__mode( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['versionname'] = self.__versionname( _invocation_parameters ) if versionname is None else versionname
            _invocation_parameters['oldname'] = self.__oldname( _invocation_parameters ) if oldname is None else oldname
            _invocation_parameters['comment'] = self.__comment( _invocation_parameters ) if comment is None else comment
            _invocation_parameters['merge'] = self.__merge( _invocation_parameters ) if merge is None else merge

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['mode'] = self.__mode( self.__globals_( ) )
            _invocation_parameters['versionname'] = self.__versionname( self.__globals_( ) )
            _invocation_parameters['oldname'] = self.__oldname( self.__globals_( ) )
            _invocation_parameters['comment'] = self.__comment( self.__globals_( ) )
            _invocation_parameters['merge'] = self.__merge( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#flagmanager( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'flagmanager', [ 'vis=' + repr(_pc.document['vis']), 'mode=' + repr(_pc.document['mode']), 'versionname=' + repr(_pc.document['versionname']), 'oldname=' + repr(_pc.document['oldname']), 'comment=' + repr(_pc.document['comment']), 'merge=' + repr(_pc.document['merge']) ] )
            task_result = _flagmanager_t( _pc.document['vis'],_pc.document['mode'],_pc.document['versionname'],_pc.document['oldname'],_pc.document['comment'],_pc.document['merge'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('flagmanager')
            casalog.post("Exception Reported: Error in flagmanager: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'flagmanager', task_result )

        #Added if _flagmanager_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

flagmanager = _flagmanager( )


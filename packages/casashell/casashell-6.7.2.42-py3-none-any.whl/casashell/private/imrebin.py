##################### generated by xml-casa (v2) from imrebin.xml ###################
##################### 0184451bd9f27710329ee9eca37ad8be ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_imrebin import imrebin as _imrebin_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imrebin:
    """
    imrebin ---- Rebin an image by the specified integer factors

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    outfile   Output image name.
    factor    Binning factors for each axis. Use imhead or ia.summary to determine axis ordering.
    region    Region selection. Default is to use the full image.
    box       Rectangular region to select in direction plane. Default is to use the entire direction plane.
    chans     Channels to use. Default is to use all channels.
    stokes    Stokes planes to use. Default is to use all Stokes planes. Stokes planes cannot be rebinned.
    mask      Mask to use. Default is none.
    dropdeg   Drop degenerate axes?
    overwrite Overwrite the output if it exists? Default False
    stretch   Stretch the mask if necessary and possible?
    crop      Remove pixels from the end of an axis to be rebinned if there are not enough to form an integral bin?
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    PARAMETER SUMMARY
    imagename        Name of the input (CASA, FITS, MIRIAD) image
    outfile          Name of output CASA image. Must be specified.
    factor           Array of binning factors for each axis, eg [2,3]. Use imhead or ia.summary()
    to determine order of axes in your image.
    region           Region selection. Default is to use the
    full image.
    box              Rectangular region to select in direction plane.  for
    details. Default is to use the entire direction plane.
    chans            Channels to use. Default is to use all channels.
    stokes           Stokes planes to use. Default is to use all
    Stokes planes. Stokes planes cannot be rebiined.
    mask             Mask to use. Default is none.
    dropdeg          Drop degenerate axes?
    overwrite        Should the image of the same name as specified in outfile be overwritten?
    If true, the file if it exists is automatically overwritten.
    stretch          Stretch the input mask if necessary and possible.
    crop             Only considered if the length of the input axis is not an integral multiple of
    the associated binning factor. If True, pixels at the end of the axis that do not
    form a complete bin are not included in the binning. If False, the remaining extra
    pixels are averaged to form the final bin along the axis.
    
    DESCRIPTION
    
    This application rebins the specified image by the specified integer binning
    factors for each axis. It supports both float valued and complex valued images.
    The corresponding output pixel value is the average of the
    input pixel values. The output pixel will be masked False if there
    were no good input pixels.  A polarization axis cannot be rebinned.
    
    The binning factors array must contain at least one element and no more
    elements than the number of input image axes. If the number of elements
    specified is less than the number of image axes, then the remaining axes
    not specified are not rebinned. All specified values must be positive. A
    value of one indicates that no rebinning of the associated axis will occur.
    Should this array contain any float values, they will be rounded to the next
    lowest integer. Note that in many images with both frequency and polarization
    axes, the polarization axis preceeds the frequency axis. If you wish to rebin
    the frequency axis, it is recommended that you inspect your image with imhead
    or ia.summary() to determine the axis ordering.
    
    Binning starts from the origin pixel of the bounding box of the selected region or
    the origin pixel of the input image if no region is specified. The value of crop
    is used to determine how to handle cases where there are pixels
    at the end of the axis that do not form a complete bin. If crop=True,
    extra pixels at the end of the axis are discarded. If crop=False, the remaining
    pixels are averaged into the final bin along that axis. Should the length
    of the axis to be rebinned be an integral multiple of the associated binning
    factor, the value of crop is irrelevant.
    
    A value of dropdeg=True will result in the output image not containing
    axes that are degenerate in the specified region or in the input image if no
    region is specified. Note that, however, the binning
    factors array must still account for degenerate axes, and the binning
    factor associated with a degenerate axis must always be 1.
    
    EXAMPLE
    
    # rebin the first two axes (normally the direction axes)
    imrebin(imagename="my.im", outfile="rebinned.im", factor=[2,3])
    
    # rebin the frequency axis, which is the fourth axis in this image
    imrebin(imagename="my2.im", outfile="rebinned2.im", factor=[1,1,1,4])
    
    


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Rebin an image by the specified integer factors"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'factor': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'region': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'box': {'type': 'cStr', 'coerce': _coerce.to_str}, 'chans': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stokes': {'type': 'cStr', 'coerce': _coerce.to_str}, 'mask': {'type': 'cStr', 'coerce': _coerce.to_str}, 'dropdeg': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'stretch': {'type': 'cBool'}, 'crop': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 10 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __factor_dflt( self, glb ):
        return [ ]

    def __factor( self, glb ):
        if 'factor' in glb: return glb['factor']
        return [ ]

    def __mask_dflt( self, glb ):
        return ''

    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        return ''

    def __dropdeg_dflt( self, glb ):
        return False

    def __dropdeg( self, glb ):
        if 'dropdeg' in glb: return glb['dropdeg']
        return False

    def __stokes_dflt( self, glb ):
        return ''

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return ''

    def __region_dflt( self, glb ):
        return ''

    def __region( self, glb ):
        if 'region' in glb: return glb['region']
        return ''

    def __crop_dflt( self, glb ):
        return True

    def __crop( self, glb ):
        if 'crop' in glb: return glb['crop']
        return True

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __box_dflt( self, glb ):
        return ''

    def __box( self, glb ):
        if 'box' in glb: return glb['box']
        return ''

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __stretch_dflt( self, glb ):
        if self.__mask( glb ) != "": return bool(False)
        return None

    #--------- return subparam values -------------------------------------------------
    def __stretch( self, glb ):
        if 'stretch' in glb: return glb['stretch']
        dflt = self.__stretch_dflt( glb )
        if dflt is not None: return dflt
        return False

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Output image name.'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __factor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__factor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ ]
        description = 'Binning factors for each axis. Use imhead or ia.summary to determine axis ordering.'
        value = self.__factor( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'factor': value},{'factor': self.__schema['factor']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('factor',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __region_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__region_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Region selection. Default is to use the full image.'
        value = self.__region( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'region': value},{'region': self.__schema['region']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('region',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __box_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__box_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Rectangular region to select in direction plane. Default is to use the entire direction plane.'
        value = self.__box( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'box': value},{'box': self.__schema['box']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('box',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __chans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__chans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Channels to use. Default is to use all channels.'
        value = self.__chans( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('chans',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stokes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stokes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Stokes planes to use. Default is to use all Stokes planes. Stokes planes cannot be rebinned.'
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('stokes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __mask_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__mask_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Mask to use. Default is none.'
        value = self.__mask( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-10.10s =\x1B[0m %s%-23s%s' % ('mask',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __dropdeg_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dropdeg_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Drop degenerate axes?'
        value = self.__dropdeg( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dropdeg': value},{'dropdeg': self.__schema['dropdeg']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('dropdeg',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Overwrite the output if it exists? Default False'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stretch_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stretch_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__stretch_dflt( self.__globals_( ) ) is not None:
             description = 'Stretch the mask if necessary and possible?'
             value = self.__stretch( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stretch': value},{'stretch': self.__schema['stretch']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-7.7s =\x1B[0m %s%-23s%s' % ('stretch',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __crop_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__crop_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Remove pixels from the end of an axis to be rebinned if there are not enough to form an integral bin?'
        value = self.__crop( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'crop': value},{'crop': self.__schema['crop']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('crop',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'outfile' in glb: del glb['outfile']
        if 'mask' in glb: del glb['mask']
        if 'dropdeg' in glb: del glb['dropdeg']
        if 'stretch' in glb: del glb['stretch']
        if 'imagename' in glb: del glb['imagename']
        if 'factor' in glb: del glb['factor']
        if 'chans' in glb: del glb['chans']
        if 'region' in glb: del glb['region']
        if 'box' in glb: del glb['box']
        if 'overwrite' in glb: del glb['overwrite']
        if 'crop' in glb: del glb['crop']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# imrebin -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__outfile_inp( )
        self.__factor_inp( )
        self.__region_inp( )
        self.__box_inp( )
        self.__chans_inp( )
        self.__stokes_inp( )
        self.__mask_inp( )
        self.__dropdeg_inp( )
        self.__overwrite_inp( )
        self.__stretch_inp( )
        self.__crop_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "imrebin.last" if os.path.isfile("imrebin.last") else "imrebin.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('imrebin.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['factor'] = self.__factor( self.__globals_( ) )
        _invocation_parameters['region'] = self.__region( self.__globals_( ) )
        _invocation_parameters['box'] = self.__box( self.__globals_( ) )
        _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
        _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
        _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
        _invocation_parameters['dropdeg'] = self.__dropdeg( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
        _invocation_parameters['crop'] = self.__crop( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imrebin( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, outfile=None, factor=None, region=None, box=None, chans=None, stokes=None, mask=None, dropdeg=None, overwrite=None, stretch=None, crop=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imrebin.pre')
        _postfile = os.path.realpath('imrebin.last')
        task_result = None
        _arguments = [imagename,outfile,factor,region,box,chans,stokes,mask,dropdeg,overwrite,stretch,crop]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if outfile is not None: local_global['outfile'] = outfile
            if factor is not None: local_global['factor'] = factor
            if region is not None: local_global['region'] = region
            if box is not None: local_global['box'] = box
            if chans is not None: local_global['chans'] = chans
            if stokes is not None: local_global['stokes'] = stokes
            if mask is not None: local_global['mask'] = mask
            if dropdeg is not None: local_global['dropdeg'] = dropdeg
            if overwrite is not None: local_global['overwrite'] = overwrite
            if crop is not None: local_global['crop'] = crop

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['factor'] = self.__factor( local_global )
            _invocation_parameters['region'] = self.__region( local_global )
            _invocation_parameters['box'] = self.__box( local_global )
            _invocation_parameters['chans'] = self.__chans( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )
            _invocation_parameters['mask'] = self.__mask( local_global )
            _invocation_parameters['dropdeg'] = self.__dropdeg( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['crop'] = self.__crop( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['stretch'] = self.__stretch( _invocation_parameters ) if stretch is None else stretch

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['factor'] = self.__factor( self.__globals_( ) )
            _invocation_parameters['region'] = self.__region( self.__globals_( ) )
            _invocation_parameters['box'] = self.__box( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['dropdeg'] = self.__dropdeg( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
            _invocation_parameters['crop'] = self.__crop( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imrebin( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'imrebin', [ 'imagename=' + repr(_pc.document['imagename']), 'outfile=' + repr(_pc.document['outfile']), 'factor=' + repr(_pc.document['factor']), 'region=' + repr(_pc.document['region']), 'box=' + repr(_pc.document['box']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'mask=' + repr(_pc.document['mask']), 'dropdeg=' + repr(_pc.document['dropdeg']), 'overwrite=' + repr(_pc.document['overwrite']), 'stretch=' + repr(_pc.document['stretch']), 'crop=' + repr(_pc.document['crop']) ] )
            task_result = _imrebin_t( _pc.document['imagename'],_pc.document['outfile'],_pc.document['factor'],_pc.document['region'],_pc.document['box'],_pc.document['chans'],_pc.document['stokes'],_pc.document['mask'],_pc.document['dropdeg'],_pc.document['overwrite'],_pc.document['stretch'],_pc.document['crop'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('imrebin')
            casalog.post("Exception Reported: Error in imrebin: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'imrebin', task_result )

        #Added if _imrebin_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

imrebin = _imrebin( )


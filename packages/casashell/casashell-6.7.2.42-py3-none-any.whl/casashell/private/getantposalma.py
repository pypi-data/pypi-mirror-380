##################### generated by xml-casa (v2) from getantposalma.xml #############
##################### c1b22393e97d7e964cf86abb779824cc ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_getantposalma import getantposalma as _getantposalma_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _getantposalma:
    """
    getantposalma ---- Retrieve antenna positions by querying ALMA web service.

    
    Query an ALMA-specific web service and retrieves antenna positions. The positions
    retrieved can faill within a specified time window, be greater than a specified
    signal-to-noise level, etc. The task writes this data to a specified output file.
    This file can then be read by gaincal to apply antenna position corrections.
    

    --------- parameter descriptions ---------------------------------------------

    outfile   Name of output file to which to write antenna positions. If a file by this name already exists, it will be silently overwritten. The written file will be in JSON format.
              default: none
              Example: outfile='my_alma_antenna_positions.json'
    overwrite file by the same name if it exists? If False and a file
              with the same name exists, and exception will be thrown.
    asdm      The associated ASDM UID. The ASDM is not required to be on the file system; this value is simply passed to the web service.
              default: ''
              Example:asdm='uid://A002/X10ac6bc/X896d'
    tw        Optional time window in which to consider baseline measurements in the database, when calculating the antenna positions. Format is of the form begin_time,end_time, where times must be specified in YYYY-MM-DDThh:mm:ss.sss format and end_time must be later than begin time. Times should be UTC.
              Example: tw='2023-03-14T00:40:20,2023-03-20T17:58:20'
    snr       Optional signal-to-noise. Must be either "default" or a non-negative number. Antenna positions which have corrections with S/N less than this value will not be retrieved nor written. If not specified, the default value used by the web service will be used, and that may change over time.
              default: "default" (the current default value as defined by the web service will be used) 
              Example: snr=5.0
    search    Search algorithm to use. Supported values are "both_latest" and "both_closest". For "both_latest", the last updated position for each antenna within 30 days after the observation will be returned, taking into account snr if specified. If provided, tw will override the 30 day default value. For "both_closest", the position of each antenna closest in time to the observation, within 30 days (before or after the observation) will be returned, subject to the value of snr if it is specified. If specified, the value of tw will override the default 30 days. The default algorithm to use will be "both_latest".
              Example: search="both_closest"
    hosts     Priority-ranked list of hosts to query to obtain positions. Only one server that returns a list of antenna positions is required. That response will be written and no additional hosts will be queried.
              Example: hosts=["server1.alma.cl", "server2.alma.cl"]
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Retrieve antenna positions by querying ALMA web service."""

    __schema = {'outfile': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'overwrite': {'type': 'cBool'}, 'asdm': {'type': 'cStr', 'coerce': _coerce.to_str}, 'tw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'snr': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'search': {'type': 'cStr', 'coerce': _coerce.to_str}, 'hosts': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 9 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __snr_dflt( self, glb ):
        return 'default'

    def __snr( self, glb ):
        if 'snr' in glb: return glb['snr']
        return 'default'

    def __hosts_dflt( self, glb ):
        return [ 'https://asa.alma.cl/uncertainties-service/uncertainties/versions/last/measurements/casa/' ]

    def __hosts( self, glb ):
        if 'hosts' in glb: return glb['hosts']
        return [ 'https://asa.alma.cl/uncertainties-service/uncertainties/versions/last/measurements/casa/' ]

    def __tw_dflt( self, glb ):
        return ''

    def __tw( self, glb ):
        if 'tw' in glb: return glb['tw']
        return ''

    def __search_dflt( self, glb ):
        return 'both_latest'

    def __search( self, glb ):
        if 'search' in glb: return glb['search']
        return 'both_latest'

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __asdm_dflt( self, glb ):
        return ''

    def __asdm( self, glb ):
        if 'asdm' in glb: return glb['asdm']
        return ''

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of output file to which to write retrieved antenna positions.'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Overwrite a file by the same name if it exists?'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __asdm_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__asdm_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'The associated ASDM UID.'
        value = self.__asdm( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'asdm': value},{'asdm': self.__schema['asdm']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('asdm',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __tw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__tw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Optional time window in which to consider baseline measurements in the database, when calculating the antenna positions.'
        value = self.__tw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'tw': value},{'tw': self.__schema['tw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('tw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __snr_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__snr_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'default'
        description = 'Optional signal-to-noise. Must be either "default" or a non-negative number.'
        value = self.__snr( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'snr': value},{'snr': self.__schema['snr']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('snr',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __search_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__search_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'both_latest'
        description = 'Search algorithm to use.'
        value = self.__search( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'search': value},{'search': self.__schema['search']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('search',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __hosts_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__hosts_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ 'https://asa.alma.cl/uncertainties-service/uncertainties/versions/last/measurements/casa/' ]
        description = 'Priority-ranked list of hosts to query.'
        value = self.__hosts( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'hosts': value},{'hosts': self.__schema['hosts']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('hosts',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'outfile' in glb: del glb['outfile']
        if 'hosts' in glb: del glb['hosts']
        if 'tw' in glb: del glb['tw']
        if 'snr' in glb: del glb['snr']
        if 'overwrite' in glb: del glb['overwrite']
        if 'asdm' in glb: del glb['asdm']
        if 'search' in glb: del glb['search']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# getantposalma -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__outfile_inp( )
        self.__overwrite_inp( )
        self.__asdm_inp( )
        self.__tw_inp( )
        self.__snr_inp( )
        self.__search_inp( )
        self.__hosts_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "getantposalma.last" if os.path.isfile("getantposalma.last") else "getantposalma.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('getantposalma.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['asdm'] = self.__asdm( self.__globals_( ) )
        _invocation_parameters['tw'] = self.__tw( self.__globals_( ) )
        _invocation_parameters['snr'] = self.__snr( self.__globals_( ) )
        _invocation_parameters['search'] = self.__search( self.__globals_( ) )
        _invocation_parameters['hosts'] = self.__hosts( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#getantposalma( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, outfile=None, overwrite=None, asdm=None, tw=None, snr=None, search=None, hosts=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('getantposalma.pre')
        _postfile = os.path.realpath('getantposalma.last')
        task_result = None
        _arguments = [outfile,overwrite,asdm,tw,snr,search,hosts]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if outfile is not None: local_global['outfile'] = outfile
            if overwrite is not None: local_global['overwrite'] = overwrite
            if asdm is not None: local_global['asdm'] = asdm
            if tw is not None: local_global['tw'] = tw
            if snr is not None: local_global['snr'] = snr
            if search is not None: local_global['search'] = search
            if hosts is not None: local_global['hosts'] = hosts

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['asdm'] = self.__asdm( local_global )
            _invocation_parameters['tw'] = self.__tw( local_global )
            _invocation_parameters['snr'] = self.__snr( local_global )
            _invocation_parameters['search'] = self.__search( local_global )
            _invocation_parameters['hosts'] = self.__hosts( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['asdm'] = self.__asdm( self.__globals_( ) )
            _invocation_parameters['tw'] = self.__tw( self.__globals_( ) )
            _invocation_parameters['snr'] = self.__snr( self.__globals_( ) )
            _invocation_parameters['search'] = self.__search( self.__globals_( ) )
            _invocation_parameters['hosts'] = self.__hosts( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#getantposalma( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'getantposalma', [ 'outfile=' + repr(_pc.document['outfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'asdm=' + repr(_pc.document['asdm']), 'tw=' + repr(_pc.document['tw']), 'snr=' + repr(_pc.document['snr']), 'search=' + repr(_pc.document['search']), 'hosts=' + repr(_pc.document['hosts']) ] )
            task_result = _getantposalma_t( _pc.document['outfile'],_pc.document['overwrite'],_pc.document['asdm'],_pc.document['tw'],_pc.document['snr'],_pc.document['search'],_pc.document['hosts'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('getantposalma')
            casalog.post("Exception Reported: Error in getantposalma: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'getantposalma', task_result )

        #Added if _getantposalma_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

getantposalma = _getantposalma( )


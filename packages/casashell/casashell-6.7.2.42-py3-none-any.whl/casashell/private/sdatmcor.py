##################### generated by xml-casa (v2) from sdatmcor.xml ##################
##################### e8ee8b38fa0a4cd83c694ea0c3a33a00 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_sdatmcor import sdatmcor as _sdatmcor_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _sdatmcor:
    """
    sdatmcor ---- Offline correction of residual atmospheric features

    
    
    The task sdatmcor provides the capability of offline correction of
    residual atmospheric features in the calibrated single-dish spectra
    which result from the difference of elevation angle between ON_SOURCE
    and OFF_SOURCE measurements.
    
    The correction factor is derived from the atmosphere model based on
    the atmospheric properties (temperature, pressure, etc.) measured
    during the observation. The model is constructed by the atmosphere
    (at) tool.
    
    For spw selection, two selection parameters, spw and outputspw,
    are available. The former specifies the data to be
    corrected while the latter corresponds to the spw for output.
    In practice, intersection of spw and outputspw is corrected.
    For example, when spw='19,23' and outputspw='19', spw 23 is not
    corrected because data for spw 23 is not written to outfile so
    that the correction is not meaningful.
    For data selection parameters other than spw,  only data selected
    by data selection parameters are corrected and written to the outfile.
    
    Note that outfile will have the data column DATA regardless of
    what data column exists in infile.

    --------- parameter descriptions ---------------------------------------------

    infile           name of input MS.
    datacolumn       name of data column to be used ["data", "float_data", or "corrected"]
    outfile          name of output MS.
    overwrite        allow to overwrite the output file if already exists.
    field            Select fields. Use field id(s) or name(s).
                     
                     If field string is a non-negative integer, it is assumed to
                     be a field index otherwise, it is assumed to be a field name.
                     
                     Default: ''= all fields
                     
                     Example:
                       field='0~2'; field ids 0,1,2
                       field='0,4,5~7'; field ids 0,4,5,6,7
                       field='3C286,3C295'; field named 3C286 and 3C295
                       field = '3,4C*'; field id 3, all names starting with 4C
    spw              Select spectral windows
                     
                     Note that spw specifies the list of spw ids to apply correction.
                     Spw ids to output should be specified by outputspw.
                     
                     Note also that channel selection is not available for this task.
                     
                     Default: ''=all spectral windows
                     Example:
                        spw='0~2,4'; spectral windows 0,1,2,4
                        spw='<2';   spectral windows less than 2 (i.e. 0,1)
                        spw='0,10'; spw 0,10
    scan             Scan number range
                     
                     Default: '' (all)
                     Example: scan='1~5'
    antenna          Select data based on antenna/baseline
                     
                     If antenna string is a non-negative integer, it is
                     assumed to be an antenna index, otherwise, it is
                     considered an antenna name.
                     
                     If specified selection doesn't contain any autocorrelation,
                     the selection will be tweaked to include autocorrelation data.
                     For example, 'PM02' will be interpreted as 'PM02&&&'.
                     
                     Default: '' (all)
                     Example:
                     antenna='5&6'; baseline between antenna index 5 and
                                   index 6.
                     antenna='VA05&VA06'; baseline between VLA antenna 5
                                         and 6.
                     antenna='5&6;7&8'; baselines 5-6 and 7-8
                     antenna='5'; all baselines with antenna index 5
                     antenna='05'; all baselines with antenna number 05
                                  (VLA old name)
                     antenna='5,6,9'; all baselines with antennas 5,6,9
                                     index number
    correlation      Correlation (polarization) types or expression
                     
                     Default: '' (all correlations)
                     Example: correlation='XX,YY'
    timerange        Range of time to select from data
                     
                     timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
                     Note: if YYYY/MM/DD is missing date defaults to first
                           day in data set
                     
                     Default: '' (all)
                     Example:
                     timerange='09:14:0~09:54:0' picks 40 min on first day
                     timerange='25:00:00~27:30:00' picks 1 hr to 3 hr
                               30min on NEXT day
                     timerange='09:44:00' pick data within one integration
                               of time
                     timerange='> 10:24:00' data after this time
    intent           Scan Intent(s)
                     
                     Default: '' (all)
                     Example:
                     intent='TARGET_SOURCE'
                     intent='TARGET_SOURCE1,TARGET_SOURCE2'
                     intent='TARGET_POINTING*'
    observation      Observation ID range
                     
                     Default: '' (all observations)
                     Example: observation='0~5'
    feed             feed selection
                     
                     Default: '' (all feeds)
                     Example: feed='0,1'
    msselect         Complicated data selection using TaQL
                     
                     Complicated data selection that cannot be supported by other
                     data selection parameters should be specified here using TaQL.
                     See Casacore Note 199 for detailed syntax of TaQL:
                     
                       https://casacore.github.io/casacore-notes/199.html
                     
                     Default: '' (all data)
                     Example:
                     msselect='ABS(DATA) < 1 && ANTENNA1 == ANTENNA2 + 1'
                     msselect='ROWNUMBER() < 100'
    outputspw        select spws to output, same syntax of spw.("" = all)
                     
                     Note that outputspw specifies the list of spw ids to output.
                     Spw ids to be corrected should be specified by spw.
                     
                     Note also that channel selection is not available for this task.
    gainfactor       Gain factor to multiply correction term.
                     
                     In ALMA data reduction, intensity of calibrated spectra, antenna
                     temperature Ta* in unit of Kelvin, is converted to Jansky (Jy)
                     by multiplying conversion factor. This parameter is intended to
                     apply exactly the same multiplicative factor to correction term.
                     If no conversion is applied to spectral data, gainfactor should
                     be 1.0, which means that the correction is in unit of Ta*.
                     The value can be float, dict, or string. Default is 1.0.
                     
                     Float value is interpreted as fixed factor, which is applied to all spws.
                     
                     Dict should be the pair of spw id (key) and the factor to be applied (value).
                     Key should be string rather than int.
                     
                     If string is given, it should be the name of caltable. For caltable,
                     inverse square of stored value is applied.
                     
                     Default: 1.0
                     Example: 10.0
                              {'17': 45.0, '19': 43.5, '21': 42.0, '23': 40.0}
                              'k2jycal.tbl'
    dtem_dh          temperature gradient [K/km], e.g. -5.6. ("" = Tool default)
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in K/km. String value should be the numeric value with unit
                     such as '-5.6K/km'.
                     
                     Default: '' (tool default, -5.6K/km, is used)
    h0               scale height for water [km], e.g. 2.0. ("" = Tool default)
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in kilometer. String value should be the numeric value with
                     unit compatible with length, such as '2km' or '2000m'.
    atmtype          Atmospheric type.
                     The value is directly passed to initialization method for ATM model.
                     The type should be specified as integer. Available options are,
                     
                       1: tropical
                       2: mid latitude summer (default)
                       3: mid latitude winter
                       4: subarctic summer
                       5: subarctic winter
    atmdetail        Expose parameters for detailed configuration of ATM model if True.
                     
                     The following parameters are exposed to the user if atmdetail is True:
                     
                       altitude
                       temperature
                       pressure
                       humidity
                       pwv
                       dp
                       dpm
                       layerboundaries
                       layertemperature
    altitude         Site altitude [m].
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in meter. String value should be the numeric value with
                     unit compatible with length, such as '5km' or '5000m'.
                     
                     Default value is taken from the input MS (ANTENNA table).
    temperature      Ambient temperature [K].
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in Kelvin. String value should be the numeric value with
                     unit, such as '270K'.
                     
                     Default value is taken from the input MS (ASDM_CALATMOSPHERE table).
    pressure         Ambient pressure [mbar].
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in mbar. String value should be the numeric value with
                     unit compatible with pressure, such as '1000mbar' or '1000hPa'.
                     
                     Default value is taken from the input MS (ASDM_CALATMOSPHERE table).
    humidity         Relative humidity [percent].
                     
                     If the value is explicitly specified, it should range from 0 to 100.
                     
                     Default value (-1) indicates that the value is taken from the input MS
                     (ASDM_CALATMOSPHERE table).
    pwv              Zenith water vapor [mm].
                     
                     The value is directly passed to configuration method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in millimeter. String value should be the numeric value with
                     the unit compatible with length, such as '0.3mm'
                     
                     Default value is taken from the input MS (ASDM_CALWVR table).
    dp               Initial pressure step.
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in mbar. String value should be the numeric value with
                     unit compatible with pressure, such as '10mbar' or '10hPa'.
                     
                     Default value ('') indicates to use tool default (10mbar).
    dpm              Pressure multiplicative factor for steps.
                     
                     The value is directly passed to initialization method for ATM model.
                     Default value (-1) indicates to use tool default (1.2).
    layerboundaries  Altitude of user-defined temperature profile.
                     
                     The value is directly passed to initialization method for ATM model.
                     String, list of strings, and list of float values are acceptable.
                     
                     For list inputs, float values are interpreted as the value in meter
                     while the string values should be the numeric value with the unit
                     compatible with length.
                     
                     For string input, the value should be comma separated list of
                     strings consisting of numeric value and the unit compatible with
                     length.
                     
                     Number of values should be identical to the number for layertemperature.
                     
                     Default value ('') indicates to use tool default.
                     
                     Example: [1000, 2000]
                              ['1km', '2km']
                              '1km,2km'
    layertemperature User-defined temperature profile [K].
                     
                     The value is directly passed to initialization method for ATM model.
                     String, list of strings, and list of float values are acceptable.
                     
                     For list inputs, float values are interpreted as the value in Kelvin
                     while the string values should be the numeric value with unit.
                     
                     For string input, the value should be comma separated list of
                     strings consisting of numeric value and unit.
                     
                     Number of values should be identical to the number for layerboundaries.
                     
                     Example: [250, 240]
                              ['250K', '240K']
                              '250K,240K'

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """single dish"""
    _info_desc_ = """Offline correction of residual atmospheric features"""

    __schema = {'infile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'datacolumn': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'data', 'float_data', 'corrected' ]}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'antenna': {'type': 'cStr', 'coerce': _coerce.to_str}, 'correlation': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'intent': {'type': 'cStr', 'coerce': _coerce.to_str}, 'observation': {'type': 'cStr', 'coerce': _coerce.to_str}, 'feed': {'type': 'cStr', 'coerce': _coerce.to_str}, 'msselect': {'type': 'cStr', 'coerce': _coerce.to_str}, 'outputspw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'gainfactor': {'anyof': [{'type': 'cFloat', 'coerce': _coerce.to_float}, {'type': 'cDict'}, {'type': 'cStr', 'coerce': _coerce.to_str}]}, 'dtem_dh': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'h0': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'atmtype': {'type': 'cInt'}, 'atmdetail': {'type': 'cBool'}, 'altitude': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'temperature': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'pressure': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'humidity': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'pwv': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'dp': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'dpm': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'layerboundaries': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}]}, 'layertemperature': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 19 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __feed_dflt( self, glb ):
        return ''

    def __feed( self, glb ):
        if 'feed' in glb: return glb['feed']
        return ''

    def __h0_dflt( self, glb ):
        return ''

    def __h0( self, glb ):
        if 'h0' in glb: return glb['h0']
        return ''

    def __correlation_dflt( self, glb ):
        return ''

    def __correlation( self, glb ):
        if 'correlation' in glb: return glb['correlation']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __dtem_dh_dflt( self, glb ):
        return ''

    def __dtem_dh( self, glb ):
        if 'dtem_dh' in glb: return glb['dtem_dh']
        return ''

    def __datacolumn_dflt( self, glb ):
        return 'data'

    def __datacolumn( self, glb ):
        if 'datacolumn' in glb: return glb['datacolumn']
        return 'data'

    def __atmdetail_dflt( self, glb ):
        return False

    def __atmdetail( self, glb ):
        if 'atmdetail' in glb: return glb['atmdetail']
        return False

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __observation_dflt( self, glb ):
        return ''

    def __observation( self, glb ):
        if 'observation' in glb: return glb['observation']
        return ''

    def __scan_dflt( self, glb ):
        return ''

    def __scan( self, glb ):
        if 'scan' in glb: return glb['scan']
        return ''

    def __gainfactor_dflt( self, glb ):
        return float(1.0)

    def __gainfactor( self, glb ):
        if 'gainfactor' in glb: return glb['gainfactor']
        return float(1.0)

    def __timerange_dflt( self, glb ):
        return ''

    def __timerange( self, glb ):
        if 'timerange' in glb: return glb['timerange']
        return ''

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __atmtype_dflt( self, glb ):
        return int(2)

    def __atmtype( self, glb ):
        if 'atmtype' in glb: return glb['atmtype']
        return int(2)

    def __antenna_dflt( self, glb ):
        return ''

    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        return ''

    def __intent_dflt( self, glb ):
        return ''

    def __intent( self, glb ):
        if 'intent' in glb: return glb['intent']
        return ''

    def __infile_dflt( self, glb ):
        return ''

    def __infile( self, glb ):
        if 'infile' in glb: return glb['infile']
        return ''

    def __msselect_dflt( self, glb ):
        return ''

    def __msselect( self, glb ):
        if 'msselect' in glb: return glb['msselect']
        return ''

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False

    def __outputspw_dflt( self, glb ):
        return ''

    def __outputspw( self, glb ):
        if 'outputspw' in glb: return glb['outputspw']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __altitude_dflt( self, glb ):
        if self.__atmdetail( glb ) == bool(True): return ""
        return None
    def __pressure_dflt( self, glb ):
        if self.__atmdetail( glb ) == bool(True): return ""
        return None
    def __dpm_dflt( self, glb ):
        if self.__atmdetail( glb ) == bool(True): return float(-1)
        return None
    def __layerboundaries_dflt( self, glb ):
        if self.__atmdetail( glb ) == bool(True): return ""
        return None
    def __temperature_dflt( self, glb ):
        if self.__atmdetail( glb ) == bool(True): return ""
        return None
    def __humidity_dflt( self, glb ):
        if self.__atmdetail( glb ) == bool(True): return float(-1)
        return None
    def __layertemperature_dflt( self, glb ):
        if self.__atmdetail( glb ) == bool(True): return ""
        return None
    def __pwv_dflt( self, glb ):
        if self.__atmdetail( glb ) == bool(True): return ""
        return None
    def __dp_dflt( self, glb ):
        if self.__atmdetail( glb ) == bool(True): return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __altitude( self, glb ):
        if 'altitude' in glb: return glb['altitude']
        dflt = self.__altitude_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __temperature( self, glb ):
        if 'temperature' in glb: return glb['temperature']
        dflt = self.__temperature_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __pressure( self, glb ):
        if 'pressure' in glb: return glb['pressure']
        dflt = self.__pressure_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __humidity( self, glb ):
        if 'humidity' in glb: return glb['humidity']
        dflt = self.__humidity_dflt( glb )
        if dflt is not None: return dflt
        return float(-1)
    def __pwv( self, glb ):
        if 'pwv' in glb: return glb['pwv']
        dflt = self.__pwv_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __dp( self, glb ):
        if 'dp' in glb: return glb['dp']
        dflt = self.__dp_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __dpm( self, glb ):
        if 'dpm' in glb: return glb['dpm']
        dflt = self.__dpm_dflt( glb )
        if dflt is not None: return dflt
        return float(-1)
    def __layerboundaries( self, glb ):
        if 'layerboundaries' in glb: return glb['layerboundaries']
        dflt = self.__layerboundaries_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __layertemperature( self, glb ):
        if 'layertemperature' in glb: return glb['layertemperature']
        dflt = self.__layertemperature_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __infile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__infile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'name of input MS.'
        value = self.__infile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'infile': value},{'infile': self.__schema['infile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('infile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __datacolumn_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__datacolumn_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'data'
        description = 'name of data column to be used ["data", "float_data", or "corrected"]'
        value = self.__datacolumn( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'datacolumn': value},{'datacolumn': self.__schema['datacolumn']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('datacolumn',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'name of output MS.'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'allow to overwrite the output file if already exists.'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __field_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__field_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'field(s) to select'
        value = self.__field( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'spws to select'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __scan_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__scan_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Scan number range'
        value = self.__scan( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'scan': value},{'scan': self.__schema['scan']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('scan',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __antenna_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__antenna_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select data based on antenna'
        value = self.__antenna( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('antenna',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __correlation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__correlation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Correlation (polarization) types or expression'
        value = self.__correlation( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'correlation': value},{'correlation': self.__schema['correlation']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('correlation',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __timerange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__timerange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Range of time to select from data'
        value = self.__timerange( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'timerange': value},{'timerange': self.__schema['timerange']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('timerange',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __intent_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__intent_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Scan Intent(s)'
        value = self.__intent( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'intent': value},{'intent': self.__schema['intent']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('intent',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __observation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__observation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Observation ID range'
        value = self.__observation( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'observation': value},{'observation': self.__schema['observation']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('observation',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __feed_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__feed_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'feed selection'
        value = self.__feed( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'feed': value},{'feed': self.__schema['feed']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('feed',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __msselect_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__msselect_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Complicated data selection using TaQL'
        value = self.__msselect( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'msselect': value},{'msselect': self.__schema['msselect']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('msselect',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outputspw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outputspw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'select spws to output, same syntax of spw.("" = all)'
        value = self.__outputspw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outputspw': value},{'outputspw': self.__schema['outputspw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('outputspw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __gainfactor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__gainfactor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(1.0)
        description = 'Gain factor to multiply correction term'
        value = self.__gainfactor( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'gainfactor': value},{'gainfactor': self.__schema['gainfactor']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('gainfactor',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __dtem_dh_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dtem_dh_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'temperature gradient [K/km], e.g. -5.6. ("" = Tool default)'
        value = self.__dtem_dh( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dtem_dh': value},{'dtem_dh': self.__schema['dtem_dh']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('dtem_dh',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __h0_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__h0_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'scale height for water [km], e.g. 2.0. ("" = Tool default)'
        value = self.__h0( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'h0': value},{'h0': self.__schema['h0']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('h0',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __atmtype_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__atmtype_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(2)
        description = 'Specify atmtype as integer. Options are 1: tropical, 2: mid latitude summer, 3: mid latitude winter, 4: subarctic summer, 5: subarctic winter'
        value = self.__atmtype( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'atmtype': value},{'atmtype': self.__schema['atmtype']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-19.19s = %s%-23s%s' % ('atmtype',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __atmdetail_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__atmdetail_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Expose sub-parameters if True.'
        value = self.__atmdetail( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'atmdetail': value},{'atmdetail': self.__schema['atmdetail']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-19.19s =\x1B[0m %s%-23s%s' % ('atmdetail',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __altitude_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__altitude_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__altitude_dflt( self.__globals_( ) ) is not None:
             description = 'Site altitude [m]. ("" = value from MS.)'
             value = self.__altitude( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'altitude': value},{'altitude': self.__schema['altitude']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-16.16s =\x1B[0m %s%-23s%s' % ('altitude',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __temperature_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__temperature_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__temperature_dflt( self.__globals_( ) ) is not None:
             description = 'Ambient temperature [K]. ("" = value from MS.)'
             value = self.__temperature( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'temperature': value},{'temperature': self.__schema['temperature']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-16.16s =\x1B[0m %s%-23s%s' % ('temperature',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __pressure_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__pressure_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__pressure_dflt( self.__globals_( ) ) is not None:
             description = 'Ambient pressure [mbar]. ("" = value from MS.)'
             value = self.__pressure( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'pressure': value},{'pressure': self.__schema['pressure']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-16.16s =\x1B[0m %s%-23s%s' % ('pressure',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __humidity_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__humidity_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(-1)
        if self.__humidity_dflt( self.__globals_( ) ) is not None:
             description = 'Relative humidity [percent]. -1 or the value (0.0 - 100.0) (-1 = Tool default)'
             value = self.__humidity( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'humidity': value},{'humidity': self.__schema['humidity']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-16.16s =\x1B[0m %s%-23s%s' % ('humidity',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __pwv_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__pwv_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__pwv_dflt( self.__globals_( ) ) is not None:
             description = 'Zenith water vapor [mm]. ("" = Tool default)'
             value = self.__pwv( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'pwv': value},{'pwv': self.__schema['pwv']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-16.16s =\x1B[0m %s%-23s%s' % ('pwv',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __dp_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dp_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__dp_dflt( self.__globals_( ) ) is not None:
             description = 'Initial pressure step [mbar].("" = Tool default)'
             value = self.__dp( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dp': value},{'dp': self.__schema['dp']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-16.16s =\x1B[0m %s%-23s%s' % ('dp',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __dpm_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dpm_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(-1)
        if self.__dpm_dflt( self.__globals_( ) ) is not None:
             description = 'Pressure multiplicative factor for steps. (-1 = Tool default)'
             value = self.__dpm( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dpm': value},{'dpm': self.__schema['dpm']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-16.16s =\x1B[0m %s%-23s%s' % ('dpm',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __layerboundaries_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__layerboundaries_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__layerboundaries_dflt( self.__globals_( ) ) is not None:
             description = 'Altitude of user-defined temperature profile [m]. ("" = Tool default)'
             value = self.__layerboundaries( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'layerboundaries': value},{'layerboundaries': self.__schema['layerboundaries']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-16.16s =\x1B[0m %s%-23s%s' % ('layerboundaries',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __layertemperature_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__layertemperature_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__layertemperature_dflt( self.__globals_( ) ) is not None:
             description = 'User-defined temperature profile [K]. ("" = Tool default)'
             value = self.__layertemperature( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'layertemperature': value},{'layertemperature': self.__schema['layertemperature']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-16.16s =\x1B[0m %s%-23s%s' % ('layertemperature',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'antenna' in glb: del glb['antenna']
        if 'altitude' in glb: del glb['altitude']
        if 'infile' in glb: del glb['infile']
        if 'outfile' in glb: del glb['outfile']
        if 'pressure' in glb: del glb['pressure']
        if 'dpm' in glb: del glb['dpm']
        if 'field' in glb: del glb['field']
        if 'datacolumn' in glb: del glb['datacolumn']
        if 'msselect' in glb: del glb['msselect']
        if 'intent' in glb: del glb['intent']
        if 'layerboundaries' in glb: del glb['layerboundaries']
        if 'temperature' in glb: del glb['temperature']
        if 'scan' in glb: del glb['scan']
        if 'dtem_dh' in glb: del glb['dtem_dh']
        if 'h0' in glb: del glb['h0']
        if 'atmdetail' in glb: del glb['atmdetail']
        if 'humidity' in glb: del glb['humidity']
        if 'layertemperature' in glb: del glb['layertemperature']
        if 'pwv' in glb: del glb['pwv']
        if 'correlation' in glb: del glb['correlation']
        if 'outputspw' in glb: del glb['outputspw']
        if 'feed' in glb: del glb['feed']
        if 'overwrite' in glb: del glb['overwrite']
        if 'observation' in glb: del glb['observation']
        if 'gainfactor' in glb: del glb['gainfactor']
        if 'atmtype' in glb: del glb['atmtype']
        if 'spw' in glb: del glb['spw']
        if 'timerange' in glb: del glb['timerange']
        if 'dp' in glb: del glb['dp']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# sdatmcor -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__infile_inp( )
        self.__datacolumn_inp( )
        self.__outfile_inp( )
        self.__overwrite_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__scan_inp( )
        self.__antenna_inp( )
        self.__correlation_inp( )
        self.__timerange_inp( )
        self.__intent_inp( )
        self.__observation_inp( )
        self.__feed_inp( )
        self.__msselect_inp( )
        self.__outputspw_inp( )
        self.__gainfactor_inp( )
        self.__dtem_dh_inp( )
        self.__h0_inp( )
        self.__atmtype_inp( )
        self.__atmdetail_inp( )
        self.__altitude_inp( )
        self.__temperature_inp( )
        self.__pressure_inp( )
        self.__humidity_inp( )
        self.__pwv_inp( )
        self.__dp_inp( )
        self.__dpm_inp( )
        self.__layerboundaries_inp( )
        self.__layertemperature_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "sdatmcor.last" if os.path.isfile("sdatmcor.last") else "sdatmcor.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('sdatmcor.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['infile'] = self.__infile( self.__globals_( ) )
        _invocation_parameters['datacolumn'] = self.__datacolumn( self.__globals_( ) )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['field'] = self.__field( self.__globals_( ) )
        _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
        _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
        _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
        _invocation_parameters['correlation'] = self.__correlation( self.__globals_( ) )
        _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
        _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
        _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
        _invocation_parameters['feed'] = self.__feed( self.__globals_( ) )
        _invocation_parameters['msselect'] = self.__msselect( self.__globals_( ) )
        _invocation_parameters['outputspw'] = self.__outputspw( self.__globals_( ) )
        _invocation_parameters['gainfactor'] = self.__gainfactor( self.__globals_( ) )
        _invocation_parameters['dtem_dh'] = self.__dtem_dh( self.__globals_( ) )
        _invocation_parameters['h0'] = self.__h0( self.__globals_( ) )
        _invocation_parameters['atmtype'] = self.__atmtype( self.__globals_( ) )
        _invocation_parameters['atmdetail'] = self.__atmdetail( self.__globals_( ) )
        _invocation_parameters['altitude'] = self.__altitude( self.__globals_( ) )
        _invocation_parameters['temperature'] = self.__temperature( self.__globals_( ) )
        _invocation_parameters['pressure'] = self.__pressure( self.__globals_( ) )
        _invocation_parameters['humidity'] = self.__humidity( self.__globals_( ) )
        _invocation_parameters['pwv'] = self.__pwv( self.__globals_( ) )
        _invocation_parameters['dp'] = self.__dp( self.__globals_( ) )
        _invocation_parameters['dpm'] = self.__dpm( self.__globals_( ) )
        _invocation_parameters['layerboundaries'] = self.__layerboundaries( self.__globals_( ) )
        _invocation_parameters['layertemperature'] = self.__layertemperature( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-16s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#sdatmcor( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, infile=None, datacolumn=None, outfile=None, overwrite=None, field=None, spw=None, scan=None, antenna=None, correlation=None, timerange=None, intent=None, observation=None, feed=None, msselect=None, outputspw=None, gainfactor=None, dtem_dh=None, h0=None, atmtype=None, atmdetail=None, altitude=None, temperature=None, pressure=None, humidity=None, pwv=None, dp=None, dpm=None, layerboundaries=None, layertemperature=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('sdatmcor.pre')
        _postfile = os.path.realpath('sdatmcor.last')
        task_result = None
        _arguments = [infile,datacolumn,outfile,overwrite,field,spw,scan,antenna,correlation,timerange,intent,observation,feed,msselect,outputspw,gainfactor,dtem_dh,h0,atmtype,atmdetail,altitude,temperature,pressure,humidity,pwv,dp,dpm,layerboundaries,layertemperature]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if infile is not None: local_global['infile'] = infile
            if datacolumn is not None: local_global['datacolumn'] = datacolumn
            if outfile is not None: local_global['outfile'] = outfile
            if overwrite is not None: local_global['overwrite'] = overwrite
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if scan is not None: local_global['scan'] = scan
            if antenna is not None: local_global['antenna'] = antenna
            if correlation is not None: local_global['correlation'] = correlation
            if timerange is not None: local_global['timerange'] = timerange
            if intent is not None: local_global['intent'] = intent
            if observation is not None: local_global['observation'] = observation
            if feed is not None: local_global['feed'] = feed
            if msselect is not None: local_global['msselect'] = msselect
            if outputspw is not None: local_global['outputspw'] = outputspw
            if gainfactor is not None: local_global['gainfactor'] = gainfactor
            if dtem_dh is not None: local_global['dtem_dh'] = dtem_dh
            if h0 is not None: local_global['h0'] = h0
            if atmtype is not None: local_global['atmtype'] = atmtype
            if atmdetail is not None: local_global['atmdetail'] = atmdetail

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['infile'] = self.__infile( local_global )
            _invocation_parameters['datacolumn'] = self.__datacolumn( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['scan'] = self.__scan( local_global )
            _invocation_parameters['antenna'] = self.__antenna( local_global )
            _invocation_parameters['correlation'] = self.__correlation( local_global )
            _invocation_parameters['timerange'] = self.__timerange( local_global )
            _invocation_parameters['intent'] = self.__intent( local_global )
            _invocation_parameters['observation'] = self.__observation( local_global )
            _invocation_parameters['feed'] = self.__feed( local_global )
            _invocation_parameters['msselect'] = self.__msselect( local_global )
            _invocation_parameters['outputspw'] = self.__outputspw( local_global )
            _invocation_parameters['gainfactor'] = self.__gainfactor( local_global )
            _invocation_parameters['dtem_dh'] = self.__dtem_dh( local_global )
            _invocation_parameters['h0'] = self.__h0( local_global )
            _invocation_parameters['atmtype'] = self.__atmtype( local_global )
            _invocation_parameters['atmdetail'] = self.__atmdetail( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['altitude'] = self.__altitude( _invocation_parameters ) if altitude is None else altitude
            _invocation_parameters['temperature'] = self.__temperature( _invocation_parameters ) if temperature is None else temperature
            _invocation_parameters['pressure'] = self.__pressure( _invocation_parameters ) if pressure is None else pressure
            _invocation_parameters['humidity'] = self.__humidity( _invocation_parameters ) if humidity is None else humidity
            _invocation_parameters['pwv'] = self.__pwv( _invocation_parameters ) if pwv is None else pwv
            _invocation_parameters['dp'] = self.__dp( _invocation_parameters ) if dp is None else dp
            _invocation_parameters['dpm'] = self.__dpm( _invocation_parameters ) if dpm is None else dpm
            _invocation_parameters['layerboundaries'] = self.__layerboundaries( _invocation_parameters ) if layerboundaries is None else layerboundaries
            _invocation_parameters['layertemperature'] = self.__layertemperature( _invocation_parameters ) if layertemperature is None else layertemperature

        else:
            # invoke with inp/go semantics
            _invocation_parameters['infile'] = self.__infile( self.__globals_( ) )
            _invocation_parameters['datacolumn'] = self.__datacolumn( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['correlation'] = self.__correlation( self.__globals_( ) )
            _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
            _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
            _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
            _invocation_parameters['feed'] = self.__feed( self.__globals_( ) )
            _invocation_parameters['msselect'] = self.__msselect( self.__globals_( ) )
            _invocation_parameters['outputspw'] = self.__outputspw( self.__globals_( ) )
            _invocation_parameters['gainfactor'] = self.__gainfactor( self.__globals_( ) )
            _invocation_parameters['dtem_dh'] = self.__dtem_dh( self.__globals_( ) )
            _invocation_parameters['h0'] = self.__h0( self.__globals_( ) )
            _invocation_parameters['atmtype'] = self.__atmtype( self.__globals_( ) )
            _invocation_parameters['atmdetail'] = self.__atmdetail( self.__globals_( ) )
            _invocation_parameters['altitude'] = self.__altitude( self.__globals_( ) )
            _invocation_parameters['temperature'] = self.__temperature( self.__globals_( ) )
            _invocation_parameters['pressure'] = self.__pressure( self.__globals_( ) )
            _invocation_parameters['humidity'] = self.__humidity( self.__globals_( ) )
            _invocation_parameters['pwv'] = self.__pwv( self.__globals_( ) )
            _invocation_parameters['dp'] = self.__dp( self.__globals_( ) )
            _invocation_parameters['dpm'] = self.__dpm( self.__globals_( ) )
            _invocation_parameters['layerboundaries'] = self.__layerboundaries( self.__globals_( ) )
            _invocation_parameters['layertemperature'] = self.__layertemperature( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-16s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#sdatmcor( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'sdatmcor', [ 'infile=' + repr(_pc.document['infile']), 'datacolumn=' + repr(_pc.document['datacolumn']), 'outfile=' + repr(_pc.document['outfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'scan=' + repr(_pc.document['scan']), 'antenna=' + repr(_pc.document['antenna']), 'correlation=' + repr(_pc.document['correlation']), 'timerange=' + repr(_pc.document['timerange']), 'intent=' + repr(_pc.document['intent']), 'observation=' + repr(_pc.document['observation']), 'feed=' + repr(_pc.document['feed']), 'msselect=' + repr(_pc.document['msselect']), 'outputspw=' + repr(_pc.document['outputspw']), 'gainfactor=' + repr(_pc.document['gainfactor']), 'dtem_dh=' + repr(_pc.document['dtem_dh']), 'h0=' + repr(_pc.document['h0']), 'atmtype=' + repr(_pc.document['atmtype']), 'atmdetail=' + repr(_pc.document['atmdetail']), 'altitude=' + repr(_pc.document['altitude']), 'temperature=' + repr(_pc.document['temperature']), 'pressure=' + repr(_pc.document['pressure']), 'humidity=' + repr(_pc.document['humidity']), 'pwv=' + repr(_pc.document['pwv']), 'dp=' + repr(_pc.document['dp']), 'dpm=' + repr(_pc.document['dpm']), 'layerboundaries=' + repr(_pc.document['layerboundaries']), 'layertemperature=' + repr(_pc.document['layertemperature']) ] )
            task_result = _sdatmcor_t( _pc.document['infile'],_pc.document['datacolumn'],_pc.document['outfile'],_pc.document['overwrite'],_pc.document['field'],_pc.document['spw'],_pc.document['scan'],_pc.document['antenna'],_pc.document['correlation'],_pc.document['timerange'],_pc.document['intent'],_pc.document['observation'],_pc.document['feed'],_pc.document['msselect'],_pc.document['outputspw'],_pc.document['gainfactor'],_pc.document['dtem_dh'],_pc.document['h0'],_pc.document['atmtype'],_pc.document['atmdetail'],_pc.document['altitude'],_pc.document['temperature'],_pc.document['pressure'],_pc.document['humidity'],_pc.document['pwv'],_pc.document['dp'],_pc.document['dpm'],_pc.document['layerboundaries'],_pc.document['layertemperature'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('sdatmcor')
            casalog.post("Exception Reported: Error in sdatmcor: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'sdatmcor', task_result )

        #Added if _sdatmcor_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

sdatmcor = _sdatmcor( )


##################### generated by xml-casa (v2) from uvcontsub_old.xml #############
##################### f0f0b427965b14190ecdd5e50a5251e8 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_uvcontsub_old import uvcontsub_old as _uvcontsub_old_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _uvcontsub_old:
    """
    uvcontsub_old ---- Continuum fitting and subtraction in the uv plane

    --------- parameter descriptions ---------------------------------------------

    vis          Name of input MS.  Output goes to vis + ".contsub" (will be overwritten if already exists)
    field        Select field(s) using id(s) or name(s)
    fitspw       Spectral window:channel selection for fitting the continuum
    excludechans exclude Spectral window:channel selection in fitspw for fitting
    combine      Data axes to combine for the continuum estimation (none, or spw and/or scan)
    solint       Continuum fit timescale (int recommended!)
    fitorder     Polynomial order for the fits
    spw          Spectral window selection for output
    want_cont    Create vis + ".cont" to hold the continuum estimate.

    --------- examples -----------------------------------------------------------

    
    
    Continuum fitting and subtraction in the uv plane:
    
    This task estimates the continuum emission by fitting polynomials to
    the real and imaginary parts of the spectral windows and channels
    selected by fitspw.  This fit represents a model of the continuum in
    all channels.
    
    The fitted continuum spectrum is subtracted from all channels
    selected in spw, and the result (presumably only line emission)
    is stored in a new MS (vis + ".contsub"). If an MS
    with the output name already exists, it will be overwritten.
    It will read from the CORRECTED_DATA column of vis if it is present,
    or DATA if it is not.  Whichever column is read is presumed to have
    already been calibrated.
    
    If want_cont is True, the continuum fit is placed in a second new MS
    (vis + '.cont', also overwritten if it already exists).
    N.B. because the continuum model is necessarily a
    smoothed fit, images made with it are liable to have their field of
    view reduced in some strange way.  Images of the continuum should be
    made by simply excluding the line channels (and probably averaging the
    remaining ones) in clean.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    field -- Field selection for continuum estimation and subtraction.
    The estimation and subtraction is done for each selected field
    in turn.  (Run listobs to get lists of the ID and names.)
    default: field = '' means select all fields
    field = 1 # will get field_id=1 (if you give it an
    integer, it will retrieve the source with that index.
    field = '1328+307'  specifies source '1328+307'
    field = '13*' will retrieve '1328+307' and any other fields
    beginning with '13'
    fitspw -- Selection of spectral windows and channels to use in the
    fit for the continuum, using general spw:chan syntax.
    The ranges of channels also can be specified by frequencies as in
    the MS selection syntax (spw ids are required but '*' can be
    used, see the example below).
    See the note under combine.
    default: '' (all)
    example: fitspw='0:5~30;40~55'
    --> select the ranges by channels in the spw id 0
    fitspw='0:5~30;40~55,1:10~25;45~58,2'
    --> select channel ranges 5-30 and 40-55 for the spw id 0,
    10-25 and 45-58 for spwid 1, and use all channels for the spw id 2
    fitspw='0:113.767~114.528GHz;114.744~115.447GHz'
    --> select the ranges by frequencies in the spw id 0
    fitspw='0:113.767~114.528GHz;114.744~115.447GHz,1:111.892~112.654GHz;112.868~113.025GHz'
    --> select the different ranges by frequencies for the spw ids 0 and 1
    fitspw='*:113.767~114.528GHz;114.744~115.447GHz'
    --> select the same frequency ranges for all the relevant spws
    >>> expandable parameter for fitspw
    excludechans - if True, it will exclude the spws:channels specified in fitspw
    for the fit
    default: False (use fitspw for the fit)
    example: fitspw='0:114.528GHz~114.744GHz'; excludechans=True
    --> exclude the frequency range, 114.528GHz - 114.744GHz in the spw id 0
    combine -- Data axes to combine for the continuum estimate.
    It must include 'spw' if spw contains spws that are not in
    fitspw!
    default: '' --> solutions will break at scan, field, and spw
    boundaries according to solint
    Options: '', 'spw'', 'scan', or 'spw, scan'
    example: combine='spw' --> form spw-merged continuum estimate
    solint -- Timescale for per-baseline fit (units optional)
    default (recommended): 'int' --> no time averaging, do a
    fit for each integration and let the
    noisy fits average out in the image.
    
    example: solint='10s'  --> average to 10s before fitting
    10 or '10' --> '10s' (unitless: assumes seconds)
    options: 'int' --> per integration
    'inf' --> per scan
    
    If solint is longer than 'int', the continuum estimate can be
    corrupted by time smearing!
    
    fitorder -- Polynomial order for the fits of the continuum w.r.t.
    frequency.  fitorders > 1 are strongly discouraged
    because high order polynomials have more flexibility, may
    absorb line emission, and tend go wild at the edges of
    fitspw, which is not what you want.
    
    default: 0 (constant); example: fitorder=1
    
    spw -- Optional per spectral window selection of channels to include
    in the output.  See the note under combine.
    
    The spectral windows will be renumbered to start from 0, as in
    split.
    want_cont -- Create vis + '.cont' to hold the continuum estimate.
    default: 'False'; example: want_cont=True
    The continuum estimate will be placed in vis + '.cont'


    """

    _info_group_ = """manipulation"""
    _info_desc_ = """Continuum fitting and subtraction in the uv plane"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'field': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cInt'}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'fitspw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'excludechans': {'type': 'cBool'}, 'combine': {'type': 'cStr', 'coerce': _coerce.to_str}, 'solint': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'fitorder': {'type': 'cInt'}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'want_cont': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 15 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __want_cont_dflt( self, glb ):
        return False

    def __want_cont( self, glb ):
        if 'want_cont' in glb: return glb['want_cont']
        return False

    def __combine_dflt( self, glb ):
        return ''

    def __combine( self, glb ):
        if 'combine' in glb: return glb['combine']
        return ''

    def __fitspw_dflt( self, glb ):
        return ''

    def __fitspw( self, glb ):
        if 'fitspw' in glb: return glb['fitspw']
        return ''

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __fitorder_dflt( self, glb ):
        return int(0)

    def __fitorder( self, glb ):
        if 'fitorder' in glb: return glb['fitorder']
        return int(0)

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __solint_dflt( self, glb ):
        return 'int'

    def __solint( self, glb ):
        if 'solint' in glb: return glb['solint']
        return 'int'



    #--------- return inp/go default --------------------------------------------------
    def __excludechans_dflt( self, glb ):
        if self.__fitspw( glb ) != "": return bool(False)
        return None

    #--------- return subparam values -------------------------------------------------
    def __excludechans( self, glb ):
        if 'excludechans' in glb: return glb['excludechans']
        dflt = self.__excludechans_dflt( glb )
        if dflt is not None: return dflt
        return False

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input MS.  Output goes to vis + ".contsub" (will be overwritten if already exists)'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __field_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__field_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select field(s) using id(s) or name(s)'
        value = self.__field( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __fitspw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__fitspw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Spectral window:channel selection for fitting the continuum'
        value = self.__fitspw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'fitspw': value},{'fitspw': self.__schema['fitspw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-15.15s =\x1B[0m %s%-23s%s' % ('fitspw',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __excludechans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__excludechans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__excludechans_dflt( self.__globals_( ) ) is not None:
             description = 'exclude Spectral window:channel selection in fitspw for fitting'
             value = self.__excludechans( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'excludechans': value},{'excludechans': self.__schema['excludechans']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-12.12s =\x1B[0m %s%-23s%s' % ('excludechans',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __combine_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__combine_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Data axes to combine for the continuum estimation (none, or spw and/or scan)'
        value = self.__combine( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'combine': value},{'combine': self.__schema['combine']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('combine',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __solint_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__solint_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'int'
        description = 'Continuum fit timescale (int recommended!)'
        value = self.__solint( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'solint': value},{'solint': self.__schema['solint']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('solint',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __fitorder_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__fitorder_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'Polynomial order for the fits'
        value = self.__fitorder( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'fitorder': value},{'fitorder': self.__schema['fitorder']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('fitorder',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Spectral window selection for output'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __want_cont_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__want_cont_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Create vis + ".cont" to hold the continuum estimate.'
        value = self.__want_cont( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'want_cont': value},{'want_cont': self.__schema['want_cont']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-15.15s = %s%-23s%s' % ('want_cont',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'fitspw' in glb: del glb['fitspw']
        if 'excludechans' in glb: del glb['excludechans']
        if 'want_cont' in glb: del glb['want_cont']
        if 'field' in glb: del glb['field']
        if 'vis' in glb: del glb['vis']
        if 'fitorder' in glb: del glb['fitorder']
        if 'combine' in glb: del glb['combine']
        if 'solint' in glb: del glb['solint']
        if 'spw' in glb: del glb['spw']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# uvcontsub_old -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__field_inp( )
        self.__fitspw_inp( )
        self.__excludechans_inp( )
        self.__combine_inp( )
        self.__solint_inp( )
        self.__fitorder_inp( )
        self.__spw_inp( )
        self.__want_cont_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "uvcontsub_old.last" if os.path.isfile("uvcontsub_old.last") else "uvcontsub_old.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('uvcontsub_old.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['field'] = self.__field( self.__globals_( ) )
        _invocation_parameters['fitspw'] = self.__fitspw( self.__globals_( ) )
        _invocation_parameters['excludechans'] = self.__excludechans( self.__globals_( ) )
        _invocation_parameters['combine'] = self.__combine( self.__globals_( ) )
        _invocation_parameters['solint'] = self.__solint( self.__globals_( ) )
        _invocation_parameters['fitorder'] = self.__fitorder( self.__globals_( ) )
        _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
        _invocation_parameters['want_cont'] = self.__want_cont( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-12s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#uvcontsub_old( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, field=None, fitspw=None, excludechans=None, combine=None, solint=None, fitorder=None, spw=None, want_cont=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('uvcontsub_old.pre')
        _postfile = os.path.realpath('uvcontsub_old.last')
        task_result = None
        _arguments = [vis,field,fitspw,excludechans,combine,solint,fitorder,spw,want_cont]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if field is not None: local_global['field'] = field
            if fitspw is not None: local_global['fitspw'] = fitspw
            if combine is not None: local_global['combine'] = combine
            if solint is not None: local_global['solint'] = solint
            if fitorder is not None: local_global['fitorder'] = fitorder
            if spw is not None: local_global['spw'] = spw
            if want_cont is not None: local_global['want_cont'] = want_cont

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['fitspw'] = self.__fitspw( local_global )
            _invocation_parameters['combine'] = self.__combine( local_global )
            _invocation_parameters['solint'] = self.__solint( local_global )
            _invocation_parameters['fitorder'] = self.__fitorder( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['want_cont'] = self.__want_cont( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['excludechans'] = self.__excludechans( _invocation_parameters ) if excludechans is None else excludechans

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['fitspw'] = self.__fitspw( self.__globals_( ) )
            _invocation_parameters['excludechans'] = self.__excludechans( self.__globals_( ) )
            _invocation_parameters['combine'] = self.__combine( self.__globals_( ) )
            _invocation_parameters['solint'] = self.__solint( self.__globals_( ) )
            _invocation_parameters['fitorder'] = self.__fitorder( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['want_cont'] = self.__want_cont( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-12s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#uvcontsub_old( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'uvcontsub_old', [ 'vis=' + repr(_pc.document['vis']), 'field=' + repr(_pc.document['field']), 'fitspw=' + repr(_pc.document['fitspw']), 'excludechans=' + repr(_pc.document['excludechans']), 'combine=' + repr(_pc.document['combine']), 'solint=' + repr(_pc.document['solint']), 'fitorder=' + repr(_pc.document['fitorder']), 'spw=' + repr(_pc.document['spw']), 'want_cont=' + repr(_pc.document['want_cont']) ] )
            task_result = _uvcontsub_old_t( _pc.document['vis'],_pc.document['field'],_pc.document['fitspw'],_pc.document['excludechans'],_pc.document['combine'],_pc.document['solint'],_pc.document['fitorder'],_pc.document['spw'],_pc.document['want_cont'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('uvcontsub_old')
            casalog.post("Exception Reported: Error in uvcontsub_old: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'uvcontsub_old', task_result )

        #Added if _uvcontsub_old_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

uvcontsub_old = _uvcontsub_old( )


##################### generated by xml-casa (v2) from importfits.xml ################
##################### e8fdf1ac06c4c663eca53aef832d20ef ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_importfits import importfits as _importfits_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _importfits:
    """
    importfits ---- Convert an image FITS file into a CASA image

    
    Convert an image FITS file into a CASA image

    --------- parameter descriptions ---------------------------------------------

    fitsimage         Name of input image FITS file
                      Default: none
                      
                         Example: fitsimage='3C273XC1.fits'
    imagename         Name of output CASA image
                      Default: none
                      
                         Example: fitsimage='3C273XC1.image'
    whichrep          If fits image has multiple coordinate reps, choose one.
                      Default: 0 (means first)
                      
                         Example: whichrep=1
    whichhdu          If fits file contains multiple images, choose one
                      Default: -1 (use the first valid one)
                      
                      NOTE: 0 = first HDU, -1 = first valid image
                      
                         Example: whichhdu=1
    zeroblanks        Set blanked pixels to zero (not NaN)
                      Default: True
                      Options: True|False
    overwrite         Overwrite output file if it exists?
                      Default: False
                      Options: False|True
    defaultaxes       Add the default 4D coordinate axes where they are
                      missing
                      Default: False
                      Options: False|True
                      
                      IMPORTANT: value True requires setting defaultaxesvalues
    defaultaxesvalues List of values to assign to added degenerate axes when
                      defaultaxes==True (ra,dec,freq,stokes)
                      Default: []
                      
                      For existing axes, empty strings can be given as
                      values. For the directions and spectral values,
                      any valid angle/frequency expressions can be
                      given.
                      
                         Example: defaultaxesvalues=['19h30m00',
                         '-02d30m00', '88.5GHz', 'Q']
    beam              List of values to be used to define the synthesized beam
                      [BMAJ,BMIN,BPA] (as in the FITS keywords)
                      Default: [] (i.e.take from FITS file)
                      
                         Example: beam=['0.35arcsec', '0.24arcsec',
                         '25deg']

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTFITS IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert an image FITS file into a CASA image"""

    __schema = {'fitsimage': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'imagename': {'type': 'cStr', 'coerce': _coerce.to_str}, 'whichrep': {'type': 'cInt'}, 'whichhdu': {'type': 'cInt'}, 'zeroblanks': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'defaultaxes': {'type': 'cBool'}, 'defaultaxesvalues': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'beam': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 17 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __beam_dflt( self, glb ):
        return [ ]

    def __beam( self, glb ):
        if 'beam' in glb: return glb['beam']
        return [ ]

    def __whichrep_dflt( self, glb ):
        return int(0)

    def __whichrep( self, glb ):
        if 'whichrep' in glb: return glb['whichrep']
        return int(0)

    def __defaultaxes_dflt( self, glb ):
        return False

    def __defaultaxes( self, glb ):
        if 'defaultaxes' in glb: return glb['defaultaxes']
        return False

    def __defaultaxesvalues_dflt( self, glb ):
        return [ ]

    def __defaultaxesvalues( self, glb ):
        if 'defaultaxesvalues' in glb: return glb['defaultaxesvalues']
        return [ ]

    def __zeroblanks_dflt( self, glb ):
        return True

    def __zeroblanks( self, glb ):
        if 'zeroblanks' in glb: return glb['zeroblanks']
        return True

    def __fitsimage_dflt( self, glb ):
        return ''

    def __fitsimage( self, glb ):
        if 'fitsimage' in glb: return glb['fitsimage']
        return ''

    def __whichhdu_dflt( self, glb ):
        return int(-1)

    def __whichhdu( self, glb ):
        if 'whichhdu' in glb: return glb['whichhdu']
        return int(-1)

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __fitsimage_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__fitsimage_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input image FITS file'
        value = self.__fitsimage( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'fitsimage': value},{'fitsimage': self.__schema['fitsimage']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('fitsimage',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of output CASA image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __whichrep_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__whichrep_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'If fits image has multiple coordinate reps, choose one.'
        value = self.__whichrep( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'whichrep': value},{'whichrep': self.__schema['whichrep']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('whichrep',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __whichhdu_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__whichhdu_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-1)
        description = 'If fits file contains multiple images, choose one (0 = first HDU, -1 = first valid image).'
        value = self.__whichhdu( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'whichhdu': value},{'whichhdu': self.__schema['whichhdu']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('whichhdu',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __zeroblanks_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__zeroblanks_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Set blanked pixels to zero (not NaN)'
        value = self.__zeroblanks( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'zeroblanks': value},{'zeroblanks': self.__schema['zeroblanks']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('zeroblanks',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Overwrite output file if it exists?'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __defaultaxes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__defaultaxes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Add the default 4D coordinate axes where they are missing; value True requires setting defaultaxesvalues'
        value = self.__defaultaxes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'defaultaxes': value},{'defaultaxes': self.__schema['defaultaxes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('defaultaxes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __defaultaxesvalues_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__defaultaxesvalues_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ ]
        description = 'List of values to assign to added degenerate axes when defaultaxes==True (ra,dec,freq,stokes)'
        value = self.__defaultaxesvalues( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'defaultaxesvalues': value},{'defaultaxesvalues': self.__schema['defaultaxesvalues']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('defaultaxesvalues',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __beam_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__beam_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ ]
        description = 'List of values to be used to define the synthesized beam [BMAJ,BMIN,BPA] (as in the FITS keywords)'
        value = self.__beam( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'beam': value},{'beam': self.__schema['beam']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('beam',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'whichrep' in glb: del glb['whichrep']
        if 'zeroblanks' in glb: del glb['zeroblanks']
        if 'imagename' in glb: del glb['imagename']
        if 'whichhdu' in glb: del glb['whichhdu']
        if 'defaultaxes' in glb: del glb['defaultaxes']
        if 'beam' in glb: del glb['beam']
        if 'fitsimage' in glb: del glb['fitsimage']
        if 'overwrite' in glb: del glb['overwrite']
        if 'defaultaxesvalues' in glb: del glb['defaultaxesvalues']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# importfits -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__fitsimage_inp( )
        self.__imagename_inp( )
        self.__whichrep_inp( )
        self.__whichhdu_inp( )
        self.__zeroblanks_inp( )
        self.__overwrite_inp( )
        self.__defaultaxes_inp( )
        self.__defaultaxesvalues_inp( )
        self.__beam_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "importfits.last" if os.path.isfile("importfits.last") else "importfits.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('importfits.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['fitsimage'] = self.__fitsimage( self.__globals_( ) )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['whichrep'] = self.__whichrep( self.__globals_( ) )
        _invocation_parameters['whichhdu'] = self.__whichhdu( self.__globals_( ) )
        _invocation_parameters['zeroblanks'] = self.__zeroblanks( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['defaultaxes'] = self.__defaultaxes( self.__globals_( ) )
        _invocation_parameters['defaultaxesvalues'] = self.__defaultaxesvalues( self.__globals_( ) )
        _invocation_parameters['beam'] = self.__beam( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-17s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#importfits( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, fitsimage=None, imagename=None, whichrep=None, whichhdu=None, zeroblanks=None, overwrite=None, defaultaxes=None, defaultaxesvalues=None, beam=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('importfits.pre')
        _postfile = os.path.realpath('importfits.last')
        task_result = None
        _arguments = [fitsimage,imagename,whichrep,whichhdu,zeroblanks,overwrite,defaultaxes,defaultaxesvalues,beam]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if fitsimage is not None: local_global['fitsimage'] = fitsimage
            if imagename is not None: local_global['imagename'] = imagename
            if whichrep is not None: local_global['whichrep'] = whichrep
            if whichhdu is not None: local_global['whichhdu'] = whichhdu
            if zeroblanks is not None: local_global['zeroblanks'] = zeroblanks
            if overwrite is not None: local_global['overwrite'] = overwrite
            if defaultaxes is not None: local_global['defaultaxes'] = defaultaxes
            if defaultaxesvalues is not None: local_global['defaultaxesvalues'] = defaultaxesvalues
            if beam is not None: local_global['beam'] = beam

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['fitsimage'] = self.__fitsimage( local_global )
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['whichrep'] = self.__whichrep( local_global )
            _invocation_parameters['whichhdu'] = self.__whichhdu( local_global )
            _invocation_parameters['zeroblanks'] = self.__zeroblanks( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['defaultaxes'] = self.__defaultaxes( local_global )
            _invocation_parameters['defaultaxesvalues'] = self.__defaultaxesvalues( local_global )
            _invocation_parameters['beam'] = self.__beam( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['fitsimage'] = self.__fitsimage( self.__globals_( ) )
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['whichrep'] = self.__whichrep( self.__globals_( ) )
            _invocation_parameters['whichhdu'] = self.__whichhdu( self.__globals_( ) )
            _invocation_parameters['zeroblanks'] = self.__zeroblanks( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['defaultaxes'] = self.__defaultaxes( self.__globals_( ) )
            _invocation_parameters['defaultaxesvalues'] = self.__defaultaxesvalues( self.__globals_( ) )
            _invocation_parameters['beam'] = self.__beam( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-17s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#importfits( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'importfits', [ 'fitsimage=' + repr(_pc.document['fitsimage']), 'imagename=' + repr(_pc.document['imagename']), 'whichrep=' + repr(_pc.document['whichrep']), 'whichhdu=' + repr(_pc.document['whichhdu']), 'zeroblanks=' + repr(_pc.document['zeroblanks']), 'overwrite=' + repr(_pc.document['overwrite']), 'defaultaxes=' + repr(_pc.document['defaultaxes']), 'defaultaxesvalues=' + repr(_pc.document['defaultaxesvalues']), 'beam=' + repr(_pc.document['beam']) ] )
            task_result = _importfits_t( _pc.document['fitsimage'],_pc.document['imagename'],_pc.document['whichrep'],_pc.document['whichhdu'],_pc.document['zeroblanks'],_pc.document['overwrite'],_pc.document['defaultaxes'],_pc.document['defaultaxesvalues'],_pc.document['beam'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('importfits')
            casalog.post("Exception Reported: Error in importfits: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'importfits', task_result )

        #Added if _importfits_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

importfits = _importfits( )


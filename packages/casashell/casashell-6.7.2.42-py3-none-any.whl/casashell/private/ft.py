##################### generated by xml-casa (v2) from ft.xml ########################
##################### 9c1db93ee44949588c604c133f8691c6 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_ft import ft as _ft_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _ft:
    """
    ft ---- Insert a source model as a visibility set

    
    A source model (souce.model image) or components list is converted
    into model visibilities that is inserted into the MODEL_DATA column or
    alternatively is stored  in the header of the MS to be served on the
    fly when requested.
    
    Setjy will automatically make this ft step on the sources currently
    available, which are 3C48, 3C138, 3C147, 3C286 at 1.4, 5.0, 8.4, 15,
    22, 43 GHz.  Their location is site dependent.  In Charlottesville and
    Socorro, the models are in
    /usr/lib(lib64)/casapy/data/nrao/VLA/CalModels.

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input visibility file
                Default: none
                
                   Example: vis='ngc5921.ms'
    field       Select field using field id(s) or field name(s)
                Default: '' (all fields)
                
                BUT, only one source can be specified in a
                multi-source vis.
                
                
                   Examples: 
                   field = '1328+307'  specifies source
                   '1328+307'
                   field = '4' specified field with index 4
    spw         Select spectral window/channels
                Default: '' (all spectral windows and channels)
    model       Name of input model image(s)
                Default: '' (none)
                
                   Example:
                   model='/usr/lib/casapy/data/nrao/VLA/CalModels/3C286_X.im'
                
                NOTE: The model visibilities are scaled from the
                model frequency to the observed frequency of the
                data.
    nterms      Number of terms used to model the sky frequency
                dependence
                Default: 1 (one model image is required)
                
                   Example: nterms=3 - represents a 2nd order
                   Taylor-polynomial in frequency and should be
                   used in conjuction with coefficient model
                   images as
                   model=['xxx.model.tt0','xxx.model.tt1',
                   'xxx.model.tt2']
    reffreq     Reference-frequency about which this Taylor-expansion is
                defined.
                Default: '' (reads the reference frequency from
                the model image)
                
                   Example: reffreq = '1.5GHz'
    complist    Name of component list
                Default: none
                
                   Example: complist='test.cl'
                
                WARNING: component lists are difficult to make
    incremental Add model visibility to the existing model visibilties
                stored in the MS
                Default: False
                Options: False|True
    usescratch  Story visibilities in MODEL_DATA column?
                Default: False
                Options: False|True
                
                If True, model visibilities will be stored in the
                scratch column MODEL_DATA; if False, the model
                visibilities will be generated  on the fly (this
                mode may save some disk space equivalent to the
                volume of the observed data).
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF FT IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """imaging, calibration"""
    _info_desc_ = """Insert a source model as a visibility set"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'model': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'nterms': {'type': 'cInt'}, 'reffreq': {'type': 'cStr', 'coerce': _coerce.to_str}, 'complist': {'type': 'cStr', 'coerce': _coerce.to_str}, 'incremental': {'type': 'cBool'}, 'usescratch': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 11 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __nterms_dflt( self, glb ):
        return int(1)

    def __nterms( self, glb ):
        if 'nterms' in glb: return glb['nterms']
        return int(1)

    def __incremental_dflt( self, glb ):
        return False

    def __incremental( self, glb ):
        if 'incremental' in glb: return glb['incremental']
        return False

    def __model_dflt( self, glb ):
        return ''

    def __model( self, glb ):
        if 'model' in glb: return glb['model']
        return ''

    def __usescratch_dflt( self, glb ):
        return False

    def __usescratch( self, glb ):
        if 'usescratch' in glb: return glb['usescratch']
        return False

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __complist_dflt( self, glb ):
        return ''

    def __complist( self, glb ):
        if 'complist' in glb: return glb['complist']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __reffreq_dflt( self, glb ):
        if self.__nterms( glb ) != int(1): return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __reffreq( self, glb ):
        if 'reffreq' in glb: return glb['reffreq']
        dflt = self.__reffreq_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __field_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__field_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select field using field id(s) or field name(s)'
        value = self.__field( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select spectral window/channels'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __model_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__model_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input model image(s)'
        value = self.__model( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'model': value},{'model': self.__schema['model']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('model',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __nterms_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__nterms_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(1)
        description = 'Number of terms used to model the sky frequency dependence'
        value = self.__nterms( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'nterms': value},{'nterms': self.__schema['nterms']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-11.11s =\x1B[0m %s%-23s%s' % ('nterms',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __reffreq_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__reffreq_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__reffreq_dflt( self.__globals_( ) ) is not None:
             description = 'Reference frequency (e.g. \'1.5e+9\' or \'1.5GHz\')'
             value = self.__reffreq( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'reffreq': value},{'reffreq': self.__schema['reffreq']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('reffreq',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __complist_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__complist_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of component list'
        value = self.__complist( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'complist': value},{'complist': self.__schema['complist']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('complist',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __incremental_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__incremental_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Add to the existing model visibility?'
        value = self.__incremental( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'incremental': value},{'incremental': self.__schema['incremental']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('incremental',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __usescratch_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__usescratch_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'If True, predicted  visibility  is stored in MODEL_DATA column'
        value = self.__usescratch( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'usescratch': value},{'usescratch': self.__schema['usescratch']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('usescratch',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'complist' in glb: del glb['complist']
        if 'field' in glb: del glb['field']
        if 'model' in glb: del glb['model']
        if 'nterms' in glb: del glb['nterms']
        if 'reffreq' in glb: del glb['reffreq']
        if 'vis' in glb: del glb['vis']
        if 'usescratch' in glb: del glb['usescratch']
        if 'spw' in glb: del glb['spw']
        if 'incremental' in glb: del glb['incremental']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# ft -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__model_inp( )
        self.__nterms_inp( )
        self.__reffreq_inp( )
        self.__complist_inp( )
        self.__incremental_inp( )
        self.__usescratch_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "ft.last" if os.path.isfile("ft.last") else "ft.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('ft.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['field'] = self.__field( self.__globals_( ) )
        _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
        _invocation_parameters['model'] = self.__model( self.__globals_( ) )
        _invocation_parameters['nterms'] = self.__nterms( self.__globals_( ) )
        _invocation_parameters['reffreq'] = self.__reffreq( self.__globals_( ) )
        _invocation_parameters['complist'] = self.__complist( self.__globals_( ) )
        _invocation_parameters['incremental'] = self.__incremental( self.__globals_( ) )
        _invocation_parameters['usescratch'] = self.__usescratch( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#ft( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, field=None, spw=None, model=None, nterms=None, reffreq=None, complist=None, incremental=None, usescratch=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('ft.pre')
        _postfile = os.path.realpath('ft.last')
        task_result = None
        _arguments = [vis,field,spw,model,nterms,reffreq,complist,incremental,usescratch]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if model is not None: local_global['model'] = model
            if nterms is not None: local_global['nterms'] = nterms
            if complist is not None: local_global['complist'] = complist
            if incremental is not None: local_global['incremental'] = incremental
            if usescratch is not None: local_global['usescratch'] = usescratch

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['model'] = self.__model( local_global )
            _invocation_parameters['nterms'] = self.__nterms( local_global )
            _invocation_parameters['complist'] = self.__complist( local_global )
            _invocation_parameters['incremental'] = self.__incremental( local_global )
            _invocation_parameters['usescratch'] = self.__usescratch( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['reffreq'] = self.__reffreq( _invocation_parameters ) if reffreq is None else reffreq

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['model'] = self.__model( self.__globals_( ) )
            _invocation_parameters['nterms'] = self.__nterms( self.__globals_( ) )
            _invocation_parameters['reffreq'] = self.__reffreq( self.__globals_( ) )
            _invocation_parameters['complist'] = self.__complist( self.__globals_( ) )
            _invocation_parameters['incremental'] = self.__incremental( self.__globals_( ) )
            _invocation_parameters['usescratch'] = self.__usescratch( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#ft( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'ft', [ 'vis=' + repr(_pc.document['vis']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'model=' + repr(_pc.document['model']), 'nterms=' + repr(_pc.document['nterms']), 'reffreq=' + repr(_pc.document['reffreq']), 'complist=' + repr(_pc.document['complist']), 'incremental=' + repr(_pc.document['incremental']), 'usescratch=' + repr(_pc.document['usescratch']) ] )
            task_result = _ft_t( _pc.document['vis'],_pc.document['field'],_pc.document['spw'],_pc.document['model'],_pc.document['nterms'],_pc.document['reffreq'],_pc.document['complist'],_pc.document['incremental'],_pc.document['usescratch'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('ft')
            casalog.post("Exception Reported: Error in ft: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'ft', task_result )

        #Added if _ft_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

ft = _ft( )


##################### generated by xml-casa (v2) from sdsidebandsplit.xml ###########
##################### 9a41da2f188957e5ce7307211fb89954 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_sdsidebandsplit import sdsidebandsplit as _sdsidebandsplit_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _sdsidebandsplit:
    """
    sdsidebandsplit ---- [EXPERIMENTAL] invoke sideband separation using FFT

    [EXPERIMENTAL] SD sideband separation and supression task:
    Invoke sideband separation / supression using FFT

    --------- parameter descriptions ---------------------------------------------

    imagename   a list of names of input images. At least two valid images are required for processing
    outfile     Prefix of output image name.
                A suffix, ".signalband" or ".imageband" is added to 
                output image name depending on the side band side being solved.
    overwrite   overwrite option
    signalshift a list of channel number shifts in signal side band.
                The number of elements must be equal to that of imagename
    imageshift  t of channel number shifts in image side band.
                The number of elements must be either zero or equal to that of imagename.
                In case of zero length array, the values are obtained from signalshift
                assuming the shifts are the same magnitude in opposite direction.
    getbothside sideband separation (True) or supression (False)
    refchan     reference channel of spectral axis in image sideband
    refval      frequency at the reference channel of spectral axis in image sideband (e.g., "100GHz")
    otherside   solve the solution of the other side band side and subtract the solution
    threshold   Rejection limit of solution. The value must be greater than 0.0 and less than 1.0.
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    
    Solve signal sideband
    
    sdsidebandsplit(imagename=['shift_0ch.image', 'shift_132ch.image', 'shift_neg81ch.image'],
    outfile='separated.image', signalshift=[0.0, +132.0, -81.0],
    imageshift=[0.0, -132.0, +81.0])
    
    The output image is 'separated.image.signalband'.
    
    Solve both signal and image sidebands (need to set frequency of image sideband explicitly)
    
    sdsidebandsplit(imagename=['shift_0ch.image', 'shift_132ch.image', 'shift_neg81ch.image'],
    outfile='separated.image', signalshift=[0.0, +132.0, -81.0],
    imageshift=[0.0, -132.0, +81.0],
    getbothside=True, refchan=0.0, refval='805.8869GHz')
    
    The output images are 'separated.image.signalband' and 'separated.image.imageband'
    for signal and image sideband, respectively.
    
    Obtain signal sideband image by solving image sideband
    
    sdsidebandsplit(imagename=['shift_0ch.image', 'shift_132ch.image', 'shift_neg81ch.image'],
    outfile='separated.image', signalshift=[0.0, +132.0, -81.0],
    imageshift=[0.0, -132.0, +81.0], otherside=True)
    
    Solution of image sidband is obtained and subtracted from the original (double sideband) spectra
    to derive spectra of signal sideband.
    
    


    """

    _info_group_ = """single dish"""
    _info_desc_ = """[EXPERIMENTAL] invoke sideband separation using FFT"""

    __schema = {'imagename': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}, 'signalshift': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'imageshift': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'getbothside': {'type': 'cBool'}, 'refchan': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'refval': {'type': 'cStr', 'coerce': _coerce.to_str}, 'otherside': {'type': 'cBool'}, 'threshold': {'type': 'cFloat', 'coerce': _coerce.to_float, 'min': 0.0, 'max': 1.0}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 11 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __imageshift_dflt( self, glb ):
        return [  ]

    def __imageshift( self, glb ):
        if 'imageshift' in glb: return glb['imageshift']
        return [  ]

    def __threshold_dflt( self, glb ):
        return float(0.2)

    def __threshold( self, glb ):
        if 'threshold' in glb: return glb['threshold']
        return float(0.2)

    def __imagename_dflt( self, glb ):
        return [  ]

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return [  ]

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __signalshift_dflt( self, glb ):
        return [  ]

    def __signalshift( self, glb ):
        if 'signalshift' in glb: return glb['signalshift']
        return [  ]

    def __getbothside_dflt( self, glb ):
        return False

    def __getbothside( self, glb ):
        if 'getbothside' in glb: return glb['getbothside']
        return False

    def __otherside_dflt( self, glb ):
        return False

    def __otherside( self, glb ):
        if 'otherside' in glb: return glb['otherside']
        return False

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __refchan_dflt( self, glb ):
        if self.__getbothside( glb ) == bool(True): return float(0.0)
        return None
    def __refval_dflt( self, glb ):
        if self.__getbothside( glb ) == bool(True): return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __refchan( self, glb ):
        if 'refchan' in glb: return glb['refchan']
        dflt = self.__refchan_dflt( glb )
        if dflt is not None: return dflt
        return float(0.0)
    def __refval( self, glb ):
        if 'refval' in glb: return glb['refval']
        dflt = self.__refval_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'a list of names of input images'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Prefix of output image name'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'overwrite option'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __signalshift_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__signalshift_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'a list of channel number shifts in signal side band'
        value = self.__signalshift( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'signalshift': value},{'signalshift': self.__schema['signalshift']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('signalshift',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __imageshift_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imageshift_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'a list of channel number shifts in image side band'
        value = self.__imageshift( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imageshift': value},{'imageshift': self.__schema['imageshift']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('imageshift',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __getbothside_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__getbothside_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'sideband separation (True) or supression (False)'
        value = self.__getbothside( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'getbothside': value},{'getbothside': self.__schema['getbothside']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-11.11s =\x1B[0m %s%-23s%s' % ('getbothside',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __refchan_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__refchan_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(0.0)
        if self.__refchan_dflt( self.__globals_( ) ) is not None:
             description = 'reference channel of spectral axis in image sideband'
             value = self.__refchan( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'refchan': value},{'refchan': self.__schema['refchan']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('refchan',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __refval_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__refval_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__refval_dflt( self.__globals_( ) ) is not None:
             description = 'frequency at the reference channel of spectral axis in image sideband (e.g., "100GHz")'
             value = self.__refval( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'refval': value},{'refval': self.__schema['refval']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('refval',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __otherside_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__otherside_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'solve the solution of the other side band side and subtract the solution'
        value = self.__otherside( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'otherside': value},{'otherside': self.__schema['otherside']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('otherside',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __threshold_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__threshold_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(0.2)
        description = 'Rejection limit of solution'
        value = self.__threshold( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'threshold': value},{'threshold': self.__schema['threshold']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('threshold',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'refchan' in glb: del glb['refchan']
        if 'outfile' in glb: del glb['outfile']
        if 'imagename' in glb: del glb['imagename']
        if 'signalshift' in glb: del glb['signalshift']
        if 'imageshift' in glb: del glb['imageshift']
        if 'otherside' in glb: del glb['otherside']
        if 'threshold' in glb: del glb['threshold']
        if 'refval' in glb: del glb['refval']
        if 'overwrite' in glb: del glb['overwrite']
        if 'getbothside' in glb: del glb['getbothside']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# sdsidebandsplit -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__outfile_inp( )
        self.__overwrite_inp( )
        self.__signalshift_inp( )
        self.__imageshift_inp( )
        self.__getbothside_inp( )
        self.__refchan_inp( )
        self.__refval_inp( )
        self.__otherside_inp( )
        self.__threshold_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "sdsidebandsplit.last" if os.path.isfile("sdsidebandsplit.last") else "sdsidebandsplit.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('sdsidebandsplit.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['signalshift'] = self.__signalshift( self.__globals_( ) )
        _invocation_parameters['imageshift'] = self.__imageshift( self.__globals_( ) )
        _invocation_parameters['getbothside'] = self.__getbothside( self.__globals_( ) )
        _invocation_parameters['refchan'] = self.__refchan( self.__globals_( ) )
        _invocation_parameters['refval'] = self.__refval( self.__globals_( ) )
        _invocation_parameters['otherside'] = self.__otherside( self.__globals_( ) )
        _invocation_parameters['threshold'] = self.__threshold( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#sdsidebandsplit( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, outfile=None, overwrite=None, signalshift=None, imageshift=None, getbothside=None, refchan=None, refval=None, otherside=None, threshold=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('sdsidebandsplit.pre')
        _postfile = os.path.realpath('sdsidebandsplit.last')
        task_result = None
        _arguments = [imagename,outfile,overwrite,signalshift,imageshift,getbothside,refchan,refval,otherside,threshold]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if outfile is not None: local_global['outfile'] = outfile
            if overwrite is not None: local_global['overwrite'] = overwrite
            if signalshift is not None: local_global['signalshift'] = signalshift
            if imageshift is not None: local_global['imageshift'] = imageshift
            if getbothside is not None: local_global['getbothside'] = getbothside
            if otherside is not None: local_global['otherside'] = otherside
            if threshold is not None: local_global['threshold'] = threshold

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['signalshift'] = self.__signalshift( local_global )
            _invocation_parameters['imageshift'] = self.__imageshift( local_global )
            _invocation_parameters['getbothside'] = self.__getbothside( local_global )
            _invocation_parameters['otherside'] = self.__otherside( local_global )
            _invocation_parameters['threshold'] = self.__threshold( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['refchan'] = self.__refchan( _invocation_parameters ) if refchan is None else refchan
            _invocation_parameters['refval'] = self.__refval( _invocation_parameters ) if refval is None else refval

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['signalshift'] = self.__signalshift( self.__globals_( ) )
            _invocation_parameters['imageshift'] = self.__imageshift( self.__globals_( ) )
            _invocation_parameters['getbothside'] = self.__getbothside( self.__globals_( ) )
            _invocation_parameters['refchan'] = self.__refchan( self.__globals_( ) )
            _invocation_parameters['refval'] = self.__refval( self.__globals_( ) )
            _invocation_parameters['otherside'] = self.__otherside( self.__globals_( ) )
            _invocation_parameters['threshold'] = self.__threshold( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#sdsidebandsplit( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'sdsidebandsplit', [ 'imagename=' + repr(_pc.document['imagename']), 'outfile=' + repr(_pc.document['outfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'signalshift=' + repr(_pc.document['signalshift']), 'imageshift=' + repr(_pc.document['imageshift']), 'getbothside=' + repr(_pc.document['getbothside']), 'refchan=' + repr(_pc.document['refchan']), 'refval=' + repr(_pc.document['refval']), 'otherside=' + repr(_pc.document['otherside']), 'threshold=' + repr(_pc.document['threshold']) ] )
            task_result = _sdsidebandsplit_t( _pc.document['imagename'],_pc.document['outfile'],_pc.document['overwrite'],_pc.document['signalshift'],_pc.document['imageshift'],_pc.document['getbothside'],_pc.document['refchan'],_pc.document['refval'],_pc.document['otherside'],_pc.document['threshold'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('sdsidebandsplit')
            casalog.post("Exception Reported: Error in sdsidebandsplit: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'sdsidebandsplit', task_result )

        #Added if _sdsidebandsplit_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

sdsidebandsplit = _sdsidebandsplit( )


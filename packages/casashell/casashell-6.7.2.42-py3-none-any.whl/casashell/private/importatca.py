##################### generated by xml-casa (v2) from importatca.xml ################
##################### f17af04e63dd592cea5bd148a07dbb50 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_importatca import importatca as _importatca_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _importatca:
    """
    importatca ---- Import ATCA RPFITS file(s) to a measurement set

    
    Imports an arbitrary number of ATCA RPFITS format data sets into a
    casa measurement set.  If more than one band is present, they will be
    put in the same measurement set but in a separate spectral window.
    The task will handle both old ATCA and new CABB (after April 2009)
    archive data.

    --------- parameter descriptions ---------------------------------------------

    files    Name of input ATCA RPFits file(s)
    vis      Name of output MeasurementSet
             Default: none
             
                Example: vis='mydata.ms'
    options  Processing options
             Default: none
             Options: birdie, reweight, noxycorr, fastmosaic,
             hires, noac (comma separated list)
             
             - birdie: (pre-CABB data only) discard edge
               channels and channels affected by internal RFI
             - reweight: (pre-CABB data only) suppress ringing
               of RFI spikes by reweighting of the lag
               spectrum 
             - noxycorr: do not apply the xy phase correction
               as derived from the switched noise calibration,
               by default this is applied during loading of
               the data
             - fastmosaic: use this option if you are loading
               mosaic data with many pointings and only one or
               two integrations per pointing; this option
               changes the tiling of the data to avoid
               excessive I/O
             - hires: use this option if you have data in time
               binning mode (as used for pulsars) but you want
               to make it look like data with very short
               integration time (no bins)
             - noac: discard the auto-correlation data
    spw      Select spectral window/channels
                       Default: '' (all spectral windows and channels)
             
                          Examples:
                          spw='0~2,4'; spectral windows 0,1,2,4 (all channels)
                          spw='<2';  spectral windows less than 2 (i.e. 0,1)
                          spw='0:5~61'; spw 0, channels 5 to 61
                          spw='0,10,3:3~45'; spw 0,10 all channels, spw
                          3 - chans 3 to 45.
                          spw='0~2:2~6'; spw 0,1,2 with channels 2
                          through 6 in each.
                          spw = '\*:3~64'  channels 3 through 64 for all sp id's
                          spw = ' :3~64' will NOT work.
    nscans   Number of scans to skip followed by number of scans to
             read
             Default: [0, 0]
    lowfreq  Lowest reference frequency to select
             Default: 0.1GHz
    highfreq Highest reference frequency to select
             Default: 999GHz
    fields   List of field names to select
    edge     The edge parameter specifies how many edge channels to
             discard as a percentage of the number of channels in each band.
             Default: 8 (e.g., discard 82 channels from the
             top and bottom of a 2048 channel spectrum)
             
             For combined zooms, this specifies the percentage
             for a single zoom window

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTATCA IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Import ATCA RPFITS file(s) to a measurement set"""

    __schema = {'files': {'type': 'cPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'vis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'options': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'nscans': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'lowfreq': {'type': 'cDoubleQuant'}, 'highfreq': {'type': 'cDoubleQuant'}, 'fields': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'edge': {'type': 'cFloat', 'coerce': _coerce.to_float}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 8 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __fields_dflt( self, glb ):
        return [  ]

    def __fields( self, glb ):
        if 'fields' in glb: return glb['fields']
        return [  ]

    def __files_dflt( self, glb ):
        return [  ]

    def __files( self, glb ):
        if 'files' in glb: return glb['files']
        return [  ]

    def __edge_dflt( self, glb ):
        return float(8)

    def __edge( self, glb ):
        if 'edge' in glb: return glb['edge']
        return float(8)

    def __options_dflt( self, glb ):
        return ''

    def __options( self, glb ):
        if 'options' in glb: return glb['options']
        return ''

    def __spw_dflt( self, glb ):
        return [ int(-1) ]

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return [ int(-1) ]

    def __nscans_dflt( self, glb ):
        return [ int(0),int(0) ]

    def __nscans( self, glb ):
        if 'nscans' in glb: return glb['nscans']
        return [ int(0),int(0) ]

    def __highfreq_dflt( self, glb ):
        return {'value': float(999), 'unit': 'GHz'}

    def __highfreq( self, glb ):
        if 'highfreq' in glb: return glb['highfreq']
        return {'value': float(999), 'unit': 'GHz'}

    def __lowfreq_dflt( self, glb ):
        return {'value': float(0.1), 'unit': 'GHz'}

    def __lowfreq( self, glb ):
        if 'lowfreq' in glb: return glb['lowfreq']
        return {'value': float(0.1), 'unit': 'GHz'}



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __files_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__files_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'Name of input ATCA RPFits file(s)'
        value = self.__files( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'files': value},{'files': self.__schema['files']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('files',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of output MeasurementSet'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __options_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__options_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Processing options: birdie, reweight, noxycorr, fastmosaic, hires, noac (comma separated list)'
        value = self.__options( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'options': value},{'options': self.__schema['options']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('options',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ int(-1) ]
        description = 'Select spectral window/channels'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __nscans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__nscans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ int(0),int(0) ]
        description = 'Number of scans to skip followed by number of scans to read'
        value = self.__nscans( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'nscans': value},{'nscans': self.__schema['nscans']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('nscans',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __lowfreq_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__lowfreq_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return {'value': float(0.1), 'unit': 'GHz'}
        description = 'Lowest reference frequency to select'
        value = self.__lowfreq( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'lowfreq': value},{'lowfreq': self.__schema['lowfreq']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('lowfreq',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __highfreq_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__highfreq_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return {'value': float(999), 'unit': 'GHz'}
        description = 'Highest reference frequency to select'
        value = self.__highfreq( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'highfreq': value},{'highfreq': self.__schema['highfreq']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('highfreq',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __fields_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__fields_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'List of field names to select'
        value = self.__fields( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'fields': value},{'fields': self.__schema['fields']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('fields',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __edge_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__edge_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(8)
        description = 'Percentage of edge channels to flag. For combined zooms, this specifies the percentage for a single zoom window'
        value = self.__edge( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'edge': value},{'edge': self.__schema['edge']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('edge',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'vis' in glb: del glb['vis']
        if 'files' in glb: del glb['files']
        if 'options' in glb: del glb['options']
        if 'lowfreq' in glb: del glb['lowfreq']
        if 'fields' in glb: del glb['fields']
        if 'edge' in glb: del glb['edge']
        if 'nscans' in glb: del glb['nscans']
        if 'highfreq' in glb: del glb['highfreq']
        if 'spw' in glb: del glb['spw']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# importatca -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__files_inp( )
        self.__vis_inp( )
        self.__options_inp( )
        self.__spw_inp( )
        self.__nscans_inp( )
        self.__lowfreq_inp( )
        self.__highfreq_inp( )
        self.__fields_inp( )
        self.__edge_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "importatca.last" if os.path.isfile("importatca.last") else "importatca.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('importatca.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['files'] = self.__files( self.__globals_( ) )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['options'] = self.__options( self.__globals_( ) )
        _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
        _invocation_parameters['nscans'] = self.__nscans( self.__globals_( ) )
        _invocation_parameters['lowfreq'] = self.__lowfreq( self.__globals_( ) )
        _invocation_parameters['highfreq'] = self.__highfreq( self.__globals_( ) )
        _invocation_parameters['fields'] = self.__fields( self.__globals_( ) )
        _invocation_parameters['edge'] = self.__edge( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-8s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#importatca( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, files=None, vis=None, options=None, spw=None, nscans=None, lowfreq=None, highfreq=None, fields=None, edge=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('importatca.pre')
        _postfile = os.path.realpath('importatca.last')
        task_result = None
        _arguments = [files,vis,options,spw,nscans,lowfreq,highfreq,fields,edge]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if files is not None: local_global['files'] = files
            if vis is not None: local_global['vis'] = vis
            if options is not None: local_global['options'] = options
            if spw is not None: local_global['spw'] = spw
            if nscans is not None: local_global['nscans'] = nscans
            if lowfreq is not None: local_global['lowfreq'] = lowfreq
            if highfreq is not None: local_global['highfreq'] = highfreq
            if fields is not None: local_global['fields'] = fields
            if edge is not None: local_global['edge'] = edge

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['files'] = self.__files( local_global )
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['options'] = self.__options( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['nscans'] = self.__nscans( local_global )
            _invocation_parameters['lowfreq'] = self.__lowfreq( local_global )
            _invocation_parameters['highfreq'] = self.__highfreq( local_global )
            _invocation_parameters['fields'] = self.__fields( local_global )
            _invocation_parameters['edge'] = self.__edge( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['files'] = self.__files( self.__globals_( ) )
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['options'] = self.__options( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['nscans'] = self.__nscans( self.__globals_( ) )
            _invocation_parameters['lowfreq'] = self.__lowfreq( self.__globals_( ) )
            _invocation_parameters['highfreq'] = self.__highfreq( self.__globals_( ) )
            _invocation_parameters['fields'] = self.__fields( self.__globals_( ) )
            _invocation_parameters['edge'] = self.__edge( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-8s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#importatca( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'importatca', [ 'files=' + repr(_pc.document['files']), 'vis=' + repr(_pc.document['vis']), 'options=' + repr(_pc.document['options']), 'spw=' + repr(_pc.document['spw']), 'nscans=' + repr(_pc.document['nscans']), 'lowfreq=' + repr(_pc.document['lowfreq']), 'highfreq=' + repr(_pc.document['highfreq']), 'fields=' + repr(_pc.document['fields']), 'edge=' + repr(_pc.document['edge']) ] )
            task_result = _importatca_t( _pc.document['files'],_pc.document['vis'],_pc.document['options'],_pc.document['spw'],_pc.document['nscans'],_pc.document['lowfreq'],_pc.document['highfreq'],_pc.document['fields'],_pc.document['edge'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('importatca')
            casalog.post("Exception Reported: Error in importatca: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'importatca', task_result )

        #Added if _importatca_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

importatca = _importatca( )


##################### generated by xml-casa (v2) from imreframe.xml #################
##################### bdb184ca2fec81ea2ded1c6ae81348c7 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_imreframe import imreframe as _imreframe_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imreframe:
    """
    imreframe ---- Change the frame in which the image reports its spectral values

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    output    Name of the output image
    outframe  Spectral frame in which the frequency or velocity values will be reported by default
    epoch     Epoch to be associated with this image
    restfreq  restfrequency to use for velocity values (e.g "1.420GHz" for the HI line)
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    
    imagename -- name of casa image file to process on
    output         -- name of output image  '' means modify the input image itself
    default: '';
    outframe     -- new spectral frame in which the frequency or
    velocity will be reported for.
    Options: 'lsrk','lsrd','bary','geo','topo','galacto',
    'lgroup','cmb'
    default: 'lsrk'
    >>>
    epoch    -- when outframe is 'topo' or 'geo' a time in UTC is needed
    to decide when to do the frequency conversion. '' is to use
    the epoch of the input image
    default= ''
    
    restfreq -- Specify rest frequency to use for output image
    default=''; '' means use the restfrequency already in input image
    For example for
    NH_3 (1,1) put restfreq='23.694496GHz'


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Change the frame in which the image reports its spectral values"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'output': {'type': 'cStr', 'coerce': _coerce.to_str}, 'outframe': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'LSRK', 'CMB', 'geo', 'bary', 'GALACTO', 'GEO', 'TOPO', 'LSRD', 'lsrk', 'topo', 'LGROUP', 'BARY', 'lsrd', 'cmb', 'galacto', 'lgroup', '' ]}, 'epoch': {'type': 'cStr', 'coerce': _coerce.to_str}, 'restfreq': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 9 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __restfreq_dflt( self, glb ):
        return ''

    def __restfreq( self, glb ):
        if 'restfreq' in glb: return glb['restfreq']
        return ''

    def __outframe_dflt( self, glb ):
        return 'lsrk'

    def __outframe( self, glb ):
        if 'outframe' in glb: return glb['outframe']
        return 'lsrk'

    def __output_dflt( self, glb ):
        return ''

    def __output( self, glb ):
        if 'output' in glb: return glb['output']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __epoch_dflt( self, glb ):
        if self.__outframe( glb ) == "topo": return ""
        if self.__outframe( glb ) == "TOPO": return ""
        if self.__outframe( glb ) == "geo": return ""
        if self.__outframe( glb ) == "GEO": return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __epoch( self, glb ):
        if 'epoch' in glb: return glb['epoch']
        dflt = self.__epoch_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __output_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__output_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the output image'
        value = self.__output( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'output': value},{'output': self.__schema['output']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('output',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outframe_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outframe_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'lsrk'
        description = 'Spectral frame in which the frequency or velocity values will be reported by default'
        value = self.__outframe( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outframe': value},{'outframe': self.__schema['outframe']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-9.9s =\x1B[0m %s%-23s%s' % ('outframe',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __epoch_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__epoch_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__epoch_dflt( self.__globals_( ) ) is not None:
             description = 'Epoch to be associated with this image'
             value = self.__epoch( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'epoch': value},{'epoch': self.__schema['epoch']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-6.6s =\x1B[0m %s%-23s%s' % ('epoch',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __restfreq_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__restfreq_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'restfrequency to use for velocity values (e.g "1.420GHz" for the HI line)'
        value = self.__restfreq( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'restfreq': value},{'restfreq': self.__schema['restfreq']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('restfreq',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'epoch' in glb: del glb['epoch']
        if 'imagename' in glb: del glb['imagename']
        if 'restfreq' in glb: del glb['restfreq']
        if 'outframe' in glb: del glb['outframe']
        if 'output' in glb: del glb['output']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# imreframe -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__output_inp( )
        self.__outframe_inp( )
        self.__epoch_inp( )
        self.__restfreq_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "imreframe.last" if os.path.isfile("imreframe.last") else "imreframe.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('imreframe.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['output'] = self.__output( self.__globals_( ) )
        _invocation_parameters['outframe'] = self.__outframe( self.__globals_( ) )
        _invocation_parameters['epoch'] = self.__epoch( self.__globals_( ) )
        _invocation_parameters['restfreq'] = self.__restfreq( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imreframe( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, output=None, outframe=None, epoch=None, restfreq=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imreframe.pre')
        _postfile = os.path.realpath('imreframe.last')
        task_result = None
        _arguments = [imagename,output,outframe,epoch,restfreq]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if output is not None: local_global['output'] = output
            if outframe is not None: local_global['outframe'] = outframe
            if restfreq is not None: local_global['restfreq'] = restfreq

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['output'] = self.__output( local_global )
            _invocation_parameters['outframe'] = self.__outframe( local_global )
            _invocation_parameters['restfreq'] = self.__restfreq( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['epoch'] = self.__epoch( _invocation_parameters ) if epoch is None else epoch

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['output'] = self.__output( self.__globals_( ) )
            _invocation_parameters['outframe'] = self.__outframe( self.__globals_( ) )
            _invocation_parameters['epoch'] = self.__epoch( self.__globals_( ) )
            _invocation_parameters['restfreq'] = self.__restfreq( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imreframe( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'imreframe', [ 'imagename=' + repr(_pc.document['imagename']), 'output=' + repr(_pc.document['output']), 'outframe=' + repr(_pc.document['outframe']), 'epoch=' + repr(_pc.document['epoch']), 'restfreq=' + repr(_pc.document['restfreq']) ] )
            task_result = _imreframe_t( _pc.document['imagename'],_pc.document['output'],_pc.document['outframe'],_pc.document['epoch'],_pc.document['restfreq'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('imreframe')
            casalog.post("Exception Reported: Error in imreframe: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'imreframe', task_result )

        #Added if _imreframe_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

imreframe = _imreframe( )


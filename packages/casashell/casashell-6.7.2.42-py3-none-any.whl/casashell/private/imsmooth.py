##################### generated by xml-casa (v2) from imsmooth.xml ##################
##################### ab33d312a483ae3ea4502102cc6f10ba ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_imsmooth import imsmooth as _imsmooth_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imsmooth:
    """
    imsmooth ---- Smooth an image or portion of an image

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image. Must be specified.
    kernel    Type of kernel to use. Acceptable values are "b", "box", or "boxcar" for a boxcar kernel, "g", "gauss", or "gaussian" for a gaussian kernel, "c", "common", or "commonbeam" to use the common beam of an image with multiple beams as the gaussian to which to convolve all the planes, "i" or "image" to use an image as the kernel.
    major     Major axis for the kernels. Standard quantity representation. Must be specified for kernel="boxcar".
    minor     Minor axis. Standard quantity representation. Must be specified for kernel="boxcar".
    pa        Position angle used only for gaussian kernel. Standard quantity representation.
    targetres If gaussian kernel, specified parameters are to be resolution of output image (True) or parameters of gaussian to convolve with input image (False).
    kimage    Kernel image name. Only used if kernel="i" or "image".
    scale     Scale factor. -1.0 means auto-scale. Only used if kernel="i" or "image".
    region    Region selection. Default is to use the full image.
    box       Rectangular region to select in direction plane. Default is to use the entire direction plane.
    chans     Channels to use. Default is to use all channels.
    stokes    Stokes planes to use. Default is to use all Stokes planes.
    mask      Mask to use. Default is none.
    outfile   Output image name. Must be specified.
    stretch   If true, stretch the mask if necessary and possible.
    overwrite If true, overwrite (unprompted) pre-existing output file.
    beam      Alternate way of describing a Gaussian. If specified, must be a dictionary with keys "major", "minor", and "pa" (or "positionangle"). Do not specify beam if specifying major, minor, and pa.
    [1;42mRETURNS[1;m      any

    --------- examples -----------------------------------------------------------

    
    This task performs a Fourier-based convolution to 'smooth' the
    direction plane of an image. Smoothing is typically performed in order to reduce the noise in
    an image.
    
    Keyword arguments:
    
    imagename    Input image name. Must be specified.
    outfile      Output smoothed image file name. Must be specified.
    kernel       Type of kernel to use when smoothing ("g", "gauss", or "gaussian" for a gaussian
    kernel or "b", "box", or "boxcar" for a boxcar kernel), or if the
    image has multiple channels and kernel="commonbeam" (or "c", or "common"), convolve
    all channels to the smallest beam that encloses all beams in the input image, "i" or "image"
    to use an image as the kernel.
    For boxcar smoothing, the major axis is parallel to the y-axis of the image
    and the minor axis is parallel to the x-axis. For a Gaussian, the
    orientation is specified by a position angle. A value of 0 degrees means
    the major axis is parallel to the y-axis and an increasing value of the
    position angle results in a counter-clockwise rotation of the ellipse.
    default: 'gauss'
    major        Major axis of kernel which must be specified for boxcar smoothing. For
    Gaussian smoothing, the kernel parameters can alternatively be specified
    in the beam parameter. Standard quantity representations are supported.
    Example "4arcsec".
    minor        Minor axis of kernel which must be specified for boxcar smoothing. For
    Gaussian smoothing, the kernel parameters can alternatively be specified
    in the beam parameter. Standard quantity representations are supported.
    Example "3arcsec".
    pa           Position angle to use for gaussian kernel, unused for boxcar.
    The Gaussian kernel parameters can alternatively be specified
    in the beam parameter. Standard quantity representations are supported.
    Example "40deg".
    beam         Record specifying Gaussian beam parameters. Do not specify any of
    major, minor, or pa if you choose to specify this parameter.
    Example: {"major": "5arcsec", "minor": "2arcsec", "pa": "20deg"}
    targetres    Boolean used only for kernel='gauss'. If True, kernel parameters (major/minor/pa
    or beam) are the resolution of the output image. If false, a gaussian
    with these parameters is convolved with the input image to produce
    the output image.
    kimage       The image to be used as the convolution kernel. Only used if kernel="image" or "i".
    scale        Scale  factor to use if kernel="i" or "image".  -1.0 means auto-scale, which is the default.
    mask         Mask to use. Default is none.
    region       Region selection. Default is to use the full image.
    box          Rectangular region to select in direction plane.
    Default is to use the entire direction plane.
    Example: "5, 10, 100, 200".
    chans        Channels to use. Default is to use all channels.
    stokes       Stokes planes to use. Default is to use
    all Stokes planes.
    Example: 'I'
    
    GAUSSIAN KERNEL
    
    The direction pixels must be square. If they are not, use imregrid to regrid your image onto a grid
    of square pixels.
    
    Under the hood, ia.convolve2d() is called with scale=-1 (auto scaling). This means that, when the input image
    has a restoring beam, pixel values in the output image are scaled in such a way as to conserve flux density.
    
    Major and minor are the full width at half maximum  (FWHM) of the Gaussian. pa is the position angle
    of the Gaussian. The beam parameter offers an alternate way of describing the convolving Gaussian.
    If used, neither major, minor, nor pa can be specified. The beam parameter must have exactly three
    fields: "major", "minor", and "pa" (or "positionangle"). This is the record format for the output
    of ia.restoringbeam(). For example
    
    beam = {"major": "5arcsec", "minor": "2arcsec", "pa": "20deg"}
    
    If both beam and any of major, minor, and/or pa is specified for a Gaussian kernel,
    an exception will be thrown.
    
    Alternatively, if the input image has multiple beams, setting kernel='commonbeam' will result in the
    smallest beam that encloses all beams in the image to be used as the target resolution to which to
    convolve all planes.
    
    In addition, the targetres parameter indicates if the specified Gaussian is to be the
    resolution of the final image (True) or if it is to be used to convolve the input image.
    If True, the input image must have a restoring beam. Use imhead() or ia.restoringbeam()
    to check for its existence. If the image has multiple beams and targetres=True,
    all planes in the image will be convolved so that the resulting resolution is that
    specified by the kernel parameters. If the image has multiple beams and targetres=False,
    each plane will be convolved with a Gaussian specified by beam (and hence, in
    general, the output image will also have multiple beams that vary with spectral channel
    and/or polarization).
    
    If the units on the original image include Jy/beam, the units on the
    output image will be rescaled by the ratio of the input and output
    beams as well as rescaling by the area of convolution kernel.
    
    If the units on the original image include K, then only the image
    convolution kernel rescaling is done.
    
    BOXCAR KERNEL
    
    major is length of the box along the y-axis and minor is length of the box along the x-axis.
    pa is not used and beam should not be specified. The value of targetres is not used.
    
    IN GENERAL
    
    The major, minor, and pa parameters can be specified in one of three ways
    Quantity -- for example major=qa.quantity(1, 'arcsec')
    Note that you can use pixel units, such as
    major=qa.quantity(1, 'pix')
    String -- for example minor='1pix' or major='0.5arcsec'
    (i.e. a string that the Quanta quantity function accepts).
    Numeric -- for example major=10.
    In this case, the units of major and minor are assumed to
    be in arcsec and units of pa are assumed to be degrees.
    
    Note: Using pixel units allows you to convolve axes with different units.
    
    IMAGE KERNEL
    If kernel="i" or "image", the image specified by kimage is used to convolve the input image.
    The coordinate system of the convolution image is ignored; only the pixel values are considered.
    
    Fourier-based convolution is performed.
    
    The provided kernel can have fewer
    dimensions than the image being convolved.  In this case, it will be
    padded with degenerate axes.  An error will result if the kernel has
    more dimensions than the image.
    
    The scaling of the output image is determined by the argument {stfaf scale}.
    If this is left unset, then the kernel is normalized to unit sum.
    If {stfaf scale} is not left unset, then the convolution kernel
    will be scaled (multiplied) by this value.
    
    Masked pixels will be assigned the value 0.0 before convolution.
    
    The output mask is the combination (logical OR) of the default input
    pixelmask (if any) and the OTF mask.  Any other input pixelmasks
    will not be copied.  The function
    maskhandler
    should be used if there is a need to copy other masks too.
    
    
    EXAMPLES
    
    # smoothing with a gaussian kernel 20arseconds by 10 arseconds
    imsmooth( imagename='my.image', kernel='gauss', major='20arcsec', minor='10arcsec', pa="0deg")
    
    # the same as before, just a different way of specifying the kernel parameters
    mybeam = {'major': '20arcsec', 'minor': '10arcsec', 'pa': '0deg'}
    imsmooth( imagename='my.image', kernel='gauss', beam=mybeam)
    
    # Smoothing using pixel coordinates and a boxcar kernel.
    imsmooth( imagename='new.image', major='20pix', minor='10pix', kernel='boxcar')


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Smooth an image or portion of an image"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'kernel': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'b', 'image', 'g', 'boxcar', 'c', 'commonbeam', 'gauss', 'box', 'i', 'common', 'gaussian' ]}, 'major': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'minor': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'pa': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'targetres': {'type': 'cBool'}, 'kimage': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scale': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'region': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'box': {'type': 'cStr', 'coerce': _coerce.to_str}, 'chans': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stokes': {'type': 'cStr', 'coerce': _coerce.to_str}, 'mask': {'type': 'cStr', 'coerce': _coerce.to_str}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stretch': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'beam': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 12 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __kernel_dflt( self, glb ):
        return 'gauss'

    def __kernel( self, glb ):
        if 'kernel' in glb: return glb['kernel']
        return 'gauss'

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __mask_dflt( self, glb ):
        return ''

    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        return ''

    def __stokes_dflt( self, glb ):
        return ''

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return ''

    def __region_dflt( self, glb ):
        return ''

    def __region( self, glb ):
        if 'region' in glb: return glb['region']
        return ''

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __box_dflt( self, glb ):
        return ''

    def __box( self, glb ):
        if 'box' in glb: return glb['box']
        return ''

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __targetres_dflt( self, glb ):
        if self.__kernel( glb ) == "gauss": return bool(False)
        if self.__kernel( glb ) == "gaussian": return bool(False)
        if self.__kernel( glb ) == "g": return bool(False)
        return None
    def __pa_dflt( self, glb ):
        if self.__kernel( glb ) == "gauss": return ""
        if self.__kernel( glb ) == "gaussian": return ""
        if self.__kernel( glb ) == "g": return ""
        return None
    def __scale_dflt( self, glb ):
        if self.__kernel( glb ) == "image": return float(-1.0)
        if self.__kernel( glb ) == "i": return float(-1.0)
        return None
    def __stretch_dflt( self, glb ):
        if self.__mask( glb ) != "": return bool(False)
        return None
    def __beam_dflt( self, glb ):
        if self.__kernel( glb ) == "gauss": return ""
        if self.__kernel( glb ) == "gaussian": return ""
        if self.__kernel( glb ) == "g": return ""
        return None
    def __kimage_dflt( self, glb ):
        if self.__kernel( glb ) == "image": return ""
        if self.__kernel( glb ) == "i": return ""
        return None
    def __major_dflt( self, glb ):
        if self.__kernel( glb ) == "gauss": return ""
        if self.__kernel( glb ) == "gaussian": return ""
        if self.__kernel( glb ) == "g": return ""
        if self.__kernel( glb ) == "box": return ""
        if self.__kernel( glb ) == "boxcar": return ""
        if self.__kernel( glb ) == "b": return ""
        return None
    def __minor_dflt( self, glb ):
        if self.__kernel( glb ) == "gauss": return ""
        if self.__kernel( glb ) == "gaussian": return ""
        if self.__kernel( glb ) == "g": return ""
        if self.__kernel( glb ) == "box": return ""
        if self.__kernel( glb ) == "boxcar": return ""
        if self.__kernel( glb ) == "b": return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __major( self, glb ):
        if 'major' in glb: return glb['major']
        dflt = self.__major_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __minor( self, glb ):
        if 'minor' in glb: return glb['minor']
        dflt = self.__minor_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __pa( self, glb ):
        if 'pa' in glb: return glb['pa']
        dflt = self.__pa_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __targetres( self, glb ):
        if 'targetres' in glb: return glb['targetres']
        dflt = self.__targetres_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __kimage( self, glb ):
        if 'kimage' in glb: return glb['kimage']
        dflt = self.__kimage_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __scale( self, glb ):
        if 'scale' in glb: return glb['scale']
        dflt = self.__scale_dflt( glb )
        if dflt is not None: return dflt
        return float(-1.0)
    def __stretch( self, glb ):
        if 'stretch' in glb: return glb['stretch']
        dflt = self.__stretch_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __beam( self, glb ):
        if 'beam' in glb: return glb['beam']
        dflt = self.__beam_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input image. Must be specified.'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __kernel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__kernel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'gauss'
        description = 'Type of kernel to use. Acceptable values are "b", "box", or "boxcar" for a boxcar kernel, "g", "gauss", or "gaussian" for a gaussian kernel, "c", "common", or "commonbeam" to use the common beam of an image with multiple beams as the gaussian to which to convolve all the planes, "i" or "image" to use an image as the kernel.'
        value = self.__kernel( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'kernel': value},{'kernel': self.__schema['kernel']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-12.12s =\x1B[0m %s%-23s%s' % ('kernel',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __major_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__major_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__major_dflt( self.__globals_( ) ) is not None:
             description = 'Major axis for the kernels. Standard quantity representation. Must be specified for kernel="boxcar".'
             value = self.__major( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'major': value},{'major': self.__schema['major']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('major',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __minor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__minor_dflt( self.__globals_( ) ) is not None:
             description = 'Minor axis. Standard quantity representation. Must be specified for kernel="boxcar".'
             value = self.__minor( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minor': value},{'minor': self.__schema['minor']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('minor',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __pa_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__pa_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__pa_dflt( self.__globals_( ) ) is not None:
             description = 'Position angle used only for gaussian kernel. Standard quantity representation.'
             value = self.__pa( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'pa': value},{'pa': self.__schema['pa']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('pa',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __targetres_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__targetres_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__targetres_dflt( self.__globals_( ) ) is not None:
             description = 'If gaussian kernel, specified parameters are to be resolution of output image (True) or parameters of gaussian to convolve with input image (False).'
             value = self.__targetres( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'targetres': value},{'targetres': self.__schema['targetres']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('targetres',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __kimage_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__kimage_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__kimage_dflt( self.__globals_( ) ) is not None:
             description = 'Kernel image name. Only used if kernel="i" or "image".'
             value = self.__kimage( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'kimage': value},{'kimage': self.__schema['kimage']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('kimage',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __scale_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__scale_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(-1.0)
        if self.__scale_dflt( self.__globals_( ) ) is not None:
             description = 'Scale factor. -1.0 means auto-scale. Only used if kernel="i" or "image".'
             value = self.__scale( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'scale': value},{'scale': self.__schema['scale']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('scale',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __region_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__region_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Region selection. Default is to use the full image.'
        value = self.__region( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'region': value},{'region': self.__schema['region']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('region',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __box_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__box_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Rectangular region to select in direction plane. Default is to use the entire direction plane.'
        value = self.__box( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'box': value},{'box': self.__schema['box']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('box',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __chans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__chans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Channels to use. Default is to use all channels.'
        value = self.__chans( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('chans',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stokes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stokes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Stokes planes to use. Default is to use all Stokes planes.'
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('stokes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __mask_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__mask_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Mask to use. Default is none.'
        value = self.__mask( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-12.12s =\x1B[0m %s%-23s%s' % ('mask',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Output image name. Must be specified.'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stretch_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stretch_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__stretch_dflt( self.__globals_( ) ) is not None:
             description = 'If true, stretch the mask if necessary and possible.'
             value = self.__stretch( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stretch': value},{'stretch': self.__schema['stretch']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('stretch',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'If true, overwrite (unprompted) pre-existing output file.'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __beam_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__beam_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__beam_dflt( self.__globals_( ) ) is not None:
             description = 'Alternate way of describing a Gaussian. If specified, must be a dictionary with keys "major", "minor", and "pa" (or "positionangle"). Do not specify beam if specifying major, minor, and pa.'
             value = self.__beam( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'beam': value},{'beam': self.__schema['beam']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('beam',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'kernel' in glb: del glb['kernel']
        if 'outfile' in glb: del glb['outfile']
        if 'targetres' in glb: del glb['targetres']
        if 'mask' in glb: del glb['mask']
        if 'pa' in glb: del glb['pa']
        if 'scale' in glb: del glb['scale']
        if 'stretch' in glb: del glb['stretch']
        if 'imagename' in glb: del glb['imagename']
        if 'beam' in glb: del glb['beam']
        if 'kimage' in glb: del glb['kimage']
        if 'chans' in glb: del glb['chans']
        if 'region' in glb: del glb['region']
        if 'box' in glb: del glb['box']
        if 'overwrite' in glb: del glb['overwrite']
        if 'major' in glb: del glb['major']
        if 'minor' in glb: del glb['minor']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# imsmooth -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__kernel_inp( )
        self.__major_inp( )
        self.__minor_inp( )
        self.__pa_inp( )
        self.__targetres_inp( )
        self.__kimage_inp( )
        self.__scale_inp( )
        self.__region_inp( )
        self.__box_inp( )
        self.__chans_inp( )
        self.__stokes_inp( )
        self.__mask_inp( )
        self.__outfile_inp( )
        self.__stretch_inp( )
        self.__overwrite_inp( )
        self.__beam_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "imsmooth.last" if os.path.isfile("imsmooth.last") else "imsmooth.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('imsmooth.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['kernel'] = self.__kernel( self.__globals_( ) )
        _invocation_parameters['major'] = self.__major( self.__globals_( ) )
        _invocation_parameters['minor'] = self.__minor( self.__globals_( ) )
        _invocation_parameters['pa'] = self.__pa( self.__globals_( ) )
        _invocation_parameters['targetres'] = self.__targetres( self.__globals_( ) )
        _invocation_parameters['kimage'] = self.__kimage( self.__globals_( ) )
        _invocation_parameters['scale'] = self.__scale( self.__globals_( ) )
        _invocation_parameters['region'] = self.__region( self.__globals_( ) )
        _invocation_parameters['box'] = self.__box( self.__globals_( ) )
        _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
        _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
        _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['beam'] = self.__beam( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imsmooth( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, kernel=None, major=None, minor=None, pa=None, targetres=None, kimage=None, scale=None, region=None, box=None, chans=None, stokes=None, mask=None, outfile=None, stretch=None, overwrite=None, beam=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imsmooth.pre')
        _postfile = os.path.realpath('imsmooth.last')
        task_result = None
        _arguments = [imagename,kernel,major,minor,pa,targetres,kimage,scale,region,box,chans,stokes,mask,outfile,stretch,overwrite,beam]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if kernel is not None: local_global['kernel'] = kernel
            if region is not None: local_global['region'] = region
            if box is not None: local_global['box'] = box
            if chans is not None: local_global['chans'] = chans
            if stokes is not None: local_global['stokes'] = stokes
            if mask is not None: local_global['mask'] = mask
            if outfile is not None: local_global['outfile'] = outfile
            if overwrite is not None: local_global['overwrite'] = overwrite

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['kernel'] = self.__kernel( local_global )
            _invocation_parameters['region'] = self.__region( local_global )
            _invocation_parameters['box'] = self.__box( local_global )
            _invocation_parameters['chans'] = self.__chans( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )
            _invocation_parameters['mask'] = self.__mask( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['major'] = self.__major( _invocation_parameters ) if major is None else major
            _invocation_parameters['minor'] = self.__minor( _invocation_parameters ) if minor is None else minor
            _invocation_parameters['pa'] = self.__pa( _invocation_parameters ) if pa is None else pa
            _invocation_parameters['targetres'] = self.__targetres( _invocation_parameters ) if targetres is None else targetres
            _invocation_parameters['kimage'] = self.__kimage( _invocation_parameters ) if kimage is None else kimage
            _invocation_parameters['scale'] = self.__scale( _invocation_parameters ) if scale is None else scale
            _invocation_parameters['stretch'] = self.__stretch( _invocation_parameters ) if stretch is None else stretch
            _invocation_parameters['beam'] = self.__beam( _invocation_parameters ) if beam is None else beam

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['kernel'] = self.__kernel( self.__globals_( ) )
            _invocation_parameters['major'] = self.__major( self.__globals_( ) )
            _invocation_parameters['minor'] = self.__minor( self.__globals_( ) )
            _invocation_parameters['pa'] = self.__pa( self.__globals_( ) )
            _invocation_parameters['targetres'] = self.__targetres( self.__globals_( ) )
            _invocation_parameters['kimage'] = self.__kimage( self.__globals_( ) )
            _invocation_parameters['scale'] = self.__scale( self.__globals_( ) )
            _invocation_parameters['region'] = self.__region( self.__globals_( ) )
            _invocation_parameters['box'] = self.__box( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['beam'] = self.__beam( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imsmooth( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'imsmooth', [ 'imagename=' + repr(_pc.document['imagename']), 'kernel=' + repr(_pc.document['kernel']), 'major=' + repr(_pc.document['major']), 'minor=' + repr(_pc.document['minor']), 'pa=' + repr(_pc.document['pa']), 'targetres=' + repr(_pc.document['targetres']), 'kimage=' + repr(_pc.document['kimage']), 'scale=' + repr(_pc.document['scale']), 'region=' + repr(_pc.document['region']), 'box=' + repr(_pc.document['box']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'mask=' + repr(_pc.document['mask']), 'outfile=' + repr(_pc.document['outfile']), 'stretch=' + repr(_pc.document['stretch']), 'overwrite=' + repr(_pc.document['overwrite']), 'beam=' + repr(_pc.document['beam']) ] )
            task_result = _imsmooth_t( _pc.document['imagename'],_pc.document['kernel'],_pc.document['major'],_pc.document['minor'],_pc.document['pa'],_pc.document['targetres'],_pc.document['kimage'],_pc.document['scale'],_pc.document['region'],_pc.document['box'],_pc.document['chans'],_pc.document['stokes'],_pc.document['mask'],_pc.document['outfile'],_pc.document['stretch'],_pc.document['overwrite'],_pc.document['beam'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('imsmooth')
            casalog.post("Exception Reported: Error in imsmooth: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'imsmooth', task_result )

        #Added if _imsmooth_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

imsmooth = _imsmooth( )


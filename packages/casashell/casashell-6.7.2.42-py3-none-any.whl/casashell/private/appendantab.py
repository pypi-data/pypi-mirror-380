##################### generated by xml-casa (v2) from appendantab.xml ###############
##################### 162382ab45cd75da8b2d00f491610e97 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_appendantab import appendantab as _appendantab_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _appendantab:
    """
    appendantab ---- Append syscal and gaincurve data from an antab file

    
    Provide an MS created from a fitsidi file using importfitsidi and an antab file associated with that data.
    This task will parse the antab file file and fill the MS SYSCAL and GAIN_CURVE subtables based on the information
    in the antab file.

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input visibility file
                Default: none
                
                   Example: vis='ngc5921.ms'
    outvis      Name of output visibility file. If the file name specified already exists it will be replaced
                Default: none
                
                   Example: caltable='ngc5921.ms'
    antab       Name of antab file to append info from
                Default: none
                
                   Example: caltable='bc246b.antab'
    overwrite   Allows the outvis file to be overwritten
                Default: False
    append_tsys Use the information from the antab file to create and fill the SYSCAL subtable
                Default: True
    append_gc   Use the information from the antab file to create and fill the GAIN_CURVE subtable
                Default: True

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of appendantab in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Append syscal and gaincurve data from an antab file"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'outvis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'antab': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'overwrite': {'type': 'cBool'}, 'append_tsys': {'type': 'cBool'}, 'append_gc': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 11 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __append_tsys_dflt( self, glb ):
        return True

    def __append_tsys( self, glb ):
        if 'append_tsys' in glb: return glb['append_tsys']
        return True

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __append_gc_dflt( self, glb ):
        return True

    def __append_gc( self, glb ):
        if 'append_gc' in glb: return glb['append_gc']
        return True

    def __antab_dflt( self, glb ):
        return ''

    def __antab( self, glb ):
        if 'antab' in glb: return glb['antab']
        return ''

    def __outvis_dflt( self, glb ):
        return ''

    def __outvis( self, glb ):
        if 'outvis' in glb: return glb['outvis']
        return ''

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outvis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outvis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of output  visibility file'
        value = self.__outvis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outvis': value},{'outvis': self.__schema['outvis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('outvis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __antab_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__antab_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input antab file'
        value = self.__antab( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'antab': value},{'antab': self.__schema['antab']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('antab',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Allow overwrite of outvis'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __append_tsys_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__append_tsys_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Append the SYSCAL subtable'
        value = self.__append_tsys( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'append_tsys': value},{'append_tsys': self.__schema['append_tsys']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('append_tsys',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __append_gc_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__append_gc_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Append the GAIN_CURVE subtable'
        value = self.__append_gc( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'append_gc': value},{'append_gc': self.__schema['append_gc']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('append_gc',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'outvis' in glb: del glb['outvis']
        if 'antab' in glb: del glb['antab']
        if 'vis' in glb: del glb['vis']
        if 'append_gc' in glb: del glb['append_gc']
        if 'append_tsys' in glb: del glb['append_tsys']
        if 'overwrite' in glb: del glb['overwrite']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# appendantab -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__outvis_inp( )
        self.__antab_inp( )
        self.__overwrite_inp( )
        self.__append_tsys_inp( )
        self.__append_gc_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "appendantab.last" if os.path.isfile("appendantab.last") else "appendantab.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('appendantab.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['outvis'] = self.__outvis( self.__globals_( ) )
        _invocation_parameters['antab'] = self.__antab( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['append_tsys'] = self.__append_tsys( self.__globals_( ) )
        _invocation_parameters['append_gc'] = self.__append_gc( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#appendantab( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, outvis=None, antab=None, overwrite=None, append_tsys=None, append_gc=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('appendantab.pre')
        _postfile = os.path.realpath('appendantab.last')
        task_result = None
        _arguments = [vis,outvis,antab,overwrite,append_tsys,append_gc]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if outvis is not None: local_global['outvis'] = outvis
            if antab is not None: local_global['antab'] = antab
            if overwrite is not None: local_global['overwrite'] = overwrite
            if append_tsys is not None: local_global['append_tsys'] = append_tsys
            if append_gc is not None: local_global['append_gc'] = append_gc

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['outvis'] = self.__outvis( local_global )
            _invocation_parameters['antab'] = self.__antab( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['append_tsys'] = self.__append_tsys( local_global )
            _invocation_parameters['append_gc'] = self.__append_gc( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['outvis'] = self.__outvis( self.__globals_( ) )
            _invocation_parameters['antab'] = self.__antab( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['append_tsys'] = self.__append_tsys( self.__globals_( ) )
            _invocation_parameters['append_gc'] = self.__append_gc( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#appendantab( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'appendantab', [ 'vis=' + repr(_pc.document['vis']), 'outvis=' + repr(_pc.document['outvis']), 'antab=' + repr(_pc.document['antab']), 'overwrite=' + repr(_pc.document['overwrite']), 'append_tsys=' + repr(_pc.document['append_tsys']), 'append_gc=' + repr(_pc.document['append_gc']) ] )
            task_result = _appendantab_t( _pc.document['vis'],_pc.document['outvis'],_pc.document['antab'],_pc.document['overwrite'],_pc.document['append_tsys'],_pc.document['append_gc'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('appendantab')
            casalog.post("Exception Reported: Error in appendantab: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'appendantab', task_result )

        #Added if _appendantab_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

appendantab = _appendantab( )


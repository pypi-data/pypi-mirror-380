##################### generated by xml-casa (v2) from imstat.xml ####################
##################### 76730722711b052751c7e443e885cbf7 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_imstat import imstat as _imstat_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imstat:
    """
    imstat ---- Calculates statistical information from an image or image region

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    axes      List of axes to evaluate statistics over. Default is all axes.
    region    Region selection. Default is to use the full image.
    box       Rectangular region(s) to select in direction plane. Default is to use the entire direction plane.
    chans     Channels to use. Default is to use all channels.
    stokes    Stokes planes to use. Default is to use all Stokes planes.
    listit    Print stats and bounding box to logger?
    verbose   Print additional messages to logger?
    mask      Mask to use. Default is none.
    stretch   Stretch the mask if necessary and possible?
    logfile   Name of file to write fit results.
    append    If logfile exists, append to it if True or overwrite it if False
    algorithm Algorithm to use. Supported values are "biweight", "chauvenet", "classic", "fit-half", and "hinges-fences". Minimum match is supported.
    fence     Fence value for hinges-fences. A negative value means use the entire data set (ie default to the "classic" algorithm). Ignored if algorithm is not "hinges-fences".
    center    Center to use for fit-half. Valid choices are "mean", "median", and "zero". Ignored if algorithm is not "fit-half".
    lside     For fit-half, use values <= center for real data if True? If False, use values >= center as real data. Ignored if algorithm is not "fit-half".
    zscore    For chauvenet, this is the target maximum number of standard deviations data may have to be included. If negative, use Chauvenet"s criterion. Ignored if algorithm is not "chauvenet".
    maxiter   For chauvenet, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, iterate until the zscore criterion is met. Ignored if algorithm is not "chauvenet".
    clmethod  Method to use for calculating classical statistics. Supported methods are "auto", "tiled", and "framework". Ignored if algorithm is not "classic".
    niter     For biweight, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, do a fast, simple computation (see description). Ignored if the algorithm is not "biweight".
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """information, analysis"""
    _info_desc_ = """Calculates statistical information from an image or image region"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'axes': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'region': {'anyof': [{'type': 'cPath', 'coerce': _coerce.expand_path}, {'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cDict'}]}, 'box': {'type': 'cStr', 'coerce': _coerce.to_str}, 'chans': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stokes': {'type': 'cStr', 'coerce': _coerce.to_str}, 'listit': {'type': 'cBool'}, 'verbose': {'type': 'cBool'}, 'mask': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stretch': {'type': 'cBool'}, 'logfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'append': {'type': 'cBool'}, 'algorithm': {'type': 'cStr', 'coerce': _coerce.to_str}, 'fence': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'center': {'type': 'cStr', 'coerce': _coerce.to_str}, 'lside': {'type': 'cBool'}, 'zscore': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'maxiter': {'type': 'cInt'}, 'clmethod': {'type': 'cStr', 'coerce': _coerce.to_str}, 'niter': {'type': 'cInt'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 11 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __algorithm_dflt( self, glb ):
        return 'classic'

    def __algorithm( self, glb ):
        if 'algorithm' in glb: return glb['algorithm']
        return 'classic'

    def __verbose_dflt( self, glb ):
        return True

    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        return True

    def __listit_dflt( self, glb ):
        return True

    def __listit( self, glb ):
        if 'listit' in glb: return glb['listit']
        return True

    def __logfile_dflt( self, glb ):
        return ''

    def __logfile( self, glb ):
        if 'logfile' in glb: return glb['logfile']
        return ''

    def __mask_dflt( self, glb ):
        return ''

    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        return ''

    def __axes_dflt( self, glb ):
        return [ ]

    def __axes( self, glb ):
        if 'axes' in glb: return glb['axes']
        return [ ]

    def __stokes_dflt( self, glb ):
        return ''

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return ''

    def __region_dflt( self, glb ):
        return ''

    def __region( self, glb ):
        if 'region' in glb: return glb['region']
        return ''

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __box_dflt( self, glb ):
        return ''

    def __box( self, glb ):
        if 'box' in glb: return glb['box']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __lside_dflt( self, glb ):
        if self.__algorithm( glb ) == "fit-half": return bool(True)
        return None
    def __center_dflt( self, glb ):
        if self.__algorithm( glb ) == "fit-half": return "mean"
        return None
    def __stretch_dflt( self, glb ):
        if self.__mask( glb ) != "": return bool(False)
        return None
    def __fence_dflt( self, glb ):
        if self.__algorithm( glb ) == "hinges-fences": return float(-1)
        return None
    def __clmethod_dflt( self, glb ):
        if self.__algorithm( glb ) == "classic": return "auto"
        return None
    def __zscore_dflt( self, glb ):
        if self.__algorithm( glb ) == "chauvenet": return float(-1)
        return None
    def __maxiter_dflt( self, glb ):
        if self.__algorithm( glb ) == "chauvenet": return int(-1)
        return None
    def __niter_dflt( self, glb ):
        if self.__algorithm( glb ) == "biweight": return int(3)
        return None
    def __append_dflt( self, glb ):
        if self.__logfile( glb ) != "": return bool(True)
        return None

    #--------- return subparam values -------------------------------------------------
    def __stretch( self, glb ):
        if 'stretch' in glb: return glb['stretch']
        dflt = self.__stretch_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __append( self, glb ):
        if 'append' in glb: return glb['append']
        dflt = self.__append_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __fence( self, glb ):
        if 'fence' in glb: return glb['fence']
        dflt = self.__fence_dflt( glb )
        if dflt is not None: return dflt
        return float(-1)
    def __center( self, glb ):
        if 'center' in glb: return glb['center']
        dflt = self.__center_dflt( glb )
        if dflt is not None: return dflt
        return 'mean'
    def __lside( self, glb ):
        if 'lside' in glb: return glb['lside']
        dflt = self.__lside_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __zscore( self, glb ):
        if 'zscore' in glb: return glb['zscore']
        dflt = self.__zscore_dflt( glb )
        if dflt is not None: return dflt
        return float(-1)
    def __maxiter( self, glb ):
        if 'maxiter' in glb: return glb['maxiter']
        dflt = self.__maxiter_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)
    def __clmethod( self, glb ):
        if 'clmethod' in glb: return glb['clmethod']
        dflt = self.__clmethod_dflt( glb )
        if dflt is not None: return dflt
        return 'auto'
    def __niter( self, glb ):
        if 'niter' in glb: return glb['niter']
        dflt = self.__niter_dflt( glb )
        if dflt is not None: return dflt
        return int(3)

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __axes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__axes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ ]
        description = 'List of axes to evaluate statistics over. Default is all axes.'
        value = self.__axes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'axes': value},{'axes': self.__schema['axes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('axes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __region_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__region_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Region selection. Default is to use the full image.'
        value = self.__region( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'region': value},{'region': self.__schema['region']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('region',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __box_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__box_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Rectangular region(s) to select in direction plane. Default is to use the entire direction plane.'
        value = self.__box( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'box': value},{'box': self.__schema['box']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('box',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __chans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__chans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Channels to use. Default is to use all channels.'
        value = self.__chans( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('chans',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stokes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stokes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Stokes planes to use. Default is to use all Stokes planes.'
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('stokes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __listit_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__listit_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Print stats and bounding box to logger?'
        value = self.__listit( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'listit': value},{'listit': self.__schema['listit']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('listit',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __verbose_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__verbose_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Print additional messages to logger?'
        value = self.__verbose( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('verbose',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __mask_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__mask_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Mask to use. Default is none.'
        value = self.__mask( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-11.11s =\x1B[0m %s%-23s%s' % ('mask',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __stretch_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stretch_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__stretch_dflt( self.__globals_( ) ) is not None:
             description = 'Stretch the mask if necessary and possible?'
             value = self.__stretch( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stretch': value},{'stretch': self.__schema['stretch']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('stretch',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __logfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__logfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of file to write fit results.'
        value = self.__logfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'logfile': value},{'logfile': self.__schema['logfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-11.11s =\x1B[0m %s%-23s%s' % ('logfile',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __append_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__append_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__append_dflt( self.__globals_( ) ) is not None:
             description = 'If logfile exists, append to it if True or overwrite it if False'
             value = self.__append( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'append': value},{'append': self.__schema['append']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('append',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __algorithm_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__algorithm_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'classic'
        description = 'Algorithm to use. Supported values are "biweight", "chauvenet", "classic", "fit-half", and "hinges-fences". Minimum match is supported.'
        value = self.__algorithm( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'algorithm': value},{'algorithm': self.__schema['algorithm']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-11.11s =\x1B[0m %s%-23s%s' % ('algorithm',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __fence_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__fence_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(-1)
        if self.__fence_dflt( self.__globals_( ) ) is not None:
             description = 'Fence value for hinges-fences. A negative value means use the entire data set (ie default to the "classic" algorithm). Ignored if algorithm is not "hinges-fences".'
             value = self.__fence( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'fence': value},{'fence': self.__schema['fence']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('fence',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __center_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__center_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'mean'
        if self.__center_dflt( self.__globals_( ) ) is not None:
             description = 'Center to use for fit-half. Valid choices are "mean", "median", and "zero". Ignored if algorithm is not "fit-half".'
             value = self.__center( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'center': value},{'center': self.__schema['center']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('center',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __lside_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__lside_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__lside_dflt( self.__globals_( ) ) is not None:
             description = 'For fit-half, use values <= center for real data if True? If False, use values >= center as real data. Ignored if algorithm is not "fit-half".'
             value = self.__lside( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'lside': value},{'lside': self.__schema['lside']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('lside',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __zscore_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__zscore_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(-1)
        if self.__zscore_dflt( self.__globals_( ) ) is not None:
             description = 'For chauvenet, this is the target maximum number of standard deviations data may have to be included. If negative, use Chauvenet"s criterion. Ignored if algorithm is not "chauvenet".'
             value = self.__zscore( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'zscore': value},{'zscore': self.__schema['zscore']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('zscore',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __maxiter_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__maxiter_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-1)
        if self.__maxiter_dflt( self.__globals_( ) ) is not None:
             description = 'For chauvenet, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, iterate until the zscore criterion is met. Ignored if algorithm is not "chauvenet".'
             value = self.__maxiter( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'maxiter': value},{'maxiter': self.__schema['maxiter']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('maxiter',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __clmethod_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__clmethod_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'auto'
        if self.__clmethod_dflt( self.__globals_( ) ) is not None:
             description = 'Method to use for calculating classical statistics. Supported methods are "auto", "tiled", and "framework". Ignored if algorithm is not "classic".'
             value = self.__clmethod( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'clmethod': value},{'clmethod': self.__schema['clmethod']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('clmethod',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __niter_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__niter_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(3)
        if self.__niter_dflt( self.__globals_( ) ) is not None:
             description = 'For biweight, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, do a fast, simple computation (see description). Ignored if the algorithm is not "biweight".'
             value = self.__niter( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'niter': value},{'niter': self.__schema['niter']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-8.8s =\x1B[0m %s%-23s%s' % ('niter',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'mask' in glb: del glb['mask']
        if 'verbose' in glb: del glb['verbose']
        if 'lside' in glb: del glb['lside']
        if 'center' in glb: del glb['center']
        if 'stretch' in glb: del glb['stretch']
        if 'imagename' in glb: del glb['imagename']
        if 'fence' in glb: del glb['fence']
        if 'axes' in glb: del glb['axes']
        if 'listit' in glb: del glb['listit']
        if 'logfile' in glb: del glb['logfile']
        if 'clmethod' in glb: del glb['clmethod']
        if 'algorithm' in glb: del glb['algorithm']
        if 'zscore' in glb: del glb['zscore']
        if 'maxiter' in glb: del glb['maxiter']
        if 'chans' in glb: del glb['chans']
        if 'region' in glb: del glb['region']
        if 'niter' in glb: del glb['niter']
        if 'box' in glb: del glb['box']
        if 'append' in glb: del glb['append']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# imstat -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__axes_inp( )
        self.__region_inp( )
        self.__box_inp( )
        self.__chans_inp( )
        self.__stokes_inp( )
        self.__listit_inp( )
        self.__verbose_inp( )
        self.__mask_inp( )
        self.__stretch_inp( )
        self.__logfile_inp( )
        self.__append_inp( )
        self.__algorithm_inp( )
        self.__fence_inp( )
        self.__center_inp( )
        self.__lside_inp( )
        self.__zscore_inp( )
        self.__maxiter_inp( )
        self.__clmethod_inp( )
        self.__niter_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "imstat.last" if os.path.isfile("imstat.last") else "imstat.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('imstat.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['axes'] = self.__axes( self.__globals_( ) )
        _invocation_parameters['region'] = self.__region( self.__globals_( ) )
        _invocation_parameters['box'] = self.__box( self.__globals_( ) )
        _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
        _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
        _invocation_parameters['listit'] = self.__listit( self.__globals_( ) )
        _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
        _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
        _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
        _invocation_parameters['logfile'] = self.__logfile( self.__globals_( ) )
        _invocation_parameters['append'] = self.__append( self.__globals_( ) )
        _invocation_parameters['algorithm'] = self.__algorithm( self.__globals_( ) )
        _invocation_parameters['fence'] = self.__fence( self.__globals_( ) )
        _invocation_parameters['center'] = self.__center( self.__globals_( ) )
        _invocation_parameters['lside'] = self.__lside( self.__globals_( ) )
        _invocation_parameters['zscore'] = self.__zscore( self.__globals_( ) )
        _invocation_parameters['maxiter'] = self.__maxiter( self.__globals_( ) )
        _invocation_parameters['clmethod'] = self.__clmethod( self.__globals_( ) )
        _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imstat( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, axes=None, region=None, box=None, chans=None, stokes=None, listit=None, verbose=None, mask=None, stretch=None, logfile=None, append=None, algorithm=None, fence=None, center=None, lside=None, zscore=None, maxiter=None, clmethod=None, niter=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imstat.pre')
        _postfile = os.path.realpath('imstat.last')
        task_result = None
        _arguments = [imagename,axes,region,box,chans,stokes,listit,verbose,mask,stretch,logfile,append,algorithm,fence,center,lside,zscore,maxiter,clmethod,niter]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if axes is not None: local_global['axes'] = axes
            if region is not None: local_global['region'] = region
            if box is not None: local_global['box'] = box
            if chans is not None: local_global['chans'] = chans
            if stokes is not None: local_global['stokes'] = stokes
            if listit is not None: local_global['listit'] = listit
            if verbose is not None: local_global['verbose'] = verbose
            if mask is not None: local_global['mask'] = mask
            if logfile is not None: local_global['logfile'] = logfile
            if algorithm is not None: local_global['algorithm'] = algorithm

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['axes'] = self.__axes( local_global )
            _invocation_parameters['region'] = self.__region( local_global )
            _invocation_parameters['box'] = self.__box( local_global )
            _invocation_parameters['chans'] = self.__chans( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )
            _invocation_parameters['listit'] = self.__listit( local_global )
            _invocation_parameters['verbose'] = self.__verbose( local_global )
            _invocation_parameters['mask'] = self.__mask( local_global )
            _invocation_parameters['logfile'] = self.__logfile( local_global )
            _invocation_parameters['algorithm'] = self.__algorithm( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['stretch'] = self.__stretch( _invocation_parameters ) if stretch is None else stretch
            _invocation_parameters['append'] = self.__append( _invocation_parameters ) if append is None else append
            _invocation_parameters['fence'] = self.__fence( _invocation_parameters ) if fence is None else fence
            _invocation_parameters['center'] = self.__center( _invocation_parameters ) if center is None else center
            _invocation_parameters['lside'] = self.__lside( _invocation_parameters ) if lside is None else lside
            _invocation_parameters['zscore'] = self.__zscore( _invocation_parameters ) if zscore is None else zscore
            _invocation_parameters['maxiter'] = self.__maxiter( _invocation_parameters ) if maxiter is None else maxiter
            _invocation_parameters['clmethod'] = self.__clmethod( _invocation_parameters ) if clmethod is None else clmethod
            _invocation_parameters['niter'] = self.__niter( _invocation_parameters ) if niter is None else niter

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['axes'] = self.__axes( self.__globals_( ) )
            _invocation_parameters['region'] = self.__region( self.__globals_( ) )
            _invocation_parameters['box'] = self.__box( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['listit'] = self.__listit( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
            _invocation_parameters['logfile'] = self.__logfile( self.__globals_( ) )
            _invocation_parameters['append'] = self.__append( self.__globals_( ) )
            _invocation_parameters['algorithm'] = self.__algorithm( self.__globals_( ) )
            _invocation_parameters['fence'] = self.__fence( self.__globals_( ) )
            _invocation_parameters['center'] = self.__center( self.__globals_( ) )
            _invocation_parameters['lside'] = self.__lside( self.__globals_( ) )
            _invocation_parameters['zscore'] = self.__zscore( self.__globals_( ) )
            _invocation_parameters['maxiter'] = self.__maxiter( self.__globals_( ) )
            _invocation_parameters['clmethod'] = self.__clmethod( self.__globals_( ) )
            _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imstat( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'imstat', [ 'imagename=' + repr(_pc.document['imagename']), 'axes=' + repr(_pc.document['axes']), 'region=' + repr(_pc.document['region']), 'box=' + repr(_pc.document['box']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'listit=' + repr(_pc.document['listit']), 'verbose=' + repr(_pc.document['verbose']), 'mask=' + repr(_pc.document['mask']), 'stretch=' + repr(_pc.document['stretch']), 'logfile=' + repr(_pc.document['logfile']), 'append=' + repr(_pc.document['append']), 'algorithm=' + repr(_pc.document['algorithm']), 'fence=' + repr(_pc.document['fence']), 'center=' + repr(_pc.document['center']), 'lside=' + repr(_pc.document['lside']), 'zscore=' + repr(_pc.document['zscore']), 'maxiter=' + repr(_pc.document['maxiter']), 'clmethod=' + repr(_pc.document['clmethod']), 'niter=' + repr(_pc.document['niter']) ] )
            task_result = _imstat_t( _pc.document['imagename'],_pc.document['axes'],_pc.document['region'],_pc.document['box'],_pc.document['chans'],_pc.document['stokes'],_pc.document['listit'],_pc.document['verbose'],_pc.document['mask'],_pc.document['stretch'],_pc.document['logfile'],_pc.document['append'],_pc.document['algorithm'],_pc.document['fence'],_pc.document['center'],_pc.document['lside'],_pc.document['zscore'],_pc.document['maxiter'],_pc.document['clmethod'],_pc.document['niter'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('imstat')
            casalog.post("Exception Reported: Error in imstat: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'imstat', task_result )

        #Added if _imstat_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

imstat = _imstat( )


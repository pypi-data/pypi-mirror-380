##################### generated by xml-casa (v2) from getephemtable.xml #############
##################### ee42dc427cda73f59a313d88491d20a7 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_getephemtable import getephemtable as _getephemtable_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _getephemtable:
    """
    getephemtable ---- Query the JPL-Horizons database for ephemeris data and create a CASA table

    
    This task retrieves the ephemeris data of a specific ephemeris object by sending
    a query to JPL's Horizons system and creates the ephemeris data stored in a CASA table
    format.

    --------- parameter descriptions ---------------------------------------------

    objectname  Name of ephemeris object. The common name of major bodies such as
                 planets known in CASA will be converted into the (NAIF/SPK) ID. If the parameter, asis
                 is set to True, objectname is passed to the query as is to the JPL-Horizons system.
                 If the object ID is used asis must be set to True.
                
                         Default: '' 
                
                            Example: 
                            objectname='Titan'
                            objectname='606' (should set asis=True in this case)
    asis        A toggle for objectname check to be done or not before sending a query to the JPL-Horizons system. 
                Default: False 
                
                As described in objectname parameter description, when asis=False, objectname is checked 
                against the known objects (a list of the supported ephemeris sources in setjy task plus 
                a few others) in CASA (See the getephemtable Description section in CASA Docs).
                Setting asis=True will skip this check/conversion thus objectname has to be uniquly 
                recognized by the JPL-Horzions system.
                For example, objectname='Jupiter' with asis=True results in the JPL-Horizons system 
                to return no ephemeris data as multiple objects matches with the name.
    timerange   Time range of ephemeris data to be queried.
                Default: ''
                
                Standard CASA timerange specification('T0~T1'),YY/MM/DD/hh:mm,
                or by Modified Julian date or Julian date if the string is prefixed by 'MJD' or 'JD'.
                
                   Example:
                   timerange = '2023/09/01/20:45~2023/09/02/04:00'
                   (Note: Both start and end times need to be fully specified starting with YYYY 
                    but hours or minutes can be omitted  as long as the
                    start and stop times are distinguishable. The omitted hours or minutes are translated as '00')
                   timerange = 'MJD 60175.1~60176.1'
    interval    Interval or step size of ephemeris data
                Default: '5m' 
                
                A string with integer value and unit (minutes, hours, days) or
                a string with integer value without unit (to produce equal time interval defined by
                timerange/interval).
                The unit can be given as the first few characters, e.g. 'm', 'min', 'h', or 'd'.
                
                Note: The JPL-Horizons query allows the step size by calendar months or years however
                the task will not convert such data to the CASA table as Measures requires the ephemeris
                table data in equal time interval.  When the calendar months or years is specified 
                for interval, the task execution will result in a SEVERE error. The raw query results
                will be saved even such a case if rawdatafile parameter is specified.
                
                   Example:
                
                   interval='5min'
                   interval='5minutes'
                   interval='1h'
                   interval='1d'
    outfile     Output CASA table name
                Default: '' 
                
                   Example: 
                   outfile = 'Titan_MJD60175.1-60176.1.tab'
    rawdatafile Name of raw ephemeris data file before converting into a CASA table (optional)
                Default: '' = No raw ephemeris data is saved 
                
                Useful for debugging when errors occured and/or no output table is produced.
                
                    Example: rawdatafile='Titan-jplhorizons.dat'
    overwrite   If True, overwrite output files (outfile, rawdatafile), if already exist
                Default: False
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Query the JPL-Horizons database for ephemeris data and create a CASA table"""

    __schema = {'objectname': {'type': 'cStr', 'coerce': _coerce.to_str}, 'asis': {'type': 'cBool'}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'interval': {'type': 'cStr', 'coerce': _coerce.to_str}, 'outfile': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'rawdatafile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 11 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __objectname_dflt( self, glb ):
        return ''

    def __objectname( self, glb ):
        if 'objectname' in glb: return glb['objectname']
        return ''

    def __asis_dflt( self, glb ):
        return False

    def __asis( self, glb ):
        if 'asis' in glb: return glb['asis']
        return False

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __rawdatafile_dflt( self, glb ):
        return ''

    def __rawdatafile( self, glb ):
        if 'rawdatafile' in glb: return glb['rawdatafile']
        return ''

    def __timerange_dflt( self, glb ):
        return ''

    def __timerange( self, glb ):
        if 'timerange' in glb: return glb['timerange']
        return ''

    def __interval_dflt( self, glb ):
        return '5m'

    def __interval( self, glb ):
        if 'interval' in glb: return glb['interval']
        return '5m'

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __objectname_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__objectname_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of ephemeris object'
        value = self.__objectname( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'objectname': value},{'objectname': self.__schema['objectname']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('objectname',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __asis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__asis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'A toggle for objectnamne check to be done or not'
        value = self.__asis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'asis': value},{'asis': self.__schema['asis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('asis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __timerange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__timerange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'time range of ephemeris data to be queried'
        value = self.__timerange( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'timerange': value},{'timerange': self.__schema['timerange']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('timerange',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __interval_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__interval_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return '5m'
        description = 'Interval or step size of ephemeris data'
        value = self.__interval( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'interval': value},{'interval': self.__schema['interval']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('interval',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of output CASA table'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __rawdatafile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__rawdatafile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of raw ephemeris data file (optional)'
        value = self.__rawdatafile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'rawdatafile': value},{'rawdatafile': self.__schema['rawdatafile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('rawdatafile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Overwrite output files if aready exist'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'outfile' in glb: del glb['outfile']
        if 'asis' in glb: del glb['asis']
        if 'objectname' in glb: del glb['objectname']
        if 'interval' in glb: del glb['interval']
        if 'overwrite' in glb: del glb['overwrite']
        if 'timerange' in glb: del glb['timerange']
        if 'rawdatafile' in glb: del glb['rawdatafile']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# getephemtable -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__objectname_inp( )
        self.__asis_inp( )
        self.__timerange_inp( )
        self.__interval_inp( )
        self.__outfile_inp( )
        self.__rawdatafile_inp( )
        self.__overwrite_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "getephemtable.last" if os.path.isfile("getephemtable.last") else "getephemtable.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('getephemtable.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['objectname'] = self.__objectname( self.__globals_( ) )
        _invocation_parameters['asis'] = self.__asis( self.__globals_( ) )
        _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
        _invocation_parameters['interval'] = self.__interval( self.__globals_( ) )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['rawdatafile'] = self.__rawdatafile( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#getephemtable( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, objectname=None, asis=None, timerange=None, interval=None, outfile=None, rawdatafile=None, overwrite=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('getephemtable.pre')
        _postfile = os.path.realpath('getephemtable.last')
        task_result = None
        _arguments = [objectname,asis,timerange,interval,outfile,rawdatafile,overwrite]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if objectname is not None: local_global['objectname'] = objectname
            if asis is not None: local_global['asis'] = asis
            if timerange is not None: local_global['timerange'] = timerange
            if interval is not None: local_global['interval'] = interval
            if outfile is not None: local_global['outfile'] = outfile
            if rawdatafile is not None: local_global['rawdatafile'] = rawdatafile
            if overwrite is not None: local_global['overwrite'] = overwrite

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['objectname'] = self.__objectname( local_global )
            _invocation_parameters['asis'] = self.__asis( local_global )
            _invocation_parameters['timerange'] = self.__timerange( local_global )
            _invocation_parameters['interval'] = self.__interval( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['rawdatafile'] = self.__rawdatafile( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['objectname'] = self.__objectname( self.__globals_( ) )
            _invocation_parameters['asis'] = self.__asis( self.__globals_( ) )
            _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
            _invocation_parameters['interval'] = self.__interval( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['rawdatafile'] = self.__rawdatafile( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#getephemtable( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'getephemtable', [ 'objectname=' + repr(_pc.document['objectname']), 'asis=' + repr(_pc.document['asis']), 'timerange=' + repr(_pc.document['timerange']), 'interval=' + repr(_pc.document['interval']), 'outfile=' + repr(_pc.document['outfile']), 'rawdatafile=' + repr(_pc.document['rawdatafile']), 'overwrite=' + repr(_pc.document['overwrite']) ] )
            task_result = _getephemtable_t( _pc.document['objectname'],_pc.document['asis'],_pc.document['timerange'],_pc.document['interval'],_pc.document['outfile'],_pc.document['rawdatafile'],_pc.document['overwrite'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('getephemtable')
            casalog.post("Exception Reported: Error in getephemtable: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'getephemtable', task_result )

        #Added if _getephemtable_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

getephemtable = _getephemtable( )


##################### generated by xml-casa (v2) from polfromgain.xml ###############
##################### 81a3ae6d4c5273a4ac930473d37d18bb ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_polfromgain import polfromgain as _polfromgain_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _polfromgain:
    """
    polfromgain ---- Derive linear polarization from gain ratio

    
    TBD
    

    --------- parameter descriptions ---------------------------------------------

    vis      Name of input MS from which gaincal caltable in tablein originated.  Used to extract geometry information not available in the tablein caltable.
    tablein  Input gain calibration table corresponding to MS specified in vis.
    caltable Optional output calibration table which will contain source polarization-corrected gains, if specified
    paoffset Manual position angle offset (clockwise, in deg); added to value stored in the MS FEED subtable.  Use with care, since downstream calibration operation using polfromgain results will change according to this position angle offset.
    minpacov Minimum parallactic angle coverage (deg) required for Q,U estimation. Reliable Q,U estimation depends on adequate parallactic angle coverage, and this parameter enforces a minimum allowable range of parallactic angle (per antenna) for unflagged gain solutions before the Q,U esimation is attempted.  (If caltable is specified, gains for antennas failing the minpacov criteria will be corrected by the per-spw average of Q,U estimates from good antennas.)
    [1;42mRETURNS[1;m     void

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Derive linear polarization from gain ratio"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr', 'coerce': _coerce.to_str}, 'paoffset': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'minpacov': {'type': 'cFloat', 'coerce': _coerce.to_float}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 8 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __tablein_dflt( self, glb ):
        return ''

    def __tablein( self, glb ):
        if 'tablein' in glb: return glb['tablein']
        return ''

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __minpacov_dflt( self, glb ):
        return float(30.0)

    def __minpacov( self, glb ):
        if 'minpacov' in glb: return glb['minpacov']
        return float(30.0)

    def __paoffset_dflt( self, glb ):
        return float(0.0)

    def __paoffset( self, glb ):
        if 'paoffset' in glb: return glb['paoffset']
        return float(0.0)



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input MeasurementSet'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __tablein_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__tablein_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Input gain calibration table'
        value = self.__tablein( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'tablein': value},{'tablein': self.__schema['tablein']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('tablein',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __caltable_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__caltable_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Optional output caltable (for polarization-corrected gains if specified)'
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('caltable',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __paoffset_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__paoffset_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(0.0)
        description = 'Manual feed position angle offset (clockwise, in deg)'
        value = self.__paoffset( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'paoffset': value},{'paoffset': self.__schema['paoffset']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('paoffset',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __minpacov_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minpacov_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(30.0)
        description = 'Minimum parallactic angle coverage (deg) required for Q,U estimation'
        value = self.__minpacov( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minpacov': value},{'minpacov': self.__schema['minpacov']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-8.8s = %s%-23s%s' % ('minpacov',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'tablein' in glb: del glb['tablein']
        if 'vis' in glb: del glb['vis']
        if 'minpacov' in glb: del glb['minpacov']
        if 'paoffset' in glb: del glb['paoffset']
        if 'caltable' in glb: del glb['caltable']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# polfromgain -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__tablein_inp( )
        self.__caltable_inp( )
        self.__paoffset_inp( )
        self.__minpacov_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "polfromgain.last" if os.path.isfile("polfromgain.last") else "polfromgain.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('polfromgain.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['tablein'] = self.__tablein( self.__globals_( ) )
        _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
        _invocation_parameters['paoffset'] = self.__paoffset( self.__globals_( ) )
        _invocation_parameters['minpacov'] = self.__minpacov( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-8s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#polfromgain( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, tablein=None, caltable=None, paoffset=None, minpacov=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('polfromgain.pre')
        _postfile = os.path.realpath('polfromgain.last')
        task_result = None
        _arguments = [vis,tablein,caltable,paoffset,minpacov]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if tablein is not None: local_global['tablein'] = tablein
            if caltable is not None: local_global['caltable'] = caltable
            if paoffset is not None: local_global['paoffset'] = paoffset
            if minpacov is not None: local_global['minpacov'] = minpacov

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['tablein'] = self.__tablein( local_global )
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['paoffset'] = self.__paoffset( local_global )
            _invocation_parameters['minpacov'] = self.__minpacov( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['tablein'] = self.__tablein( self.__globals_( ) )
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['paoffset'] = self.__paoffset( self.__globals_( ) )
            _invocation_parameters['minpacov'] = self.__minpacov( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-8s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#polfromgain( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'polfromgain', [ 'vis=' + repr(_pc.document['vis']), 'tablein=' + repr(_pc.document['tablein']), 'caltable=' + repr(_pc.document['caltable']), 'paoffset=' + repr(_pc.document['paoffset']), 'minpacov=' + repr(_pc.document['minpacov']) ] )
            task_result = _polfromgain_t( _pc.document['vis'],_pc.document['tablein'],_pc.document['caltable'],_pc.document['paoffset'],_pc.document['minpacov'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('polfromgain')
            casalog.post("Exception Reported: Error in polfromgain: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'polfromgain', task_result )

        #Added if _polfromgain_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

polfromgain = _polfromgain( )


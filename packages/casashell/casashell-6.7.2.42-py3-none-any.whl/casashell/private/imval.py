##################### generated by xml-casa (v2) from imval.xml #####################
##################### 1d88123b4a2ed930af9fa51382cba5b9 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_imval import imval as _imval_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imval:
    """
    imval ---- Get the data value(s) and/or mask value in an image.

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    region    Region selection. Empty string (default) means use rules for box/chans/stokes specification.
    box       Rectangular region(s) to select in direction plane. Empty string (default) means use the reference pixel.
    chans     Channels to use. Default is to use all channels.
    stokes    Stokes planes to use. Planes specified must be contiguous. Default is to use all Stokes planes.
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    The data point(s) to be retrieved are those found in the specified
    region, which may be:
    1. A region file or text string, with the following caveat:
    * If the specified region is complex (eg, a union or intersection of multiple regions,
    only the first simple region in this set is used.
    * If the region is not rectangular, then the rectangular region that circumscribes the
    specified region (ie the bounding box) is used to retrieve values, since the returned
    arrays must be rectangular. The resulting mask values in this case are the result of
    anding the image mask values with the specified region mask values, eg
    if a pixel falls outside the specified region but within the bounding box, its returned
    mask value will be false even if its image mask value is true.
    2. A region specified by a set of rectangular
    pixel coordinates, the channel ranges and/or the Stokes.
    
    For directed output, run as
    myoutput = imval()
    
    
    Keyword arguments:
    imagename -- Name of input image
    Default: none; Example: imagename='ngc5921_task.im'
    region -- Region selection. Empty string (default) means use rules for box/chans/stokes specification.
    Example: region='myimage.im.rgn'
    region='region1'
    box --  Rectangular region to select in direction plane. Empty string (default) means use the reference pixel.
    Default: '' (referencepixel values for the Directional coord);
    Example: box='10,10,50,50'
    box = '10,10,30,30,35,35,50,50' (two boxes)
    chans -- Channels to use. Default is to use all channels.
    stokes -- Stokes planes to use. Planes specified must be contiguous. Default is to use all Stokes planes.
    Example: stokes='IQUV';
    stokes='I,Q'
    
    General procedure:
    
    1.  Specify inputs, then
    
    2.  myoutput = imval()
    or specify inputs directly in calling sequence to task
    myoutput = imsval(imagename='image.im', etc)
    
    3.  myoutput['KEYS'] will contain the result associated with any
    of the keys given below
    
    KEYS CURRENTLY AVAILABLE
    blc          - absolute PIXEL coordinate of the bottom left corner of
    the bounding box surrounding the selected region
    trc          - the absolute PIXEL coordinate of the top right corner
    of the bounding box surrOunding the selected region
    axes         - List the data stored in each axis of the data block.
    unit         - unit of the returned data values.
    data         - data value(s) found in the given region
    mask         - mask value(s) found in the given region. See important
    note above regarding returned mask values for
    non-rectangular regions.
    
    NOTE: The data returned is in the same order as it is internally
    stored, typically RA, DEC, spectral, stokes. Also both the data
    and mask values are returned as Python Numpy arrays, for more
    information on how to manipulate them see
    http://numpy.scipy.org/#array_interface
    
    
    Additional Examples
    # The value and mask value at a single point (5,17,2,Q)
    imval( 'myImage', box='5,5,17,17', chans=2, stokes='Q' )
    
    # Select and report on two box regions
    # box 1, bottom-left coord is 2,3 and top-right coord is 14,15
    # box 2, bottom-left coord is 30,31 and top-right coord is 42,43
    # Note that only the boxes for the
    imval( 'myImage', box='2,3,14,15;30,31,42,43' )
    
    # Select the same two box regions but only channels 4 and 5
    imval( 'myImage', box='2,3,14,15;30,31,42,43', chan='4~5' )
    
    # Select all channels greater the 20 as well as channel 0.
    # Then the mean and standard deviation are printed
    # Note that the data returned is a Python numpy array which
    # has built in operations such as min, max, and means as
    # demonstrated here.
    results = imval( 'myImage', chans='>20;0' )
    imval_data=results['data']
    mask=results['mask']
    # holds the absolute coordinates of the associated pixels in imval_data
    coords = results['coords']
    print "Data max: ", imval_data.max(), "  mean is ", imval_data.mean()
    swapped_data=imval_data.swapaxes(0,2)
    swapped_mask=mask.swapaxes(0,2)
    print "Data values for 21st channel: n", swapped_data[0]
    print "Mask values for 21st channel: n", swapped_mask[0]


    """

    _info_group_ = """analysis, information"""
    _info_desc_ = """Get the data value(s) and/or mask value in an image."""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'region': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'box': {'type': 'cStr', 'coerce': _coerce.to_str}, 'chans': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stokes': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 9 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __stokes_dflt( self, glb ):
        return ''

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return ''

    def __region_dflt( self, glb ):
        return ''

    def __region( self, glb ):
        if 'region' in glb: return glb['region']
        return ''

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __box_dflt( self, glb ):
        return ''

    def __box( self, glb ):
        if 'box' in glb: return glb['box']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __region_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__region_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Region selection. Empty string (default) means use rules for box/chans/stokes specification.'
        value = self.__region( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'region': value},{'region': self.__schema['region']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('region',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __box_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__box_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Rectangular region(s) to select in direction plane. Empty string (default) means use the reference pixel.'
        value = self.__box( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'box': value},{'box': self.__schema['box']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('box',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __chans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__chans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Channels to use. Default is to use all channels.'
        value = self.__chans( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('chans',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stokes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stokes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Stokes planes to use. Planes specified must be contiguous. Default is to use all Stokes planes.'
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('stokes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'imagename' in glb: del glb['imagename']
        if 'chans' in glb: del glb['chans']
        if 'region' in glb: del glb['region']
        if 'box' in glb: del glb['box']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# imval -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__region_inp( )
        self.__box_inp( )
        self.__chans_inp( )
        self.__stokes_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "imval.last" if os.path.isfile("imval.last") else "imval.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('imval.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['region'] = self.__region( self.__globals_( ) )
        _invocation_parameters['box'] = self.__box( self.__globals_( ) )
        _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
        _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imval( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, region=None, box=None, chans=None, stokes=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imval.pre')
        _postfile = os.path.realpath('imval.last')
        task_result = None
        _arguments = [imagename,region,box,chans,stokes]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if region is not None: local_global['region'] = region
            if box is not None: local_global['box'] = box
            if chans is not None: local_global['chans'] = chans
            if stokes is not None: local_global['stokes'] = stokes

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['region'] = self.__region( local_global )
            _invocation_parameters['box'] = self.__box( local_global )
            _invocation_parameters['chans'] = self.__chans( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['region'] = self.__region( self.__globals_( ) )
            _invocation_parameters['box'] = self.__box( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imval( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'imval', [ 'imagename=' + repr(_pc.document['imagename']), 'region=' + repr(_pc.document['region']), 'box=' + repr(_pc.document['box']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']) ] )
            task_result = _imval_t( _pc.document['imagename'],_pc.document['region'],_pc.document['box'],_pc.document['chans'],_pc.document['stokes'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('imval')
            casalog.post("Exception Reported: Error in imval: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'imval', task_result )

        #Added if _imval_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

imval = _imval( )


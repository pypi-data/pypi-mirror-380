##################### generated by xml-casa (v2) from testconcat.xml ################
##################### ab4e58e1beb9e0a5c4d05f506de8e425 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_testconcat import testconcat as _testconcat_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _testconcat:
    """
    testconcat ---- Concatenate the subtables of several visibility data sets, not the MAIN bulk data.

    --------- parameter descriptions ---------------------------------------------

    vis           Name(s) of input visibility files to be test-concatenated
    testconcatvis Name of output MS containing the merged subtables
    freqtol       Frequency shift tolerance for considering data as the same spwid
    dirtol        Direction shift tolerance for considering data as the same field
    copypointing  Copy all rows of the POINTING table.

    --------- examples -----------------------------------------------------------

    
    
    The list of data sets given in the vis argument are concatenated into an output
    data set in testconcatvis without the bulk data of the MAIN table.
    This is useful for obtaining the information in the merged subtables without
    actually performing a time-consuming concatenation of the MAIN tables on disk.
    
    
    Keyword arguments:
    vis -- Name of input visibility files for which the subtables are to be combined
    default: none; example: vis = 'mydata.ms',
    vis=['src2.ms','ngc5921.ms','ngc315.ms']
    testconcatvis -- Name of MS that will contain the concatenated subtables
    default: none; example: testconcatvis='test.ms'
    
    freqtol -- Frequency shift tolerance for considering data to be in the same
    spwid.  The number of channels must also be the same.
    default: ''  do not combine unless frequencies are equal
    example: freqtol='10MHz' will not combine spwid unless they are
    within 10 MHz.
    Note: This option is useful to conbine spectral windows with very slight
    frequency differences caused by Doppler tracking, for example.
    
    dirtol -- Direction shift tolerance for considering data as the same field
    default: '' means always combine.
    example: dirtol='1.arcsec' will not combine data for a field unless
    their phase center differ by less than 1 arcsec.  If the field names
    are different in the input data sets, the name in the output data
    set will be the first relevant data set in the list.
    
    copypointing -- Make a proper copy of the POINTING subtable (can be time consuming).
    If False, the result is an empty POINTING table.
    default: True


    """

    _info_group_ = """manipulation"""
    _info_desc_ = """Concatenate the subtables of several visibility data sets, not the MAIN bulk data."""

    __schema = {'vis': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'testconcatvis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'freqtol': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'dirtol': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'copypointing': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 13 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __testconcatvis_dflt( self, glb ):
        return ''

    def __testconcatvis( self, glb ):
        if 'testconcatvis' in glb: return glb['testconcatvis']
        return ''

    def __dirtol_dflt( self, glb ):
        return ''

    def __dirtol( self, glb ):
        if 'dirtol' in glb: return glb['dirtol']
        return ''

    def __vis_dflt( self, glb ):
        return [  ]

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return [  ]

    def __copypointing_dflt( self, glb ):
        return True

    def __copypointing( self, glb ):
        if 'copypointing' in glb: return glb['copypointing']
        return True

    def __freqtol_dflt( self, glb ):
        return ''

    def __freqtol( self, glb ):
        if 'freqtol' in glb: return glb['freqtol']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-13.13s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __testconcatvis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__testconcatvis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__testconcatvis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'testconcatvis': value},{'testconcatvis': self.__schema['testconcatvis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-13.13s = %s%-23s%s' % ('testconcatvis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __freqtol_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__freqtol_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__freqtol( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'freqtol': value},{'freqtol': self.__schema['freqtol']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-13.13s = %s%-23s%s' % ('freqtol',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __dirtol_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dirtol_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__dirtol( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dirtol': value},{'dirtol': self.__schema['dirtol']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-13.13s = %s%-23s%s' % ('dirtol',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __copypointing_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__copypointing_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = ''
        value = self.__copypointing( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'copypointing': value},{'copypointing': self.__schema['copypointing']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-13.13s = %s%-23s%s' % ('copypointing',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'dirtol' in glb: del glb['dirtol']
        if 'freqtol' in glb: del glb['freqtol']
        if 'vis' in glb: del glb['vis']
        if 'testconcatvis' in glb: del glb['testconcatvis']
        if 'copypointing' in glb: del glb['copypointing']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# testconcat -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__testconcatvis_inp( )
        self.__freqtol_inp( )
        self.__dirtol_inp( )
        self.__copypointing_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "testconcat.last" if os.path.isfile("testconcat.last") else "testconcat.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('testconcat.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['testconcatvis'] = self.__testconcatvis( self.__globals_( ) )
        _invocation_parameters['freqtol'] = self.__freqtol( self.__globals_( ) )
        _invocation_parameters['dirtol'] = self.__dirtol( self.__globals_( ) )
        _invocation_parameters['copypointing'] = self.__copypointing( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-13s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#testconcat( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, testconcatvis=None, freqtol=None, dirtol=None, copypointing=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('testconcat.pre')
        _postfile = os.path.realpath('testconcat.last')
        task_result = None
        _arguments = [vis,testconcatvis,freqtol,dirtol,copypointing]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if testconcatvis is not None: local_global['testconcatvis'] = testconcatvis
            if freqtol is not None: local_global['freqtol'] = freqtol
            if dirtol is not None: local_global['dirtol'] = dirtol
            if copypointing is not None: local_global['copypointing'] = copypointing

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['testconcatvis'] = self.__testconcatvis( local_global )
            _invocation_parameters['freqtol'] = self.__freqtol( local_global )
            _invocation_parameters['dirtol'] = self.__dirtol( local_global )
            _invocation_parameters['copypointing'] = self.__copypointing( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['testconcatvis'] = self.__testconcatvis( self.__globals_( ) )
            _invocation_parameters['freqtol'] = self.__freqtol( self.__globals_( ) )
            _invocation_parameters['dirtol'] = self.__dirtol( self.__globals_( ) )
            _invocation_parameters['copypointing'] = self.__copypointing( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-13s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#testconcat( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'testconcat', [ 'vis=' + repr(_pc.document['vis']), 'testconcatvis=' + repr(_pc.document['testconcatvis']), 'freqtol=' + repr(_pc.document['freqtol']), 'dirtol=' + repr(_pc.document['dirtol']), 'copypointing=' + repr(_pc.document['copypointing']) ] )
            task_result = _testconcat_t( _pc.document['vis'],_pc.document['testconcatvis'],_pc.document['freqtol'],_pc.document['dirtol'],_pc.document['copypointing'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('testconcat')
            casalog.post("Exception Reported: Error in testconcat: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'testconcat', task_result )

        #Added if _testconcat_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

testconcat = _testconcat( )


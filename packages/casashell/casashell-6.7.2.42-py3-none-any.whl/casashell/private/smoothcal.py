##################### generated by xml-casa (v2) from smoothcal.xml #################
##################### 5e44183b734257bc390af5e908f562f2 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_smoothcal import smoothcal as _smoothcal_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _smoothcal:
    """
    smoothcal ---- Smooth calibration solution(s) derived from one or more sources

    
    A G- or T-type gain calibration can be smoothed.  Amplitude and
    phase are currently smoothed with the same time.  Calibration values
    will be smoothed over all fields.
    

    --------- parameter descriptions ---------------------------------------------

    vis        Name of input visibility file (MS)
    tablein    Input calibration table
    caltable   Output calibration table (overwrite tablein if unspecified)
    field      Field name list
    smoothtype Smoothing filter to use
    smoothtime Smoothing time (sec)
    ratesmooth Use rate aware smoothing. This is an experimental feature
    [1;42mRETURNS[1;m       void

    --------- examples -----------------------------------------------------------

    
    
    
    A G- or T-type gain calibration can be smoothed.  The amplitude and
    phase smoothing times are currently the same.  Calibration values
    will be smoothed for only the specified fields.  Smoothing is
    performed independently per field, per spw, and per antenna.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    tablein -- Input calibration table (G or T)
    default: none; example: tablein='ngc5921.gcal'
    caltable -- Output calibration table (smoothed)
    default: ''  (will overwrite tablein);
    example: caltable='ngc5921_smooth.gcal'
    field -- subset of fields to select and smooth
    default: '' means all; example: field='0319_415_1,3C286'
    smoothtype -- The smoothing filter to be used for both amp and phase
    default: 'median'; example: smoothtype='mean'
    Options: 'median','mean'
    smoothtime -- Smoothing filter time (sec)
    default: 300.0; example: smoothtime=60.
    ratesmooth --  On fringefit data use rate-aware smoothing
    default: False
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Smooth calibration solution(s) derived from one or more sources"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr', 'coerce': _coerce.to_str}, 'field': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'smoothtype': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'median', 'mean' ]}, 'smoothtime': {'anyof': [{'type': 'cFloat', 'coerce': _coerce.to_float}, {'type': 'cInt'}]}, 'ratesmooth': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 10 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __tablein_dflt( self, glb ):
        return ''

    def __tablein( self, glb ):
        if 'tablein' in glb: return glb['tablein']
        return ''

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __smoothtime_dflt( self, glb ):
        return float(60.0)

    def __smoothtime( self, glb ):
        if 'smoothtime' in glb: return glb['smoothtime']
        return float(60.0)

    def __smoothtype_dflt( self, glb ):
        return 'median'

    def __smoothtype( self, glb ):
        if 'smoothtype' in glb: return glb['smoothtype']
        return 'median'

    def __field_dflt( self, glb ):
        return [  ]

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return [  ]

    def __ratesmooth_dflt( self, glb ):
        return False

    def __ratesmooth( self, glb ):
        if 'ratesmooth' in glb: return glb['ratesmooth']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input visibility file (MS)'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __tablein_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__tablein_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Input calibration table'
        value = self.__tablein( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'tablein': value},{'tablein': self.__schema['tablein']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('tablein',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __caltable_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__caltable_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Output calibration table (overwrite tablein if unspecified)'
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('caltable',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __field_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__field_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'Field name list'
        value = self.__field( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __smoothtype_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__smoothtype_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'median'
        description = 'Smoothing filter to use'
        value = self.__smoothtype( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'smoothtype': value},{'smoothtype': self.__schema['smoothtype']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('smoothtype',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __smoothtime_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__smoothtime_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(60.0)
        description = 'Smoothing time (sec)'
        value = self.__smoothtime( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'smoothtime': value},{'smoothtime': self.__schema['smoothtime']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('smoothtime',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __ratesmooth_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__ratesmooth_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'EXPERIMENTAL rate aware smoothing'
        value = self.__ratesmooth( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'ratesmooth': value},{'ratesmooth': self.__schema['ratesmooth']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('ratesmooth',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'tablein' in glb: del glb['tablein']
        if 'field' in glb: del glb['field']
        if 'smoothtime' in glb: del glb['smoothtime']
        if 'vis' in glb: del glb['vis']
        if 'caltable' in glb: del glb['caltable']
        if 'smoothtype' in glb: del glb['smoothtype']
        if 'ratesmooth' in glb: del glb['ratesmooth']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# smoothcal -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__tablein_inp( )
        self.__caltable_inp( )
        self.__field_inp( )
        self.__smoothtype_inp( )
        self.__smoothtime_inp( )
        self.__ratesmooth_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "smoothcal.last" if os.path.isfile("smoothcal.last") else "smoothcal.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('smoothcal.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['tablein'] = self.__tablein( self.__globals_( ) )
        _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
        _invocation_parameters['field'] = self.__field( self.__globals_( ) )
        _invocation_parameters['smoothtype'] = self.__smoothtype( self.__globals_( ) )
        _invocation_parameters['smoothtime'] = self.__smoothtime( self.__globals_( ) )
        _invocation_parameters['ratesmooth'] = self.__ratesmooth( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#smoothcal( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, tablein=None, caltable=None, field=None, smoothtype=None, smoothtime=None, ratesmooth=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('smoothcal.pre')
        _postfile = os.path.realpath('smoothcal.last')
        task_result = None
        _arguments = [vis,tablein,caltable,field,smoothtype,smoothtime,ratesmooth]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if tablein is not None: local_global['tablein'] = tablein
            if caltable is not None: local_global['caltable'] = caltable
            if field is not None: local_global['field'] = field
            if smoothtype is not None: local_global['smoothtype'] = smoothtype
            if smoothtime is not None: local_global['smoothtime'] = smoothtime
            if ratesmooth is not None: local_global['ratesmooth'] = ratesmooth

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['tablein'] = self.__tablein( local_global )
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['smoothtype'] = self.__smoothtype( local_global )
            _invocation_parameters['smoothtime'] = self.__smoothtime( local_global )
            _invocation_parameters['ratesmooth'] = self.__ratesmooth( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['tablein'] = self.__tablein( self.__globals_( ) )
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['smoothtype'] = self.__smoothtype( self.__globals_( ) )
            _invocation_parameters['smoothtime'] = self.__smoothtime( self.__globals_( ) )
            _invocation_parameters['ratesmooth'] = self.__ratesmooth( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#smoothcal( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'smoothcal', [ 'vis=' + repr(_pc.document['vis']), 'tablein=' + repr(_pc.document['tablein']), 'caltable=' + repr(_pc.document['caltable']), 'field=' + repr(_pc.document['field']), 'smoothtype=' + repr(_pc.document['smoothtype']), 'smoothtime=' + repr(_pc.document['smoothtime']), 'ratesmooth=' + repr(_pc.document['ratesmooth']) ] )
            task_result = _smoothcal_t( _pc.document['vis'],_pc.document['tablein'],_pc.document['caltable'],_pc.document['field'],_pc.document['smoothtype'],_pc.document['smoothtime'],_pc.document['ratesmooth'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('smoothcal')
            casalog.post("Exception Reported: Error in smoothcal: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'smoothcal', task_result )

        #Added if _smoothcal_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

smoothcal = _smoothcal( )


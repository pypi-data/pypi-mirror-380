##################### generated by xml-casa (v2) from listvis.xml ###################
##################### 74d4b217d2565f7f95a58f1b6a2778be ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_listvis import listvis as _listvis_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _listvis:
    """
    listvis ---- List measurement set visibilities.

    
    
    This task lists measurement set visibility data under a number of
    input selection conditions.  The measurement set data columns that
    can be listed are: the raw data, float_data, corrected data, model data,
    and residual (corrected - model) data.
    
    The output table format is dynamic.  Field, Spectral Window, and
    Channel columns are not displayed if the column contents are uniform.
    For example, if "spw = '1'" is specified, the spw column will not be
    displayed.  When a column is not displayed, a message is sent to the
    logger and terminal indicating that the column values are uniform and
    listing the uniform value.
    
    Table column descriptions:
    
    COLUMN NAME       DESCRIPTION
    -----------       -----------
    Date/Time         Time stamp of data sample (YYMMDD/HH:MM:SS UT)
    Intrf             Interferometer baseline (antenna names)
    UVDist            uv-distance (units of wavelength)
    Fld               Field ID (if more than 1)
    SpW               Spectral Window ID (if more than 1)
    Chn               Channel number (if more than 1)
    (Correlated       Correlated polarizations (eg: RR, LL, XY)
    polarization)     Sub-columns are: Amp, Phs, Wt, F
    Amp               Visibility amplitude
    Phs               Visibility phase (deg)
    Wt                Weight of visibility measurement
    F                 Flag: 'F' = flagged datum; ' ' = unflagged
    UVW               UVW coordinates (meters)
    
    
    Input Parameters:
    vis         Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    
    options     List options: default = 'ap'
    Not yet implemented for suboptions
    
    datacolumn  Visibility file data column:
    default = 'data':  options are
    data, float_data, corrected, model, residual (corrected-model)
    
    field       Select data based on field id(s) or name(s)
    default: ''==>all; example: field='1'
    field='0~2' field ids inclusive from 0 to 2
    field='3C*' all field names starting with 3C
    
    spw         Select spectral window, channel to list
    default: '0:0' --> spw=0, chan=0
    spw='2:34' spectral window 2, channel 34
    
    selectdata  Toggle the following 7 selection parameters.
    default: False; example: selectdata=True
    If false, the following parameters are reset
    to default values.
    
    antenna     Select calibration data based on antenna
    default: ''-->all; examples:
    antenna = '5,6'; antenna index 5 and 6 solutions
    antenna = '05,06'; antenna names '05' and '06 solutions
    
    timerange   Select time range to list
    default: ''-->all; examples:
    timerange='10:37:50.1'; list data for this sampling interval
    timerange='<10:37:25'; list data before 10:37:25
    
    correlation Select polarization correlations to list
    default: ''-->all; examples:
    correlation='RR LL'; list RR and LL correlations
    correlation='XX XY'; list XX and XY correlations
    
    scan        Select scans to list
    default: ''-->all; examples:
    scan='2'; list scan 2
    scan='>2'; list scan numbers greater than 2
    
    feed        (not yet implemented)
    
    array       (not yet implemented)
    
    observation Select by observation ID.
    
    uvrange     Select baseline lengths to list.
    default: ''--> all; examples:
    uvrange='<5klambda'; less than 5 kilo-wavelengths
    Caution: Input units default to meters.
    Listed units are always wavelengths.
    
    average     (not yet implemented)
    
    showflags   (not yet implemented)
    
    pagerows    rows per page of listing
    default: 50; 0 --> do not paginate
    
    listfile    write output to disk; will not overwrite
    default: '' --> write to screen
    listfile = 'solutions.txt'
    
    

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input visibility file
    options     List options: ap only
    datacolumn  Column to list: data, float_data, corrected, model, residual
    field       Field names or index to be listed
    spw         Spectral window channels
    selectdata  Other data selection parameters
    antenna     Antenna/baselines
    timerange   Time range
    correlation Correlations
    scan        Scan numbers
    feed        Multi-feed numbers (Not yet implemented)
    array       Array numbers (Not yet implemented)
    observation Select by observation ID(s)
    uvrange     uv range
    average     Averaging mode
    showflags   Show flagged data (Not yet implemented)
    pagerows    Rows per page
    listfile    Output file
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    
    
    This task lists measurement set visibility data under a number of
    input selection conditions.  The measurement set data columns that
    can be listed are: the raw data, float_data, corrected data, model data,
    and residual (corrected - model) data.
    
    The output table format is dynamic.  Field, Spectral Window, and
    Channel columns are not displayed if the column contents are uniform.
    For example, if "spw = '1'" is specified, the spw column will not be
    displayed.  When a column is not displayed, a message is sent to the
    logger and terminal indicating that the column values are uniform and
    listing the uniform value.
    
    Table column descriptions:
    
    COLUMN NAME       DESCRIPTION
    -----------       -----------
    Date/Time         Time stamp of data sample (YYMMDD/HH:MM:SS UT)
    Intrf             Interferometer baseline (antenna names)
    UVDist            uv-distance (units of wavelength)
    Fld               Field ID (if more than 1)
    SpW               Spectral Window ID (if more than 1)
    Chn               Channel number (if more than 1)
    (Correlated       Correlated polarizations (eg: RR, LL, XY)
    polarization)     Sub-columns are: Amp, Phs, Wt, F
    Amp               Visibility amplitude
    Phs               Visibility phase (deg)
    Wt                Weight of visibility measurement
    F                 Flag: 'F' = flagged datum; ' ' = unflagged
    UVW               UVW coordinates (meters)
    
    
    Input Parameters:
    vis         Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    
    options     List options: default = 'ap'
    Not yet implemented for suboptions
    
    datacolumn  Visibility file data column:
    default = 'data':  options are
    data, float_data, corrected, model, residual (corrected-model)
    
    field       Select data based on field id(s) or name(s)
    default: ''==>all; example: field='1'
    field='0~2' field ids inclusive from 0 to 2
    field='3C*' all field names starting with 3C
    
    spw         Select spectral window, channel to list
    default: '0:0' --> spw=0, chan=0
    spw='2:34' spectral window 2, channel 34
    
    selectdata  Toggle the following 7 selection parameters.
    default: False; example: selectdata=True
    If false, the following parameters are reset
    to default values.
    
    antenna     Select calibration data based on antenna
    default: ''-->all; examples:
    antenna = '5,6'; antenna index 5 and 6 solutions
    antenna = '05,06'; antenna names '05' and '06 solutions
    
    timerange   Select time range to list
    default: ''-->all; examples:
    timerange='10:37:50.1'; list data for this sampling interval
    timerange='<10:37:25'; list data before 10:37:25
    
    correlation Select polarization correlations to list
    default: ''-->all; examples:
    correlation='RR LL'; list RR and LL correlations
    correlation='XX XY'; list XX and XY correlations
    
    scan        Select scans to list
    default: ''-->all; examples:
    scan='2'; list scan 2
    scan='>2'; list scan numbers greater than 2
    
    feed        (not yet implemented)
    
    array       (not yet implemented)
    
    observation Select by observation ID(s).
    default: ''-->all;
    example: observation='0' (select obsID 0)
    
    uvrange     Select baseline lengths to list.
    default: ''--> all; examples:
    uvrange='<5klambda'; less than 5 kilo-wavelengths
    Caution: Input units default to meters.
    Listed units are always wavelengths.
    
    average     (not yet implemented)
    
    showflags   (not yet implemented)
    
    pagerows    rows per page of listing
    default: 50; 0 --> do not paginate
    
    listfile    write output to disk; will not overwrite
    default: '' --> write to screen
    listfile = 'solutions.txt'
    
    


    """

    _info_group_ = """information, analysis"""
    _info_desc_ = """List measurement set visibilities."""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'options': {'type': 'cStr', 'coerce': _coerce.to_str}, 'datacolumn': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'model', 'corrected', 'residual', 'float_data', 'data' ]}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'selectdata': {'type': 'cBool'}, 'antenna': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'correlation': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'feed': {'type': 'cStr', 'coerce': _coerce.to_str}, 'array': {'type': 'cStr', 'coerce': _coerce.to_str}, 'observation': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cInt'}]}, 'uvrange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'average': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'none', 'chan', 'both', '', 'time' ]}, 'showflags': {'type': 'cBool'}, 'pagerows': {'type': 'cInt'}, 'listfile': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 14 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __average_dflt( self, glb ):
        return ''

    def __average( self, glb ):
        if 'average' in glb: return glb['average']
        return ''

    def __listfile_dflt( self, glb ):
        return ''

    def __listfile( self, glb ):
        if 'listfile' in glb: return glb['listfile']
        return ''

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __selectdata_dflt( self, glb ):
        return False

    def __selectdata( self, glb ):
        if 'selectdata' in glb: return glb['selectdata']
        return False

    def __spw_dflt( self, glb ):
        return '*'

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return '*'

    def __pagerows_dflt( self, glb ):
        return int(50)

    def __pagerows( self, glb ):
        if 'pagerows' in glb: return glb['pagerows']
        return int(50)

    def __datacolumn_dflt( self, glb ):
        return 'data'

    def __datacolumn( self, glb ):
        if 'datacolumn' in glb: return glb['datacolumn']
        return 'data'

    def __showflags_dflt( self, glb ):
        return False

    def __showflags( self, glb ):
        if 'showflags' in glb: return glb['showflags']
        return False

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __options_dflt( self, glb ):
        return 'ap'

    def __options( self, glb ):
        if 'options' in glb: return glb['options']
        return 'ap'

    #--------- return non subparam/when values ---------------------------------------------
    def __observation( self, glb ):
        if 'observation' in glb: return glb['observation']
        return ''

    #--------- return inp/go default --------------------------------------------------
    def __antenna_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __scan_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __array_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __correlation_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __feed_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __uvrange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __observation_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __timerange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        dflt = self.__antenna_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __timerange( self, glb ):
        if 'timerange' in glb: return glb['timerange']
        dflt = self.__timerange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __correlation( self, glb ):
        if 'correlation' in glb: return glb['correlation']
        dflt = self.__correlation_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __scan( self, glb ):
        if 'scan' in glb: return glb['scan']
        dflt = self.__scan_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __feed( self, glb ):
        if 'feed' in glb: return glb['feed']
        dflt = self.__feed_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __array( self, glb ):
        if 'array' in glb: return glb['array']
        dflt = self.__array_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __uvrange( self, glb ):
        if 'uvrange' in glb: return glb['uvrange']
        dflt = self.__uvrange_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __options_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__options_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'ap'
        description = 'List options: ap only'
        value = self.__options( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'options': value},{'options': self.__schema['options']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('options',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __datacolumn_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__datacolumn_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'data'
        description = 'Column to list: data, float_data, corrected, model, residual'
        value = self.__datacolumn( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'datacolumn': value},{'datacolumn': self.__schema['datacolumn']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('datacolumn',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __field_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__field_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Field names or index to be listed'
        value = self.__field( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return '*'
        description = 'Spectral window channels'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __selectdata_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__selectdata_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Other data selection parameters'
        value = self.__selectdata( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'selectdata': value},{'selectdata': self.__schema['selectdata']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23s%s' % ('selectdata',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __antenna_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__antenna_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__antenna_dflt( self.__globals_( ) ) is not None:
             description = 'Antenna/baselines'
             value = self.__antenna( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('antenna',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __timerange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__timerange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__timerange_dflt( self.__globals_( ) ) is not None:
             description = 'Time range'
             value = self.__timerange( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'timerange': value},{'timerange': self.__schema['timerange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('timerange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __correlation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__correlation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__correlation_dflt( self.__globals_( ) ) is not None:
             description = 'Correlations'
             value = self.__correlation( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'correlation': value},{'correlation': self.__schema['correlation']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('correlation',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __scan_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__scan_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__scan_dflt( self.__globals_( ) ) is not None:
             description = 'Scan numbers'
             value = self.__scan( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'scan': value},{'scan': self.__schema['scan']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('scan',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __feed_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__feed_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__feed_dflt( self.__globals_( ) ) is not None:
             description = 'Multi-feed numbers (Not yet implemented)'
             value = self.__feed( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'feed': value},{'feed': self.__schema['feed']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('feed',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __array_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__array_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__array_dflt( self.__globals_( ) ) is not None:
             description = 'Array numbers (Not yet implemented)'
             value = self.__array( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'array': value},{'array': self.__schema['array']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('array',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __observation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__observation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select by observation ID(s)'
        value = self.__observation( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'observation': value},{'observation': self.__schema['observation']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('observation',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __uvrange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__uvrange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__uvrange_dflt( self.__globals_( ) ) is not None:
             description = 'uv range'
             value = self.__uvrange( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'uvrange': value},{'uvrange': self.__schema['uvrange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-11.11s =\x1B[0m %s%-23s%s' % ('uvrange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __average_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__average_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Averaging mode'
        value = self.__average( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'average': value},{'average': self.__schema['average']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('average',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __showflags_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showflags_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Show flagged data (Not yet implemented)'
        value = self.__showflags( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showflags': value},{'showflags': self.__schema['showflags']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('showflags',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __pagerows_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__pagerows_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(50)
        description = 'Rows per page'
        value = self.__pagerows( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'pagerows': value},{'pagerows': self.__schema['pagerows']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('pagerows',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __listfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__listfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Output file'
        value = self.__listfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'listfile': value},{'listfile': self.__schema['listfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-14.14s = %s%-23s%s' % ('listfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'antenna' in glb: del glb['antenna']
        if 'pagerows' in glb: del glb['pagerows']
        if 'field' in glb: del glb['field']
        if 'datacolumn' in glb: del glb['datacolumn']
        if 'scan' in glb: del glb['scan']
        if 'vis' in glb: del glb['vis']
        if 'options' in glb: del glb['options']
        if 'array' in glb: del glb['array']
        if 'correlation' in glb: del glb['correlation']
        if 'feed' in glb: del glb['feed']
        if 'showflags' in glb: del glb['showflags']
        if 'uvrange' in glb: del glb['uvrange']
        if 'listfile' in glb: del glb['listfile']
        if 'average' in glb: del glb['average']
        if 'observation' in glb: del glb['observation']
        if 'spw' in glb: del glb['spw']
        if 'selectdata' in glb: del glb['selectdata']
        if 'timerange' in glb: del glb['timerange']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# listvis -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__options_inp( )
        self.__datacolumn_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__selectdata_inp( )
        self.__antenna_inp( )
        self.__timerange_inp( )
        self.__correlation_inp( )
        self.__scan_inp( )
        self.__feed_inp( )
        self.__array_inp( )
        self.__observation_inp( )
        self.__uvrange_inp( )
        self.__average_inp( )
        self.__showflags_inp( )
        self.__pagerows_inp( )
        self.__listfile_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "listvis.last" if os.path.isfile("listvis.last") else "listvis.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('listvis.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['options'] = self.__options( self.__globals_( ) )
        _invocation_parameters['datacolumn'] = self.__datacolumn( self.__globals_( ) )
        _invocation_parameters['field'] = self.__field( self.__globals_( ) )
        _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
        _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
        _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
        _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
        _invocation_parameters['correlation'] = self.__correlation( self.__globals_( ) )
        _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
        _invocation_parameters['feed'] = self.__feed( self.__globals_( ) )
        _invocation_parameters['array'] = self.__array( self.__globals_( ) )
        _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
        _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
        _invocation_parameters['average'] = self.__average( self.__globals_( ) )
        _invocation_parameters['showflags'] = self.__showflags( self.__globals_( ) )
        _invocation_parameters['pagerows'] = self.__pagerows( self.__globals_( ) )
        _invocation_parameters['listfile'] = self.__listfile( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#listvis( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, options=None, datacolumn=None, field=None, spw=None, selectdata=None, antenna=None, timerange=None, correlation=None, scan=None, feed=None, array=None, observation=None, uvrange=None, average=None, showflags=None, pagerows=None, listfile=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('listvis.pre')
        _postfile = os.path.realpath('listvis.last')
        task_result = None
        _arguments = [vis,options,datacolumn,field,spw,selectdata,antenna,timerange,correlation,scan,feed,array,observation,uvrange,average,showflags,pagerows,listfile]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if options is not None: local_global['options'] = options
            if datacolumn is not None: local_global['datacolumn'] = datacolumn
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if selectdata is not None: local_global['selectdata'] = selectdata
            if observation is not None: local_global['observation'] = observation
            if average is not None: local_global['average'] = average
            if showflags is not None: local_global['showflags'] = showflags
            if pagerows is not None: local_global['pagerows'] = pagerows
            if listfile is not None: local_global['listfile'] = listfile

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['options'] = self.__options( local_global )
            _invocation_parameters['datacolumn'] = self.__datacolumn( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['selectdata'] = self.__selectdata( local_global )
            _invocation_parameters['observation'] = self.__observation( local_global )
            _invocation_parameters['average'] = self.__average( local_global )
            _invocation_parameters['showflags'] = self.__showflags( local_global )
            _invocation_parameters['pagerows'] = self.__pagerows( local_global )
            _invocation_parameters['listfile'] = self.__listfile( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['antenna'] = self.__antenna( _invocation_parameters ) if antenna is None else antenna
            _invocation_parameters['timerange'] = self.__timerange( _invocation_parameters ) if timerange is None else timerange
            _invocation_parameters['correlation'] = self.__correlation( _invocation_parameters ) if correlation is None else correlation
            _invocation_parameters['scan'] = self.__scan( _invocation_parameters ) if scan is None else scan
            _invocation_parameters['feed'] = self.__feed( _invocation_parameters ) if feed is None else feed
            _invocation_parameters['array'] = self.__array( _invocation_parameters ) if array is None else array
            _invocation_parameters['uvrange'] = self.__uvrange( _invocation_parameters ) if uvrange is None else uvrange

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['options'] = self.__options( self.__globals_( ) )
            _invocation_parameters['datacolumn'] = self.__datacolumn( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
            _invocation_parameters['correlation'] = self.__correlation( self.__globals_( ) )
            _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
            _invocation_parameters['feed'] = self.__feed( self.__globals_( ) )
            _invocation_parameters['array'] = self.__array( self.__globals_( ) )
            _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
            _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
            _invocation_parameters['average'] = self.__average( self.__globals_( ) )
            _invocation_parameters['showflags'] = self.__showflags( self.__globals_( ) )
            _invocation_parameters['pagerows'] = self.__pagerows( self.__globals_( ) )
            _invocation_parameters['listfile'] = self.__listfile( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#listvis( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'listvis', [ 'vis=' + repr(_pc.document['vis']), 'options=' + repr(_pc.document['options']), 'datacolumn=' + repr(_pc.document['datacolumn']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'selectdata=' + repr(_pc.document['selectdata']), 'antenna=' + repr(_pc.document['antenna']), 'timerange=' + repr(_pc.document['timerange']), 'correlation=' + repr(_pc.document['correlation']), 'scan=' + repr(_pc.document['scan']), 'feed=' + repr(_pc.document['feed']), 'array=' + repr(_pc.document['array']), 'observation=' + repr(_pc.document['observation']), 'uvrange=' + repr(_pc.document['uvrange']), 'average=' + repr(_pc.document['average']), 'showflags=' + repr(_pc.document['showflags']), 'pagerows=' + repr(_pc.document['pagerows']), 'listfile=' + repr(_pc.document['listfile']) ] )
            task_result = _listvis_t( _pc.document['vis'],_pc.document['options'],_pc.document['datacolumn'],_pc.document['field'],_pc.document['spw'],_pc.document['selectdata'],_pc.document['antenna'],_pc.document['timerange'],_pc.document['correlation'],_pc.document['scan'],_pc.document['feed'],_pc.document['array'],_pc.document['observation'],_pc.document['uvrange'],_pc.document['average'],_pc.document['showflags'],_pc.document['pagerows'],_pc.document['listfile'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('listvis')
            casalog.post("Exception Reported: Error in listvis: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'listvis', task_result )

        #Added if _listvis_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

listvis = _listvis( )


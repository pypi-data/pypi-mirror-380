##################### generated by xml-casa (v2) from specflux.xml ##################
##################### 5ea1d87b65024c4cc319bd392691af0f ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_specflux import specflux as _specflux_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _specflux:
    """
    specflux ---- Report spectral profile and calculate spectral flux over a user specified region

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    region    Region selection. Default is to use the full image.
    box       Rectangular region to select in direction plane. Default is to use the entire direction plane.
    chans     Channels to use. Default is to use all channels.
    stokes    Stokes planes to use. Default is to use all Stokes planes.
    mask      Mask to use. Default is none.
    stretch   Stretch the mask if necessary and possible?
    function  Aggregate function to use for computing per channel values. Supported values are "flux density", "mean", "median", "sum". Minimal match supported.
    unit      Unit to use for the spectral flux calculation. Must be conformant with a typical spectral axis unit.
    major     Major axis of overriding restoring beam. If specified, must be a valid quantity.
    minor     Minor axis of overriding restoring beam. If specified, must be a valid quantity
    logfile   File which to write details. Default is to not write to a file.
    overwrite Overwrite exisitng ouput file if it exists?
    [1;42mRETURNS[1;m      record

    --------- examples -----------------------------------------------------------

    
    PARAMETER SUMMARY
    imagename        Name of the input (CASA, FITS, MIRIAD) image
    region           Region selection. Default is to use
    the full image.
    box              Rectangular region to select in direction plane.
    for details. Default is to use the entire direction plane.
    chans            Channels to use. Default is to use
    all channels.
    stokes           Stokes planes to use. Default is to use
    all Stokes planes.
    mask             Mask to use. Default is none.
    stretch          Stretch the input mask if necessary and possible. Only used if a mask is specified.
    
    function         Aggregate function to use for computing per channel values. Supported values are
    "flux density", "mean", "median", "sum". Minimal match supported.
    unit             Unit to use for the spectral flux calculation. Must be conformant with a typical
    spectral axis unit (ie something conformant with a velocity, frequency, or length).
    Velocity units may only be used if the spectral coordinate has a rest frequency and
    if it is > 0.
    major            Major axis of overriding restoring beam. If specified, must be a valid quantity
    If specified, minor must also be specified. The overriding beam is used for computing
    flux and flux density values. Ignored if the image brightness units do not contain
    "/beam". Example "4arcsec".
    minor            Minor axis of overriding restoring beam. If specified, must be a valid quantity.
    If specified, major must also be specified. See help on parameter major for details.
    Example: "3arcsec".
    logfile          Name of file to which to write tabular output. Default is to not write to a file.
    overwrite        Controls if an already existing log file by the
    same name can be overwritten. If true, the user is not prompted, the file
    if it exists is automatically overwritten.
    
    This application retrieves details of an image spectrum which has been integrated over a specified
    region (or the entire image if no region has been specified).
    
    One may specify which function to use to aggregate pixel values using the function parameter. Supported
    values are "flux density", "mean", "median", and "sum". Minimal match is supported.
    
    The spectral flux is reported in units flux density consistent with the image brightness unit times the
    specified spectral unit (eg, Jy*km/s, K*arcsec2*km/s). If the units are K*arcsec2..., multiply the
    reported value by 2.3504430539098e-8*d*d, where d is the distance in pc, to convert to units of K*pc2...
    If provided, major and minor will be used to compute the beam size, and hence the per channel flux
    densities (if function="flux density"), overriding the input image beam information, if present.
    
    # write spectrum to file that has been integrated over
    # rectangular region, using only pixels with non-negative values.
    # if the log file already exists, overwrite it with the new data.
    specflux(imagename="my.im", box="10,10,45,50", mask="my.im>=0", unit="km/s", logfile="my.log", overwrite=True)
    
    # Extract the spectral profile using "sum" as the aggregate function from a cube over a given region:
    specflux(imagename="myimage.image", box="10,10,45,50", mask="my.im>=0", function="sum", unit="km/s", logfile="profile.log", overwrite=True)
    
    # Calculate the integrated line flux over a given region and channel range
    # (this value will be reported as "Total Flux" in the output of specflux)
    specflux(imagename="myimage.image", region="myregion.crtf", chans="14~25", unit="km/s", logfile="integrated_line_flux.log", overwrite=True)


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Report spectral profile and calculate spectral flux over a user specified region"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'region': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'box': {'type': 'cStr', 'coerce': _coerce.to_str}, 'chans': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stokes': {'type': 'cStr', 'coerce': _coerce.to_str}, 'mask': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stretch': {'type': 'cBool'}, 'function': {'type': 'cStr', 'coerce': _coerce.to_str}, 'unit': {'type': 'cStr', 'coerce': _coerce.to_str}, 'major': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'minor': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'logfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 12 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __unit_dflt( self, glb ):
        return 'km/s'

    def __unit( self, glb ):
        if 'unit' in glb: return glb['unit']
        return 'km/s'

    def __minor_dflt( self, glb ):
        return ''

    def __minor( self, glb ):
        if 'minor' in glb: return glb['minor']
        return ''

    def __logfile_dflt( self, glb ):
        return ''

    def __logfile( self, glb ):
        if 'logfile' in glb: return glb['logfile']
        return ''

    def __mask_dflt( self, glb ):
        return ''

    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        return ''

    def __function_dflt( self, glb ):
        return 'flux density'

    def __function( self, glb ):
        if 'function' in glb: return glb['function']
        return 'flux density'

    def __stokes_dflt( self, glb ):
        return ''

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return ''

    def __region_dflt( self, glb ):
        return ''

    def __region( self, glb ):
        if 'region' in glb: return glb['region']
        return ''

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __box_dflt( self, glb ):
        return ''

    def __box( self, glb ):
        if 'box' in glb: return glb['box']
        return ''

    def __major_dflt( self, glb ):
        return ''

    def __major( self, glb ):
        if 'major' in glb: return glb['major']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __overwrite_dflt( self, glb ):
        if self.__logfile( glb ) != "": return bool(False)
        return None
    def __stretch_dflt( self, glb ):
        if self.__mask( glb ) != "": return bool(False)
        return None

    #--------- return subparam values -------------------------------------------------
    def __stretch( self, glb ):
        if 'stretch' in glb: return glb['stretch']
        dflt = self.__stretch_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        dflt = self.__overwrite_dflt( glb )
        if dflt is not None: return dflt
        return False

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __region_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__region_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Region selection. Default is to use the full image.'
        value = self.__region( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'region': value},{'region': self.__schema['region']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('region',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __box_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__box_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Rectangular region to select in direction plane. Default is to use the entire direction plane.'
        value = self.__box( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'box': value},{'box': self.__schema['box']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('box',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __chans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__chans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Channels to use. Default is to use all channels.'
        value = self.__chans( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('chans',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stokes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stokes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Stokes planes to use. Default is to use all Stokes planes.'
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('stokes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __mask_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__mask_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Mask to use. Default is none.'
        value = self.__mask( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-12.12s =\x1B[0m %s%-23s%s' % ('mask',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __stretch_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stretch_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__stretch_dflt( self.__globals_( ) ) is not None:
             description = 'Stretch the mask if necessary and possible?'
             value = self.__stretch( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stretch': value},{'stretch': self.__schema['stretch']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('stretch',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __function_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__function_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'flux density'
        description = 'Aggregate function to use for computing per channel values. Supported values are "flux density", "mean", "median", "sum". Minimal match supported.'
        value = self.__function( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'function': value},{'function': self.__schema['function']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('function',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __unit_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__unit_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'km/s'
        description = 'Unit to use for the spectral flux calculation. Must be conformant with a typical spectral axis unit.'
        value = self.__unit( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'unit': value},{'unit': self.__schema['unit']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('unit',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __major_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__major_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Major axis of overriding restoring beam. If specified, must be a valid quantity.'
        value = self.__major( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'major': value},{'major': self.__schema['major']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('major',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __minor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Minor axis of overriding restoring beam. If specified, must be a valid quantity'
        value = self.__minor( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minor': value},{'minor': self.__schema['minor']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('minor',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __logfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__logfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'File which to write details. Default is to not write to a file.'
        value = self.__logfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'logfile': value},{'logfile': self.__schema['logfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-12.12s =\x1B[0m %s%-23s%s' % ('logfile',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__overwrite_dflt( self.__globals_( ) ) is not None:
             description = 'Overwrite exisitng ouput file if it exists?'
             value = self.__overwrite( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'mask' in glb: del glb['mask']
        if 'stretch' in glb: del glb['stretch']
        if 'imagename' in glb: del glb['imagename']
        if 'logfile' in glb: del glb['logfile']
        if 'function' in glb: del glb['function']
        if 'chans' in glb: del glb['chans']
        if 'region' in glb: del glb['region']
        if 'box' in glb: del glb['box']
        if 'unit' in glb: del glb['unit']
        if 'overwrite' in glb: del glb['overwrite']
        if 'major' in glb: del glb['major']
        if 'minor' in glb: del glb['minor']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# specflux -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__region_inp( )
        self.__box_inp( )
        self.__chans_inp( )
        self.__stokes_inp( )
        self.__mask_inp( )
        self.__stretch_inp( )
        self.__function_inp( )
        self.__unit_inp( )
        self.__major_inp( )
        self.__minor_inp( )
        self.__logfile_inp( )
        self.__overwrite_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "specflux.last" if os.path.isfile("specflux.last") else "specflux.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('specflux.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['region'] = self.__region( self.__globals_( ) )
        _invocation_parameters['box'] = self.__box( self.__globals_( ) )
        _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
        _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
        _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
        _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
        _invocation_parameters['function'] = self.__function( self.__globals_( ) )
        _invocation_parameters['unit'] = self.__unit( self.__globals_( ) )
        _invocation_parameters['major'] = self.__major( self.__globals_( ) )
        _invocation_parameters['minor'] = self.__minor( self.__globals_( ) )
        _invocation_parameters['logfile'] = self.__logfile( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#specflux( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, region=None, box=None, chans=None, stokes=None, mask=None, stretch=None, function=None, unit=None, major=None, minor=None, logfile=None, overwrite=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('specflux.pre')
        _postfile = os.path.realpath('specflux.last')
        task_result = None
        _arguments = [imagename,region,box,chans,stokes,mask,stretch,function,unit,major,minor,logfile,overwrite]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if region is not None: local_global['region'] = region
            if box is not None: local_global['box'] = box
            if chans is not None: local_global['chans'] = chans
            if stokes is not None: local_global['stokes'] = stokes
            if mask is not None: local_global['mask'] = mask
            if function is not None: local_global['function'] = function
            if unit is not None: local_global['unit'] = unit
            if major is not None: local_global['major'] = major
            if minor is not None: local_global['minor'] = minor
            if logfile is not None: local_global['logfile'] = logfile

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['region'] = self.__region( local_global )
            _invocation_parameters['box'] = self.__box( local_global )
            _invocation_parameters['chans'] = self.__chans( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )
            _invocation_parameters['mask'] = self.__mask( local_global )
            _invocation_parameters['function'] = self.__function( local_global )
            _invocation_parameters['unit'] = self.__unit( local_global )
            _invocation_parameters['major'] = self.__major( local_global )
            _invocation_parameters['minor'] = self.__minor( local_global )
            _invocation_parameters['logfile'] = self.__logfile( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['stretch'] = self.__stretch( _invocation_parameters ) if stretch is None else stretch
            _invocation_parameters['overwrite'] = self.__overwrite( _invocation_parameters ) if overwrite is None else overwrite

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['region'] = self.__region( self.__globals_( ) )
            _invocation_parameters['box'] = self.__box( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
            _invocation_parameters['function'] = self.__function( self.__globals_( ) )
            _invocation_parameters['unit'] = self.__unit( self.__globals_( ) )
            _invocation_parameters['major'] = self.__major( self.__globals_( ) )
            _invocation_parameters['minor'] = self.__minor( self.__globals_( ) )
            _invocation_parameters['logfile'] = self.__logfile( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#specflux( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'specflux', [ 'imagename=' + repr(_pc.document['imagename']), 'region=' + repr(_pc.document['region']), 'box=' + repr(_pc.document['box']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'mask=' + repr(_pc.document['mask']), 'stretch=' + repr(_pc.document['stretch']), 'function=' + repr(_pc.document['function']), 'unit=' + repr(_pc.document['unit']), 'major=' + repr(_pc.document['major']), 'minor=' + repr(_pc.document['minor']), 'logfile=' + repr(_pc.document['logfile']), 'overwrite=' + repr(_pc.document['overwrite']) ] )
            task_result = _specflux_t( _pc.document['imagename'],_pc.document['region'],_pc.document['box'],_pc.document['chans'],_pc.document['stokes'],_pc.document['mask'],_pc.document['stretch'],_pc.document['function'],_pc.document['unit'],_pc.document['major'],_pc.document['minor'],_pc.document['logfile'],_pc.document['overwrite'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('specflux')
            casalog.post("Exception Reported: Error in specflux: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'specflux', task_result )

        #Added if _specflux_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

specflux = _specflux( )


##################### generated by xml-casa (v2) from imbaseline.xml ################
##################### 273b7c2d4e7f951c40d641253327d54b ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_imbaseline import imbaseline as _imbaseline_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imbaseline:
    """
    imbaseline ---- Image-based baseline subtraction for single-dish data

    Image-based baseline subtraction for single-dish data

    --------- parameter descriptions ---------------------------------------------

    imagename   Name of the input spectral line image
    linefile    output continuum subtracted image file name. If it is not specified, it will be imagename + "_bs".
    output_cont output continuum image. Name will be imagename + ".cont"
    bloutput    name of file in which best-fit parameters are written. No output if "" (default).
    maskmode    mode of setting additional channel masks. "list" and "auto" are available now.
    chans       Channels to be included in the fitting
    thresh      S/N threshold for linefinder
    avg_limit   channel averaging for broad lines
    minwidth    the minimum channel width to detect as a line
    edge        channels to drop at beginning and end of spectrum
    blfunc      baseline model function ["poly", "chebyshev", "cspline", "sinusoid", or "variable"(expert mode)]
    order       order of baseline model function
    npiece      number of element polynomials for cubic spline curve
    applyfft    automatically set wave numbers of sinusoids
    fftthresh   threshold to select wave numbers of sinusoids
    addwn       additional wave numbers to use
    rejwn       wave numbers NOT to use
    blparam     text file that stores per spectrum fit parameters
    clipniter   maximum iteration number for iterative fitting
    clipthresh  clipping threshold for iterative fitting
    dirkernel   Type of kernel to use to direction plane smoothing. Acceptable values are "none" to omit image smoothing(default), "boxcar" for a boxcar kernel, "gaussian" for a gaussian kernel, "image" to use an image as the kernel.
    major       Major axis for the kernels. Standard quantity representation. Must be specified for dirkernel="boxcar" or "gaussian".
    minor       Minor axis. Standard quantity representation. Must be specified for dirkernel="boxcar" or "gaussian".
    pa          Position angle used only for gaussian kernel. Standard quantity representation.
    kimage      Kernel image name. Only used if dirkernel="image".
    scale       Scale factor. -1.0 means auto-scale. Only used if dirkernel="image".
    spkernel    Type of spectral smoothing kernel. Acceptable values are "none" to omit smoothing(default), "gaussian" for a gaussian kernel, "boxcar" for a boxcar kernel.
    kwidth      smoothing kernel width in channel. Only used if spkernel="gaussian" or "boxcar".
    [1;42mRETURNS[1;m        any

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Image-based baseline subtraction for single-dish data"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'linefile': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'output_cont': {'type': 'cBool'}, 'bloutput': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'maskmode': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'auto', 'list', 'AUTO', 'LIST' ]}, 'chans': {'type': 'cStr', 'coerce': _coerce.to_str}, 'thresh': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'avg_limit': {'type': 'cInt'}, 'minwidth': {'type': 'cInt'}, 'edge': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'blfunc': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'variable', 'cspline', 'SINUSOID', 'CSPLINE', 'sinusoid', 'VARIABLE', 'POLY', 'poly', 'chebyshev', 'CHEBYSHEV' ]}, 'order': {'type': 'cInt'}, 'npiece': {'type': 'cInt'}, 'applyfft': {'type': 'cBool'}, 'fftthresh': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'addwn': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'rejwn': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'blparam': {'type': 'cStr', 'coerce': _coerce.to_str}, 'clipniter': {'type': 'cInt'}, 'clipthresh': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'dirkernel': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'none', 'gaussian', 'boxcar', 'image' ]}, 'major': {'type': 'cStr', 'coerce': _coerce.to_str}, 'minor': {'type': 'cStr', 'coerce': _coerce.to_str}, 'pa': {'type': 'cStr', 'coerce': _coerce.to_str}, 'kimage': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'scale': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'spkernel': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'none', 'gaussian', 'boxcar' ]}, 'kwidth': {'type': 'cInt'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 13 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __blfunc_dflt( self, glb ):
        return 'poly'

    def __blfunc( self, glb ):
        if 'blfunc' in glb: return glb['blfunc']
        return 'poly'

    def __maskmode_dflt( self, glb ):
        return 'list'

    def __maskmode( self, glb ):
        if 'maskmode' in glb: return glb['maskmode']
        return 'list'

    def __bloutput_dflt( self, glb ):
        return ''

    def __bloutput( self, glb ):
        if 'bloutput' in glb: return glb['bloutput']
        return ''

    def __spkernel_dflt( self, glb ):
        return 'none'

    def __spkernel( self, glb ):
        if 'spkernel' in glb: return glb['spkernel']
        return 'none'

    def __linefile_dflt( self, glb ):
        return ''

    def __linefile( self, glb ):
        if 'linefile' in glb: return glb['linefile']
        return ''

    def __output_cont_dflt( self, glb ):
        return False

    def __output_cont( self, glb ):
        if 'output_cont' in glb: return glb['output_cont']
        return False

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __dirkernel_dflt( self, glb ):
        return 'none'

    def __dirkernel( self, glb ):
        if 'dirkernel' in glb: return glb['dirkernel']
        return 'none'



    #--------- return inp/go default --------------------------------------------------
    def __clipthresh_dflt( self, glb ):
        if self.__blfunc( glb ) == "poly": return float(3.0)
        if self.__blfunc( glb ) == "chebyshev": return float(3.0)
        if self.__blfunc( glb ) == "cspline": return float(3.0)
        if self.__blfunc( glb ) == "sinusoid": return float(3.0)
        return None
    def __kwidth_dflt( self, glb ):
        if self.__spkernel( glb ) == "gaussian": return int(5)
        if self.__spkernel( glb ) == "boxcar": return int(5)
        return None
    def __rejwn_dflt( self, glb ):
        if self.__blfunc( glb ) == "sinusoid": return []
        return None
    def __thresh_dflt( self, glb ):
        if self.__maskmode( glb ) == "auto": return float(5.0)
        return None
    def __pa_dflt( self, glb ):
        if self.__dirkernel( glb ) == "gaussian": return ""
        return None
    def __scale_dflt( self, glb ):
        if self.__dirkernel( glb ) == "image": return float(-1.0)
        return None
    def __minwidth_dflt( self, glb ):
        if self.__maskmode( glb ) == "auto": return int(4)
        return None
    def __clipniter_dflt( self, glb ):
        if self.__blfunc( glb ) == "poly": return int(0)
        if self.__blfunc( glb ) == "chebyshev": return int(0)
        if self.__blfunc( glb ) == "cspline": return int(0)
        if self.__blfunc( glb ) == "sinusoid": return int(0)
        return None
    def __applyfft_dflt( self, glb ):
        if self.__blfunc( glb ) == "sinusoid": return bool(True)
        return None
    def __avg_limit_dflt( self, glb ):
        if self.__maskmode( glb ) == "auto": return int(4)
        return None
    def __order_dflt( self, glb ):
        if self.__blfunc( glb ) == "poly": return int(5)
        if self.__blfunc( glb ) == "chebyshev": return int(5)
        return None
    def __fftthresh_dflt( self, glb ):
        if self.__blfunc( glb ) == "sinusoid": return float(3.0)
        return None
    def __kimage_dflt( self, glb ):
        if self.__dirkernel( glb ) == "image": return ""
        return None
    def __blparam_dflt( self, glb ):
        if self.__blfunc( glb ) == "variable": return ""
        return None
    def __addwn_dflt( self, glb ):
        if self.__blfunc( glb ) == "sinusoid": return [int(0)]
        return None
    def __edge_dflt( self, glb ):
        if self.__maskmode( glb ) == "auto": return [int(0),int(0)]
        return None
    def __major_dflt( self, glb ):
        if self.__dirkernel( glb ) == "gaussian": return ""
        if self.__dirkernel( glb ) == "boxcar": return ""
        return None
    def __npiece_dflt( self, glb ):
        if self.__blfunc( glb ) == "cspline": return int(2)
        return None
    def __minor_dflt( self, glb ):
        if self.__dirkernel( glb ) == "gaussian": return ""
        if self.__dirkernel( glb ) == "boxcar": return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        dflt = self.__chans_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __thresh( self, glb ):
        if 'thresh' in glb: return glb['thresh']
        dflt = self.__thresh_dflt( glb )
        if dflt is not None: return dflt
        return float(5.0)
    def __avg_limit( self, glb ):
        if 'avg_limit' in glb: return glb['avg_limit']
        dflt = self.__avg_limit_dflt( glb )
        if dflt is not None: return dflt
        return int(4)
    def __minwidth( self, glb ):
        if 'minwidth' in glb: return glb['minwidth']
        dflt = self.__minwidth_dflt( glb )
        if dflt is not None: return dflt
        return int(4)
    def __edge( self, glb ):
        if 'edge' in glb: return glb['edge']
        dflt = self.__edge_dflt( glb )
        if dflt is not None: return dflt
        return [ int(0),int(0) ]
    def __order( self, glb ):
        if 'order' in glb: return glb['order']
        dflt = self.__order_dflt( glb )
        if dflt is not None: return dflt
        return int(5)
    def __npiece( self, glb ):
        if 'npiece' in glb: return glb['npiece']
        dflt = self.__npiece_dflt( glb )
        if dflt is not None: return dflt
        return int(3)
    def __applyfft( self, glb ):
        if 'applyfft' in glb: return glb['applyfft']
        dflt = self.__applyfft_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __fftthresh( self, glb ):
        if 'fftthresh' in glb: return glb['fftthresh']
        dflt = self.__fftthresh_dflt( glb )
        if dflt is not None: return dflt
        return float(3.0)
    def __addwn( self, glb ):
        if 'addwn' in glb: return glb['addwn']
        dflt = self.__addwn_dflt( glb )
        if dflt is not None: return dflt
        return [ int(0) ]
    def __rejwn( self, glb ):
        if 'rejwn' in glb: return glb['rejwn']
        dflt = self.__rejwn_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __blparam( self, glb ):
        if 'blparam' in glb: return glb['blparam']
        dflt = self.__blparam_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __clipniter( self, glb ):
        if 'clipniter' in glb: return glb['clipniter']
        dflt = self.__clipniter_dflt( glb )
        if dflt is not None: return dflt
        return int(0)
    def __clipthresh( self, glb ):
        if 'clipthresh' in glb: return glb['clipthresh']
        dflt = self.__clipthresh_dflt( glb )
        if dflt is not None: return dflt
        return float(3.0)
    def __major( self, glb ):
        if 'major' in glb: return glb['major']
        dflt = self.__major_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __minor( self, glb ):
        if 'minor' in glb: return glb['minor']
        dflt = self.__minor_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __pa( self, glb ):
        if 'pa' in glb: return glb['pa']
        dflt = self.__pa_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __kimage( self, glb ):
        if 'kimage' in glb: return glb['kimage']
        dflt = self.__kimage_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __scale( self, glb ):
        if 'scale' in glb: return glb['scale']
        dflt = self.__scale_dflt( glb )
        if dflt is not None: return dflt
        return float(-1.0)
    def __kwidth( self, glb ):
        if 'kwidth' in glb: return glb['kwidth']
        dflt = self.__kwidth_dflt( glb )
        if dflt is not None: return dflt
        return int(5)

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input spectral line image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-13.13s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __linefile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__linefile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'output continuum subtracted image file name. If it is not specified, it will be imagename + "_bs".'
        value = self.__linefile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'linefile': value},{'linefile': self.__schema['linefile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-13.13s = %s%-23s%s' % ('linefile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __output_cont_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__output_cont_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'output continuum image. Name will be imagename + ".cont"'
        value = self.__output_cont( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'output_cont': value},{'output_cont': self.__schema['output_cont']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-13.13s = %s%-23s%s' % ('output_cont',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __bloutput_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__bloutput_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'name of file in which best-fit parameters are written. No output if "" (default).'
        value = self.__bloutput( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'bloutput': value},{'bloutput': self.__schema['bloutput']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-13.13s = %s%-23s%s' % ('bloutput',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __maskmode_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__maskmode_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'list'
        description = 'mode of setting additional channel masks. "list" and "auto" are available now.'
        value = self.__maskmode( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'maskmode': value},{'maskmode': self.__schema['maskmode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-13.13s =\x1B[0m %s%-23s%s' % ('maskmode',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __chans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__chans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__chans_dflt( self.__globals_( ) ) is not None:
             description = 'Channels to be included in the fitting'
             value = self.__chans( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('chans',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __thresh_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__thresh_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(5.0)
        if self.__thresh_dflt( self.__globals_( ) ) is not None:
             description = 'S/N threshold for linefinder'
             value = self.__thresh( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'thresh': value},{'thresh': self.__schema['thresh']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('thresh',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __avg_limit_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__avg_limit_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(4)
        if self.__avg_limit_dflt( self.__globals_( ) ) is not None:
             description = 'channel averaging for broad lines'
             value = self.__avg_limit( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'avg_limit': value},{'avg_limit': self.__schema['avg_limit']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('avg_limit',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __minwidth_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minwidth_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(4)
        if self.__minwidth_dflt( self.__globals_( ) ) is not None:
             description = 'the minimum channel width to detect as a line'
             value = self.__minwidth( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minwidth': value},{'minwidth': self.__schema['minwidth']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('minwidth',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __edge_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__edge_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ int(0),int(0) ]
        if self.__edge_dflt( self.__globals_( ) ) is not None:
             description = 'channels to drop at beginning and end of spectrum'
             value = self.__edge( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'edge': value},{'edge': self.__schema['edge']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('edge',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __blfunc_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__blfunc_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'poly'
        description = 'baseline model function ["poly", "chebyshev", "cspline", "sinusoid", or "variable"(expert mode)]'
        value = self.__blfunc( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'blfunc': value},{'blfunc': self.__schema['blfunc']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-13.13s =\x1B[0m %s%-23s%s' % ('blfunc',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __order_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__order_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(5)
        if self.__order_dflt( self.__globals_( ) ) is not None:
             description = 'order of baseline model function'
             value = self.__order( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'order': value},{'order': self.__schema['order']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('order',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __npiece_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__npiece_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(3)
        if self.__npiece_dflt( self.__globals_( ) ) is not None:
             description = 'number of element polynomials for cubic spline curve'
             value = self.__npiece( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'npiece': value},{'npiece': self.__schema['npiece']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('npiece',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __applyfft_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__applyfft_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__applyfft_dflt( self.__globals_( ) ) is not None:
             description = 'automatically set wave numbers of sinusoids'
             value = self.__applyfft( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'applyfft': value},{'applyfft': self.__schema['applyfft']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('applyfft',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __fftthresh_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__fftthresh_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(3.0)
        if self.__fftthresh_dflt( self.__globals_( ) ) is not None:
             description = 'threshold to select wave numbers of sinusoids'
             value = self.__fftthresh( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'fftthresh': value},{'fftthresh': self.__schema['fftthresh']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('fftthresh',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __addwn_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__addwn_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ int(0) ]
        if self.__addwn_dflt( self.__globals_( ) ) is not None:
             description = 'additional wave numbers to use'
             value = self.__addwn( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'addwn': value},{'addwn': self.__schema['addwn']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('addwn',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __rejwn_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__rejwn_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        if self.__rejwn_dflt( self.__globals_( ) ) is not None:
             description = 'wave numbers NOT to use'
             value = self.__rejwn( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'rejwn': value},{'rejwn': self.__schema['rejwn']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('rejwn',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __blparam_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__blparam_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__blparam_dflt( self.__globals_( ) ) is not None:
             description = 'text file that stores per spectrum fit parameters'
             value = self.__blparam( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'blparam': value},{'blparam': self.__schema['blparam']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('blparam',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __clipniter_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__clipniter_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        if self.__clipniter_dflt( self.__globals_( ) ) is not None:
             description = 'maximum iteration number for iterative fitting'
             value = self.__clipniter( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'clipniter': value},{'clipniter': self.__schema['clipniter']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('clipniter',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __clipthresh_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__clipthresh_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(3.0)
        if self.__clipthresh_dflt( self.__globals_( ) ) is not None:
             description = 'clipping threshold for iterative fitting'
             value = self.__clipthresh( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'clipthresh': value},{'clipthresh': self.__schema['clipthresh']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('clipthresh',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __dirkernel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dirkernel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'none'
        description = 'Type of kernel to use to direction plane smoothing. Acceptable values are "none" to omit smoothing(default), "boxcar" for a boxcar kernel, "gaussian" for a gaussian kernel, "image" to use an image as the kernel.'
        value = self.__dirkernel( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dirkernel': value},{'dirkernel': self.__schema['dirkernel']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-13.13s =\x1B[0m %s%-23s%s' % ('dirkernel',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __major_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__major_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__major_dflt( self.__globals_( ) ) is not None:
             description = 'Major axis for the kernels. Standard quantity representation. Must be specified for dirkernel="boxcar" or "gaussian".'
             value = self.__major( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'major': value},{'major': self.__schema['major']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('major',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __minor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__minor_dflt( self.__globals_( ) ) is not None:
             description = 'Minor axis. Standard quantity representation. Must be specified for dirkernel="boxcar" or "gaussian".'
             value = self.__minor( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minor': value},{'minor': self.__schema['minor']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('minor',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __pa_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__pa_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__pa_dflt( self.__globals_( ) ) is not None:
             description = 'Position angle used only for gaussian kernel. Standard quantity representation.'
             value = self.__pa( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'pa': value},{'pa': self.__schema['pa']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('pa',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __kimage_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__kimage_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__kimage_dflt( self.__globals_( ) ) is not None:
             description = 'Kernel image name. Only used if dirkernel="image".'
             value = self.__kimage( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'kimage': value},{'kimage': self.__schema['kimage']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('kimage',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __scale_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__scale_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return float(-1.0)
        if self.__scale_dflt( self.__globals_( ) ) is not None:
             description = 'Scale factor. -1.0 means auto-scale. Only used if dirkernel="image".'
             value = self.__scale( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'scale': value},{'scale': self.__schema['scale']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('scale',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __spkernel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spkernel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'none'
        description = 'Type of spectral smoothing kernel. Acceptable values are "none" to omit smoothing(default), "gaussian" for a gaussian kernel, "boxcar" for a boxcar kernel.'
        value = self.__spkernel( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spkernel': value},{'spkernel': self.__schema['spkernel']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-13.13s =\x1B[0m %s%-23s%s' % ('spkernel',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __kwidth_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__kwidth_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(5)
        if self.__kwidth_dflt( self.__globals_( ) ) is not None:
             description = 'smoothing kernel width in channel. Only used if spkernel="gaussian" or "boxcar".'
             value = self.__kwidth( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'kwidth': value},{'kwidth': self.__schema['kwidth']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-10.10s =\x1B[0m %s%-23s%s' % ('kwidth',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'clipthresh' in glb: del glb['clipthresh']
        if 'kwidth' in glb: del glb['kwidth']
        if 'rejwn' in glb: del glb['rejwn']
        if 'thresh' in glb: del glb['thresh']
        if 'pa' in glb: del glb['pa']
        if 'scale' in glb: del glb['scale']
        if 'maskmode' in glb: del glb['maskmode']
        if 'minwidth' in glb: del glb['minwidth']
        if 'imagename' in glb: del glb['imagename']
        if 'clipniter' in glb: del glb['clipniter']
        if 'applyfft' in glb: del glb['applyfft']
        if 'spkernel' in glb: del glb['spkernel']
        if 'linefile' in glb: del glb['linefile']
        if 'avg_limit' in glb: del glb['avg_limit']
        if 'dirkernel' in glb: del glb['dirkernel']
        if 'order' in glb: del glb['order']
        if 'fftthresh' in glb: del glb['fftthresh']
        if 'kimage' in glb: del glb['kimage']
        if 'blparam' in glb: del glb['blparam']
        if 'addwn' in glb: del glb['addwn']
        if 'chans' in glb: del glb['chans']
        if 'edge' in glb: del glb['edge']
        if 'bloutput' in glb: del glb['bloutput']
        if 'major' in glb: del glb['major']
        if 'blfunc' in glb: del glb['blfunc']
        if 'output_cont' in glb: del glb['output_cont']
        if 'npiece' in glb: del glb['npiece']
        if 'minor' in glb: del glb['minor']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# imbaseline -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__linefile_inp( )
        self.__output_cont_inp( )
        self.__bloutput_inp( )
        self.__maskmode_inp( )
        self.__chans_inp( )
        self.__thresh_inp( )
        self.__avg_limit_inp( )
        self.__minwidth_inp( )
        self.__edge_inp( )
        self.__blfunc_inp( )
        self.__order_inp( )
        self.__npiece_inp( )
        self.__applyfft_inp( )
        self.__fftthresh_inp( )
        self.__addwn_inp( )
        self.__rejwn_inp( )
        self.__blparam_inp( )
        self.__clipniter_inp( )
        self.__clipthresh_inp( )
        self.__dirkernel_inp( )
        self.__major_inp( )
        self.__minor_inp( )
        self.__pa_inp( )
        self.__kimage_inp( )
        self.__scale_inp( )
        self.__spkernel_inp( )
        self.__kwidth_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "imbaseline.last" if os.path.isfile("imbaseline.last") else "imbaseline.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('imbaseline.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['linefile'] = self.__linefile( self.__globals_( ) )
        _invocation_parameters['output_cont'] = self.__output_cont( self.__globals_( ) )
        _invocation_parameters['bloutput'] = self.__bloutput( self.__globals_( ) )
        _invocation_parameters['maskmode'] = self.__maskmode( self.__globals_( ) )
        _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
        _invocation_parameters['thresh'] = self.__thresh( self.__globals_( ) )
        _invocation_parameters['avg_limit'] = self.__avg_limit( self.__globals_( ) )
        _invocation_parameters['minwidth'] = self.__minwidth( self.__globals_( ) )
        _invocation_parameters['edge'] = self.__edge( self.__globals_( ) )
        _invocation_parameters['blfunc'] = self.__blfunc( self.__globals_( ) )
        _invocation_parameters['order'] = self.__order( self.__globals_( ) )
        _invocation_parameters['npiece'] = self.__npiece( self.__globals_( ) )
        _invocation_parameters['applyfft'] = self.__applyfft( self.__globals_( ) )
        _invocation_parameters['fftthresh'] = self.__fftthresh( self.__globals_( ) )
        _invocation_parameters['addwn'] = self.__addwn( self.__globals_( ) )
        _invocation_parameters['rejwn'] = self.__rejwn( self.__globals_( ) )
        _invocation_parameters['blparam'] = self.__blparam( self.__globals_( ) )
        _invocation_parameters['clipniter'] = self.__clipniter( self.__globals_( ) )
        _invocation_parameters['clipthresh'] = self.__clipthresh( self.__globals_( ) )
        _invocation_parameters['dirkernel'] = self.__dirkernel( self.__globals_( ) )
        _invocation_parameters['major'] = self.__major( self.__globals_( ) )
        _invocation_parameters['minor'] = self.__minor( self.__globals_( ) )
        _invocation_parameters['pa'] = self.__pa( self.__globals_( ) )
        _invocation_parameters['kimage'] = self.__kimage( self.__globals_( ) )
        _invocation_parameters['scale'] = self.__scale( self.__globals_( ) )
        _invocation_parameters['spkernel'] = self.__spkernel( self.__globals_( ) )
        _invocation_parameters['kwidth'] = self.__kwidth( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imbaseline( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, linefile=None, output_cont=None, bloutput=None, maskmode=None, chans=None, thresh=None, avg_limit=None, minwidth=None, edge=None, blfunc=None, order=None, npiece=None, applyfft=None, fftthresh=None, addwn=None, rejwn=None, blparam=None, clipniter=None, clipthresh=None, dirkernel=None, major=None, minor=None, pa=None, kimage=None, scale=None, spkernel=None, kwidth=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imbaseline.pre')
        _postfile = os.path.realpath('imbaseline.last')
        task_result = None
        _arguments = [imagename,linefile,output_cont,bloutput,maskmode,chans,thresh,avg_limit,minwidth,edge,blfunc,order,npiece,applyfft,fftthresh,addwn,rejwn,blparam,clipniter,clipthresh,dirkernel,major,minor,pa,kimage,scale,spkernel,kwidth]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if linefile is not None: local_global['linefile'] = linefile
            if output_cont is not None: local_global['output_cont'] = output_cont
            if bloutput is not None: local_global['bloutput'] = bloutput
            if maskmode is not None: local_global['maskmode'] = maskmode
            if blfunc is not None: local_global['blfunc'] = blfunc
            if dirkernel is not None: local_global['dirkernel'] = dirkernel
            if spkernel is not None: local_global['spkernel'] = spkernel

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['linefile'] = self.__linefile( local_global )
            _invocation_parameters['output_cont'] = self.__output_cont( local_global )
            _invocation_parameters['bloutput'] = self.__bloutput( local_global )
            _invocation_parameters['maskmode'] = self.__maskmode( local_global )
            _invocation_parameters['blfunc'] = self.__blfunc( local_global )
            _invocation_parameters['dirkernel'] = self.__dirkernel( local_global )
            _invocation_parameters['spkernel'] = self.__spkernel( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['chans'] = self.__chans( _invocation_parameters ) if chans is None else chans
            _invocation_parameters['thresh'] = self.__thresh( _invocation_parameters ) if thresh is None else thresh
            _invocation_parameters['avg_limit'] = self.__avg_limit( _invocation_parameters ) if avg_limit is None else avg_limit
            _invocation_parameters['minwidth'] = self.__minwidth( _invocation_parameters ) if minwidth is None else minwidth
            _invocation_parameters['edge'] = self.__edge( _invocation_parameters ) if edge is None else edge
            _invocation_parameters['order'] = self.__order( _invocation_parameters ) if order is None else order
            _invocation_parameters['npiece'] = self.__npiece( _invocation_parameters ) if npiece is None else npiece
            _invocation_parameters['applyfft'] = self.__applyfft( _invocation_parameters ) if applyfft is None else applyfft
            _invocation_parameters['fftthresh'] = self.__fftthresh( _invocation_parameters ) if fftthresh is None else fftthresh
            _invocation_parameters['addwn'] = self.__addwn( _invocation_parameters ) if addwn is None else addwn
            _invocation_parameters['rejwn'] = self.__rejwn( _invocation_parameters ) if rejwn is None else rejwn
            _invocation_parameters['blparam'] = self.__blparam( _invocation_parameters ) if blparam is None else blparam
            _invocation_parameters['clipniter'] = self.__clipniter( _invocation_parameters ) if clipniter is None else clipniter
            _invocation_parameters['clipthresh'] = self.__clipthresh( _invocation_parameters ) if clipthresh is None else clipthresh
            _invocation_parameters['major'] = self.__major( _invocation_parameters ) if major is None else major
            _invocation_parameters['minor'] = self.__minor( _invocation_parameters ) if minor is None else minor
            _invocation_parameters['pa'] = self.__pa( _invocation_parameters ) if pa is None else pa
            _invocation_parameters['kimage'] = self.__kimage( _invocation_parameters ) if kimage is None else kimage
            _invocation_parameters['scale'] = self.__scale( _invocation_parameters ) if scale is None else scale
            _invocation_parameters['kwidth'] = self.__kwidth( _invocation_parameters ) if kwidth is None else kwidth

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['linefile'] = self.__linefile( self.__globals_( ) )
            _invocation_parameters['output_cont'] = self.__output_cont( self.__globals_( ) )
            _invocation_parameters['bloutput'] = self.__bloutput( self.__globals_( ) )
            _invocation_parameters['maskmode'] = self.__maskmode( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['thresh'] = self.__thresh( self.__globals_( ) )
            _invocation_parameters['avg_limit'] = self.__avg_limit( self.__globals_( ) )
            _invocation_parameters['minwidth'] = self.__minwidth( self.__globals_( ) )
            _invocation_parameters['edge'] = self.__edge( self.__globals_( ) )
            _invocation_parameters['blfunc'] = self.__blfunc( self.__globals_( ) )
            _invocation_parameters['order'] = self.__order( self.__globals_( ) )
            _invocation_parameters['npiece'] = self.__npiece( self.__globals_( ) )
            _invocation_parameters['applyfft'] = self.__applyfft( self.__globals_( ) )
            _invocation_parameters['fftthresh'] = self.__fftthresh( self.__globals_( ) )
            _invocation_parameters['addwn'] = self.__addwn( self.__globals_( ) )
            _invocation_parameters['rejwn'] = self.__rejwn( self.__globals_( ) )
            _invocation_parameters['blparam'] = self.__blparam( self.__globals_( ) )
            _invocation_parameters['clipniter'] = self.__clipniter( self.__globals_( ) )
            _invocation_parameters['clipthresh'] = self.__clipthresh( self.__globals_( ) )
            _invocation_parameters['dirkernel'] = self.__dirkernel( self.__globals_( ) )
            _invocation_parameters['major'] = self.__major( self.__globals_( ) )
            _invocation_parameters['minor'] = self.__minor( self.__globals_( ) )
            _invocation_parameters['pa'] = self.__pa( self.__globals_( ) )
            _invocation_parameters['kimage'] = self.__kimage( self.__globals_( ) )
            _invocation_parameters['scale'] = self.__scale( self.__globals_( ) )
            _invocation_parameters['spkernel'] = self.__spkernel( self.__globals_( ) )
            _invocation_parameters['kwidth'] = self.__kwidth( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imbaseline( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'imbaseline', [ 'imagename=' + repr(_pc.document['imagename']), 'linefile=' + repr(_pc.document['linefile']), 'output_cont=' + repr(_pc.document['output_cont']), 'bloutput=' + repr(_pc.document['bloutput']), 'maskmode=' + repr(_pc.document['maskmode']), 'chans=' + repr(_pc.document['chans']), 'thresh=' + repr(_pc.document['thresh']), 'avg_limit=' + repr(_pc.document['avg_limit']), 'minwidth=' + repr(_pc.document['minwidth']), 'edge=' + repr(_pc.document['edge']), 'blfunc=' + repr(_pc.document['blfunc']), 'order=' + repr(_pc.document['order']), 'npiece=' + repr(_pc.document['npiece']), 'applyfft=' + repr(_pc.document['applyfft']), 'fftthresh=' + repr(_pc.document['fftthresh']), 'addwn=' + repr(_pc.document['addwn']), 'rejwn=' + repr(_pc.document['rejwn']), 'blparam=' + repr(_pc.document['blparam']), 'clipniter=' + repr(_pc.document['clipniter']), 'clipthresh=' + repr(_pc.document['clipthresh']), 'dirkernel=' + repr(_pc.document['dirkernel']), 'major=' + repr(_pc.document['major']), 'minor=' + repr(_pc.document['minor']), 'pa=' + repr(_pc.document['pa']), 'kimage=' + repr(_pc.document['kimage']), 'scale=' + repr(_pc.document['scale']), 'spkernel=' + repr(_pc.document['spkernel']), 'kwidth=' + repr(_pc.document['kwidth']) ] )
            task_result = _imbaseline_t( _pc.document['imagename'],_pc.document['linefile'],_pc.document['output_cont'],_pc.document['bloutput'],_pc.document['maskmode'],_pc.document['chans'],_pc.document['thresh'],_pc.document['avg_limit'],_pc.document['minwidth'],_pc.document['edge'],_pc.document['blfunc'],_pc.document['order'],_pc.document['npiece'],_pc.document['applyfft'],_pc.document['fftthresh'],_pc.document['addwn'],_pc.document['rejwn'],_pc.document['blparam'],_pc.document['clipniter'],_pc.document['clipthresh'],_pc.document['dirkernel'],_pc.document['major'],_pc.document['minor'],_pc.document['pa'],_pc.document['kimage'],_pc.document['scale'],_pc.document['spkernel'],_pc.document['kwidth'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('imbaseline')
            casalog.post("Exception Reported: Error in imbaseline: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'imbaseline', task_result )

        #Added if _imbaseline_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

imbaseline = _imbaseline( )


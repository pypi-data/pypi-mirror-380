##################### generated by xml-casa (v2) from simanalyze.xml ################
##################### 0e2b121d13b3affbb3d0fd87e028b2cd ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_simanalyze import simanalyze as _simanalyze_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _simanalyze:
    """
    simanalyze ---- image and analyze measurement sets created with simobserve

    
    This task is for imaging and analyzing MeasurementSets simulated with simobserve or simalma.
    It consists of two main steps, controlled by the image and analyze parameters.
    -------------------------------
    Output produced: (not all will always exist, depending on input parameters)
    To support different runs with different arrays, the names have the
    configuration name from antennalist appended.
    -------------------------------
    **tclean outputs:**
    [project].[cfg].image = synthesized image
    [project].[cfg].residual = residual image after cleaning
    [project].[cfg].pb = primary beam
    [project].[cfg].image.pbcor = synthesized image corrected for primary beam attenuation
    [project].[cfg].psf = synthesized (dirty) beam calculated from weighted uv distribution
    [project].[cfg].mask = clean mask
    [project].[cfg].model = sky brightness model
    [project].[cfg].sumwt = single pixel image containing sum-of-weights
    [project].[cfg].weight = Fourier transform of gridder weights, or un-normalized sum of PB-square (for all pointings)
    [project].[cfg].tclean.last = parameter file of what parameters were used in the tclean task; also generated by simutil even when dryrun=True
    
    **simulator outputs:**
    [project].[cfg].skymodel.flat.regrid.conv = input sky regridded to match the output image, and convolved with the output clean beam
    [project].[cfg].fidelity = fidelity image
    [project].[cfg].image.png = diagnostic figure of clean image and residual
    [project].[cfg].analysis.png = diagnostic figure of difference and fidelity
    [project].[cfg].diff = difference image between flattened convolved model and flattened output
    [project].[cfg].image.flat = 2D integrated intensity image, not corrected for primary beam; see simutil.modifymodel
    [project].[cfg].simanalyze.last = saved input parameters for simanalyze task, available in CASAshell
    -------------------------------
    
    "project" needs to be the directory of results generated by running
    simobserve or simalma. In particular $project/$project.skymodel
    will be required in order to compare output and input images.
    
    NOTE: simanalyze was designed to be used after one or more runs of
    simobserve, and as such it assumes it will be able to find a
    sky model image called $project/$project.skymodel, .newmodel, or
    .compskymodel in the $project/ subdirectory.  If the simulated
    MS has been created by means other than simply calling simobserve,
    the user may have to copy their sky model image into the $project
    subdirectory and call it "$project.skymodel".
    
    interactive clean or use of more parameters than the subset
    visible here are available by simply running the tclean task directly,
    then using simanalyze in the mode image=False (see below).
    
    Sometimes it is preferable to grid the single dish MS using the
    tsdimaging task for more control.  In that case one can input
    the resulting single dish imaging under "featherimage", only
    put interferometric MSs in "vis", and simanalyze  will clean the
    interferometric and feather with your "featherimage".
    
    uses Cotton-Schwab clean for single fields and Mosaic gridding
    for multiple fields (with Clark PSF calculation in minor cycles).
    

    --------- parameter descriptions ---------------------------------------------

    project        root prefix for input and output file names.  
                   This must be the directory of results generated by running 
                   simobserve or simalma. In particular $project/$project.skymodel 
                   will be required in order to compare output and input images.
    image          Controls whether tclean is called to image the MeasurementSet data. If true, input one or more simulated MSs using the vis parameter. These can include a total power MS. This task will grid any total power MS, invert and deconvolve any interferometric MS(s) (using the simutil method imtclean), and feather the results. If this parameter is set to False (e.g., if the user has created a synthesized image themselves or simanalyze has previously been run with image=True) the user should provide that image as input to the imagename parameter. This task will then attempt to find an appropriate skymodel image (such as the optionally rescaled \*.skymodel produced by simobserve or simalma and used to create the MS).
    imagename      Name of image to image/analyze, expected to be of the same form as those generated by simobserve. Defaults to the first file found with the name $project/\*.image
    skymodel       Name of a specific .skymodel image created by simobserve or simalma and used by one of those tasks to create a MS. If unspecified, will try to find one similar to your specified output image name.
    vis            Name of the Measurement Set(s) to image, specified as a string or string containing a comma separating the names. If set to "default", will attempt to find and image all MeasurementSets (interferometric and single dish) in the project directory. Note that if you created MeasurementSets using simobserve, the names will include the antenna configuration. Example of a single MS: vis="mysim.alma.out03.ms". Example of multiple MSs: vis="mysim.alma.out03.ms,mysim.aca.tp.ms". Example of using the $project syntax: vis="$project.noisy.ms,$project.noisy.sd.ms".
    modelimage     Sometimes it is preferable to use a low resolution (single dish or synthesis) image as a starting model during clean deconvolution of a higher resolution interferometric MS.  That is accomplished by specifying the low-resolution image as input to this parameter, and the MS to be deconvolved as input to the vis parameter. This parameter is passed to the startmodel parameter of tclean via the simutil method imtclean. Note that this is separate from the functionality controlled by the featherimage parameter and that it is not necessarily the original skymodel that was used in simobserve or simalma. Also note that the modelimage will not be used if the MS to be imaged is total power.
    imsize         A list of integers corresponding to the number of pixels in (x,y) dimensions of output image. If 0, will attempt to match model image.
    imdirection    A string corresponding to a direction to adopt as phase center, including epoch, right ascension, and declination. If unset, will adopt center on the model.
    cell           Specify the cell size with units, e.g., "10arcsec". If left unset (an empty string), the model cell size will be used. This is the default setting.
    interactive    Controls how the simutil method imtclean will call the tclean task. If this parameter is set to True, make sure to set the parameter niter to a value >0.
    niter          Controls the value of the niter parameter in tclean call, and thus the maximum number of iterations per minor cycle. Set to 0 to produce a dirty image. Can also be modified through the viewer GUI via the interactive parameter.
    threshold      Set the quantity corresponding to the target flux level at which to stop cleaning. This value is passed to tclean via the simutil method imtclean.
    weighting      Set the weighting scheme to apply to visibilities during image reconstruction. If set to briggs, will use the tclean default robust parameter (0.5)
    mask           Accepts a list of cleanbox(es), mask image file name(s), region(s), and/or a primary beam coverage level. Input to this parameter will specify areas to be searched for clean components. tclean tends to perform better and is less likely to diverge if the component placement is limited by a mask to where real emission is expected. See the tclean task documentation for more information about masking. Example of a pixel range mask: mask=[110,110,150,145]
    outertaper     Accepts a list of strings in the form of a quantity that sets an other threshold on baselines in the uv-plane. Usually used to achieve a lower effective angular resolution and recover more extended emission in reconstructed image. If left unset via empty list (the default) no outer taper will be applied.
    pbcor          Controls whether primary beam correction is applied in the call to task tclean.
    stokes         Stokes parameters to include in the call to tclean via the simutil method imtclean. Note that forming Stokes Q and U images requires the presence of cross-hand polarizations (e.g., RL and LR for circularly polarized systems such as the VLA) in the input data. Stokes V requires both parallel hands (RR and LL) for circularly-polarized systems or the cross-hands (XY and YX) for linearly polarized systems such as ALMA and ATCA.
    featherimage   String corresponding to the name of an image (e.g., total power data) to feather with the interferometric synthesis image. Sometimes it is preferable to grid the single dish MS using the tsdimaging task for more control. In that case, the user can input the resulting single dish imaging under featherimage, only pass interferometric data as input to the vis parameter, and this task will clean the interferometric and feather with the featherimage.
    analyze        Used to create an image of the difference between the input skymodel and the simulated output image (whether that output image is being generated in the same call to simanalyze, with image=True, or has already been generated, and simanalyze is being called with image=False). If True, only the first 6 selected subparameter outputs will be displayed.
    showuv         Displays a plot of the simulated uv coverage
    showpsf        Displays synthesized (dirty) beam. Ignored in single dish simulation.
    showmodel      Displays the sky model at original resolution of input image.
    showconvolved  Displays the sky model convolved with output clean beam.
    showclean      Displays the synthesized image produced by the call to task tclean.
    showresidual   Displays the residual image produced by the call to task tclean. Ignored in single dish simulations.
    showdifference Displays a difference image between cleaned image output by the tclean call, and input model sky image convolved with synthesized beam determined by output of tclean call.
    showfidelity   Display a fidelity image. Note that the RMS is calculated in the lower quarter of the image. This is likely not the best choice, so you are encouraged to measure RMS yourself in an off-source region. Fidelity = abs(input) / max[ abs(input-output), 0.7\*rms(output) ]
    graphics       Controls where graphics are displayed. Options are screen, file, both, or none.
    verbose        Controls task activity is reported in the log.
    overwrite      Controls whether the task will overwrite existing files starting with $project name.
    dryrun         Experimental feature for interfermetric data only. Controls whether information pertaining to the tclean call and analysis will be recorded and written to files for inspection and adaption.
    logfile        Allows for a user-defined log file naming convention if the verbose parameter is set to True.
    [1;42mRETURNS[1;m           void

    --------- examples -----------------------------------------------------------

    
    For more information, see the task pages of simobserve in CASA Docs:
    
    https://casa.nrao.edu/casadocs/
    
    Please see http://casaguides.nrao.edu, and contact the CASA helpdesk
    with questions.
    


    """

    _info_group_ = """simulation"""
    _info_desc_ = """image and analyze measurement sets created with simobserve"""

    __schema = {'project': {'type': 'cStr', 'coerce': _coerce.to_str}, 'image': {'type': 'cBool'}, 'imagename': {'type': 'cStr', 'coerce': _coerce.to_str}, 'skymodel': {'type': 'cStr', 'coerce': _coerce.to_str}, 'vis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'modelimage': {'type': 'cStr', 'coerce': _coerce.to_str}, 'imsize': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'imdirection': {'type': 'cStr', 'coerce': _coerce.to_str}, 'cell': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'interactive': {'type': 'cBool'}, 'niter': {'type': 'cInt'}, 'threshold': {'type': 'cStr', 'coerce': _coerce.to_str}, 'weighting': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'natural', 'uniform', 'briggs' ]}, 'mask': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'outertaper': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'pbcor': {'type': 'cBool'}, 'stokes': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'I', 'IQUV', 'RRLL', 'QU', 'YY', 'RR', 'IV', 'XX', 'XXYY', 'LL' ]}, 'featherimage': {'type': 'cStr', 'coerce': _coerce.to_str}, 'analyze': {'type': 'cBool'}, 'showuv': {'type': 'cBool'}, 'showpsf': {'type': 'cBool'}, 'showmodel': {'type': 'cBool'}, 'showconvolved': {'type': 'cBool'}, 'showclean': {'type': 'cBool'}, 'showresidual': {'type': 'cBool'}, 'showdifference': {'type': 'cBool'}, 'showfidelity': {'type': 'cBool'}, 'graphics': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'none', 'file', 'both', 'screen', '' ]}, 'verbose': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'dryrun': {'type': 'cBool'}, 'logfile': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 17 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __overwrite_dflt( self, glb ):
        return True

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return True

    def __dryrun_dflt( self, glb ):
        return False

    def __dryrun( self, glb ):
        if 'dryrun' in glb: return glb['dryrun']
        return False

    def __project_dflt( self, glb ):
        return 'sim'

    def __project( self, glb ):
        if 'project' in glb: return glb['project']
        return 'sim'

    def __logfile_dflt( self, glb ):
        return ''

    def __logfile( self, glb ):
        if 'logfile' in glb: return glb['logfile']
        return ''

    def __image_dflt( self, glb ):
        return True

    def __image( self, glb ):
        if 'image' in glb: return glb['image']
        return True

    def __graphics_dflt( self, glb ):
        return 'both'

    def __graphics( self, glb ):
        if 'graphics' in glb: return glb['graphics']
        return 'both'

    def __analyze_dflt( self, glb ):
        return False

    def __analyze( self, glb ):
        if 'analyze' in glb: return glb['analyze']
        return False

    def __verbose_dflt( self, glb ):
        return False

    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __stokes_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return "I"
        return None
    def __mask_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return []
        return None
    def __weighting_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return "natural"
        return None
    def __showdifference_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __imdirection_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None
    def __showuv_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __showclean_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __imagename_dflt( self, glb ):
        if self.__image( glb ) == bool(False): return "default"
        return None
    def __imsize_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return []
        return None
    def __vis_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return "default"
        return None
    def __showfidelity_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __interactive_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return bool(False)
        return None
    def __featherimage_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None
    def __pbcor_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return bool(True)
        return None
    def __outertaper_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return []
        return None
    def __threshold_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return "0.1mJy"
        return None
    def __niter_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return int(0)
        return None
    def __cell_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None
    def __showresidual_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(False)
        return None
    def __showpsf_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __modelimage_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None
    def __showmodel_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __showconvolved_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(False)
        return None
    def __skymodel_dflt( self, glb ):
        if self.__image( glb ) == bool(False): return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        dflt = self.__imagename_dflt( glb )
        if dflt is not None: return dflt
        return 'default'
    def __skymodel( self, glb ):
        if 'skymodel' in glb: return glb['skymodel']
        dflt = self.__skymodel_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        dflt = self.__vis_dflt( glb )
        if dflt is not None: return dflt
        return 'default'
    def __modelimage( self, glb ):
        if 'modelimage' in glb: return glb['modelimage']
        dflt = self.__modelimage_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __imsize( self, glb ):
        if 'imsize' in glb: return glb['imsize']
        dflt = self.__imsize_dflt( glb )
        if dflt is not None: return dflt
        return [ int(0),int(0) ]
    def __imdirection( self, glb ):
        if 'imdirection' in glb: return glb['imdirection']
        dflt = self.__imdirection_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __cell( self, glb ):
        if 'cell' in glb: return glb['cell']
        dflt = self.__cell_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __interactive( self, glb ):
        if 'interactive' in glb: return glb['interactive']
        dflt = self.__interactive_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __niter( self, glb ):
        if 'niter' in glb: return glb['niter']
        dflt = self.__niter_dflt( glb )
        if dflt is not None: return dflt
        return int(0)
    def __threshold( self, glb ):
        if 'threshold' in glb: return glb['threshold']
        dflt = self.__threshold_dflt( glb )
        if dflt is not None: return dflt
        return '0.1mJy'
    def __weighting( self, glb ):
        if 'weighting' in glb: return glb['weighting']
        dflt = self.__weighting_dflt( glb )
        if dflt is not None: return dflt
        return 'natural'
    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        dflt = self.__mask_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __outertaper( self, glb ):
        if 'outertaper' in glb: return glb['outertaper']
        dflt = self.__outertaper_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __pbcor( self, glb ):
        if 'pbcor' in glb: return glb['pbcor']
        dflt = self.__pbcor_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        dflt = self.__stokes_dflt( glb )
        if dflt is not None: return dflt
        return 'I'
    def __featherimage( self, glb ):
        if 'featherimage' in glb: return glb['featherimage']
        dflt = self.__featherimage_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __showuv( self, glb ):
        if 'showuv' in glb: return glb['showuv']
        dflt = self.__showuv_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showpsf( self, glb ):
        if 'showpsf' in glb: return glb['showpsf']
        dflt = self.__showpsf_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showmodel( self, glb ):
        if 'showmodel' in glb: return glb['showmodel']
        dflt = self.__showmodel_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showconvolved( self, glb ):
        if 'showconvolved' in glb: return glb['showconvolved']
        dflt = self.__showconvolved_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __showclean( self, glb ):
        if 'showclean' in glb: return glb['showclean']
        dflt = self.__showclean_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showresidual( self, glb ):
        if 'showresidual' in glb: return glb['showresidual']
        dflt = self.__showresidual_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __showdifference( self, glb ):
        if 'showdifference' in glb: return glb['showdifference']
        dflt = self.__showdifference_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showfidelity( self, glb ):
        if 'showfidelity' in glb: return glb['showfidelity']
        dflt = self.__showfidelity_dflt( glb )
        if dflt is not None: return dflt
        return True

    #--------- subparam inp output ----------------------------------------------------
    def __project_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__project_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'sim'
        description = 'root prefix for output file names'
        value = self.__project( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'project': value},{'project': self.__schema['project']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('project',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __image_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__image_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = '(re)image $project.\*.ms to $project.image'
        value = self.__image( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'image': value},{'image': self.__schema['image']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('image',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'default'
        if self.__imagename_dflt( self.__globals_( ) ) is not None:
             description = 'simulation output image to analyze'
             value = self.__imagename( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __skymodel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__skymodel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__skymodel_dflt( self.__globals_( ) ) is not None:
             description = 'skymodel image to analyze'
             value = self.__skymodel( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'skymodel': value},{'skymodel': self.__schema['skymodel']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('skymodel',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'default'
        if self.__vis_dflt( self.__globals_( ) ) is not None:
             description = 'Measurement Set(s) to image'
             value = self.__vis( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __modelimage_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__modelimage_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__modelimage_dflt( self.__globals_( ) ) is not None:
             description = 'image to use as clean prior'
             value = self.__modelimage( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'modelimage': value},{'modelimage': self.__schema['modelimage']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('modelimage',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __imsize_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imsize_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ int(0),int(0) ]
        if self.__imsize_dflt( self.__globals_( ) ) is not None:
             description = 'output image size in pixel units'
             value = self.__imsize( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imsize': value},{'imsize': self.__schema['imsize']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('imsize',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __imdirection_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imdirection_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__imdirection_dflt( self.__globals_( ) ) is not None:
             description = 'set output image direction'
             value = self.__imdirection( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imdirection': value},{'imdirection': self.__schema['imdirection']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('imdirection',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __cell_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__cell_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__cell_dflt( self.__globals_( ) ) is not None:
             description = 'cell size with units'
             value = self.__cell( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'cell': value},{'cell': self.__schema['cell']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('cell',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __interactive_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__interactive_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__interactive_dflt( self.__globals_( ) ) is not None:
             description = 'call tclean in interactive mode'
             value = self.__interactive( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'interactive': value},{'interactive': self.__schema['interactive']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('interactive',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __niter_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__niter_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        if self.__niter_dflt( self.__globals_( ) ) is not None:
             description = 'maximum number of iterations'
             value = self.__niter( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'niter': value},{'niter': self.__schema['niter']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('niter',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __threshold_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__threshold_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return '0.1mJy'
        if self.__threshold_dflt( self.__globals_( ) ) is not None:
             description = 'target flux level and units'
             value = self.__threshold( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'threshold': value},{'threshold': self.__schema['threshold']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('threshold',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __weighting_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__weighting_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'natural'
        if self.__weighting_dflt( self.__globals_( ) ) is not None:
             description = 'control image weighting method'
             value = self.__weighting( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'weighting': value},{'weighting': self.__schema['weighting']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('weighting',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __mask_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__mask_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        if self.__mask_dflt( self.__globals_( ) ) is not None:
             description = 'Cleanbox(es), mask image(s), region(s), or a level'
             value = self.__mask( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('mask',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __outertaper_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outertaper_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        if self.__outertaper_dflt( self.__globals_( ) ) is not None:
             description = 'uv-taper on outer baselines in uv-plane'
             value = self.__outertaper( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outertaper': value},{'outertaper': self.__schema['outertaper']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('outertaper',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __pbcor_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__pbcor_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__pbcor_dflt( self.__globals_( ) ) is not None:
             description = 'correct synthesis images for primary beam response?'
             value = self.__pbcor( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'pbcor': value},{'pbcor': self.__schema['pbcor']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('pbcor',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __stokes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stokes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'I'
        if self.__stokes_dflt( self.__globals_( ) ) is not None:
             description = 'Stokes parameterss to image'
             value = self.__stokes( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('stokes',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __featherimage_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__featherimage_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__featherimage_dflt( self.__globals_( ) ) is not None:
             description = 'image to feather with new image'
             value = self.__featherimage( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'featherimage': value},{'featherimage': self.__schema['featherimage']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('featherimage',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __analyze_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__analyze_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'create analytical images'
        value = self.__analyze( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'analyze': value},{'analyze': self.__schema['analyze']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('analyze',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __showuv_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showuv_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__showuv_dflt( self.__globals_( ) ) is not None:
             description = 'display uv coverage'
             value = self.__showuv( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showuv': value},{'showuv': self.__schema['showuv']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('showuv',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showpsf_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showpsf_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__showpsf_dflt( self.__globals_( ) ) is not None:
             description = 'display synthesized beam'
             value = self.__showpsf( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showpsf': value},{'showpsf': self.__schema['showpsf']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('showpsf',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showmodel_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showmodel_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__showmodel_dflt( self.__globals_( ) ) is not None:
             description = 'display sky model at original resolution'
             value = self.__showmodel( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showmodel': value},{'showmodel': self.__schema['showmodel']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('showmodel',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showconvolved_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showconvolved_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__showconvolved_dflt( self.__globals_( ) ) is not None:
             description = 'display sky model convolved with output clean beam'
             value = self.__showconvolved( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showconvolved': value},{'showconvolved': self.__schema['showconvolved']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('showconvolved',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showclean_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showclean_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__showclean_dflt( self.__globals_( ) ) is not None:
             description = 'display the synthesized image'
             value = self.__showclean( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showclean': value},{'showclean': self.__schema['showclean']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('showclean',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showresidual_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showresidual_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__showresidual_dflt( self.__globals_( ) ) is not None:
             description = 'display the clean residual image'
             value = self.__showresidual( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showresidual': value},{'showresidual': self.__schema['showresidual']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('showresidual',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showdifference_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showdifference_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__showdifference_dflt( self.__globals_( ) ) is not None:
             description = 'display difference between cleaned output and convolved model input'
             value = self.__showdifference( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showdifference': value},{'showdifference': self.__schema['showdifference']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('showdifference',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __showfidelity_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__showfidelity_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__showfidelity_dflt( self.__globals_( ) ) is not None:
             description = 'display fidelity image'
             value = self.__showfidelity( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'showfidelity': value},{'showfidelity': self.__schema['showfidelity']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('showfidelity',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __graphics_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__graphics_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'both'
        description = 'where to display graphics at each stage'
        value = self.__graphics( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'graphics': value},{'graphics': self.__schema['graphics']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('graphics',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __verbose_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__verbose_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'report task activity'
        value = self.__verbose( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('verbose',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'overwrite files starting with $project'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __dryrun_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dryrun_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'only print information'
        value = self.__dryrun( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dryrun': value},{'dryrun': self.__schema['dryrun']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('dryrun',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __logfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__logfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'user-defined log file'
        value = self.__logfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'logfile': value},{'logfile': self.__schema['logfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('logfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'dryrun' in glb: del glb['dryrun']
        if 'mask' in glb: del glb['mask']
        if 'analyze' in glb: del glb['analyze']
        if 'verbose' in glb: del glb['verbose']
        if 'weighting' in glb: del glb['weighting']
        if 'showdifference' in glb: del glb['showdifference']
        if 'image' in glb: del glb['image']
        if 'project' in glb: del glb['project']
        if 'imdirection' in glb: del glb['imdirection']
        if 'showuv' in glb: del glb['showuv']
        if 'showclean' in glb: del glb['showclean']
        if 'imagename' in glb: del glb['imagename']
        if 'imsize' in glb: del glb['imsize']
        if 'vis' in glb: del glb['vis']
        if 'showfidelity' in glb: del glb['showfidelity']
        if 'interactive' in glb: del glb['interactive']
        if 'featherimage' in glb: del glb['featherimage']
        if 'pbcor' in glb: del glb['pbcor']
        if 'logfile' in glb: del glb['logfile']
        if 'outertaper' in glb: del glb['outertaper']
        if 'threshold' in glb: del glb['threshold']
        if 'niter' in glb: del glb['niter']
        if 'cell' in glb: del glb['cell']
        if 'showresidual' in glb: del glb['showresidual']
        if 'overwrite' in glb: del glb['overwrite']
        if 'showpsf' in glb: del glb['showpsf']
        if 'modelimage' in glb: del glb['modelimage']
        if 'showmodel' in glb: del glb['showmodel']
        if 'graphics' in glb: del glb['graphics']
        if 'showconvolved' in glb: del glb['showconvolved']
        if 'skymodel' in glb: del glb['skymodel']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# simanalyze -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__project_inp( )
        self.__image_inp( )
        self.__imagename_inp( )
        self.__skymodel_inp( )
        self.__vis_inp( )
        self.__modelimage_inp( )
        self.__imsize_inp( )
        self.__imdirection_inp( )
        self.__cell_inp( )
        self.__interactive_inp( )
        self.__niter_inp( )
        self.__threshold_inp( )
        self.__weighting_inp( )
        self.__mask_inp( )
        self.__outertaper_inp( )
        self.__pbcor_inp( )
        self.__stokes_inp( )
        self.__featherimage_inp( )
        self.__analyze_inp( )
        self.__showuv_inp( )
        self.__showpsf_inp( )
        self.__showmodel_inp( )
        self.__showconvolved_inp( )
        self.__showclean_inp( )
        self.__showresidual_inp( )
        self.__showdifference_inp( )
        self.__showfidelity_inp( )
        self.__graphics_inp( )
        self.__verbose_inp( )
        self.__overwrite_inp( )
        self.__dryrun_inp( )
        self.__logfile_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "simanalyze.last" if os.path.isfile("simanalyze.last") else "simanalyze.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('simanalyze.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['project'] = self.__project( self.__globals_( ) )
        _invocation_parameters['image'] = self.__image( self.__globals_( ) )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['skymodel'] = self.__skymodel( self.__globals_( ) )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['modelimage'] = self.__modelimage( self.__globals_( ) )
        _invocation_parameters['imsize'] = self.__imsize( self.__globals_( ) )
        _invocation_parameters['imdirection'] = self.__imdirection( self.__globals_( ) )
        _invocation_parameters['cell'] = self.__cell( self.__globals_( ) )
        _invocation_parameters['interactive'] = self.__interactive( self.__globals_( ) )
        _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )
        _invocation_parameters['threshold'] = self.__threshold( self.__globals_( ) )
        _invocation_parameters['weighting'] = self.__weighting( self.__globals_( ) )
        _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
        _invocation_parameters['outertaper'] = self.__outertaper( self.__globals_( ) )
        _invocation_parameters['pbcor'] = self.__pbcor( self.__globals_( ) )
        _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
        _invocation_parameters['featherimage'] = self.__featherimage( self.__globals_( ) )
        _invocation_parameters['analyze'] = self.__analyze( self.__globals_( ) )
        _invocation_parameters['showuv'] = self.__showuv( self.__globals_( ) )
        _invocation_parameters['showpsf'] = self.__showpsf( self.__globals_( ) )
        _invocation_parameters['showmodel'] = self.__showmodel( self.__globals_( ) )
        _invocation_parameters['showconvolved'] = self.__showconvolved( self.__globals_( ) )
        _invocation_parameters['showclean'] = self.__showclean( self.__globals_( ) )
        _invocation_parameters['showresidual'] = self.__showresidual( self.__globals_( ) )
        _invocation_parameters['showdifference'] = self.__showdifference( self.__globals_( ) )
        _invocation_parameters['showfidelity'] = self.__showfidelity( self.__globals_( ) )
        _invocation_parameters['graphics'] = self.__graphics( self.__globals_( ) )
        _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['dryrun'] = self.__dryrun( self.__globals_( ) )
        _invocation_parameters['logfile'] = self.__logfile( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-14s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#simanalyze( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, project=None, image=None, imagename=None, skymodel=None, vis=None, modelimage=None, imsize=None, imdirection=None, cell=None, interactive=None, niter=None, threshold=None, weighting=None, mask=None, outertaper=None, pbcor=None, stokes=None, featherimage=None, analyze=None, showuv=None, showpsf=None, showmodel=None, showconvolved=None, showclean=None, showresidual=None, showdifference=None, showfidelity=None, graphics=None, verbose=None, overwrite=None, dryrun=None, logfile=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('simanalyze.pre')
        _postfile = os.path.realpath('simanalyze.last')
        task_result = None
        _arguments = [project,image,imagename,skymodel,vis,modelimage,imsize,imdirection,cell,interactive,niter,threshold,weighting,mask,outertaper,pbcor,stokes,featherimage,analyze,showuv,showpsf,showmodel,showconvolved,showclean,showresidual,showdifference,showfidelity,graphics,verbose,overwrite,dryrun,logfile]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if project is not None: local_global['project'] = project
            if image is not None: local_global['image'] = image
            if analyze is not None: local_global['analyze'] = analyze
            if graphics is not None: local_global['graphics'] = graphics
            if verbose is not None: local_global['verbose'] = verbose
            if overwrite is not None: local_global['overwrite'] = overwrite
            if dryrun is not None: local_global['dryrun'] = dryrun
            if logfile is not None: local_global['logfile'] = logfile

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['project'] = self.__project( local_global )
            _invocation_parameters['image'] = self.__image( local_global )
            _invocation_parameters['analyze'] = self.__analyze( local_global )
            _invocation_parameters['graphics'] = self.__graphics( local_global )
            _invocation_parameters['verbose'] = self.__verbose( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['dryrun'] = self.__dryrun( local_global )
            _invocation_parameters['logfile'] = self.__logfile( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['imagename'] = self.__imagename( _invocation_parameters ) if imagename is None else imagename
            _invocation_parameters['skymodel'] = self.__skymodel( _invocation_parameters ) if skymodel is None else skymodel
            _invocation_parameters['vis'] = self.__vis( _invocation_parameters ) if vis is None else vis
            _invocation_parameters['modelimage'] = self.__modelimage( _invocation_parameters ) if modelimage is None else modelimage
            _invocation_parameters['imsize'] = self.__imsize( _invocation_parameters ) if imsize is None else imsize
            _invocation_parameters['imdirection'] = self.__imdirection( _invocation_parameters ) if imdirection is None else imdirection
            _invocation_parameters['cell'] = self.__cell( _invocation_parameters ) if cell is None else cell
            _invocation_parameters['interactive'] = self.__interactive( _invocation_parameters ) if interactive is None else interactive
            _invocation_parameters['niter'] = self.__niter( _invocation_parameters ) if niter is None else niter
            _invocation_parameters['threshold'] = self.__threshold( _invocation_parameters ) if threshold is None else threshold
            _invocation_parameters['weighting'] = self.__weighting( _invocation_parameters ) if weighting is None else weighting
            _invocation_parameters['mask'] = self.__mask( _invocation_parameters ) if mask is None else mask
            _invocation_parameters['outertaper'] = self.__outertaper( _invocation_parameters ) if outertaper is None else outertaper
            _invocation_parameters['pbcor'] = self.__pbcor( _invocation_parameters ) if pbcor is None else pbcor
            _invocation_parameters['stokes'] = self.__stokes( _invocation_parameters ) if stokes is None else stokes
            _invocation_parameters['featherimage'] = self.__featherimage( _invocation_parameters ) if featherimage is None else featherimage
            _invocation_parameters['showuv'] = self.__showuv( _invocation_parameters ) if showuv is None else showuv
            _invocation_parameters['showpsf'] = self.__showpsf( _invocation_parameters ) if showpsf is None else showpsf
            _invocation_parameters['showmodel'] = self.__showmodel( _invocation_parameters ) if showmodel is None else showmodel
            _invocation_parameters['showconvolved'] = self.__showconvolved( _invocation_parameters ) if showconvolved is None else showconvolved
            _invocation_parameters['showclean'] = self.__showclean( _invocation_parameters ) if showclean is None else showclean
            _invocation_parameters['showresidual'] = self.__showresidual( _invocation_parameters ) if showresidual is None else showresidual
            _invocation_parameters['showdifference'] = self.__showdifference( _invocation_parameters ) if showdifference is None else showdifference
            _invocation_parameters['showfidelity'] = self.__showfidelity( _invocation_parameters ) if showfidelity is None else showfidelity

        else:
            # invoke with inp/go semantics
            _invocation_parameters['project'] = self.__project( self.__globals_( ) )
            _invocation_parameters['image'] = self.__image( self.__globals_( ) )
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['skymodel'] = self.__skymodel( self.__globals_( ) )
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['modelimage'] = self.__modelimage( self.__globals_( ) )
            _invocation_parameters['imsize'] = self.__imsize( self.__globals_( ) )
            _invocation_parameters['imdirection'] = self.__imdirection( self.__globals_( ) )
            _invocation_parameters['cell'] = self.__cell( self.__globals_( ) )
            _invocation_parameters['interactive'] = self.__interactive( self.__globals_( ) )
            _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )
            _invocation_parameters['threshold'] = self.__threshold( self.__globals_( ) )
            _invocation_parameters['weighting'] = self.__weighting( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['outertaper'] = self.__outertaper( self.__globals_( ) )
            _invocation_parameters['pbcor'] = self.__pbcor( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['featherimage'] = self.__featherimage( self.__globals_( ) )
            _invocation_parameters['analyze'] = self.__analyze( self.__globals_( ) )
            _invocation_parameters['showuv'] = self.__showuv( self.__globals_( ) )
            _invocation_parameters['showpsf'] = self.__showpsf( self.__globals_( ) )
            _invocation_parameters['showmodel'] = self.__showmodel( self.__globals_( ) )
            _invocation_parameters['showconvolved'] = self.__showconvolved( self.__globals_( ) )
            _invocation_parameters['showclean'] = self.__showclean( self.__globals_( ) )
            _invocation_parameters['showresidual'] = self.__showresidual( self.__globals_( ) )
            _invocation_parameters['showdifference'] = self.__showdifference( self.__globals_( ) )
            _invocation_parameters['showfidelity'] = self.__showfidelity( self.__globals_( ) )
            _invocation_parameters['graphics'] = self.__graphics( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['dryrun'] = self.__dryrun( self.__globals_( ) )
            _invocation_parameters['logfile'] = self.__logfile( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-14s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#simanalyze( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'simanalyze', [ 'project=' + repr(_pc.document['project']), 'image=' + repr(_pc.document['image']), 'imagename=' + repr(_pc.document['imagename']), 'skymodel=' + repr(_pc.document['skymodel']), 'vis=' + repr(_pc.document['vis']), 'modelimage=' + repr(_pc.document['modelimage']), 'imsize=' + repr(_pc.document['imsize']), 'imdirection=' + repr(_pc.document['imdirection']), 'cell=' + repr(_pc.document['cell']), 'interactive=' + repr(_pc.document['interactive']), 'niter=' + repr(_pc.document['niter']), 'threshold=' + repr(_pc.document['threshold']), 'weighting=' + repr(_pc.document['weighting']), 'mask=' + repr(_pc.document['mask']), 'outertaper=' + repr(_pc.document['outertaper']), 'pbcor=' + repr(_pc.document['pbcor']), 'stokes=' + repr(_pc.document['stokes']), 'featherimage=' + repr(_pc.document['featherimage']), 'analyze=' + repr(_pc.document['analyze']), 'showuv=' + repr(_pc.document['showuv']), 'showpsf=' + repr(_pc.document['showpsf']), 'showmodel=' + repr(_pc.document['showmodel']), 'showconvolved=' + repr(_pc.document['showconvolved']), 'showclean=' + repr(_pc.document['showclean']), 'showresidual=' + repr(_pc.document['showresidual']), 'showdifference=' + repr(_pc.document['showdifference']), 'showfidelity=' + repr(_pc.document['showfidelity']), 'graphics=' + repr(_pc.document['graphics']), 'verbose=' + repr(_pc.document['verbose']), 'overwrite=' + repr(_pc.document['overwrite']), 'dryrun=' + repr(_pc.document['dryrun']), 'logfile=' + repr(_pc.document['logfile']) ] )
            task_result = _simanalyze_t( _pc.document['project'],_pc.document['image'],_pc.document['imagename'],_pc.document['skymodel'],_pc.document['vis'],_pc.document['modelimage'],_pc.document['imsize'],_pc.document['imdirection'],_pc.document['cell'],_pc.document['interactive'],_pc.document['niter'],_pc.document['threshold'],_pc.document['weighting'],_pc.document['mask'],_pc.document['outertaper'],_pc.document['pbcor'],_pc.document['stokes'],_pc.document['featherimage'],_pc.document['analyze'],_pc.document['showuv'],_pc.document['showpsf'],_pc.document['showmodel'],_pc.document['showconvolved'],_pc.document['showclean'],_pc.document['showresidual'],_pc.document['showdifference'],_pc.document['showfidelity'],_pc.document['graphics'],_pc.document['verbose'],_pc.document['overwrite'],_pc.document['dryrun'],_pc.document['logfile'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('simanalyze')
            casalog.post("Exception Reported: Error in simanalyze: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'simanalyze', task_result )

        #Added if _simanalyze_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

simanalyze = _simanalyze( )


##################### generated by xml-casa (v2) from uvmodelfit.xml ################
##################### f23b664397bb9692ae29987ba974c717 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_uvmodelfit import uvmodelfit as _uvmodelfit_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _uvmodelfit:
    """
    uvmodelfit ---- Fit a single component source model to the uv data

    
    Fit a single component source model to the uv data

    --------- parameter descriptions ---------------------------------------------

    vis        Name of input visibility file
    field      Select field using field id(s) or field name(s)
    spw        Select spectral window/channels
    selectdata Other data selection parameters
    timerange  Select data based on time range
    uvrange    Select data within uvrange (default units meters)
    antenna    Select data based on antenna/baseline
    scan       Scan number range
    msselect   Optional complex data selection (ignore for now)
    niter      Number of fitting iterations to execute
    comptype   component model type: P(oint), G(aussian), or D(isk)
    sourcepar  Starting guess for component parameters (3 values for type P, 5 for G and D)
    varypar    Control which parameters to let vary in the fit
    outfile    Optional output component list table

    --------- examples -----------------------------------------------------------

    
    
    Fit a single component source model to the uv data.  Three models
    are available: P=point; G=Gaussian; D=Disk.  Fitting parameters can
    be held fixed.   The results are given in the log and placed in a
    components file.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    
    --- Data Selection
    field -- Select data based on field id(s) or name(s)
    default: '' (all); example: field='1'
    field='0~2' # field ids inclusive from 0 to 2
    field='3C*' # all field names starting with 3C
    spw -- Select data based on spectral window
    default: '' (all); example: spw='1'
    spw='<2' #spectral windows less than 2
    spw='>1' #spectral windows greater than 1
    selectdata -- Select a subset of the visibility using MSSelection
    default: False; example: selectdata=True
    timerange  -- Select data based on time range:
    default = '' (all); example,
    timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
    Note: YYYY/MM/DD can be dropped as needed:
    timerange='09:14:0~09:54:0' # this time range
    timerange='09:44:00' # data within one integration of time
    timerange='>10:24:00' # data after this time
    timerange='09:44:00+00:13:00' #data 13 minutes after time
    uvrange -- Select data within uvrange (default units kilo-lambda)
    default: '' (all); example:
    uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lamgda
    uvrange='>4klambda';uvranges greater than 4 kilo lambda
    uvrange='0~1000km'; uvrange in kilometers
    antenna -- Select data based on antenna/baseline
    default: '' (all); example: antenna='5&6' baseline 5-6
    antenna='5&6;7&8' #baseline 5-6 and 7-8
    antenna='5' # all baselines with antenna 5
    antenna='5,6' # all baselines with antennas 5 and 6
    scan -- Select data based on scan number - New, under developement
    default: '' (all); example: scan='>3'
    msselect -- Optional data selection (field,spw,time,etc)
    default:'' means select all; example:msselect='FIELD_ID==0',
    msselect='FIELD_ID IN [0,1,2]' means select fields 0,1 and 2
    msselect='FIELD_ID <= 1 means select fields 0, 1
    msselect='FIELD_ID==0 && ANTENNA1 IN [0] && ANTENNA2 IN [2:26]'
    means select field 0 and antennas 0 to 26, except antenna 1.
    Other msselect fields are: 'DATA_DESC_ID', 'SPECTRAL_WINDOW_ID',
    'POLARIZATION_ID', 'SCAN_NUMBER', 'TIME', 'UVW'
    See ccokbook for more details
    
    niter -- Number of fitting iterations to execute
    default: 5; example: niter=20
    comptype -- component model type
    default: 'P';
    Options: 'P' (point source), 'G' (elliptical gaussian),
    'D' (elliptical disk)
    sourcepar -- Starting guess for component parameters
    default: [1,0,0];  (for comptype='P')
    IF comptype = 'P' then
    sourcepar = [flux,xoff,yoff] where
    flux = Jy, xoff = offset east (arcsec), yoff = offset north (arcsec).
    IF comptype = 'G' or 'D', then
    sourcepar = [flux,xoff,yoff,majax,axrat,pos] where
    majax = FWHM along the major axis (arcsec), axrat < 1 is
    the ratio of minor to major axis, pos=angle in deg
    varypar -- Control which parameters to let vary in the fit
    default: [] (all vary);
    example: vary=[F,T,T]
    
    examples:
    
    fit a point:
    comptype = 'P'
    sourcepar = [0.4,0.2,-0.3];
    varypar = [T,T,T]
    
    fit a circular Gaussian:
    comptype = 'G'
    sourcepar = [1.4,0.3,-0.2,0.3, 1, 0]
    varypar    = [ T , T ,  T , T , F, F]
    
    
    outfile -- Optional output component list table
    default: ''; example: outfile='componentlist.cl'
    
    
    How to get the output values:
    
    cl.open('componentlist.cl')
    fit = cl.getcompoent()             stores component information
    fit                                to see the whole mess
    flux = fit['flux']['value']        to store the I,Q,U,V, flux
    print flux
    
    ra = fit['shape']['direction']['m0']['value']
    dec =fit['shape']['direction']['m1']['value']
    print ra, dec
    
    bmaj = fit['shape']['majoraxis']['value']     to get major axis
    bmin = fit['shape']['minoraxis']['value']     to get minor axis
    


    """

    _info_group_ = """manipulation, calibration"""
    _info_desc_ = """Fit a single component source model to the uv data"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'selectdata': {'type': 'cBool'}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'uvrange': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'antenna': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'msselect': {'type': 'cStr', 'coerce': _coerce.to_str}, 'niter': {'type': 'cInt'}, 'comptype': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'P', 'G', 'D' ]}, 'sourcepar': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'varypar': {'type': 'cBoolVec', 'coerce': [_coerce.to_list,_coerce.to_boolvec]}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 12 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __comptype_dflt( self, glb ):
        return 'P'

    def __comptype( self, glb ):
        if 'comptype' in glb: return glb['comptype']
        return 'P'

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __sourcepar_dflt( self, glb ):
        return [ float(1.0),float(0.0),float(0.0) ]

    def __sourcepar( self, glb ):
        if 'sourcepar' in glb: return glb['sourcepar']
        return [ float(1.0),float(0.0),float(0.0) ]

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __selectdata_dflt( self, glb ):
        return True

    def __selectdata( self, glb ):
        if 'selectdata' in glb: return glb['selectdata']
        return True

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __varypar_dflt( self, glb ):
        return [  ]

    def __varypar( self, glb ):
        if 'varypar' in glb: return glb['varypar']
        return [  ]

    def __niter_dflt( self, glb ):
        return int(5)

    def __niter( self, glb ):
        if 'niter' in glb: return glb['niter']
        return int(5)



    #--------- return inp/go default --------------------------------------------------
    def __antenna_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __msselect_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __scan_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __uvrange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __timerange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __timerange( self, glb ):
        if 'timerange' in glb: return glb['timerange']
        dflt = self.__timerange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __uvrange( self, glb ):
        if 'uvrange' in glb: return glb['uvrange']
        dflt = self.__uvrange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        dflt = self.__antenna_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __scan( self, glb ):
        if 'scan' in glb: return glb['scan']
        dflt = self.__scan_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __msselect( self, glb ):
        if 'msselect' in glb: return glb['msselect']
        dflt = self.__msselect_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __field_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__field_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select field using field id(s) or field name(s)'
        value = self.__field( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Select spectral window/channels'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __selectdata_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__selectdata_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Other data selection parameters'
        value = self.__selectdata( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'selectdata': value},{'selectdata': self.__schema['selectdata']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-12.12s =\x1B[0m %s%-23s%s' % ('selectdata',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __timerange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__timerange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__timerange_dflt( self.__globals_( ) ) is not None:
             description = 'Select data based on time range'
             value = self.__timerange( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'timerange': value},{'timerange': self.__schema['timerange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('timerange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __uvrange_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__uvrange_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__uvrange_dflt( self.__globals_( ) ) is not None:
             description = 'Select data within uvrange (default units meters)'
             value = self.__uvrange( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'uvrange': value},{'uvrange': self.__schema['uvrange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('uvrange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __antenna_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__antenna_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__antenna_dflt( self.__globals_( ) ) is not None:
             description = 'Select data based on antenna/baseline'
             value = self.__antenna( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('antenna',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __scan_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__scan_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__scan_dflt( self.__globals_( ) ) is not None:
             description = 'Scan number range'
             value = self.__scan( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'scan': value},{'scan': self.__schema['scan']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('scan',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __msselect_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__msselect_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__msselect_dflt( self.__globals_( ) ) is not None:
             description = 'Optional complex data selection (ignore for now)'
             value = self.__msselect( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'msselect': value},{'msselect': self.__schema['msselect']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-9.9s =\x1B[0m %s%-23s%s' % ('msselect',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __niter_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__niter_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(5)
        description = 'Number of fitting iterations to execute'
        value = self.__niter( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'niter': value},{'niter': self.__schema['niter']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('niter',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __comptype_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__comptype_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'P'
        description = 'component model type: P(oint), G(aussian), or D(isk)'
        value = self.__comptype( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'comptype': value},{'comptype': self.__schema['comptype']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('comptype',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __sourcepar_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__sourcepar_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ float(1.0),float(0.0),float(0.0) ]
        description = 'Starting guess for component parameters (3 values for type P, 5 for G and D)'
        value = self.__sourcepar( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'sourcepar': value},{'sourcepar': self.__schema['sourcepar']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('sourcepar',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __varypar_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__varypar_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'Control which parameters to let vary in the fit'
        value = self.__varypar( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'varypar': value},{'varypar': self.__schema['varypar']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('varypar',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Optional output component list table'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-12.12s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'antenna' in glb: del glb['antenna']
        if 'outfile' in glb: del glb['outfile']
        if 'field' in glb: del glb['field']
        if 'msselect' in glb: del glb['msselect']
        if 'sourcepar' in glb: del glb['sourcepar']
        if 'scan' in glb: del glb['scan']
        if 'vis' in glb: del glb['vis']
        if 'niter' in glb: del glb['niter']
        if 'uvrange' in glb: del glb['uvrange']
        if 'comptype' in glb: del glb['comptype']
        if 'varypar' in glb: del glb['varypar']
        if 'spw' in glb: del glb['spw']
        if 'selectdata' in glb: del glb['selectdata']
        if 'timerange' in glb: del glb['timerange']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# uvmodelfit -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__selectdata_inp( )
        self.__timerange_inp( )
        self.__uvrange_inp( )
        self.__antenna_inp( )
        self.__scan_inp( )
        self.__msselect_inp( )
        self.__niter_inp( )
        self.__comptype_inp( )
        self.__sourcepar_inp( )
        self.__varypar_inp( )
        self.__outfile_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "uvmodelfit.last" if os.path.isfile("uvmodelfit.last") else "uvmodelfit.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('uvmodelfit.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['field'] = self.__field( self.__globals_( ) )
        _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
        _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
        _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
        _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
        _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
        _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
        _invocation_parameters['msselect'] = self.__msselect( self.__globals_( ) )
        _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )
        _invocation_parameters['comptype'] = self.__comptype( self.__globals_( ) )
        _invocation_parameters['sourcepar'] = self.__sourcepar( self.__globals_( ) )
        _invocation_parameters['varypar'] = self.__varypar( self.__globals_( ) )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#uvmodelfit( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, field=None, spw=None, selectdata=None, timerange=None, uvrange=None, antenna=None, scan=None, msselect=None, niter=None, comptype=None, sourcepar=None, varypar=None, outfile=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('uvmodelfit.pre')
        _postfile = os.path.realpath('uvmodelfit.last')
        task_result = None
        _arguments = [vis,field,spw,selectdata,timerange,uvrange,antenna,scan,msselect,niter,comptype,sourcepar,varypar,outfile]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if selectdata is not None: local_global['selectdata'] = selectdata
            if niter is not None: local_global['niter'] = niter
            if comptype is not None: local_global['comptype'] = comptype
            if sourcepar is not None: local_global['sourcepar'] = sourcepar
            if varypar is not None: local_global['varypar'] = varypar
            if outfile is not None: local_global['outfile'] = outfile

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['selectdata'] = self.__selectdata( local_global )
            _invocation_parameters['niter'] = self.__niter( local_global )
            _invocation_parameters['comptype'] = self.__comptype( local_global )
            _invocation_parameters['sourcepar'] = self.__sourcepar( local_global )
            _invocation_parameters['varypar'] = self.__varypar( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['timerange'] = self.__timerange( _invocation_parameters ) if timerange is None else timerange
            _invocation_parameters['uvrange'] = self.__uvrange( _invocation_parameters ) if uvrange is None else uvrange
            _invocation_parameters['antenna'] = self.__antenna( _invocation_parameters ) if antenna is None else antenna
            _invocation_parameters['scan'] = self.__scan( _invocation_parameters ) if scan is None else scan
            _invocation_parameters['msselect'] = self.__msselect( _invocation_parameters ) if msselect is None else msselect

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
            _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
            _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
            _invocation_parameters['msselect'] = self.__msselect( self.__globals_( ) )
            _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )
            _invocation_parameters['comptype'] = self.__comptype( self.__globals_( ) )
            _invocation_parameters['sourcepar'] = self.__sourcepar( self.__globals_( ) )
            _invocation_parameters['varypar'] = self.__varypar( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#uvmodelfit( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'uvmodelfit', [ 'vis=' + repr(_pc.document['vis']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'selectdata=' + repr(_pc.document['selectdata']), 'timerange=' + repr(_pc.document['timerange']), 'uvrange=' + repr(_pc.document['uvrange']), 'antenna=' + repr(_pc.document['antenna']), 'scan=' + repr(_pc.document['scan']), 'msselect=' + repr(_pc.document['msselect']), 'niter=' + repr(_pc.document['niter']), 'comptype=' + repr(_pc.document['comptype']), 'sourcepar=' + repr(_pc.document['sourcepar']), 'varypar=' + repr(_pc.document['varypar']), 'outfile=' + repr(_pc.document['outfile']) ] )
            task_result = _uvmodelfit_t( _pc.document['vis'],_pc.document['field'],_pc.document['spw'],_pc.document['selectdata'],_pc.document['timerange'],_pc.document['uvrange'],_pc.document['antenna'],_pc.document['scan'],_pc.document['msselect'],_pc.document['niter'],_pc.document['comptype'],_pc.document['sourcepar'],_pc.document['varypar'],_pc.document['outfile'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('uvmodelfit')
            casalog.post("Exception Reported: Error in uvmodelfit: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'uvmodelfit', task_result )

        #Added if _uvmodelfit_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

uvmodelfit = _uvmodelfit( )


##################### generated by xml-casa (v2) from imtrans.xml ###################
##################### 30ff8089f93306fba45c8fab1f49a731 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_imtrans import imtrans as _imtrans_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imtrans:
    """
    imtrans ---- Reorder image axes

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image which must be specified.
    outfile   Name of output CASA image.
    order     New zero-based axes order.
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    PARAMETER SUMMARY
    imagename        Name of the input image
    outfile          Name of output CASA image. Must be specified.
    order            Output axes mapping
    
    This task reorders (transposes) the axes in the input image to the specified
    order. The associated pixel values and coordinate system are transposed.
    
    The order parameter describes the mapping of the input axes to the output axes.
    It can be one of three types: a non-negative integer, a string, or a list of
    strings. If a string or non-negative integer, it should contain
    zero-based digits describing the new order of the input axes. It must
    contain the same number of (unique) digits as the number of input axes. For example,
    specifying order="1032" or order=1032 for a four axes image maps input axes
    1, 0, 3, 2 to output axes 0, 1, 2, 3. In the case of order being a nonnegative integer
    and the zeroth axis in the input being mapped to zeroth axis in the output, the zeroth
    digit is implicitly understood to be 0 so that to transpose an image where one would
    use a string order="0321", one could equivalently specify an int order=321.
    IMPORTANT: When specifying a non-negative integer and mapping the zeroth axis of
    the input to the zeroth axis of the output, do *not* explicitly specify the leading
    0; eg, specify order=321 rather than order=0321. Python interprets an integer with
    a leading 0 as an octal number.
    
    Because of ambiguity for axes numbers greater than nine, using string or integer order
    specifications cannot handle images containing more than 10 axes.
    The order parameter can also be specified as a list of strings which uniquely match,
    ignoring case, the first characters of the image axis names (ia.coordsys().names()).
    So to reorder an image with right ascension, declination, and frequency axes, one could
    specify order=["d", "f", "r"] or equivalently ["decl", "frequ", "right a"]. Note that
    specifying "ra" for the right ascension axis will result in an error because "ra" does
    not match the first two characters of "right ascension".
    Axes can be simultaneously inverted in cases where order is a string or an array of
    strings by specifying negative signs in front of the axis/axes to be inverted. So,
    in a 4-D image, order="-10-3-2" maps input axes 1, 0, 3, 2 to output axes 0, 1, 2, 3
    and reverses the direction and values of input axes 1, 3, and 2.
    EXAMPLE:
    # Swap the stokes and spectral axes in an RA-Dec-Stokes-Frequency image
    imagename = "myim.im"
    outfile = "outim.im"
    order = "0132"
    imtrans()
    
    # or
    
    outfile = "myim_2.im"
    order = 132
    imtrans()
    
    # or
    
    outfile = "myim_3.im"
    order = ["r", "d", "f", "s"]
    imtrans()
    
    # or
    
    utfile = "myim_4.im"
    order = ["rig", "declin", "frequ", "stok"]
    imtrans()


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Reorder image axes"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'order': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 9 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __order_dflt( self, glb ):
        return ''

    def __order( self, glb ):
        if 'order' in glb: return glb['order']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input image which must be specified.'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of output CASA image.'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __order_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__order_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'New zero-based axes order.'
        value = self.__order( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'order': value},{'order': self.__schema['order']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('order',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'imagename' in glb: del glb['imagename']
        if 'outfile' in glb: del glb['outfile']
        if 'order' in glb: del glb['order']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# imtrans -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__outfile_inp( )
        self.__order_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "imtrans.last" if os.path.isfile("imtrans.last") else "imtrans.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('imtrans.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['order'] = self.__order( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imtrans( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, outfile=None, order=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imtrans.pre')
        _postfile = os.path.realpath('imtrans.last')
        task_result = None
        _arguments = [imagename,outfile,order]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if outfile is not None: local_global['outfile'] = outfile
            if order is not None: local_global['order'] = order

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['order'] = self.__order( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['order'] = self.__order( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imtrans( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'imtrans', [ 'imagename=' + repr(_pc.document['imagename']), 'outfile=' + repr(_pc.document['outfile']), 'order=' + repr(_pc.document['order']) ] )
            task_result = _imtrans_t( _pc.document['imagename'],_pc.document['outfile'],_pc.document['order'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('imtrans')
            casalog.post("Exception Reported: Error in imtrans: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'imtrans', task_result )

        #Added if _imtrans_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

imtrans = _imtrans( )


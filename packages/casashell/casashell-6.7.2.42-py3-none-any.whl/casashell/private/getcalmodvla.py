##################### generated by xml-casa (v2) from getcalmodvla.xml ##############
##################### e2069cb4389a7df15be10805dc748018 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_getcalmodvla import getcalmodvla as _getcalmodvla_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _getcalmodvla:
    """
    getcalmodvla ---- Retrieve calibrator brightness distributions from a VLA web service.

    
    This application retrieves calibrator information via a VLA web service
    and writes this information as a componentlist so that it may be used by applications
    downstream.
    

    --------- parameter descriptions ---------------------------------------------

    outfile   The name of the output component list to be written. Must be specified
              Default: none, must be specified
                 Example: outfile="3c273.cl"
    overwrite Overwrite a file or directory of the same name of outfile if it exists. If overwrite=False and a file or directory of the same name as outfile exists, an exception will be thrown.
    source    The calibrator name. The case-insensitive names
              "3C48", "3C286", "3C138",
              and "3C147" are supported. Exactly one of source
              or direction must be specified.
    direction An alternative to source. It is the direction of the calibrator. The supported
              formats are of the form "EPOCH LONGITUDE LATITUDE", eg
              
              "J2000 12:34:56 -12.34.56".
              "J2000 19h53m50 40d06m00"
              "B1950 292.5deg -40.0deg"
              "ICRS 13:05:27.2780 -049.28.04.458"
              "GALACTIC 47.5rad -60.22rad"
              
              Only astronomical coordinate systems should be used; eg AZEL is right out. The web service
              will attempt to locate a known calibrator near this direction, where "near" is defined by
              the web service team. Exactly one of source or direction must be specified.
    band      A string representing the case-insensitive code of
              the band for which the data are required. For the VLA,
              supported codes are "P", "L", "S", "C", "X", "U", "K", "A", and "Q".
    obsdate   The date for which to obtain the calibrator information. If numeric,
              is assumed to be an MJD. If a string, is assumed to be a date and must
              be of the form "YYYY-MM-DD".
    refdate   The reference date after which new database entries will be ignored. If numeric,
              is assumed to be an MJD. If a string, is assumed to be a date and must
              be of the form "YYYY-MM-DD". Used to support
              historical reproducibility. A non-positive value will result in this parameter being ignored,
              and the most recent entry will be used (which may be later than obsdate).
    hosts     List of hostnames to use when querying the web service. They will be queried in
              order until a successful response is received.
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    SEE TASK DESCRIPTION IN CASADOCS
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Retrieve calibrator brightness distributions from a VLA web service."""

    __schema = {'outfile': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'overwrite': {'type': 'cBool'}, 'source': {'type': 'cStr', 'coerce': _coerce.to_str}, 'direction': {'type': 'cStr', 'coerce': _coerce.to_str}, 'band': {'type': 'cStr', 'coerce': _coerce.to_str}, 'obsdate': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'refdate': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'hosts': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 9 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __direction_dflt( self, glb ):
        return ''

    def __direction( self, glb ):
        if 'direction' in glb: return glb['direction']
        return ''

    def __band_dflt( self, glb ):
        return ''

    def __band( self, glb ):
        if 'band' in glb: return glb['band']
        return ''

    def __source_dflt( self, glb ):
        return ''

    def __source( self, glb ):
        if 'source' in glb: return glb['source']
        return ''

    def __hosts_dflt( self, glb ):
        return [ 'http://obs.vla.nrao.edu/calmodvla' ]

    def __hosts( self, glb ):
        if 'hosts' in glb: return glb['hosts']
        return [ 'http://obs.vla.nrao.edu/calmodvla' ]

    def __refdate_dflt( self, glb ):
        return int(0)

    def __refdate( self, glb ):
        if 'refdate' in glb: return glb['refdate']
        return int(0)

    def __obsdate_dflt( self, glb ):
        return int(0)

    def __obsdate( self, glb ):
        if 'obsdate' in glb: return glb['obsdate']
        return int(0)

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'The name of the output component list to be written. Must be specified'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Overwrite a file or directory of the same name as outfile if it exists.'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __source_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__source_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'The calibrator name.'
        value = self.__source( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'source': value},{'source': self.__schema['source']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('source',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __direction_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__direction_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'The direction of the calibrator'
        value = self.__direction( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'direction': value},{'direction': self.__schema['direction']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('direction',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __band_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__band_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'The receiver band for which the source structure is needed'
        value = self.__band( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'band': value},{'band': self.__schema['band']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('band',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __obsdate_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__obsdate_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'The observation date'
        value = self.__obsdate( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'obsdate': value},{'obsdate': self.__schema['obsdate']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('obsdate',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __refdate_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__refdate_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'The reference date after which new database entries will be ignored.'
        value = self.__refdate( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'refdate': value},{'refdate': self.__schema['refdate']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('refdate',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __hosts_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__hosts_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ 'http://obs.vla.nrao.edu/calmodvla' ]
        description = 'List of hostnames to use when querying the web service.'
        value = self.__hosts( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'hosts': value},{'hosts': self.__schema['hosts']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('hosts',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'outfile' in glb: del glb['outfile']
        if 'refdate' in glb: del glb['refdate']
        if 'source' in glb: del glb['source']
        if 'band' in glb: del glb['band']
        if 'direction' in glb: del glb['direction']
        if 'obsdate' in glb: del glb['obsdate']
        if 'hosts' in glb: del glb['hosts']
        if 'overwrite' in glb: del glb['overwrite']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# getcalmodvla -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__outfile_inp( )
        self.__overwrite_inp( )
        self.__source_inp( )
        self.__direction_inp( )
        self.__band_inp( )
        self.__obsdate_inp( )
        self.__refdate_inp( )
        self.__hosts_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "getcalmodvla.last" if os.path.isfile("getcalmodvla.last") else "getcalmodvla.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('getcalmodvla.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['source'] = self.__source( self.__globals_( ) )
        _invocation_parameters['direction'] = self.__direction( self.__globals_( ) )
        _invocation_parameters['band'] = self.__band( self.__globals_( ) )
        _invocation_parameters['obsdate'] = self.__obsdate( self.__globals_( ) )
        _invocation_parameters['refdate'] = self.__refdate( self.__globals_( ) )
        _invocation_parameters['hosts'] = self.__hosts( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#getcalmodvla( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, outfile=None, overwrite=None, source=None, direction=None, band=None, obsdate=None, refdate=None, hosts=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('getcalmodvla.pre')
        _postfile = os.path.realpath('getcalmodvla.last')
        task_result = None
        _arguments = [outfile,overwrite,source,direction,band,obsdate,refdate,hosts]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if outfile is not None: local_global['outfile'] = outfile
            if overwrite is not None: local_global['overwrite'] = overwrite
            if source is not None: local_global['source'] = source
            if direction is not None: local_global['direction'] = direction
            if band is not None: local_global['band'] = band
            if obsdate is not None: local_global['obsdate'] = obsdate
            if refdate is not None: local_global['refdate'] = refdate
            if hosts is not None: local_global['hosts'] = hosts

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['source'] = self.__source( local_global )
            _invocation_parameters['direction'] = self.__direction( local_global )
            _invocation_parameters['band'] = self.__band( local_global )
            _invocation_parameters['obsdate'] = self.__obsdate( local_global )
            _invocation_parameters['refdate'] = self.__refdate( local_global )
            _invocation_parameters['hosts'] = self.__hosts( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['source'] = self.__source( self.__globals_( ) )
            _invocation_parameters['direction'] = self.__direction( self.__globals_( ) )
            _invocation_parameters['band'] = self.__band( self.__globals_( ) )
            _invocation_parameters['obsdate'] = self.__obsdate( self.__globals_( ) )
            _invocation_parameters['refdate'] = self.__refdate( self.__globals_( ) )
            _invocation_parameters['hosts'] = self.__hosts( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#getcalmodvla( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'getcalmodvla', [ 'outfile=' + repr(_pc.document['outfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'source=' + repr(_pc.document['source']), 'direction=' + repr(_pc.document['direction']), 'band=' + repr(_pc.document['band']), 'obsdate=' + repr(_pc.document['obsdate']), 'refdate=' + repr(_pc.document['refdate']), 'hosts=' + repr(_pc.document['hosts']) ] )
            task_result = _getcalmodvla_t( _pc.document['outfile'],_pc.document['overwrite'],_pc.document['source'],_pc.document['direction'],_pc.document['band'],_pc.document['obsdate'],_pc.document['refdate'],_pc.document['hosts'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('getcalmodvla')
            casalog.post("Exception Reported: Error in getcalmodvla: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'getcalmodvla', task_result )

        #Added if _getcalmodvla_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

getcalmodvla = _getcalmodvla( )


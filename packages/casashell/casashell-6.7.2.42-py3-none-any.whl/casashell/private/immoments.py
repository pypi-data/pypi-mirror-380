##################### generated by xml-casa (v2) from immoments.xml #################
##################### 71135811d8080ad40de603edf0247328 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_immoments import immoments as _immoments_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _immoments:
    """
    immoments ---- Compute moments from an image

    --------- parameter descriptions ---------------------------------------------

    imagename  Name of the input image
    moments    List of moments you would like to compute
    axis       The momement axis: ra, dec, lat, long, spectral, or stokes
    region     Region selection. Default is to use the full image.
    box        Rectangular region(s) to select in direction plane. Default is to use the entire direction plane.
    chans      Channels to use. Default is to use all channels.
    stokes     Stokes planes to use. Default is to use all Stokes planes.
    mask       Mask to use. Default is none.
    includepix Range of pixel values to include
    excludepix Range of pixel values to exclude
    outfile    Output image file name (or root for multiple moments)
    stretch    Stretch the mask if necessary and possible?
    [1;42mRETURNS[1;m       bool

    --------- examples -----------------------------------------------------------

    
    The spectral moment distributions at each pixel are
    determined.  See the cookbook and User Reference Manual for
    mathematical details.
    
    The main control of the calculation is given by parameter
    moments:
    
    moments=-1  - mean value of the spectrum
    moments=0   - integrated value of the spectrum
    moments=1   - intensity weighted coordinate;traditionally used to get
    'velocity fields'
    moments=2   - intensity weighted dispersion of the coordinate; traditionally
    used to get "velocity dispersion"
    moments=3   - median of I
    moments=4   - median coordinate
    moments=5   - standard deviation about the mean of the spectrum
    moments=6   - root mean square of the spectrum
    moments=7   - absolute mean deviation of the spectrum
    moments=8   - maximum value of the spectrum
    moments=9   - coordinate of the maximum value of the spectrum
    moments=10  - minimum value of the spectrum
    moments=11  - coordinate of the minimum value of the spectrum
    
    Keyword arguments:
    imagename    Name of input image
    default: none; example: imagename="ngc5921_task.image"
    moments      List of moments you would like to compute
    default: 0 (integrated spectrum);example: moments=[0,1]
    see list above
    axis         The moment axis
    default: (spectral axis); example: axis=spec
    options: ra, dec, lattitude, longitude, spectral, stokes
    mask         Mask to use. Default is none.
    stretch      Stretch the input mask if necessary and possible. See below.
    region       Region selection. Default
    is to use the full image.
    box         Rectangular region to select in direction plane. See
    Default is to use the entire direction plane.
    Example: box="10,10,50,50"
    box = "10,10,30,30,35,35,50,50" (two boxes)
    chans       Channels to use. Default is to use
    all channels.
    
    stokes      Stokes planes to use. Default is to
    use all Stokes planes.
    Example: stokes="IQUV";
    Example:stokes="I,Q"
    includepix  Range of pixel values to include
    default: [-1] (all pixels); example=[0.02,100.0]
    excludepix  Range of pixel values to exclude
    default: [-1] (don"t exclude pixels); example=[100.,200.]
    outfile     Output image file name (or root for multiple moments)
    default: "" (input+auto-determined suffix);example: outfile="source_moment"
    
    If stretch is true and if the number of mask dimensions is less than
    or equal to the number of image dimensions and some axes in the
    mask are degenerate while the corresponding axes in the image are not,
    the mask will be stetched in the degenerate axis dimensions. For example,
    if the input image has shape [100, 200, 10] and the input
    mask has shape [100, 200, 1] and stretch is true, the mask will be
    stretched along the third dimension to shape [100, 200, 10]. However if
    the mask is shape [100, 200, 2], stretching is not possible and an
    error will result.
    
    Example for finding the 1-momment, intensity-weighted
    coordinate, often used for finding velocity fields.
    immoments( axis="spec", imagename="myimage", moment=1, outfile="velocityfields" )
    
    Example finding the spectral mean, -1 moment, on a specified region
    of the image as defined by the box and stokes parameters
    taskname="immoments"
    default()
    imagename = "myimage"
    moment    =  -1
    
    axis      = "spec"
    stokes     = "I"
    box       = [55,12,97,32]
    go
    
    Example using a mask created with a second file to select the
    data used to calculate the 0-moments, integrated values.  In
    this case the mask is from the calibrated.im file and all values
    that have a value greater than 0.5 will be positive in the mask..
    immoments( "clean.image", axis="spec", mask="calibrated.im>0.5", outfile="mom_withmask.im" )
    
    If an image has multiple (per-channel beams) and the moment axis is equal to the
    spectral axis, each channel will be convolved with a beam that is equal to the beam
    having the largest area in the beamset prior to moment determination.


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Compute moments from an image"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'moments': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'axis': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cInt'}]}, 'region': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'box': {'type': 'cStr', 'coerce': _coerce.to_str}, 'chans': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stokes': {'type': 'cStr', 'coerce': _coerce.to_str}, 'mask': {'type': 'cStr', 'coerce': _coerce.to_str}, 'includepix': {'anyof': [{'type': 'cInt'}, {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'excludepix': {'anyof': [{'type': 'cInt'}, {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stretch': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 10 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __axis_dflt( self, glb ):
        return 'spectral'

    def __axis( self, glb ):
        if 'axis' in glb: return glb['axis']
        return 'spectral'

    def __excludepix_dflt( self, glb ):
        return int(-1)

    def __excludepix( self, glb ):
        if 'excludepix' in glb: return glb['excludepix']
        return int(-1)

    def __includepix_dflt( self, glb ):
        return int(-1)

    def __includepix( self, glb ):
        if 'includepix' in glb: return glb['includepix']
        return int(-1)

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __moments_dflt( self, glb ):
        return [ int(0) ]

    def __moments( self, glb ):
        if 'moments' in glb: return glb['moments']
        return [ int(0) ]

    def __mask_dflt( self, glb ):
        return ''

    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        return ''

    def __stokes_dflt( self, glb ):
        return ''

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return ''

    def __region_dflt( self, glb ):
        return ''

    def __region( self, glb ):
        if 'region' in glb: return glb['region']
        return ''

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __box_dflt( self, glb ):
        return ''

    def __box( self, glb ):
        if 'box' in glb: return glb['box']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __stretch_dflt( self, glb ):
        if self.__mask( glb ) != "": return bool(False)
        return None

    #--------- return subparam values -------------------------------------------------
    def __stretch( self, glb ):
        if 'stretch' in glb: return glb['stretch']
        dflt = self.__stretch_dflt( glb )
        if dflt is not None: return dflt
        return False

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __moments_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__moments_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [ int(0) ]
        description = 'List of moments you would like to compute'
        value = self.__moments( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'moments': value},{'moments': self.__schema['moments']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('moments',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __axis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__axis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'spectral'
        description = 'The momement axis: ra, dec, lat, long, spectral, or stokes'
        value = self.__axis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'axis': value},{'axis': self.__schema['axis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('axis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __region_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__region_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Region selection. Default is to use the full image.'
        value = self.__region( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'region': value},{'region': self.__schema['region']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('region',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __box_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__box_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Rectangular region(s) to select in direction plane. Default is to use the entire direction plane.'
        value = self.__box( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'box': value},{'box': self.__schema['box']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('box',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __chans_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__chans_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Channels to use. Default is to use all channels.'
        value = self.__chans( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('chans',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stokes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stokes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Stokes planes to use. Default is to use all Stokes planes.'
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('stokes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __mask_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__mask_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Mask to use. Default is none.'
        value = self.__mask( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-10.10s =\x1B[0m %s%-23s%s' % ('mask',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __includepix_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__includepix_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-1)
        description = 'Range of pixel values to include'
        value = self.__includepix( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'includepix': value},{'includepix': self.__schema['includepix']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('includepix',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __excludepix_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__excludepix_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-1)
        description = 'Range of pixel values to exclude'
        value = self.__excludepix( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'excludepix': value},{'excludepix': self.__schema['excludepix']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('excludepix',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outfile_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__outfile_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Output image file name (or root for multiple moments)'
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('outfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stretch_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stretch_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        if self.__stretch_dflt( self.__globals_( ) ) is not None:
             description = 'Stretch the mask if necessary and possible?'
             value = self.__stretch( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stretch': value},{'stretch': self.__schema['stretch']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-7.7s =\x1B[0m %s%-23s%s' % ('stretch',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'outfile' in glb: del glb['outfile']
        if 'mask' in glb: del glb['mask']
        if 'stretch' in glb: del glb['stretch']
        if 'imagename' in glb: del glb['imagename']
        if 'moments' in glb: del glb['moments']
        if 'chans' in glb: del glb['chans']
        if 'region' in glb: del glb['region']
        if 'box' in glb: del glb['box']
        if 'axis' in glb: del glb['axis']
        if 'excludepix' in glb: del glb['excludepix']
        if 'includepix' in glb: del glb['includepix']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# immoments -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__moments_inp( )
        self.__axis_inp( )
        self.__region_inp( )
        self.__box_inp( )
        self.__chans_inp( )
        self.__stokes_inp( )
        self.__mask_inp( )
        self.__includepix_inp( )
        self.__excludepix_inp( )
        self.__outfile_inp( )
        self.__stretch_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "immoments.last" if os.path.isfile("immoments.last") else "immoments.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('immoments.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['moments'] = self.__moments( self.__globals_( ) )
        _invocation_parameters['axis'] = self.__axis( self.__globals_( ) )
        _invocation_parameters['region'] = self.__region( self.__globals_( ) )
        _invocation_parameters['box'] = self.__box( self.__globals_( ) )
        _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
        _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
        _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
        _invocation_parameters['includepix'] = self.__includepix( self.__globals_( ) )
        _invocation_parameters['excludepix'] = self.__excludepix( self.__globals_( ) )
        _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
        _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#immoments( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, moments=None, axis=None, region=None, box=None, chans=None, stokes=None, mask=None, includepix=None, excludepix=None, outfile=None, stretch=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('immoments.pre')
        _postfile = os.path.realpath('immoments.last')
        task_result = None
        _arguments = [imagename,moments,axis,region,box,chans,stokes,mask,includepix,excludepix,outfile,stretch]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if moments is not None: local_global['moments'] = moments
            if axis is not None: local_global['axis'] = axis
            if region is not None: local_global['region'] = region
            if box is not None: local_global['box'] = box
            if chans is not None: local_global['chans'] = chans
            if stokes is not None: local_global['stokes'] = stokes
            if mask is not None: local_global['mask'] = mask
            if includepix is not None: local_global['includepix'] = includepix
            if excludepix is not None: local_global['excludepix'] = excludepix
            if outfile is not None: local_global['outfile'] = outfile

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['moments'] = self.__moments( local_global )
            _invocation_parameters['axis'] = self.__axis( local_global )
            _invocation_parameters['region'] = self.__region( local_global )
            _invocation_parameters['box'] = self.__box( local_global )
            _invocation_parameters['chans'] = self.__chans( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )
            _invocation_parameters['mask'] = self.__mask( local_global )
            _invocation_parameters['includepix'] = self.__includepix( local_global )
            _invocation_parameters['excludepix'] = self.__excludepix( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['stretch'] = self.__stretch( _invocation_parameters ) if stretch is None else stretch

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['moments'] = self.__moments( self.__globals_( ) )
            _invocation_parameters['axis'] = self.__axis( self.__globals_( ) )
            _invocation_parameters['region'] = self.__region( self.__globals_( ) )
            _invocation_parameters['box'] = self.__box( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['includepix'] = self.__includepix( self.__globals_( ) )
            _invocation_parameters['excludepix'] = self.__excludepix( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#immoments( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'immoments', [ 'imagename=' + repr(_pc.document['imagename']), 'moments=' + repr(_pc.document['moments']), 'axis=' + repr(_pc.document['axis']), 'region=' + repr(_pc.document['region']), 'box=' + repr(_pc.document['box']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'mask=' + repr(_pc.document['mask']), 'includepix=' + repr(_pc.document['includepix']), 'excludepix=' + repr(_pc.document['excludepix']), 'outfile=' + repr(_pc.document['outfile']), 'stretch=' + repr(_pc.document['stretch']) ] )
            task_result = _immoments_t( _pc.document['imagename'],_pc.document['moments'],_pc.document['axis'],_pc.document['region'],_pc.document['box'],_pc.document['chans'],_pc.document['stokes'],_pc.document['mask'],_pc.document['includepix'],_pc.document['excludepix'],_pc.document['outfile'],_pc.document['stretch'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('immoments')
            casalog.post("Exception Reported: Error in immoments: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'immoments', task_result )

        #Added if _immoments_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

immoments = _immoments( )


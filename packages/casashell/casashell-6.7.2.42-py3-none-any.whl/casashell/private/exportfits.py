##################### generated by xml-casa (v2) from exportfits.xml ################
##################### 26c81b83025f4fbfa3801ec2ff525110 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_exportfits import exportfits as _exportfits_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _exportfits:
    """
    exportfits ---- Convert a CASA image to a FITS file

    
    CASA-produced images can be exported as FITS files for transporting to
    other software packages or publication.
    No subimaging of the fits image can be made with this task.
    The spectral reference frame can be changed prior to export using the
    task imreframe.

    --------- parameter descriptions ---------------------------------------------

    imagename  Name of input CASA image
               Default: none
               
                  Example: fitsimage='3C273XC1.image'
    fitsimage  Name of output image FITS file
               Default: none
               
                  Example: fitsimage='3C273XC1.fits'
    velocity   Use velocity (rather than frequency) as spectral axis
               Default: False
               Options: False|True
    optical    Use the optical (rather than radio) velocity convention
               Default: False
               Options: False|True
    bitpix     Bits per pixel
               Default: -32
               
                  Example: bitpix=16
    minpix     Minimum pixel value (if minpix > maxpix, value is automatically determined)
    maxpix     Maximum pixel value (if minpix > maxpix, value is
               automatically determined)
               Default: -1
    overwrite  Overwrite output file if it exists?
               Default: False
               Options: False|True
    dropstokes Drop the Stokes axis?
    stokeslast Put Stokes axis last in header?
               Default: True
               Options: True|False
    history    Write history to the FITS image?
               Default: True
               Options: True|False
    dropdeg    Drop all degenerate axes (e.g. Stokes and/or Frequency)?
               Default: False
               Options: False|True

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF EXPORTFITS IN CASA DOCS:
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a CASA image to a FITS file"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'fitsimage': {'type': 'cStr', 'coerce': _coerce.to_str}, 'velocity': {'type': 'cBool'}, 'optical': {'type': 'cBool'}, 'bitpix': {'type': 'cInt', 'allowed': [ -32, 16 ]}, 'minpix': {'anyof': [{'type': 'cInt'}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'maxpix': {'anyof': [{'type': 'cInt'}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'overwrite': {'type': 'cBool'}, 'dropstokes': {'type': 'cBool'}, 'stokeslast': {'type': 'cBool'}, 'history': {'type': 'cBool'}, 'dropdeg': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 10 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __stokeslast_dflt( self, glb ):
        return True

    def __stokeslast( self, glb ):
        if 'stokeslast' in glb: return glb['stokeslast']
        return True

    def __minpix_dflt( self, glb ):
        return int(0)

    def __minpix( self, glb ):
        if 'minpix' in glb: return glb['minpix']
        return int(0)

    def __optical_dflt( self, glb ):
        return False

    def __optical( self, glb ):
        if 'optical' in glb: return glb['optical']
        return False

    def __dropstokes_dflt( self, glb ):
        return False

    def __dropstokes( self, glb ):
        if 'dropstokes' in glb: return glb['dropstokes']
        return False

    def __fitsimage_dflt( self, glb ):
        return ''

    def __fitsimage( self, glb ):
        if 'fitsimage' in glb: return glb['fitsimage']
        return ''

    def __dropdeg_dflt( self, glb ):
        return False

    def __dropdeg( self, glb ):
        if 'dropdeg' in glb: return glb['dropdeg']
        return False

    def __bitpix_dflt( self, glb ):
        return int(-32)

    def __bitpix( self, glb ):
        if 'bitpix' in glb: return glb['bitpix']
        return int(-32)

    def __maxpix_dflt( self, glb ):
        return int(-1)

    def __maxpix( self, glb ):
        if 'maxpix' in glb: return glb['maxpix']
        return int(-1)

    def __history_dflt( self, glb ):
        return True

    def __history( self, glb ):
        if 'history' in glb: return glb['history']
        return True

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __velocity_dflt( self, glb ):
        return False

    def __velocity( self, glb ):
        if 'velocity' in glb: return glb['velocity']
        return False

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input CASA image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __fitsimage_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__fitsimage_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of output image FITS file'
        value = self.__fitsimage( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'fitsimage': value},{'fitsimage': self.__schema['fitsimage']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('fitsimage',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __velocity_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__velocity_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Use velocity (rather than frequency) as spectral axis'
        value = self.__velocity( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'velocity': value},{'velocity': self.__schema['velocity']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('velocity',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __optical_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__optical_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Use the optical (rather than radio) velocity convention'
        value = self.__optical( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'optical': value},{'optical': self.__schema['optical']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('optical',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __bitpix_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__bitpix_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-32)
        description = 'Bits per pixel'
        value = self.__bitpix( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'bitpix': value},{'bitpix': self.__schema['bitpix']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('bitpix',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __minpix_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__minpix_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = 'Minimum pixel value (if minpix > maxpix, value is automatically determined)'
        value = self.__minpix( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'minpix': value},{'minpix': self.__schema['minpix']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('minpix',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __maxpix_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__maxpix_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(-1)
        description = 'Maximum pixel value (if minpix > maxpix, value is automatically determined)'
        value = self.__maxpix( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'maxpix': value},{'maxpix': self.__schema['maxpix']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('maxpix',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __overwrite_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__overwrite_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Overwrite output file if it exists?'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __dropstokes_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dropstokes_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Drop the Stokes axis?'
        value = self.__dropstokes( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dropstokes': value},{'dropstokes': self.__schema['dropstokes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('dropstokes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stokeslast_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__stokeslast_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Put Stokes axis last in header?'
        value = self.__stokeslast( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'stokeslast': value},{'stokeslast': self.__schema['stokeslast']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('stokeslast',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __history_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__history_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        description = 'Write history to the FITS image?'
        value = self.__history( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'history': value},{'history': self.__schema['history']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('history',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __dropdeg_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__dropdeg_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'Drop all degenerate axes (e.g. Stokes and/or Frequency)?'
        value = self.__dropdeg( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'dropdeg': value},{'dropdeg': self.__schema['dropdeg']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('dropdeg',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'dropdeg' in glb: del glb['dropdeg']
        if 'history' in glb: del glb['history']
        if 'minpix' in glb: del glb['minpix']
        if 'bitpix' in glb: del glb['bitpix']
        if 'dropstokes' in glb: del glb['dropstokes']
        if 'imagename' in glb: del glb['imagename']
        if 'stokeslast' in glb: del glb['stokeslast']
        if 'optical' in glb: del glb['optical']
        if 'fitsimage' in glb: del glb['fitsimage']
        if 'maxpix' in glb: del glb['maxpix']
        if 'overwrite' in glb: del glb['overwrite']
        if 'velocity' in glb: del glb['velocity']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# exportfits -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__fitsimage_inp( )
        self.__velocity_inp( )
        self.__optical_inp( )
        self.__bitpix_inp( )
        self.__minpix_inp( )
        self.__maxpix_inp( )
        self.__overwrite_inp( )
        self.__dropstokes_inp( )
        self.__stokeslast_inp( )
        self.__history_inp( )
        self.__dropdeg_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "exportfits.last" if os.path.isfile("exportfits.last") else "exportfits.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('exportfits.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['fitsimage'] = self.__fitsimage( self.__globals_( ) )
        _invocation_parameters['velocity'] = self.__velocity( self.__globals_( ) )
        _invocation_parameters['optical'] = self.__optical( self.__globals_( ) )
        _invocation_parameters['bitpix'] = self.__bitpix( self.__globals_( ) )
        _invocation_parameters['minpix'] = self.__minpix( self.__globals_( ) )
        _invocation_parameters['maxpix'] = self.__maxpix( self.__globals_( ) )
        _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        _invocation_parameters['dropstokes'] = self.__dropstokes( self.__globals_( ) )
        _invocation_parameters['stokeslast'] = self.__stokeslast( self.__globals_( ) )
        _invocation_parameters['history'] = self.__history( self.__globals_( ) )
        _invocation_parameters['dropdeg'] = self.__dropdeg( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#exportfits( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, fitsimage=None, velocity=None, optical=None, bitpix=None, minpix=None, maxpix=None, overwrite=None, dropstokes=None, stokeslast=None, history=None, dropdeg=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('exportfits.pre')
        _postfile = os.path.realpath('exportfits.last')
        task_result = None
        _arguments = [imagename,fitsimage,velocity,optical,bitpix,minpix,maxpix,overwrite,dropstokes,stokeslast,history,dropdeg]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if fitsimage is not None: local_global['fitsimage'] = fitsimage
            if velocity is not None: local_global['velocity'] = velocity
            if optical is not None: local_global['optical'] = optical
            if bitpix is not None: local_global['bitpix'] = bitpix
            if minpix is not None: local_global['minpix'] = minpix
            if maxpix is not None: local_global['maxpix'] = maxpix
            if overwrite is not None: local_global['overwrite'] = overwrite
            if dropstokes is not None: local_global['dropstokes'] = dropstokes
            if stokeslast is not None: local_global['stokeslast'] = stokeslast
            if history is not None: local_global['history'] = history
            if dropdeg is not None: local_global['dropdeg'] = dropdeg

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['fitsimage'] = self.__fitsimage( local_global )
            _invocation_parameters['velocity'] = self.__velocity( local_global )
            _invocation_parameters['optical'] = self.__optical( local_global )
            _invocation_parameters['bitpix'] = self.__bitpix( local_global )
            _invocation_parameters['minpix'] = self.__minpix( local_global )
            _invocation_parameters['maxpix'] = self.__maxpix( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['dropstokes'] = self.__dropstokes( local_global )
            _invocation_parameters['stokeslast'] = self.__stokeslast( local_global )
            _invocation_parameters['history'] = self.__history( local_global )
            _invocation_parameters['dropdeg'] = self.__dropdeg( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['fitsimage'] = self.__fitsimage( self.__globals_( ) )
            _invocation_parameters['velocity'] = self.__velocity( self.__globals_( ) )
            _invocation_parameters['optical'] = self.__optical( self.__globals_( ) )
            _invocation_parameters['bitpix'] = self.__bitpix( self.__globals_( ) )
            _invocation_parameters['minpix'] = self.__minpix( self.__globals_( ) )
            _invocation_parameters['maxpix'] = self.__maxpix( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['dropstokes'] = self.__dropstokes( self.__globals_( ) )
            _invocation_parameters['stokeslast'] = self.__stokeslast( self.__globals_( ) )
            _invocation_parameters['history'] = self.__history( self.__globals_( ) )
            _invocation_parameters['dropdeg'] = self.__dropdeg( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#exportfits( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'exportfits', [ 'imagename=' + repr(_pc.document['imagename']), 'fitsimage=' + repr(_pc.document['fitsimage']), 'velocity=' + repr(_pc.document['velocity']), 'optical=' + repr(_pc.document['optical']), 'bitpix=' + repr(_pc.document['bitpix']), 'minpix=' + repr(_pc.document['minpix']), 'maxpix=' + repr(_pc.document['maxpix']), 'overwrite=' + repr(_pc.document['overwrite']), 'dropstokes=' + repr(_pc.document['dropstokes']), 'stokeslast=' + repr(_pc.document['stokeslast']), 'history=' + repr(_pc.document['history']), 'dropdeg=' + repr(_pc.document['dropdeg']) ] )
            task_result = _exportfits_t( _pc.document['imagename'],_pc.document['fitsimage'],_pc.document['velocity'],_pc.document['optical'],_pc.document['bitpix'],_pc.document['minpix'],_pc.document['maxpix'],_pc.document['overwrite'],_pc.document['dropstokes'],_pc.document['stokeslast'],_pc.document['history'],_pc.document['dropdeg'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('exportfits')
            casalog.post("Exception Reported: Error in exportfits: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'exportfits', task_result )

        #Added if _exportfits_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

exportfits = _exportfits( )


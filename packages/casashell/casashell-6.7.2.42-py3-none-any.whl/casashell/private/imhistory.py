##################### generated by xml-casa (v2) from imhistory.xml #################
##################### bb68db34e36ca4abbe694ff07ec721b1 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_imhistory import imhistory as _imhistory_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imhistory:
    """
    imhistory ---- Retrieve and modify image history

    
    Retrieve and modify image history.
    
    This task provides access to the logtable of an image, where generally
    history information is stored. Two operation modes are supported. When
    mode="list", the history messages are returned as an array of
    strings. If verbose=True, this information is also written to the
    logger. When mode="append", a specified message (along with its
    specified origin) are appended to the logtable and True is returned if
    successful.

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input (CASA or FITS) image
              Default: none
              
                 Example: imagename='ngc5921.im'
    mode      Operating mode.
              Default: 'list' (retrieve history)
              Options: 'list|append' ('append' to append a
              record to history)
    verbose   Write history to logger if mode="list"?
              Subparameter of mode='list'
              Default: True
              Options: True|False
    origin    Origin of appended message. 
              Subparameter of mode='append'
              Default: 'imhistory'
              
              The user can specify any string. This string will
              appear as a tag at the start of the appended line
              in the image history. Only used for mode="append".
    message   Message to append. 
              Subparameter of mode='append'
              Default: none
              
              Only used of mode="append".
    [1;42mRETURNS[1;m      variant

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMHISTORY IN CASA DOCS:
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """information,analysis"""
    _info_desc_ = """Retrieve and modify image history"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'mode': {'type': 'cStr', 'coerce': _coerce.to_str}, 'verbose': {'type': 'cBool'}, 'origin': {'type': 'cStr', 'coerce': _coerce.to_str}, 'message': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 10 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __mode_dflt( self, glb ):
        return 'list'

    def __mode( self, glb ):
        if 'mode' in glb: return glb['mode']
        return 'list'

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __verbose_dflt( self, glb ):
        if self.__mode( glb ) == "list": return bool(True)
        return None
    def __origin_dflt( self, glb ):
        if self.__mode( glb ) == "append": return "imhistory"
        return None
    def __message_dflt( self, glb ):
        if self.__mode( glb ) == "append": return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        dflt = self.__verbose_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __origin( self, glb ):
        if 'origin' in glb: return glb['origin']
        dflt = self.__origin_dflt( glb )
        if dflt is not None: return dflt
        return 'imhistory'
    def __message( self, glb ):
        if 'message' in glb: return glb['message']
        dflt = self.__message_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__imagename_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of the input spectral line image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-10.10s = %s%-23s%s' % ('imagename',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __mode_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__mode_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'list'
        description = 'Mode to run in, "list" to retrieve history, "append" to append a record to history.'
        value = self.__mode( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'mode': value},{'mode': self.__schema['mode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-10.10s =\x1B[0m %s%-23s%s' % ('mode',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __verbose_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__verbose_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return True
        if self.__verbose_dflt( self.__globals_( ) ) is not None:
             description = 'Write history to logger if mode="list"?'
             value = self.__verbose( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-7.7s =\x1B[0m %s%-23s%s' % ('verbose',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __origin_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__origin_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return 'imhistory'
        if self.__origin_dflt( self.__globals_( ) ) is not None:
             description = 'Origin of appended message. Only used for mode="append".'
             value = self.__origin( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'origin': value},{'origin': self.__schema['origin']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-7.7s =\x1B[0m %s%-23s%s' % ('origin',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __message_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__message_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        if self.__message_dflt( self.__globals_( ) ) is not None:
             description = 'Message to append. Only used of mode="append".'
             value = self.__message( self.__globals_( ) )
             (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'message': value},{'message': self.__schema['message']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-7.7s =\x1B[0m %s%-23s%s' % ('message',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'verbose' in glb: del glb['verbose']
        if 'imagename' in glb: del glb['imagename']
        if 'origin' in glb: del glb['origin']
        if 'mode' in glb: del glb['mode']
        if 'message' in glb: del glb['message']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# imhistory -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__imagename_inp( )
        self.__mode_inp( )
        self.__verbose_inp( )
        self.__origin_inp( )
        self.__message_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "imhistory.last" if os.path.isfile("imhistory.last") else "imhistory.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('imhistory.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
        _invocation_parameters['mode'] = self.__mode( self.__globals_( ) )
        _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
        _invocation_parameters['origin'] = self.__origin( self.__globals_( ) )
        _invocation_parameters['message'] = self.__message( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imhistory( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, imagename=None, mode=None, verbose=None, origin=None, message=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imhistory.pre')
        _postfile = os.path.realpath('imhistory.last')
        task_result = None
        _arguments = [imagename,mode,verbose,origin,message]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if mode is not None: local_global['mode'] = mode

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['mode'] = self.__mode( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['verbose'] = self.__verbose( _invocation_parameters ) if verbose is None else verbose
            _invocation_parameters['origin'] = self.__origin( _invocation_parameters ) if origin is None else origin
            _invocation_parameters['message'] = self.__message( _invocation_parameters ) if message is None else message

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['mode'] = self.__mode( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
            _invocation_parameters['origin'] = self.__origin( self.__globals_( ) )
            _invocation_parameters['message'] = self.__message( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imhistory( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'imhistory', [ 'imagename=' + repr(_pc.document['imagename']), 'mode=' + repr(_pc.document['mode']), 'verbose=' + repr(_pc.document['verbose']), 'origin=' + repr(_pc.document['origin']), 'message=' + repr(_pc.document['message']) ] )
            task_result = _imhistory_t( _pc.document['imagename'],_pc.document['mode'],_pc.document['verbose'],_pc.document['origin'],_pc.document['message'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('imhistory')
            casalog.post("Exception Reported: Error in imhistory: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'imhistory', task_result )

        #Added if _imhistory_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

imhistory = _imhistory( )


##################### generated by xml-casa (v2) from uvsub.xml #####################
##################### afa640a44f743b128d93bb7d27ef5d5b ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_uvsub import uvsub as _uvsub_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _uvsub:
    """
    uvsub ---- Subtract/add model from/to the corrected visibility data.

    
    This function subtracts model visibility data (MODEL_DATA column) from corrected visibility
    data (CORRECTED_DATA column) leaving the residuals in the corrected data column.  If the
    parameter 'reverse' is set true, the process is reversed. Note the DATA column is left untouched.
    If the ms has no CORRECTED _DATA column, one is made, copying DATA column, ahead of doing the
    uvsub process
    

    --------- parameter descriptions ---------------------------------------------

    vis     Name of input visibility file (MS)
    reverse reverse the operation (add rather than subtract)
    [1;42mRETURNS[1;m    void

    --------- examples -----------------------------------------------------------

    
    Help for uvsub task
    
    This function subtracts model visibility data from corrected visibility
    data leaving the residuals in the corrected data column.  If the
    parameter 'reverse' is set true, the process is reversed.
    Please note the model visibility used is the one that has been saved in the MODEL_DATA of the MS and the
    CORRECTED_DATA column is the one that is modified. If no CORRECTED_DATA column exists in the MS, one will be created and
    a copy of the DATA column is saved in it  before the uvsub operation selected is performed. uvsub does not modify the DATA column.
    
    Keyword arguments:
    vis -- Name of input visibility file (MS)
    default: none; example: vis='ngc5921.ms'
    reverse -- Reverse the operation (add rather than subtract)
    default: False; example: reverse=true
    
    uvsub(vis='ngc5921.ms', reverse=False)
    
    


    """

    _info_group_ = """manipulation, calibration"""
    _info_desc_ = """Subtract/add model from/to the corrected visibility data."""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'reverse': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 7 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __reverse_dflt( self, glb ):
        return False

    def __reverse( self, glb ):
        if 'reverse' in glb: return glb['reverse']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Name of input visibility file (MS)'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-7.7s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __reverse_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__reverse_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return False
        description = 'reverse the operation (add rather than subtract)'
        value = self.__reverse( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'reverse': value},{'reverse': self.__schema['reverse']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-7.7s = %s%-23s%s' % ('reverse',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'vis' in glb: del glb['vis']
        if 'reverse' in glb: del glb['reverse']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# uvsub -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__reverse_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "uvsub.last" if os.path.isfile("uvsub.last") else "uvsub.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('uvsub.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['reverse'] = self.__reverse( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-7s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#uvsub( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, reverse=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('uvsub.pre')
        _postfile = os.path.realpath('uvsub.last')
        task_result = None
        _arguments = [vis,reverse]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if reverse is not None: local_global['reverse'] = reverse

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['reverse'] = self.__reverse( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['reverse'] = self.__reverse( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-7s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#uvsub( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'uvsub', [ 'vis=' + repr(_pc.document['vis']), 'reverse=' + repr(_pc.document['reverse']) ] )
            task_result = _uvsub_t( _pc.document['vis'],_pc.document['reverse'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('uvsub')
            casalog.post("Exception Reported: Error in uvsub: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'uvsub', task_result )

        #Added if _uvsub_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

uvsub = _uvsub( )


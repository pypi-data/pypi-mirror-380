##################### generated by xml-casa (v2) from splattotable.xml ##############
##################### fc127278a648878086dac0aee00fe5cf ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from casatasks.private.task_splattotable import splattotable as _splattotable_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _splattotable:
    """
    splattotable ---- Convert a downloaded Splatalogue spectral line list to a casa table.

    
    This task reads a spectral line list(s) downloaded from Splatalogue
    (www.splatalogue.net) and loads it into a CASA table which can be
    queried via eg the slsearch task.

    --------- parameter descriptions ---------------------------------------------

    filenames Files containing Splatalogue lists.
              
              The downloaded files must be in a specific format
              for this task to succeed. Fro details, see the splattotable
              task pages on CASA Docs
              (https://casa.nrao.edu/casadocs/)
    table     Output table name. Must be specified.
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    For more information, see the task pages of splattotable in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a downloaded Splatalogue spectral line list to a casa table."""

    __schema = {'filenames': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'table': {'type': 'cStr', 'coerce': _coerce.to_str}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 9 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __filenames_dflt( self, glb ):
        return [  ]

    def __filenames( self, glb ):
        if 'filenames' in glb: return glb['filenames']
        return [  ]

    def __table_dflt( self, glb ):
        return ''

    def __table( self, glb ):
        if 'table' in glb: return glb['table']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __filenames_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__filenames_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return [  ]
        description = 'Files containing Splatalogue lists.'
        value = self.__filenames( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'filenames': value},{'filenames': self.__schema['filenames']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('filenames',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __table_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__table_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = 'Output table name. Must be specified.'
        value = self.__table( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'table': value},{'table': self.__schema['table']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-9.9s = %s%-23s%s' % ('table',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'filenames' in glb: del glb['filenames']
        if 'table' in glb: del glb['table']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# splattotable -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__filenames_inp( )
        self.__table_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "splattotable.last" if os.path.isfile("splattotable.last") else "splattotable.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('splattotable.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['filenames'] = self.__filenames( self.__globals_( ) )
        _invocation_parameters['table'] = self.__table( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#splattotable( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, filenames=None, table=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('splattotable.pre')
        _postfile = os.path.realpath('splattotable.last')
        task_result = None
        _arguments = [filenames,table]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if filenames is not None: local_global['filenames'] = filenames
            if table is not None: local_global['table'] = table

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['filenames'] = self.__filenames( local_global )
            _invocation_parameters['table'] = self.__table( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['filenames'] = self.__filenames( self.__globals_( ) )
            _invocation_parameters['table'] = self.__table( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#splattotable( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _logging_state_ = None
            assert _pc.validate(_invocation_parameters,self.__schema), create_error_string(_pc.errors)
            _logging_state_ = _start_log( 'splattotable', [ 'filenames=' + repr(_pc.document['filenames']), 'table=' + repr(_pc.document['table']) ] )
            task_result = _splattotable_t( _pc.document['filenames'],_pc.document['table'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('splattotable')
            casalog.post("Exception Reported: Error in splattotable: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            raise #exception is now raised
            #task_result = False
        finally:
            try:
                os.rename(_prefile,_postfile)
            except: pass
            if _logging_state_:
                task_result = _end_log( _logging_state_, 'splattotable', task_result )

        #Added if _splattotable_t returns False and does not raise an exception.
        if task_result is False:
            raise

        return task_result #Still needed

splattotable = _splattotable( )


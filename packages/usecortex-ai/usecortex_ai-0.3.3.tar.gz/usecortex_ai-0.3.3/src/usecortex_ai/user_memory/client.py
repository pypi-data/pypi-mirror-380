# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.add_user_memory_response import AddUserMemoryResponse
from ..types.delete_user_memory_response import DeleteUserMemoryResponse
from ..types.generate_user_memory_response import GenerateUserMemoryResponse
from ..types.list_user_memories_response import ListUserMemoriesResponse
from ..types.retrieve_user_memory_response import RetrieveUserMemoryResponse
from .raw_client import AsyncRawUserMemoryClient, RawUserMemoryClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserMemoryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserMemoryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserMemoryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserMemoryClient
        """
        return self._raw_client

    def list_user_memories(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUserMemoriesResponse:
        """
        Retrieve all stored user memories for your tenant.

        This endpoint returns a comprehensive list of all user memories that have been stored,
        whether they were added manually or generated through AI. User memories help personalize
        your experience by storing context, preferences, and important information.

        You can optionally specify a sub-tenant to filter memories within that specific scope.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUserMemoriesResponse
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.list_user_memories(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', )
        """
        _response = self._raw_client.list_user_memories(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def delete_user_memory(
        self,
        *,
        tenant_id: str,
        memory_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteUserMemoryResponse:
        """
        Permanently remove a specific user memory from storage.

        This endpoint allows you to delete a user memory by its unique identifier.
        Once deleted, the memory cannot be recovered, so use this operation carefully.

        The memory will be removed from your tenant's storage and will no longer
        appear in search results or memory listings.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        memory_id : str
            Unique identifier of the memory to delete

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteUserMemoryResponse
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.delete_user_memory(tenant_id='tenant_1234', memory_id='memory_1234', sub_tenant_id='sub_tenant_4567', )
        """
        _response = self._raw_client.delete_user_memory(
            tenant_id=tenant_id, memory_id=memory_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def retrieve_user_memory(
        self,
        *,
        tenant_id: str,
        query: str,
        sub_tenant_id: typing.Optional[str] = None,
        max_count: typing.Optional[int] = None,
        user_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RetrieveUserMemoryResponse:
        """
        Find relevant user memories using semantic search.

        This endpoint performs a semantic search across all your stored user memories
        to find the most relevant ones based on your query. The results are ranked by
        similarity score, with the most relevant memories returned first.

        Use this to recall past preferences, context, or information that might be
        relevant to your current task or query.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        query : str
            Search query to find relevant user memories

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        max_count : typing.Optional[int]
            Maximum number of memories to return (default: 5)

        user_name : typing.Optional[str]
            User's name to enhance personalisation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RetrieveUserMemoryResponse
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.retrieve_user_memory(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', max_count=5, query='Which mode does user prefer', )
        """
        _response = self._raw_client.retrieve_user_memory(
            tenant_id=tenant_id,
            query=query,
            sub_tenant_id=sub_tenant_id,
            max_count=max_count,
            user_name=user_name,
            request_options=request_options,
        )
        return _response.data

    def generate_user_memory(
        self,
        *,
        tenant_id: str,
        user_message: str,
        user_name: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateUserMemoryResponse:
        """
        Generate AI-powered user memories from your query and context.

        This endpoint uses artificial intelligence to create personalized memories
        based on your query and user context. The AI analyzes your input and generates
        relevant, contextual memories that can help improve future interactions.

        Generated memories are automatically stored and can be retrieved through
        the standard memory search endpoints.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        user_message : str
            Your query or context for AI memory generation

        user_name : str
            Your name to personalize the generated memories

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateUserMemoryResponse
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.generate_user_memory(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', user_message='I prefer detailed technical explanations and works in the Pacific timezone', user_name='John Doe', )
        """
        _response = self._raw_client.generate_user_memory(
            tenant_id=tenant_id,
            user_message=user_message,
            user_name=user_name,
            sub_tenant_id=sub_tenant_id,
            request_options=request_options,
        )
        return _response.data

    def add_user_memory(
        self,
        *,
        tenant_id: str,
        user_memory: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddUserMemoryResponse:
        """
        Store a new user memory for future reference.

        This endpoint allows you to manually add a memory that will be stored and
        can be retrieved later through memory search. Use this to save important
        preferences, context, or information that you want the system to remember.

        The stored memory will be indexed and available for semantic search, making
        it accessible when relevant to future queries or interactions.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        user_memory : str
            The memory content to store for future reference

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddUserMemoryResponse
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user_memory.add_user_memory(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', user_memory='I prefer detailed technical explanations and works in the Pacific timezone', )
        """
        _response = self._raw_client.add_user_memory(
            tenant_id=tenant_id, user_memory=user_memory, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data


class AsyncUserMemoryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserMemoryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserMemoryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserMemoryClient
        """
        return self._raw_client

    async def list_user_memories(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListUserMemoriesResponse:
        """
        Retrieve all stored user memories for your tenant.

        This endpoint returns a comprehensive list of all user memories that have been stored,
        whether they were added manually or generated through AI. User memories help personalize
        your experience by storing context, preferences, and important information.

        You can optionally specify a sub-tenant to filter memories within that specific scope.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListUserMemoriesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.list_user_memories(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', )
        asyncio.run(main())
        """
        _response = await self._raw_client.list_user_memories(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def delete_user_memory(
        self,
        *,
        tenant_id: str,
        memory_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteUserMemoryResponse:
        """
        Permanently remove a specific user memory from storage.

        This endpoint allows you to delete a user memory by its unique identifier.
        Once deleted, the memory cannot be recovered, so use this operation carefully.

        The memory will be removed from your tenant's storage and will no longer
        appear in search results or memory listings.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        memory_id : str
            Unique identifier of the memory to delete

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteUserMemoryResponse
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.delete_user_memory(tenant_id='tenant_1234', memory_id='memory_1234', sub_tenant_id='sub_tenant_4567', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_user_memory(
            tenant_id=tenant_id, memory_id=memory_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def retrieve_user_memory(
        self,
        *,
        tenant_id: str,
        query: str,
        sub_tenant_id: typing.Optional[str] = None,
        max_count: typing.Optional[int] = None,
        user_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RetrieveUserMemoryResponse:
        """
        Find relevant user memories using semantic search.

        This endpoint performs a semantic search across all your stored user memories
        to find the most relevant ones based on your query. The results are ranked by
        similarity score, with the most relevant memories returned first.

        Use this to recall past preferences, context, or information that might be
        relevant to your current task or query.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        query : str
            Search query to find relevant user memories

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        max_count : typing.Optional[int]
            Maximum number of memories to return (default: 5)

        user_name : typing.Optional[str]
            User's name to enhance personalisation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RetrieveUserMemoryResponse
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.retrieve_user_memory(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', max_count=5, query='Which mode does user prefer', )
        asyncio.run(main())
        """
        _response = await self._raw_client.retrieve_user_memory(
            tenant_id=tenant_id,
            query=query,
            sub_tenant_id=sub_tenant_id,
            max_count=max_count,
            user_name=user_name,
            request_options=request_options,
        )
        return _response.data

    async def generate_user_memory(
        self,
        *,
        tenant_id: str,
        user_message: str,
        user_name: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GenerateUserMemoryResponse:
        """
        Generate AI-powered user memories from your query and context.

        This endpoint uses artificial intelligence to create personalized memories
        based on your query and user context. The AI analyzes your input and generates
        relevant, contextual memories that can help improve future interactions.

        Generated memories are automatically stored and can be retrieved through
        the standard memory search endpoints.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        user_message : str
            Your query or context for AI memory generation

        user_name : str
            Your name to personalize the generated memories

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateUserMemoryResponse
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.generate_user_memory(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', user_message='I prefer detailed technical explanations and works in the Pacific timezone', user_name='John Doe', )
        asyncio.run(main())
        """
        _response = await self._raw_client.generate_user_memory(
            tenant_id=tenant_id,
            user_message=user_message,
            user_name=user_name,
            sub_tenant_id=sub_tenant_id,
            request_options=request_options,
        )
        return _response.data

    async def add_user_memory(
        self,
        *,
        tenant_id: str,
        user_memory: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AddUserMemoryResponse:
        """
        Store a new user memory for future reference.

        This endpoint allows you to manually add a memory that will be stored and
        can be retrieved later through memory search. Use this to save important
        preferences, context, or information that you want the system to remember.

        The stored memory will be indexed and available for semantic search, making
        it accessible when relevant to future queries or interactions.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        user_memory : str
            The memory content to store for future reference

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AddUserMemoryResponse
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user_memory.add_user_memory(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', user_memory='I prefer detailed technical explanations and works in the Pacific timezone', )
        asyncio.run(main())
        """
        _response = await self._raw_client.add_user_memory(
            tenant_id=tenant_id, user_memory=user_memory, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

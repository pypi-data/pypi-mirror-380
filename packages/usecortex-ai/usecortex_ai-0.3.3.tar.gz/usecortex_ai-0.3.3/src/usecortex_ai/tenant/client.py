# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.delete_sub_tenant_data import DeleteSubTenantData
from ..types.sub_tenant_ids_data import SubTenantIdsData
from ..types.tenant_stats import TenantStats
from .raw_client import AsyncRawTenantClient, RawTenantClient


class TenantClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTenantClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTenantClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTenantClient
        """
        return self._raw_client

    def stats(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TenantStats:
        """
        Retrieve usage stats for your tenant.

        Use this endpoint to check whether a tenant exists and view core metrics like total indexed objects and vector dimension. This helps you validate setup and monitor ingestion.

        Expected outcome
        - You receive the current object count and vector dimension for the tenant.
        - If the tenant does not exist, you get a not-found error.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TenantStats
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.tenant.stats(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', )
        """
        _response = self._raw_client.stats(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def get_sub_tenant_ids(
        self, *, tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SubTenantIdsData:
        """
        Retrieve all sub-tenant IDs contained within a specific tenant. Fetches the sub-tenant IDs directly from the underlying data store.

        Parameters
        ----------
        tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubTenantIdsData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.tenant.get_sub_tenant_ids(tenant_id='tenant_1234', )
        """
        _response = self._raw_client.get_sub_tenant_ids(tenant_id=tenant_id, request_options=request_options)
        return _response.data

    def delete_sub_tenant(
        self, *, tenant_id: str, sub_tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteSubTenantData:
        """
        Delete a sub-tenant from a given tenant.

        This endpoint deletes a specific sub-tenant from the specified tenant.
        It validates that the sub-tenant is not the primary/default sub-tenant before deletion.

        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteSubTenantData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.tenant.delete_sub_tenant(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', )
        """
        _response = self._raw_client.delete_sub_tenant(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data


class AsyncTenantClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTenantClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTenantClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTenantClient
        """
        return self._raw_client

    async def stats(
        self,
        *,
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TenantStats:
        """
        Retrieve usage stats for your tenant.

        Use this endpoint to check whether a tenant exists and view core metrics like total indexed objects and vector dimension. This helps you validate setup and monitor ingestion.

        Expected outcome
        - You receive the current object count and vector dimension for the tenant.
        - If the tenant does not exist, you get a not-found error.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TenantStats
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tenant.stats(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', )
        asyncio.run(main())
        """
        _response = await self._raw_client.stats(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def get_sub_tenant_ids(
        self, *, tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> SubTenantIdsData:
        """
        Retrieve all sub-tenant IDs contained within a specific tenant. Fetches the sub-tenant IDs directly from the underlying data store.

        Parameters
        ----------
        tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SubTenantIdsData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tenant.get_sub_tenant_ids(tenant_id='tenant_1234', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_sub_tenant_ids(tenant_id=tenant_id, request_options=request_options)
        return _response.data

    async def delete_sub_tenant(
        self, *, tenant_id: str, sub_tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteSubTenantData:
        """
        Delete a sub-tenant from a given tenant.

        This endpoint deletes a specific sub-tenant from the specified tenant.
        It validates that the sub-tenant is not the primary/default sub-tenant before deletion.

        Parameters
        ----------
        tenant_id : str

        sub_tenant_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteSubTenantData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tenant.delete_sub_tenant(tenant_id='tenant_1234', sub_tenant_id='sub_tenant_4567', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_sub_tenant(
            tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.fetch_content_data import FetchContentData
from .raw_client import AsyncRawFetchClient, RawFetchClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FetchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFetchClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFetchClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFetchClient
        """
        return self._raw_client

    def fetch_content(
        self,
        *,
        file_id: str,
        file_type: str,
        tenant_id: str,
        return_content: typing.Optional[bool] = OMIT,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FetchContentData:
        """
        Parameters
        ----------
        file_id : str

        file_type : str

        tenant_id : str

        return_content : typing.Optional[bool]

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FetchContentData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.fetch.fetch_content(file_id='CortexDoc1234', file_type='<file_type>', tenant_id='tenant_1234', )
        """
        _response = self._raw_client.fetch_content(
            file_id=file_id,
            file_type=file_type,
            tenant_id=tenant_id,
            return_content=return_content,
            sub_tenant_id=sub_tenant_id,
            request_options=request_options,
        )
        return _response.data


class AsyncFetchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFetchClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFetchClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFetchClient
        """
        return self._raw_client

    async def fetch_content(
        self,
        *,
        file_id: str,
        file_type: str,
        tenant_id: str,
        return_content: typing.Optional[bool] = OMIT,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FetchContentData:
        """
        Parameters
        ----------
        file_id : str

        file_type : str

        tenant_id : str

        return_content : typing.Optional[bool]

        sub_tenant_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FetchContentData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.fetch.fetch_content(file_id='CortexDoc1234', file_type='<file_type>', tenant_id='tenant_1234', )
        asyncio.run(main())
        """
        _response = await self._raw_client.fetch_content(
            file_id=file_id,
            file_type=file_type,
            tenant_id=tenant_id,
            return_content=return_content,
            sub_tenant_id=sub_tenant_id,
            request_options=request_options,
        )
        return _response.data

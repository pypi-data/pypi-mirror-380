# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class TenantStats(UniversalBaseModel):
    object_count: int = pydantic.Field()
    """
    Total number of objects stored for this tenant
    """

    tenant_id: str = pydantic.Field()
    """
    identifier for the tenant
    """

    vector_dimension: typing.Optional[int] = pydantic.Field(default=None)
    """
    Dimensions of the vector embeddings used for this tenant. Null when the tenant is empty.
    """

    success: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the stats retrieval was successful
    """

    message: typing.Optional[str] = pydantic.Field(default=None)
    """
    Response message describing the operation result
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class SearchChunk(UniversalBaseModel):
    chunk_uuid: str = pydantic.Field()
    """
    Unique identifier for this content chunk
    """

    source_id: str = pydantic.Field()
    """
    Unique identifier for the source document
    """

    chunk_content: str = pydantic.Field()
    """
    The actual text content of this chunk
    """

    source_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    Type of the source document (file, webpage, etc.)
    """

    source_upload_time: typing.Optional[str] = pydantic.Field(default=None)
    """
    When the source document was originally uploaded
    """

    source_title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Title or name of the source document
    """

    source_last_updated_time: typing.Optional[str] = pydantic.Field(default=None)
    """
    When the source document was last modified
    """

    layout: typing.Optional[str] = pydantic.Field(default=None)
    """
    Layout of the chunk in original document. You will generally receive a stringified dict with 2 keys, `offsets` and `page`(optional). Offsets will have `document_level_start_index` and `page_level_start_index`(optional)
    """

    relevancy_score: typing.Optional[float] = pydantic.Field(default=None)
    """
    Score indicating how relevant this chunk is to your search query, with higher values indicating better matches
    """

    document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Metadata extracted from the source document
    """

    tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Custom metadata associated with your tenant
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

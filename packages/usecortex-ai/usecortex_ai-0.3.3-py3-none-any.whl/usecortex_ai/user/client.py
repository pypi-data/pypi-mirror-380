# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.tenant_create_data import TenantCreateData
from .raw_client import AsyncRawUserClient, RawUserClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def create_tenant(
        self,
        *,
        tenant_id: typing.Optional[str] = None,
        note: typing.Optional[str] = None,
        tenant_metadata_schema: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TenantCreateData:
        """
        Create a tenant for your account.

        Use this endpoint to initialize a tenant space you can use for ingestion, embeddings, and search. Optionally include a metadata schema to enforce consistent attributes across documents.

        Expected outcome
        - A tenant is created and returned with its identifier.
        - If the tenant already exists, you receive a success message with the existing identifier.

        Parameters
        ----------
        tenant_id : typing.Optional[str]
            Unique identifier for the tenant/organization

        note : typing.Optional[str]

        tenant_metadata_schema : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TenantCreateData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.user.create_tenant(note='<str>', )
        """
        _response = self._raw_client.create_tenant(
            tenant_id=tenant_id,
            note=note,
            tenant_metadata_schema=tenant_metadata_schema,
            request_options=request_options,
        )
        return _response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def create_tenant(
        self,
        *,
        tenant_id: typing.Optional[str] = None,
        note: typing.Optional[str] = None,
        tenant_metadata_schema: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TenantCreateData:
        """
        Create a tenant for your account.

        Use this endpoint to initialize a tenant space you can use for ingestion, embeddings, and search. Optionally include a metadata schema to enforce consistent attributes across documents.

        Expected outcome
        - A tenant is created and returned with its identifier.
        - If the tenant already exists, you receive a success message with the existing identifier.

        Parameters
        ----------
        tenant_id : typing.Optional[str]
            Unique identifier for the tenant/organization

        note : typing.Optional[str]

        tenant_metadata_schema : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TenantCreateData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.user.create_tenant(note='<str>', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_tenant(
            tenant_id=tenant_id,
            note=note,
            tenant_metadata_schema=tenant_metadata_schema,
            request_options=request_options,
        )
        return _response.data

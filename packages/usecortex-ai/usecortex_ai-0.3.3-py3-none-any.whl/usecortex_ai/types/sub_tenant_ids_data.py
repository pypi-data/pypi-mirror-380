# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class SubTenantIdsData(UniversalBaseModel):
    tenant_id: str = pydantic.Field()
    """
    The tenant ID that was queried
    """

    sub_tenant_ids: typing.List[str] = pydantic.Field()
    """
    Array of all sub-tenant IDs within the tenant
    """

    count: int = pydantic.Field()
    """
    Total number of sub-tenants found
    """

    tenant_schema: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Schema configuration for the tenant collection
    """

    success: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the sub-tenant retrieval was successful
    """

    message: typing.Optional[str] = pydantic.Field(default=None)
    """
    Response message describing the operation result
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

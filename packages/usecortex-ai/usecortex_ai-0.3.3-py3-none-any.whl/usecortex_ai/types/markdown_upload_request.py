# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class MarkdownUploadRequest(UniversalBaseModel):
    content: str = pydantic.Field()
    """
    The text or markdown content to upload
    """

    file_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional file ID for the uploaded content. If not provided, will be generated automatically.
    """

    tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    JSON string containing tenant-level document metadata (e.g., department, compliance_tag)
    
    Example: > "{"department":"Finance","compliance_tag":"GDPR"}"
    """

    document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.
    
    Example: > "{"title":"Q1 Report.pdf","author":"Alice Smith","file_id":"custom_file_123"}"
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .attachment_model import AttachmentModel
from .content_model import ContentModel


class SourceModel(UniversalBaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Stable, unique identifier for the source. If omitted, one may be generated upstream.
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Short human-readable title for the source.
    """

    type: typing.Optional[str] = pydantic.Field(default=None)
    """
    High-level category of the source (e.g., document, email, ticket).
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional long-form description providing additional context.
    """

    note: typing.Optional[str] = pydantic.Field(default=None)
    """
    Free-form notes for internal use or ingestion hints.
    """

    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    Canonical URL or reference link associated with the source.
    """

    timestamp: typing.Optional[str] = pydantic.Field(default=None)
    """
    Creation or last-updated timestamp of the source in ISO-8601 format.
    """

    content: typing.Optional[ContentModel] = pydantic.Field(default=None)
    """
    Primary content payload used for indexing and retrieval.
    """

    tenant_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    JSON string containing tenant-level document metadata (e.g., department, compliance_tag)
    
    Example: > "{"department":"Finance","compliance_tag":"GDPR"}"
    """

    document_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    JSON string containing document-specific metadata (e.g., title, author, file_id). If file_id is not provided, the system will generate an ID automatically.
    
    Example: > "{"title":"Q1 Report.pdf","author":"Alice Smith","file_id":"custom_file_123"}"
    """

    meta: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    System-provided attributes (e.g., app_name, local file size) not intended for search filtering.
    """

    attachments: typing.Optional[typing.List[AttachmentModel]] = pydantic.Field(default=None)
    """
    Attachments related to the source such as images, PDFs, or supplemental files.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

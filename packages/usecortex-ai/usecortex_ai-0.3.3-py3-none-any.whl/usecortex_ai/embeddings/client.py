# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.embeddings_create_collection_data import EmbeddingsCreateCollectionData
from ..types.embeddings_delete_data import EmbeddingsDeleteData
from ..types.embeddings_get_data import EmbeddingsGetData
from ..types.embeddings_search_data import EmbeddingsSearchData
from .raw_client import AsyncRawEmbeddingsClient, RawEmbeddingsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EmbeddingsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEmbeddingsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEmbeddingsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEmbeddingsClient
        """
        return self._raw_client

    def delete(
        self,
        *,
        chunk_ids: typing.Sequence[str],
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsDeleteData:
        """
        Delete embedding chunks by chunk ID.

        Use this to remove specific chunks from your embeddings index when they are no longer valid or should not appear in results.

        Parameters
        ----------
        chunk_ids : typing.Sequence[str]
            The chunk IDs of the source you want to delete

        tenant_id : str
            Unique identifier for the tenant/organization

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsDeleteData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.embeddings.delete(chunk_ids=['CortexEmbeddings123_0', 'CortexEmbeddings123_1'], tenant_id='tenant_1234', )
        """
        _response = self._raw_client.delete(
            chunk_ids=chunk_ids, tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def search(
        self,
        *,
        tenant_id: str,
        embeddings: typing.Optional[typing.Sequence[float]] = OMIT,
        sub_tenant_id: typing.Optional[str] = OMIT,
        max_chunks: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsSearchData:
        """
        Find similar chunks using an embedding vector.

        Use this to retrieve the most similar chunk IDs to a single query embedding.


        Expected outcome
        - You receive the closest chunk IDs with optional similarity scores.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        embeddings : typing.Optional[typing.Sequence[float]]
            The embedding vector for search

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        max_chunks : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsSearchData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.embeddings.search(tenant_id='tenant_1234', )
        """
        _response = self._raw_client.search(
            tenant_id=tenant_id,
            embeddings=embeddings,
            sub_tenant_id=sub_tenant_id,
            max_chunks=max_chunks,
            request_options=request_options,
        )
        return _response.data

    def get_by_chunk_ids(
        self,
        *,
        chunk_ids: typing.Sequence[str],
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsGetData:
        """
        Retrieve embeddings for specific chunk IDs.

        Use this when you already know the chunk IDs and need their corresponding embeddings.

        Parameters
        ----------
        chunk_ids : typing.Sequence[str]
            The chunk IDs of the source you want to get embeddings for

        tenant_id : str
            Unique identifier for the tenant/organization

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsGetData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.embeddings.get_by_chunk_ids(chunk_ids=['CortexEmbeddings123_0', 'CortexEmbeddings123_1'], tenant_id='tenant_1234', )
        """
        _response = self._raw_client.get_by_chunk_ids(
            chunk_ids=chunk_ids, tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    def create_collection(
        self, *, tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingsCreateCollectionData:
        """
        Create an embeddings collection for a tenant.

        Use this to initialize storage so you can index and query embeddings for the tenant.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsCreateCollectionData
            Successful Response

        Examples
        --------
        from usecortex-ai import CortexAI

        client = CortexAI(token="YOUR_TOKEN", )
        client.embeddings.create_collection(tenant_id='tenant_1234', )
        """
        _response = self._raw_client.create_collection(tenant_id=tenant_id, request_options=request_options)
        return _response.data


class AsyncEmbeddingsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEmbeddingsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEmbeddingsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEmbeddingsClient
        """
        return self._raw_client

    async def delete(
        self,
        *,
        chunk_ids: typing.Sequence[str],
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsDeleteData:
        """
        Delete embedding chunks by chunk ID.

        Use this to remove specific chunks from your embeddings index when they are no longer valid or should not appear in results.

        Parameters
        ----------
        chunk_ids : typing.Sequence[str]
            The chunk IDs of the source you want to delete

        tenant_id : str
            Unique identifier for the tenant/organization

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsDeleteData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.embeddings.delete(chunk_ids=['CortexEmbeddings123_0', 'CortexEmbeddings123_1'], tenant_id='tenant_1234', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            chunk_ids=chunk_ids, tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def search(
        self,
        *,
        tenant_id: str,
        embeddings: typing.Optional[typing.Sequence[float]] = OMIT,
        sub_tenant_id: typing.Optional[str] = OMIT,
        max_chunks: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsSearchData:
        """
        Find similar chunks using an embedding vector.

        Use this to retrieve the most similar chunk IDs to a single query embedding.


        Expected outcome
        - You receive the closest chunk IDs with optional similarity scores.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        embeddings : typing.Optional[typing.Sequence[float]]
            The embedding vector for search

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        max_chunks : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsSearchData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.embeddings.search(tenant_id='tenant_1234', )
        asyncio.run(main())
        """
        _response = await self._raw_client.search(
            tenant_id=tenant_id,
            embeddings=embeddings,
            sub_tenant_id=sub_tenant_id,
            max_chunks=max_chunks,
            request_options=request_options,
        )
        return _response.data

    async def get_by_chunk_ids(
        self,
        *,
        chunk_ids: typing.Sequence[str],
        tenant_id: str,
        sub_tenant_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EmbeddingsGetData:
        """
        Retrieve embeddings for specific chunk IDs.

        Use this when you already know the chunk IDs and need their corresponding embeddings.

        Parameters
        ----------
        chunk_ids : typing.Sequence[str]
            The chunk IDs of the source you want to get embeddings for

        tenant_id : str
            Unique identifier for the tenant/organization

        sub_tenant_id : typing.Optional[str]
            Optional sub-tenant identifier used to organize data within a tenant. If omitted, the default sub-tenant created during tenant setup will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsGetData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.embeddings.get_by_chunk_ids(chunk_ids=['CortexEmbeddings123_0', 'CortexEmbeddings123_1'], tenant_id='tenant_1234', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_chunk_ids(
            chunk_ids=chunk_ids, tenant_id=tenant_id, sub_tenant_id=sub_tenant_id, request_options=request_options
        )
        return _response.data

    async def create_collection(
        self, *, tenant_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> EmbeddingsCreateCollectionData:
        """
        Create an embeddings collection for a tenant.

        Use this to initialize storage so you can index and query embeddings for the tenant.

        Parameters
        ----------
        tenant_id : str
            Unique identifier for the tenant/organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EmbeddingsCreateCollectionData
            Successful Response

        Examples
        --------
        import asyncio

        from usecortex-ai import AsyncCortexAI

        client = AsyncCortexAI(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.embeddings.create_collection(tenant_id='tenant_1234', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_collection(tenant_id=tenant_id, request_options=request_options)
        return _response.data

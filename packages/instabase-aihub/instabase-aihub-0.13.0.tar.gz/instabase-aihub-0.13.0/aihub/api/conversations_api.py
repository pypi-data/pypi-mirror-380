# coding: utf-8

"""
    AI Hub API

    The AI Hub REST API. See https://docs.instabase.com/api-sdk/ for more details.

    The version of the OpenAPI document: 0.1
    Contact: support@instabase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import List, Optional, Tuple, Union
from typing_extensions import Annotated
from aihub.models.conversation import Conversation
from aihub.models.conversation_response import ConversationResponse
from aihub.models.converse_request import ConverseRequest
from aihub.models.document_metadata_response import DocumentMetadataResponse
from aihub.models.document_upload_response import DocumentUploadResponse
from aihub.models.list_conversations200_response import ListConversations200Response
from aihub.models.prompt_response import PromptResponse

from aihub.api_client import ApiClient, RequestSerialized
from aihub.api_response import ApiResponse
from aihub.rest import RESTResponseType


class ConversationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_documents_to_conversation(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        files: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="The documents to be uploaded.")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        process_files: Annotated[Optional[StrictBool], Field(description="Flag to indicate whether the files should be processed after upload.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DocumentUploadResponse:
        """Add documents to a conversation

        Upload documents to a specified conversation.  <Note>For an overview of file upload limitations and supported file types, see [File limitations and processing](/overview/limitations/).</Note> 

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param files: The documents to be uploaded. (required)
        :type files: List[bytearray]
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param process_files: Flag to indicate whether the files should be processed after upload.
        :type process_files: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_documents_to_conversation_serialize(
            conversation_id=conversation_id,
            files=files,
            ib_context=ib_context,
            process_files=process_files,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "DocumentUploadResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_documents_to_conversation_with_http_info(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        files: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="The documents to be uploaded.")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        process_files: Annotated[Optional[StrictBool], Field(description="Flag to indicate whether the files should be processed after upload.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DocumentUploadResponse]:
        """Add documents to a conversation

        Upload documents to a specified conversation.  <Note>For an overview of file upload limitations and supported file types, see [File limitations and processing](/overview/limitations/).</Note> 

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param files: The documents to be uploaded. (required)
        :type files: List[bytearray]
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param process_files: Flag to indicate whether the files should be processed after upload.
        :type process_files: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_documents_to_conversation_serialize(
            conversation_id=conversation_id,
            files=files,
            ib_context=ib_context,
            process_files=process_files,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "DocumentUploadResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_documents_to_conversation_without_preload_content(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        files: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="The documents to be uploaded.")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        process_files: Annotated[Optional[StrictBool], Field(description="Flag to indicate whether the files should be processed after upload.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add documents to a conversation

        Upload documents to a specified conversation.  <Note>For an overview of file upload limitations and supported file types, see [File limitations and processing](/overview/limitations/).</Note> 

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param files: The documents to be uploaded. (required)
        :type files: List[bytearray]
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param process_files: Flag to indicate whether the files should be processed after upload.
        :type process_files: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_documents_to_conversation_serialize(
            conversation_id=conversation_id,
            files=files,
            ib_context=ib_context,
            process_files=process_files,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "DocumentUploadResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_documents_to_conversation_serialize(
        self,
        conversation_id,
        files,
        ib_context,
        process_files,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'files': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conversation_id is not None:
            _path_params['conversation_id'] = conversation_id
        # process the query parameters
        # process the header parameters
        if ib_context is not None:
            _header_params['IB-Context'] = ib_context
        # process the form parameters
        if files is not None:
            _files['files'] = files
        if process_files is not None:
            _form_params.append(('process_files', process_files))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/conversations/{conversation_id}/documents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def converse(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        converse_request: ConverseRequest,
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PromptResponse:
        """Converse with a document

        Converse with a document in a conversation.  <Tip>This endpoint supports querying a single document at a time and supports the standard and advanced models. To converse with multiple documents, or to use the multistep model or research mode, use the [Run query](/api-sdk/api-reference/queries/run-query) endpoint.</Tip> 

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param converse_request: (required)
        :type converse_request: ConverseRequest
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._converse_serialize(
            conversation_id=conversation_id,
            converse_request=converse_request,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PromptResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def converse_with_http_info(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        converse_request: ConverseRequest,
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PromptResponse]:
        """Converse with a document

        Converse with a document in a conversation.  <Tip>This endpoint supports querying a single document at a time and supports the standard and advanced models. To converse with multiple documents, or to use the multistep model or research mode, use the [Run query](/api-sdk/api-reference/queries/run-query) endpoint.</Tip> 

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param converse_request: (required)
        :type converse_request: ConverseRequest
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._converse_serialize(
            conversation_id=conversation_id,
            converse_request=converse_request,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PromptResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def converse_without_preload_content(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        converse_request: ConverseRequest,
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Converse with a document

        Converse with a document in a conversation.  <Tip>This endpoint supports querying a single document at a time and supports the standard and advanced models. To converse with multiple documents, or to use the multistep model or research mode, use the [Run query](/api-sdk/api-reference/queries/run-query) endpoint.</Tip> 

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param converse_request: (required)
        :type converse_request: ConverseRequest
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._converse_serialize(
            conversation_id=conversation_id,
            converse_request=converse_request,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PromptResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _converse_serialize(
        self,
        conversation_id,
        converse_request,
        ib_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conversation_id is not None:
            _path_params['conversation_id'] = conversation_id
        # process the query parameters
        # process the header parameters
        if ib_context is not None:
            _header_params['IB-Context'] = ib_context
        # process the form parameters
        # process the body parameter
        if converse_request is not None:
            _body_params = converse_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/conversations/{conversation_id}/prompts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_conversation(
        self,
        files: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="A list of files to process, defined with local file paths.")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name of the conversation.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Description of the conversation.")] = None,
        org: Annotated[Optional[StrictStr], Field(description="Your organization name. For organization members, your organization is `<ORGANIZATION-ID>`.  If not defined, the organization is inferred from the `IB-Context` header value.  <Note>If you define an `org` value and include the `IB-Context` header, the organization values must match or the request can't complete.</Note> ")] = None,
        workspace: Annotated[Optional[StrictStr], Field(description="The name of your personal workspace, where the conversation is created. For organization members, your personal workspace name is your user ID. If not defined, the workspace is inferred from the `IB-Context` header value.  When making this call from a service account, you must specify a workspace. ")] = None,
        enable_object_detection: Annotated[Optional[StrictBool], Field(description="Defines whether to enable [object detection](/chat/converse#digitization-and-object-detection) for the processed file. Object detection includes support for extracting tables and checkboxes.")] = None,
        enable_entity_detection: Annotated[Optional[StrictBool], Field(description="Defines whether to enable entity detection for the processed file. Entity detection is supported for signatures and barcodes. If entity detection is not required, consider disabling to improve processing speed.")] = None,
        write_converted_image: Annotated[Optional[StrictBool], Field(description="Defines whether to save the image files generated when processing the document. One `.jpeg` image file per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.")] = None,
        write_thumbnail: Annotated[Optional[StrictBool], Field(description="Defines whether to generate and save thumbnails of each image file generated when processing the document. One `.jpeg` thumbnail--a small image representation of the larger image--per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.")] = None,
        fast_mode: Annotated[Optional[StrictBool], Field(description="Defines whether to skip several digitization preprocessing steps. The `enable_entity_detection`, `write_converted_image`, and `write_thumbnail` flags must all be set to false.")] = None,
        enable_multilanguage_support: Annotated[Optional[StrictBool], Field(description="<span class=\\\"badge\\\">Commercial & Enterprise</span> Enable if the conversation contains documents in a [standard non-Latin language](/overview/languages#standard-non-latin-language-set).")] = None,
        enable_multilanguage_advanced_mode: Annotated[Optional[StrictBool], Field(description="<span class=\\\"badge\\\">Enterprise</span> Enable this and `enable_multilanguage_support` if the conversation contains documents in an [advanced non-Latin language](/overview/languages#advanced-non-latin-language-set), including Greek, Hebrew, Thai, and others.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConversationResponse:
        """Create conversation and upload files

        Create a new conversation and upload files to it.  <Note>For an overview of file upload limitations and supported file types, see [File limitations and processing](/overview/limitations/).</Note> 

        :param files: A list of files to process, defined with local file paths. (required)
        :type files: List[bytearray]
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param name: Name of the conversation.
        :type name: str
        :param description: Description of the conversation.
        :type description: str
        :param org: Your organization name. For organization members, your organization is `<ORGANIZATION-ID>`.  If not defined, the organization is inferred from the `IB-Context` header value.  <Note>If you define an `org` value and include the `IB-Context` header, the organization values must match or the request can't complete.</Note> 
        :type org: str
        :param workspace: The name of your personal workspace, where the conversation is created. For organization members, your personal workspace name is your user ID. If not defined, the workspace is inferred from the `IB-Context` header value.  When making this call from a service account, you must specify a workspace. 
        :type workspace: str
        :param enable_object_detection: Defines whether to enable [object detection](/chat/converse#digitization-and-object-detection) for the processed file. Object detection includes support for extracting tables and checkboxes.
        :type enable_object_detection: bool
        :param enable_entity_detection: Defines whether to enable entity detection for the processed file. Entity detection is supported for signatures and barcodes. If entity detection is not required, consider disabling to improve processing speed.
        :type enable_entity_detection: bool
        :param write_converted_image: Defines whether to save the image files generated when processing the document. One `.jpeg` image file per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.
        :type write_converted_image: bool
        :param write_thumbnail: Defines whether to generate and save thumbnails of each image file generated when processing the document. One `.jpeg` thumbnail--a small image representation of the larger image--per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.
        :type write_thumbnail: bool
        :param fast_mode: Defines whether to skip several digitization preprocessing steps. The `enable_entity_detection`, `write_converted_image`, and `write_thumbnail` flags must all be set to false.
        :type fast_mode: bool
        :param enable_multilanguage_support: <span class=\\\"badge\\\">Commercial & Enterprise</span> Enable if the conversation contains documents in a [standard non-Latin language](/overview/languages#standard-non-latin-language-set).
        :type enable_multilanguage_support: bool
        :param enable_multilanguage_advanced_mode: <span class=\\\"badge\\\">Enterprise</span> Enable this and `enable_multilanguage_support` if the conversation contains documents in an [advanced non-Latin language](/overview/languages#advanced-non-latin-language-set), including Greek, Hebrew, Thai, and others.
        :type enable_multilanguage_advanced_mode: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_conversation_serialize(
            files=files,
            ib_context=ib_context,
            name=name,
            description=description,
            org=org,
            workspace=workspace,
            enable_object_detection=enable_object_detection,
            enable_entity_detection=enable_entity_detection,
            write_converted_image=write_converted_image,
            write_thumbnail=write_thumbnail,
            fast_mode=fast_mode,
            enable_multilanguage_support=enable_multilanguage_support,
            enable_multilanguage_advanced_mode=enable_multilanguage_advanced_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ConversationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_conversation_with_http_info(
        self,
        files: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="A list of files to process, defined with local file paths.")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name of the conversation.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Description of the conversation.")] = None,
        org: Annotated[Optional[StrictStr], Field(description="Your organization name. For organization members, your organization is `<ORGANIZATION-ID>`.  If not defined, the organization is inferred from the `IB-Context` header value.  <Note>If you define an `org` value and include the `IB-Context` header, the organization values must match or the request can't complete.</Note> ")] = None,
        workspace: Annotated[Optional[StrictStr], Field(description="The name of your personal workspace, where the conversation is created. For organization members, your personal workspace name is your user ID. If not defined, the workspace is inferred from the `IB-Context` header value.  When making this call from a service account, you must specify a workspace. ")] = None,
        enable_object_detection: Annotated[Optional[StrictBool], Field(description="Defines whether to enable [object detection](/chat/converse#digitization-and-object-detection) for the processed file. Object detection includes support for extracting tables and checkboxes.")] = None,
        enable_entity_detection: Annotated[Optional[StrictBool], Field(description="Defines whether to enable entity detection for the processed file. Entity detection is supported for signatures and barcodes. If entity detection is not required, consider disabling to improve processing speed.")] = None,
        write_converted_image: Annotated[Optional[StrictBool], Field(description="Defines whether to save the image files generated when processing the document. One `.jpeg` image file per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.")] = None,
        write_thumbnail: Annotated[Optional[StrictBool], Field(description="Defines whether to generate and save thumbnails of each image file generated when processing the document. One `.jpeg` thumbnail--a small image representation of the larger image--per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.")] = None,
        fast_mode: Annotated[Optional[StrictBool], Field(description="Defines whether to skip several digitization preprocessing steps. The `enable_entity_detection`, `write_converted_image`, and `write_thumbnail` flags must all be set to false.")] = None,
        enable_multilanguage_support: Annotated[Optional[StrictBool], Field(description="<span class=\\\"badge\\\">Commercial & Enterprise</span> Enable if the conversation contains documents in a [standard non-Latin language](/overview/languages#standard-non-latin-language-set).")] = None,
        enable_multilanguage_advanced_mode: Annotated[Optional[StrictBool], Field(description="<span class=\\\"badge\\\">Enterprise</span> Enable this and `enable_multilanguage_support` if the conversation contains documents in an [advanced non-Latin language](/overview/languages#advanced-non-latin-language-set), including Greek, Hebrew, Thai, and others.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConversationResponse]:
        """Create conversation and upload files

        Create a new conversation and upload files to it.  <Note>For an overview of file upload limitations and supported file types, see [File limitations and processing](/overview/limitations/).</Note> 

        :param files: A list of files to process, defined with local file paths. (required)
        :type files: List[bytearray]
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param name: Name of the conversation.
        :type name: str
        :param description: Description of the conversation.
        :type description: str
        :param org: Your organization name. For organization members, your organization is `<ORGANIZATION-ID>`.  If not defined, the organization is inferred from the `IB-Context` header value.  <Note>If you define an `org` value and include the `IB-Context` header, the organization values must match or the request can't complete.</Note> 
        :type org: str
        :param workspace: The name of your personal workspace, where the conversation is created. For organization members, your personal workspace name is your user ID. If not defined, the workspace is inferred from the `IB-Context` header value.  When making this call from a service account, you must specify a workspace. 
        :type workspace: str
        :param enable_object_detection: Defines whether to enable [object detection](/chat/converse#digitization-and-object-detection) for the processed file. Object detection includes support for extracting tables and checkboxes.
        :type enable_object_detection: bool
        :param enable_entity_detection: Defines whether to enable entity detection for the processed file. Entity detection is supported for signatures and barcodes. If entity detection is not required, consider disabling to improve processing speed.
        :type enable_entity_detection: bool
        :param write_converted_image: Defines whether to save the image files generated when processing the document. One `.jpeg` image file per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.
        :type write_converted_image: bool
        :param write_thumbnail: Defines whether to generate and save thumbnails of each image file generated when processing the document. One `.jpeg` thumbnail--a small image representation of the larger image--per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.
        :type write_thumbnail: bool
        :param fast_mode: Defines whether to skip several digitization preprocessing steps. The `enable_entity_detection`, `write_converted_image`, and `write_thumbnail` flags must all be set to false.
        :type fast_mode: bool
        :param enable_multilanguage_support: <span class=\\\"badge\\\">Commercial & Enterprise</span> Enable if the conversation contains documents in a [standard non-Latin language](/overview/languages#standard-non-latin-language-set).
        :type enable_multilanguage_support: bool
        :param enable_multilanguage_advanced_mode: <span class=\\\"badge\\\">Enterprise</span> Enable this and `enable_multilanguage_support` if the conversation contains documents in an [advanced non-Latin language](/overview/languages#advanced-non-latin-language-set), including Greek, Hebrew, Thai, and others.
        :type enable_multilanguage_advanced_mode: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_conversation_serialize(
            files=files,
            ib_context=ib_context,
            name=name,
            description=description,
            org=org,
            workspace=workspace,
            enable_object_detection=enable_object_detection,
            enable_entity_detection=enable_entity_detection,
            write_converted_image=write_converted_image,
            write_thumbnail=write_thumbnail,
            fast_mode=fast_mode,
            enable_multilanguage_support=enable_multilanguage_support,
            enable_multilanguage_advanced_mode=enable_multilanguage_advanced_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ConversationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_conversation_without_preload_content(
        self,
        files: Annotated[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="A list of files to process, defined with local file paths.")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name of the conversation.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Description of the conversation.")] = None,
        org: Annotated[Optional[StrictStr], Field(description="Your organization name. For organization members, your organization is `<ORGANIZATION-ID>`.  If not defined, the organization is inferred from the `IB-Context` header value.  <Note>If you define an `org` value and include the `IB-Context` header, the organization values must match or the request can't complete.</Note> ")] = None,
        workspace: Annotated[Optional[StrictStr], Field(description="The name of your personal workspace, where the conversation is created. For organization members, your personal workspace name is your user ID. If not defined, the workspace is inferred from the `IB-Context` header value.  When making this call from a service account, you must specify a workspace. ")] = None,
        enable_object_detection: Annotated[Optional[StrictBool], Field(description="Defines whether to enable [object detection](/chat/converse#digitization-and-object-detection) for the processed file. Object detection includes support for extracting tables and checkboxes.")] = None,
        enable_entity_detection: Annotated[Optional[StrictBool], Field(description="Defines whether to enable entity detection for the processed file. Entity detection is supported for signatures and barcodes. If entity detection is not required, consider disabling to improve processing speed.")] = None,
        write_converted_image: Annotated[Optional[StrictBool], Field(description="Defines whether to save the image files generated when processing the document. One `.jpeg` image file per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.")] = None,
        write_thumbnail: Annotated[Optional[StrictBool], Field(description="Defines whether to generate and save thumbnails of each image file generated when processing the document. One `.jpeg` thumbnail--a small image representation of the larger image--per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.")] = None,
        fast_mode: Annotated[Optional[StrictBool], Field(description="Defines whether to skip several digitization preprocessing steps. The `enable_entity_detection`, `write_converted_image`, and `write_thumbnail` flags must all be set to false.")] = None,
        enable_multilanguage_support: Annotated[Optional[StrictBool], Field(description="<span class=\\\"badge\\\">Commercial & Enterprise</span> Enable if the conversation contains documents in a [standard non-Latin language](/overview/languages#standard-non-latin-language-set).")] = None,
        enable_multilanguage_advanced_mode: Annotated[Optional[StrictBool], Field(description="<span class=\\\"badge\\\">Enterprise</span> Enable this and `enable_multilanguage_support` if the conversation contains documents in an [advanced non-Latin language](/overview/languages#advanced-non-latin-language-set), including Greek, Hebrew, Thai, and others.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create conversation and upload files

        Create a new conversation and upload files to it.  <Note>For an overview of file upload limitations and supported file types, see [File limitations and processing](/overview/limitations/).</Note> 

        :param files: A list of files to process, defined with local file paths. (required)
        :type files: List[bytearray]
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param name: Name of the conversation.
        :type name: str
        :param description: Description of the conversation.
        :type description: str
        :param org: Your organization name. For organization members, your organization is `<ORGANIZATION-ID>`.  If not defined, the organization is inferred from the `IB-Context` header value.  <Note>If you define an `org` value and include the `IB-Context` header, the organization values must match or the request can't complete.</Note> 
        :type org: str
        :param workspace: The name of your personal workspace, where the conversation is created. For organization members, your personal workspace name is your user ID. If not defined, the workspace is inferred from the `IB-Context` header value.  When making this call from a service account, you must specify a workspace. 
        :type workspace: str
        :param enable_object_detection: Defines whether to enable [object detection](/chat/converse#digitization-and-object-detection) for the processed file. Object detection includes support for extracting tables and checkboxes.
        :type enable_object_detection: bool
        :param enable_entity_detection: Defines whether to enable entity detection for the processed file. Entity detection is supported for signatures and barcodes. If entity detection is not required, consider disabling to improve processing speed.
        :type enable_entity_detection: bool
        :param write_converted_image: Defines whether to save the image files generated when processing the document. One `.jpeg` image file per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.
        :type write_converted_image: bool
        :param write_thumbnail: Defines whether to generate and save thumbnails of each image file generated when processing the document. One `.jpeg` thumbnail--a small image representation of the larger image--per document page is saved. If storage space is a consideration, consider disabling for documents with many pages.
        :type write_thumbnail: bool
        :param fast_mode: Defines whether to skip several digitization preprocessing steps. The `enable_entity_detection`, `write_converted_image`, and `write_thumbnail` flags must all be set to false.
        :type fast_mode: bool
        :param enable_multilanguage_support: <span class=\\\"badge\\\">Commercial & Enterprise</span> Enable if the conversation contains documents in a [standard non-Latin language](/overview/languages#standard-non-latin-language-set).
        :type enable_multilanguage_support: bool
        :param enable_multilanguage_advanced_mode: <span class=\\\"badge\\\">Enterprise</span> Enable this and `enable_multilanguage_support` if the conversation contains documents in an [advanced non-Latin language](/overview/languages#advanced-non-latin-language-set), including Greek, Hebrew, Thai, and others.
        :type enable_multilanguage_advanced_mode: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_conversation_serialize(
            files=files,
            ib_context=ib_context,
            name=name,
            description=description,
            org=org,
            workspace=workspace,
            enable_object_detection=enable_object_detection,
            enable_entity_detection=enable_entity_detection,
            write_converted_image=write_converted_image,
            write_thumbnail=write_thumbnail,
            fast_mode=fast_mode,
            enable_multilanguage_support=enable_multilanguage_support,
            enable_multilanguage_advanced_mode=enable_multilanguage_advanced_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ConversationResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_conversation_serialize(
        self,
        files,
        ib_context,
        name,
        description,
        org,
        workspace,
        enable_object_detection,
        enable_entity_detection,
        write_converted_image,
        write_thumbnail,
        fast_mode,
        enable_multilanguage_support,
        enable_multilanguage_advanced_mode,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'files': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if ib_context is not None:
            _header_params['IB-Context'] = ib_context
        # process the form parameters
        if name is not None:
            _form_params.append(('name', name))
        if description is not None:
            _form_params.append(('description', description))
        if files is not None:
            _files['files'] = files
        if org is not None:
            _form_params.append(('org', org))
        if workspace is not None:
            _form_params.append(('workspace', workspace))
        if enable_object_detection is not None:
            _form_params.append(('enable_object_detection', enable_object_detection))
        if enable_entity_detection is not None:
            _form_params.append(('enable_entity_detection', enable_entity_detection))
        if write_converted_image is not None:
            _form_params.append(('write_converted_image', write_converted_image))
        if write_thumbnail is not None:
            _form_params.append(('write_thumbnail', write_thumbnail))
        if fast_mode is not None:
            _form_params.append(('fast_mode', fast_mode))
        if enable_multilanguage_support is not None:
            _form_params.append(('enable_multilanguage_support', enable_multilanguage_support))
        if enable_multilanguage_advanced_mode is not None:
            _form_params.append(('enable_multilanguage_advanced_mode', enable_multilanguage_advanced_mode))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/conversations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_conversation(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete conversation

        Delete a conversation.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_conversation_serialize(
            conversation_id=conversation_id,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_conversation_with_http_info(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete conversation

        Delete a conversation.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_conversation_serialize(
            conversation_id=conversation_id,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_conversation_without_preload_content(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete conversation

        Delete a conversation.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_conversation_serialize(
            conversation_id=conversation_id,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_conversation_serialize(
        self,
        conversation_id,
        ib_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conversation_id is not None:
            _path_params['conversation_id'] = conversation_id
        # process the query parameters
        # process the header parameters
        if ib_context is not None:
            _header_params['IB-Context'] = ib_context
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/conversations/{conversation_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_documents_from_conversation(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        ids: Annotated[List[StrictInt], Field(description="List of document IDs to be deleted.")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete documents

        Deletes documents from the conversation. Also suitable for database and filesystem cleanup.  <Tip>You can get a list of document IDs in your conversation with a [Conversation information](/api-sdk/api-reference/conversations/get-conversation/) request.</Tip> 

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param ids: List of document IDs to be deleted. (required)
        :type ids: List[int]
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_documents_from_conversation_serialize(
            conversation_id=conversation_id,
            ids=ids,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_documents_from_conversation_with_http_info(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        ids: Annotated[List[StrictInt], Field(description="List of document IDs to be deleted.")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete documents

        Deletes documents from the conversation. Also suitable for database and filesystem cleanup.  <Tip>You can get a list of document IDs in your conversation with a [Conversation information](/api-sdk/api-reference/conversations/get-conversation/) request.</Tip> 

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param ids: List of document IDs to be deleted. (required)
        :type ids: List[int]
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_documents_from_conversation_serialize(
            conversation_id=conversation_id,
            ids=ids,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_documents_from_conversation_without_preload_content(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        ids: Annotated[List[StrictInt], Field(description="List of document IDs to be deleted.")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete documents

        Deletes documents from the conversation. Also suitable for database and filesystem cleanup.  <Tip>You can get a list of document IDs in your conversation with a [Conversation information](/api-sdk/api-reference/conversations/get-conversation/) request.</Tip> 

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param ids: List of document IDs to be deleted. (required)
        :type ids: List[int]
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_documents_from_conversation_serialize(
            conversation_id=conversation_id,
            ids=ids,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_documents_from_conversation_serialize(
        self,
        conversation_id,
        ids,
        ib_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conversation_id is not None:
            _path_params['conversation_id'] = conversation_id
        # process the query parameters
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        # process the header parameters
        if ib_context is not None:
            _header_params['IB-Context'] = ib_context
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v2/conversations/{conversation_id}/documents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_conversation(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Conversation:
        """Get conversation information

        Retrieve information about a conversation, such as its state and a list of documents in the conversation.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_conversation_serialize(
            conversation_id=conversation_id,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Conversation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_conversation_with_http_info(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Conversation]:
        """Get conversation information

        Retrieve information about a conversation, such as its state and a list of documents in the conversation.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_conversation_serialize(
            conversation_id=conversation_id,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Conversation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_conversation_without_preload_content(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get conversation information

        Retrieve information about a conversation, such as its state and a list of documents in the conversation.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_conversation_serialize(
            conversation_id=conversation_id,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Conversation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_conversation_serialize(
        self,
        conversation_id,
        ib_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conversation_id is not None:
            _path_params['conversation_id'] = conversation_id
        # process the query parameters
        # process the header parameters
        if ib_context is not None:
            _header_params['IB-Context'] = ib_context
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/conversations/{conversation_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_conversation_document_metadata(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        document_id: Annotated[StrictInt, Field(description="The ID of the document for which metadata is being retrieved.  <Tip>You can get a list of document IDs in your conversation with a [conversation information](/api-sdk/api-reference/conversations/get-conversation/) request.</Tip> ")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DocumentMetadataResponse:
        """Get document metadata

        Retrieve metadata for a specified document within a conversation.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param document_id: The ID of the document for which metadata is being retrieved.  <Tip>You can get a list of document IDs in your conversation with a [conversation information](/api-sdk/api-reference/conversations/get-conversation/) request.</Tip>  (required)
        :type document_id: int
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_conversation_document_metadata_serialize(
            conversation_id=conversation_id,
            document_id=document_id,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentMetadataResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_conversation_document_metadata_with_http_info(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        document_id: Annotated[StrictInt, Field(description="The ID of the document for which metadata is being retrieved.  <Tip>You can get a list of document IDs in your conversation with a [conversation information](/api-sdk/api-reference/conversations/get-conversation/) request.</Tip> ")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DocumentMetadataResponse]:
        """Get document metadata

        Retrieve metadata for a specified document within a conversation.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param document_id: The ID of the document for which metadata is being retrieved.  <Tip>You can get a list of document IDs in your conversation with a [conversation information](/api-sdk/api-reference/conversations/get-conversation/) request.</Tip>  (required)
        :type document_id: int
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_conversation_document_metadata_serialize(
            conversation_id=conversation_id,
            document_id=document_id,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentMetadataResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_conversation_document_metadata_without_preload_content(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        document_id: Annotated[StrictInt, Field(description="The ID of the document for which metadata is being retrieved.  <Tip>You can get a list of document IDs in your conversation with a [conversation information](/api-sdk/api-reference/conversations/get-conversation/) request.</Tip> ")],
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get document metadata

        Retrieve metadata for a specified document within a conversation.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param document_id: The ID of the document for which metadata is being retrieved.  <Tip>You can get a list of document IDs in your conversation with a [conversation information](/api-sdk/api-reference/conversations/get-conversation/) request.</Tip>  (required)
        :type document_id: int
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_conversation_document_metadata_serialize(
            conversation_id=conversation_id,
            document_id=document_id,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentMetadataResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_conversation_document_metadata_serialize(
        self,
        conversation_id,
        document_id,
        ib_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conversation_id is not None:
            _path_params['conversation_id'] = conversation_id
        if document_id is not None:
            _path_params['document_id'] = document_id
        # process the query parameters
        # process the header parameters
        if ib_context is not None:
            _header_params['IB-Context'] = ib_context
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/conversations/{conversation_id}/documents/{document_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_conversations(
        self,
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListConversations200Response:
        """List conversations

        List all conversations you have created.  <Note>Organization admins can access a list of all conversations in the organization, not just conversations they created.</Note> 

        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_conversations_serialize(
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListConversations200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_conversations_with_http_info(
        self,
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListConversations200Response]:
        """List conversations

        List all conversations you have created.  <Note>Organization admins can access a list of all conversations in the organization, not just conversations they created.</Note> 

        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_conversations_serialize(
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListConversations200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_conversations_without_preload_content(
        self,
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List conversations

        List all conversations you have created.  <Note>Organization admins can access a list of all conversations in the organization, not just conversations they created.</Note> 

        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_conversations_serialize(
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListConversations200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_conversations_serialize(
        self,
        ib_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if ib_context is not None:
            _header_params['IB-Context'] = ib_context
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/conversations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_conversation(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        name: Annotated[Optional[StrictStr], Field(description="New name for the conversation.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="New description for the conversation.")] = None,
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update conversation information

        Update an existing conversation's name and description.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param name: New name for the conversation.
        :type name: str
        :param description: New description for the conversation.
        :type description: str
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_conversation_serialize(
            conversation_id=conversation_id,
            name=name,
            description=description,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_conversation_with_http_info(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        name: Annotated[Optional[StrictStr], Field(description="New name for the conversation.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="New description for the conversation.")] = None,
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update conversation information

        Update an existing conversation's name and description.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param name: New name for the conversation.
        :type name: str
        :param description: New description for the conversation.
        :type description: str
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_conversation_serialize(
            conversation_id=conversation_id,
            name=name,
            description=description,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_conversation_without_preload_content(
        self,
        conversation_id: Annotated[StrictStr, Field(description="The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip> ")],
        name: Annotated[Optional[StrictStr], Field(description="New name for the conversation.")] = None,
        description: Annotated[Optional[StrictStr], Field(description="New description for the conversation.")] = None,
        ib_context: Annotated[Optional[StrictStr], Field(description="Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update conversation information

        Update an existing conversation's name and description.

        :param conversation_id: The conversation ID.  <Tip>You can list conversations and get their IDs with the [List conversations](/api-sdk/api-reference/conversations/list-conversations/) endpoint.</Tip>  (required)
        :type conversation_id: str
        :param name: New name for the conversation.
        :type name: str
        :param description: New description for the conversation.
        :type description: str
        :param ib_context: Specify whether to use your community account or organization account to complete the request. To use your community account, define as your user ID. To use your organization account, define as your organization ID. If unspecified, defaults to community account context. See [Authorization and context identification](/api-sdk/authorization#ib-context-header) for details.
        :type ib_context: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_conversation_serialize(
            conversation_id=conversation_id,
            name=name,
            description=description,
            ib_context=ib_context,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_conversation_serialize(
        self,
        conversation_id,
        name,
        description,
        ib_context,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if conversation_id is not None:
            _path_params['conversation_id'] = conversation_id
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        # process the header parameters
        if ib_context is not None:
            _header_params['IB-Context'] = ib_context
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/conversations/{conversation_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



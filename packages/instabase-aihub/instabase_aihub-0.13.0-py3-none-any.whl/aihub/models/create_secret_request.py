# coding: utf-8

"""
    AI Hub API

    The AI Hub REST API. See https://docs.instabase.com/api-sdk/ for more details.

    The version of the OpenAPI document: 0.1
    Contact: support@instabase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateSecretRequest(BaseModel):
    """
    CreateSecretRequest
    """ # noqa: E501
    alias: StrictStr = Field(description="Name of the secret.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the secret.")
    value: StrictStr = Field(description="Content of the secret.")
    allowed_workspaces_type: StrictStr = Field(description="Which workspaces in this organization are allowed to use this secret in custom functions.")
    allowed_workspaces: Optional[List[StrictStr]] = Field(default=None, description="Which workspaces are allowed to use this secret, if only some are allowed.")
    __properties: ClassVar[List[str]] = ["alias", "description", "value", "allowed_workspaces_type", "allowed_workspaces"]

    @field_validator('allowed_workspaces_type')
    def allowed_workspaces_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ALL', 'SOME', 'NONE']):
            raise ValueError("must be one of enum values ('ALL', 'SOME', 'NONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSecretRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSecretRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alias": obj.get("alias"),
            "description": obj.get("description"),
            "value": obj.get("value"),
            "allowed_workspaces_type": obj.get("allowed_workspaces_type"),
            "allowed_workspaces": obj.get("allowed_workspaces")
        })
        return _obj



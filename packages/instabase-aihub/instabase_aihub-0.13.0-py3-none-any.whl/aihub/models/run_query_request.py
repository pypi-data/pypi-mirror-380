# coding: utf-8

"""
    AI Hub API

    The AI Hub REST API. Please see https://docs.instabase.com for more details.

    The version of the OpenAPI document: 0.1
    Contact: support@instabase.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from aihub.models.run_query_request_source_app import RunQueryRequestSourceApp
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RunQueryRequest(BaseModel):
    """
    RunQueryRequest
    """ # noqa: E501
    query: StrictStr = Field(description="Your query for the source app. <Tip> Queries made by API are also visible in your query history when accessing the source app from the AI Hub user interface.</Tip>")
    model_name: Optional[StrictStr] = Field(default='multistep-lite', description="The model to use to answer the query. Supports the multistep model (`multistep-lite`) and research mode (`multistep`), a more powerful but slower variant of the multistep model that's suited to complex reasoning queries. See [Choosing a model](/overview/models/) for details.")
    include_source_info: Optional[StrictBool] = Field(default=False, description="Set to true to return information about the source documents referenced when generating the query response. <Note> The multistep model (`model` set to `multistep-lite`) supports document-level source information. Research mode (`model` set to `multistep`) supports page-level source information.</Note>")
    source_app: RunQueryRequestSourceApp
    __properties: ClassVar[List[str]] = ["query", "model_name", "include_source_info", "source_app"]

    @field_validator('model_name')
    def model_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('multistep', 'multistep-lite'):
            raise ValueError("must be one of enum values ('multistep', 'multistep-lite')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": ()
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RunQueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_app
        if self.source_app:
            _dict['source_app'] = self.source_app.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RunQueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "query": obj.get("query"),
            "model_name": obj.get("model_name") if obj.get("model_name") is not None else 'multistep-lite',
            "include_source_info": obj.get("include_source_info") if obj.get("include_source_info") is not None else False,
            "source_app": RunQueryRequestSourceApp.from_dict(obj.get("source_app")) if obj.get("source_app") is not None else None
        })
        return _obj



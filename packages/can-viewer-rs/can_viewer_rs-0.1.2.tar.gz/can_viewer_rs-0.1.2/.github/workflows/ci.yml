name: CI

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'release/**'
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always

# Ensure that the workflow is only triggered once per PR, subsequent pushes to the PR will cancel
# and restart the workflow. See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run checks
        run: make -j check

  wheels:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-24.04-arm
            target: aarch64
          - runner: ubuntu-24.04-arm
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
        manylinux: [auto, musllinux_1_2]
        exclude:
          - platform:
              runner: ubuntu-latest
              target: s390x
            manylinux: musllinux_1_2
          - platform:
              runner: ubuntu-latest
              target: ppc64le
            manylinux: musllinux_1_2

    steps:
      - uses: actions/checkout@v5

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: ${{ matrix.manylinux }}

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: dist-wheel-${{ matrix.manylinux == 'auto' && 'linux' || 'musllinux' }}-${{ matrix.platform.target }}-${{ github.sha }}
          path: target/wheels
          retention-days: 1
          if-no-files-found: error

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: dist-sdist-${{ github.sha }}
          path: target/wheels
          retention-days: 1
          if-no-files-found: error

  binaries:
    name: Binaries
    runs-on: ${{ matrix.runner }}
    strategy:
        matrix:
            include:
            - runner: ubuntu-latest
              target: x86_64-unknown-linux-musl
              make_cmd: build-release
            - runner: ubuntu-24.04-arm
              target: armv7-unknown-linux-musleabihf
              make_cmd: build-release-armv7
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release (${{ matrix.target }})
        run: make -j ${{ matrix.make_cmd }}

      - name: Package binary
        run: |
          # Zip the binary, so it does not lose its executable flag when uploaded to GitHub Releases
          zip --junk-paths can-viewer-rs-${{ matrix.target }}.zip target/${{ matrix.target }}/release/can-viewer-rs

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}-${{ github.sha }}
          path: |
            can-viewer-rs-*.zip
          retention-days: 1
          if-no-files-found: error

  release:
    name: Release
    needs: [check, wheels, sdist, binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup uv
        uses: astral-sh/setup-uv@v6
        with:
          cache-suffix: release

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Login
        run: echo "${{ secrets.CARGO_REGISTRY_TOKEN }}" | cargo login

      - name: Download dist
        uses: actions/download-artifact@v5
        with:
          path: dist
          pattern: dist-*
          merge-multiple: true

      - name: Download binaries
        uses: actions/download-artifact@v5
        with:
          path: binaries
          pattern: binaries-*
          merge-multiple: true

      - name: Calculate checksums
        run: |
          pushd dist
            sha256sum * > ../SHA256SUMS
          popd
          pushd binaries
            sha256sum * >> ../SHA256SUMS
          popd
          cat SHA256SUMS

      - name: Check dist
        id: twine
        run: uvx twine check dist/*

      - name: Publish to PyPI
        id: pypi
        if: ${{ ! cancelled() && steps.twine.conclusion == 'success' && startsWith(github.ref, 'refs/tags/') }}
        run: |
          uvx twine upload -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} dist/*

      - name: Publish (dry run)
        if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
        run: make -j publish-dry-run

      - name: Publish
        id: publish
        if: ${{ ! cancelled() && steps.pypi.conclusion == 'success' }}
        run: make -j publish

      - name: Publish to Github Release
        if: ${{ ! cancelled() && steps.publish.conclusion == 'success' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
            binaries/*
            SHA256SUMS
          draft: true
          fail_on_unmatched_files: true

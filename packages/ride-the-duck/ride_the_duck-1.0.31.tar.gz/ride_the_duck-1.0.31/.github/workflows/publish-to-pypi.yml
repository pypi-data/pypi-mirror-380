name: Publish Python Package

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-24.04
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for setuptools-scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Extract version from release tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        # Keep the version as-is (no v prefix removal needed)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        echo "Git tag should be available for setuptools-scm"
    
    - name: Verify git tag and setuptools-scm
      run: |
        set -e  # Exit immediately on any error
        
        echo "Available git tags:"
        git tag --list | tail -10
        echo "Current commit: $(git rev-parse HEAD)"
        echo "Current branch/ref: $GITHUB_REF"
        
        # Check if we're on a tagged commit
        CURRENT_TAG=$(git describe --exact-match --tags HEAD 2>/dev/null || echo "")
        if [ -z "$CURRENT_TAG" ]; then
            echo "‚ùå FATAL ERROR: Current commit is not tagged!"
            echo "setuptools-scm requires the exact commit to be tagged."
            echo "This will result in a development version that PyPI will reject."
            false  # Force failure
        else
            echo "‚úÖ Current commit has tag: $CURRENT_TAG"
        fi
        
        # Install setuptools-scm first
        python -m pip install --upgrade pip setuptools-scm
        
        # Check what version setuptools-scm will generate
        echo "setuptools-scm version preview:"
        VERSION_OUTPUT=$(python -c "import setuptools_scm; version = setuptools_scm.get_version(); print(version)" 2>&1)
        if [ $? -ne 0 ]; then
            echo "‚ùå FATAL ERROR: Failed to get version from setuptools-scm"
            echo "Output: $VERSION_OUTPUT"
            false  # Force failure
        fi
        
        echo "Generated version: $VERSION_OUTPUT"
        
        # ABSOLUTE CHECK: Any dev version fails immediately
        echo "Checking version for development markers..."
        if echo "$VERSION_OUTPUT" | grep -q "dev\|+g\|\.d[0-9]"; then
            echo "‚ùå FATAL ERROR: Development version detected: $VERSION_OUTPUT"
            echo "This will be rejected by PyPI. The commit must be exactly on a tagged commit."
            echo "Current tags near HEAD:"
            git tag --sort=-version:refname | head -5
            echo ""
            echo "DEBUGGING INFO:"
            echo "Current commit: $(git rev-parse HEAD)"
            CURRENT_TAG="${GITHUB_REF#refs/tags/}"
            echo "Expected tag: $CURRENT_TAG"
            echo "Tag commit: $(git rev-list -n 1 $CURRENT_TAG 2>/dev/null || echo 'Tag not found')"
            echo "Commits since tag: $(git rev-list --count HEAD ^$CURRENT_TAG 2>/dev/null || echo 'Cannot calculate')"
            echo ""
            echo "üõë STOPPING WORKFLOW TO PREVENT PYPI UPLOAD ERROR üõë"
            false  # Force failure
        fi
        
        echo "‚úÖ SUCCESS: Clean release version detected: $VERSION_OUTPUT"
        
        # ABSOLUTE CHECK: Version must match tag exactly
        EXPECTED_VERSION="${GITHUB_REF#refs/tags/}"
        if [ "$VERSION_OUTPUT" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå FATAL ERROR: Version mismatch!"
            echo "Expected: $EXPECTED_VERSION"
            echo "Generated: $VERSION_OUTPUT" 
            echo "üõë STOPPING WORKFLOW TO PREVENT PYPI UPLOAD ERROR üõë"
            false  # Force failure
        fi
        
        echo "‚úÖ SUCCESS: Version matches expected tag: $VERSION_OUTPUT"
        echo "üéâ ALL CHECKS PASSED - PROCEEDING WITH BUILD üéâ"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine setuptools-scm
    
    - name: Build package
      run: |
        echo "Building package..."
        
        # Clean any previous build artifacts
        rm -rf dist/ build/ *.egg-info/
        
        # Verify setuptools-scm version again before building
        echo "Checking setuptools-scm version before build:"
        BUILD_VERSION=$(python -c "import setuptools_scm; version = setuptools_scm.get_version(); print(version)")
        echo "Version for build: $BUILD_VERSION"
        
        EXPECTED_VERSION="${GITHUB_REF#refs/tags/}"
        if [ "$BUILD_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå FATAL ERROR: Version changed between verification and build!"
            echo "Expected: $EXPECTED_VERSION"
            echo "Build version: $BUILD_VERSION"
            false
        fi
        
        # Set SETUPTOOLS_SCM_PRETEND_VERSION to force the correct version
        export SETUPTOOLS_SCM_PRETEND_VERSION="$EXPECTED_VERSION"
        echo "Set SETUPTOOLS_SCM_PRETEND_VERSION to: $SETUPTOOLS_SCM_PRETEND_VERSION"
        
        python -m build
        echo "Build completed. Checking output:"
        ls -la dist/
        
        # Verify the built package has the expected version
        WHEEL_FILE=$(ls dist/*.whl | head -1)
        TAR_FILE=$(ls dist/*.tar.gz | head -1)
        
        if [ -f "$WHEEL_FILE" ]; then
            echo "‚úÖ Wheel file created: $(basename $WHEEL_FILE)"
            # Check if wheel filename contains dev version
            if echo "$(basename $WHEEL_FILE)" | grep -q "dev\|+g"; then
                echo "‚ùå FATAL ERROR: Wheel file contains development version markers!"
                echo "Wheel: $(basename $WHEEL_FILE)"
                echo "This should not happen with SETUPTOOLS_SCM_PRETEND_VERSION set!"
                false
            fi
        else
            echo "‚ùå ERROR: No wheel file found"
            false
        fi
        
        if [ -f "$TAR_FILE" ]; then
            echo "‚úÖ Source file created: $(basename $TAR_FILE)"
            # Check if tarball filename contains dev version
            if echo "$(basename $TAR_FILE)" | grep -q "dev\|+g"; then
                echo "‚ùå FATAL ERROR: Source file contains development version markers!"
                echo "Tarball: $(basename $TAR_FILE)"
                echo "This should not happen with SETUPTOOLS_SCM_PRETEND_VERSION set!"
                false
            fi
        else
            echo "‚ùå ERROR: No source file found"
            false
        fi
    
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verify-metadata: false
        skip-existing: true
name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,docs]

    # Windows needs different shell for scripts
    - name: Run full test suite (Windows)
      if: runner.os == 'Windows'
      run: |
        pytest tests/ --cov=hidden_regime --cov-report=xml --cov-report=term-missing --verbose --tb=short --strict-markers --disable-warnings
      env:
        PYTHONPATH: ${{ github.workspace }}

    # Unix systems can use the script directly
    - name: Run full test suite (Unix)
      if: runner.os != 'Windows'
      run: |
        ./scripts/test_full.sh
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          coverage.xml
          .coverage
          pytest.log
          htmlcov/
        retention-days: 30

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: lint-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          lint-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run linting checks
      run: |
        ./scripts/lint.sh

    - name: Upload linting artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-results
        path: |
          bandit-report.json
        retention-days: 30

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Build and validate package
      run: |
        ./scripts/build_check.sh

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: integration-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          integration-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,docs]

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short --strict-markers
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Test package installation
      run: |
        pip uninstall -y hidden-regime
        pip install .
        python -c "import hidden_regime; print('Package installed successfully')"

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, lint, integration-test, build-docs]
    if: failure() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
    - name: Create Issue on Failure
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `CI Failure on ${context.ref}`;
          const body = `
          The CI workflow failed on branch ${context.ref}.
          
          **Commit:** ${context.sha}
          **Workflow:** ${context.workflow}
          **Run:** ${context.runId}
          
          Please check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
          
          ## ðŸ”§ Local Debugging
          
          To reproduce this failure locally, run:
          \`\`\`bash
          ./scripts/ci_local.sh
          \`\`\`
          
          For specific checks:
          - \`./scripts/test_unit.sh\` - Fast unit tests
          - \`./scripts/test_full.sh\` - Complete test suite with coverage
          - \`./scripts/lint.sh\` - Code quality checks
          - \`./scripts/build_check.sh\` - Package build validation
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'ci-failure', 'needs-investigation']
          });
name: build artifact
on:
  workflow_dispatch:
  workflow_call:
    outputs:
      artifact-url:
        description: "URL to the uploaded artifact"
        value: ${{ jobs.build_artifacts.outputs.artifact-url }}
      artifact-id:
        description: "ID of the uploaded artifact"
        value: ${{ jobs.build_artifacts.outputs.artifact-id }}
      package-version:
        description: "Version of the package"
        value: ${{ jobs.build_artifacts.outputs.package-version }}
      artifact-name:
        description: "Name of the artifact"
        value: ${{ jobs.build_artifacts.outputs.artifact-name }}

jobs:
  build_artifacts:
    runs-on: ubuntu-latest
    permissions:                # Job-level permissions configuration starts here
      contents: write           # 'write' access to repository contents
      actions: read
      id-token: write
      attestations: write

    steps:


      - name: check out code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0  # Fetch all history including tags for validation

      - name: Install uv
        uses: astral-sh/setup-uv@caf0cab7a618c569241d31dcd442f54681755d39 # v3.2.4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Extract version and validate tag exists
        id: validate_version
        run: |
          # Extract version from pyproject.toml
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Extracted version: $VERSION"

          # Check if git tag exists for this version
          if git show-ref --tags --verify --quiet "refs/tags/$VERSION"; then
            echo "✅ Git tag '$VERSION' exists"
          else
            echo "❌ ERROR: Git tag '$VERSION' does not exist!"
            echo ""
            echo "This workflow requires that a git tag matching the version in pyproject.toml"
            echo "already exists before building and publishing."
            echo ""
            echo "Please run the version bump workflow first:"
            echo "  gh workflow run bump_version.yml --ref release"
            echo ""
            echo "Or if you need to create the tag manually:"
            echo "  git tag $VERSION"
            echo "  git push origin $VERSION"
            exit 1
          fi

      - name: Lint with ruff
        run: |
          # Check for syntax errors and style issues - fail build if issues found
          uv run ruff check . --output-format=github

      - name: Type check with mypy
        run: |
          # Type check the codebase - fail build if type errors found
          uv run mypy

      - name: Build
        id: Build
        run: |
          VERSION="${{ steps.validate_version.outputs.version }}"
          echo "Building version $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          artifact_name="dist-$VERSION"
          echo "artifact_name is $artifact_name"
          echo "artifact_name=$artifact_name" >> "$GITHUB_OUTPUT"

          uv build

      - name: Validate built package
        run: |
          # Create isolated environment for testing
          python -m venv test_env
          source test_env/bin/activate

          # Install the built wheel (explicitly specify the wheel file)
          WHEEL_FILE=$(ls dist/*.whl | head -n 1)
          pip install "$WHEEL_FILE"

          # Test basic imports
          python -c "
          import pydantic_tfl_api
          from pydantic_tfl_api import LineClient
          from pydantic_tfl_api.core import ResponseModel, ApiError
          from pydantic_tfl_api.models import Line, LineArray
          print('✓ Package imports successfully')
          print(f'✓ Package version: {pydantic_tfl_api.__version__}')
          "

          # Test basic API functionality
          python -c "
          import time
          from pydantic_tfl_api import LineClient
          from pydantic_tfl_api.core import ResponseModel, ApiError

          client = LineClient()
          time.sleep(1)  # Rate limiting
          result = client.MetaModes()

          if isinstance(result, ResponseModel):
              print(f'✓ TfL API test successful: {len(result.content.root)} modes found')
          elif isinstance(result, ApiError):
              print(f'⚠ TfL API returned error (expected for unauthenticated): {result.http_status_code}')
          else:
              raise Exception(f'Unexpected result type: {type(result)}')

          print('✓ Built package validation completed successfully')
          "

      - name: attest artifacts
        id: attest-artifacts
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'dist/*'

      # dont do this yet - PEP 740 support just isnt ready
      # - name: copy attestation to dist dir
      #   run: |
      #     cp ${{ steps.attest-artifacts.outputs.bundle-path }} $GITHUB_WORKSPACE/dist/attestation.jsonl

      - name: Upload build artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4 # v4
        with:
          compression-level: 0 # no compression
          if-no-files-found: error
          name: ${{ steps.Build.outputs.artifact_name }}
          path: dist/*

      - name: publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*,${{ steps.attest-artifacts.outputs.bundle-path }}"
          tag: ${{ steps.Build.outputs.version }}
          allowUpdates: true
          artifactErrorsFailBuild: true

    outputs:
      artifact-url: ${{ steps.upload-artifact.outputs.artifact-url }}
      artifact-id: ${{ steps.upload-artifact.outputs.artifact-id }}
      package-version: ${{ steps.Build.outputs.version }}
      artifact-name: ${{ steps.Build.outputs.artifact_name }}

import os
import json
import click
from wukong.llmclient import LLMClient
from wukong.prompts import PROJECT_CREATE_PROMPT


@click.group()
def create_project():
    """create various project structures."""
    pass


project_name = click.option(
    "--project-name",
    type=str,
    default="MyProject",
    help="Name of the project.",
)

project_description = click.option(
    "--project-description",
    type=str,
    default="A sample project generated by Wukong.",
    help="Description of the project.",
)

additional_instructions = click.option(
    "--additional-instructions",
    type=str,
    default="",
    help="Additional instructions for project generation.",
)


@click.command()
@project_name
@project_description
@additional_instructions
def create_flask(project_name, project_description, additional_instructions):
    """create a Flask project structure."""
    get_project_structure(
        project_type="flask",
        project_name=project_name,
        project_description=project_description,
        additional_instructions=additional_instructions,
    )
    click.echo("Flask project created!")


@click.command()
@project_name
@project_description
@additional_instructions
def create_fastapi(project_name, project_description, additional_instructions=""):
    """create a FastAPI project structure."""
    get_project_structure(
        project_type="fastapi",
        project_name=project_name,
        project_description=project_description,
        additional_instructions=additional_instructions,
    )
    click.echo("FastAPI project created!")


@click.command()
@project_name
@project_description
@additional_instructions
def create_fastmcp(project_name, project_description, additional_instructions=""):
    """create a Fast MCP project structure."""
    get_project_structure(
        project_type="fastmcp",
        project_name=project_name,
        project_description=project_description,
        additional_instructions=additional_instructions,
    )
    click.echo("Fast MCP project created!")


@click.command()
@project_name
@project_description
@additional_instructions
def create_vue3(project_name, project_description, additional_instructions=""):
    """create a Vue 3 project structure."""
    get_project_structure(
        project_type="vue3",
        project_name=project_name,
        project_description=project_description,
        additional_instructions=additional_instructions,
    )
    click.echo("Vue 3 project created!")


@click.command()
@project_name
@project_description
@additional_instructions
def create_react(project_name, project_description, additional_instructions=""):
    """create a React project structure."""
    get_project_structure(
        project_type="react",
        project_name=project_name,
        project_description=project_description,
        additional_instructions=additional_instructions,
    )
    click.echo("React project created!")


@click.command()
@project_name
@project_description
@additional_instructions
def create_pypi(project_name, project_description, additional_instructions=""):
    """create a PyPI package structure."""
    get_project_structure(
        project_type="pypi",
        project_name=project_name,
        project_description=project_description,
    )
    click.echo("PyPI package created!")


@click.command()
@project_name
@project_description
@additional_instructions
def create_npm(project_name, project_description, additional_instructions=""):
    """create an NPM package structure."""
    get_project_structure(
        project_type="npm",
        project_name=project_name,
        project_description=project_description,
        additional_instructions=additional_instructions,
    )
    click.echo("NPM package created!")


@click.command()
@project_name
@project_description
@additional_instructions
def create_golang(project_name, project_description, additional_instructions=""):
    """create a Go project structure."""
    get_project_structure(
        project_type="golang",
        project_name=project_name,
        project_description=project_description,
        additional_instructions=additional_instructions,
    )
    click.echo("Go project created!")


@click.command()
@project_name
@project_description
@additional_instructions
def create_gogin(project_name, project_description, additional_instructions=""):
    """create a Go Gin project structure."""
    get_project_structure(
        project_type="gogin",
        project_name=project_name,
        project_description=project_description,
        additional_instructions=additional_instructions,
    )
    click.echo("Go Gin project created!")


@click.command()
@project_name
@project_description
@additional_instructions
def create_rust(project_name, project_description, additional_instructions=""):
    """create a Rust project structure."""
    get_project_structure(
        project_type="rust",
        project_name=project_name,
        project_description=project_description,
        additional_instructions=additional_instructions,
    )
    click.echo("Rust project created!")


create_project.add_command(create_flask, "flask")
create_project.add_command(create_fastapi, "fastapi")
create_project.add_command(create_fastmcp, "fastmcp")
create_project.add_command(create_vue3, "vue3")
create_project.add_command(create_react, "react")
create_project.add_command(create_pypi, "pypi")
create_project.add_command(create_npm, "npm")
create_project.add_command(create_golang, "golang")
create_project.add_command(create_gogin, "gogin")
create_project.add_command(create_rust, "rust")


def create_file(parent_path, structure: dict):
    for name, content in structure.items():
        path = os.path.join(parent_path, name)
        if content is None:
            # It's a file
            with open(path, "w", encoding="utf-8") as f:
                f.write("")  # Create an empty file
        elif isinstance(content, dict):
            # It's a directory
            os.makedirs(path, exist_ok=True)
            create_file(path, content)
        else:
            # It's a file with content
            with open(path, "w", encoding="utf-8") as f:
                f.write(content)


def get_project_structure(**args):
    final_prompt = PROJECT_CREATE_PROMPT.format(
        project_type=args.get("project_type", "pypi"),
        project_name=args.get("project_name", "backend"),
        project_description=args.get(
            "project_description", "A sample project generated by Wukong."
        ),
    )
    llm_client = LLMClient()
    response = llm_client.invoke_llm(final_prompt, max_tokens=3000)
    projects = json.loads(response)
    create_file(os.getcwd(), projects["directory_structure"])
    create_file(os.getcwd(), projects["key_files"])

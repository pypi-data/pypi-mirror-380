import { defineStore } from 'pinia';
import * as {{ table_snake_case }}Service from '@/services/{{ table_snake_case }}Service.js';

export const use{{ table_pascal_case }}Store = defineStore('{{ table_snake_case }}', {
  state: () => ({
    {{ table_snake_case | pluralize }}: [],
    current{{ table_pascal_case }}: null,
    loading: false,
    error: null,
  }),
  getters: {
    get{{ table_pascal_case }}s: (state) => state.{{ table_snake_case | pluralize }},
    get{{ table_pascal_case }}ById: (state) => (id) => state.{{ table_snake_case | pluralize }}.find({{ table_snake_case }} => {{ table_snake_case }}.{{ pk_name | snake_case }} === id),
  },
  actions: {
    async fetch{{ table_pascal_case }}s() {
      this.loading = true;
      try {
        const response = await {{ table_snake_case }}Service.getAll{{ table_pascal_case }}s();
        this.{{ table_snake_case | pluralize }} = response.data;
      } catch (error) {
        this.error = error;
        console.error('Error fetching {{ table_snake_case | pluralize }}:', error);
      } finally {
        this.loading = false;
      }
    },
    async fetch{{ table_pascal_case }}ById(id) {
      this.loading = true;
      try {
        const response = await {{ table_snake_case }}Service.get{{ table_pascal_case }}ById(id);
        this.current{{ table_pascal_case }} = response.data;
        return response.data;
      } catch (error) {
        this.error = error;
        console.error('Error fetching {{ table_snake_case }} by ID:', error);
        return null;
      } finally {
        this.loading = false;
      }
    },
    async create{{ table_pascal_case }}({{ table_snake_case }}Data) {
      this.loading = true;
      try {
        const response = await {{ table_snake_case }}Service.create{{ table_pascal_case }}({{ table_snake_case }}Data);
        this.{{ table_snake_case | pluralize }}.push(response.data);
      } catch (error) {
        this.error = error;
        console.error('Error creating {{ table_snake_case }}:', error);
        throw error;
      } finally {
        this.loading = false;
      }
    },
    async update{{ table_pascal_case }}(id, {{ table_snake_case }}Data) {
      this.loading = true;
      try {
        const response = await {{ table_snake_case }}Service.update{{ table_pascal_case }}(id, {{ table_snake_case }}Data);
        const index = this.{{ table_snake_case | pluralize }}.findIndex({{ table_snake_case }} => {{ table_snake_case }}.{{ pk_name | snake_case }} === id);
        if (index !== -1) {
          this.{{ table_snake_case | pluralize }}[index] = response.data;
        }
      } catch (error) {
        this.error = error;
        console.error('Error updating {{ table_snake_case }}:', error);
        throw error;
      } finally {
        this.loading = false;
      }
    },
    async delete{{ table_pascal_case }}(id) {
      this.loading = true;
      try {
        await {{ table_snake_case }}Service.delete{{ table_pascal_case }}(id);
        this.{{ table_snake_case | pluralize }} = this.{{ table_snake_case | pluralize }}.filter({{ table_snake_case }} => {{ table_snake_case }}.{{ pk_name | snake_case }} !== id);
      } catch (error) {
        this.error = error;
        console.error('Error deleting {{ table_snake_case }}:', error);
        throw error;
      } finally {
        this.loading = false;
      }
      },
  },
});
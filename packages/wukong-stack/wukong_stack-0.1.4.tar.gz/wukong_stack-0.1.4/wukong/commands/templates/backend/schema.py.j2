from __future__ import annotations # For Pydantic v2 forward references
from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field, ValidationError
{% for impt in utils.get_datetime_imports(table) %}from datetime import {{impt}}
{% endfor %}



# Base Schema
class {{ table_singular_pascal_name }}Base(BaseModel):
    {% for column in columns %}
    {{ column.name | snake_case }}: {{ column | get_pydantic_type }} = Field({{ column | to_pydantic_field_attrs}})
    {% endfor %}

    class Config:
        from_attributes = True # For Pydantic v2
        populate_by_name = True # Allow field names to be populated by their alias (if any)
        orm_mode = True # Enable ORM mode for easy conversion from SQLAlchemy models


# Create Schema
class {{ table_singular_pascal_name }}Create({{ table_singular_pascal_name }}Base):
    {% for column in columns %}
    {% if column.is_primary %}
    {{ column.name | snake_case }}: Optional[{{ utils.get_pydantic_type(column) }}] = Field({{ column | to_pydantic_field_attrs}})     
    {% endif %}
    {% endfor %}
    pass


# Update Schema
class {{ table_singular_pascal_name }}Update({{ table_singular_pascal_name }}Base):
    {% for column in columns %}
    {% if column.is_primary %}
    {{ column.name | snake_case }}: Optional[{{ utils.get_pydantic_type(column) }}] = Field(default=None, exclude=True) # Exclude PK from update payload, but allow for definition
    {% else %}
    {{ column.name | snake_case }}: {{ utils.get_pydantic_type(column) }} = Field({{ column | to_pydantic_field_attrs}})
    {% endif %}
    {% endfor %}


# Read Schema (basic, without relations)
class {{ table_singular_pascal_name }}Read({{ table_singular_pascal_name }}Base):
    {% for column in pk_columns %}
    {{ column.name | snake_case }}: {{ utils.get_python_type(column) }}
    {% endfor %}
    pass # No new fields needed if only inheriting and adding relationships


# Final Response Schema (includes relationships if applicable)
class {{ table_singular_pascal_name }}({{ table_singular_pascal_name }}Read):
    {% for child_table in all_tables %}
    {% if child_table.name != table.name %}
        {% for fk in child_table.foreign_keys %}
            {% if fk.ref_table == table.name %}
    {{ child_table.name | pluralize | snake_case }}_collection: List[{{ child_table.name | singularize | pascal_case }}Read] = []
            {% endif %}
        {% endfor %}
    {% endif %}
    {% endfor %}
    pass # No new fields needed if only inheriting and adding relationships
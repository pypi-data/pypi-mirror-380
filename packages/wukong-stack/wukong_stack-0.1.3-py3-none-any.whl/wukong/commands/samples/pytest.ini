# pytest.ini

[pytest]
# Add additional options here

# Directories to search for tests
# Usually points to your test folder, e.g., 'tests'
testpaths = tests

# Patterns to match test files and functions
# This tells pytest where to find your test files (e.g., test_*.py, *_test.py)
# and which functions/methods are tests (e.g., test_*, *_test)
python_files = test_*.py *_test.py
python_classes = Test* *Test
python_functions = test_* *test

# Command-line options to always apply
# For example, -v (verbose), -s (capture stdout), --strict-markers (warn on unknown markers)
addopts = -v -s --strict-markers --cov=app --cov-report=term-missing --no-cov-on-fail

# Register custom markers
# Markers allow you to categorize and filter tests (e.g., @pytest.mark.slow)
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests as fast
    integration: marks tests as integration tests

# Specify where to find doctests
# Doctests are example tests embedded directly in docstrings
# If you don't use doctests, you can omit this.
doctest_encoding = utf-8
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Enable specific pytest plugins implicitly
# For example, pytest-sugar for pretty output, or pytest-html for HTML reports
# plugins =
#    pytest_sugar
#    pytest_html

# Minimum pytest version required to run tests
minversion = 8.0

# Show tracebacks in a more concise way
# 'short' is common, 'full' is the default
traceback = short

# Ignore specific warnings
# This can be useful for silencing warnings from third-party libraries
# that you can't control. Be careful not to ignore critical warnings.
filterwarnings =
    ignore::DeprecationWarning
    # once::UserWarning # Example: only show a UserWarning once
    # error::# Make all warnings into errors

# Configuration for pytest-cov (if installed)
# This section is specific to the pytest-cov plugin for code coverage
[coverage:run]
branch = True
source = app/ # The directory containing your application code to measure coverage for

[coverage:report]
# Fail if coverage is below a certain percentage
fail_under = 80
# Show coverage for files that are not covered at all
show_missing = True
# Exclude specific files or patterns from the coverage report
exclude_lines =
    pragma: no cover
    if TYPE_CHECKING:
    raise NotImplementedError
    if __name__ == "__main__":

# [tool:pytest] # Another way to define pytest configuration, sometimes used by other tools
<template>
  <div class="p-grid p-fluid">
    <div class="p-col-12">
      <Card>
        <template #title>{{ table_pascal_case }} Management</template>
        <template #content>
          <DataTable :value="{{ table_snake_case | pluralize }}" :paginator="true" :rows="10"
                     v-model:selection="selected{{ table_pascal_case | pluralize }}" selectionMode="single" dataKey="{{ pk_name | snake_case }}"
                     @rowSelect="onRowSelect" @rowUnselect="onRowUnselect"
                     responsiveLayout="scroll">
            <Column selectionMode="single" headerStyle="width: 3em"></Column>
            {% for column in columns %}
            <Column field="{{ column.name | snake_case }}" header="{{ column.name | pascal_case }}" sortable></Column>
            {% endfor %}
            <Column header="Actions">
              <template #body="slotProps">
                <Button icon="pi pi-pencil" class="p-button-rounded p-button-success p-mr-2" @click="edit{{ table_pascal_case }}(slotProps.data)" />
                <Button icon="pi pi-trash" class="p-button-rounded p-button-warning" @click="confirmDelete{{ table_pascal_case }}(slotProps.data)" />
              </template>
            </Column>
          </DataTable>

          <Dialog v-model:visible="displayDialog" :style="{width: '450px'}" header="{{ table_pascal_case }} Details" :modal="true" class="p-fluid">
            <div class="p-field">
              <label for="{{ pk_name | snake_case }}">{{ pk_name | pascal_case }}</label>
              <InputText id="{{ pk_name | snake_case }}" v-model.trim="editItem.{{ pk_name | snake_case }}" required="true" autofocus :class="{'p-invalid': submitted && !editItem.{{ pk_name | snake_case }}}" :disabled="editMode" />
              <small class="p-invalid" v-if="submitted && !editItem.{{ pk_name | snake_case }}">ID is required.</small>
            </div>
            {% for column in columns %}
            {% if not column.is_primary %}
            <div class="p-field">
              <label for="{{ column.name | snake_case }}">{{ column.name | pascal_case }}</label>
              <InputText id="{{ column.name | snake_case }}" v-model.trim="editItem.{{ column.name | snake_case }}" />
            </div>
            {% endif %}
            {% endfor %}

            <template #footer>
              <Button label="Cancel" icon="pi pi-times" class="p-button-text" @click="hideDialog"/>
              <Button label="Save" icon="pi pi-check" class="p-button-text" @click="save{{ table_pascal_case }}"/>
            </template>
          </Dialog>

          <Dialog v-model:visible="deleteDialog" :style="{width: '450px'}" header="Confirm" :modal="true">
            <div class="confirmation-content">
              <i class="pi pi-exclamation-triangle p-mr-3" style="font-size: 2rem" />
              <span v-if="itemToDelete">Are you sure you want to delete the {{ table_snake_case }} with ID <b>{{ pk_name | pascal_case }}: {{ '{{ itemToDelete.' + pk_name | snake_case + ' }}' }}</b>?</span>
            </div>
            <template #footer>
              <Button label="No" icon="pi pi-times" class="p-button-text" @click="deleteDialog = false"/>
              <Button label="Yes" icon="pi pi-check" class="p-button-text" @click="delete{{ table_pascal_case }}"/>
            </template>
          </Dialog>

          <Button label="New {{ table_pascal_case }}" icon="pi pi-plus" class="p-button-success p-mt-3" @click="openNew" />
        </template>
      </Card>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue';
import { use{{ table_pascal_case }}Store } from '@/store/{{ table_snake_case }}Store';
import { storeToRefs } from 'pinia';
import { useToast } from 'primevue/usetoast';

const toast = useToast();
const {{ table_snake_case }}Store = use{{ table_pascal_case }}Store();
const { {{ table_snake_case | pluralize }} } = storeToRefs({{ table_snake_case }}Store);

const selected{{ table_pascal_case | pluralize }} = ref(null);
const displayDialog = ref(false);
const deleteDialog = ref(false);
const editMode = ref(false);
const submitted = ref(false);
const editItem = ref({});
const itemToDelete = ref(null);

onMounted(() => {
  {{ table_snake_case }}Store.fetch{{ table_pascal_case | pluralize }}();
});

const openNew = () => {
  editItem.value = {
    {% for column in columns %}
    {% if not column.is_primary %}
    {{ column.name | snake_case }}: {{ 'null' if column.nullable else '""' }},
    {% endif %}
    {% endfor %}
  };
  submitted.value = false;
  editMode.value = false;
  displayDialog.value = true;
};

const hideDialog = () => {
  displayDialog.value = false;
  submitted.value = false;
};

const save{{ table_pascal_case }} = async () => {
  submitted.value = true;
  if (editItem.value.{{ pk_name | snake_case }}) {
    // Update existing
    await {{ table_snake_case }}Store.update{{ table_pascal_case }}(editItem.value.{{ pk_name | snake_case }}, editItem.value);
    toast.add({severity:'success', summary: 'Successful', detail: '{{ table_pascal_case }} Updated', life: 3000});
  } else {
    // Create new
    await {{ table_snake_case }}Store.create{{ table_pascal_case }}(editItem.value);
    toast.add({severity:'success', summary: 'Successful', detail: '{{ table_pascal_case }} Created', life: 3000});
  }
  displayDialog.value = false;
  editItem.value = {};
};

const edit{{ table_pascal_case }} = (item) => {
  editItem.value = { ...item };
  editMode.value = true;
  displayDialog.value = true;
};

const confirmDelete{{ table_pascal_case }} = (item) => {
  itemToDelete.value = item;
  deleteDialog.value = true;
};

const delete{{ table_pascal_case }} = async () => {
  await {{ table_snake_case }}Store.delete{{ table_pascal_case }}(itemToDelete.value.{{ pk_name | snake_case }});
  deleteDialog.value = false;
  itemToDelete.value = null;
  toast.add({severity:'success', summary: 'Successful', detail: '{{ table_pascal_case }} Deleted', life: 3000});
};

const onRowSelect = (event) => {
  toast.add({severity: 'info', summary: '{{ table_pascal_case }} Selected', detail: `ID: ${event.data.{{ pk_name | snake_case }}}`, life: 3000});
};

const onRowUnselect = (event) => {
  toast.add({severity: 'warn', summary: '{{ table_pascal_case }} Unselected', detail: `ID: ${event.data.{{ pk_name | snake_case }}}`, life: 3000});
};
</script>

<style scoped>
/* Add component-specific styles here */
.p-field {
  margin-bottom: 1rem;
}
.confirmation-content {
  display: flex;
  align-items: center;
  padding: 1.5rem 0;
}
.confirmation-content i {
  margin-right: 0.5rem;
}
</style>
import { setActivePinia, createPinia } from 'pinia';
import { use{{ table_pascal_case }}Store } from '@/stores/{{ table_snake_case }}Store.js';
import { describe, it, expect, beforeEach, vi } from 'vitest';
import * as {{ table_snake_case }}Service from '@/services/{{ table_snake_case }}Service.js';

// Mock the service layer
vi.mock('@/services/{{ table_snake_case }}Service.js', () => ({
  getAll{{ table_pascal_case }}s: vi.fn(),
  get{{ table_pascal_case }}ById: vi.fn(),
  create{{ table_pascal_case }}: vi.fn(),
  update{{ table_pascal_case }}: vi.fn(),
  delete{{ table_pascal_case }}: vi.fn(),
}));

describe('{{ table_pascal_case }} Store', () => {
  beforeEach(() => {
    setActivePinia(createPinia());
    // Reset mocks before each test
    vi.clearAllMocks();
  });

  const mock{{ table_pascal_case }} = {
    {{ pk_name | snake_case }}: 1,
    {% for column in columns %}
    {% if not column.is_primary %}
    {{ column.name | snake_case }}: {{ CRUDApiGenerator._get_default_value_for_type(column) }},
    {% endif %}
    {% endfor %}
  };

  it('fetches all {{ table_snake_case | pluralize }}', async () => {
    {{ table_snake_case }}Service.getAll{{ table_pascal_case }}s.mockResolvedValue({ data: [mock{{ table_pascal_case }}] });
    const store = use{{ table_pascal_case }}Store();
    await store.fetch{{ table_pascal_case }}s();
    expect(store.{{ table_snake_case | pluralize }}).toEqual([mock{{ table_pascal_case }}]);
    expect(store.loading).toBe(false);
  });

  it('fetches {{ table_snake_case }} by ID', async () => {
    {{ table_snake_case }}Service.get{{ table_pascal_case }}ById.mockResolvedValue({ data: mock{{ table_pascal_case }} });
    const store = use{{ table_pascal_case }}Store();
    const fetched{{ table_pascal_case }} = await store.fetch{{ table_pascal_case }}ById(1);
    expect(fetched{{ table_pascal_case }}).toEqual(mock{{ table_pascal_case }});
    expect(store.current{{ table_pascal_case }}).toEqual(mock{{ table_pascal_case }});
    expect(store.loading).toBe(false);
  });

  it('creates a new {{ table_snake_case }}', async () => {
    const new{{ table_pascal_case }}Data = {
      {% for column in columns %}
      {% if not column.is_primary %}
      {{ column.name | snake_case }}: {{ CRUDApiGenerator._get_default_value_for_type(column) | replace('_test', '_new') }},
      {% endif %}
      {% endfor %}
    };
    const created{{ table_pascal_case }} = { ...new{{ table_pascal_case }}Data, {{ pk_name | snake_case }}: 2 };
    {{ table_snake_case }}Service.create{{ table_pascal_case }}.mockResolvedValue({ data: created{{ table_pascal_case }} });

    const store = use{{ table_pascal_case }}Store();
    store.{{ table_snake_case | pluralize }} = []; // Ensure empty state
    await store.create{{ table_pascal_case }}(new{{ table_pascal_case }}Data);
    expect(store.{{ table_snake_case | pluralize }}).toContainEqual(created{{ table_pascal_case }});
    expect(store.loading).toBe(false);
  });

  it('updates an existing {{ table_snake_case }}', async () => {
    const updatedData = { ...mock{{ table_pascal_case }},
      {% for column in columns %}
      {% if not column.is_primary %}
      {{ column.name | snake_case }}: {{ CRUDApiGenerator._get_default_value_for_type(column) | replace('_test', '_updated') }},
      {% endif %}
      {% endfor %}
    };
    {{ table_snake_case }}Service.update{{ table_pascal_case }}.mockResolvedValue({ data: updatedData });

    const store = use{{ table_pascal_case }}Store();
    store.{{ table_snake_case | pluralize }} = [mock{{ table_pascal_case }}]; // Seed with initial data
    await store.update{{ table_pascal_case }}(mock{{ table_pascal_case }}.{{ pk_name | snake_case }}, updatedData);
    expect(store.{{ table_snake_case | pluralize }}).toContainEqual(updatedData);
    expect(store.loading).toBe(false);
  });

  it('deletes a {{ table_snake_case }}', async () => {
    {{ table_snake_case }}Service.delete{{ table_pascal_case }}.mockResolvedValue({});

    const store = use{{ table_pascal_case }}Store();
    store.{{ table_snake_case | pluralize }} = [mock{{ table_pascal_case }}]; // Seed with initial data
    await store.delete{{ table_pascal_case }}(mock{{ table_pascal_case }}.{{ pk_name | snake_case }});
    expect(store.{{ table_snake_case | pluralize }}).not.toContainEqual(mock{{ table_pascal_case }});
    expect(store.loading).toBe(false);
  });

  it('handles API errors during fetch', async () => {
    const error = new Error('Network error');
    {{ table_snake_case }}Service.getAll{{ table_pascal_case }}s.mockRejectedValue(error);

    const store = use{{ table_pascal_case }}Store();
    await store.fetch{{ table_pascal_case }}s();
    expect(store.error).toBe(error);
    expect(store.loading).toBe(false);
  });
});
PROJECT_CREATE_PROMPT = """Generate comprehensive project structures for the user requested project types. provide:
1. A clear description of what the project is and its primary purpose
2. The complete directory structure in json format
3. Key files and their content examples (at least 1-2 important files per project type)

USER REQUEST: 
project_type: {project_type}
project_name: {project_name}
project_description: {project_description}

{additional_instructions}


OUTPUT RULES:
1. The output must be in json format.
2. The directory structure must be represented as a nested json object, where keys are directory or file names and values are either nested objects (for directories) or null (for files).
3. Include at least 1-2 key files with example content for each project type.
4. Include README.md file with project overview and setup instructions.
5. If applicable, include logging config, requirements.txt, pyproject.tol, dockerfile and docker-compose.yml.
5. Ensure the example content is relevant to the project type and demonstrates best practices.
6. The description should be concise yet informative, highlighting the main features and technologies used in the project.
7. no explanations or additional text outside the json structure.

OUTPUT:
{{
   "project_name": "my-project",
   "project_description": "A sample project generated by Wukong.",
   "directory_structure": {{
    "my_project":{{
        "app": {{
               "main.py": "from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def read_root():\n    return {{\"Hello\": \"World\"}}",
               "api": {{
                   "v1": {{
                       "endpoints": {{
                           "users.py": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n@router.get(\"/\")\nasync def read_users():\n    return [{{\"id\": 1, \"name\": \"John Doe\"}}]"
                       }}
                   }}
               }}
           }},
           "tests": {{
               "test_main.py": "from fastapi.testclient import TestClient\nfrom app.main import app\n\nclient = TestClient(app)\n\ndef test_read_root():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {{\"Hello\": \"World\"}}"
           }}
        }}
    }},
   "key_files": {{
       "README.md": "# Backend Project\n\nThis is a sample backend project generated by Wukong.\n\n## Setup Instructions\n\n1. Install dependencies:\n   ```\n   pip install -r requirements.txt\n   ```\n2. Run the application:\n   ```\n   uvicorn app.main:app --reload\n   ```",
       "requirements.txt": "fastapi\nuvicorn\npytest"
   }}
}}
"""

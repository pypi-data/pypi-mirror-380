# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import service_pb2 as service__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrcaCoreStub(object):
    """OrcaCore is the central orchestration service that:
    - Manages the lifecycle of processing windows
    - Coordinates algorithm execution across distributed processors
    - Tracks DAG dependencies and execution state
    - Routes results between dependent algorithms
    ------------------- Core operations ------------------- 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterProcessor = channel.unary_unary(
                '/OrcaCore/RegisterProcessor',
                request_serializer=service__pb2.ProcessorRegistration.SerializeToString,
                response_deserializer=service__pb2.Status.FromString,
                _registered_method=True)
        self.EmitWindow = channel.unary_unary(
                '/OrcaCore/EmitWindow',
                request_serializer=service__pb2.Window.SerializeToString,
                response_deserializer=service__pb2.WindowEmitStatus.FromString,
                _registered_method=True)
        self.ReadWindowTypes = channel.unary_unary(
                '/OrcaCore/ReadWindowTypes',
                request_serializer=service__pb2.WindowTypeRead.SerializeToString,
                response_deserializer=service__pb2.WindowTypes.FromString,
                _registered_method=True)
        self.ReadAlgorithms = channel.unary_unary(
                '/OrcaCore/ReadAlgorithms',
                request_serializer=service__pb2.AlgorithmsRead.SerializeToString,
                response_deserializer=service__pb2.Algorithms.FromString,
                _registered_method=True)
        self.ReadProcessors = channel.unary_unary(
                '/OrcaCore/ReadProcessors',
                request_serializer=service__pb2.ProcessorsRead.SerializeToString,
                response_deserializer=service__pb2.Processors.FromString,
                _registered_method=True)
        self.ReadResultsStats = channel.unary_unary(
                '/OrcaCore/ReadResultsStats',
                request_serializer=service__pb2.ResultsStatsRead.SerializeToString,
                response_deserializer=service__pb2.ResultsStats.FromString,
                _registered_method=True)
        self.ReadResultFieldsForAlgorithm = channel.unary_unary(
                '/OrcaCore/ReadResultFieldsForAlgorithm',
                request_serializer=service__pb2.AlgorithmFieldsRead.SerializeToString,
                response_deserializer=service__pb2.AlgorithmFields.FromString,
                _registered_method=True)
        self.ReadResultsForAlgorithm = channel.unary_unary(
                '/OrcaCore/ReadResultsForAlgorithm',
                request_serializer=service__pb2.ResultsForAlgorithmRead.SerializeToString,
                response_deserializer=service__pb2.ResultsForAlgorithm.FromString,
                _registered_method=True)
        self.ReadWindows = channel.unary_unary(
                '/OrcaCore/ReadWindows',
                request_serializer=service__pb2.WindowsRead.SerializeToString,
                response_deserializer=service__pb2.Windows.FromString,
                _registered_method=True)
        self.ReadDistinctMetadataForWindowType = channel.unary_unary(
                '/OrcaCore/ReadDistinctMetadataForWindowType',
                request_serializer=service__pb2.DistinctMetadataForWindowTypeRead.SerializeToString,
                response_deserializer=service__pb2.DistinctMetadataForWindowType.FromString,
                _registered_method=True)
        self.ReadWindowsForMetadata = channel.unary_unary(
                '/OrcaCore/ReadWindowsForMetadata',
                request_serializer=service__pb2.WindowsForMetadataRead.SerializeToString,
                response_deserializer=service__pb2.WindowsForMetadata.FromString,
                _registered_method=True)
        self.ReadResultsForAlgorithmAndMetadata = channel.unary_unary(
                '/OrcaCore/ReadResultsForAlgorithmAndMetadata',
                request_serializer=service__pb2.ResultsForAlgorithmAndMetadataRead.SerializeToString,
                response_deserializer=service__pb2.ResultsForAlgorithmAndMetadata.FromString,
                _registered_method=True)
        self.Annotate = channel.unary_unary(
                '/OrcaCore/Annotate',
                request_serializer=service__pb2.AnnotateWrite.SerializeToString,
                response_deserializer=service__pb2.AnnotateResponse.FromString,
                _registered_method=True)


class OrcaCoreServicer(object):
    """OrcaCore is the central orchestration service that:
    - Manages the lifecycle of processing windows
    - Coordinates algorithm execution across distributed processors
    - Tracks DAG dependencies and execution state
    - Routes results between dependent algorithms
    ------------------- Core operations ------------------- 
    """

    def RegisterProcessor(self, request, context):
        """Register a processor node and its supported algorithms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmitWindow(self, request, context):
        """Submit a window for processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadWindowTypes(self, request, context):
        """------------------- Data operations ------------------- 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadAlgorithms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadProcessors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadResultsStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadResultFieldsForAlgorithm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadResultsForAlgorithm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadWindows(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadDistinctMetadataForWindowType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadWindowsForMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadResultsForAlgorithmAndMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Annotate(self, request, context):
        """------------------ Annotation operations ----------------- 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrcaCoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterProcessor': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterProcessor,
                    request_deserializer=service__pb2.ProcessorRegistration.FromString,
                    response_serializer=service__pb2.Status.SerializeToString,
            ),
            'EmitWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.EmitWindow,
                    request_deserializer=service__pb2.Window.FromString,
                    response_serializer=service__pb2.WindowEmitStatus.SerializeToString,
            ),
            'ReadWindowTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadWindowTypes,
                    request_deserializer=service__pb2.WindowTypeRead.FromString,
                    response_serializer=service__pb2.WindowTypes.SerializeToString,
            ),
            'ReadAlgorithms': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadAlgorithms,
                    request_deserializer=service__pb2.AlgorithmsRead.FromString,
                    response_serializer=service__pb2.Algorithms.SerializeToString,
            ),
            'ReadProcessors': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadProcessors,
                    request_deserializer=service__pb2.ProcessorsRead.FromString,
                    response_serializer=service__pb2.Processors.SerializeToString,
            ),
            'ReadResultsStats': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadResultsStats,
                    request_deserializer=service__pb2.ResultsStatsRead.FromString,
                    response_serializer=service__pb2.ResultsStats.SerializeToString,
            ),
            'ReadResultFieldsForAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadResultFieldsForAlgorithm,
                    request_deserializer=service__pb2.AlgorithmFieldsRead.FromString,
                    response_serializer=service__pb2.AlgorithmFields.SerializeToString,
            ),
            'ReadResultsForAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadResultsForAlgorithm,
                    request_deserializer=service__pb2.ResultsForAlgorithmRead.FromString,
                    response_serializer=service__pb2.ResultsForAlgorithm.SerializeToString,
            ),
            'ReadWindows': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadWindows,
                    request_deserializer=service__pb2.WindowsRead.FromString,
                    response_serializer=service__pb2.Windows.SerializeToString,
            ),
            'ReadDistinctMetadataForWindowType': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadDistinctMetadataForWindowType,
                    request_deserializer=service__pb2.DistinctMetadataForWindowTypeRead.FromString,
                    response_serializer=service__pb2.DistinctMetadataForWindowType.SerializeToString,
            ),
            'ReadWindowsForMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadWindowsForMetadata,
                    request_deserializer=service__pb2.WindowsForMetadataRead.FromString,
                    response_serializer=service__pb2.WindowsForMetadata.SerializeToString,
            ),
            'ReadResultsForAlgorithmAndMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadResultsForAlgorithmAndMetadata,
                    request_deserializer=service__pb2.ResultsForAlgorithmAndMetadataRead.FromString,
                    response_serializer=service__pb2.ResultsForAlgorithmAndMetadata.SerializeToString,
            ),
            'Annotate': grpc.unary_unary_rpc_method_handler(
                    servicer.Annotate,
                    request_deserializer=service__pb2.AnnotateWrite.FromString,
                    response_serializer=service__pb2.AnnotateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OrcaCore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('OrcaCore', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrcaCore(object):
    """OrcaCore is the central orchestration service that:
    - Manages the lifecycle of processing windows
    - Coordinates algorithm execution across distributed processors
    - Tracks DAG dependencies and execution state
    - Routes results between dependent algorithms
    ------------------- Core operations ------------------- 
    """

    @staticmethod
    def RegisterProcessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/RegisterProcessor',
            service__pb2.ProcessorRegistration.SerializeToString,
            service__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EmitWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/EmitWindow',
            service__pb2.Window.SerializeToString,
            service__pb2.WindowEmitStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadWindowTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadWindowTypes',
            service__pb2.WindowTypeRead.SerializeToString,
            service__pb2.WindowTypes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadAlgorithms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadAlgorithms',
            service__pb2.AlgorithmsRead.SerializeToString,
            service__pb2.Algorithms.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadProcessors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadProcessors',
            service__pb2.ProcessorsRead.SerializeToString,
            service__pb2.Processors.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadResultsStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadResultsStats',
            service__pb2.ResultsStatsRead.SerializeToString,
            service__pb2.ResultsStats.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadResultFieldsForAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadResultFieldsForAlgorithm',
            service__pb2.AlgorithmFieldsRead.SerializeToString,
            service__pb2.AlgorithmFields.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadResultsForAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadResultsForAlgorithm',
            service__pb2.ResultsForAlgorithmRead.SerializeToString,
            service__pb2.ResultsForAlgorithm.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadWindows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadWindows',
            service__pb2.WindowsRead.SerializeToString,
            service__pb2.Windows.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadDistinctMetadataForWindowType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadDistinctMetadataForWindowType',
            service__pb2.DistinctMetadataForWindowTypeRead.SerializeToString,
            service__pb2.DistinctMetadataForWindowType.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadWindowsForMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadWindowsForMetadata',
            service__pb2.WindowsForMetadataRead.SerializeToString,
            service__pb2.WindowsForMetadata.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadResultsForAlgorithmAndMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/ReadResultsForAlgorithmAndMetadata',
            service__pb2.ResultsForAlgorithmAndMetadataRead.SerializeToString,
            service__pb2.ResultsForAlgorithmAndMetadata.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Annotate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/Annotate',
            service__pb2.AnnotateWrite.SerializeToString,
            service__pb2.AnnotateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OrcaProcessorStub(object):
    """OrcaProcessor defines the interface that each processing node must implement.
    Processors are language-agnostic services that:
    - Execute individual algorithms
    - Handle their own internal state
    - Report results back to the orchestrator
    Orca will schedule processors asynchronously as per the DAG
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteDagPart = channel.unary_stream(
                '/OrcaProcessor/ExecuteDagPart',
                request_serializer=service__pb2.ExecutionRequest.SerializeToString,
                response_deserializer=service__pb2.ExecutionResult.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/OrcaProcessor/HealthCheck',
                request_serializer=service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class OrcaProcessorServicer(object):
    """OrcaProcessor defines the interface that each processing node must implement.
    Processors are language-agnostic services that:
    - Execute individual algorithms
    - Handle their own internal state
    - Report results back to the orchestrator
    Orca will schedule processors asynchronously as per the DAG
    """

    def ExecuteDagPart(self, request, context):
        """Execute part of a DAG with streaming results
        Server streams back execution results as they become available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Check health/status of processor. i.e. a heartbeat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrcaProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteDagPart': grpc.unary_stream_rpc_method_handler(
                    servicer.ExecuteDagPart,
                    request_deserializer=service__pb2.ExecutionRequest.FromString,
                    response_serializer=service__pb2.ExecutionResult.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=service__pb2.HealthCheckRequest.FromString,
                    response_serializer=service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OrcaProcessor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('OrcaProcessor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrcaProcessor(object):
    """OrcaProcessor defines the interface that each processing node must implement.
    Processors are language-agnostic services that:
    - Execute individual algorithms
    - Handle their own internal state
    - Report results back to the orchestrator
    Orca will schedule processors asynchronously as per the DAG
    """

    @staticmethod
    def ExecuteDagPart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/OrcaProcessor/ExecuteDagPart',
            service__pb2.ExecutionRequest.SerializeToString,
            service__pb2.ExecutionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaProcessor/HealthCheck',
            service__pb2.HealthCheckRequest.SerializeToString,
            service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

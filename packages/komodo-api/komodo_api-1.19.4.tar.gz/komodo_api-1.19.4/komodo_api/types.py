"""
 Generated by typeshare 1.13.3
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union, Mapping, Set

Config = TypeVar("Config")
Info = TypeVar("Info")
PartialConfig = TypeVar("PartialConfig")
T = TypeVar("T")


class MongoIdObj(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    oid: str = Field(alias="$oid")

MongoId = MongoIdObj

class PermissionLevel(str, Enum):
    """
    The levels of permission that a User or UserGroup can have on a resource.
    """
    NONE = "None"
    """
    No permissions.
    """
    READ = "Read"
    """
    Can read resource information and config
    """
    EXECUTE = "Execute"
    """
    Can execute actions on the resource
    """
    WRITE = "Write"
    """
    Can update the resource configuration
    """
class PermissionLevelAndSpecifics(BaseModel):
    level: PermissionLevel
    specific: Set[SpecificPermission]

I64 = int

class Resource(BaseModel, Generic[Config, Info]):
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[MongoId] = Field(alias="_id", default=None)
    """
    The Mongo ID of the resource.
    This field is de/serialized from/to JSON as
    `{ "_id": { "$oid": "..." }, ...(rest of serialized Resource<T>) }`
    """
    name: str
    """
    The resource name.
    This is guaranteed unique among others of the same resource type.
    """
    description: Optional[str] = Field(default=None)
    """
    A description for the resource
    """
    template: Optional[bool] = Field(default=None)
    """
    Mark resource as a template
    """
    tags: Optional[List[str]] = Field(default=None)
    """
    Tag Ids
    """
    info: Optional[Info] = Field(default=None)
    """
    Resource-specific information (not user configurable).
    """
    config: Optional[Config] = Field(default=None)
    """
    Resource-specific configuration.
    """
    base_permission: Optional[PermissionLevelAndSpecifics] = Field(default=None)
    """
    Set a base permission level that all users will have on the
    resource.
    """
    updated_at: Optional[I64] = Field(default=None)
    """
    When description last updated
    """

class ScheduleFormat(str, Enum):
    ENGLISH = "English"
    CRON = "Cron"
class FileFormat(str, Enum):
    KEYVALUE = "key_value"
    TOML = "toml"
    YAML = "yaml"
    JSON = "json"
class ActionConfig(BaseModel):
    run_at_startup: bool
    """
    Whether this action should run at startup.
    """
    schedule_format: Optional[ScheduleFormat] = Field(default=None)
    """
    Choose whether to specify schedule as regular CRON, or using the english to CRON parser.
    """
    schedule: Optional[str] = Field(default=None)
    """
    Optionally provide a schedule for the procedure to run on.
    
    There are 2 ways to specify a schedule:
    
    1. Regular CRON expression:
    
    (second, minute, hour, day, month, day-of-week)
    ```text
    0 0 0 1,15 * ?
    ```
    
    2. "English" expression via [english-to-cron](https://crates.io/crates/english-to-cron):
    
    ```text
    at midnight on the 1st and 15th of the month
    ```
    """
    schedule_enabled: bool
    """
    Whether schedule is enabled if one is provided.
    Can be used to temporarily disable the schedule.
    """
    schedule_timezone: Optional[str] = Field(default=None)
    """
    Optional. A TZ Identifier. If not provided, will use Core local timezone.
    https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
    """
    schedule_alert: bool
    """
    Whether to send alerts when the schedule was run.
    """
    failure_alert: bool
    """
    Whether to send alerts when this action fails.
    """
    webhook_enabled: bool
    """
    Whether incoming webhooks actually trigger action.
    """
    webhook_secret: Optional[str] = Field(default=None)
    """
    Optionally provide an alternate webhook secret for this procedure.
    If its an empty string, use the default secret from the config.
    """
    reload_deno_deps: Optional[bool] = Field(default=None)
    """
    Whether deno will be instructed to reload all dependencies,
    this can usually be kept false outside of development.
    """
    file_contents: Optional[str] = Field(default=None)
    """
    Typescript file contents using pre-initialized `komodo` client.
    Supports variable / secret interpolation.
    """
    arguments_format: Optional[FileFormat] = Field(default=None)
    """
    Specify the format in which the arguments are defined.
    Default: `key_value` (like environment)
    """
    arguments: Optional[str] = Field(default=None)
    """
    Default arguments to give to the Action for use in the script at `ARGS`.
    """

class NoData(BaseModel):
    """
    Represents an empty json object: `{}`
    """
    pass
Action = Resource[ActionConfig, NoData]

class ResourceListItem(BaseModel, Generic[Info]):
    model_config = ConfigDict(populate_by_name=True)

    id: str
    """
    The resource id
    """
    resource_type: ResourceTargetTypes = Field(alias="type")
    """
    The resource type, ie `Server` or `Deployment`
    """
    name: str
    """
    The resource name
    """
    template: bool
    """
    Whether resource is a template
    """
    tags: List[str]
    """
    Tag Ids
    """
    info: Info
    """
    Resource specific info
    """

class ActionState(str, Enum):
    UNKNOWN = "Unknown"
    """
    Unknown case
    """
    OK = "Ok"
    """
    Last clone / pull successful (or never cloned)
    """
    FAILED = "Failed"
    """
    Last clone / pull failed
    """
    RUNNING = "Running"
    """
    Currently running
    """
class ActionListItemInfo(BaseModel):
    state: ActionState
    """
    Whether last action run successful
    """
    last_run_at: Optional[I64] = Field(default=None)
    """
    Action last successful run timestamp in ms.
    """
    next_scheduled_run: Optional[I64] = Field(default=None)
    """
    If the action has schedule enabled, this is the
    next scheduled run time in unix ms.
    """
    schedule_error: Optional[str] = Field(default=None)
    """
    If there is an error parsing schedule expression,
    it will be given here.
    """

ActionListItem = ResourceListItem[ActionListItemInfo]

class TemplatesQueryBehavior(str, Enum):
    INCLUDE = "Include"
    """
    Include templates in results. Default.
    """
    EXCLUDE = "Exclude"
    """
    Exclude templates from results.
    """
    ONLY = "Only"
    """
    Results *only* includes templates.
    """
class TagQueryBehavior(str, Enum):
    ALL = "All"
    """
    Returns resources which have strictly all the tags
    """
    ANY = "Any"
    """
    Returns resources which have one or more of the tags
    """
class ResourceQuery(BaseModel, Generic[T]):
    """
    Passing empty Vec is the same as not filtering by that field
    """
    names: Optional[List[str]] = Field(default=None)
    templates: Optional[TemplatesQueryBehavior] = Field(default=None)
    tags: Optional[List[str]] = Field(default=None)
    """
    Pass Vec of tag ids or tag names
    """
    tag_behavior: Optional[TagQueryBehavior] = Field(default=None)
    """
    'All' or 'Any'
    """
    specific: Optional[T] = Field(default=None)

class ActionQuerySpecifics(BaseModel):
    pass
ActionQuery = ResourceQuery[ActionQuerySpecifics]

class AlerterEndpointTypes(str, Enum):
    CUSTOM = "Custom"
    SLACK = "Slack"
    DISCORD = "Discord"
    NTFY = "Ntfy"
    PUSHOVER = "Pushover"

class AlerterEndpointCustom(BaseModel):
    """
    Send alert serialized to JSON to an http endpoint.
    """
    type: Literal[AlerterEndpointTypes.CUSTOM] = AlerterEndpointTypes.CUSTOM
    params: CustomAlerterEndpoint

class AlerterEndpointSlack(BaseModel):
    """
    Send alert to a Slack app
    """
    type: Literal[AlerterEndpointTypes.SLACK] = AlerterEndpointTypes.SLACK
    params: SlackAlerterEndpoint

class AlerterEndpointDiscord(BaseModel):
    """
    Send alert to a Discord app
    """
    type: Literal[AlerterEndpointTypes.DISCORD] = AlerterEndpointTypes.DISCORD
    params: DiscordAlerterEndpoint

class AlerterEndpointNtfy(BaseModel):
    """
    Send alert to Ntfy
    """
    type: Literal[AlerterEndpointTypes.NTFY] = AlerterEndpointTypes.NTFY
    params: NtfyAlerterEndpoint

class AlerterEndpointPushover(BaseModel):
    """
    Send alert to Pushover
    """
    type: Literal[AlerterEndpointTypes.PUSHOVER] = AlerterEndpointTypes.PUSHOVER
    params: PushoverAlerterEndpoint

AlerterEndpoint = Union[AlerterEndpointCustom, AlerterEndpointSlack, AlerterEndpointDiscord, AlerterEndpointNtfy, AlerterEndpointPushover]
class ResourceTargetTypes(str, Enum):
    SYSTEM = "System"
    SERVER = "Server"
    STACK = "Stack"
    DEPLOYMENT = "Deployment"
    BUILD = "Build"
    REPO = "Repo"
    PROCEDURE = "Procedure"
    ACTION = "Action"
    BUILDER = "Builder"
    ALERTER = "Alerter"
    RESOURCE_SYNC = "ResourceSync"

class ResourceTargetSystem(BaseModel):
    type: Literal[ResourceTargetTypes.SYSTEM] = ResourceTargetTypes.SYSTEM
    id: str

class ResourceTargetServer(BaseModel):
    type: Literal[ResourceTargetTypes.SERVER] = ResourceTargetTypes.SERVER
    id: str

class ResourceTargetStack(BaseModel):
    type: Literal[ResourceTargetTypes.STACK] = ResourceTargetTypes.STACK
    id: str

class ResourceTargetDeployment(BaseModel):
    type: Literal[ResourceTargetTypes.DEPLOYMENT] = ResourceTargetTypes.DEPLOYMENT
    id: str

class ResourceTargetBuild(BaseModel):
    type: Literal[ResourceTargetTypes.BUILD] = ResourceTargetTypes.BUILD
    id: str

class ResourceTargetRepo(BaseModel):
    type: Literal[ResourceTargetTypes.REPO] = ResourceTargetTypes.REPO
    id: str

class ResourceTargetProcedure(BaseModel):
    type: Literal[ResourceTargetTypes.PROCEDURE] = ResourceTargetTypes.PROCEDURE
    id: str

class ResourceTargetAction(BaseModel):
    type: Literal[ResourceTargetTypes.ACTION] = ResourceTargetTypes.ACTION
    id: str

class ResourceTargetBuilder(BaseModel):
    type: Literal[ResourceTargetTypes.BUILDER] = ResourceTargetTypes.BUILDER
    id: str

class ResourceTargetAlerter(BaseModel):
    type: Literal[ResourceTargetTypes.ALERTER] = ResourceTargetTypes.ALERTER
    id: str

class ResourceTargetResourceSync(BaseModel):
    type: Literal[ResourceTargetTypes.RESOURCE_SYNC] = ResourceTargetTypes.RESOURCE_SYNC
    id: str

# Used to reference a specific resource across all resource types
ResourceTarget = Union[ResourceTargetSystem, ResourceTargetServer, ResourceTargetStack, ResourceTargetDeployment, ResourceTargetBuild, ResourceTargetRepo, ResourceTargetProcedure, ResourceTargetAction, ResourceTargetBuilder, ResourceTargetAlerter, ResourceTargetResourceSync]
class MaintenanceScheduleType(str, Enum):
    """
    Types of maintenance schedules
    """
    DAILY = "Daily"
    """
    Daily at the specified time
    """
    WEEKLY = "Weekly"
    """
    Weekly on the specified day and time
    """
    ONETIME = "OneTime"
    """
    One-time maintenance on a specific date and time
    """
class MaintenanceWindow(BaseModel):
    """
    Represents a scheduled maintenance window
    """
    name: str
    """
    Name for the maintenance window (required)
    """
    description: Optional[str] = Field(default=None)
    """
    Description of what maintenance is performed (optional)
    """
    schedule_type: Optional[MaintenanceScheduleType] = Field(default=None)
    """
    The type of maintenance schedule:
    - Daily (default)
    - Weekly
    - OneTime
    """
    day_of_week: Optional[str] = Field(default=None)
    """
    For Weekly schedules: Specify the day of the week (Monday, Tuesday, etc.)
    """
    date: Optional[str] = Field(default=None)
    """
    For OneTime window: ISO 8601 date format (YYYY-MM-DD)
    """
    hour: Optional[int] = Field(default=None)
    """
    Start hour in 24-hour format (0-23) (optional, defaults to 0)
    """
    minute: Optional[int] = Field(default=None)
    """
    Start minute (0-59) (optional, defaults to 0)
    """
    duration_minutes: int
    """
    Duration of the maintenance window in minutes (required)
    """
    timezone: Optional[str] = Field(default=None)
    """
    Timezone for maintenance window specificiation.
    If empty, will use Core timezone.
    """
    enabled: bool
    """
    Whether this maintenance window is currently enabled
    """

class AlerterConfig(BaseModel):
    enabled: Optional[bool] = Field(default=None)
    """
    Whether the alerter is enabled
    """
    endpoint: Optional[AlerterEndpoint] = Field(default=None)
    """
    Where to route the alert messages.
    
    Default: Custom endpoint `http://localhost:7000`
    """
    alert_types: Optional[List[AlertDataTypes]] = Field(default=None)
    """
    Only send specific alert types.
    If empty, will send all alert types.
    """
    resources: Optional[List[ResourceTarget]] = Field(default=None)
    """
    Only send alerts on specific resources.
    If empty, will send alerts for all resources.
    """
    except_resources: Optional[List[ResourceTarget]] = Field(default=None)
    """
    DON'T send alerts on these resources.
    """
    maintenance_windows: Optional[List[MaintenanceWindow]] = Field(default=None)
    """
    Scheduled maintenance windows during which alerts will be suppressed.
    """

Alerter = Resource[AlerterConfig, None]

class AlerterListItemInfo(BaseModel):
    enabled: bool
    """
    Whether alerter is enabled for sending alerts
    """
    endpoint_type: AlerterEndpointTypes
    """
    The type of the alerter, eg. `Slack`, `Custom`
    """

AlerterListItem = ResourceListItem[AlerterListItemInfo]

class AlerterQuerySpecifics(BaseModel):
    enabled: Optional[bool] = Field(default=None)
    """
    Filter alerters by enabled.
    - `None`: Don't filter by enabled
    - `Some(true)`: Only include alerts with `enabled: true`
    - `Some(false)`: Only include alerts with `enabled: false`
    """
    types: List[AlerterEndpointTypes]
    """
    Only include alerters with these endpoint types.
    If empty, don't filter by enpoint type.
    """

AlerterQuery = ResourceQuery[AlerterQuerySpecifics]

class BatchExecutionResponseItemTypes(str, Enum):
    OK = "Ok"
    ERR = "Err"

class BatchExecutionResponseItemOk(BaseModel):
    status: Literal[BatchExecutionResponseItemTypes.OK] = BatchExecutionResponseItemTypes.OK
    data: Update

class BatchExecutionResponseItemErr(BaseModel):
    status: Literal[BatchExecutionResponseItemTypes.ERR] = BatchExecutionResponseItemTypes.ERR
    data: BatchExecutionResponseItemErr

BatchExecutionResponseItem = Union[BatchExecutionResponseItemOk, BatchExecutionResponseItemErr]
BatchExecutionResponse = List[BatchExecutionResponseItem]

class Operation(str, Enum):
    NONE = "None"
    CREATESERVER = "CreateServer"
    UPDATESERVER = "UpdateServer"
    DELETESERVER = "DeleteServer"
    RENAMESERVER = "RenameServer"
    STARTCONTAINER = "StartContainer"
    RESTARTCONTAINER = "RestartContainer"
    PAUSECONTAINER = "PauseContainer"
    UNPAUSECONTAINER = "UnpauseContainer"
    STOPCONTAINER = "StopContainer"
    DESTROYCONTAINER = "DestroyContainer"
    STARTALLCONTAINERS = "StartAllContainers"
    RESTARTALLCONTAINERS = "RestartAllContainers"
    PAUSEALLCONTAINERS = "PauseAllContainers"
    UNPAUSEALLCONTAINERS = "UnpauseAllContainers"
    STOPALLCONTAINERS = "StopAllContainers"
    PRUNECONTAINERS = "PruneContainers"
    CREATENETWORK = "CreateNetwork"
    DELETENETWORK = "DeleteNetwork"
    PRUNENETWORKS = "PruneNetworks"
    DELETEIMAGE = "DeleteImage"
    PRUNEIMAGES = "PruneImages"
    DELETEVOLUME = "DeleteVolume"
    PRUNEVOLUMES = "PruneVolumes"
    PRUNEDOCKERBUILDERS = "PruneDockerBuilders"
    PRUNEBUILDX = "PruneBuildx"
    PRUNESYSTEM = "PruneSystem"
    CREATESTACK = "CreateStack"
    UPDATESTACK = "UpdateStack"
    RENAMESTACK = "RenameStack"
    DELETESTACK = "DeleteStack"
    WRITESTACKCONTENTS = "WriteStackContents"
    REFRESHSTACKCACHE = "RefreshStackCache"
    PULLSTACK = "PullStack"
    DEPLOYSTACK = "DeployStack"
    STARTSTACK = "StartStack"
    RESTARTSTACK = "RestartStack"
    PAUSESTACK = "PauseStack"
    UNPAUSESTACK = "UnpauseStack"
    STOPSTACK = "StopStack"
    DESTROYSTACK = "DestroyStack"
    RUNSTACKSERVICE = "RunStackService"
    DEPLOYSTACKSERVICE = "DeployStackService"
    PULLSTACKSERVICE = "PullStackService"
    STARTSTACKSERVICE = "StartStackService"
    RESTARTSTACKSERVICE = "RestartStackService"
    PAUSESTACKSERVICE = "PauseStackService"
    UNPAUSESTACKSERVICE = "UnpauseStackService"
    STOPSTACKSERVICE = "StopStackService"
    DESTROYSTACKSERVICE = "DestroyStackService"
    CREATEDEPLOYMENT = "CreateDeployment"
    UPDATEDEPLOYMENT = "UpdateDeployment"
    RENAMEDEPLOYMENT = "RenameDeployment"
    DELETEDEPLOYMENT = "DeleteDeployment"
    DEPLOY = "Deploy"
    PULLDEPLOYMENT = "PullDeployment"
    STARTDEPLOYMENT = "StartDeployment"
    RESTARTDEPLOYMENT = "RestartDeployment"
    PAUSEDEPLOYMENT = "PauseDeployment"
    UNPAUSEDEPLOYMENT = "UnpauseDeployment"
    STOPDEPLOYMENT = "StopDeployment"
    DESTROYDEPLOYMENT = "DestroyDeployment"
    CREATEBUILD = "CreateBuild"
    UPDATEBUILD = "UpdateBuild"
    RENAMEBUILD = "RenameBuild"
    DELETEBUILD = "DeleteBuild"
    RUNBUILD = "RunBuild"
    CANCELBUILD = "CancelBuild"
    WRITEDOCKERFILE = "WriteDockerfile"
    CREATEREPO = "CreateRepo"
    UPDATEREPO = "UpdateRepo"
    RENAMEREPO = "RenameRepo"
    DELETEREPO = "DeleteRepo"
    CLONEREPO = "CloneRepo"
    PULLREPO = "PullRepo"
    BUILDREPO = "BuildRepo"
    CANCELREPOBUILD = "CancelRepoBuild"
    CREATEPROCEDURE = "CreateProcedure"
    UPDATEPROCEDURE = "UpdateProcedure"
    RENAMEPROCEDURE = "RenameProcedure"
    DELETEPROCEDURE = "DeleteProcedure"
    RUNPROCEDURE = "RunProcedure"
    CREATEACTION = "CreateAction"
    UPDATEACTION = "UpdateAction"
    RENAMEACTION = "RenameAction"
    DELETEACTION = "DeleteAction"
    RUNACTION = "RunAction"
    CREATEBUILDER = "CreateBuilder"
    UPDATEBUILDER = "UpdateBuilder"
    RENAMEBUILDER = "RenameBuilder"
    DELETEBUILDER = "DeleteBuilder"
    CREATEALERTER = "CreateAlerter"
    UPDATEALERTER = "UpdateAlerter"
    RENAMEALERTER = "RenameAlerter"
    DELETEALERTER = "DeleteAlerter"
    TESTALERTER = "TestAlerter"
    SENDALERT = "SendAlert"
    CREATERESOURCESYNC = "CreateResourceSync"
    UPDATERESOURCESYNC = "UpdateResourceSync"
    RENAMERESOURCESYNC = "RenameResourceSync"
    DELETERESOURCESYNC = "DeleteResourceSync"
    WRITESYNCCONTENTS = "WriteSyncContents"
    COMMITSYNC = "CommitSync"
    RUNSYNC = "RunSync"
    CLEARREPOCACHE = "ClearRepoCache"
    BACKUPCOREDATABASE = "BackupCoreDatabase"
    GLOBALAUTOUPDATE = "GlobalAutoUpdate"
    CREATEVARIABLE = "CreateVariable"
    UPDATEVARIABLEVALUE = "UpdateVariableValue"
    DELETEVARIABLE = "DeleteVariable"
    CREATEGITPROVIDERACCOUNT = "CreateGitProviderAccount"
    UPDATEGITPROVIDERACCOUNT = "UpdateGitProviderAccount"
    DELETEGITPROVIDERACCOUNT = "DeleteGitProviderAccount"
    CREATEDOCKERREGISTRYACCOUNT = "CreateDockerRegistryAccount"
    UPDATEDOCKERREGISTRYACCOUNT = "UpdateDockerRegistryAccount"
    DELETEDOCKERREGISTRYACCOUNT = "DeleteDockerRegistryAccount"
class Log(BaseModel):
    """
    Represents the output of some command being run
    """
    stage: str
    """
    A label for the log
    """
    command: str
    """
    The command which was executed
    """
    stdout: str
    """
    The output of the command in the standard channel
    """
    stderr: str
    """
    The output of the command in the error channel
    """
    success: bool
    """
    Whether the command run was successful
    """
    start_ts: I64
    """
    The start time of the command execution
    """
    end_ts: I64
    """
    The end time of the command execution
    """

class UpdateStatus(str, Enum):
    """
    An update's status
    """
    QUEUED = "Queued"
    """
    The run is in the system but hasn't started yet
    """
    INPROGRESS = "InProgress"
    """
    The run is currently running
    """
    COMPLETE = "Complete"
    """
    The run is complete
    """
class Version(BaseModel):
    major: int
    minor: int
    patch: int

class Update(BaseModel):
    """
    Represents an action performed by Komodo.
    """
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[MongoId] = Field(alias="_id", default=None)
    """
    The Mongo ID of the update.
    This field is de/serialized from/to JSON as
    `{ "_id": { "$oid": "..." }, ...(rest of serialized Update) }`
    """
    operation: Operation
    """
    The operation performed
    """
    start_ts: I64
    """
    The time the operation started
    """
    success: bool
    """
    Whether the operation was successful
    """
    operator: str
    """
    The user id that triggered the update.
    
    Also can take these values for operations triggered automatically:
    - `Procedure`: The operation was triggered as part of a procedure run
    - `Github`: The operation was triggered by a github webhook
    - `Auto Redeploy`: The operation (always `Deploy`) was triggered by an attached build finishing.
    """
    target: ResourceTarget
    """
    The target resource to which this update refers
    """
    logs: List[Log]
    """
    Logs produced as the operation is performed
    """
    end_ts: Optional[I64] = Field(default=None)
    """
    The time the operation completed.
    """
    status: UpdateStatus
    """
    The status of the update
    - `Queued`
    - `InProgress`
    - `Complete`
    """
    version: Optional[Version] = Field(default=None)
    """
    An optional version on the update, ie build version or deployed version.
    """
    commit_hash: Optional[str] = Field(default=None)
    """
    An optional commit hash associated with the update, ie cloned hash or deployed hash.
    """
    other_data: Optional[str] = Field(default=None)
    """
    Some unstructured, operation specific data. Not for general usage.
    """
    prev_toml: Optional[str] = Field(default=None)
    """
    If the update is for resource config update, give the previous toml contents
    """
    current_toml: Optional[str] = Field(default=None)
    """
    If the update is for resource config update, give the current (at time of Update) toml contents
    """

BoxUpdate = Update

class ImageRegistryConfig(BaseModel):
    """
    Configuration for an image registry
    """
    domain: Optional[str] = Field(default=None)
    """
    Specify the registry provider domain, eg `docker.io`.
    If not provided, will not push to any registry.
    """
    account: Optional[str] = Field(default=None)
    """
    Specify an account to use with the registry.
    """
    organization: Optional[str] = Field(default=None)
    """
    Optional. Specify an organization to push the image under.
    Empty string means no organization.
    """

class SystemCommand(BaseModel):
    path: Optional[str] = Field(default=None)
    command: Optional[str] = Field(default=None)

class BuildConfig(BaseModel):
    """
    The build configuration.
    """
    builder_id: Optional[str] = Field(default=None)
    """
    Which builder is used to build the image.
    """
    version: Optional[Version] = Field(default=None)
    """
    The current version of the build.
    """
    auto_increment_version: bool
    """
    Whether to automatically increment the patch on every build.
    Default is `true`
    """
    image_name: Optional[str] = Field(default=None)
    """
    An alternate name for the image pushed to the repository.
    If this is empty, it will use the build name.
    
    Can be used in conjunction with `image_tag` to direct multiple builds
    with different configs to push to the same image registry, under different,
    independantly versioned tags.
    """
    image_tag: Optional[str] = Field(default=None)
    """
    An extra tag put after the build version, for the image pushed to the repository.
    Eg. in image tag of `aarch64` would push to moghtech/komodo-core:1.13.2-aarch64.
    If this is empty, the image tag will just be the build version.
    
    Can be used in conjunction with `image_name` to direct multiple builds
    with different configs to push to the same image registry, under different,
    independantly versioned tags.
    """
    links: Optional[List[str]] = Field(default=None)
    """
    Configure quick links that are displayed in the resource header
    """
    linked_repo: Optional[str] = Field(default=None)
    """
    Choose a Komodo Repo (Resource) to source the build files.
    """
    git_provider: str
    """
    The git provider domain. Default: github.com
    """
    git_https: bool
    """
    Whether to use https to clone the repo (versus http). Default: true
    
    Note. Komodo does not currently support cloning repos via ssh.
    """
    git_account: Optional[str] = Field(default=None)
    """
    The git account used to access private repos.
    Passing empty string can only clone public repos.
    
    Note. A token for the account must be available in the core config or the builder server's periphery config
    for the configured git provider.
    """
    repo: Optional[str] = Field(default=None)
    """
    The repo used as the source of the build.
    """
    branch: str
    """
    The branch of the repo.
    """
    commit: Optional[str] = Field(default=None)
    """
    Optionally set a specific commit hash.
    """
    webhook_enabled: bool
    """
    Whether incoming webhooks actually trigger action.
    """
    webhook_secret: Optional[str] = Field(default=None)
    """
    Optionally provide an alternate webhook secret for this build.
    If its an empty string, use the default secret from the config.
    """
    files_on_host: Optional[bool] = Field(default=None)
    """
    If this is checked, the build will source the files on the host.
    Use `build_path` and `dockerfile_path` to specify the path on the host.
    This is useful for those who wish to setup their files on the host,
    rather than defining the contents in UI or in a git repo.
    """
    build_path: str
    """
    The path of the docker build context relative to the root of the repo.
    Default: "." (the root of the repo).
    """
    dockerfile_path: str
    """
    The path of the dockerfile relative to the build path.
    """
    image_registry: Optional[List[ImageRegistryConfig]] = Field(default=None)
    """
    Configuration for the registry/s to push the built image to.
    The first registry in this list will be used with attached Deployments.
    """
    skip_secret_interp: Optional[bool] = Field(default=None)
    """
    Whether to skip secret interpolation in the build_args.
    """
    use_buildx: Optional[bool] = Field(default=None)
    """
    Whether to use buildx to build (eg `docker buildx build ...`)
    """
    extra_args: Optional[List[str]] = Field(default=None)
    """
    Any extra docker cli arguments to be included in the build command
    """
    pre_build: Optional[SystemCommand] = Field(default=None)
    """
    The optional command run after repo clone and before docker build.
    """
    dockerfile: Optional[str] = Field(default=None)
    """
    UI defined dockerfile contents.
    Supports variable / secret interpolation.
    """
    build_args: Optional[str] = Field(default=None)
    """
    Docker build arguments.
    
    These values are visible in the final image by running `docker inspect`.
    """
    secret_args: Optional[str] = Field(default=None)
    """
    Secret arguments.
    
    These values remain hidden in the final image by using
    docker secret mounts. See <https://docs.docker.com/build/building/secrets>.
    
    The values can be used in RUN commands:
    ```sh
    RUN --mount=type=secret,id=SECRET_KEY \
    SECRET_KEY=$(cat /run/secrets/SECRET_KEY) ...
    ```
    """
    labels: Optional[str] = Field(default=None)
    """
    Docker labels
    """

class BuildInfo(BaseModel):
    last_built_at: I64
    """
    The timestamp build was last built.
    """
    built_hash: Optional[str] = Field(default=None)
    """
    Latest built short commit hash, or null.
    """
    built_message: Optional[str] = Field(default=None)
    """
    Latest built commit message, or null. Only for repo based stacks
    """
    built_contents: Optional[str] = Field(default=None)
    """
    The last built dockerfile contents.
    This is updated whenever Komodo successfully runs the build.
    """
    remote_path: Optional[str] = Field(default=None)
    """
    The absolute path to the file
    """
    remote_contents: Optional[str] = Field(default=None)
    """
    The remote dockerfile contents, whether on host or in repo.
    This is updated whenever Komodo refreshes the build cache.
    It will be empty if the dockerfile is defined directly in the build config.
    """
    remote_error: Optional[str] = Field(default=None)
    """
    If there was an error in getting the remote contents, it will be here.
    """
    latest_hash: Optional[str] = Field(default=None)
    """
    Latest remote short commit hash, or null.
    """
    latest_message: Optional[str] = Field(default=None)
    """
    Latest remote commit message, or null
    """

Build = Resource[BuildConfig, BuildInfo]

class BuildState(str, Enum):
    BUILDING = "Building"
    """
    Currently building
    """
    OK = "Ok"
    """
    Last build successful (or never built)
    """
    FAILED = "Failed"
    """
    Last build failed
    """
    UNKNOWN = "Unknown"
    """
    Other case
    """
class BuildListItemInfo(BaseModel):
    state: BuildState
    """
    State of the build. Reflects whether most recent build successful.
    """
    last_built_at: I64
    """
    Unix timestamp in milliseconds of last build
    """
    version: Version
    """
    The current version of the build
    """
    builder_id: str
    """
    The builder attached to build.
    """
    files_on_host: bool
    """
    Whether build is in files on host mode.
    """
    dockerfile_contents: bool
    """
    Whether build has UI defined dockerfile contents
    """
    linked_repo: str
    """
    Linked repo, if one is attached.
    """
    git_provider: str
    """
    The git provider domain
    """
    repo: str
    """
    The repo used as the source of the build
    """
    branch: str
    """
    The branch of the repo
    """
    repo_link: str
    """
    Full link to the repo.
    """
    built_hash: Optional[str] = Field(default=None)
    """
    Latest built short commit hash, or null.
    """
    latest_hash: Optional[str] = Field(default=None)
    """
    Latest short commit hash, or null. Only for repo based stacks
    """
    image_registry_domain: Optional[str] = Field(default=None)
    """
    The first listed image registry domain
    """

BuildListItem = ResourceListItem[BuildListItemInfo]

class BuildQuerySpecifics(BaseModel):
    builder_ids: Optional[List[str]] = Field(default=None)
    repos: Optional[List[str]] = Field(default=None)
    built_since: Optional[I64] = Field(default=None)
    """
    query for builds last built more recently than this timestamp
    defaults to 0 which is a no op
    """

BuildQuery = ResourceQuery[BuildQuerySpecifics]

class BuilderConfigTypes(str, Enum):
    URL = "Url"
    SERVER = "Server"
    AWS = "Aws"

class BuilderConfigUrl(BaseModel):
    """
    Use a Periphery address as a Builder.
    """
    type: Literal[BuilderConfigTypes.URL] = BuilderConfigTypes.URL
    params: UrlBuilderConfig

class BuilderConfigServer(BaseModel):
    """
    Use a connected server as a Builder.
    """
    type: Literal[BuilderConfigTypes.SERVER] = BuilderConfigTypes.SERVER
    params: ServerBuilderConfig

class BuilderConfigAws(BaseModel):
    """
    Use EC2 instances spawned on demand as a Builder.
    """
    type: Literal[BuilderConfigTypes.AWS] = BuilderConfigTypes.AWS
    params: AwsBuilderConfig

BuilderConfig = Union[BuilderConfigUrl, BuilderConfigServer, BuilderConfigAws]
Builder = Resource[BuilderConfig, None]

class BuilderListItemInfo(BaseModel):
    builder_type: str
    """
    'Url', 'Server', or 'Aws'
    """
    instance_type: Optional[str] = Field(default=None)
    """
    If 'Url': null
    If 'Server': the server id
    If 'Aws': the instance type (eg. c5.xlarge)
    """

BuilderListItem = ResourceListItem[BuilderListItemInfo]

class BuilderQuerySpecifics(BaseModel):
    pass
BuilderQuery = ResourceQuery[BuilderQuerySpecifics]

class ExecutionTypes(str, Enum):
    NONE = "None"
    RUN_ACTION = "RunAction"
    BATCH_RUN_ACTION = "BatchRunAction"
    RUN_PROCEDURE = "RunProcedure"
    BATCH_RUN_PROCEDURE = "BatchRunProcedure"
    RUN_BUILD = "RunBuild"
    BATCH_RUN_BUILD = "BatchRunBuild"
    CANCEL_BUILD = "CancelBuild"
    DEPLOY = "Deploy"
    BATCH_DEPLOY = "BatchDeploy"
    PULL_DEPLOYMENT = "PullDeployment"
    START_DEPLOYMENT = "StartDeployment"
    RESTART_DEPLOYMENT = "RestartDeployment"
    PAUSE_DEPLOYMENT = "PauseDeployment"
    UNPAUSE_DEPLOYMENT = "UnpauseDeployment"
    STOP_DEPLOYMENT = "StopDeployment"
    DESTROY_DEPLOYMENT = "DestroyDeployment"
    BATCH_DESTROY_DEPLOYMENT = "BatchDestroyDeployment"
    CLONE_REPO = "CloneRepo"
    BATCH_CLONE_REPO = "BatchCloneRepo"
    PULL_REPO = "PullRepo"
    BATCH_PULL_REPO = "BatchPullRepo"
    BUILD_REPO = "BuildRepo"
    BATCH_BUILD_REPO = "BatchBuildRepo"
    CANCEL_REPO_BUILD = "CancelRepoBuild"
    START_CONTAINER = "StartContainer"
    RESTART_CONTAINER = "RestartContainer"
    PAUSE_CONTAINER = "PauseContainer"
    UNPAUSE_CONTAINER = "UnpauseContainer"
    STOP_CONTAINER = "StopContainer"
    DESTROY_CONTAINER = "DestroyContainer"
    START_ALL_CONTAINERS = "StartAllContainers"
    RESTART_ALL_CONTAINERS = "RestartAllContainers"
    PAUSE_ALL_CONTAINERS = "PauseAllContainers"
    UNPAUSE_ALL_CONTAINERS = "UnpauseAllContainers"
    STOP_ALL_CONTAINERS = "StopAllContainers"
    PRUNE_CONTAINERS = "PruneContainers"
    DELETE_NETWORK = "DeleteNetwork"
    PRUNE_NETWORKS = "PruneNetworks"
    DELETE_IMAGE = "DeleteImage"
    PRUNE_IMAGES = "PruneImages"
    DELETE_VOLUME = "DeleteVolume"
    PRUNE_VOLUMES = "PruneVolumes"
    PRUNE_DOCKER_BUILDERS = "PruneDockerBuilders"
    PRUNE_BUILDX = "PruneBuildx"
    PRUNE_SYSTEM = "PruneSystem"
    RUN_SYNC = "RunSync"
    COMMIT_SYNC = "CommitSync"
    DEPLOY_STACK = "DeployStack"
    BATCH_DEPLOY_STACK = "BatchDeployStack"
    DEPLOY_STACK_IF_CHANGED = "DeployStackIfChanged"
    BATCH_DEPLOY_STACK_IF_CHANGED = "BatchDeployStackIfChanged"
    PULL_STACK = "PullStack"
    BATCH_PULL_STACK = "BatchPullStack"
    START_STACK = "StartStack"
    RESTART_STACK = "RestartStack"
    PAUSE_STACK = "PauseStack"
    UNPAUSE_STACK = "UnpauseStack"
    STOP_STACK = "StopStack"
    DESTROY_STACK = "DestroyStack"
    BATCH_DESTROY_STACK = "BatchDestroyStack"
    RUN_STACK_SERVICE = "RunStackService"
    TEST_ALERTER = "TestAlerter"
    SEND_ALERT = "SendAlert"
    CLEAR_REPO_CACHE = "ClearRepoCache"
    BACKUP_CORE_DATABASE = "BackupCoreDatabase"
    GLOBAL_AUTO_UPDATE = "GlobalAutoUpdate"
    SLEEP = "Sleep"

class ExecutionNone(BaseModel):
    """
    The "null" execution. Does nothing.
    """
    type: Literal[ExecutionTypes.NONE] = ExecutionTypes.NONE
    params: NoData

class ExecutionRunAction(BaseModel):
    """
    Run the target action. (alias: `action`, `ac`)
    """
    type: Literal[ExecutionTypes.RUN_ACTION] = ExecutionTypes.RUN_ACTION
    params: RunAction

class ExecutionBatchRunAction(BaseModel):
    type: Literal[ExecutionTypes.BATCH_RUN_ACTION] = ExecutionTypes.BATCH_RUN_ACTION
    params: BatchRunAction

class ExecutionRunProcedure(BaseModel):
    """
    Run the target procedure. (alias: `procedure`, `pr`)
    """
    type: Literal[ExecutionTypes.RUN_PROCEDURE] = ExecutionTypes.RUN_PROCEDURE
    params: RunProcedure

class ExecutionBatchRunProcedure(BaseModel):
    type: Literal[ExecutionTypes.BATCH_RUN_PROCEDURE] = ExecutionTypes.BATCH_RUN_PROCEDURE
    params: BatchRunProcedure

class ExecutionRunBuild(BaseModel):
    """
    Run the target build. (alias: `build`, `bd`)
    """
    type: Literal[ExecutionTypes.RUN_BUILD] = ExecutionTypes.RUN_BUILD
    params: RunBuild

class ExecutionBatchRunBuild(BaseModel):
    type: Literal[ExecutionTypes.BATCH_RUN_BUILD] = ExecutionTypes.BATCH_RUN_BUILD
    params: BatchRunBuild

class ExecutionCancelBuild(BaseModel):
    type: Literal[ExecutionTypes.CANCEL_BUILD] = ExecutionTypes.CANCEL_BUILD
    params: CancelBuild

class ExecutionDeploy(BaseModel):
    """
    Deploy the target deployment. (alias: `dp`)
    """
    type: Literal[ExecutionTypes.DEPLOY] = ExecutionTypes.DEPLOY
    params: Deploy

class ExecutionBatchDeploy(BaseModel):
    type: Literal[ExecutionTypes.BATCH_DEPLOY] = ExecutionTypes.BATCH_DEPLOY
    params: BatchDeploy

class ExecutionPullDeployment(BaseModel):
    type: Literal[ExecutionTypes.PULL_DEPLOYMENT] = ExecutionTypes.PULL_DEPLOYMENT
    params: PullDeployment

class ExecutionStartDeployment(BaseModel):
    type: Literal[ExecutionTypes.START_DEPLOYMENT] = ExecutionTypes.START_DEPLOYMENT
    params: StartDeployment

class ExecutionRestartDeployment(BaseModel):
    type: Literal[ExecutionTypes.RESTART_DEPLOYMENT] = ExecutionTypes.RESTART_DEPLOYMENT
    params: RestartDeployment

class ExecutionPauseDeployment(BaseModel):
    type: Literal[ExecutionTypes.PAUSE_DEPLOYMENT] = ExecutionTypes.PAUSE_DEPLOYMENT
    params: PauseDeployment

class ExecutionUnpauseDeployment(BaseModel):
    type: Literal[ExecutionTypes.UNPAUSE_DEPLOYMENT] = ExecutionTypes.UNPAUSE_DEPLOYMENT
    params: UnpauseDeployment

class ExecutionStopDeployment(BaseModel):
    type: Literal[ExecutionTypes.STOP_DEPLOYMENT] = ExecutionTypes.STOP_DEPLOYMENT
    params: StopDeployment

class ExecutionDestroyDeployment(BaseModel):
    type: Literal[ExecutionTypes.DESTROY_DEPLOYMENT] = ExecutionTypes.DESTROY_DEPLOYMENT
    params: DestroyDeployment

class ExecutionBatchDestroyDeployment(BaseModel):
    type: Literal[ExecutionTypes.BATCH_DESTROY_DEPLOYMENT] = ExecutionTypes.BATCH_DESTROY_DEPLOYMENT
    params: BatchDestroyDeployment

class ExecutionCloneRepo(BaseModel):
    """
    Clone the target repo
    """
    type: Literal[ExecutionTypes.CLONE_REPO] = ExecutionTypes.CLONE_REPO
    params: CloneRepo

class ExecutionBatchCloneRepo(BaseModel):
    type: Literal[ExecutionTypes.BATCH_CLONE_REPO] = ExecutionTypes.BATCH_CLONE_REPO
    params: BatchCloneRepo

class ExecutionPullRepo(BaseModel):
    type: Literal[ExecutionTypes.PULL_REPO] = ExecutionTypes.PULL_REPO
    params: PullRepo

class ExecutionBatchPullRepo(BaseModel):
    type: Literal[ExecutionTypes.BATCH_PULL_REPO] = ExecutionTypes.BATCH_PULL_REPO
    params: BatchPullRepo

class ExecutionBuildRepo(BaseModel):
    type: Literal[ExecutionTypes.BUILD_REPO] = ExecutionTypes.BUILD_REPO
    params: BuildRepo

class ExecutionBatchBuildRepo(BaseModel):
    type: Literal[ExecutionTypes.BATCH_BUILD_REPO] = ExecutionTypes.BATCH_BUILD_REPO
    params: BatchBuildRepo

class ExecutionCancelRepoBuild(BaseModel):
    type: Literal[ExecutionTypes.CANCEL_REPO_BUILD] = ExecutionTypes.CANCEL_REPO_BUILD
    params: CancelRepoBuild

class ExecutionStartContainer(BaseModel):
    type: Literal[ExecutionTypes.START_CONTAINER] = ExecutionTypes.START_CONTAINER
    params: StartContainer

class ExecutionRestartContainer(BaseModel):
    type: Literal[ExecutionTypes.RESTART_CONTAINER] = ExecutionTypes.RESTART_CONTAINER
    params: RestartContainer

class ExecutionPauseContainer(BaseModel):
    type: Literal[ExecutionTypes.PAUSE_CONTAINER] = ExecutionTypes.PAUSE_CONTAINER
    params: PauseContainer

class ExecutionUnpauseContainer(BaseModel):
    type: Literal[ExecutionTypes.UNPAUSE_CONTAINER] = ExecutionTypes.UNPAUSE_CONTAINER
    params: UnpauseContainer

class ExecutionStopContainer(BaseModel):
    type: Literal[ExecutionTypes.STOP_CONTAINER] = ExecutionTypes.STOP_CONTAINER
    params: StopContainer

class ExecutionDestroyContainer(BaseModel):
    type: Literal[ExecutionTypes.DESTROY_CONTAINER] = ExecutionTypes.DESTROY_CONTAINER
    params: DestroyContainer

class ExecutionStartAllContainers(BaseModel):
    type: Literal[ExecutionTypes.START_ALL_CONTAINERS] = ExecutionTypes.START_ALL_CONTAINERS
    params: StartAllContainers

class ExecutionRestartAllContainers(BaseModel):
    type: Literal[ExecutionTypes.RESTART_ALL_CONTAINERS] = ExecutionTypes.RESTART_ALL_CONTAINERS
    params: RestartAllContainers

class ExecutionPauseAllContainers(BaseModel):
    type: Literal[ExecutionTypes.PAUSE_ALL_CONTAINERS] = ExecutionTypes.PAUSE_ALL_CONTAINERS
    params: PauseAllContainers

class ExecutionUnpauseAllContainers(BaseModel):
    type: Literal[ExecutionTypes.UNPAUSE_ALL_CONTAINERS] = ExecutionTypes.UNPAUSE_ALL_CONTAINERS
    params: UnpauseAllContainers

class ExecutionStopAllContainers(BaseModel):
    type: Literal[ExecutionTypes.STOP_ALL_CONTAINERS] = ExecutionTypes.STOP_ALL_CONTAINERS
    params: StopAllContainers

class ExecutionPruneContainers(BaseModel):
    type: Literal[ExecutionTypes.PRUNE_CONTAINERS] = ExecutionTypes.PRUNE_CONTAINERS
    params: PruneContainers

class ExecutionDeleteNetwork(BaseModel):
    type: Literal[ExecutionTypes.DELETE_NETWORK] = ExecutionTypes.DELETE_NETWORK
    params: DeleteNetwork

class ExecutionPruneNetworks(BaseModel):
    type: Literal[ExecutionTypes.PRUNE_NETWORKS] = ExecutionTypes.PRUNE_NETWORKS
    params: PruneNetworks

class ExecutionDeleteImage(BaseModel):
    type: Literal[ExecutionTypes.DELETE_IMAGE] = ExecutionTypes.DELETE_IMAGE
    params: DeleteImage

class ExecutionPruneImages(BaseModel):
    type: Literal[ExecutionTypes.PRUNE_IMAGES] = ExecutionTypes.PRUNE_IMAGES
    params: PruneImages

class ExecutionDeleteVolume(BaseModel):
    type: Literal[ExecutionTypes.DELETE_VOLUME] = ExecutionTypes.DELETE_VOLUME
    params: DeleteVolume

class ExecutionPruneVolumes(BaseModel):
    type: Literal[ExecutionTypes.PRUNE_VOLUMES] = ExecutionTypes.PRUNE_VOLUMES
    params: PruneVolumes

class ExecutionPruneDockerBuilders(BaseModel):
    type: Literal[ExecutionTypes.PRUNE_DOCKER_BUILDERS] = ExecutionTypes.PRUNE_DOCKER_BUILDERS
    params: PruneDockerBuilders

class ExecutionPruneBuildx(BaseModel):
    type: Literal[ExecutionTypes.PRUNE_BUILDX] = ExecutionTypes.PRUNE_BUILDX
    params: PruneBuildx

class ExecutionPruneSystem(BaseModel):
    type: Literal[ExecutionTypes.PRUNE_SYSTEM] = ExecutionTypes.PRUNE_SYSTEM
    params: PruneSystem

class ExecutionRunSync(BaseModel):
    """
    Execute a Resource Sync. (alias: `sync`)
    """
    type: Literal[ExecutionTypes.RUN_SYNC] = ExecutionTypes.RUN_SYNC
    params: RunSync

class ExecutionCommitSync(BaseModel):
    """
    Commit a Resource Sync. (alias: `commit`)
    """
    type: Literal[ExecutionTypes.COMMIT_SYNC] = ExecutionTypes.COMMIT_SYNC
    params: CommitSync

class ExecutionDeployStack(BaseModel):
    """
    Deploy the target stack. (alias: `stack`, `st`)
    """
    type: Literal[ExecutionTypes.DEPLOY_STACK] = ExecutionTypes.DEPLOY_STACK
    params: DeployStack

class ExecutionBatchDeployStack(BaseModel):
    type: Literal[ExecutionTypes.BATCH_DEPLOY_STACK] = ExecutionTypes.BATCH_DEPLOY_STACK
    params: BatchDeployStack

class ExecutionDeployStackIfChanged(BaseModel):
    type: Literal[ExecutionTypes.DEPLOY_STACK_IF_CHANGED] = ExecutionTypes.DEPLOY_STACK_IF_CHANGED
    params: DeployStackIfChanged

class ExecutionBatchDeployStackIfChanged(BaseModel):
    type: Literal[ExecutionTypes.BATCH_DEPLOY_STACK_IF_CHANGED] = ExecutionTypes.BATCH_DEPLOY_STACK_IF_CHANGED
    params: BatchDeployStackIfChanged

class ExecutionPullStack(BaseModel):
    type: Literal[ExecutionTypes.PULL_STACK] = ExecutionTypes.PULL_STACK
    params: PullStack

class ExecutionBatchPullStack(BaseModel):
    type: Literal[ExecutionTypes.BATCH_PULL_STACK] = ExecutionTypes.BATCH_PULL_STACK
    params: BatchPullStack

class ExecutionStartStack(BaseModel):
    type: Literal[ExecutionTypes.START_STACK] = ExecutionTypes.START_STACK
    params: StartStack

class ExecutionRestartStack(BaseModel):
    type: Literal[ExecutionTypes.RESTART_STACK] = ExecutionTypes.RESTART_STACK
    params: RestartStack

class ExecutionPauseStack(BaseModel):
    type: Literal[ExecutionTypes.PAUSE_STACK] = ExecutionTypes.PAUSE_STACK
    params: PauseStack

class ExecutionUnpauseStack(BaseModel):
    type: Literal[ExecutionTypes.UNPAUSE_STACK] = ExecutionTypes.UNPAUSE_STACK
    params: UnpauseStack

class ExecutionStopStack(BaseModel):
    type: Literal[ExecutionTypes.STOP_STACK] = ExecutionTypes.STOP_STACK
    params: StopStack

class ExecutionDestroyStack(BaseModel):
    type: Literal[ExecutionTypes.DESTROY_STACK] = ExecutionTypes.DESTROY_STACK
    params: DestroyStack

class ExecutionBatchDestroyStack(BaseModel):
    type: Literal[ExecutionTypes.BATCH_DESTROY_STACK] = ExecutionTypes.BATCH_DESTROY_STACK
    params: BatchDestroyStack

class ExecutionRunStackService(BaseModel):
    type: Literal[ExecutionTypes.RUN_STACK_SERVICE] = ExecutionTypes.RUN_STACK_SERVICE
    params: RunStackService

class ExecutionTestAlerter(BaseModel):
    type: Literal[ExecutionTypes.TEST_ALERTER] = ExecutionTypes.TEST_ALERTER
    params: TestAlerter

class ExecutionSendAlert(BaseModel):
    type: Literal[ExecutionTypes.SEND_ALERT] = ExecutionTypes.SEND_ALERT
    params: SendAlert

class ExecutionClearRepoCache(BaseModel):
    type: Literal[ExecutionTypes.CLEAR_REPO_CACHE] = ExecutionTypes.CLEAR_REPO_CACHE
    params: ClearRepoCache

class ExecutionBackupCoreDatabase(BaseModel):
    type: Literal[ExecutionTypes.BACKUP_CORE_DATABASE] = ExecutionTypes.BACKUP_CORE_DATABASE
    params: BackupCoreDatabase

class ExecutionGlobalAutoUpdate(BaseModel):
    type: Literal[ExecutionTypes.GLOBAL_AUTO_UPDATE] = ExecutionTypes.GLOBAL_AUTO_UPDATE
    params: GlobalAutoUpdate

class ExecutionSleep(BaseModel):
    type: Literal[ExecutionTypes.SLEEP] = ExecutionTypes.SLEEP
    params: Sleep

# A wrapper for all Komodo exections.
Execution = Union[ExecutionNone, ExecutionRunAction, ExecutionBatchRunAction, ExecutionRunProcedure, ExecutionBatchRunProcedure, ExecutionRunBuild, ExecutionBatchRunBuild, ExecutionCancelBuild, ExecutionDeploy, ExecutionBatchDeploy, ExecutionPullDeployment, ExecutionStartDeployment, ExecutionRestartDeployment, ExecutionPauseDeployment, ExecutionUnpauseDeployment, ExecutionStopDeployment, ExecutionDestroyDeployment, ExecutionBatchDestroyDeployment, ExecutionCloneRepo, ExecutionBatchCloneRepo, ExecutionPullRepo, ExecutionBatchPullRepo, ExecutionBuildRepo, ExecutionBatchBuildRepo, ExecutionCancelRepoBuild, ExecutionStartContainer, ExecutionRestartContainer, ExecutionPauseContainer, ExecutionUnpauseContainer, ExecutionStopContainer, ExecutionDestroyContainer, ExecutionStartAllContainers, ExecutionRestartAllContainers, ExecutionPauseAllContainers, ExecutionUnpauseAllContainers, ExecutionStopAllContainers, ExecutionPruneContainers, ExecutionDeleteNetwork, ExecutionPruneNetworks, ExecutionDeleteImage, ExecutionPruneImages, ExecutionDeleteVolume, ExecutionPruneVolumes, ExecutionPruneDockerBuilders, ExecutionPruneBuildx, ExecutionPruneSystem, ExecutionRunSync, ExecutionCommitSync, ExecutionDeployStack, ExecutionBatchDeployStack, ExecutionDeployStackIfChanged, ExecutionBatchDeployStackIfChanged, ExecutionPullStack, ExecutionBatchPullStack, ExecutionStartStack, ExecutionRestartStack, ExecutionPauseStack, ExecutionUnpauseStack, ExecutionStopStack, ExecutionDestroyStack, ExecutionBatchDestroyStack, ExecutionRunStackService, ExecutionTestAlerter, ExecutionSendAlert, ExecutionClearRepoCache, ExecutionBackupCoreDatabase, ExecutionGlobalAutoUpdate, ExecutionSleep]
class EnabledExecution(BaseModel):
    """
    Allows to enable / disabled procedures in the sequence / parallel vec on the fly
    """
    execution: Execution
    """
    The execution request to run.
    """
    enabled: bool
    """
    Whether the execution is enabled to run in the procedure.
    """

class ProcedureStage(BaseModel):
    """
    A single stage of a procedure. Runs a list of executions in parallel.
    """
    name: str
    """
    A name for the procedure
    """
    enabled: bool
    """
    Whether the stage should be run as part of the procedure.
    """
    executions: Optional[List[EnabledExecution]] = Field(default=None)
    """
    The executions in the stage
    """

class ProcedureConfig(BaseModel):
    """
    Config for the [Procedure]
    """
    stages: Optional[List[ProcedureStage]] = Field(default=None)
    """
    The stages to be run by the procedure.
    """
    schedule_format: Optional[ScheduleFormat] = Field(default=None)
    """
    Choose whether to specify schedule as regular CRON, or using the english to CRON parser.
    """
    schedule: Optional[str] = Field(default=None)
    """
    Optionally provide a schedule for the procedure to run on.
    
    There are 2 ways to specify a schedule:
    
    1. Regular CRON expression:
    
    (second, minute, hour, day, month, day-of-week)
    ```text
    0 0 0 1,15 * ?
    ```
    
    2. "English" expression via [english-to-cron](https://crates.io/crates/english-to-cron):
    
    ```text
    at midnight on the 1st and 15th of the month
    ```
    """
    schedule_enabled: bool
    """
    Whether schedule is enabled if one is provided.
    Can be used to temporarily disable the schedule.
    """
    schedule_timezone: Optional[str] = Field(default=None)
    """
    Optional. A TZ Identifier. If not provided, will use Core local timezone.
    https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
    """
    schedule_alert: bool
    """
    Whether to send alerts when the schedule was run.
    """
    failure_alert: bool
    """
    Whether to send alerts when this procedure fails.
    """
    webhook_enabled: bool
    """
    Whether incoming webhooks actually trigger action.
    """
    webhook_secret: Optional[str] = Field(default=None)
    """
    Optionally provide an alternate webhook secret for this procedure.
    If its an empty string, use the default secret from the config.
    """

Procedure = Resource[ProcedureConfig, None]

"""
Procedures run a series of stages sequentially, where
each stage runs executions in parallel.
"""
CopyProcedureResponse = Procedure

CreateActionWebhookResponse = NoData

class CreateApiKeyResponse(BaseModel):
    """
    Response for [CreateApiKey].
    """
    key: str
    """
    X-API-KEY
    """
    secret: str
    """
    X-API-SECRET
    
    Note.
    There is no way to get the secret again after it is distributed in this message
    """

CreateApiKeyForServiceUserResponse = CreateApiKeyResponse

CreateBuildWebhookResponse = NoData

class DockerRegistryAccount(BaseModel):
    """
    Configuration to access private image repositories on various registries.
    """
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[MongoId] = Field(alias="_id", default=None)
    """
    The Mongo ID of the docker registry account.
    This field is de/serialized from/to JSON as
    `{ "_id": { "$oid": "..." }, ...(rest of DockerRegistryAccount) }`
    """
    domain: str
    """
    The domain of the provider.
    
    For docker registry, this can include 'http://...',
    however this is not recommended and won't work unless "insecure registries" are enabled
    on your hosts. See <https://docs.docker.com/reference/cli/dockerd/#insecure-registries>.
    """
    username: Optional[str] = Field(default=None)
    """
    The account username
    """
    token: Optional[str] = Field(default=None)
    """
    The token in plain text on the db.
    If the database / host can be accessed this is insecure.
    """

CreateDockerRegistryAccountResponse = DockerRegistryAccount

class GitProviderAccount(BaseModel):
    """
    Configuration to access private git repos from various git providers.
    Note. Cannot create two accounts with the same domain and username.
    """
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[MongoId] = Field(alias="_id", default=None)
    """
    The Mongo ID of the git provider account.
    This field is de/serialized from/to JSON as
    `{ "_id": { "$oid": "..." }, ...(rest of serialized User) }`
    """
    domain: str
    """
    The domain of the provider.
    
    For git, this cannot include the protocol eg 'http://',
    which is controlled with 'https' field.
    """
    https: bool
    """
    Whether git provider is accessed over http or https.
    """
    username: Optional[str] = Field(default=None)
    """
    The account username
    """
    token: Optional[str] = Field(default=None)
    """
    The token in plain text on the db.
    If the database / host can be accessed this is insecure.
    """

CreateGitProviderAccountResponse = GitProviderAccount

class UserConfigLocalInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Local` of the `UserConfig` Rust enum
    """
    password: str

class UserConfigGoogleInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Google` of the `UserConfig` Rust enum
    """
    google_id: str
    avatar: str

class UserConfigGithubInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Github` of the `UserConfig` Rust enum
    """
    github_id: str
    avatar: str

class UserConfigOidcInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Oidc` of the `UserConfig` Rust enum
    """
    provider: str
    user_id: str

class UserConfigServiceInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Service` of the `UserConfig` Rust enum
    """
    description: str

class UserConfigTypes(str, Enum):
    LOCAL = "Local"
    GOOGLE = "Google"
    GITHUB = "Github"
    OIDC = "Oidc"
    SERVICE = "Service"

class UserConfigLocal(BaseModel):
    """
    User that logs in with username / password
    """
    type: Literal[UserConfigTypes.LOCAL] = UserConfigTypes.LOCAL
    data: UserConfigLocalInner

class UserConfigGoogle(BaseModel):
    """
    User that logs in via Google Oauth
    """
    type: Literal[UserConfigTypes.GOOGLE] = UserConfigTypes.GOOGLE
    data: UserConfigGoogleInner

class UserConfigGithub(BaseModel):
    """
    User that logs in via Github Oauth
    """
    type: Literal[UserConfigTypes.GITHUB] = UserConfigTypes.GITHUB
    data: UserConfigGithubInner

class UserConfigOidc(BaseModel):
    """
    User that logs in via Oidc provider
    """
    type: Literal[UserConfigTypes.OIDC] = UserConfigTypes.OIDC
    data: UserConfigOidcInner

class UserConfigService(BaseModel):
    """
    Non-human managed user, can have it's own permissions / api keys
    """
    type: Literal[UserConfigTypes.SERVICE] = UserConfigTypes.SERVICE
    data: UserConfigServiceInner

UserConfig = Union[UserConfigLocal, UserConfigGoogle, UserConfigGithub, UserConfigOidc, UserConfigService]
class User(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[MongoId] = Field(alias="_id", default=None)
    """
    The Mongo ID of the User.
    This field is de/serialized from/to JSON as
    `{ "_id": { "$oid": "..." }, ...(rest of User schema) }`
    """
    username: str
    """
    The globally unique username for the user.
    """
    enabled: Optional[bool] = Field(default=None)
    """
    Whether user is enabled / able to access the api.
    """
    super_admin: Optional[bool] = Field(default=None)
    """
    Can give / take other users admin priviledges.
    """
    admin: Optional[bool] = Field(default=None)
    """
    Whether the user has global admin permissions.
    """
    create_server_permissions: Optional[bool] = Field(default=None)
    """
    Whether the user has permission to create servers.
    """
    create_build_permissions: Optional[bool] = Field(default=None)
    """
    Whether the user has permission to create builds
    """
    config: UserConfig
    """
    The user-type specific config.
    """
    last_update_view: Optional[I64] = Field(default=None)
    """
    When the user last opened updates dropdown.
    """
    recents: Optional[Dict[ResourceTargetTypes, List[str]]] = Field(default=None)
    """
    Recently viewed ids
    """
    all: Optional[Mapping[ResourceTargetTypes, PermissionLevelAndSpecifics]] = Field(default=None)
    """
    Give the user elevated permissions on all resources of a certain type
    """
    updated_at: Optional[I64] = Field(default=None)

CreateLocalUserResponse = User

CreateProcedureResponse = Procedure

CreateRepoWebhookResponse = NoData

CreateServiceUserResponse = User

CreateStackWebhookResponse = NoData

CreateSyncWebhookResponse = NoData

class Variable(BaseModel):
    """
    A non-secret global variable which can be interpolated into deployment
    environment variable values and build argument values.
    """
    name: str
    """
    Unique name associated with the variable.
    Instances of '[[variable.name]]' in value will be replaced with 'variable.value'.
    """
    description: Optional[str] = Field(default=None)
    """
    A description for the variable.
    """
    value: Optional[str] = Field(default=None)
    """
    The value associated with the variable.
    """
    is_secret: Optional[bool] = Field(default=None)
    """
    If marked as secret, the variable value will be hidden in updates / logs.
    Additionally the value will not be served in read requests by non admin users.
    
    Note that the value is NOT encrypted in the database, and will likely show up in database logs.
    The security of these variables comes down to the security
    of the database (system level encryption, network isolation, etc.)
    """

CreateVariableResponse = Variable

DeleteActionWebhookResponse = NoData

DeleteApiKeyForServiceUserResponse = NoData

DeleteApiKeyResponse = NoData

DeleteBuildWebhookResponse = NoData

DeleteDockerRegistryAccountResponse = DockerRegistryAccount

DeleteGitProviderAccountResponse = GitProviderAccount

DeleteProcedureResponse = Procedure

DeleteRepoWebhookResponse = NoData

DeleteStackWebhookResponse = NoData

DeleteSyncWebhookResponse = NoData

DeleteUserResponse = User

DeleteVariableResponse = Variable

class DeploymentImageImageInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Image` of the `DeploymentImage` Rust enum
    """
    image: Optional[str] = Field(default=None)
    """
    The docker image, can be from any registry that works with docker and that the host server can reach.
    """

class DeploymentImageBuildInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Build` of the `DeploymentImage` Rust enum
    """
    build_id: Optional[str] = Field(default=None)
    """
    The id of the Build
    """
    version: Optional[Version] = Field(default=None)
    """
    Use a custom / older version of the image produced by the build.
    if version is 0.0.0, this means `latest` image.
    """

class DeploymentImageTypes(str, Enum):
    IMAGE = "Image"
    BUILD = "Build"

class DeploymentImageImage(BaseModel):
    """
    Deploy any external image.
    """
    type: Literal[DeploymentImageTypes.IMAGE] = DeploymentImageTypes.IMAGE
    params: DeploymentImageImageInner

class DeploymentImageBuild(BaseModel):
    """
    Deploy a Komodo Build.
    """
    type: Literal[DeploymentImageTypes.BUILD] = DeploymentImageTypes.BUILD
    params: DeploymentImageBuildInner

DeploymentImage = Union[DeploymentImageImage, DeploymentImageBuild]
class RestartMode(str, Enum):
    NORESTART = "no"
    ONFAILURE = "on-failure"
    ALWAYS = "always"
    UNLESSSTOPPED = "unless-stopped"
class TerminationSignal(str, Enum):
    SIGHUP = "SIGHUP"
    SIGINT = "SIGINT"
    SIGQUIT = "SIGQUIT"
    SIGTERM = "SIGTERM"
class DeploymentConfig(BaseModel):
    server_id: Optional[str] = Field(default=None)
    """
    The id of server the deployment is deployed on.
    """
    image: Optional[DeploymentImage] = Field(default=None)
    """
    The image which the deployment deploys.
    Can either be a user inputted image, or a Komodo Build.
    """
    image_registry_account: Optional[str] = Field(default=None)
    """
    Configure the account used to pull the image from the registry.
    Used with `docker login`.
    
    - If the field is empty string, will use the same account config as the build, or none at all if using image.
    - If the field contains an account, a token for the account must be available.
    - Will get the registry domain from the build / image
    """
    skip_secret_interp: Optional[bool] = Field(default=None)
    """
    Whether to skip secret interpolation into the deployment environment variables.
    """
    redeploy_on_build: Optional[bool] = Field(default=None)
    """
    Whether to redeploy the deployment whenever the attached build finishes.
    """
    poll_for_updates: Optional[bool] = Field(default=None)
    """
    Whether to poll for any updates to the image.
    """
    auto_update: Optional[bool] = Field(default=None)
    """
    Whether to automatically redeploy when
    newer a image is found. Will implicitly
    enable `poll_for_updates`, you don't need to
    enable both.
    """
    send_alerts: bool
    """
    Whether to send ContainerStateChange alerts for this deployment.
    """
    links: Optional[List[str]] = Field(default=None)
    """
    Configure quick links that are displayed in the resource header
    """
    network: str
    """
    The network attached to the container.
    Default is `host`.
    """
    restart: Optional[RestartMode] = Field(default=None)
    """
    The restart mode given to the container.
    """
    command: Optional[str] = Field(default=None)
    """
    This is interpolated at the end of the `docker run` command,
    which means they are either passed to the containers inner process,
    or replaces the container command, depending on use of ENTRYPOINT or CMD in dockerfile.
    Empty is no command.
    """
    termination_signal: Optional[TerminationSignal] = Field(default=None)
    """
    The default termination signal to use to stop the deployment. Defaults to SigTerm (default docker signal).
    """
    termination_timeout: int
    """
    The termination timeout.
    """
    extra_args: Optional[List[str]] = Field(default=None)
    """
    Extra args which are interpolated into the `docker run` command,
    and affect the container configuration.
    """
    term_signal_labels: Optional[str] = Field(default=None)
    """
    Labels attached to various termination signal options.
    Used to specify different shutdown functionality depending on the termination signal.
    """
    ports: Optional[str] = Field(default=None)
    """
    The container port mapping.
    Irrelevant if container network is `host`.
    Maps ports on host to ports on container.
    """
    volumes: Optional[str] = Field(default=None)
    """
    The container volume mapping.
    Maps files / folders on host to files / folders in container.
    """
    environment: Optional[str] = Field(default=None)
    """
    The environment variables passed to the container.
    """
    labels: Optional[str] = Field(default=None)
    """
    The docker labels given to the container.
    """

Deployment = Resource[DeploymentConfig, None]

class DeploymentState(str, Enum):
    """
    Variants de/serialized from/to snake_case.
    
    Eg.
    - NotDeployed -> not_deployed
    - Restarting -> restarting
    - Running -> running.
    """
    DEPLOYING = "deploying"
    """
    The deployment is currently re/deploying
    """
    RUNNING = "running"
    """
    Container is running
    """
    CREATED = "created"
    """
    Container is created but not running
    """
    RESTARTING = "restarting"
    """
    Container is in restart loop
    """
    REMOVING = "removing"
    """
    Container is being removed
    """
    PAUSED = "paused"
    """
    Container is paused
    """
    EXITED = "exited"
    """
    Container is exited
    """
    DEAD = "dead"
    """
    Container is dead
    """
    NOTDEPLOYED = "not_deployed"
    """
    The deployment is not deployed (no matching container)
    """
    UNKNOWN = "unknown"
    """
    Server not reachable for status
    """
class DeploymentListItemInfo(BaseModel):
    state: DeploymentState
    """
    The state of the deployment / underlying docker container.
    """
    status: Optional[str] = Field(default=None)
    """
    The status of the docker container (eg. up 12 hours, exited 5 minutes ago.)
    """
    image: str
    """
    The image attached to the deployment.
    """
    update_available: bool
    """
    Whether there is a newer image available at the same tag.
    """
    server_id: str
    """
    The server that deployment sits on.
    """
    build_id: Optional[str] = Field(default=None)
    """
    An attached Komodo Build, if it exists.
    """

DeploymentListItem = ResourceListItem[DeploymentListItemInfo]

class DeploymentQuerySpecifics(BaseModel):
    server_ids: Optional[List[str]] = Field(default=None)
    """
    Query only for Deployments on these Servers.
    If empty, does not filter by Server.
    Only accepts Server id (not name).
    """
    build_ids: Optional[List[str]] = Field(default=None)
    """
    Query only for Deployments with these Builds attached.
    If empty, does not filter by Build.
    Only accepts Build id (not name).
    """
    update_available: Optional[bool] = Field(default=None)
    """
    Query only for Deployments with available image updates.
    """

DeploymentQuery = ResourceQuery[DeploymentQuerySpecifics]

class JwtResponse(BaseModel):
    """
    JSON containing an authentication token.
    """
    user_id: str
    """
    User ID for signed in user.
    """
    jwt: str
    """
    A token the user can use to authenticate their requests.
    """

ExchangeForJwtResponse = JwtResponse

"""
Response for [ExchangeForJwt].
"""
class TomlResponse(BaseModel):
    """
    Response containing pretty formatted toml contents.
    """
    toml: str

ExportAllResourcesToTomlResponse = TomlResponse

ExportResourcesToTomlResponse = TomlResponse

FindUserResponse = User

class ActionActionState(BaseModel):
    running: int
    """
    Number of instances of the Action currently running
    """

GetActionActionStateResponse = ActionActionState

GetActionResponse = Action

class SeverityLevel(str, Enum):
    """
    Severity level of problem.
    """
    OK = "OK"
    """
    No problem.
    
    Aliases: ok, low, l
    """
    WARNING = "WARNING"
    """
    Problem is imminent.
    
    Aliases: warning, w, medium, m
    """
    CRITICAL = "CRITICAL"
    """
    Problem fully realized.
    
    Aliases: critical, c, high, h
    """
class AlertDataNoneInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `None` of the `AlertData` Rust enum
    """
    pass
class AlertDataTestInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Test` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the alerter
    """
    name: str
    """
    The name of the alerter
    """

class AlertDataServerUnreachableInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ServerUnreachable` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the server
    """
    name: str
    """
    The name of the server
    """
    region: Optional[str] = Field(default=None)
    """
    The region of the server
    """
    err: Optional[_Serror] = Field(default=None)
    """
    The error data
    """

class AlertDataServerCpuInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ServerCpu` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the server
    """
    name: str
    """
    The name of the server
    """
    region: Optional[str] = Field(default=None)
    """
    The region of the server
    """
    percentage: float
    """
    The cpu usage percentage
    """

class AlertDataServerMemInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ServerMem` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the server
    """
    name: str
    """
    The name of the server
    """
    region: Optional[str] = Field(default=None)
    """
    The region of the server
    """
    used_gb: float
    """
    The used memory
    """
    total_gb: float
    """
    The total memory
    """

class AlertDataServerDiskInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ServerDisk` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the server
    """
    name: str
    """
    The name of the server
    """
    region: Optional[str] = Field(default=None)
    """
    The region of the server
    """
    path: str
    """
    The mount path of the disk
    """
    used_gb: float
    """
    The used portion of the disk in GB
    """
    total_gb: float
    """
    The total size of the disk in GB
    """

class AlertDataServerVersionMismatchInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ServerVersionMismatch` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the server
    """
    name: str
    """
    The name of the server
    """
    region: Optional[str] = Field(default=None)
    """
    The region of the server
    """
    server_version: str
    """
    The actual server version
    """
    core_version: str
    """
    The core version
    """

class AlertDataContainerStateChangeInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ContainerStateChange` of the `AlertData` Rust enum
    """
    model_config = ConfigDict(populate_by_name=True)

    id: str
    """
    The id of the deployment
    """
    name: str
    """
    The name of the deployment
    """
    server_id: str
    """
    The server id of server that the deployment is on
    """
    server_name: str
    """
    The server name
    """
    from_: DeploymentState = Field(alias="from")
    """
    The previous container state
    """
    to: DeploymentState
    """
    The current container state
    """

class AlertDataDeploymentImageUpdateAvailableInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `DeploymentImageUpdateAvailable` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the deployment
    """
    name: str
    """
    The name of the deployment
    """
    server_id: str
    """
    The server id of server that the deployment is on
    """
    server_name: str
    """
    The server name
    """
    image: str
    """
    The image with update
    """

class AlertDataDeploymentAutoUpdatedInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `DeploymentAutoUpdated` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the deployment
    """
    name: str
    """
    The name of the deployment
    """
    server_id: str
    """
    The server id of server that the deployment is on
    """
    server_name: str
    """
    The server name
    """
    image: str
    """
    The updated image
    """

class AlertDataStackStateChangeInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `StackStateChange` of the `AlertData` Rust enum
    """
    model_config = ConfigDict(populate_by_name=True)

    id: str
    """
    The id of the stack
    """
    name: str
    """
    The name of the stack
    """
    server_id: str
    """
    The server id of server that the stack is on
    """
    server_name: str
    """
    The server name
    """
    from_: StackState = Field(alias="from")
    """
    The previous stack state
    """
    to: StackState
    """
    The current stack state
    """

class AlertDataStackImageUpdateAvailableInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `StackImageUpdateAvailable` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the stack
    """
    name: str
    """
    The name of the stack
    """
    server_id: str
    """
    The server id of server that the stack is on
    """
    server_name: str
    """
    The server name
    """
    service: str
    """
    The service name to update
    """
    image: str
    """
    The image with update
    """

class AlertDataStackAutoUpdatedInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `StackAutoUpdated` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the stack
    """
    name: str
    """
    The name of the stack
    """
    server_id: str
    """
    The server id of server that the stack is on
    """
    server_name: str
    """
    The server name
    """
    images: List[str]
    """
    One or more images that were updated
    """

class AlertDataAwsBuilderTerminationFailedInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `AwsBuilderTerminationFailed` of the `AlertData` Rust enum
    """
    instance_id: str
    """
    The id of the aws instance which failed to terminate
    """
    message: str
    """
    A reason for the failure
    """

class AlertDataResourceSyncPendingUpdatesInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ResourceSyncPendingUpdates` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the resource sync
    """
    name: str
    """
    The name of the resource sync
    """

class AlertDataBuildFailedInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `BuildFailed` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the build
    """
    name: str
    """
    The name of the build
    """
    version: Version
    """
    The version that failed to build
    """

class AlertDataRepoBuildFailedInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `RepoBuildFailed` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the repo
    """
    name: str
    """
    The name of the repo
    """

class AlertDataProcedureFailedInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ProcedureFailed` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the procedure
    """
    name: str
    """
    The name of the procedure
    """

class AlertDataActionFailedInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ActionFailed` of the `AlertData` Rust enum
    """
    id: str
    """
    The id of the action
    """
    name: str
    """
    The name of the action
    """

class AlertDataScheduleRunInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ScheduleRun` of the `AlertData` Rust enum
    """
    resource_type: ResourceTargetTypes
    """
    Procedure or Action
    """
    id: str
    """
    The resource id
    """
    name: str
    """
    The resource name
    """

class AlertDataCustomInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Custom` of the `AlertData` Rust enum
    """
    message: str
    """
    The alert message.
    """
    details: Optional[str] = Field(default=None)
    """
    Message details. May be empty string.
    """

class AlertDataTypes(str, Enum):
    NONE = "None"
    TEST = "Test"
    SERVER_UNREACHABLE = "ServerUnreachable"
    SERVER_CPU = "ServerCpu"
    SERVER_MEM = "ServerMem"
    SERVER_DISK = "ServerDisk"
    SERVER_VERSION_MISMATCH = "ServerVersionMismatch"
    CONTAINER_STATE_CHANGE = "ContainerStateChange"
    DEPLOYMENT_IMAGE_UPDATE_AVAILABLE = "DeploymentImageUpdateAvailable"
    DEPLOYMENT_AUTO_UPDATED = "DeploymentAutoUpdated"
    STACK_STATE_CHANGE = "StackStateChange"
    STACK_IMAGE_UPDATE_AVAILABLE = "StackImageUpdateAvailable"
    STACK_AUTO_UPDATED = "StackAutoUpdated"
    AWS_BUILDER_TERMINATION_FAILED = "AwsBuilderTerminationFailed"
    RESOURCE_SYNC_PENDING_UPDATES = "ResourceSyncPendingUpdates"
    BUILD_FAILED = "BuildFailed"
    REPO_BUILD_FAILED = "RepoBuildFailed"
    PROCEDURE_FAILED = "ProcedureFailed"
    ACTION_FAILED = "ActionFailed"
    SCHEDULE_RUN = "ScheduleRun"
    CUSTOM = "Custom"

class AlertDataNone(BaseModel):
    """
    A null alert
    """
    type: Literal[AlertDataTypes.NONE] = AlertDataTypes.NONE
    data: AlertDataNoneInner

class AlertDataTest(BaseModel):
    """
    The user triggered a test of the
    Alerter configuration.
    """
    type: Literal[AlertDataTypes.TEST] = AlertDataTypes.TEST
    data: AlertDataTestInner

class AlertDataServerUnreachable(BaseModel):
    """
    A server could not be reached.
    """
    type: Literal[AlertDataTypes.SERVER_UNREACHABLE] = AlertDataTypes.SERVER_UNREACHABLE
    data: AlertDataServerUnreachableInner

class AlertDataServerCpu(BaseModel):
    """
    A server has high CPU usage.
    """
    type: Literal[AlertDataTypes.SERVER_CPU] = AlertDataTypes.SERVER_CPU
    data: AlertDataServerCpuInner

class AlertDataServerMem(BaseModel):
    """
    A server has high memory usage.
    """
    type: Literal[AlertDataTypes.SERVER_MEM] = AlertDataTypes.SERVER_MEM
    data: AlertDataServerMemInner

class AlertDataServerDisk(BaseModel):
    """
    A server has high disk usage.
    """
    type: Literal[AlertDataTypes.SERVER_DISK] = AlertDataTypes.SERVER_DISK
    data: AlertDataServerDiskInner

class AlertDataServerVersionMismatch(BaseModel):
    """
    A server has a version mismatch with the core.
    """
    type: Literal[AlertDataTypes.SERVER_VERSION_MISMATCH] = AlertDataTypes.SERVER_VERSION_MISMATCH
    data: AlertDataServerVersionMismatchInner

class AlertDataContainerStateChange(BaseModel):
    """
    A container's state has changed unexpectedly.
    """
    type: Literal[AlertDataTypes.CONTAINER_STATE_CHANGE] = AlertDataTypes.CONTAINER_STATE_CHANGE
    data: AlertDataContainerStateChangeInner

class AlertDataDeploymentImageUpdateAvailable(BaseModel):
    """
    A Deployment has an image update available
    """
    type: Literal[AlertDataTypes.DEPLOYMENT_IMAGE_UPDATE_AVAILABLE] = AlertDataTypes.DEPLOYMENT_IMAGE_UPDATE_AVAILABLE
    data: AlertDataDeploymentImageUpdateAvailableInner

class AlertDataDeploymentAutoUpdated(BaseModel):
    """
    A Deployment has an image update available
    """
    type: Literal[AlertDataTypes.DEPLOYMENT_AUTO_UPDATED] = AlertDataTypes.DEPLOYMENT_AUTO_UPDATED
    data: AlertDataDeploymentAutoUpdatedInner

class AlertDataStackStateChange(BaseModel):
    """
    A stack's state has changed unexpectedly.
    """
    type: Literal[AlertDataTypes.STACK_STATE_CHANGE] = AlertDataTypes.STACK_STATE_CHANGE
    data: AlertDataStackStateChangeInner

class AlertDataStackImageUpdateAvailable(BaseModel):
    """
    A Stack has an image update available
    """
    type: Literal[AlertDataTypes.STACK_IMAGE_UPDATE_AVAILABLE] = AlertDataTypes.STACK_IMAGE_UPDATE_AVAILABLE
    data: AlertDataStackImageUpdateAvailableInner

class AlertDataStackAutoUpdated(BaseModel):
    """
    A Stack was auto updated
    """
    type: Literal[AlertDataTypes.STACK_AUTO_UPDATED] = AlertDataTypes.STACK_AUTO_UPDATED
    data: AlertDataStackAutoUpdatedInner

class AlertDataAwsBuilderTerminationFailed(BaseModel):
    """
    An AWS builder failed to terminate.
    """
    type: Literal[AlertDataTypes.AWS_BUILDER_TERMINATION_FAILED] = AlertDataTypes.AWS_BUILDER_TERMINATION_FAILED
    data: AlertDataAwsBuilderTerminationFailedInner

class AlertDataResourceSyncPendingUpdates(BaseModel):
    """
    A resource sync has pending updates
    """
    type: Literal[AlertDataTypes.RESOURCE_SYNC_PENDING_UPDATES] = AlertDataTypes.RESOURCE_SYNC_PENDING_UPDATES
    data: AlertDataResourceSyncPendingUpdatesInner

class AlertDataBuildFailed(BaseModel):
    """
    A build has failed
    """
    type: Literal[AlertDataTypes.BUILD_FAILED] = AlertDataTypes.BUILD_FAILED
    data: AlertDataBuildFailedInner

class AlertDataRepoBuildFailed(BaseModel):
    """
    A repo has failed
    """
    type: Literal[AlertDataTypes.REPO_BUILD_FAILED] = AlertDataTypes.REPO_BUILD_FAILED
    data: AlertDataRepoBuildFailedInner

class AlertDataProcedureFailed(BaseModel):
    """
    A procedure has failed
    """
    type: Literal[AlertDataTypes.PROCEDURE_FAILED] = AlertDataTypes.PROCEDURE_FAILED
    data: AlertDataProcedureFailedInner

class AlertDataActionFailed(BaseModel):
    """
    An action has failed
    """
    type: Literal[AlertDataTypes.ACTION_FAILED] = AlertDataTypes.ACTION_FAILED
    data: AlertDataActionFailedInner

class AlertDataScheduleRun(BaseModel):
    """
    A schedule was run
    """
    type: Literal[AlertDataTypes.SCHEDULE_RUN] = AlertDataTypes.SCHEDULE_RUN
    data: AlertDataScheduleRunInner

class AlertDataCustom(BaseModel):
    """
    Custom header / body.
    Produced using `/execute/SendAlert`
    """
    type: Literal[AlertDataTypes.CUSTOM] = AlertDataTypes.CUSTOM
    data: AlertDataCustomInner

# The variants of data related to the alert.
AlertData = Union[AlertDataNone, AlertDataTest, AlertDataServerUnreachable, AlertDataServerCpu, AlertDataServerMem, AlertDataServerDisk, AlertDataServerVersionMismatch, AlertDataContainerStateChange, AlertDataDeploymentImageUpdateAvailable, AlertDataDeploymentAutoUpdated, AlertDataStackStateChange, AlertDataStackImageUpdateAvailable, AlertDataStackAutoUpdated, AlertDataAwsBuilderTerminationFailed, AlertDataResourceSyncPendingUpdates, AlertDataBuildFailed, AlertDataRepoBuildFailed, AlertDataProcedureFailed, AlertDataActionFailed, AlertDataScheduleRun, AlertDataCustom]
class Alert(BaseModel):
    """
    Representation of an alert in the system.
    """
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[MongoId] = Field(alias="_id", default=None)
    """
    The Mongo ID of the alert.
    This field is de/serialized from/to JSON as
    `{ "_id": { "$oid": "..." }, ...(rest of serialized Alert) }`
    """
    ts: I64
    """
    Unix timestamp in milliseconds the alert was opened
    """
    resolved: bool
    """
    Whether the alert is already resolved
    """
    level: SeverityLevel
    """
    The severity of the alert
    """
    target: ResourceTarget
    """
    The target of the alert
    """
    data: AlertData
    """
    The data attached to the alert
    """
    resolved_ts: Optional[I64] = Field(default=None)
    """
    The timestamp of alert resolution
    """

GetAlertResponse = Alert

GetAlerterResponse = Alerter

class BuildActionState(BaseModel):
    building: bool

GetBuildActionStateResponse = BuildActionState

GetBuildResponse = Build

GetBuilderResponse = Builder

GetContainerLogResponse = Log

class DeploymentActionState(BaseModel):
    pulling: bool
    deploying: bool
    starting: bool
    restarting: bool
    pausing: bool
    unpausing: bool
    stopping: bool
    destroying: bool
    renaming: bool

GetDeploymentActionStateResponse = DeploymentActionState

GetDeploymentLogResponse = Log

GetDeploymentResponse = Deployment

class ContainerStats(BaseModel):
    name: str
    cpu_perc: str
    mem_perc: str
    mem_usage: str
    net_io: str
    block_io: str
    pids: str

GetDeploymentStatsResponse = ContainerStats

GetDockerRegistryAccountResponse = DockerRegistryAccount

GetGitProviderAccountResponse = GitProviderAccount

GetPermissionResponse = PermissionLevelAndSpecifics

class ProcedureActionState(BaseModel):
    running: bool

GetProcedureActionStateResponse = ProcedureActionState

GetProcedureResponse = Procedure

class RepoActionState(BaseModel):
    cloning: bool
    """
    Whether Repo currently cloning on the attached Server
    """
    pulling: bool
    """
    Whether Repo currently pulling on the attached Server
    """
    building: bool
    """
    Whether Repo currently building using the attached Builder.
    """
    renaming: bool
    """
    Whether Repo currently renaming.
    """

GetRepoActionStateResponse = RepoActionState

class RepoConfig(BaseModel):
    server_id: Optional[str] = Field(default=None)
    """
    The server to clone the repo on.
    """
    builder_id: Optional[str] = Field(default=None)
    """
    Attach a builder to 'build' the repo.
    """
    git_provider: str
    """
    The git provider domain. Default: github.com
    """
    git_https: bool
    """
    Whether to use https to clone the repo (versus http). Default: true
    
    Note. Komodo does not currently support cloning repos via ssh.
    """
    git_account: Optional[str] = Field(default=None)
    """
    The git account used to access private repos.
    Passing empty string can only clone public repos.
    
    Note. A token for the account must be available in the core config or the builder server's periphery config
    for the configured git provider.
    """
    repo: Optional[str] = Field(default=None)
    """
    The github repo to clone.
    """
    branch: str
    """
    The repo branch.
    """
    commit: Optional[str] = Field(default=None)
    """
    Optionally set a specific commit hash.
    """
    path: Optional[str] = Field(default=None)
    """
    Explicitly specify the folder to clone the repo in.
    - If absolute (has leading '/')
    - Used directly as the path
    - If relative
    - Taken relative to Periphery `repo_dir` (ie `${root_directory}/repos`)
    """
    webhook_enabled: bool
    """
    Whether incoming webhooks actually trigger action.
    """
    webhook_secret: Optional[str] = Field(default=None)
    """
    Optionally provide an alternate webhook secret for this repo.
    If its an empty string, use the default secret from the config.
    """
    on_clone: Optional[SystemCommand] = Field(default=None)
    """
    Command to be run after the repo is cloned.
    The path is relative to the root of the repo.
    """
    on_pull: Optional[SystemCommand] = Field(default=None)
    """
    Command to be run after the repo is pulled.
    The path is relative to the root of the repo.
    """
    links: Optional[List[str]] = Field(default=None)
    """
    Configure quick links that are displayed in the resource header
    """
    environment: Optional[str] = Field(default=None)
    """
    The environment variables passed to the compose file.
    They will be written to path defined in env_file_path,
    which is given relative to the run directory.
    
    If it is empty, no file will be written.
    """
    env_file_path: str
    """
    The name of the written environment file before `docker compose up`.
    Relative to the repo root.
    Default: .env
    """
    skip_secret_interp: Optional[bool] = Field(default=None)
    """
    Whether to skip secret interpolation into the repo environment variable file.
    """

class RepoInfo(BaseModel):
    last_pulled_at: Optional[I64] = Field(default=None)
    """
    When repo was last pulled
    """
    last_built_at: Optional[I64] = Field(default=None)
    """
    When repo was last built
    """
    built_hash: Optional[str] = Field(default=None)
    """
    Latest built short commit hash, or null.
    """
    built_message: Optional[str] = Field(default=None)
    """
    Latest built commit message, or null. Only for repo based stacks
    """
    latest_hash: Optional[str] = Field(default=None)
    """
    Latest remote short commit hash, or null.
    """
    latest_message: Optional[str] = Field(default=None)
    """
    Latest remote commit message, or null
    """

Repo = Resource[RepoConfig, RepoInfo]

GetRepoResponse = Repo

class ResourceSyncActionState(BaseModel):
    syncing: bool
    """
    Whether sync currently syncing
    """

GetResourceSyncActionStateResponse = ResourceSyncActionState

class ResourceSyncConfig(BaseModel):
    """
    The sync configuration.
    """
    linked_repo: Optional[str] = Field(default=None)
    """
    Choose a Komodo Repo (Resource) to source the sync files.
    """
    git_provider: str
    """
    The git provider domain. Default: github.com
    """
    git_https: bool
    """
    Whether to use https to clone the repo (versus http). Default: true
    
    Note. Komodo does not currently support cloning repos via ssh.
    """
    repo: Optional[str] = Field(default=None)
    """
    The Github repo used as the source of the build.
    """
    branch: str
    """
    The branch of the repo.
    """
    commit: Optional[str] = Field(default=None)
    """
    Optionally set a specific commit hash.
    """
    git_account: Optional[str] = Field(default=None)
    """
    The git account used to access private repos.
    Passing empty string can only clone public repos.
    
    Note. A token for the account must be available in the core config or the builder server's periphery config
    for the configured git provider.
    """
    webhook_enabled: bool
    """
    Whether incoming webhooks actually trigger action.
    """
    webhook_secret: Optional[str] = Field(default=None)
    """
    Optionally provide an alternate webhook secret for this sync.
    If its an empty string, use the default secret from the config.
    """
    files_on_host: Optional[bool] = Field(default=None)
    """
    Files are available on the Komodo Core host.
    Specify the file / folder with [ResourceSyncConfig::resource_path].
    """
    resource_path: Optional[List[str]] = Field(default=None)
    """
    The path of the resource file(s) to sync.
    - If Files on Host, this is relative to the configured `sync_directory` in core config.
    - If Git Repo based, this is relative to the root of the repo.
    Can be a specific file, or a directory containing multiple files / folders.
    See [https://komo.do/docs/sync-resources](https://komo.do/docs/sync-resources) for more information.
    """
    managed: Optional[bool] = Field(default=None)
    """
    Enable "pushes" to the file,
    which exports resources matching tags to single file.
    - If using `files_on_host`, it is stored in the file_contents, which must point to a .toml file path (it will be created if it doesn't exist).
    - If using `file_contents`, it is stored in the database.
    When using this, "delete" mode is always enabled.
    """
    delete: Optional[bool] = Field(default=None)
    """
    Whether sync should delete resources
    not declared in the resource files
    """
    include_resources: bool
    """
    Whether sync should include resources.
    Default: true
    """
    match_tags: Optional[List[str]] = Field(default=None)
    """
    When using `managed` resource sync, will only export resources
    matching all of the given tags. If none, will match all resources.
    """
    include_variables: Optional[bool] = Field(default=None)
    """
    Whether sync should include variables.
    """
    include_user_groups: Optional[bool] = Field(default=None)
    """
    Whether sync should include user groups.
    """
    pending_alert: bool
    """
    Whether sync should send alert when it enters Pending state.
    Default: true
    """
    file_contents: Optional[str] = Field(default=None)
    """
    Manage the file contents in the UI.
    """

class DiffDataCreateInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Create` of the `DiffData` Rust enum
    """
    name: Optional[str] = Field(default=None)
    """
    The name of resource to create
    """
    proposed: str
    """
    The proposed resource to create in TOML
    """

class DiffDataUpdateInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Update` of the `DiffData` Rust enum
    """
    proposed: str
    """
    The proposed TOML
    """
    current: str
    """
    The current TOML
    """

class DiffDataDeleteInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Delete` of the `DiffData` Rust enum
    """
    current: str
    """
    The current TOML of the resource to delete
    """

class DiffDataTypes(str, Enum):
    CREATE = "Create"
    UPDATE = "Update"
    DELETE = "Delete"

class DiffDataCreate(BaseModel):
    """
    Resource will be created
    """
    type: Literal[DiffDataTypes.CREATE] = DiffDataTypes.CREATE
    data: DiffDataCreateInner

class DiffDataUpdate(BaseModel):
    type: Literal[DiffDataTypes.UPDATE] = DiffDataTypes.UPDATE
    data: DiffDataUpdateInner

class DiffDataDelete(BaseModel):
    type: Literal[DiffDataTypes.DELETE] = DiffDataTypes.DELETE
    data: DiffDataDeleteInner

DiffData = Union[DiffDataCreate, DiffDataUpdate, DiffDataDelete]
class ResourceDiff(BaseModel):
    target: ResourceTarget
    """
    The resource target.
    The target id will be empty if "Create" ResourceDiffType.
    """
    data: DiffData
    """
    The data associated with the diff.
    """

class SyncDeployUpdate(BaseModel):
    to_deploy: int
    """
    Resources to deploy
    """
    log: str
    """
    A readable log of all the changes to be applied
    """

class SyncFileContents(BaseModel):
    resource_path: Optional[str] = Field(default=None)
    """
    The base resource path.
    """
    path: str
    """
    The path of the file / error path relative to the resource path.
    """
    contents: str
    """
    The contents of the file
    """

class ResourceSyncInfo(BaseModel):
    last_sync_ts: Optional[I64] = Field(default=None)
    """
    Unix timestamp of last applied sync
    """
    last_sync_hash: Optional[str] = Field(default=None)
    """
    Short commit hash of last applied sync
    """
    last_sync_message: Optional[str] = Field(default=None)
    """
    Commit message of last applied sync
    """
    resource_updates: Optional[List[ResourceDiff]] = Field(default=None)
    """
    The list of pending updates to resources
    """
    variable_updates: Optional[List[DiffData]] = Field(default=None)
    """
    The list of pending updates to variables
    """
    user_group_updates: Optional[List[DiffData]] = Field(default=None)
    """
    The list of pending updates to user groups
    """
    pending_deploy: Optional[SyncDeployUpdate] = Field(default=None)
    """
    The list of pending deploys to resources.
    """
    pending_error: Optional[str] = Field(default=None)
    """
    If there is an error, it will be stored here
    """
    pending_hash: Optional[str] = Field(default=None)
    """
    The commit hash which produced these pending updates.
    """
    pending_message: Optional[str] = Field(default=None)
    """
    The commit message which produced these pending updates.
    """
    remote_contents: Optional[List[SyncFileContents]] = Field(default=None)
    """
    The current sync files
    """
    remote_errors: Optional[List[SyncFileContents]] = Field(default=None)
    """
    Any read errors in files by path
    """

ResourceSync = Resource[ResourceSyncConfig, ResourceSyncInfo]

GetResourceSyncResponse = ResourceSync

class ServerActionState(BaseModel):
    """
    Current pending actions on the server.
    """
    pruning_networks: bool
    """
    Server currently pruning networks
    """
    pruning_containers: bool
    """
    Server currently pruning containers
    """
    pruning_images: bool
    """
    Server currently pruning images
    """
    pruning_volumes: bool
    """
    Server currently pruning volumes
    """
    pruning_builders: bool
    """
    Server currently pruning docker builders
    """
    pruning_buildx: bool
    """
    Server currently pruning builx cache
    """
    pruning_system: bool
    """
    Server currently pruning system
    """
    starting_containers: bool
    """
    Server currently starting containers.
    """
    restarting_containers: bool
    """
    Server currently restarting containers.
    """
    pausing_containers: bool
    """
    Server currently pausing containers.
    """
    unpausing_containers: bool
    """
    Server currently unpausing containers.
    """
    stopping_containers: bool
    """
    Server currently stopping containers.
    """

GetServerActionStateResponse = ServerActionState

class ServerConfig(BaseModel):
    """
    Server configuration.
    """
    address: str
    """
    The http address of the periphery client.
    Default: http://localhost:8120
    """
    external_address: Optional[str] = Field(default=None)
    """
    The address to use with links for containers on the server.
    If empty, will use the 'address' for links.
    """
    region: Optional[str] = Field(default=None)
    """
    An optional region label
    """
    enabled: bool
    """
    Whether a server is enabled.
    If a server is disabled,
    you won't be able to perform any actions on it or see deployment's status.
    Default: false
    """
    timeout_seconds: I64
    """
    The timeout used to reach the server in seconds.
    default: 2
    """
    passkey: Optional[str] = Field(default=None)
    """
    An optional override passkey to use
    to authenticate with periphery agent.
    If this is empty, will use passkey in core config.
    """
    ignore_mounts: Optional[List[str]] = Field(default=None)
    """
    Sometimes the system stats reports a mount path that is not desired.
    Use this field to filter it out from the report.
    """
    stats_monitoring: bool
    """
    Whether to monitor any server stats beyond passing health check.
    default: true
    """
    auto_prune: bool
    """
    Whether to trigger 'docker image prune -a -f' every 24 hours.
    default: true
    """
    links: Optional[List[str]] = Field(default=None)
    """
    Configure quick links that are displayed in the resource header
    """
    send_unreachable_alerts: bool
    """
    Whether to send alerts about the servers reachability
    """
    send_cpu_alerts: bool
    """
    Whether to send alerts about the servers CPU status
    """
    send_mem_alerts: bool
    """
    Whether to send alerts about the servers MEM status
    """
    send_disk_alerts: bool
    """
    Whether to send alerts about the servers DISK status
    """
    send_version_mismatch_alerts: bool
    """
    Whether to send alerts about the servers version mismatch with core
    """
    cpu_warning: float
    """
    The percentage threshhold which triggers WARNING state for CPU.
    """
    cpu_critical: float
    """
    The percentage threshhold which triggers CRITICAL state for CPU.
    """
    mem_warning: float
    """
    The percentage threshhold which triggers WARNING state for MEM.
    """
    mem_critical: float
    """
    The percentage threshhold which triggers CRITICAL state for MEM.
    """
    disk_warning: float
    """
    The percentage threshhold which triggers WARNING state for DISK.
    """
    disk_critical: float
    """
    The percentage threshhold which triggers CRITICAL state for DISK.
    """
    maintenance_windows: Optional[List[MaintenanceWindow]] = Field(default=None)
    """
    Scheduled maintenance windows during which alerts will be suppressed.
    """

Server = Resource[ServerConfig, None]

GetServerResponse = Server

class StackActionState(BaseModel):
    pulling: bool
    deploying: bool
    starting: bool
    restarting: bool
    pausing: bool
    unpausing: bool
    stopping: bool
    destroying: bool

GetStackActionStateResponse = StackActionState

GetStackLogResponse = Log

class StackFileRequires(str, Enum):
    REDEPLOY = "Redeploy"
    """
    Diff requires service redeploy.
    """
    RESTART = "Restart"
    """
    Diff requires service restart
    """
    NONE = "None"
    """
    Diff requires no action. Default.
    """
class StackFileDependency(BaseModel):
    """
    Configure additional file dependencies of the Stack.
    """
    path: str
    """
    Specify the file
    """
    services: Optional[List[str]] = Field(default=None)
    """
    Specify specific service/s
    """
    requires: Optional[StackFileRequires] = Field(default=None)
    """
    Specify
    """

class StackConfig(BaseModel):
    """
    The compose file configuration.
    """
    server_id: Optional[str] = Field(default=None)
    """
    The server to deploy the stack on.
    """
    links: Optional[List[str]] = Field(default=None)
    """
    Configure quick links that are displayed in the resource header
    """
    project_name: Optional[str] = Field(default=None)
    """
    Optionally specify a custom project name for the stack.
    If this is empty string, it will default to the stack name.
    Used with `docker compose -p {project_name}`.
    
    Note. Can be used to import pre-existing stacks.
    """
    auto_pull: bool
    """
    Whether to automatically `compose pull` before redeploying stack.
    Ensured latest images are deployed.
    Will fail if the compose file specifies a locally build image.
    """
    run_build: Optional[bool] = Field(default=None)
    """
    Whether to `docker compose build` before `compose down` / `compose up`.
    Combine with build_extra_args for custom behaviors.
    """
    poll_for_updates: Optional[bool] = Field(default=None)
    """
    Whether to poll for any updates to the images.
    """
    auto_update: Optional[bool] = Field(default=None)
    """
    Whether to automatically redeploy when
    newer images are found. Will implicitly
    enable `poll_for_updates`, you don't need to
    enable both.
    """
    auto_update_all_services: Optional[bool] = Field(default=None)
    """
    If auto update is enabled, Komodo will
    by default only update the specific services
    with image updates. If this parameter is set to true,
    Komodo will redeploy the whole Stack (all services).
    """
    destroy_before_deploy: Optional[bool] = Field(default=None)
    """
    Whether to run `docker compose down` before `compose up`.
    """
    skip_secret_interp: Optional[bool] = Field(default=None)
    """
    Whether to skip secret interpolation into the stack environment variables.
    """
    linked_repo: Optional[str] = Field(default=None)
    """
    Choose a Komodo Repo (Resource) to source the compose files.
    """
    git_provider: str
    """
    The git provider domain. Default: github.com
    """
    git_https: bool
    """
    Whether to use https to clone the repo (versus http). Default: true
    
    Note. Komodo does not currently support cloning repos via ssh.
    """
    git_account: Optional[str] = Field(default=None)
    """
    The git account used to access private repos.
    Passing empty string can only clone public repos.
    
    Note. A token for the account must be available in the core config or the builder server's periphery config
    for the configured git provider.
    """
    repo: Optional[str] = Field(default=None)
    """
    The repo used as the source of the build.
    {namespace}/{repo_name}
    """
    branch: str
    """
    The branch of the repo.
    """
    commit: Optional[str] = Field(default=None)
    """
    Optionally set a specific commit hash.
    """
    clone_path: Optional[str] = Field(default=None)
    """
    Optionally set a specific clone path
    """
    reclone: Optional[bool] = Field(default=None)
    """
    By default, the Stack will `git pull` the repo after it is first cloned.
    If this option is enabled, the repo folder will be deleted and recloned instead.
    """
    webhook_enabled: bool
    """
    Whether incoming webhooks actually trigger action.
    """
    webhook_secret: Optional[str] = Field(default=None)
    """
    Optionally provide an alternate webhook secret for this stack.
    If its an empty string, use the default secret from the config.
    """
    webhook_force_deploy: Optional[bool] = Field(default=None)
    """
    By default, the Stack will `DeployStackIfChanged`.
    If this option is enabled, will always run `DeployStack` without diffing.
    """
    files_on_host: Optional[bool] = Field(default=None)
    """
    If this is checked, the stack will source the files on the host.
    Use `run_directory` and `file_paths` to specify the path on the host.
    This is useful for those who wish to setup their files on the host,
    rather than defining the contents in UI or in a git repo.
    """
    run_directory: Optional[str] = Field(default=None)
    """
    Directory to change to (`cd`) before running `docker compose up -d`.
    """
    file_paths: Optional[List[str]] = Field(default=None)
    """
    Add paths to compose files, relative to the run path.
    If this is empty, will use file `compose.yaml`.
    """
    env_file_path: str
    """
    The name of the written environment file before `docker compose up`.
    Relative to the run directory root.
    Default: .env
    """
    additional_env_files: Optional[List[str]] = Field(default=None)
    """
    Add additional env files to attach with `--env-file`.
    Relative to the run directory root.
    
    Note. It is already included as an `additional_file`.
    Don't add it again there.
    """
    config_files: Optional[List[StackFileDependency]] = Field(default=None)
    """
    Add additional config files either in repo or on host to track.
    Can add any files associated with the stack to enable editing them in the UI.
    Doing so will also include diffing these when deciding to deploy in `DeployStackIfChanged`.
    Relative to the run directory.
    
    Note. If the config file is .env and should be included in compose command
    using `--env-file`, add it to `additional_env_files` instead.
    """
    send_alerts: bool
    """
    Whether to send StackStateChange alerts for this stack.
    """
    registry_provider: Optional[str] = Field(default=None)
    """
    Used with `registry_account` to login to a registry before docker compose up.
    """
    registry_account: Optional[str] = Field(default=None)
    """
    Used with `registry_provider` to login to a registry before docker compose up.
    """
    pre_deploy: Optional[SystemCommand] = Field(default=None)
    """
    The optional command to run before the Stack is deployed.
    """
    post_deploy: Optional[SystemCommand] = Field(default=None)
    """
    The optional command to run after the Stack is deployed.
    """
    extra_args: Optional[List[str]] = Field(default=None)
    """
    The extra arguments to pass after `docker compose up -d`.
    If empty, no extra arguments will be passed.
    """
    build_extra_args: Optional[List[str]] = Field(default=None)
    """
    The extra arguments to pass after `docker compose build`.
    If empty, no extra build arguments will be passed.
    Only used if `run_build: true`
    """
    ignore_services: Optional[List[str]] = Field(default=None)
    """
    Ignore certain services declared in the compose file when checking
    the stack status. For example, an init service might be exited, but the
    stack should be healthy. This init service should be in `ignore_services`
    """
    file_contents: Optional[str] = Field(default=None)
    """
    The contents of the file directly, for management in the UI.
    If this is empty, it will fall back to checking git config for
    repo based compose file.
    Supports variable / secret interpolation.
    """
    environment: Optional[str] = Field(default=None)
    """
    The environment variables passed to the compose file.
    They will be written to path defined in env_file_path,
    which is given relative to the run directory.
    
    If it is empty, no file will be written.
    """

class FileContents(BaseModel):
    path: str
    """
    The path to the file
    """
    contents: str
    """
    The contents of the file
    """

class StackServiceNames(BaseModel):
    service_name: str
    """
    The name of the service
    """
    container_name: str
    """
    Will either be the declared container_name in the compose file,
    or a pattern to match auto named containers.
    
    Auto named containers are composed of three parts:
    
    1. The name of the compose project (top level name field of compose file).
    This defaults to the name of the parent folder of the compose file.
    Komodo will always set it to be the name of the stack, but imported stacks
    will have a different name.
    2. The service name
    3. The replica number
    
    Example: stacko-mongo-1.
    
    This stores only 1. and 2., ie stacko-mongo.
    Containers will be matched via regex like `^container_name-?[0-9]*$``
    """
    image: Optional[str] = Field(default=None)
    """
    The services image.
    """

class StackRemoteFileContents(BaseModel):
    """
    Same as [FileContents] with some extra
    info specific to Stacks.
    """
    path: str
    """
    The path to the file
    """
    contents: str
    """
    The contents of the file
    """
    services: Optional[List[str]] = Field(default=None)
    """
    The services depending on this file,
    or empty for global requirement (eg all compose files and env files).
    """
    requires: Optional[StackFileRequires] = Field(default=None)
    """
    Whether diff requires Redeploy / Restart / None
    """

class StackInfo(BaseModel):
    missing_files: Optional[List[str]] = Field(default=None)
    """
    If any of the expected compose / additional files are missing in the repo,
    they will be stored here.
    """
    deployed_project_name: Optional[str] = Field(default=None)
    """
    The deployed project name.
    This is updated whenever Komodo successfully deploys the stack.
    If it is present, Komodo will use it for actions over other options,
    to ensure control is maintained after changing the project name (there is no rename compose project api).
    """
    deployed_hash: Optional[str] = Field(default=None)
    """
    Deployed short commit hash, or null. Only for repo based stacks.
    """
    deployed_message: Optional[str] = Field(default=None)
    """
    Deployed commit message, or null. Only for repo based stacks
    """
    deployed_contents: Optional[List[FileContents]] = Field(default=None)
    """
    The deployed compose / additional file contents.
    This is updated whenever Komodo successfully deploys the stack.
    """
    deployed_services: Optional[List[StackServiceNames]] = Field(default=None)
    """
    The deployed service names.
    This is updated whenever it is empty, or deployed contents is updated.
    """
    deployed_config: Optional[str] = Field(default=None)
    """
    The output of `docker compose config`.
    This is updated whenever Komodo successfully deploys the stack.
    """
    latest_services: Optional[List[StackServiceNames]] = Field(default=None)
    """
    The latest service names.
    This is updated whenever the stack cache refreshes, using the latest file contents (either db defined or remote).
    """
    remote_contents: Optional[List[StackRemoteFileContents]] = Field(default=None)
    """
    The remote compose / additional file contents, whether on host or in repo.
    This is updated whenever Komodo refreshes the stack cache.
    It will be empty if the file is defined directly in the stack config.
    """
    remote_errors: Optional[List[FileContents]] = Field(default=None)
    """
    If there was an error in getting the remote contents, it will be here.
    """
    latest_hash: Optional[str] = Field(default=None)
    """
    Latest commit hash, or null
    """
    latest_message: Optional[str] = Field(default=None)
    """
    Latest commit message, or null
    """

Stack = Resource[StackConfig, StackInfo]

GetStackResponse = Stack

class SystemInformation(BaseModel):
    """
    System information of a server
    """
    name: Optional[str] = Field(default=None)
    """
    The system name
    """
    os: Optional[str] = Field(default=None)
    """
    The system long os version
    """
    kernel: Optional[str] = Field(default=None)
    """
    System's kernel version
    """
    core_count: Optional[int] = Field(default=None)
    """
    Physical core count
    """
    host_name: Optional[str] = Field(default=None)
    """
    System hostname based off DNS
    """
    cpu_brand: str
    """
    The CPU's brand
    """
    terminals_disabled: bool
    """
    Whether terminals are disabled on this Periphery server
    """
    container_exec_disabled: bool
    """
    Whether container exec is disabled on this Periphery server
    """

GetSystemInformationResponse = SystemInformation

class SystemLoadAverage(BaseModel):
    one: float
    """
    1m load average
    """
    five: float
    """
    5m load average
    """
    fifteen: float
    """
    15m load average
    """

class SingleDiskUsage(BaseModel):
    """
    Info for a single disk mounted on the system.
    """
    mount: str
    """
    The mount point of the disk
    """
    file_system: str
    """
    Detected file system
    """
    used_gb: float
    """
    Used portion of the disk in GB
    """
    total_gb: float
    """
    Total size of the disk in GB
    """

class Timelength(str, Enum):
    ONESECOND = "1-sec"
    """
    `1-sec`
    """
    FIVESECONDS = "5-sec"
    """
    `5-sec`
    """
    TENSECONDS = "10-sec"
    """
    `10-sec`
    """
    FIFTEENSECONDS = "15-sec"
    """
    `15-sec`
    """
    THIRTYSECONDS = "30-sec"
    """
    `30-sec`
    """
    ONEMINUTE = "1-min"
    """
    `1-min`
    """
    TWOMINUTES = "2-min"
    """
    `2-min`
    """
    FIVEMINUTES = "5-min"
    """
    `5-min`
    """
    TENMINUTES = "10-min"
    """
    `10-min`
    """
    FIFTEENMINUTES = "15-min"
    """
    `15-min`
    """
    THIRTYMINUTES = "30-min"
    """
    `30-min`
    """
    ONEHOUR = "1-hr"
    """
    `1-hr`
    """
    TWOHOURS = "2-hr"
    """
    `2-hr`
    """
    SIXHOURS = "6-hr"
    """
    `6-hr`
    """
    EIGHTHOURS = "8-hr"
    """
    `8-hr`
    """
    TWELVEHOURS = "12-hr"
    """
    `12-hr`
    """
    ONEDAY = "1-day"
    """
    `1-day`
    """
    THREEDAY = "3-day"
    """
    `3-day`
    """
    ONEWEEK = "1-wk"
    """
    `1-wk`
    """
    TWOWEEKS = "2-wk"
    """
    `2-wk`
    """
    THIRTYDAYS = "30-day"
    """
    `30-day`
    """
class SystemStats(BaseModel):
    """
    Realtime system stats data.
    """
    cpu_perc: float
    """
    Cpu usage percentage
    """
    load_average: Optional[SystemLoadAverage] = Field(default=None)
    """
    Load average (1m, 5m, 15m)
    """
    mem_free_gb: Optional[float] = Field(default=None)
    """
    [1.15.9+]
    Free memory in GB.
    This is really the 'Free' memory, not the 'Available' memory.
    It may be different than mem_total_gb - mem_used_gb.
    """
    mem_used_gb: float
    """
    Used memory in GB. 'Total' - 'Available' (not free) memory.
    """
    mem_total_gb: float
    """
    Total memory in GB
    """
    disks: List[SingleDiskUsage]
    """
    Breakdown of individual disks, ie their usages, sizes, and mount points
    """
    network_ingress_bytes: Optional[float] = Field(default=None)
    """
    Network ingress usage in MB
    """
    network_egress_bytes: Optional[float] = Field(default=None)
    """
    Network egress usage in MB
    """
    polling_rate: Timelength
    """
    The rate the system stats are being polled from the system
    """
    refresh_ts: I64
    """
    Unix timestamp in milliseconds when stats were last polled
    """
    refresh_list_ts: I64
    """
    Unix timestamp in milliseconds when disk list was last refreshed
    """

GetSystemStatsResponse = SystemStats

class TagColor(str, Enum):
    LIGHTSLATE = "LightSlate"
    SLATE = "Slate"
    DARKSLATE = "DarkSlate"
    LIGHTRED = "LightRed"
    RED = "Red"
    DARKRED = "DarkRed"
    LIGHTORANGE = "LightOrange"
    ORANGE = "Orange"
    DARKORANGE = "DarkOrange"
    LIGHTAMBER = "LightAmber"
    AMBER = "Amber"
    DARKAMBER = "DarkAmber"
    LIGHTYELLOW = "LightYellow"
    YELLOW = "Yellow"
    DARKYELLOW = "DarkYellow"
    LIGHTLIME = "LightLime"
    LIME = "Lime"
    DARKLIME = "DarkLime"
    LIGHTGREEN = "LightGreen"
    GREEN = "Green"
    DARKGREEN = "DarkGreen"
    LIGHTEMERALD = "LightEmerald"
    EMERALD = "Emerald"
    DARKEMERALD = "DarkEmerald"
    LIGHTTEAL = "LightTeal"
    TEAL = "Teal"
    DARKTEAL = "DarkTeal"
    LIGHTCYAN = "LightCyan"
    CYAN = "Cyan"
    DARKCYAN = "DarkCyan"
    LIGHTSKY = "LightSky"
    SKY = "Sky"
    DARKSKY = "DarkSky"
    LIGHTBLUE = "LightBlue"
    BLUE = "Blue"
    DARKBLUE = "DarkBlue"
    LIGHTINDIGO = "LightIndigo"
    INDIGO = "Indigo"
    DARKINDIGO = "DarkIndigo"
    LIGHTVIOLET = "LightViolet"
    VIOLET = "Violet"
    DARKVIOLET = "DarkViolet"
    LIGHTPURPLE = "LightPurple"
    PURPLE = "Purple"
    DARKPURPLE = "DarkPurple"
    LIGHTFUCHSIA = "LightFuchsia"
    FUCHSIA = "Fuchsia"
    DARKFUCHSIA = "DarkFuchsia"
    LIGHTPINK = "LightPink"
    PINK = "Pink"
    DARKPINK = "DarkPink"
    LIGHTROSE = "LightRose"
    ROSE = "Rose"
    DARKROSE = "DarkRose"
class Tag(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[MongoId] = Field(alias="_id", default=None)
    """
    The Mongo ID of the tag.
    This field is de/serialized from/to JSON as
    `{ "_id": { "$oid": "..." }, ...(rest of serialized Tag) }`
    """
    name: str
    owner: Optional[str] = Field(default=None)
    color: Optional[TagColor] = Field(default=None)
    """
    Hex color code with alpha for UI display
    """

GetTagResponse = Tag

GetUpdateResponse = Update

class UserGroup(BaseModel):
    """
    Permission users at the group level.
    
    All users that are part of a group inherit the group's permissions.
    A user can be a part of multiple groups. A user's permission on a particular resource
    will be resolved to be the maximum permission level between the user's own permissions and
    any groups they are a part of.
    """
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[MongoId] = Field(alias="_id", default=None)
    """
    The Mongo ID of the UserGroup.
    This field is de/serialized from/to JSON as
    `{ "_id": { "$oid": "..." }, ...(rest of serialized User) }`
    """
    name: str
    """
    A name for the user group
    """
    everyone: Optional[bool] = Field(default=None)
    """
    Whether all users will implicitly have the permissions in this group.
    """
    users: Optional[List[str]] = Field(default=None)
    """
    User ids of group members
    """
    all: Optional[Mapping[ResourceTargetTypes, PermissionLevelAndSpecifics]] = Field(default=None)
    """
    Give the user group elevated permissions on all resources of a certain type
    """
    updated_at: Optional[I64] = Field(default=None)
    """
    Unix time (ms) when user group last updated
    """

GetUserGroupResponse = UserGroup

GetUserResponse = User

GetVariableResponse = Variable

class ContainerStateStatusEnum(str, Enum):
    RUNNING = "running"
    CREATED = "created"
    PAUSED = "paused"
    RESTARTING = "restarting"
    EXITED = "exited"
    REMOVING = "removing"
    DEAD = "dead"
    EMPTY = ""
class HealthStatusEnum(str, Enum):
    EMPTY = ""
    NONE = "none"
    STARTING = "starting"
    HEALTHY = "healthy"
    UNHEALTHY = "unhealthy"
class HealthcheckResult(BaseModel):
    """
    HealthcheckResult stores information about a single run of a healthcheck probe
    """
    model_config = ConfigDict(populate_by_name=True)

    start: Optional[str] = Field(alias="Start", default=None)
    """
    Date and time at which this check started in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
    """
    end: Optional[str] = Field(alias="End", default=None)
    """
    Date and time at which this check ended in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
    """
    exit_code: Optional[I64] = Field(alias="ExitCode", default=None)
    """
    ExitCode meanings:  - `0` healthy - `1` unhealthy - `2` reserved (considered unhealthy) - other values: error running probe
    """
    output: Optional[str] = Field(alias="Output", default=None)
    """
    Output from last check
    """

class ContainerHealth(BaseModel):
    """
    Health stores information about the container's healthcheck results.
    """
    model_config = ConfigDict(populate_by_name=True)

    status: Optional[HealthStatusEnum] = Field(alias="Status", default=None)
    """
    Status is one of `none`, `starting`, `healthy` or `unhealthy`  - \"none\"      Indicates there is no healthcheck - \"starting\"  Starting indicates that the container is not yet ready - \"healthy\"   Healthy indicates that the container is running correctly - \"unhealthy\" Unhealthy indicates that the container has a problem
    """
    failing_streak: Optional[I64] = Field(alias="FailingStreak", default=None)
    """
    FailingStreak is the number of consecutive failures
    """
    log: Optional[List[HealthcheckResult]] = Field(alias="Log", default=None)
    """
    Log contains the last few results (oldest first)
    """

class ContainerState(BaseModel):
    """
    ContainerState stores container's running state. It's part of ContainerJSONBase and will be returned by the \"inspect\" command.
    """
    model_config = ConfigDict(populate_by_name=True)

    status: Optional[ContainerStateStatusEnum] = Field(alias="Status", default=None)
    """
    String representation of the container state. Can be one of \"created\", \"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\".
    """
    running: Optional[bool] = Field(alias="Running", default=None)
    """
    Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container's state is \"running\".
    """
    paused: Optional[bool] = Field(alias="Paused", default=None)
    """
    Whether this container is paused.
    """
    restarting: Optional[bool] = Field(alias="Restarting", default=None)
    """
    Whether this container is restarting.
    """
    oom_killed: Optional[bool] = Field(alias="OOMKilled", default=None)
    """
    Whether a process within this container has been killed because it ran out of memory since the container was last started.
    """
    dead: Optional[bool] = Field(alias="Dead", default=None)
    pid: Optional[I64] = Field(alias="Pid", default=None)
    """
    The process ID of this container
    """
    exit_code: Optional[I64] = Field(alias="ExitCode", default=None)
    """
    The last exit code of this container
    """
    error: Optional[str] = Field(alias="Error", default=None)
    started_at: Optional[str] = Field(alias="StartedAt", default=None)
    """
    The time when this container was last started.
    """
    finished_at: Optional[str] = Field(alias="FinishedAt", default=None)
    """
    The time when this container last exited.
    """
    health: Optional[ContainerHealth] = Field(alias="Health", default=None)

Usize = int

class ResourcesBlkioWeightDevice(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    path: Optional[str] = Field(alias="Path", default=None)
    weight: Optional[Usize] = Field(alias="Weight", default=None)

class ThrottleDevice(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    path: Optional[str] = Field(alias="Path", default=None)
    """
    Device path
    """
    rate: Optional[I64] = Field(alias="Rate", default=None)
    """
    Rate
    """

class DeviceMapping(BaseModel):
    """
    A device mapping between the host and container
    """
    model_config = ConfigDict(populate_by_name=True)

    path_on_host: Optional[str] = Field(alias="PathOnHost", default=None)
    path_in_container: Optional[str] = Field(alias="PathInContainer", default=None)
    cgroup_permissions: Optional[str] = Field(alias="CgroupPermissions", default=None)

class DeviceRequest(BaseModel):
    """
    A request for devices to be sent to device drivers
    """
    model_config = ConfigDict(populate_by_name=True)

    driver: Optional[str] = Field(alias="Driver", default=None)
    count: Optional[I64] = Field(alias="Count", default=None)
    device_ids: Optional[List[str]] = Field(alias="DeviceIDs", default=None)
    capabilities: Optional[List[List[str]]] = Field(alias="Capabilities", default=None)
    """
    A list of capabilities; an OR list of AND lists of capabilities.
    """
    options: Optional[Dict[str, str]] = Field(alias="Options", default=None)
    """
    Driver-specific options, specified as a key/value pairs. These options are passed directly to the driver.
    """

class ResourcesUlimits(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    name: Optional[str] = Field(alias="Name", default=None)
    """
    Name of ulimit
    """
    soft: Optional[I64] = Field(alias="Soft", default=None)
    """
    Soft limit
    """
    hard: Optional[I64] = Field(alias="Hard", default=None)
    """
    Hard limit
    """

class HostConfigLogConfig(BaseModel):
    """
    The logging configuration for this container
    """
    model_config = ConfigDict(populate_by_name=True)

    typ: Optional[str] = Field(alias="Type", default=None)
    config: Optional[Dict[str, str]] = Field(alias="Config", default=None)

class PortBinding(BaseModel):
    """
    PortBinding represents a binding between a host IP address and a host port.
    """
    model_config = ConfigDict(populate_by_name=True)

    host_ip: Optional[str] = Field(alias="HostIp", default=None)
    """
    Host IP address that the container's port is mapped to.
    """
    host_port: Optional[str] = Field(alias="HostPort", default=None)
    """
    Host port number that the container's port is mapped to.
    """

class RestartPolicyNameEnum(str, Enum):
    EMPTY = ""
    NO = "no"
    ALWAYS = "always"
    UNLESSSTOPPED = "unless-stopped"
    ONFAILURE = "on-failure"
class RestartPolicy(BaseModel):
    """
    The behavior to apply when the container exits. The default is not to restart.  An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server.
    """
    model_config = ConfigDict(populate_by_name=True)

    name: Optional[RestartPolicyNameEnum] = Field(alias="Name", default=None)
    """
    - Empty string means not to restart - `no` Do not automatically restart - `always` Always restart - `unless-stopped` Restart always except when the user has manually stopped the container - `on-failure` Restart only when the container exit code is non-zero
    """
    maximum_retry_count: Optional[I64] = Field(alias="MaximumRetryCount", default=None)
    """
    If `on-failure` is used, the number of times to retry before giving up.
    """

class MountTypeEnum(str, Enum):
    EMPTY = ""
    BIND = "bind"
    VOLUME = "volume"
    IMAGE = "image"
    TMPFS = "tmpfs"
    NPIPE = "npipe"
    CLUSTER = "cluster"
class MountBindOptionsPropagationEnum(str, Enum):
    EMPTY = ""
    PRIVATE = "private"
    RPRIVATE = "rprivate"
    SHARED = "shared"
    RSHARED = "rshared"
    SLAVE = "slave"
    RSLAVE = "rslave"
class MountBindOptions(BaseModel):
    """
    Optional configuration for the `bind` type.
    """
    model_config = ConfigDict(populate_by_name=True)

    propagation: Optional[MountBindOptionsPropagationEnum] = Field(alias="Propagation", default=None)
    """
    A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
    """
    non_recursive: Optional[bool] = Field(alias="NonRecursive", default=None)
    """
    Disable recursive bind mount.
    """
    create_mountpoint: Optional[bool] = Field(alias="CreateMountpoint", default=None)
    """
    Create mount point on host if missing
    """
    read_only_non_recursive: Optional[bool] = Field(alias="ReadOnlyNonRecursive", default=None)
    """
    Make the mount non-recursively read-only, but still leave the mount recursive (unless NonRecursive is set to `true` in conjunction).  Addded in v1.44, before that version all read-only mounts were non-recursive by default. To match the previous behaviour this will default to `true` for clients on versions prior to v1.44.
    """
    read_only_force_recursive: Optional[bool] = Field(alias="ReadOnlyForceRecursive", default=None)
    """
    Raise an error if the mount cannot be made recursively read-only.
    """

class MountVolumeOptionsDriverConfig(BaseModel):
    """
    Map of driver specific options
    """
    model_config = ConfigDict(populate_by_name=True)

    name: Optional[str] = Field(alias="Name", default=None)
    """
    Name of the driver to use to create the volume.
    """
    options: Optional[Dict[str, str]] = Field(alias="Options", default=None)
    """
    key/value map of driver specific options.
    """

class MountVolumeOptions(BaseModel):
    """
    Optional configuration for the `volume` type.
    """
    model_config = ConfigDict(populate_by_name=True)

    no_copy: Optional[bool] = Field(alias="NoCopy", default=None)
    """
    Populate volume with data from the target.
    """
    labels: Optional[Dict[str, str]] = Field(alias="Labels", default=None)
    """
    User-defined key/value metadata.
    """
    driver_config: Optional[MountVolumeOptionsDriverConfig] = Field(alias="DriverConfig", default=None)
    subpath: Optional[str] = Field(alias="Subpath", default=None)
    """
    Source path inside the volume. Must be relative without any back traversals.
    """

class MountTmpfsOptions(BaseModel):
    """
    Optional configuration for the `tmpfs` type.
    """
    model_config = ConfigDict(populate_by_name=True)

    size_bytes: Optional[I64] = Field(alias="SizeBytes", default=None)
    """
    The size for the tmpfs mount in bytes.
    """
    mode: Optional[I64] = Field(alias="Mode", default=None)
    """
    The permission mode for the tmpfs mount in an integer.
    """

class ContainerMount(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    target: Optional[str] = Field(alias="Target", default=None)
    """
    Container path.
    """
    source: Optional[str] = Field(alias="Source", default=None)
    """
    Mount source (e.g. a volume name, a host path).
    """
    typ: Optional[MountTypeEnum] = Field(alias="Type", default=None)
    """
    The mount type. Available types:  - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container. - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed. - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs. - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container. - `cluster` a Swarm cluster volume
    """
    read_only: Optional[bool] = Field(alias="ReadOnly", default=None)
    """
    Whether the mount should be read-only.
    """
    consistency: Optional[str] = Field(alias="Consistency", default=None)
    """
    The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.
    """
    bind_options: Optional[MountBindOptions] = Field(alias="BindOptions", default=None)
    volume_options: Optional[MountVolumeOptions] = Field(alias="VolumeOptions", default=None)
    tmpfs_options: Optional[MountTmpfsOptions] = Field(alias="TmpfsOptions", default=None)

class HostConfigCgroupnsModeEnum(str, Enum):
    EMPTY = ""
    PRIVATE = "private"
    HOST = "host"
class HostConfigIsolationEnum(str, Enum):
    EMPTY = ""
    DEFAULT = "default"
    PROCESS = "process"
    HYPERV = "hyperv"
class HostConfig(BaseModel):
    """
    Container configuration that depends on the host we are running on
    """
    model_config = ConfigDict(populate_by_name=True)

    cpu_shares: Optional[I64] = Field(alias="CpuShares", default=None)
    """
    An integer value representing this container's relative CPU weight versus other containers.
    """
    memory: Optional[I64] = Field(alias="Memory", default=None)
    """
    Memory limit in bytes.
    """
    cgroup_parent: Optional[str] = Field(alias="CgroupParent", default=None)
    """
    Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.
    """
    blkio_weight: Optional[int] = Field(alias="BlkioWeight", default=None)
    """
    Block IO weight (relative weight).
    """
    blkio_weight_device: Optional[List[ResourcesBlkioWeightDevice]] = Field(alias="BlkioWeightDevice", default=None)
    """
    Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ```
    """
    blkio_device_read_bps: Optional[List[ThrottleDevice]] = Field(alias="BlkioDeviceReadBps", default=None)
    """
    Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
    """
    blkio_device_write_bps: Optional[List[ThrottleDevice]] = Field(alias="BlkioDeviceWriteBps", default=None)
    """
    Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
    """
    blkio_device_read_iops: Optional[List[ThrottleDevice]] = Field(alias="BlkioDeviceReadIOps", default=None)
    """
    Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
    """
    blkio_device_write_iops: Optional[List[ThrottleDevice]] = Field(alias="BlkioDeviceWriteIOps", default=None)
    """
    Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ```
    """
    cpu_period: Optional[I64] = Field(alias="CpuPeriod", default=None)
    """
    The length of a CPU period in microseconds.
    """
    cpu_quota: Optional[I64] = Field(alias="CpuQuota", default=None)
    """
    Microseconds of CPU time that the container can get in a CPU period.
    """
    cpu_realtime_period: Optional[I64] = Field(alias="CpuRealtimePeriod", default=None)
    """
    The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
    """
    cpu_realtime_runtime: Optional[I64] = Field(alias="CpuRealtimeRuntime", default=None)
    """
    The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
    """
    cpuset_cpus: Optional[str] = Field(alias="CpusetCpus", default=None)
    """
    CPUs in which to allow execution (e.g., `0-3`, `0,1`).
    """
    cpuset_mems: Optional[str] = Field(alias="CpusetMems", default=None)
    """
    Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
    """
    devices: Optional[List[DeviceMapping]] = Field(alias="Devices", default=None)
    """
    A list of devices to add to the container.
    """
    device_cgroup_rules: Optional[List[str]] = Field(alias="DeviceCgroupRules", default=None)
    """
    a list of cgroup rules to apply to the container
    """
    device_requests: Optional[List[DeviceRequest]] = Field(alias="DeviceRequests", default=None)
    """
    A list of requests for devices to be sent to device drivers.
    """
    kernel_memory_tcp: Optional[I64] = Field(alias="KernelMemoryTCP", default=None)
    """
    Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty.
    """
    memory_reservation: Optional[I64] = Field(alias="MemoryReservation", default=None)
    """
    Memory soft limit in bytes.
    """
    memory_swap: Optional[I64] = Field(alias="MemorySwap", default=None)
    """
    Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
    """
    memory_swappiness: Optional[I64] = Field(alias="MemorySwappiness", default=None)
    """
    Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
    """
    nano_cpus: Optional[I64] = Field(alias="NanoCpus", default=None)
    """
    CPU quota in units of 10<sup>-9</sup> CPUs.
    """
    oom_kill_disable: Optional[bool] = Field(alias="OomKillDisable", default=None)
    """
    Disable OOM Killer for the container.
    """
    init: Optional[bool] = Field(alias="Init", default=None)
    """
    Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used.
    """
    pids_limit: Optional[I64] = Field(alias="PidsLimit", default=None)
    """
    Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change.
    """
    ulimits: Optional[List[ResourcesUlimits]] = Field(alias="Ulimits", default=None)
    """
    A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ```
    """
    cpu_count: Optional[I64] = Field(alias="CpuCount", default=None)
    """
    The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
    """
    cpu_percent: Optional[I64] = Field(alias="CpuPercent", default=None)
    """
    The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
    """
    io_maximum_iops: Optional[I64] = Field(alias="IOMaximumIOps", default=None)
    """
    Maximum IOps for the container system drive (Windows only)
    """
    io_maximum_bandwidth: Optional[I64] = Field(alias="IOMaximumBandwidth", default=None)
    """
    Maximum IO in bytes per second for the container system drive (Windows only).
    """
    binds: Optional[List[str]] = Field(alias="Binds", default=None)
    """
    A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest[:options]` to bind-mount a host path   into the container. Both `host-src`, and `container-dest` must   be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume   managed by a volume driver into the container. `container-dest`   must be an _absolute_ path.  `options` is an optional, comma-delimited list of:  - `nocopy` disables automatic copying of data from the container   path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.   If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - `z`: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - `Z`: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container's processes from using the content. By       default, the labels set by the host operating system are not       modified. - `[[r]shared|[r]slave|[r]private]` specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to `shared`.   For slave volumes, the mount must be set to either `shared` or   `slave`.
    """
    container_id_file: Optional[str] = Field(alias="ContainerIDFile", default=None)
    """
    Path to a file where the container ID is written
    """
    log_config: Optional[HostConfigLogConfig] = Field(alias="LogConfig", default=None)
    network_mode: Optional[str] = Field(alias="NetworkMode", default=None)
    """
    Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.
    """
    port_bindings: Optional[Dict[str, List[PortBinding]]] = Field(alias="PortBindings", default=None)
    restart_policy: Optional[RestartPolicy] = Field(alias="RestartPolicy", default=None)
    auto_remove: Optional[bool] = Field(alias="AutoRemove", default=None)
    """
    Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.
    """
    volume_driver: Optional[str] = Field(alias="VolumeDriver", default=None)
    """
    Driver that this container uses to mount volumes.
    """
    volumes_from: Optional[List[str]] = Field(alias="VolumesFrom", default=None)
    """
    A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.
    """
    mounts: Optional[List[ContainerMount]] = Field(alias="Mounts", default=None)
    """
    Specification for mounts to be added to the container.
    """
    console_size: Optional[List[int]] = Field(alias="ConsoleSize", default=None)
    """
    Initial console size, as an `[height, width]` array.
    """
    annotations: Optional[Dict[str, str]] = Field(alias="Annotations", default=None)
    """
    Arbitrary non-identifying metadata attached to container and provided to the runtime when the container is started.
    """
    cap_add: Optional[List[str]] = Field(alias="CapAdd", default=None)
    """
    A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'.
    """
    cap_drop: Optional[List[str]] = Field(alias="CapDrop", default=None)
    """
    A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'.
    """
    cgroupns_mode: Optional[HostConfigCgroupnsModeEnum] = Field(alias="CgroupnsMode", default=None)
    """
    cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration.
    """
    dns: Optional[List[str]] = Field(alias="Dns", default=None)
    """
    A list of DNS servers for the container to use.
    """
    dns_options: Optional[List[str]] = Field(alias="DnsOptions", default=None)
    """
    A list of DNS options.
    """
    dns_search: Optional[List[str]] = Field(alias="DnsSearch", default=None)
    """
    A list of DNS search domains.
    """
    extra_hosts: Optional[List[str]] = Field(alias="ExtraHosts", default=None)
    """
    A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.
    """
    group_add: Optional[List[str]] = Field(alias="GroupAdd", default=None)
    """
    A list of additional groups that the container process will run as.
    """
    ipc_mode: Optional[str] = Field(alias="IpcMode", default=None)
    """
    IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.
    """
    cgroup: Optional[str] = Field(alias="Cgroup", default=None)
    """
    Cgroup to use for the container.
    """
    links: Optional[List[str]] = Field(alias="Links", default=None)
    """
    A list of links for the container in the form `container_name:alias`.
    """
    oom_score_adj: Optional[I64] = Field(alias="OomScoreAdj", default=None)
    """
    An integer value containing the score given to the container in order to tune OOM killer preferences.
    """
    pid_mode: Optional[str] = Field(alias="PidMode", default=None)
    """
    Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container
    """
    privileged: Optional[bool] = Field(alias="Privileged", default=None)
    """
    Gives the container full access to the host.
    """
    publish_all_ports: Optional[bool] = Field(alias="PublishAllPorts", default=None)
    """
    Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.
    """
    readonly_rootfs: Optional[bool] = Field(alias="ReadonlyRootfs", default=None)
    """
    Mount the container's root filesystem as read only.
    """
    security_opt: Optional[List[str]] = Field(alias="SecurityOpt", default=None)
    """
    A list of string values to customize labels for MLS systems, such as SELinux.
    """
    storage_opt: Optional[Dict[str, str]] = Field(alias="StorageOpt", default=None)
    """
    Storage driver options for this container, in the form `{\"size\": \"120G\"}`.
    """
    tmpfs: Optional[Dict[str, str]] = Field(alias="Tmpfs", default=None)
    """
    A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ```
    """
    uts_mode: Optional[str] = Field(alias="UTSMode", default=None)
    """
    UTS namespace to use for the container.
    """
    userns_mode: Optional[str] = Field(alias="UsernsMode", default=None)
    """
    Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
    """
    shm_size: Optional[I64] = Field(alias="ShmSize", default=None)
    """
    Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
    """
    sysctls: Optional[Dict[str, str]] = Field(alias="Sysctls", default=None)
    """
    A list of kernel parameters (sysctls) to set in the container. For example:  ``` {\"net.ipv4.ip_forward\": \"1\"} ```
    """
    runtime: Optional[str] = Field(alias="Runtime", default=None)
    """
    Runtime to use with this container.
    """
    isolation: Optional[HostConfigIsolationEnum] = Field(alias="Isolation", default=None)
    """
    Isolation technology of the container. (Windows only)
    """
    masked_paths: Optional[List[str]] = Field(alias="MaskedPaths", default=None)
    """
    The list of paths to be masked inside the container (this overrides the default set of paths).
    """
    readonly_paths: Optional[List[str]] = Field(alias="ReadonlyPaths", default=None)
    """
    The list of paths to be set as read-only inside the container (this overrides the default set of paths).
    """

class GraphDriverData(BaseModel):
    """
    Information about the storage driver used to store the container's and image's filesystem.
    """
    model_config = ConfigDict(populate_by_name=True)

    name: Optional[str] = Field(alias="Name", default=None)
    """
    Name of the storage driver.
    """
    data: Optional[Dict[str, str]] = Field(alias="Data", default=None)
    """
    Low-level storage metadata, provided as key/value pairs.  This information is driver-specific, and depends on the storage-driver in use, and should be used for informational purposes only.
    """

class MountPoint(BaseModel):
    """
    MountPoint represents a mount point configuration inside the container. This is used for reporting the mountpoints in use by a container.
    """
    model_config = ConfigDict(populate_by_name=True)

    typ: Optional[MountTypeEnum] = Field(alias="Type", default=None)
    """
    The mount type:  - `bind` a mount of a file or directory from the host into the container. - `volume` a docker volume with the given `Name`. - `tmpfs` a `tmpfs`. - `npipe` a named pipe from the host into the container. - `cluster` a Swarm cluster volume
    """
    name: Optional[str] = Field(alias="Name", default=None)
    """
    Name is the name reference to the underlying data defined by `Source` e.g., the volume name.
    """
    source: Optional[str] = Field(alias="Source", default=None)
    """
    Source location of the mount.  For volumes, this contains the storage location of the volume (within `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains the source (host) part of the bind-mount. For `tmpfs` mount points, this field is empty.
    """
    destination: Optional[str] = Field(alias="Destination", default=None)
    """
    Destination is the path relative to the container root (`/`) where the `Source` is mounted inside the container.
    """
    driver: Optional[str] = Field(alias="Driver", default=None)
    """
    Driver is the volume driver used to create the volume (if it is a volume).
    """
    mode: Optional[str] = Field(alias="Mode", default=None)
    """
    Mode is a comma separated list of options supplied by the user when creating the bind/volume mount.  The default is platform-specific (`\"z\"` on Linux, empty on Windows).
    """
    rw: Optional[bool] = Field(alias="RW", default=None)
    """
    Whether the mount is mounted writable (read-write).
    """
    propagation: Optional[str] = Field(alias="Propagation", default=None)
    """
    Propagation describes how mounts are propagated from the host into the mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt) for details. This field is not used on Windows.
    """

class HealthConfig(BaseModel):
    """
    A test to perform to check that the container is healthy.
    """
    model_config = ConfigDict(populate_by_name=True)

    test: Optional[List[str]] = Field(alias="Test", default=None)
    """
    The test to perform. Possible values are:  - `[]` inherit healthcheck from image or parent image - `[\"NONE\"]` disable healthcheck - `[\"CMD\", args...]` exec arguments directly - `[\"CMD-SHELL\", command]` run command with system's default shell
    """
    interval: Optional[I64] = Field(alias="Interval", default=None)
    """
    The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
    """
    timeout: Optional[I64] = Field(alias="Timeout", default=None)
    """
    The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
    """
    retries: Optional[I64] = Field(alias="Retries", default=None)
    """
    The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.
    """
    start_period: Optional[I64] = Field(alias="StartPeriod", default=None)
    """
    Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
    """
    start_interval: Optional[I64] = Field(alias="StartInterval", default=None)
    """
    The time to wait between checks in nanoseconds during the start period. It should be 0 or at least 1000000 (1 ms). 0 means inherit.
    """

class ContainerConfig(BaseModel):
    """
    Configuration for a container that is portable between hosts.  When used as `ContainerConfig` field in an image, `ContainerConfig` is an optional field containing the configuration of the container that was last committed when creating the image.  Previous versions of Docker builder used this field to store build cache, and it is not in active use anymore.
    """
    model_config = ConfigDict(populate_by_name=True)

    hostname: Optional[str] = Field(alias="Hostname", default=None)
    """
    The hostname to use for the container, as a valid RFC 1123 hostname.
    """
    domainname: Optional[str] = Field(alias="Domainname", default=None)
    """
    The domain name to use for the container.
    """
    user: Optional[str] = Field(alias="User", default=None)
    """
    The user that commands are run as inside the container.
    """
    attach_stdin: Optional[bool] = Field(alias="AttachStdin", default=None)
    """
    Whether to attach to `stdin`.
    """
    attach_stdout: Optional[bool] = Field(alias="AttachStdout", default=None)
    """
    Whether to attach to `stdout`.
    """
    attach_stderr: Optional[bool] = Field(alias="AttachStderr", default=None)
    """
    Whether to attach to `stderr`.
    """
    exposed_ports: Optional[Dict[str, Dict[str, None]]] = Field(alias="ExposedPorts", default=None)
    """
    An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}`
    """
    tty: Optional[bool] = Field(alias="Tty", default=None)
    """
    Attach standard streams to a TTY, including `stdin` if it is not closed.
    """
    open_stdin: Optional[bool] = Field(alias="OpenStdin", default=None)
    """
    Open `stdin`
    """
    stdin_once: Optional[bool] = Field(alias="StdinOnce", default=None)
    """
    Close `stdin` after one attached client disconnects
    """
    env: Optional[List[str]] = Field(alias="Env", default=None)
    """
    A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
    """
    cmd: Optional[List[str]] = Field(alias="Cmd", default=None)
    """
    Command to run specified as a string or an array of strings.
    """
    healthcheck: Optional[HealthConfig] = Field(alias="Healthcheck", default=None)
    args_escaped: Optional[bool] = Field(alias="ArgsEscaped", default=None)
    """
    Command is already escaped (Windows only)
    """
    image: Optional[str] = Field(alias="Image", default=None)
    """
    The name (or reference) of the image to use when creating the container, or which was used when the container was created.
    """
    volumes: Optional[Dict[str, Dict[str, None]]] = Field(alias="Volumes", default=None)
    """
    An object mapping mount point paths inside the container to empty objects.
    """
    working_dir: Optional[str] = Field(alias="WorkingDir", default=None)
    """
    The working directory for commands to run in.
    """
    entrypoint: Optional[List[str]] = Field(alias="Entrypoint", default=None)
    """
    The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
    """
    network_disabled: Optional[bool] = Field(alias="NetworkDisabled", default=None)
    """
    Disable networking for the container.
    """
    mac_address: Optional[str] = Field(alias="MacAddress", default=None)
    """
    MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead.
    """
    on_build: Optional[List[str]] = Field(alias="OnBuild", default=None)
    """
    `ONBUILD` metadata that were defined in the image's `Dockerfile`.
    """
    labels: Optional[Dict[str, str]] = Field(alias="Labels", default=None)
    """
    User-defined key/value metadata.
    """
    stop_signal: Optional[str] = Field(alias="StopSignal", default=None)
    """
    Signal to stop a container as a string or unsigned integer.
    """
    stop_timeout: Optional[I64] = Field(alias="StopTimeout", default=None)
    """
    Timeout to stop a container in seconds.
    """
    shell: Optional[List[str]] = Field(alias="Shell", default=None)
    """
    Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
    """

class EndpointIpamConfig(BaseModel):
    """
    EndpointIPAMConfig represents an endpoint's IPAM configuration.
    """
    model_config = ConfigDict(populate_by_name=True)

    ipv_4_address: Optional[str] = Field(alias="IPv4Address", default=None)
    ipv_6_address: Optional[str] = Field(alias="IPv6Address", default=None)
    link_local_ips: Optional[List[str]] = Field(alias="LinkLocalIPs", default=None)

class EndpointSettings(BaseModel):
    """
    Configuration for a network endpoint.
    """
    model_config = ConfigDict(populate_by_name=True)

    ipam_config: Optional[EndpointIpamConfig] = Field(alias="IPAMConfig", default=None)
    links: Optional[List[str]] = Field(alias="Links", default=None)
    mac_address: Optional[str] = Field(alias="MacAddress", default=None)
    """
    MAC address for the endpoint on this network. The network driver might ignore this parameter.
    """
    aliases: Optional[List[str]] = Field(alias="Aliases", default=None)
    network_id: Optional[str] = Field(alias="NetworkID", default=None)
    """
    Unique ID of the network.
    """
    endpoint_id: Optional[str] = Field(alias="EndpointID", default=None)
    """
    Unique ID for the service endpoint in a Sandbox.
    """
    gateway: Optional[str] = Field(alias="Gateway", default=None)
    """
    Gateway address for this network.
    """
    ip_address: Optional[str] = Field(alias="IPAddress", default=None)
    """
    IPv4 address.
    """
    ip_prefix_len: Optional[I64] = Field(alias="IPPrefixLen", default=None)
    """
    Mask length of the IPv4 address.
    """
    ipv_6_gateway: Optional[str] = Field(alias="IPv6Gateway", default=None)
    """
    IPv6 gateway address.
    """
    global_ipv_6_address: Optional[str] = Field(alias="GlobalIPv6Address", default=None)
    """
    Global IPv6 address.
    """
    global_ipv_6_prefix_len: Optional[I64] = Field(alias="GlobalIPv6PrefixLen", default=None)
    """
    Mask length of the global IPv6 address.
    """
    driver_opts: Optional[Dict[str, str]] = Field(alias="DriverOpts", default=None)
    """
    DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific.
    """
    dns_names: Optional[List[str]] = Field(alias="DNSNames", default=None)
    """
    List of all DNS names an endpoint has on a specific network. This list is based on the container name, network aliases, container short ID, and hostname.  These DNS names are non-fully qualified but can contain several dots. You can get fully qualified DNS names by appending `.<network-name>`. For instance, if container name is `my.ctr` and the network is named `testnet`, `DNSNames` will contain `my.ctr` and the FQDN will be `my.ctr.testnet`.
    """

class NetworkSettings(BaseModel):
    """
    NetworkSettings exposes the network settings in the API
    """
    model_config = ConfigDict(populate_by_name=True)

    bridge: Optional[str] = Field(alias="Bridge", default=None)
    """
    Name of the default bridge interface when dockerd's --bridge flag is set.
    """
    sandbox_id: Optional[str] = Field(alias="SandboxID", default=None)
    """
    SandboxID uniquely represents a container's network stack.
    """
    ports: Optional[Dict[str, List[PortBinding]]] = Field(alias="Ports", default=None)
    sandbox_key: Optional[str] = Field(alias="SandboxKey", default=None)
    """
    SandboxKey is the full path of the netns handle
    """
    networks: Optional[Dict[str, EndpointSettings]] = Field(alias="Networks", default=None)
    """
    Information about all networks that the container is connected to.
    """

class Container(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[str] = Field(alias="Id", default=None)
    """
    The ID of the container
    """
    created: Optional[str] = Field(alias="Created", default=None)
    """
    The time the container was created
    """
    path: Optional[str] = Field(alias="Path", default=None)
    """
    The path to the command being run
    """
    args: Optional[List[str]] = Field(alias="Args", default=None)
    """
    The arguments to the command being run
    """
    state: Optional[ContainerState] = Field(alias="State", default=None)
    image: Optional[str] = Field(alias="Image", default=None)
    """
    The container's image ID
    """
    resolv_conf_path: Optional[str] = Field(alias="ResolvConfPath", default=None)
    hostname_path: Optional[str] = Field(alias="HostnamePath", default=None)
    hosts_path: Optional[str] = Field(alias="HostsPath", default=None)
    log_path: Optional[str] = Field(alias="LogPath", default=None)
    name: Optional[str] = Field(alias="Name", default=None)
    restart_count: Optional[I64] = Field(alias="RestartCount", default=None)
    driver: Optional[str] = Field(alias="Driver", default=None)
    platform: Optional[str] = Field(alias="Platform", default=None)
    mount_label: Optional[str] = Field(alias="MountLabel", default=None)
    process_label: Optional[str] = Field(alias="ProcessLabel", default=None)
    app_armor_profile: Optional[str] = Field(alias="AppArmorProfile", default=None)
    exec_ids: Optional[List[str]] = Field(alias="ExecIDs", default=None)
    """
    IDs of exec instances that are running in the container.
    """
    host_config: Optional[HostConfig] = Field(alias="HostConfig", default=None)
    graph_driver: Optional[GraphDriverData] = Field(alias="GraphDriver", default=None)
    size_rw: Optional[I64] = Field(alias="SizeRw", default=None)
    """
    The size of files that have been created or changed by this container.
    """
    size_root_fs: Optional[I64] = Field(alias="SizeRootFs", default=None)
    """
    The total size of all the files in this container.
    """
    mounts: Optional[List[MountPoint]] = Field(alias="Mounts", default=None)
    config: Optional[ContainerConfig] = Field(alias="Config", default=None)
    network_settings: Optional[NetworkSettings] = Field(alias="NetworkSettings", default=None)

InspectDeploymentContainerResponse = Container

InspectDockerContainerResponse = Container

class ImageInspectRootFs(BaseModel):
    """
    Information about the image's RootFS, including the layer IDs.
    """
    model_config = ConfigDict(populate_by_name=True)

    typ: Optional[str] = Field(alias="Type", default=None)
    layers: Optional[List[str]] = Field(alias="Layers", default=None)

class ImageInspectMetadata(BaseModel):
    """
    Additional metadata of the image in the local cache. This information is local to the daemon, and not part of the image itself.
    """
    model_config = ConfigDict(populate_by_name=True)

    last_tag_time: Optional[str] = Field(alias="LastTagTime", default=None)
    """
    Date and time at which the image was last tagged in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  This information is only available if the image was tagged locally, and omitted otherwise.
    """

class Image(BaseModel):
    """
    Information about an image in the local image cache.
    """
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[str] = Field(alias="Id", default=None)
    """
    ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image's configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image.
    """
    repo_tags: Optional[List[str]] = Field(alias="RepoTags", default=None)
    """
    List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID.
    """
    repo_digests: Optional[List[str]] = Field(alias="RepoDigests", default=None)
    """
    List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated.
    """
    parent: Optional[str] = Field(alias="Parent", default=None)
    """
    ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry.
    """
    comment: Optional[str] = Field(alias="Comment", default=None)
    """
    Optional message that was set when committing or importing the image.
    """
    created: Optional[str] = Field(alias="Created", default=None)
    """
    Date and time at which the image was created, formatted in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  This information is only available if present in the image, and omitted otherwise.
    """
    docker_version: Optional[str] = Field(alias="DockerVersion", default=None)
    """
    The version of Docker that was used to build the image.  Depending on how the image was created, this field may be empty.
    """
    author: Optional[str] = Field(alias="Author", default=None)
    """
    Name of the author that was specified when committing the image, or as specified through MAINTAINER (deprecated) in the Dockerfile.
    """
    config: Optional[ContainerConfig] = Field(alias="Config", default=None)
    """
    Configuration for a container that is portable between hosts.
    """
    architecture: Optional[str] = Field(alias="Architecture", default=None)
    """
    Hardware CPU architecture that the image runs on.
    """
    variant: Optional[str] = Field(alias="Variant", default=None)
    """
    CPU architecture variant (presently ARM-only).
    """
    os: Optional[str] = Field(alias="Os", default=None)
    """
    Operating System the image is built to run on.
    """
    os_version: Optional[str] = Field(alias="OsVersion", default=None)
    """
    Operating System version the image is built to run on (especially for Windows).
    """
    size: Optional[I64] = Field(alias="Size", default=None)
    """
    Total size of the image including all layers it is composed of.
    """
    graph_driver: Optional[GraphDriverData] = Field(alias="GraphDriver", default=None)
    root_fs: Optional[ImageInspectRootFs] = Field(alias="RootFS", default=None)
    metadata: Optional[ImageInspectMetadata] = Field(alias="Metadata", default=None)

InspectDockerImageResponse = Image

class IpamConfig(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    subnet: Optional[str] = Field(alias="Subnet", default=None)
    ip_range: Optional[str] = Field(alias="IPRange", default=None)
    gateway: Optional[str] = Field(alias="Gateway", default=None)
    auxiliary_addresses: Dict[str, str] = Field(alias="AuxiliaryAddresses")

class Ipam(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    driver: Optional[str] = Field(alias="Driver", default=None)
    """
    Name of the IPAM driver to use.
    """
    config: List[IpamConfig] = Field(alias="Config")
    """
    List of IPAM configuration options, specified as a map:  ``` {\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>} ```
    """
    options: Dict[str, str] = Field(alias="Options")
    """
    Driver-specific options, specified as a map.
    """

class NetworkContainer(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    container_id: Optional[str] = Field(alias="ContainerID", default=None)
    """
    This is the key on the incoming map of NetworkContainer
    """
    name: Optional[str] = Field(alias="Name", default=None)
    endpoint_id: Optional[str] = Field(alias="EndpointID", default=None)
    mac_address: Optional[str] = Field(alias="MacAddress", default=None)
    ipv_4_address: Optional[str] = Field(alias="IPv4Address", default=None)
    ipv_6_address: Optional[str] = Field(alias="IPv6Address", default=None)

class Network(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    name: Optional[str] = Field(alias="Name", default=None)
    id: Optional[str] = Field(alias="Id", default=None)
    created: Optional[str] = Field(alias="Created", default=None)
    scope: Optional[str] = Field(alias="Scope", default=None)
    driver: Optional[str] = Field(alias="Driver", default=None)
    enable_ipv_6: Optional[bool] = Field(alias="EnableIPv6", default=None)
    ipam: Optional[Ipam] = Field(alias="IPAM", default=None)
    internal: Optional[bool] = Field(alias="Internal", default=None)
    attachable: Optional[bool] = Field(alias="Attachable", default=None)
    ingress: Optional[bool] = Field(alias="Ingress", default=None)
    containers: List[NetworkContainer] = Field(alias="Containers")
    """
    This field is turned from map into array for easier usability.
    """
    options: Optional[Dict[str, str]] = Field(alias="Options", default=None)
    labels: Optional[Dict[str, str]] = Field(alias="Labels", default=None)

InspectDockerNetworkResponse = Network

class VolumeScopeEnum(str, Enum):
    EMPTY = ""
    LOCAL = "local"
    GLOBAL = "global"
U64 = int

class ObjectVersion(BaseModel):
    """
    The version number of the object such as node, service, etc. This is needed to avoid conflicting writes. The client must send the version number along with the modified specification when updating these objects.  This approach ensures safe concurrency and determinism in that the change on the object may not be applied if the version number has changed from the last read. In other words, if two update requests specify the same base version, only one of the requests can succeed. As a result, two separate update requests that happen at the same time will not unintentionally overwrite each other.
    """
    model_config = ConfigDict(populate_by_name=True)

    index: Optional[U64] = Field(alias="Index", default=None)

class ClusterVolumeSpecAccessModeScopeEnum(str, Enum):
    EMPTY = ""
    SINGLE = "single"
    MULTI = "multi"
class ClusterVolumeSpecAccessModeSharingEnum(str, Enum):
    EMPTY = ""
    NONE = "none"
    READONLY = "readonly"
    ONEWRITER = "onewriter"
    ALL = "all"
class ClusterVolumeSpecAccessModeSecrets(BaseModel):
    """
    One cluster volume secret entry. Defines a key-value pair that is passed to the plugin.
    """
    model_config = ConfigDict(populate_by_name=True)

    key: Optional[str] = Field(alias="Key", default=None)
    """
    Key is the name of the key of the key-value pair passed to the plugin.
    """
    secret: Optional[str] = Field(alias="Secret", default=None)
    """
    Secret is the swarm Secret object from which to read data. This can be a Secret name or ID. The Secret data is retrieved by swarm and used as the value of the key-value pair passed to the plugin.
    """

Topology = Dict[str, List[PortBinding]]

class ClusterVolumeSpecAccessModeAccessibilityRequirements(BaseModel):
    """
    Requirements for the accessible topology of the volume. These fields are optional. For an in-depth description of what these fields mean, see the CSI specification.
    """
    model_config = ConfigDict(populate_by_name=True)

    requisite: Optional[List[Topology]] = Field(alias="Requisite", default=None)
    """
    A list of required topologies, at least one of which the volume must be accessible from.
    """
    preferred: Optional[List[Topology]] = Field(alias="Preferred", default=None)
    """
    A list of topologies that the volume should attempt to be provisioned in.
    """

class ClusterVolumeSpecAccessModeCapacityRange(BaseModel):
    """
    The desired capacity that the volume should be created with. If empty, the plugin will decide the capacity.
    """
    model_config = ConfigDict(populate_by_name=True)

    required_bytes: Optional[I64] = Field(alias="RequiredBytes", default=None)
    """
    The volume must be at least this big. The value of 0 indicates an unspecified minimum
    """
    limit_bytes: Optional[I64] = Field(alias="LimitBytes", default=None)
    """
    The volume must not be bigger than this. The value of 0 indicates an unspecified maximum.
    """

class ClusterVolumeSpecAccessModeAvailabilityEnum(str, Enum):
    EMPTY = ""
    ACTIVE = "active"
    PAUSE = "pause"
    DRAIN = "drain"
class ClusterVolumeSpecAccessMode(BaseModel):
    """
    Defines how the volume is used by tasks.
    """
    model_config = ConfigDict(populate_by_name=True)

    scope: Optional[ClusterVolumeSpecAccessModeScopeEnum] = Field(alias="Scope", default=None)
    """
    The set of nodes this volume can be used on at one time. - `single` The volume may only be scheduled to one node at a time. - `multi` the volume may be scheduled to any supported number of nodes at a time.
    """
    sharing: Optional[ClusterVolumeSpecAccessModeSharingEnum] = Field(alias="Sharing", default=None)
    """
    The number and way that different tasks can use this volume at one time. - `none` The volume may only be used by one task at a time. - `readonly` The volume may be used by any number of tasks, but they all must mount the volume as readonly - `onewriter` The volume may be used by any number of tasks, but only one may mount it as read/write. - `all` The volume may have any number of readers and writers.
    """
    secrets: Optional[List[ClusterVolumeSpecAccessModeSecrets]] = Field(alias="Secrets", default=None)
    """
    Swarm Secrets that are passed to the CSI storage plugin when operating on this volume.
    """
    accessibility_requirements: Optional[ClusterVolumeSpecAccessModeAccessibilityRequirements] = Field(alias="AccessibilityRequirements", default=None)
    capacity_range: Optional[ClusterVolumeSpecAccessModeCapacityRange] = Field(alias="CapacityRange", default=None)
    availability: Optional[ClusterVolumeSpecAccessModeAvailabilityEnum] = Field(alias="Availability", default=None)
    """
    The availability of the volume for use in tasks. - `active` The volume is fully available for scheduling on the cluster - `pause` No new workloads should use the volume, but existing workloads are not stopped. - `drain` All workloads using this volume should be stopped and rescheduled, and no new ones should be started.
    """

class ClusterVolumeSpec(BaseModel):
    """
    Cluster-specific options used to create the volume.
    """
    model_config = ConfigDict(populate_by_name=True)

    group: Optional[str] = Field(alias="Group", default=None)
    """
    Group defines the volume group of this volume. Volumes belonging to the same group can be referred to by group name when creating Services.  Referring to a volume by group instructs Swarm to treat volumes in that group interchangeably for the purpose of scheduling. Volumes with an empty string for a group technically all belong to the same, emptystring group.
    """
    access_mode: Optional[ClusterVolumeSpecAccessMode] = Field(alias="AccessMode", default=None)

class ClusterVolumeInfo(BaseModel):
    """
    Information about the global status of the volume.
    """
    model_config = ConfigDict(populate_by_name=True)

    capacity_bytes: Optional[I64] = Field(alias="CapacityBytes", default=None)
    """
    The capacity of the volume in bytes. A value of 0 indicates that the capacity is unknown.
    """
    volume_context: Optional[Dict[str, str]] = Field(alias="VolumeContext", default=None)
    """
    A map of strings to strings returned from the storage plugin when the volume is created.
    """
    volume_id: Optional[str] = Field(alias="VolumeID", default=None)
    """
    The ID of the volume as returned by the CSI storage plugin. This is distinct from the volume's ID as provided by Docker. This ID is never used by the user when communicating with Docker to refer to this volume. If the ID is blank, then the Volume has not been successfully created in the plugin yet.
    """
    accessible_topology: Optional[List[Topology]] = Field(alias="AccessibleTopology", default=None)
    """
    The topology this volume is actually accessible from.
    """

class ClusterVolumePublishStatusStateEnum(str, Enum):
    EMPTY = ""
    PENDINGPUBLISH = "pending-publish"
    PUBLISHED = "published"
    PENDINGNODEUNPUBLISH = "pending-node-unpublish"
    PENDINGCONTROLLERUNPUBLISH = "pending-controller-unpublish"
class ClusterVolumePublishStatus(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    node_id: Optional[str] = Field(alias="NodeID", default=None)
    """
    The ID of the Swarm node the volume is published on.
    """
    state: Optional[ClusterVolumePublishStatusStateEnum] = Field(alias="State", default=None)
    """
    The published state of the volume. * `pending-publish` The volume should be published to this node, but the call to the controller plugin to do so has not yet been successfully completed. * `published` The volume is published successfully to the node. * `pending-node-unpublish` The volume should be unpublished from the node, and the manager is awaiting confirmation from the worker that it has done so. * `pending-controller-unpublish` The volume is successfully unpublished from the node, but has not yet been successfully unpublished on the controller.
    """
    publish_context: Optional[Dict[str, str]] = Field(alias="PublishContext", default=None)
    """
    A map of strings to strings returned by the CSI controller plugin when a volume is published.
    """

class ClusterVolume(BaseModel):
    """
    Options and information specific to, and only present on, Swarm CSI cluster volumes.
    """
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[str] = Field(alias="ID", default=None)
    """
    The Swarm ID of this volume. Because cluster volumes are Swarm objects, they have an ID, unlike non-cluster volumes. This ID can be used to refer to the Volume instead of the name.
    """
    version: Optional[ObjectVersion] = Field(alias="Version", default=None)
    created_at: Optional[str] = Field(alias="CreatedAt", default=None)
    updated_at: Optional[str] = Field(alias="UpdatedAt", default=None)
    spec: Optional[ClusterVolumeSpec] = Field(alias="Spec", default=None)
    info: Optional[ClusterVolumeInfo] = Field(alias="Info", default=None)
    publish_status: Optional[List[ClusterVolumePublishStatus]] = Field(alias="PublishStatus", default=None)
    """
    The status of the volume as it pertains to its publishing and use on specific nodes
    """

class VolumeUsageData(BaseModel):
    """
    Usage details about the volume. This information is used by the `GET /system/df` endpoint, and omitted in other endpoints.
    """
    model_config = ConfigDict(populate_by_name=True)

    size: I64 = Field(alias="Size")
    """
    Amount of disk space used by the volume (in bytes). This information is only available for volumes created with the `\"local\"` volume driver. For volumes created with other volume drivers, this field is set to `-1` (\"not available\")
    """
    ref_count: I64 = Field(alias="RefCount")
    """
    The number of containers referencing this volume. This field is set to `-1` if the reference-count is not available.
    """

class Volume(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    name: str = Field(alias="Name")
    """
    Name of the volume.
    """
    driver: str = Field(alias="Driver")
    """
    Name of the volume driver used by the volume.
    """
    mountpoint: str = Field(alias="Mountpoint")
    """
    Mount path of the volume on the host.
    """
    created_at: Optional[str] = Field(alias="CreatedAt", default=None)
    """
    Date/Time the volume was created.
    """
    status: Optional[Dict[str, Dict[str, None]]] = Field(alias="Status", default=None)
    """
    Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature.
    """
    labels: Optional[Dict[str, str]] = Field(alias="Labels", default=None)
    """
    User-defined key/value metadata.
    """
    scope: Optional[VolumeScopeEnum] = Field(alias="Scope", default=None)
    """
    The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level.
    """
    cluster_volume: Optional[ClusterVolume] = Field(alias="ClusterVolume", default=None)
    options: Optional[Dict[str, str]] = Field(alias="Options", default=None)
    """
    The driver specific options used when creating the volume.
    """
    usage_data: Optional[VolumeUsageData] = Field(alias="UsageData", default=None)

InspectDockerVolumeResponse = Volume

InspectStackContainerResponse = Container

JsonObject = any

JsonValue = any

ListActionsResponse = List[ActionListItem]

ListAlertersResponse = List[AlerterListItem]

class PortTypeEnum(str, Enum):
    EMPTY = ""
    TCP = "tcp"
    UDP = "udp"
    SCTP = "sctp"
class Port(BaseModel):
    """
    An open port on a container
    """
    model_config = ConfigDict(populate_by_name=True)

    ip: Optional[str] = Field(alias="IP", default=None)
    """
    Host IP address that the container's port is mapped to
    """
    private_port: Optional[int] = Field(alias="PrivatePort", default=None)
    """
    Port on the container
    """
    public_port: Optional[int] = Field(alias="PublicPort", default=None)
    """
    Port exposed on the host
    """
    typ: Optional[PortTypeEnum] = Field(alias="Type", default=None)

class ContainerListItem(BaseModel):
    """
    Container summary returned by container list apis.
    """
    server_id: Optional[str] = Field(default=None)
    """
    The Server which holds the container.
    """
    name: str
    """
    The first name in Names, not including the initial '/'
    """
    id: Optional[str] = Field(default=None)
    """
    The ID of this container
    """
    image: Optional[str] = Field(default=None)
    """
    The name of the image used when creating this container
    """
    image_id: Optional[str] = Field(default=None)
    """
    The ID of the image that this container was created from
    """
    created: Optional[I64] = Field(default=None)
    """
    When the container was created
    """
    size_rw: Optional[I64] = Field(default=None)
    """
    The size of files that have been created or changed by this container
    """
    size_root_fs: Optional[I64] = Field(default=None)
    """
    The total size of all the files in this container
    """
    state: ContainerStateStatusEnum
    """
    The state of this container (e.g. `exited`)
    """
    status: Optional[str] = Field(default=None)
    """
    Additional human-readable status of this container (e.g. `Exit 0`)
    """
    network_mode: Optional[str] = Field(default=None)
    """
    The network mode
    """
    networks: Optional[List[str]] = Field(default=None)
    """
    The network names attached to container
    """
    ports: Optional[List[Port]] = Field(default=None)
    """
    Port mappings for the container
    """
    volumes: Optional[List[str]] = Field(default=None)
    """
    The volume names attached to container
    """
    stats: Optional[ContainerStats] = Field(default=None)
    """
    The container stats, if they can be retreived.
    """
    labels: Optional[Dict[str, str]] = Field(default=None)
    """
    The labels attached to container.
    It's too big to send with container list,
    can get it using InspectContainer
    """

ListAllDockerContainersResponse = List[ContainerListItem]

class ApiKey(BaseModel):
    """
    An api key used to authenticate requests via request headers.
    """
    key: str
    """
    Unique key associated with secret
    """
    secret: str
    """
    Hash of the secret
    """
    user_id: str
    """
    User associated with the api key
    """
    name: str
    """
    Name associated with the api key for management
    """
    created_at: I64
    """
    Timestamp of key creation
    """
    expires: I64
    """
    Expiry of key, or 0 if never expires
    """

ListApiKeysForServiceUserResponse = List[ApiKey]

ListApiKeysResponse = List[ApiKey]

class BuildVersionResponseItem(BaseModel):
    version: Version
    ts: I64

ListBuildVersionsResponse = List[BuildVersionResponseItem]

ListBuildersResponse = List[BuilderListItem]

ListBuildsResponse = List[BuildListItem]

ListCommonBuildExtraArgsResponse = List[str]

ListCommonDeploymentExtraArgsResponse = List[str]

ListCommonStackBuildExtraArgsResponse = List[str]

ListCommonStackExtraArgsResponse = List[str]

class ComposeProject(BaseModel):
    name: str
    """
    The compose project name.
    """
    status: Optional[str] = Field(default=None)
    """
    The status of the project, as returned by docker.
    """
    compose_files: List[str]
    """
    The compose files included in the project.
    """

ListComposeProjectsResponse = List[ComposeProject]

ListDeploymentsResponse = List[DeploymentListItem]

ListDockerContainersResponse = List[ContainerListItem]

class ImageHistoryResponseItem(BaseModel):
    """
    individual image layer information in response to ImageHistory operation
    """
    model_config = ConfigDict(populate_by_name=True)

    id: str = Field(alias="Id")
    created: I64 = Field(alias="Created")
    created_by: str = Field(alias="CreatedBy")
    tags: Optional[List[str]] = Field(alias="Tags", default=None)
    size: I64 = Field(alias="Size")
    comment: str = Field(alias="Comment")

ListDockerImageHistoryResponse = List[ImageHistoryResponseItem]

class ImageListItem(BaseModel):
    name: str
    """
    The first tag in `repo_tags`, or Id if no tags.
    """
    id: str
    """
    ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image's configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image.
    """
    parent_id: str
    """
    ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry.
    """
    created: I64
    """
    Date and time at which the image was created as a Unix timestamp (number of seconds sinds EPOCH).
    """
    size: I64
    """
    Total size of the image including all layers it is composed of.
    """
    in_use: bool
    """
    Whether the image is in use by any container
    """

ListDockerImagesResponse = List[ImageListItem]

class NetworkListItem(BaseModel):
    model_config = ConfigDict(populate_by_name=True)

    name: Optional[str] = Field(default=None)
    id: Optional[str] = Field(default=None)
    created: Optional[str] = Field(default=None)
    scope: Optional[str] = Field(default=None)
    driver: Optional[str] = Field(default=None)
    enable_ipv_6: Optional[bool] = Field(alias="enable_ipv6", default=None)
    ipam_driver: Optional[str] = Field(default=None)
    ipam_subnet: Optional[str] = Field(default=None)
    ipam_gateway: Optional[str] = Field(default=None)
    internal: Optional[bool] = Field(default=None)
    attachable: Optional[bool] = Field(default=None)
    ingress: Optional[bool] = Field(default=None)
    in_use: bool
    """
    Whether the network is attached to one or more containers
    """

ListDockerNetworksResponse = List[NetworkListItem]

class ProviderAccount(BaseModel):
    username: str
    """
    The account username. Required.
    """
    token: Optional[str] = Field(default=None)
    """
    The account access token. Required.
    """

class DockerRegistry(BaseModel):
    domain: str
    """
    The docker provider domain. Default: `docker.io`.
    """
    accounts: List[ProviderAccount]
    """
    The accounts on the registry. Required.
    """
    organizations: Optional[List[str]] = Field(default=None)
    """
    Available organizations on the registry provider.
    Used to push an image under an organization's repo rather than an account's repo.
    """

ListDockerRegistriesFromConfigResponse = List[DockerRegistry]

ListDockerRegistryAccountsResponse = List[DockerRegistryAccount]

class VolumeListItem(BaseModel):
    name: str
    """
    The name of the volume
    """
    driver: str
    mountpoint: str
    created: Optional[str] = Field(default=None)
    scope: VolumeScopeEnum
    size: Optional[I64] = Field(default=None)
    """
    Amount of disk space used by the volume (in bytes). This information is only available for volumes created with the `\"local\"` volume driver. For volumes created with other volume drivers, this field is set to `-1` (\"not available\")
    """
    in_use: bool
    """
    Whether the volume is currently attached to any container
    """

ListDockerVolumesResponse = List[VolumeListItem]

ListFullActionsResponse = List[Action]

ListFullAlertersResponse = List[Alerter]

ListFullBuildersResponse = List[Builder]

ListFullBuildsResponse = List[Build]

ListFullDeploymentsResponse = List[Deployment]

ListFullProceduresResponse = List[Procedure]

ListFullReposResponse = List[Repo]

ListFullResourceSyncsResponse = List[ResourceSync]

ListFullServersResponse = List[Server]

ListFullStacksResponse = List[Stack]

ListGitProviderAccountsResponse = List[GitProviderAccount]

class GitProvider(BaseModel):
    domain: str
    """
    The git provider domain. Default: `github.com`.
    """
    https: bool
    """
    Whether to use https. Default: true.
    """
    accounts: List[ProviderAccount]
    """
    The accounts on the git provider. Required.
    """

ListGitProvidersFromConfigResponse = List[GitProvider]

class UserTargetTypes(str, Enum):
    USER = "User"
    USER_GROUP = "UserGroup"

class UserTargetUser(BaseModel):
    """
    User Id
    """
    type: Literal[UserTargetTypes.USER] = UserTargetTypes.USER
    id: str

class UserTargetUserGroup(BaseModel):
    """
    UserGroup Id
    """
    type: Literal[UserTargetTypes.USER_GROUP] = UserTargetTypes.USER_GROUP
    id: str

UserTarget = Union[UserTargetUser, UserTargetUserGroup]
class Permission(BaseModel):
    """
    Representation of a User or UserGroups permission on a resource.
    """
    model_config = ConfigDict(populate_by_name=True)

    id: Optional[MongoId] = Field(alias="_id", default=None)
    """
    The id of the permission document
    """
    user_target: UserTarget
    """
    The target User / UserGroup
    """
    resource_target: ResourceTarget
    """
    The target resource
    """
    level: Optional[PermissionLevel] = Field(default=None)
    """
    The permission level for the [user_target] on the [resource_target].
    """
    specific: Optional[Set[SpecificPermission]] = Field(default=None)
    """
    Any specific permissions for the [user_target] on the [resource_target].
    """

ListPermissionsResponse = List[Permission]

class ProcedureState(str, Enum):
    RUNNING = "Running"
    """
    Currently running
    """
    OK = "Ok"
    """
    Last run successful
    """
    FAILED = "Failed"
    """
    Last run failed
    """
    UNKNOWN = "Unknown"
    """
    Other case (never run)
    """
class ProcedureListItemInfo(BaseModel):
    stages: I64
    """
    Number of stages procedure has.
    """
    state: ProcedureState
    """
    Reflect whether last run successful / currently running.
    """
    last_run_at: Optional[I64] = Field(default=None)
    """
    Procedure last successful run timestamp in ms.
    """
    next_scheduled_run: Optional[I64] = Field(default=None)
    """
    If the procedure has schedule enabled, this is the
    next scheduled run time in unix ms.
    """
    schedule_error: Optional[str] = Field(default=None)
    """
    If there is an error parsing schedule expression,
    it will be given here.
    """

ProcedureListItem = ResourceListItem[ProcedureListItemInfo]

ListProceduresResponse = List[ProcedureListItem]

class RepoState(str, Enum):
    UNKNOWN = "Unknown"
    """
    Unknown case
    """
    OK = "Ok"
    """
    Last clone / pull successful (or never cloned)
    """
    FAILED = "Failed"
    """
    Last clone / pull failed
    """
    CLONING = "Cloning"
    """
    Currently cloning
    """
    PULLING = "Pulling"
    """
    Currently pulling
    """
    BUILDING = "Building"
    """
    Currently building
    """
class RepoListItemInfo(BaseModel):
    server_id: str
    """
    The server that repo sits on.
    """
    builder_id: str
    """
    The builder that builds the repo.
    """
    last_pulled_at: I64
    """
    Repo last cloned / pulled timestamp in ms.
    """
    last_built_at: I64
    """
    Repo last built timestamp in ms.
    """
    git_provider: str
    """
    The git provider domain
    """
    repo: str
    """
    The configured repo
    """
    branch: str
    """
    The configured branch
    """
    repo_link: str
    """
    Full link to the repo.
    """
    state: RepoState
    """
    The repo state
    """
    cloned_hash: Optional[str] = Field(default=None)
    """
    If the repo is cloned, will be the cloned short commit hash.
    """
    cloned_message: Optional[str] = Field(default=None)
    """
    If the repo is cloned, will be the cloned commit message.
    """
    built_hash: Optional[str] = Field(default=None)
    """
    If the repo is built, will be the latest built short commit hash.
    """
    latest_hash: Optional[str] = Field(default=None)
    """
    Will be the latest remote short commit hash.
    """

RepoListItem = ResourceListItem[RepoListItemInfo]

ListReposResponse = List[RepoListItem]

class ResourceSyncState(str, Enum):
    SYNCING = "Syncing"
    """
    Currently syncing
    """
    PENDING = "Pending"
    """
    Updates pending
    """
    OK = "Ok"
    """
    Last sync successful (or never synced). No Changes pending
    """
    FAILED = "Failed"
    """
    Last sync failed
    """
    UNKNOWN = "Unknown"
    """
    Other case
    """
class ResourceSyncListItemInfo(BaseModel):
    last_sync_ts: I64
    """
    Unix timestamp of last sync, or 0
    """
    files_on_host: bool
    """
    Whether sync is `files_on_host` mode.
    """
    file_contents: bool
    """
    Whether sync has file contents defined.
    """
    managed: bool
    """
    Whether sync has `managed` mode enabled.
    """
    resource_path: List[str]
    """
    Resource paths to the files.
    """
    linked_repo: str
    """
    Linked repo, if one is attached.
    """
    git_provider: str
    """
    The git provider domain.
    """
    repo: str
    """
    The Github repo used as the source of the sync resources
    """
    branch: str
    """
    The branch of the repo
    """
    repo_link: str
    """
    Full link to the repo.
    """
    last_sync_hash: Optional[str] = Field(default=None)
    """
    Short commit hash of last sync, or empty string
    """
    last_sync_message: Optional[str] = Field(default=None)
    """
    Commit message of last sync, or empty string
    """
    state: ResourceSyncState
    """
    State of the sync. Reflects whether most recent sync successful.
    """

ResourceSyncListItem = ResourceListItem[ResourceSyncListItemInfo]

ListResourceSyncsResponse = List[ResourceSyncListItem]

class Schedule(BaseModel):
    """
    A scheduled Action / Procedure run.
    """
    target: ResourceTarget
    """
    Procedure or Alerter
    """
    name: str
    """
    Readable name of the target resource
    """
    schedule_format: ScheduleFormat
    """
    The format of the schedule expression
    """
    schedule: str
    """
    The schedule for the run
    """
    enabled: bool
    """
    Whether the scheduled run is enabled
    """
    schedule_timezone: str
    """
    Custom schedule timezone if it exists
    """
    last_run_at: Optional[I64] = Field(default=None)
    """
    Last run timestamp in ms.
    """
    next_scheduled_run: Optional[I64] = Field(default=None)
    """
    Next scheduled run time in unix ms.
    """
    schedule_error: Optional[str] = Field(default=None)
    """
    If there is an error parsing schedule expression,
    it will be given here.
    """
    tags: List[str]
    """
    Resource tags.
    """

ListSchedulesResponse = List[Schedule]

ListSecretsResponse = List[str]

class ServerState(str, Enum):
    OK = "Ok"
    """
    Server health check passing.
    """
    NOTOK = "NotOk"
    """
    Server is unreachable.
    """
    DISABLED = "Disabled"
    """
    Server is disabled.
    """
class ServerListItemInfo(BaseModel):
    state: ServerState
    """
    The server's state.
    """
    region: str
    """
    Region of the server.
    """
    address: str
    """
    Address of the server.
    """
    external_address: Optional[str] = Field(default=None)
    """
    External address of the server (reachable by users).
    Used with links.
    """
    version: str
    """
    The Komodo Periphery version of the server.
    """
    send_unreachable_alerts: bool
    """
    Whether server is configured to send unreachable alerts.
    """
    send_cpu_alerts: bool
    """
    Whether server is configured to send cpu alerts.
    """
    send_mem_alerts: bool
    """
    Whether server is configured to send mem alerts.
    """
    send_disk_alerts: bool
    """
    Whether server is configured to send disk alerts.
    """
    send_version_mismatch_alerts: bool
    """
    Whether server is configured to send version mismatch alerts.
    """
    terminals_disabled: bool
    """
    Whether terminals are disabled for this Server.
    """
    container_exec_disabled: bool
    """
    Whether container exec is disabled for this Server.
    """

ServerListItem = ResourceListItem[ServerListItemInfo]

ListServersResponse = List[ServerListItem]

class StackService(BaseModel):
    service: str
    """
    The service name
    """
    image: str
    """
    The service image
    """
    container: Optional[ContainerListItem] = Field(default=None)
    """
    The container
    """
    update_available: bool
    """
    Whether there is an update available for this services image.
    """

ListStackServicesResponse = List[StackService]

class StackState(str, Enum):
    DEPLOYING = "deploying"
    """
    The stack is currently re/deploying
    """
    RUNNING = "running"
    """
    All containers are running.
    """
    PAUSED = "paused"
    """
    All containers are paused
    """
    STOPPED = "stopped"
    """
    All contianers are stopped
    """
    CREATED = "created"
    """
    All containers are created
    """
    RESTARTING = "restarting"
    """
    All containers are restarting
    """
    DEAD = "dead"
    """
    All containers are dead
    """
    REMOVING = "removing"
    """
    All containers are removing
    """
    UNHEALTHY = "unhealthy"
    """
    The containers are in a mix of states
    """
    DOWN = "down"
    """
    The stack is not deployed
    """
    UNKNOWN = "unknown"
    """
    Server not reachable for status
    """
class StackServiceWithUpdate(BaseModel):
    service: str
    image: str
    """
    The service's image
    """
    update_available: bool
    """
    Whether there is a newer image available for this service
    """

class StackListItemInfo(BaseModel):
    server_id: str
    """
    The server that stack is deployed on.
    """
    files_on_host: bool
    """
    Whether stack is using files on host mode
    """
    file_contents: bool
    """
    Whether stack has file contents defined.
    """
    linked_repo: str
    """
    Linked repo, if one is attached.
    """
    git_provider: str
    """
    The git provider domain
    """
    repo: str
    """
    The configured repo
    """
    branch: str
    """
    The configured branch
    """
    repo_link: str
    """
    Full link to the repo.
    """
    state: StackState
    """
    The stack state
    """
    status: Optional[str] = Field(default=None)
    """
    A string given by docker conveying the status of the stack.
    """
    services: List[StackServiceWithUpdate]
    """
    The services that are part of the stack.
    If deployed, will be `deployed_services`.
    Otherwise, its `latest_services`
    """
    project_missing: bool
    """
    Whether the compose project is missing on the host.
    Ie, it does not show up in `docker compose ls`.
    If true, and the stack is not Down, this is an unhealthy state.
    """
    missing_files: List[str]
    """
    If any compose files are missing in the repo, the path will be here.
    If there are paths here, this is an unhealthy state, and deploying will fail.
    """
    deployed_hash: Optional[str] = Field(default=None)
    """
    Deployed short commit hash, or null. Only for repo based stacks.
    """
    latest_hash: Optional[str] = Field(default=None)
    """
    Latest short commit hash, or null. Only for repo based stacks
    """

StackListItem = ResourceListItem[StackListItemInfo]

ListStacksResponse = List[StackListItem]

class SystemProcess(BaseModel):
    """
    Information about a process on the system.
    """
    pid: int
    """
    The process PID
    """
    name: str
    """
    The process name
    """
    exe: Optional[str] = Field(default=None)
    """
    The path to the process executable
    """
    cmd: List[str]
    """
    The command used to start the process
    """
    start_time: Optional[float] = Field(default=None)
    """
    The time the process was started
    """
    cpu_perc: float
    """
    The cpu usage percentage of the process.
    This is in core-percentage, eg 100% is 1 full core, and
    an 8 core machine would max at 800%.
    """
    mem_mb: float
    """
    The memory usage of the process in MB
    """
    disk_read_kb: float
    """
    Process disk read in KB/s
    """
    disk_write_kb: float
    """
    Process disk write in KB/s
    """

ListSystemProcessesResponse = List[SystemProcess]

ListTagsResponse = List[Tag]

class TerminalInfo(BaseModel):
    """
    Info about an active terminal on a server.
    Retrieve with [ListTerminals][crate::api::read::server::ListTerminals].
    """
    name: str
    """
    The name of the terminal.
    """
    command: str
    """
    The root program / args of the pty
    """
    stored_size_kb: float
    """
    The size of the terminal history in memory.
    """

ListTerminalsResponse = List[TerminalInfo]

ListUserGroupsResponse = List[UserGroup]

ListUserTargetPermissionsResponse = List[Permission]

ListUsersResponse = List[User]

ListVariablesResponse = List[Variable]

LoginLocalUserResponse = JwtResponse

"""
The response for [LoginLocalUser]
"""
MongoDocument = any

class ProcedureQuerySpecifics(BaseModel):
    pass
ProcedureQuery = ResourceQuery[ProcedureQuerySpecifics]

PushRecentlyViewedResponse = NoData

class RepoQuerySpecifics(BaseModel):
    repos: List[str]
    """
    Filter repos by their repo.
    """

RepoQuery = ResourceQuery[RepoQuerySpecifics]

class ResourceSyncQuerySpecifics(BaseModel):
    repos: List[str]
    """
    Filter syncs by their repo.
    """

ResourceSyncQuery = ResourceQuery[ResourceSyncQuerySpecifics]

SearchContainerLogResponse = Log

SearchDeploymentLogResponse = Log

SearchStackLogResponse = Log

class ServerQuerySpecifics(BaseModel):
    pass
ServerQuery = ResourceQuery[ServerQuerySpecifics]

"""
Server-specific query
"""
SetLastSeenUpdateResponse = NoData

SignUpLocalUserResponse = JwtResponse

"""
Response for [SignUpLocalUser].
"""
class StackQuerySpecifics(BaseModel):
    server_ids: Optional[List[str]] = Field(default=None)
    """
    Query only for Stacks on these Servers.
    If empty, does not filter by Server.
    Only accepts Server id (not name).
    """
    linked_repos: Optional[List[str]] = Field(default=None)
    """
    Query only for Stacks with these linked repos.
    Only accepts Repo id (not name).
    """
    repos: Optional[List[str]] = Field(default=None)
    """
    Filter syncs by their repo.
    """
    update_available: Optional[bool] = Field(default=None)
    """
    Query only for Stack with available image updates.
    """

StackQuery = ResourceQuery[StackQuerySpecifics]

UpdateDockerRegistryAccountResponse = DockerRegistryAccount

UpdateGitProviderAccountResponse = GitProviderAccount

UpdatePermissionOnResourceTypeResponse = NoData

UpdatePermissionOnTargetResponse = NoData

UpdateProcedureResponse = Procedure

UpdateResourceMetaResponse = NoData

UpdateServiceUserDescriptionResponse = User

UpdateUserAdminResponse = NoData

UpdateUserBasePermissionsResponse = NoData

UpdateUserPasswordResponse = NoData

UpdateUserUsernameResponse = NoData

UpdateVariableDescriptionResponse = Variable

UpdateVariableIsSecretResponse = Variable

UpdateVariableValueResponse = Variable

_PartialActionConfig = ActionConfig

_PartialAlerterConfig = AlerterConfig


_PartialBuildConfig = BuildConfig

_PartialBuilderConfig = BuilderConfig

_PartialDeploymentConfig = DeploymentConfig

_PartialDockerRegistryAccount = DockerRegistryAccount

_PartialGitProviderAccount = GitProviderAccount

_PartialProcedureConfig = ProcedureConfig

_PartialRepoConfig = RepoConfig

_PartialResourceSyncConfig = ResourceSyncConfig


_PartialServerConfig = ServerConfig

_PartialStackConfig = StackConfig

_PartialTag = Tag


class __Serror(BaseModel):
    error: str
    trace: List[str]

_Serror = __Serror

class AddUserToUserGroup(BaseModel):
    """
    **Admin only.** Add a user to a user group. Response: [UserGroup]
    """
    user_group: str
    """
    The name or id of UserGroup that user should be added to.
    """
    user: str
    """
    The id or username of the user to add
    """

class AwsBuilderConfig(BaseModel):
    """
    Configuration for an AWS builder.
    """
    region: str
    """
    The AWS region to create the instance in
    """
    instance_type: str
    """
    The instance type to create for the build
    """
    volume_gb: int
    """
    The size of the builder volume in gb
    """
    port: int
    """
    The port periphery will be running on.
    Default: `8120`
    """
    use_https: bool
    ami_id: Optional[str] = Field(default=None)
    """
    The EC2 ami id to create.
    The ami should have the periphery client configured to start on startup,
    and should have the necessary github / dockerhub accounts configured.
    """
    subnet_id: Optional[str] = Field(default=None)
    """
    The subnet id to create the instance in.
    """
    key_pair_name: Optional[str] = Field(default=None)
    """
    The key pair name to attach to the instance
    """
    assign_public_ip: Optional[bool] = Field(default=None)
    """
    Whether to assign the instance a public IP address.
    Likely needed for the instance to be able to reach the open internet.
    """
    use_public_ip: Optional[bool] = Field(default=None)
    """
    Whether core should use the public IP address to communicate with periphery on the builder.
    If false, core will communicate with the instance using the private IP.
    """
    security_group_ids: Optional[List[str]] = Field(default=None)
    """
    The security group ids to attach to the instance.
    This should include a security group to allow core inbound access to the periphery port.
    """
    user_data: Optional[str] = Field(default=None)
    """
    The user data to deploy the instance with.
    """
    git_providers: Optional[List[GitProvider]] = Field(default=None)
    """
    Which git providers are available on the AMI
    """
    docker_registries: Optional[List[DockerRegistry]] = Field(default=None)
    """
    Which docker registries are available on the AMI.
    """
    secrets: Optional[List[str]] = Field(default=None)
    """
    Which secrets are available on the AMI.
    """

class BackupCoreDatabase(BaseModel):
    """
    Backs up the Komodo Core database to compressed jsonl files.
    Admin only. Response: [Update]
    
    Mount a folder to `/backups`, and Core will use it to create
    timestamped database dumps, which can be restored using
    the Komodo CLI.
    
    https://komo.do/docs/setup/backup
    """
    pass
class BatchBuildRepo(BaseModel):
    """
    Builds multiple Repos in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* repos
    foo-*
    # add some more
    extra-repo-1, extra-repo-2
    ```
    """

class BatchCloneRepo(BaseModel):
    """
    Clones multiple Repos in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* repos
    foo-*
    # add some more
    extra-repo-1, extra-repo-2
    ```
    """

class BatchDeploy(BaseModel):
    """
    Deploys multiple Deployments in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* deployments
    foo-*
    # add some more
    extra-deployment-1, extra-deployment-2
    ```
    """

class BatchDeployStack(BaseModel):
    """
    Deploys multiple Stacks in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* stacks
    foo-*
    # add some more
    extra-stack-1, extra-stack-2
    ```
    """

class BatchDeployStackIfChanged(BaseModel):
    """
    Deploys multiple Stacks if changed in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* stacks
    foo-*
    # add some more
    extra-stack-1, extra-stack-2
    ```
    """

class BatchDestroyDeployment(BaseModel):
    """
    Destroys multiple Deployments in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* deployments
    foo-*
    # add some more
    extra-deployment-1, extra-deployment-2
    ```
    """

class BatchDestroyStack(BaseModel):
    """
    Destroys multiple Stacks in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    d
    Example:
    ```text
    # match all foo-* stacks
    foo-*
    # add some more
    extra-stack-1, extra-stack-2
    ```
    """

class BatchExecutionResponseItemErr(BaseModel):
    name: str
    error: _Serror

class BatchPullRepo(BaseModel):
    """
    Pulls multiple Repos in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* repos
    foo-*
    # add some more
    extra-repo-1, extra-repo-2
    ```
    """

class BatchPullStack(BaseModel):
    """
    Pulls multiple Stacks in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* stacks
    foo-*
    # add some more
    extra-stack-1, extra-stack-2
    ```
    """

class BatchRunAction(BaseModel):
    """
    Runs multiple Actions in parallel that match pattern. Response: [BatchExecutionResponse]
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* actions
    foo-*
    # add some more
    extra-action-1, extra-action-2
    ```
    """

class BatchRunBuild(BaseModel):
    """
    Runs multiple builds in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* builds
    foo-*
    # add some more
    extra-build-1, extra-build-2
    ```
    """

class BatchRunProcedure(BaseModel):
    """
    Runs multiple Procedures in parallel that match pattern. Response: [BatchExecutionResponse].
    """
    pattern: str
    """
    Id or name or wildcard pattern or regex.
    Supports multiline and comma delineated combinations of the above.
    
    Example:
    ```text
    # match all foo-* procedures
    foo-*
    # add some more
    extra-procedure-1, extra-procedure-2
    ```
    """

class BuildRepo(BaseModel):
    """
    Builds the target repo, using the attached builder. Response: [Update].
    
    Note. Repo must have builder attached at `builder_id`.
    
    1. Spawns the target builder instance (For AWS type. For Server type, just use CloneRepo).
    2. Clones the repo on the builder using `git clone https://{$token?}@github.com/${repo} -b ${branch}`.
    The token will only be used if a github account is specified,
    and must be declared in the periphery configuration on the builder instance.
    3. If `on_clone` and `on_pull` are specified, they will be executed.
    `on_clone` will be executed before `on_pull`.
    """
    repo: str
    """
    Id or name
    """

class BuildStatsDay(BaseModel):
    """
    Item in [GetBuildMonthlyStatsResponse]
    """
    time: float
    count: float
    ts: float

class CancelBuild(BaseModel):
    """
    Cancels the target build.
    Only does anything if the build is `building` when called.
    Response: [Update]
    """
    build: str
    """
    Can be id or name
    """

class CancelRepoBuild(BaseModel):
    """
    Cancels the target repo build.
    Only does anything if the repo build is `building` when called.
    Response: [Update]
    """
    repo: str
    """
    Can be id or name
    """

class ClearRepoCache(BaseModel):
    """
    Clears all repos from the Core repo cache. Admin only.
    Response: [Update]
    """
    pass
class CloneRepo(BaseModel):
    """
    Clones the target repo. Response: [Update].
    
    Note. Repo must have server attached at `server_id`.
    
    1. Clones the repo on the target server using `git clone https://{$token?}@github.com/${repo} -b ${branch}`.
    The token will only be used if a github account is specified,
    and must be declared in the periphery configuration on the target server.
    2. If `on_clone` and `on_pull` are specified, they will be executed.
    `on_clone` will be executed before `on_pull`.
    """
    repo: str
    """
    Id or name
    """

class CommitSync(BaseModel):
    """
    Exports matching resources, and writes to the target sync's resource file. Response: [Update]
    
    Note. Will fail if the Sync is not `managed`.
    """
    sync: str
    """
    Id or name
    """

class ConnectContainerExecQuery(BaseModel):
    """
    Query to connect to a container exec session (interactive shell over websocket) on the given server.
    TODO: Document calling.
    """
    server: str
    """
    Server Id or name
    """
    container: str
    """
    The container name
    """
    shell: str
    """
    The shell to use (eg. `sh` or `bash`)
    """

class ConnectDeploymentExecQuery(BaseModel):
    """
    Query to connect to a container exec session (interactive shell over websocket) on the given Deployment.
    This call will use access to the Deployment Terminal to permission the call.
    TODO: Document calling.
    """
    deployment: str
    """
    Deployment Id or name
    """
    shell: str
    """
    The shell to use (eg. `sh` or `bash`)
    """

class ConnectStackExecQuery(BaseModel):
    """
    Query to connect to a container exec session (interactive shell over websocket) on the given Stack / service.
    This call will use access to the Stack Terminal to permission the call.
    TODO: Document calling.
    """
    stack: str
    """
    Stack Id or name
    """
    service: str
    """
    The service name to connect to
    """
    shell: str
    """
    The shell to use (eg. `sh` or `bash`)
    """

class ConnectTerminalQuery(BaseModel):
    """
    Query to connect to a terminal (interactive shell over websocket) on the given server.
    TODO: Document calling.
    """
    server: str
    """
    Server Id or name
    """
    terminal: str
    """
    Each periphery can keep multiple terminals open.
    If a terminals with the specified name does not exist,
    the call will fail.
    Create a terminal using [CreateTerminal][super::write::server::CreateTerminal]
    """

class ContainerBlkioStatEntry(BaseModel):
    """
    Blkio stats entry.  This type is Linux-specific and omitted for Windows containers.
    """
    major: Optional[U64] = Field(default=None)
    minor: Optional[U64] = Field(default=None)
    op: Optional[str] = Field(default=None)
    value: Optional[U64] = Field(default=None)

class ContainerBlkioStats(BaseModel):
    """
    BlkioStats stores all IO service stats for data read and write.
    This type is Linux-specific and holds many fields that are specific to cgroups v1.
    On a cgroup v2 host, all fields other than `io_service_bytes_recursive` are omitted or `null`.
    This type is only populated on Linux and omitted for Windows containers.
    """
    io_service_bytes_recursive: Optional[List[ContainerBlkioStatEntry]] = Field(default=None)
    io_serviced_recursive: Optional[List[ContainerBlkioStatEntry]] = Field(default=None)
    """
    This field is only available when using Linux containers with cgroups v1.
    It is omitted or `null` when using cgroups v2.
    """
    io_queue_recursive: Optional[List[ContainerBlkioStatEntry]] = Field(default=None)
    """
    This field is only available when using Linux containers with cgroups v1.
    It is omitted or `null` when using cgroups v2.
    """
    io_service_time_recursive: Optional[List[ContainerBlkioStatEntry]] = Field(default=None)
    """
    This field is only available when using Linux containers with cgroups v1.
    It is omitted or `null` when using cgroups v2.
    """
    io_wait_time_recursive: Optional[List[ContainerBlkioStatEntry]] = Field(default=None)
    """
    This field is only available when using Linux containers with cgroups v1.
    It is omitted or `null` when using cgroups v2.
    """
    io_merged_recursive: Optional[List[ContainerBlkioStatEntry]] = Field(default=None)
    """
    This field is only available when using Linux containers with cgroups v1.
    It is omitted or `null` when using cgroups v2.
    """
    io_time_recursive: Optional[List[ContainerBlkioStatEntry]] = Field(default=None)
    """
    This field is only available when using Linux containers with cgroups v1.
    It is omitted or `null` when using cgroups v2.
    """
    sectors_recursive: Optional[List[ContainerBlkioStatEntry]] = Field(default=None)
    """
    This field is only available when using Linux containers with cgroups v1.
    It is omitted or `null` when using cgroups v2.
    """

class ContainerCpuUsage(BaseModel):
    """
    All CPU stats aggregated since container inception.
    """
    total_usage: Optional[U64] = Field(default=None)
    """
    Total CPU time consumed in nanoseconds (Linux) or 100's of nanoseconds (Windows).
    """
    percpu_usage: Optional[List[U64]] = Field(default=None)
    """
    Total CPU time (in nanoseconds) consumed per core (Linux).
    This field is Linux-specific when using cgroups v1.
    It is omitted when using cgroups v2 and Windows containers.
    """
    usage_in_kernelmode: Optional[U64] = Field(default=None)
    """
    Time (in nanoseconds) spent by tasks of the cgroup in kernel mode (Linux),
    or time spent (in 100's of nanoseconds) by all container processes in kernel mode (Windows).
    Not populated for Windows containers using Hyper-V isolation.
    """
    usage_in_usermode: Optional[U64] = Field(default=None)
    """
    Time (in nanoseconds) spent by tasks of the cgroup in user mode (Linux),
    or time spent (in 100's of nanoseconds) by all container processes in kernel mode (Windows).
    Not populated for Windows containers using Hyper-V isolation.
    """

class ContainerThrottlingData(BaseModel):
    """
    CPU throttling stats of the container.
    This type is Linux-specific and omitted for Windows containers.
    """
    periods: Optional[U64] = Field(default=None)
    """
    Number of periods with throttling active.
    """
    throttled_periods: Optional[U64] = Field(default=None)
    """
    Number of periods when the container hit its throttling limit.
    """
    throttled_time: Optional[U64] = Field(default=None)
    """
    Aggregated time (in nanoseconds) the container was throttled for.
    """

class ContainerCpuStats(BaseModel):
    """
    CPU related info of the container
    """
    cpu_usage: Optional[ContainerCpuUsage] = Field(default=None)
    """
    All CPU stats aggregated since container inception.
    """
    system_cpu_usage: Optional[U64] = Field(default=None)
    """
    System Usage.
    This field is Linux-specific and omitted for Windows containers.
    """
    online_cpus: Optional[int] = Field(default=None)
    """
    Number of online CPUs.
    This field is Linux-specific and omitted for Windows containers.
    """
    throttling_data: Optional[ContainerThrottlingData] = Field(default=None)
    """
    CPU throttling stats of the container.
    This type is Linux-specific and omitted for Windows containers.
    """

class ContainerMemoryStats(BaseModel):
    """
    Aggregates all memory stats since container inception on Linux.
    Windows returns stats for commit and private working set only.
    """
    usage: Optional[U64] = Field(default=None)
    """
    Current `res_counter` usage for memory.
    This field is Linux-specific and omitted for Windows containers.
    """
    max_usage: Optional[U64] = Field(default=None)
    """
    Maximum usage ever recorded.
    This field is Linux-specific and only supported on cgroups v1.
    It is omitted when using cgroups v2 and for Windows containers.
    """
    stats: Optional[Dict[str, U64]] = Field(default=None)
    """
    All the stats exported via memory.stat. when using cgroups v2.
    This field is Linux-specific and omitted for Windows containers.
    """
    failcnt: Optional[U64] = Field(default=None)
    """
    Number of times memory usage hits limits.  This field is Linux-specific and only supported on cgroups v1. It is omitted when using cgroups v2 and for Windows containers.
    """
    limit: Optional[U64] = Field(default=None)
    """
    This field is Linux-specific and omitted for Windows containers.
    """
    commitbytes: Optional[U64] = Field(default=None)
    """
    Committed bytes.
    This field is Windows-specific and omitted for Linux containers.
    """
    commitpeakbytes: Optional[U64] = Field(default=None)
    """
    Peak committed bytes.
    This field is Windows-specific and omitted for Linux containers.
    """
    privateworkingset: Optional[U64] = Field(default=None)
    """
    Private working set.
    This field is Windows-specific and omitted for Linux containers.
    """

class ContainerNetworkStats(BaseModel):
    """
    Aggregates the network stats of one container
    """
    rx_bytes: Optional[U64] = Field(default=None)
    """
    Bytes received. Windows and Linux.
    """
    rx_packets: Optional[U64] = Field(default=None)
    """
    Packets received. Windows and Linux.
    """
    rx_errors: Optional[U64] = Field(default=None)
    """
    Received errors. Not used on Windows.
    This field is Linux-specific and always zero for Windows containers.
    """
    rx_dropped: Optional[U64] = Field(default=None)
    """
    Incoming packets dropped. Windows and Linux.
    """
    tx_bytes: Optional[U64] = Field(default=None)
    """
    Bytes sent. Windows and Linux.
    """
    tx_packets: Optional[U64] = Field(default=None)
    """
    Packets sent. Windows and Linux.
    """
    tx_errors: Optional[U64] = Field(default=None)
    """
    Sent errors. Not used on Windows.
    This field is Linux-specific and always zero for Windows containers.
    """
    tx_dropped: Optional[U64] = Field(default=None)
    """
    Outgoing packets dropped. Windows and Linux.
    """
    endpoint_id: Optional[str] = Field(default=None)
    """
    Endpoint ID. Not used on Linux.
    This field is Windows-specific and omitted for Linux containers.
    """
    instance_id: Optional[str] = Field(default=None)
    """
    Instance ID. Not used on Linux.
    This field is Windows-specific and omitted for Linux containers.
    """

class ContainerPidsStats(BaseModel):
    """
    PidsStats contains Linux-specific stats of a container's process-IDs (PIDs).  This type is Linux-specific and omitted for Windows containers.
    """
    current: Optional[U64] = Field(default=None)
    """
    Current is the number of PIDs in the cgroup.
    """
    limit: Optional[U64] = Field(default=None)
    """
    Limit is the hard limit on the number of pids in the cgroup. A \"Limit\" of 0 means that there is no limit.
    """

class ContainerStorageStats(BaseModel):
    """
    StorageStats is the disk I/O stats for read/write on Windows.
    This type is Windows-specific and omitted for Linux containers.
    """
    read_count_normalized: Optional[U64] = Field(default=None)
    read_size_bytes: Optional[U64] = Field(default=None)
    write_count_normalized: Optional[U64] = Field(default=None)
    write_size_bytes: Optional[U64] = Field(default=None)

class Conversion(BaseModel):
    local: str
    """
    reference on the server.
    """
    container: str
    """
    reference in the container.
    """

class CopyAction(BaseModel):
    """
    Creates a new action with given `name` and the configuration
    of the action at the given `id`. Response: [Action].
    """
    name: str
    """
    The name of the new action.
    """
    id: str
    """
    The id of the action to copy.
    """

class CopyAlerter(BaseModel):
    """
    Creates a new alerter with given `name` and the configuration
    of the alerter at the given `id`. Response: [Alerter].
    """
    name: str
    """
    The name of the new alerter.
    """
    id: str
    """
    The id of the alerter to copy.
    """

class CopyBuild(BaseModel):
    """
    Creates a new build with given `name` and the configuration
    of the build at the given `id`. Response: [Build].
    """
    name: str
    """
    The name of the new build.
    """
    id: str
    """
    The id of the build to copy.
    """

class CopyBuilder(BaseModel):
    """
    Creates a new builder with given `name` and the configuration
    of the builder at the given `id`. Response: [Builder]
    """
    name: str
    """
    The name of the new builder.
    """
    id: str
    """
    The id of the builder to copy.
    """

class CopyDeployment(BaseModel):
    """
    Creates a new deployment with given `name` and the configuration
    of the deployment at the given `id`. Response: [Deployment]
    """
    name: str
    """
    The name of the new deployment.
    """
    id: str
    """
    The id of the deployment to copy.
    """

class CopyProcedure(BaseModel):
    """
    Creates a new procedure with given `name` and the configuration
    of the procedure at the given `id`. Response: [Procedure].
    """
    name: str
    """
    The name of the new procedure.
    """
    id: str
    """
    The id of the procedure to copy.
    """

class CopyRepo(BaseModel):
    """
    Creates a new repo with given `name` and the configuration
    of the repo at the given `id`. Response: [Repo].
    """
    name: str
    """
    The name of the new repo.
    """
    id: str
    """
    The id of the repo to copy.
    """

class CopyResourceSync(BaseModel):
    """
    Creates a new sync with given `name` and the configuration
    of the sync at the given `id`. Response: [ResourceSync].
    """
    name: str
    """
    The name of the new sync.
    """
    id: str
    """
    The id of the sync to copy.
    """

class CopyServer(BaseModel):
    """
    Creates a new server with given `name` and the configuration
    of the server at the given `id`. Response: [Server].
    """
    name: str
    """
    The name of the new server.
    """
    id: str
    """
    The id of the server to copy.
    """

class CopyStack(BaseModel):
    """
    Creates a new stack with given `name` and the configuration
    of the stack at the given `id`. Response: [Stack].
    """
    name: str
    """
    The name of the new stack.
    """
    id: str
    """
    The id of the stack to copy.
    """

class CreateAction(BaseModel):
    """
    Create a action. Response: [Action].
    """
    name: str
    """
    The name given to newly created action.
    """
    config: Optional[_PartialActionConfig] = Field(default=None)
    """
    Optional partial config to initialize the action with.
    """

class CreateActionWebhook(BaseModel):
    """
    Create a webhook on the github action attached to the Action resource.
    passed in request. Response: [CreateActionWebhookResponse]
    """
    action: str
    """
    Id or name
    """

class CreateAlerter(BaseModel):
    """
    Create an alerter. Response: [Alerter].
    """
    name: str
    """
    The name given to newly created alerter.
    """
    config: Optional[_PartialAlerterConfig] = Field(default=None)
    """
    Optional partial config to initialize the alerter with.
    """

class CreateApiKey(BaseModel):
    """
    Create an api key for the calling user.
    Response: [CreateApiKeyResponse].
    
    Note. After the response is served, there will be no way
    to get the secret later.
    """
    name: str
    """
    The name for the api key.
    """
    expires: Optional[I64] = Field(default=None)
    """
    A unix timestamp in millseconds specifying api key expire time.
    Default is 0, which means no expiry.
    """

class CreateApiKeyForServiceUser(BaseModel):
    """
    Admin only method to create an api key for a service user.
    Response: [CreateApiKeyResponse].
    """
    user_id: str
    """
    Must be service user
    """
    name: str
    """
    The name for the api key
    """
    expires: Optional[I64] = Field(default=None)
    """
    A unix timestamp in millseconds specifying api key expire time.
    Default is 0, which means no expiry.
    """

class CreateBuild(BaseModel):
    """
    Create a build. Response: [Build].
    """
    name: str
    """
    The name given to newly created build.
    """
    config: Optional[_PartialBuildConfig] = Field(default=None)
    """
    Optional partial config to initialize the build with.
    """

class CreateBuildWebhook(BaseModel):
    """
    Create a webhook on the github repo attached to the build
    passed in request. Response: [CreateBuildWebhookResponse]
    """
    build: str
    """
    Id or name
    """

class PartialBuilderConfigTypes(str, Enum):
    URL = "Url"
    SERVER = "Server"
    AWS = "Aws"

class PartialBuilderConfigUrl(BaseModel):
    type: Literal[PartialBuilderConfigTypes.URL] = PartialBuilderConfigTypes.URL
    params: _PartialUrlBuilderConfig

class PartialBuilderConfigServer(BaseModel):
    type: Literal[PartialBuilderConfigTypes.SERVER] = PartialBuilderConfigTypes.SERVER
    params: _PartialServerBuilderConfig

class PartialBuilderConfigAws(BaseModel):
    type: Literal[PartialBuilderConfigTypes.AWS] = PartialBuilderConfigTypes.AWS
    params: _PartialAwsBuilderConfig

# Partial representation of [BuilderConfig]
PartialBuilderConfig = Union[PartialBuilderConfigUrl, PartialBuilderConfigServer, PartialBuilderConfigAws]
class CreateBuilder(BaseModel):
    """
    Create a builder. Response: [Builder].
    """
    name: str
    """
    The name given to newly created builder.
    """
    config: Optional[PartialBuilderConfig] = Field(default=None)
    """
    Optional partial config to initialize the builder with.
    """

class CreateDeployment(BaseModel):
    """
    Create a deployment. Response: [Deployment].
    """
    name: str
    """
    The name given to newly created deployment.
    """
    config: Optional[_PartialDeploymentConfig] = Field(default=None)
    """
    Optional partial config to initialize the deployment with.
    """

class CreateDeploymentFromContainer(BaseModel):
    """
    Create a Deployment from an existing container. Response: [Deployment].
    """
    name: str
    """
    The name or id of the existing container.
    """
    server: str
    """
    The server id or name on which container exists.
    """

class CreateDockerRegistryAccount(BaseModel):
    """
    **Admin only.** Create a docker registry account.
    Response: [DockerRegistryAccount].
    """
    account: _PartialDockerRegistryAccount

class CreateGitProviderAccount(BaseModel):
    """
    **Admin only.** Create a git provider account.
    Response: [GitProviderAccount].
    """
    account: _PartialGitProviderAccount
    """
    The initial account config. Anything in the _id field will be ignored,
    as this is generated on creation.
    """

class CreateLocalUser(BaseModel):
    """
    **Admin only.** Create a local user.
    Response: [User].
    
    Note. Not to be confused with /auth/SignUpLocalUser.
    This method requires admin user credentials, and can
    bypass disabled user registration.
    """
    username: str
    """
    The username for the local user.
    """
    password: str
    """
    A password for the local user.
    """

class CreateNetwork(BaseModel):
    """
    Create a docker network on the server.
    Response: [Update]
    
    `docker network create {name}`
    """
    server: str
    """
    Server Id or name
    """
    name: str
    """
    The name of the network to create.
    """

class CreateProcedure(BaseModel):
    """
    Create a procedure. Response: [Procedure].
    """
    name: str
    """
    The name given to newly created build.
    """
    config: Optional[_PartialProcedureConfig] = Field(default=None)
    """
    Optional partial config to initialize the procedure with.
    """

class CreateRepo(BaseModel):
    """
    Create a repo. Response: [Repo].
    """
    name: str
    """
    The name given to newly created repo.
    """
    config: Optional[_PartialRepoConfig] = Field(default=None)
    """
    Optional partial config to initialize the repo with.
    """

class RepoWebhookAction(str, Enum):
    CLONE = "Clone"
    PULL = "Pull"
    BUILD = "Build"
class CreateRepoWebhook(BaseModel):
    """
    Create a webhook on the github repo attached to the (Komodo) Repo resource.
    passed in request. Response: [CreateRepoWebhookResponse]
    """
    repo: str
    """
    Id or name
    """
    action: RepoWebhookAction
    """
    "Clone" or "Pull" or "Build"
    """

class CreateResourceSync(BaseModel):
    """
    Create a sync. Response: [ResourceSync].
    """
    name: str
    """
    The name given to newly created sync.
    """
    config: Optional[_PartialResourceSyncConfig] = Field(default=None)
    """
    Optional partial config to initialize the sync with.
    """

class CreateServer(BaseModel):
    """
    Create a server. Response: [Server].
    """
    name: str
    """
    The name given to newly created server.
    """
    config: Optional[_PartialServerConfig] = Field(default=None)
    """
    Optional partial config to initialize the server with.
    """

class CreateServiceUser(BaseModel):
    """
    **Admin only.** Create a service user.
    Response: [User].
    """
    username: str
    """
    The username for the service user.
    """
    description: str
    """
    A description for the service user.
    """

class CreateStack(BaseModel):
    """
    Create a stack. Response: [Stack].
    """
    name: str
    """
    The name given to newly created stack.
    """
    config: Optional[_PartialStackConfig] = Field(default=None)
    """
    Optional partial config to initialize the stack with.
    """

class StackWebhookAction(str, Enum):
    REFRESH = "Refresh"
    DEPLOY = "Deploy"
class CreateStackWebhook(BaseModel):
    """
    Create a webhook on the github repo attached to the stack
    passed in request. Response: [CreateStackWebhookResponse]
    """
    stack: str
    """
    Id or name
    """
    action: StackWebhookAction
    """
    "Refresh" or "Deploy"
    """

class SyncWebhookAction(str, Enum):
    REFRESH = "Refresh"
    SYNC = "Sync"
class CreateSyncWebhook(BaseModel):
    """
    Create a webhook on the github repo attached to the sync
    passed in request. Response: [CreateSyncWebhookResponse]
    """
    sync: str
    """
    Id or name
    """
    action: SyncWebhookAction
    """
    "Refresh" or "Sync"
    """

class CreateTag(BaseModel):
    """
    Create a tag. Response: [Tag].
    """
    name: str
    """
    The name of the tag.
    """
    color: Optional[TagColor] = Field(default=None)
    """
    Tag color. Default: Slate.
    """

class TerminalRecreateMode(str, Enum):
    """
    Configures the behavior of [CreateTerminal] if the
    specified terminal name already exists.
    """
    NEVER = "Never"
    """
    Never kill the old terminal if it already exists.
    If the command is different, returns error.
    """
    ALWAYS = "Always"
    """
    Always kill the old terminal and create new one
    """
    DIFFERENTCOMMAND = "DifferentCommand"
    """
    Only kill and recreate if the command is different.
    """
class CreateTerminal(BaseModel):
    """
    Create a terminal on the server.
    Response: [NoData]
    """
    server: str
    """
    Server Id or name
    """
    name: str
    """
    The name of the terminal on the server to create.
    """
    command: str
    """
    The shell command (eg `bash`) to init the shell.
    
    This can also include args:
    `docker exec -it container sh`
    
    Default: `bash`
    """
    recreate: Optional[TerminalRecreateMode] = Field(default=None)
    """
    Default: `Never`
    """

class CreateUserGroup(BaseModel):
    """
    **Admin only.** Create a user group. Response: [UserGroup]
    """
    name: str
    """
    The name to assign to the new UserGroup
    """

class CreateVariable(BaseModel):
    """
    **Admin only.** Create variable. Response: [Variable].
    """
    name: str
    """
    The name of the variable to create.
    """
    value: Optional[str] = Field(default=None)
    """
    The initial value of the variable. defualt: "".
    """
    description: Optional[str] = Field(default=None)
    """
    The initial value of the description. default: "".
    """
    is_secret: Optional[bool] = Field(default=None)
    """
    Whether to make this a secret variable.
    """

class CustomAlerterEndpoint(BaseModel):
    """
    Configuration for a Custom alerter endpoint.
    """
    url: str
    """
    The http/s endpoint to send the POST to
    """

class DeleteAction(BaseModel):
    """
    Deletes the action at the given id, and returns the deleted action.
    Response: [Action]
    """
    id: str
    """
    The id or name of the action to delete.
    """

class DeleteActionWebhook(BaseModel):
    """
    Delete the webhook on the github action attached to the Action resource.
    passed in request. Response: [DeleteActionWebhookResponse]
    """
    action: str
    """
    Id or name
    """

class DeleteAlerter(BaseModel):
    """
    Deletes the alerter at the given id, and returns the deleted alerter.
    Response: [Alerter]
    """
    id: str
    """
    The id or name of the alerter to delete.
    """

class DeleteAllTerminals(BaseModel):
    """
    Delete all terminals on the server.
    Response: [NoData]
    """
    server: str
    """
    Server Id or name
    """

class DeleteApiKey(BaseModel):
    """
    Delete an api key for the calling user.
    Response: [NoData]
    """
    key: str
    """
    The key which the user intends to delete.
    """

class DeleteApiKeyForServiceUser(BaseModel):
    """
    Admin only method to delete an api key for a service user.
    Response: [NoData].
    """
    key: str

class DeleteBuild(BaseModel):
    """
    Deletes the build at the given id, and returns the deleted build.
    Response: [Build]
    """
    id: str
    """
    The id or name of the build to delete.
    """

class DeleteBuildWebhook(BaseModel):
    """
    Delete a webhook on the github repo attached to the build
    passed in request. Response: [CreateBuildWebhookResponse]
    """
    build: str
    """
    Id or name
    """

class DeleteBuilder(BaseModel):
    """
    Deletes the builder at the given id, and returns the deleted builder.
    Response: [Builder]
    """
    id: str
    """
    The id or name of the builder to delete.
    """

class DeleteDeployment(BaseModel):
    """
    Deletes the deployment at the given id, and returns the deleted deployment.
    Response: [Deployment].
    
    Note. If the associated container is running, it will be deleted as part of
    the deployment clean up.
    """
    id: str
    """
    The id or name of the deployment to delete.
    """

class DeleteDockerRegistryAccount(BaseModel):
    """
    **Admin only.** Delete a docker registry account.
    Response: [DockerRegistryAccount].
    """
    id: str
    """
    The id of the docker registry account to delete
    """

class DeleteGitProviderAccount(BaseModel):
    """
    **Admin only.** Delete a git provider account.
    Response: [DeleteGitProviderAccountResponse].
    """
    id: str
    """
    The id of the git provider to delete
    """

class DeleteImage(BaseModel):
    """
    Delete a docker image.
    Response: [Update]
    """
    server: str
    """
    Id or name.
    """
    name: str
    """
    The name of the image to delete.
    """

class DeleteNetwork(BaseModel):
    """
    Delete a docker network.
    Response: [Update]
    """
    server: str
    """
    Id or name.
    """
    name: str
    """
    The name of the network to delete.
    """

class DeleteProcedure(BaseModel):
    """
    Deletes the procedure at the given id, and returns the deleted procedure.
    Response: [Procedure]
    """
    id: str
    """
    The id or name of the procedure to delete.
    """

class DeleteRepo(BaseModel):
    """
    Deletes the repo at the given id, and returns the deleted repo.
    Response: [Repo]
    """
    id: str
    """
    The id or name of the repo to delete.
    """

class DeleteRepoWebhook(BaseModel):
    """
    Delete the webhook on the github repo attached to the (Komodo) Repo resource.
    passed in request. Response: [DeleteRepoWebhookResponse]
    """
    repo: str
    """
    Id or name
    """
    action: RepoWebhookAction
    """
    "Clone" or "Pull" or "Build"
    """

class DeleteResourceSync(BaseModel):
    """
    Deletes the sync at the given id, and returns the deleted sync.
    Response: [ResourceSync]
    """
    id: str
    """
    The id or name of the sync to delete.
    """

class DeleteServer(BaseModel):
    """
    Deletes the server at the given id, and returns the deleted server.
    Response: [Server]
    """
    id: str
    """
    The id or name of the server to delete.
    """

class DeleteStack(BaseModel):
    """
    Deletes the stack at the given id, and returns the deleted stack.
    Response: [Stack]
    """
    id: str
    """
    The id or name of the stack to delete.
    """

class DeleteStackWebhook(BaseModel):
    """
    Delete the webhook on the github repo attached to the stack
    passed in request. Response: [DeleteStackWebhookResponse]
    """
    stack: str
    """
    Id or name
    """
    action: StackWebhookAction
    """
    "Refresh" or "Deploy"
    """

class DeleteSyncWebhook(BaseModel):
    """
    Delete the webhook on the github repo attached to the sync
    passed in request. Response: [DeleteSyncWebhookResponse]
    """
    sync: str
    """
    Id or name
    """
    action: SyncWebhookAction
    """
    "Refresh" or "Sync"
    """

class DeleteTag(BaseModel):
    """
    Delete a tag, and return the deleted tag. Response: [Tag].
    
    Note. Will also remove this tag from all attached resources.
    """
    id: str
    """
    The id of the tag to delete.
    """

class DeleteTerminal(BaseModel):
    """
    Delete a terminal on the server.
    Response: [NoData]
    """
    server: str
    """
    Server Id or name
    """
    terminal: str
    """
    The name of the terminal on the server to delete.
    """

class DeleteUser(BaseModel):
    """
    **Admin only**. Delete a user.
    Admins can delete any non-admin user.
    Only Super Admin can delete an admin.
    No users can delete a Super Admin user.
    User cannot delete themselves.
    Response: [NoData].
    """
    user: str
    """
    User id or username
    """

class DeleteUserGroup(BaseModel):
    """
    **Admin only.** Delete a user group. Response: [UserGroup]
    """
    id: str
    """
    The id of the UserGroup
    """

class DeleteVariable(BaseModel):
    """
    **Admin only.** Delete a variable. Response: [Variable].
    """
    name: str

class DeleteVolume(BaseModel):
    """
    Delete a docker volume.
    Response: [Update]
    """
    server: str
    """
    Id or name.
    """
    name: str
    """
    The name of the volume to delete.
    """

class Deploy(BaseModel):
    """
    Deploys the container for the target deployment. Response: [Update].
    
    1. Pulls the image onto the target server.
    2. If the container is already running,
    it will be stopped and removed using `docker container rm ${container_name}`.
    3. The container will be run using `docker run {...params}`,
    where params are determined by the deployment's configuration.
    """
    deployment: str
    """
    Name or id
    """
    stop_signal: Optional[TerminationSignal] = Field(default=None)
    """
    Override the default termination signal specified in the deployment.
    Only used when deployment needs to be taken down before redeploy.
    """
    stop_time: Optional[int] = Field(default=None)
    """
    Override the default termination max time.
    Only used when deployment needs to be taken down before redeploy.
    """

class DeployStack(BaseModel):
    """
    Deploys the target stack. `docker compose up`. Response: [Update]
    """
    stack: str
    """
    Id or name
    """
    services: Optional[List[str]] = Field(default=None)
    """
    Filter to only deploy specific services.
    If empty, will deploy all services.
    """
    stop_time: Optional[int] = Field(default=None)
    """
    Override the default termination max time.
    Only used if the stack needs to be taken down first.
    """

class DeployStackIfChanged(BaseModel):
    """
    Checks deployed contents vs latest contents,
    and only if any changes found
    will `docker compose up`. Response: [Update]
    """
    stack: str
    """
    Id or name
    """
    stop_time: Optional[int] = Field(default=None)
    """
    Override the default termination max time.
    Only used if the stack needs to be taken down first.
    """

class DestroyContainer(BaseModel):
    """
    Stops and destroys the container on the target server.
    Reponse: [Update].
    
    1. The container is stopped and removed using `docker container rm ${container_name}`.
    """
    server: str
    """
    Name or id
    """
    container: str
    """
    The container name
    """
    signal: Optional[TerminationSignal] = Field(default=None)
    """
    Override the default termination signal.
    """
    time: Optional[int] = Field(default=None)
    """
    Override the default termination max time.
    """

class DestroyDeployment(BaseModel):
    """
    Stops and destroys the container for the target deployment.
    Reponse: [Update].
    
    1. The container is stopped and removed using `docker container rm ${container_name}`.
    """
    deployment: str
    """
    Name or id.
    """
    signal: Optional[TerminationSignal] = Field(default=None)
    """
    Override the default termination signal specified in the deployment.
    """
    time: Optional[int] = Field(default=None)
    """
    Override the default termination max time.
    """

class DestroyStack(BaseModel):
    """
    Destoys the target stack. `docker compose down`. Response: [Update]
    """
    stack: str
    """
    Id or name
    """
    services: Optional[List[str]] = Field(default=None)
    """
    Filter to only destroy specific services.
    If empty, will destroy all services.
    """
    remove_orphans: Optional[bool] = Field(default=None)
    """
    Pass `--remove-orphans`
    """
    stop_time: Optional[int] = Field(default=None)
    """
    Override the default termination max time.
    """

class DiscordAlerterEndpoint(BaseModel):
    """
    Configuration for a Discord alerter.
    """
    url: str
    """
    The Discord webhook url
    """

class EnvironmentVar(BaseModel):
    variable: str
    value: str

class ExchangeForJwt(BaseModel):
    """
    Exchange a single use exchange token (safe for transport in url query)
    for a jwt.
    Response: [ExchangeForJwtResponse].
    """
    token: str
    """
    The 'exchange token'
    """

class ExecuteContainerExecBody(BaseModel):
    """
    Execute a command in the given containers shell.
    TODO: Document calling.
    """
    server: str
    """
    Server Id or name
    """
    container: str
    """
    The container name
    """
    shell: str
    """
    The shell to use (eg. `sh` or `bash`)
    """
    command: str
    """
    The command to execute.
    """

class ExecuteDeploymentExecBody(BaseModel):
    """
    Execute a command in the given containers shell.
    TODO: Document calling.
    """
    deployment: str
    """
    Deployment Id or name
    """
    shell: str
    """
    The shell to use (eg. `sh` or `bash`)
    """
    command: str
    """
    The command to execute.
    """

class ExecuteStackExecBody(BaseModel):
    """
    Execute a command in the given containers shell.
    TODO: Document calling.
    """
    stack: str
    """
    Stack Id or name
    """
    service: str
    """
    The service name to connect to
    """
    shell: str
    """
    The shell to use (eg. `sh` or `bash`)
    """
    command: str
    """
    The command to execute.
    """

class ExecuteTerminalBody(BaseModel):
    """
    Execute a terminal command on the given server.
    TODO: Document calling.
    """
    server: str
    """
    Server Id or name
    """
    terminal: str
    """
    The name of the terminal on the server to use to execute.
    If the terminal at name exists, it will be used to execute the command.
    Otherwise, a new terminal will be created for this command, which will
    persist until it exits or is deleted.
    """
    command: str
    """
    The command to execute.
    """

class ExportAllResourcesToToml(BaseModel):
    """
    Get pretty formatted monrun sync toml for all resources
    which the user has permissions to view.
    Response: [TomlResponse].
    """
    include_resources: bool
    """
    Whether to include any resources (servers, stacks, etc.)
    in the exported contents.
    Default: `true`
    """
    tags: Optional[List[str]] = Field(default=None)
    """
    Filter resources by tag.
    Accepts tag name or id. Empty array will not filter by tag.
    """
    include_variables: Optional[bool] = Field(default=None)
    """
    Whether to include variables in the exported contents.
    Default: false
    """
    include_user_groups: Optional[bool] = Field(default=None)
    """
    Whether to include user groups in the exported contents.
    Default: false
    """

class ExportResourcesToToml(BaseModel):
    """
    Get pretty formatted monrun sync toml for specific resources and user groups.
    Response: [TomlResponse].
    """
    targets: Optional[List[ResourceTarget]] = Field(default=None)
    """
    The targets to include in the export.
    """
    user_groups: Optional[List[str]] = Field(default=None)
    """
    The user group names or ids to include in the export.
    """
    include_variables: Optional[bool] = Field(default=None)
    """
    Whether to include variables
    """

class FindUser(BaseModel):
    """
    **Admin only.**
    Find a user.
    Response: [FindUserResponse]
    """
    user: str
    """
    Id or username
    """

class FullContainerStats(BaseModel):
    """
    Statistics sample for a container.
    """
    name: str
    """
    Name of the container
    """
    id: Optional[str] = Field(default=None)
    """
    ID of the container
    """
    read: Optional[str] = Field(default=None)
    """
    Date and time at which this sample was collected.
    The value is formatted as [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) with nano-seconds.
    """
    preread: Optional[str] = Field(default=None)
    """
    Date and time at which this first sample was collected.
    This field is not propagated if the \"one-shot\" option is set.
    If the \"one-shot\" option is set, this field may be omitted, empty,
    or set to a default date (`0001-01-01T00:00:00Z`).
    The value is formatted as [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) with nano-seconds.
    """
    pids_stats: Optional[ContainerPidsStats] = Field(default=None)
    """
    PidsStats contains Linux-specific stats of a container's process-IDs (PIDs).
    This type is Linux-specific and omitted for Windows containers.
    """
    blkio_stats: Optional[ContainerBlkioStats] = Field(default=None)
    """
    BlkioStats stores all IO service stats for data read and write.
    This type is Linux-specific and holds many fields that are specific to cgroups v1.
    On a cgroup v2 host, all fields other than `io_service_bytes_recursive` are omitted or `null`.
    This type is only populated on Linux and omitted for Windows containers.
    """
    num_procs: Optional[int] = Field(default=None)
    """
    The number of processors on the system.
    This field is Windows-specific and always zero for Linux containers.
    """
    storage_stats: Optional[ContainerStorageStats] = Field(default=None)
    cpu_stats: Optional[ContainerCpuStats] = Field(default=None)
    precpu_stats: Optional[ContainerCpuStats] = Field(default=None)
    memory_stats: Optional[ContainerMemoryStats] = Field(default=None)
    networks: Optional[Dict[str, ContainerNetworkStats]] = Field(default=None)
    """
    Network statistics for the container per interface.  This field is omitted if the container has no networking enabled.
    """

class GetAction(BaseModel):
    """
    Get a specific action. Response: [Action].
    """
    action: str
    """
    Id or name
    """

class GetActionActionState(BaseModel):
    """
    Get current action state for the action. Response: [ActionActionState].
    """
    action: str
    """
    Id or name
    """

class GetActionsSummary(BaseModel):
    """
    Gets a summary of data relating to all actions.
    Response: [GetActionsSummaryResponse].
    """
    pass
class GetActionsSummaryResponse(BaseModel):
    """
    Response for [GetActionsSummary].
    """
    total: int
    """
    The total number of actions.
    """
    ok: int
    """
    The number of actions with Ok state.
    """
    running: int
    """
    The number of actions currently running.
    """
    failed: int
    """
    The number of actions with failed state.
    """
    unknown: int
    """
    The number of actions with unknown state.
    """

class GetAlert(BaseModel):
    """
    Get an alert: Response: [Alert].
    """
    id: str

class GetAlerter(BaseModel):
    """
    Get a specific alerter. Response: [Alerter].
    """
    alerter: str
    """
    Id or name
    """

class GetAlertersSummary(BaseModel):
    """
    Gets a summary of data relating to all alerters.
    Response: [GetAlertersSummaryResponse].
    """
    pass
class GetAlertersSummaryResponse(BaseModel):
    """
    Response for [GetAlertersSummary].
    """
    total: int

class GetBuild(BaseModel):
    """
    Get a specific build. Response: [Build].
    """
    build: str
    """
    Id or name
    """

class GetBuildActionState(BaseModel):
    """
    Get current action state for the build. Response: [BuildActionState].
    """
    build: str
    """
    Id or name
    """

class GetBuildMonthlyStats(BaseModel):
    """
    Gets summary and timeseries breakdown of the last months build count / time for charting.
    Response: [GetBuildMonthlyStatsResponse].
    
    Note. This method is paginated. One page is 30 days of data.
    Query for older pages by incrementing the page, starting at 0.
    """
    page: Optional[int] = Field(default=None)
    """
    Query for older data by incrementing the page.
    `page: 0` is the default, and will return the most recent data.
    """

class GetBuildMonthlyStatsResponse(BaseModel):
    """
    Response for [GetBuildMonthlyStats].
    """
    total_time: float
    total_count: float
    days: List[BuildStatsDay]

class GetBuildWebhookEnabled(BaseModel):
    """
    Get whether a Build's target repo has a webhook for the build configured. Response: [GetBuildWebhookEnabledResponse].
    """
    build: str
    """
    Id or name
    """

class GetBuildWebhookEnabledResponse(BaseModel):
    """
    Response for [GetBuildWebhookEnabled]
    """
    managed: bool
    """
    Whether the repo webhooks can even be managed.
    The repo owner must be in `github_webhook_app.owners` list to be managed.
    """
    enabled: bool
    """
    Whether pushes to branch trigger build. Will always be false if managed is false.
    """

class GetBuilder(BaseModel):
    """
    Get a specific builder by id or name. Response: [Builder].
    """
    builder: str
    """
    Id or name
    """

class GetBuildersSummary(BaseModel):
    """
    Gets a summary of data relating to all builders.
    Response: [GetBuildersSummaryResponse].
    """
    pass
class GetBuildersSummaryResponse(BaseModel):
    """
    Response for [GetBuildersSummary].
    """
    total: int
    """
    The total number of builders.
    """

class GetBuildsSummary(BaseModel):
    """
    Gets a summary of data relating to all builds.
    Response: [GetBuildsSummaryResponse].
    """
    pass
class GetBuildsSummaryResponse(BaseModel):
    """
    Response for [GetBuildsSummary].
    """
    total: int
    """
    The total number of builds in Komodo.
    """
    ok: int
    """
    The number of builds with Ok state.
    """
    failed: int
    """
    The number of builds with Failed state.
    """
    building: int
    """
    The number of builds currently building.
    """
    unknown: int
    """
    The number of builds with unknown state.
    """

class GetContainerLog(BaseModel):
    """
    Get the container log's tail, split by stdout/stderr.
    Response: [Log].
    
    Note. This call will hit the underlying server directly for most up to date log.
    """
    server: str
    """
    Id or name
    """
    container: str
    """
    The container name
    """
    tail: U64
    """
    The number of lines of the log tail to include.
    Default: 100.
    Max: 5000.
    """
    timestamps: Optional[bool] = Field(default=None)
    """
    Enable `--timestamps`
    """

class GetCoreInfo(BaseModel):
    """
    Get info about the core api configuration.
    Response: [GetCoreInfoResponse].
    """
    pass
class GetCoreInfoResponse(BaseModel):
    """
    Response for [GetCoreInfo].
    """
    title: str
    """
    The title assigned to this core api.
    """
    monitoring_interval: Timelength
    """
    The monitoring interval of this core api.
    """
    webhook_base_url: str
    """
    The webhook base url.
    """
    transparent_mode: bool
    """
    Whether transparent mode is enabled, which gives all users read access to all resources.
    """
    ui_write_disabled: bool
    """
    Whether UI write access should be disabled
    """
    disable_non_admin_create: bool
    """
    Whether non admins can create resources
    """
    disable_confirm_dialog: bool
    """
    Whether confirm dialog should be disabled
    """
    github_webhook_owners: List[str]
    """
    The repo owners for which github webhook management api is available
    """
    disable_websocket_reconnect: bool
    """
    Whether to disable websocket automatic reconnect.
    """
    enable_fancy_toml: bool
    """
    Whether to enable fancy toml highlighting.
    """
    timezone: str
    """
    TZ identifier Core is using, if manually set.
    """

class GetDeployment(BaseModel):
    """
    Get a specific deployment by name or id. Response: [Deployment].
    """
    deployment: str
    """
    Id or name
    """

class GetDeploymentActionState(BaseModel):
    """
    Get current action state for the deployment.
    Response: [DeploymentActionState].
    """
    deployment: str
    """
    Id or name
    """

class GetDeploymentContainer(BaseModel):
    """
    Get the container, including image / status, of the target deployment.
    Response: [GetDeploymentContainerResponse].
    
    Note. This does not hit the server directly. The status comes from an
    in memory cache on the core, which hits the server periodically
    to keep it up to date.
    """
    deployment: str
    """
    Id or name
    """

class GetDeploymentContainerResponse(BaseModel):
    """
    Response for [GetDeploymentContainer].
    """
    state: DeploymentState
    container: Optional[ContainerListItem] = Field(default=None)

class GetDeploymentLog(BaseModel):
    """
    Get the deployment log's tail, split by stdout/stderr.
    Response: [Log].
    
    Note. This call will hit the underlying server directly for most up to date log.
    """
    deployment: str
    """
    Id or name
    """
    tail: U64
    """
    The number of lines of the log tail to include.
    Default: 100.
    Max: 5000.
    """
    timestamps: Optional[bool] = Field(default=None)
    """
    Enable `--timestamps`
    """

class GetDeploymentStats(BaseModel):
    """
    Get the deployment container's stats using `docker stats`.
    Response: [GetDeploymentStatsResponse].
    
    Note. This call will hit the underlying server directly for most up to date stats.
    """
    deployment: str
    """
    Id or name
    """

class GetDeploymentsSummary(BaseModel):
    """
    Gets a summary of data relating to all deployments.
    Response: [GetDeploymentsSummaryResponse].
    """
    pass
class GetDeploymentsSummaryResponse(BaseModel):
    """
    Response for [GetDeploymentsSummary].
    """
    total: I64
    """
    The total number of Deployments
    """
    running: I64
    """
    The number of Deployments with Running state
    """
    stopped: I64
    """
    The number of Deployments with Stopped or Paused state
    """
    not_deployed: I64
    """
    The number of Deployments with NotDeployed state
    """
    unhealthy: I64
    """
    The number of Deployments with Restarting or Dead or Created (other) state
    """
    unknown: I64
    """
    The number of Deployments with Unknown state
    """

class GetDockerContainersSummary(BaseModel):
    """
    Gets a summary of data relating to all containers.
    Response: [GetDockerContainersSummaryResponse].
    """
    pass
class GetDockerContainersSummaryResponse(BaseModel):
    """
    Response for [GetDockerContainersSummary]
    """
    total: int
    """
    The total number of Containers
    """
    running: int
    """
    The number of Containers with Running state
    """
    stopped: int
    """
    The number of Containers with Stopped or Paused or Created state
    """
    unhealthy: int
    """
    The number of Containers with Restarting or Dead state
    """
    unknown: int
    """
    The number of Containers with Unknown state
    """

class GetDockerRegistryAccount(BaseModel):
    """
    Get a specific docker registry account.
    Response: [GetDockerRegistryAccountResponse].
    """
    id: str

class GetGitProviderAccount(BaseModel):
    """
    Get a specific git provider account.
    Response: [GetGitProviderAccountResponse].
    """
    id: str

class GetHistoricalServerStats(BaseModel):
    """
    Paginated endpoint serving historical (timeseries) server stats for graphing.
    Response: [GetHistoricalServerStatsResponse].
    """
    server: str
    """
    Id or name
    """
    granularity: Timelength
    """
    The granularity of the data.
    """
    page: Optional[int] = Field(default=None)
    """
    Page of historical data. Default is 0, which is the most recent data.
    Use with the `next_page` field of the response.
    """

class SystemStatsRecord(BaseModel):
    """
    System stats stored on the database.
    """
    ts: I64
    """
    Unix timestamp in milliseconds
    """
    sid: str
    """
    Server id
    """
    cpu_perc: float
    """
    Cpu usage percentage
    """
    load_average: Optional[SystemLoadAverage] = Field(default=None)
    """
    Load average (1m, 5m, 15m)
    """
    mem_used_gb: float
    """
    Memory used in GB
    """
    mem_total_gb: float
    """
    Total memory in GB
    """
    disk_used_gb: float
    """
    Disk used in GB
    """
    disk_total_gb: float
    """
    Total disk size in GB
    """
    disks: List[SingleDiskUsage]
    """
    Breakdown of individual disks, including their usage, total size, and mount point
    """
    network_ingress_bytes: Optional[float] = Field(default=None)
    """
    Total network ingress in bytes
    """
    network_egress_bytes: Optional[float] = Field(default=None)
    """
    Total network egress in bytes
    """

class GetHistoricalServerStatsResponse(BaseModel):
    """
    Response to [GetHistoricalServerStats].
    """
    stats: List[SystemStatsRecord]
    """
    The timeseries page of data.
    """
    next_page: Optional[int] = Field(default=None)
    """
    If there is a next page of data, pass this to `page` to get it.
    """

class GetLoginOptions(BaseModel):
    """
    Non authenticated route to see the available options
    users have to login to Komodo, eg. local auth, github, google.
    Response: [GetLoginOptionsResponse].
    """
    pass
class GetLoginOptionsResponse(BaseModel):
    """
    The response for [GetLoginOptions].
    """
    local: bool
    """
    Whether local auth is enabled.
    """
    github: bool
    """
    Whether github login is enabled.
    """
    google: bool
    """
    Whether google login is enabled.
    """
    oidc: bool
    """
    Whether OIDC login is enabled.
    """
    registration_disabled: bool
    """
    Whether user registration (Sign Up) has been disabled
    """

class GetPeripheryVersion(BaseModel):
    """
    Get the version of the Komodo Periphery agent on the target server.
    Response: [GetPeripheryVersionResponse].
    """
    server: str
    """
    Id or name
    """

class GetPeripheryVersionResponse(BaseModel):
    """
    Response for [GetPeripheryVersion].
    """
    version: str
    """
    The version of periphery.
    """

class GetPermission(BaseModel):
    """
    Gets the calling user's permission level on a specific resource.
    Factors in any UserGroup's permissions they may be a part of.
    Response: [PermissionLevel]
    """
    target: ResourceTarget
    """
    The target to get user permission on.
    """

class GetProcedure(BaseModel):
    """
    Get a specific procedure. Response: [Procedure].
    """
    procedure: str
    """
    Id or name
    """

class GetProcedureActionState(BaseModel):
    """
    Get current action state for the procedure. Response: [ProcedureActionState].
    """
    procedure: str
    """
    Id or name
    """

class GetProceduresSummary(BaseModel):
    """
    Gets a summary of data relating to all procedures.
    Response: [GetProceduresSummaryResponse].
    """
    pass
class GetProceduresSummaryResponse(BaseModel):
    """
    Response for [GetProceduresSummary].
    """
    total: int
    """
    The total number of procedures.
    """
    ok: int
    """
    The number of procedures with Ok state.
    """
    running: int
    """
    The number of procedures currently running.
    """
    failed: int
    """
    The number of procedures with failed state.
    """
    unknown: int
    """
    The number of procedures with unknown state.
    """

class GetRepo(BaseModel):
    """
    Get a specific repo. Response: [Repo].
    """
    repo: str
    """
    Id or name
    """

class GetRepoActionState(BaseModel):
    """
    Get current action state for the repo. Response: [RepoActionState].
    """
    repo: str
    """
    Id or name
    """

class GetRepoWebhooksEnabled(BaseModel):
    """
    Get a target Repo's configured webhooks. Response: [GetRepoWebhooksEnabledResponse].
    """
    repo: str
    """
    Id or name
    """

class GetRepoWebhooksEnabledResponse(BaseModel):
    """
    Response for [GetRepoWebhooksEnabled]
    """
    managed: bool
    """
    Whether the repo webhooks can even be managed.
    The repo owner must be in `github_webhook_app.owners` list to be managed.
    """
    clone_enabled: bool
    """
    Whether pushes to branch trigger clone. Will always be false if managed is false.
    """
    pull_enabled: bool
    """
    Whether pushes to branch trigger pull. Will always be false if managed is false.
    """
    build_enabled: bool
    """
    Whether pushes to branch trigger build. Will always be false if managed is false.
    """

class GetReposSummary(BaseModel):
    """
    Gets a summary of data relating to all repos.
    Response: [GetReposSummaryResponse].
    """
    pass
class GetReposSummaryResponse(BaseModel):
    """
    Response for [GetReposSummary]
    """
    total: int
    """
    The total number of repos
    """
    ok: int
    """
    The number of repos with Ok state.
    """
    cloning: int
    """
    The number of repos currently cloning.
    """
    pulling: int
    """
    The number of repos currently pulling.
    """
    building: int
    """
    The number of repos currently building.
    """
    failed: int
    """
    The number of repos with failed state.
    """
    unknown: int
    """
    The number of repos with unknown state.
    """

class GetResourceMatchingContainer(BaseModel):
    """
    Find the attached resource for a container. Either Deployment or Stack. Response: [GetResourceMatchingContainerResponse].
    """
    server: str
    """
    Id or name
    """
    container: str
    """
    The container name
    """

class GetResourceMatchingContainerResponse(BaseModel):
    """
    Response for [GetResourceMatchingContainer]. Resource is either Deployment, Stack, or None.
    """
    resource: Optional[ResourceTarget] = Field(default=None)

class GetResourceSync(BaseModel):
    """
    Get a specific sync. Response: [ResourceSync].
    """
    sync: str
    """
    Id or name
    """

class GetResourceSyncActionState(BaseModel):
    """
    Get current action state for the sync. Response: [ResourceSyncActionState].
    """
    sync: str
    """
    Id or name
    """

class GetResourceSyncsSummary(BaseModel):
    """
    Gets a summary of data relating to all syncs.
    Response: [GetResourceSyncsSummaryResponse].
    """
    pass
class GetResourceSyncsSummaryResponse(BaseModel):
    """
    Response for [GetResourceSyncsSummary]
    """
    total: int
    """
    The total number of syncs
    """
    ok: int
    """
    The number of syncs with Ok state.
    """
    syncing: int
    """
    The number of syncs currently syncing.
    """
    pending: int
    """
    The number of syncs with pending updates
    """
    failed: int
    """
    The number of syncs with failed state.
    """
    unknown: int
    """
    The number of syncs with unknown state.
    """

class GetServer(BaseModel):
    """
    Get a specific server. Response: [Server].
    """
    server: str
    """
    Id or name
    """

class GetServerActionState(BaseModel):
    """
    Get current action state for the servers. Response: [ServerActionState].
    """
    server: str
    """
    Id or name
    """

class GetServerState(BaseModel):
    """
    Get the state of the target server. Response: [GetServerStateResponse].
    """
    server: str
    """
    Id or name
    """

class GetServerStateResponse(BaseModel):
    """
    The response for [GetServerState].
    """
    status: ServerState
    """
    The server status.
    """

class GetServersSummary(BaseModel):
    """
    Gets a summary of data relating to all servers.
    Response: [GetServersSummaryResponse].
    """
    pass
class GetServersSummaryResponse(BaseModel):
    """
    Response for [GetServersSummary].
    """
    total: I64
    """
    The total number of servers.
    """
    healthy: I64
    """
    The number of healthy (`status: OK`) servers.
    """
    warning: I64
    """
    The number of servers with warnings (e.g., version mismatch).
    """
    unhealthy: I64
    """
    The number of unhealthy servers.
    """
    disabled: I64
    """
    The number of disabled servers.
    """

class GetStack(BaseModel):
    """
    Get a specific stack. Response: [Stack].
    """
    stack: str
    """
    Id or name
    """

class GetStackActionState(BaseModel):
    """
    Get current action state for the stack. Response: [StackActionState].
    """
    stack: str
    """
    Id or name
    """

class GetStackLog(BaseModel):
    """
    Get a stack's logs. Filter down included services. Response: [GetStackLogResponse].
    
    Note. This call will hit the underlying server directly for most up to date log.
    """
    stack: str
    """
    Id or name
    """
    services: List[str]
    """
    Filter the logs to only ones from specific services.
    If empty, will include logs from all services.
    """
    tail: U64
    """
    The number of lines of the log tail to include.
    Default: 100.
    Max: 5000.
    """
    timestamps: Optional[bool] = Field(default=None)
    """
    Enable `--timestamps`
    """

class GetStackWebhooksEnabled(BaseModel):
    """
    Get a target stack's configured webhooks. Response: [GetStackWebhooksEnabledResponse].
    """
    stack: str
    """
    Id or name
    """

class GetStackWebhooksEnabledResponse(BaseModel):
    """
    Response for [GetStackWebhooksEnabled]
    """
    managed: bool
    """
    Whether the repo webhooks can even be managed.
    The repo owner must be in `github_webhook_app.owners` list to be managed.
    """
    refresh_enabled: bool
    """
    Whether pushes to branch trigger refresh. Will always be false if managed is false.
    """
    deploy_enabled: bool
    """
    Whether pushes to branch trigger stack execution. Will always be false if managed is false.
    """

class GetStacksSummary(BaseModel):
    """
    Gets a summary of data relating to all syncs.
    Response: [GetStacksSummaryResponse].
    """
    pass
class GetStacksSummaryResponse(BaseModel):
    """
    Response for [GetStacksSummary]
    """
    total: int
    """
    The total number of stacks
    """
    running: int
    """
    The number of stacks with Running state.
    """
    stopped: int
    """
    The number of stacks with Stopped or Paused state.
    """
    down: int
    """
    The number of stacks with Down state.
    """
    unhealthy: int
    """
    The number of stacks with Unhealthy or Restarting or Dead or Created or Removing state.
    """
    unknown: int
    """
    The number of stacks with Unknown state.
    """

class GetSyncWebhooksEnabled(BaseModel):
    """
    Get a target Sync's configured webhooks. Response: [GetSyncWebhooksEnabledResponse].
    """
    sync: str
    """
    Id or name
    """

class GetSyncWebhooksEnabledResponse(BaseModel):
    """
    Response for [GetSyncWebhooksEnabled]
    """
    managed: bool
    """
    Whether the repo webhooks can even be managed.
    The repo owner must be in `github_webhook_app.owners` list to be managed.
    """
    refresh_enabled: bool
    """
    Whether pushes to branch trigger refresh. Will always be false if managed is false.
    """
    sync_enabled: bool
    """
    Whether pushes to branch trigger sync execution. Will always be false if managed is false.
    """

class GetSystemInformation(BaseModel):
    """
    Get the system information of the target server.
    Response: [SystemInformation].
    """
    server: str
    """
    Id or name
    """

class GetSystemStats(BaseModel):
    """
    Get the system stats on the target server. Response: [SystemStats].
    
    Note. This does not hit the server directly. The stats come from an
    in memory cache on the core, which hits the server periodically
    to keep it up to date.
    """
    server: str
    """
    Id or name
    """

class GetTag(BaseModel):
    """
    Get data for a specific tag. Response [Tag].
    """
    tag: str
    """
    Id or name
    """

class GetUpdate(BaseModel):
    """
    Get all data for the target update.
    Response: [Update].
    """
    id: str
    """
    The update id.
    """

class GetUser(BaseModel):
    """
    Get the user extracted from the request headers.
    Response: [User].
    """
    pass
class GetUserGroup(BaseModel):
    """
    Get a specific user group by name or id.
    Response: [UserGroup].
    """
    user_group: str
    """
    Name or Id
    """

class GetUsername(BaseModel):
    """
    Gets the username of a specific user.
    Response: [GetUsernameResponse]
    """
    user_id: str
    """
    The id of the user.
    """

class GetUsernameResponse(BaseModel):
    """
    Response for [GetUsername].
    """
    username: str
    """
    The username of the user.
    """
    avatar: Optional[str] = Field(default=None)
    """
    An optional icon for the user.
    """

class GetVariable(BaseModel):
    """
    List all available global variables.
    Response: [Variable]
    
    Note. For non admin users making this call,
    secret variables will have their values obscured.
    """
    name: str
    """
    The name of the variable to get.
    """

class GetVersion(BaseModel):
    """
    Get the version of the Komodo Core api.
    Response: [GetVersionResponse].
    """
    pass
class GetVersionResponse(BaseModel):
    """
    Response for [GetVersion].
    """
    version: str
    """
    The version of the core api.
    """

class GlobalAutoUpdate(BaseModel):
    """
    Trigger a global poll for image updates on Stacks and Deployments
    with `poll_for_updates` or `auto_update` enabled.
    Admin only. Response: [Update]
    
    1. `docker compose pull` any Stacks / Deployments with `poll_for_updates` or `auto_update` enabled. This will pick up any available updates.
    2. Redeploy Stacks / Deployments that have updates found and 'auto_update' enabled.
    """
    pass
class InspectDeploymentContainer(BaseModel):
    """
    Inspect the docker container associated with the Deployment.
    Response: [Container].
    """
    deployment: str
    """
    Id or name
    """

class InspectDockerContainer(BaseModel):
    """
    Inspect a docker container on the server. Response: [Container].
    """
    server: str
    """
    Id or name
    """
    container: str
    """
    The container name
    """

class InspectDockerImage(BaseModel):
    """
    Inspect a docker image on the server. Response: [Image].
    """
    server: str
    """
    Id or name
    """
    image: str
    """
    The image name
    """

class InspectDockerNetwork(BaseModel):
    """
    Inspect a docker network on the server. Response: [InspectDockerNetworkResponse].
    """
    server: str
    """
    Id or name
    """
    network: str
    """
    The network name
    """

class InspectDockerVolume(BaseModel):
    """
    Inspect a docker volume on the server. Response: [Volume].
    """
    server: str
    """
    Id or name
    """
    volume: str
    """
    The volume name
    """

class InspectStackContainer(BaseModel):
    """
    Inspect the docker container associated with the Stack.
    Response: [Container].
    """
    stack: str
    """
    Id or name
    """
    service: str
    """
    The service name to inspect
    """

class LatestCommit(BaseModel):
    hash: str
    message: str

class ListActions(BaseModel):
    """
    List actions matching optional query. Response: [ListActionsResponse].
    """
    query: Optional[ActionQuery] = Field(default=None)
    """
    optional structured query to filter actions.
    """

class ListAlerters(BaseModel):
    """
    List alerters matching optional query. Response: [ListAlertersResponse].
    """
    query: Optional[AlerterQuery] = Field(default=None)
    """
    Structured query to filter alerters.
    """

class ListAlerts(BaseModel):
    """
    Get a paginated list of alerts sorted by timestamp descending.
    Response: [ListAlertsResponse].
    """
    model_config = ConfigDict(arbitrary_types_allowed=True)
    query: Optional[MongoDocument] = Field(default=None)
    """
    Pass a custom mongo query to filter the alerts.
    
    ## Example JSON
    ```json
    {
    "resolved": "false",
    "level": "CRITICAL",
    "$or": [
    {
    "target": {
    "type": "Server",
    "id": "6608bf89cb2a12b257ab6c09"
    }
    },
    {
    "target": {
    "type": "Server",
    "id": "660a5f60b74f90d5dae45fa3"
    }
    }
    ]
    }
    ```
    This will filter to only include open alerts that have CRITICAL level on those two servers.
    """
    page: Optional[U64] = Field(default=None)
    """
    Retrieve older results by incrementing the page.
    `page: 0` is default, and returns the most recent results.
    """

class ListAlertsResponse(BaseModel):
    """
    Response for [ListAlerts].
    """
    alerts: List[Alert]
    next_page: Optional[I64] = Field(default=None)
    """
    If more alerts exist, the next page will be given here.
    Otherwise it will be `null`
    """

class ListAllDockerContainers(BaseModel):
    """
    List all docker containers on the target server.
    Response: [ListDockerContainersResponse].
    """
    servers: Optional[List[str]] = Field(default=None)
    """
    Filter by server id or name.
    """

class ListApiKeys(BaseModel):
    """
    Gets list of api keys for the calling user.
    Response: [ListApiKeysResponse]
    """
    pass
class ListApiKeysForServiceUser(BaseModel):
    """
    **Admin only.**
    Gets list of api keys for the user.
    Will still fail if you call for a user_id that isn't a service user.
    Response: [ListApiKeysForServiceUserResponse]
    """
    user: str
    """
    Id or username
    """

class ListBuildVersions(BaseModel):
    """
    Retrieve versions of the build that were built in the past and available for deployment,
    sorted by most recent first.
    Response: [ListBuildVersionsResponse].
    """
    build: str
    """
    Id or name
    """
    major: Optional[int] = Field(default=None)
    """
    Filter to only include versions matching this major version.
    """
    minor: Optional[int] = Field(default=None)
    """
    Filter to only include versions matching this minor version.
    """
    patch: Optional[int] = Field(default=None)
    """
    Filter to only include versions matching this patch version.
    """
    limit: Optional[I64] = Field(default=None)
    """
    Limit the number of included results. Default is no limit.
    """

class ListBuilders(BaseModel):
    """
    List builders matching structured query. Response: [ListBuildersResponse].
    """
    query: Optional[BuilderQuery] = Field(default=None)

class ListBuilds(BaseModel):
    """
    List builds matching optional query. Response: [ListBuildsResponse].
    """
    query: Optional[BuildQuery] = Field(default=None)
    """
    optional structured query to filter builds.
    """

class ListCommonBuildExtraArgs(BaseModel):
    """
    Gets a list of existing values used as extra args across other builds.
    Useful to offer suggestions. Response: [ListCommonBuildExtraArgsResponse]
    """
    query: Optional[BuildQuery] = Field(default=None)
    """
    optional structured query to filter builds.
    """

class ListCommonDeploymentExtraArgs(BaseModel):
    """
    Gets a list of existing values used as extra args across other deployments.
    Useful to offer suggestions. Response: [ListCommonDeploymentExtraArgsResponse]
    """
    query: Optional[DeploymentQuery] = Field(default=None)
    """
    optional structured query to filter deployments.
    """

class ListCommonStackBuildExtraArgs(BaseModel):
    """
    Gets a list of existing values used as build extra args across other stacks.
    Useful to offer suggestions. Response: [ListCommonStackBuildExtraArgsResponse]
    """
    query: Optional[StackQuery] = Field(default=None)
    """
    optional structured query to filter stacks.
    """

class ListCommonStackExtraArgs(BaseModel):
    """
    Gets a list of existing values used as extra args across other stacks.
    Useful to offer suggestions. Response: [ListCommonStackExtraArgsResponse]
    """
    query: Optional[StackQuery] = Field(default=None)
    """
    optional structured query to filter stacks.
    """

class ListComposeProjects(BaseModel):
    """
    List all docker compose projects on the target server.
    Response: [ListComposeProjectsResponse].
    """
    server: str
    """
    Id or name
    """

class ListDeployments(BaseModel):
    """
    List deployments matching optional query.
    Response: [ListDeploymentsResponse].
    """
    query: Optional[DeploymentQuery] = Field(default=None)
    """
    optional structured query to filter deployments.
    """

class ListDockerContainers(BaseModel):
    """
    List all docker containers on the target server.
    Response: [ListDockerContainersResponse].
    """
    server: str
    """
    Id or name
    """

class ListDockerImageHistory(BaseModel):
    """
    Get image history from the server. Response: [ListDockerImageHistoryResponse].
    """
    server: str
    """
    Id or name
    """
    image: str
    """
    The image name
    """

class ListDockerImages(BaseModel):
    """
    List the docker images locally cached on the target server.
    Response: [ListDockerImagesResponse].
    """
    server: str
    """
    Id or name
    """

class ListDockerNetworks(BaseModel):
    """
    List the docker networks on the server. Response: [ListDockerNetworksResponse].
    """
    server: str
    """
    Id or name
    """

class ListDockerRegistriesFromConfig(BaseModel):
    """
    List the docker registry providers available in Core / Periphery config files.
    Response: [ListDockerRegistriesFromConfigResponse].
    
    Includes:
    - registries in core config
    - registries configured on builds, deployments
    - registries on the optional Server or Builder
    """
    target: Optional[ResourceTarget] = Field(default=None)
    """
    Accepts an optional Server or Builder target to expand the core list with
    providers available on that specific resource.
    """

class ListDockerRegistryAccounts(BaseModel):
    """
    List docker registry accounts matching optional query.
    Response: [ListDockerRegistryAccountsResponse].
    """
    domain: Optional[str] = Field(default=None)
    """
    Optionally filter by accounts with a specific domain.
    """
    username: Optional[str] = Field(default=None)
    """
    Optionally filter by accounts with a specific username.
    """

class ListDockerVolumes(BaseModel):
    """
    List all docker volumes on the target server.
    Response: [ListDockerVolumesResponse].
    """
    server: str
    """
    Id or name
    """

class ListFullActions(BaseModel):
    """
    List actions matching optional query. Response: [ListFullActionsResponse].
    """
    query: Optional[ActionQuery] = Field(default=None)
    """
    optional structured query to filter actions.
    """

class ListFullAlerters(BaseModel):
    """
    List full alerters matching optional query. Response: [ListFullAlertersResponse].
    """
    query: Optional[AlerterQuery] = Field(default=None)
    """
    Structured query to filter alerters.
    """

class ListFullBuilders(BaseModel):
    """
    List builders matching structured query. Response: [ListFullBuildersResponse].
    """
    query: Optional[BuilderQuery] = Field(default=None)

class ListFullBuilds(BaseModel):
    """
    List builds matching optional query. Response: [ListFullBuildsResponse].
    """
    query: Optional[BuildQuery] = Field(default=None)
    """
    optional structured query to filter builds.
    """

class ListFullDeployments(BaseModel):
    """
    List deployments matching optional query.
    Response: [ListFullDeploymentsResponse].
    """
    query: Optional[DeploymentQuery] = Field(default=None)
    """
    optional structured query to filter deployments.
    """

class ListFullProcedures(BaseModel):
    """
    List procedures matching optional query. Response: [ListFullProceduresResponse].
    """
    query: Optional[ProcedureQuery] = Field(default=None)
    """
    optional structured query to filter procedures.
    """

class ListFullRepos(BaseModel):
    """
    List repos matching optional query. Response: [ListFullReposResponse].
    """
    query: Optional[RepoQuery] = Field(default=None)
    """
    optional structured query to filter repos.
    """

class ListFullResourceSyncs(BaseModel):
    """
    List syncs matching optional query. Response: [ListFullResourceSyncsResponse].
    """
    query: Optional[ResourceSyncQuery] = Field(default=None)
    """
    optional structured query to filter syncs.
    """

class ListFullServers(BaseModel):
    """
    List servers matching optional query. Response: [ListFullServersResponse].
    """
    query: Optional[ServerQuery] = Field(default=None)
    """
    optional structured query to filter servers.
    """

class ListFullStacks(BaseModel):
    """
    List stacks matching optional query. Response: [ListFullStacksResponse].
    """
    query: Optional[StackQuery] = Field(default=None)
    """
    optional structured query to filter stacks.
    """

class ListGitProviderAccounts(BaseModel):
    """
    List git provider accounts matching optional query.
    Response: [ListGitProviderAccountsResponse].
    """
    domain: Optional[str] = Field(default=None)
    """
    Optionally filter by accounts with a specific domain.
    """
    username: Optional[str] = Field(default=None)
    """
    Optionally filter by accounts with a specific username.
    """

class ListGitProvidersFromConfig(BaseModel):
    """
    List the git providers available in Core / Periphery config files.
    Response: [ListGitProvidersFromConfigResponse].
    
    Includes:
    - providers in core config
    - providers configured on builds, repos, syncs
    - providers on the optional Server or Builder
    """
    target: Optional[ResourceTarget] = Field(default=None)
    """
    Accepts an optional Server or Builder target to expand the core list with
    providers available on that specific resource.
    """

class ListPermissions(BaseModel):
    """
    List permissions for the calling user.
    Does not include any permissions on UserGroups they may be a part of.
    Response: [ListPermissionsResponse]
    """
    pass
class ListProcedures(BaseModel):
    """
    List procedures matching optional query. Response: [ListProceduresResponse].
    """
    query: Optional[ProcedureQuery] = Field(default=None)
    """
    optional structured query to filter procedures.
    """

class ListRepos(BaseModel):
    """
    List repos matching optional query. Response: [ListReposResponse].
    """
    query: Optional[RepoQuery] = Field(default=None)
    """
    optional structured query to filter repos.
    """

class ListResourceSyncs(BaseModel):
    """
    List syncs matching optional query. Response: [ListResourceSyncsResponse].
    """
    query: Optional[ResourceSyncQuery] = Field(default=None)
    """
    optional structured query to filter syncs.
    """

class ListSchedules(BaseModel):
    """
    List configured schedules.
    Response: [ListSchedulesResponse].
    """
    tags: Optional[List[str]] = Field(default=None)
    """
    Pass Vec of tag ids or tag names
    """
    tag_behavior: Optional[TagQueryBehavior] = Field(default=None)
    """
    'All' or 'Any'
    """

class ListSecrets(BaseModel):
    """
    List the available secrets from the core config.
    Response: [ListSecretsResponse].
    """
    target: Optional[ResourceTarget] = Field(default=None)
    """
    Accepts an optional Server or Builder target to expand the core list with
    providers available on that specific resource.
    """

class ListServers(BaseModel):
    """
    List servers matching optional query. Response: [ListServersResponse].
    """
    query: Optional[ServerQuery] = Field(default=None)
    """
    optional structured query to filter servers.
    """

class ListStackServices(BaseModel):
    """
    Lists a specific stacks services (the containers). Response: [ListStackServicesResponse].
    """
    stack: str
    """
    Id or name
    """

class ListStacks(BaseModel):
    """
    List stacks matching optional query. Response: [ListStacksResponse].
    """
    query: Optional[StackQuery] = Field(default=None)
    """
    optional structured query to filter stacks.
    """

class ListSystemProcesses(BaseModel):
    """
    List the processes running on the target server.
    Response: [ListSystemProcessesResponse].
    
    Note. This does not hit the server directly. The procedures come from an
    in memory cache on the core, which hits the server periodically
    to keep it up to date.
    """
    server: str
    """
    Id or name
    """

class ListTags(BaseModel):
    """
    List data for tags matching optional mongo query.
    Response: [ListTagsResponse].
    """
    model_config = ConfigDict(arbitrary_types_allowed=True)
    query: Optional[MongoDocument] = Field(default=None)

class ListTerminals(BaseModel):
    """
    List the current terminals on specified server.
    Response: [ListTerminalsResponse].
    """
    server: str
    """
    Id or name
    """
    fresh: Optional[bool] = Field(default=None)
    """
    Force a fresh call to Periphery for the list.
    Otherwise the response will be cached for 30s
    """

class ListUpdates(BaseModel):
    """
    Paginated endpoint for updates matching optional query.
    More recent updates will be returned first.
    """
    model_config = ConfigDict(arbitrary_types_allowed=True)
    query: Optional[MongoDocument] = Field(default=None)
    """
    An optional mongo query to filter the updates.
    """
    page: Optional[int] = Field(default=None)
    """
    Page of updates. Default is 0, which is the most recent data.
    Use with the `next_page` field of the response.
    """

class UpdateListItem(BaseModel):
    """
    Minimal representation of an action performed by Komodo.
    """
    id: str
    """
    The id of the update
    """
    operation: Operation
    """
    Which operation was run
    """
    start_ts: I64
    """
    The starting time of the operation
    """
    success: bool
    """
    Whether the operation was successful
    """
    username: str
    """
    The username of the user performing update
    """
    operator: str
    """
    The user id that triggered the update.
    
    Also can take these values for operations triggered automatically:
    - `Procedure`: The operation was triggered as part of a procedure run
    - `Github`: The operation was triggered by a github webhook
    - `Auto Redeploy`: The operation (always `Deploy`) was triggered by an attached build finishing.
    """
    target: ResourceTarget
    """
    The target resource to which this update refers
    """
    status: UpdateStatus
    """
    The status of the update
    - `Queued`
    - `InProgress`
    - `Complete`
    """
    version: Optional[Version] = Field(default=None)
    """
    An optional version on the update, ie build version or deployed version.
    """
    other_data: Optional[str] = Field(default=None)
    """
    Some unstructured, operation specific data. Not for general usage.
    """

class ListUpdatesResponse(BaseModel):
    """
    Response for [ListUpdates].
    """
    updates: List[UpdateListItem]
    """
    The page of updates, sorted by timestamp descending.
    """
    next_page: Optional[int] = Field(default=None)
    """
    If there is a next page of data, pass this to `page` to get it.
    """

class ListUserGroups(BaseModel):
    """
    List all user groups which user can see. Response: [ListUserGroupsResponse].
    
    Admins can see all user groups,
    and users can see user groups to which they belong.
    """
    pass
class ListUserTargetPermissions(BaseModel):
    """
    List permissions for a specific user. **Admin only**.
    Response: [ListUserTargetPermissionsResponse]
    """
    user_target: UserTarget
    """
    Specify either a user or a user group.
    """

class ListUsers(BaseModel):
    """
    **Admin only.**
    Gets list of Komodo users.
    Response: [ListUsersResponse]
    """
    pass
class ListVariables(BaseModel):
    """
    List all available global variables.
    Response: [ListVariablesResponse]
    
    Note. For non admin users making this call,
    secret variables will have their values obscured.
    """
    pass
class LoginLocalUser(BaseModel):
    """
    Login as a local user. Will fail if the users credentials don't match
    any local user.
    
    Note. This method is only available if the core api has `local_auth` enabled.
    """
    username: str
    """
    The user's username
    """
    password: str
    """
    The user's password
    """

class NameAndId(BaseModel):
    name: str
    id: str

class NtfyAlerterEndpoint(BaseModel):
    """
    Configuration for a Ntfy alerter.
    """
    url: str
    """
    The ntfy topic URL
    """
    email: Optional[str] = Field(default=None)
    """
    Optional E-Mail Address to enable ntfy email notifications.
    SMTP must be configured on the ntfy server.
    """

class PauseAllContainers(BaseModel):
    """
    Pauses all containers on the target server. Response: [Update]
    """
    server: str
    """
    Name or id
    """

class PauseContainer(BaseModel):
    """
    Pauses the container on the target server. Response: [Update]
    
    1. Runs `docker pause ${container_name}`.
    """
    server: str
    """
    Name or id
    """
    container: str
    """
    The container name
    """

class PauseDeployment(BaseModel):
    """
    Pauses the container for the target deployment. Response: [Update]
    
    1. Runs `docker pause ${container_name}`.
    """
    deployment: str
    """
    Name or id
    """

class PauseStack(BaseModel):
    """
    Pauses the target stack. `docker compose pause`. Response: [Update]
    """
    stack: str
    """
    Id or name
    """
    services: Optional[List[str]] = Field(default=None)
    """
    Filter to only pause specific services.
    If empty, will pause all services.
    """

class PermissionToml(BaseModel):
    target: ResourceTarget
    """
    Id can be:
    - resource name. `id = "abcd-build"`
    - regex matching resource names. `id = "\\^(.+)-build-([0-9]+)$\"`
    """
    level: Optional[PermissionLevel] = Field(default=None)
    """
    The permission level:
    - None
    - Read
    - Execute
    - Write
    """
    specific: Optional[Set[SpecificPermission]] = Field(default=None)
    """
    Any [SpecificPermissions](SpecificPermission) on the resource
    """

class PruneBuildx(BaseModel):
    """
    Prunes the docker buildx cache on the target server. Response: [Update].
    
    1. Runs `docker buildx prune -a -f`.
    """
    server: str
    """
    Id or name
    """

class PruneContainers(BaseModel):
    """
    Prunes the docker containers on the target server. Response: [Update].
    
    1. Runs `docker container prune -f`.
    """
    server: str
    """
    Id or name
    """

class PruneDockerBuilders(BaseModel):
    """
    Prunes the docker builders (build cache) on the target server. Response: [Update].
    
    1. Runs `docker builder prune -a -f`.
    """
    server: str
    """
    Id or name
    """

class PruneImages(BaseModel):
    """
    Prunes the docker images on the target server. Response: [Update].
    
    1. Runs `docker image prune -a -f`.
    """
    server: str
    """
    Id or name
    """

class PruneNetworks(BaseModel):
    """
    Prunes the docker networks on the target server. Response: [Update].
    
    1. Runs `docker network prune -f`.
    """
    server: str
    """
    Id or name
    """

class PruneSystem(BaseModel):
    """
    Prunes the docker system on the target server, including volumes. Response: [Update].
    
    1. Runs `docker system prune -a -f --volumes`.
    """
    server: str
    """
    Id or name
    """

class PruneVolumes(BaseModel):
    """
    Prunes the docker volumes on the target server. Response: [Update].
    
    1. Runs `docker volume prune -a -f`.
    """
    server: str
    """
    Id or name
    """

class PullDeployment(BaseModel):
    """
    Pulls the image for the target deployment. Response: [Update]
    """
    deployment: str
    """
    Name or id
    """

class PullRepo(BaseModel):
    """
    Pulls the target repo. Response: [Update].
    
    Note. Repo must have server attached at `server_id`.
    
    1. Pulls the repo on the target server using `git pull`.
    2. If `on_pull` is specified, it will be executed after the pull is complete.
    """
    repo: str
    """
    Id or name
    """

class PullStack(BaseModel):
    """
    Pulls images for the target stack. `docker compose pull`. Response: [Update]
    """
    stack: str
    """
    Id or name
    """
    services: Optional[List[str]] = Field(default=None)
    """
    Filter to only pull specific services.
    If empty, will pull all services.
    """

class PushRecentlyViewed(BaseModel):
    """
    Push a resource to the front of the users 10 most recently viewed resources.
    Response: [NoData].
    """
    resource: ResourceTarget
    """
    The target to push.
    """

class PushoverAlerterEndpoint(BaseModel):
    """
    Configuration for a Pushover alerter.
    """
    url: str
    """
    The pushover URL including application and user tokens in parameters.
    """

class RefreshBuildCache(BaseModel):
    """
    Trigger a refresh of the cached latest hash and message.
    """
    build: str
    """
    Id or name
    """

class RefreshRepoCache(BaseModel):
    """
    Trigger a refresh of the cached latest hash and message.
    """
    repo: str
    """
    Id or name
    """

class RefreshResourceSyncPending(BaseModel):
    """
    Trigger a refresh of the computed diff logs for view. Response: [ResourceSync]
    """
    sync: str
    """
    Id or name
    """

class RefreshStackCache(BaseModel):
    """
    Trigger a refresh of the cached compose file contents.
    Refreshes:
    - Whether the remote file is missing
    - The latest json, and for repos, the remote contents, hash, and message.
    """
    stack: str
    """
    Id or name
    """

class RemoveUserFromUserGroup(BaseModel):
    """
    **Admin only.** Remove a user from a user group. Response: [UserGroup]
    """
    user_group: str
    """
    The name or id of UserGroup that user should be removed from.
    """
    user: str
    """
    The id or username of the user to remove
    """

class RenameAction(BaseModel):
    """
    Rename the Action at id to the given name.
    Response: [Update].
    """
    id: str
    """
    The id or name of the Action to rename.
    """
    name: str
    """
    The new name.
    """

class RenameAlerter(BaseModel):
    """
    Rename the Alerter at id to the given name.
    Response: [Update].
    """
    id: str
    """
    The id or name of the Alerter to rename.
    """
    name: str
    """
    The new name.
    """

class RenameBuild(BaseModel):
    """
    Rename the Build at id to the given name.
    Response: [Update].
    """
    id: str
    """
    The id or name of the Build to rename.
    """
    name: str
    """
    The new name.
    """

class RenameBuilder(BaseModel):
    """
    Rename the Builder at id to the given name.
    Response: [Update].
    """
    id: str
    """
    The id or name of the Builder to rename.
    """
    name: str
    """
    The new name.
    """

class RenameDeployment(BaseModel):
    """
    Rename the deployment at id to the given name. Response: [Update].
    
    Note. If a container is created for the deployment, it will be renamed using
    `docker rename ...`.
    """
    id: str
    """
    The id of the deployment to rename.
    """
    name: str
    """
    The new name.
    """

class RenameProcedure(BaseModel):
    """
    Rename the Procedure at id to the given name.
    Response: [Update].
    """
    id: str
    """
    The id or name of the Procedure to rename.
    """
    name: str
    """
    The new name.
    """

class RenameRepo(BaseModel):
    """
    Rename the Repo at id to the given name.
    Response: [Update].
    """
    id: str
    """
    The id or name of the Repo to rename.
    """
    name: str
    """
    The new name.
    """

class RenameResourceSync(BaseModel):
    """
    Rename the ResourceSync at id to the given name.
    Response: [Update].
    """
    id: str
    """
    The id or name of the ResourceSync to rename.
    """
    name: str
    """
    The new name.
    """

class RenameServer(BaseModel):
    """
    Rename an Server to the given name.
    Response: [Update].
    """
    id: str
    """
    The id or name of the Server to rename.
    """
    name: str
    """
    The new name.
    """

class RenameStack(BaseModel):
    """
    Rename the stack at id to the given name. Response: [Update].
    """
    id: str
    """
    The id of the stack to rename.
    """
    name: str
    """
    The new name.
    """

class RenameTag(BaseModel):
    """
    Rename a tag at id. Response: [Tag].
    """
    id: str
    """
    The id of the tag to rename.
    """
    name: str
    """
    The new name of the tag.
    """

class RenameUserGroup(BaseModel):
    """
    **Admin only.** Rename a user group. Response: [UserGroup]
    """
    id: str
    """
    The id of the UserGroup
    """
    name: str
    """
    The new name for the UserGroup
    """

class DefaultRepoFolder(str, Enum):
    STACKS = "Stacks"
    """
    /${root_directory}/stacks
    """
    BUILDS = "Builds"
    """
    /${root_directory}/builds
    """
    REPOS = "Repos"
    """
    /${root_directory}/repos
    """
    NOTAPPLICABLE = "NotApplicable"
    """
    If the repo is only cloned
    in the core repo cache (resource sync),
    this isn't relevant.
    """
class RepoExecutionArgs(BaseModel):
    name: str
    """
    Resource name (eg Build name, Repo name)
    """
    provider: str
    """
    Git provider domain. Default: `github.com`
    """
    https: bool
    """
    Use https (vs http).
    """
    account: Optional[str] = Field(default=None)
    """
    Configure the account used to access repo (if private)
    """
    repo: Optional[str] = Field(default=None)
    """
    Full repo identifier. {namespace}/{repo_name}
    Its optional to force checking and produce error if not defined.
    """
    branch: str
    """
    Git Branch. Default: `main`
    """
    commit: Optional[str] = Field(default=None)
    """
    Specific commit hash. Optional
    """
    destination: Optional[str] = Field(default=None)
    """
    The clone destination path
    """
    default_folder: DefaultRepoFolder
    """
    The default folder to use.
    Depends on the resource type.
    """

class RepoExecutionResponse(BaseModel):
    logs: List[Log]
    """
    Response logs
    """
    path: str
    """
    Absolute path to the repo root on the host.
    """
    commit_hash: Optional[str] = Field(default=None)
    """
    Latest short commit hash, if it could be retrieved
    """
    commit_message: Optional[str] = Field(default=None)
    """
    Latest commit message, if it could be retrieved
    """

class ResourceToml(BaseModel, Generic[PartialConfig]):
    name: str
    """
    The resource name. Required
    """
    description: Optional[str] = Field(default=None)
    """
    The resource description. Optional.
    """
    template: Optional[bool] = Field(default=None)
    """
    Mark resource as a template
    """
    tags: Optional[List[str]] = Field(default=None)
    """
    Tag ids or names. Optional
    """
    deploy: Optional[bool] = Field(default=None)
    """
    Optional. Only relevant for deployments / stacks.
    
    Will ensure deployment / stack is running with the latest configuration.
    Deploy actions to achieve this will be included in the sync.
    Default is false.
    """
    after: Optional[List[str]] = Field(default=None)
    """
    Optional. Only relevant for deployments / stacks using the 'deploy' sync feature.
    
    Specify other deployments / stacks by name as dependencies.
    The sync will ensure the deployment / stack will only be deployed 'after' its dependencies.
    """
    config: Optional[PartialConfig] = Field(default=None)
    """
    Resource specific configuration.
    """

class UserGroupToml(BaseModel):
    name: str
    """
    User group name
    """
    everyone: Optional[bool] = Field(default=None)
    """
    Whether all users will implicitly have the permissions in this group.
    """
    users: Optional[List[str]] = Field(default=None)
    """
    Users in the group
    """
    all: Optional[Mapping[ResourceTargetTypes, PermissionLevelAndSpecifics]] = Field(default=None)
    """
    Give the user group elevated permissions on all resources of a certain type
    """
    permissions: Optional[List[PermissionToml]] = Field(default=None)
    """
    Permissions given to the group
    """

class ResourcesToml(BaseModel):
    """
    Specifies resources to sync on Komodo
    """
    servers: Optional[List[ResourceToml[_PartialServerConfig]]] = Field(default=None)
    deployments: Optional[List[ResourceToml[_PartialDeploymentConfig]]] = Field(default=None)
    stacks: Optional[List[ResourceToml[_PartialStackConfig]]] = Field(default=None)
    builds: Optional[List[ResourceToml[_PartialBuildConfig]]] = Field(default=None)
    repos: Optional[List[ResourceToml[_PartialRepoConfig]]] = Field(default=None)
    procedures: Optional[List[ResourceToml[_PartialProcedureConfig]]] = Field(default=None)
    actions: Optional[List[ResourceToml[_PartialActionConfig]]] = Field(default=None)
    alerters: Optional[List[ResourceToml[_PartialAlerterConfig]]] = Field(default=None)
    builders: Optional[List[ResourceToml[_PartialBuilderConfig]]] = Field(default=None)
    resource_syncs: Optional[List[ResourceToml[_PartialResourceSyncConfig]]] = Field(default=None)
    user_groups: Optional[List[UserGroupToml]] = Field(default=None)
    variables: Optional[List[Variable]] = Field(default=None)

class RestartAllContainers(BaseModel):
    """
    Restarts all containers on the target server. Response: [Update]
    """
    server: str
    """
    Name or id
    """

class RestartContainer(BaseModel):
    """
    Restarts the container on the target server. Response: [Update]
    
    1. Runs `docker restart ${container_name}`.
    """
    server: str
    """
    Name or id
    """
    container: str
    """
    The container name
    """

class RestartDeployment(BaseModel):
    """
    Restarts the container for the target deployment. Response: [Update]
    
    1. Runs `docker restart ${container_name}`.
    """
    deployment: str
    """
    Name or id
    """

class RestartStack(BaseModel):
    """
    Restarts the target stack. `docker compose restart`. Response: [Update]
    """
    stack: str
    """
    Id or name
    """
    services: Optional[List[str]] = Field(default=None)
    """
    Filter to only restart specific services.
    If empty, will restart all services.
    """

class RunAction(BaseModel):
    """
    Runs the target Action. Response: [Update]
    """
    action: str
    """
    Id or name
    """
    model_config = ConfigDict(arbitrary_types_allowed=True)
    args: Optional[JsonObject] = Field(default=None)
    """
    Custom arguments which are merged on top of the default arguments.
    CLI Format: `"VAR1=val1&VAR2=val2"`
    
    Webhook-triggered actions use this to pass WEBHOOK_BRANCH and WEBHOOK_BODY.
    """

class RunBuild(BaseModel):
    """
    Runs the target build. Response: [Update].
    
    1. Get a handle to the builder. If using AWS builder, this means starting a builder ec2 instance.
    
    2. Clone the repo on the builder. If an `on_clone` commmand is given, it will be executed.
    
    3. Execute `docker build {...params}`, where params are determined using the builds configuration.
    
    4. If a docker registry is configured, the build will be pushed to the registry.
    
    5. If using AWS builder, destroy the builder ec2 instance.
    
    6. Deploy any Deployments with *Redeploy on Build* enabled.
    """
    build: str
    """
    Can be build id or name
    """

class RunProcedure(BaseModel):
    """
    Runs the target Procedure. Response: [Update]
    """
    procedure: str
    """
    Id or name
    """

class RunStackService(BaseModel):
    """
    Runs a one-time command against a service using `docker compose run`. Response: [Update]
    """
    stack: str
    """
    Id or name
    """
    service: str
    """
    Service to run
    """
    command: Optional[List[str]] = Field(default=None)
    """
    Command and args to pass to the service container
    """
    no_tty: Optional[bool] = Field(default=None)
    """
    Do not allocate TTY
    """
    no_deps: Optional[bool] = Field(default=None)
    """
    Do not start linked services
    """
    detach: Optional[bool] = Field(default=None)
    """
    Detach container on run
    """
    service_ports: Optional[bool] = Field(default=None)
    """
    Map service ports to the host
    """
    env: Optional[Dict[str, str]] = Field(default=None)
    """
    Extra environment variables for the run
    """
    workdir: Optional[str] = Field(default=None)
    """
    Working directory inside the container
    """
    user: Optional[str] = Field(default=None)
    """
    User to run as inside the container
    """
    entrypoint: Optional[str] = Field(default=None)
    """
    Override the default entrypoint
    """
    pull: Optional[bool] = Field(default=None)
    """
    Pull the image before running
    """

class RunSync(BaseModel):
    """
    Runs the target resource sync. Response: [Update]
    """
    sync: str
    """
    Id or name
    """
    resource_type: Optional[ResourceTargetTypes] = Field(default=None)
    """
    Only execute sync on a specific resource type.
    Combine with `resource_id` to specify resource.
    """
    resources: Optional[List[str]] = Field(default=None)
    """
    Only execute sync on a specific resources.
    Combine with `resource_type` to specify resources.
    Supports name or id.
    """

class SearchCombinator(str, Enum):
    OR = "Or"
    AND = "And"
class SearchContainerLog(BaseModel):
    """
    Search the container log's tail using `grep`. All lines go to stdout.
    Response: [Log].
    
    Note. This call will hit the underlying server directly for most up to date log.
    """
    server: str
    """
    Id or name
    """
    container: str
    """
    The container name
    """
    terms: List[str]
    """
    The terms to search for.
    """
    combinator: Optional[SearchCombinator] = Field(default=None)
    """
    When searching for multiple terms, can use `AND` or `OR` combinator.
    
    - `AND`: Only include lines with **all** terms present in that line.
    - `OR`: Include lines that have one or more matches in the terms.
    """
    invert: Optional[bool] = Field(default=None)
    """
    Invert the results, ie return all lines that DON'T match the terms / combinator.
    """
    timestamps: Optional[bool] = Field(default=None)
    """
    Enable `--timestamps`
    """

class SearchDeploymentLog(BaseModel):
    """
    Search the deployment log's tail using `grep`. All lines go to stdout.
    Response: [Log].
    
    Note. This call will hit the underlying server directly for most up to date log.
    """
    deployment: str
    """
    Id or name
    """
    terms: List[str]
    """
    The terms to search for.
    """
    combinator: Optional[SearchCombinator] = Field(default=None)
    """
    When searching for multiple terms, can use `AND` or `OR` combinator.
    
    - `AND`: Only include lines with **all** terms present in that line.
    - `OR`: Include lines that have one or more matches in the terms.
    """
    invert: Optional[bool] = Field(default=None)
    """
    Invert the results, ie return all lines that DON'T match the terms / combinator.
    """
    timestamps: Optional[bool] = Field(default=None)
    """
    Enable `--timestamps`
    """

class SearchStackLog(BaseModel):
    """
    Search the stack log's tail using `grep`. All lines go to stdout.
    Response: [SearchStackLogResponse].
    
    Note. This call will hit the underlying server directly for most up to date log.
    """
    stack: str
    """
    Id or name
    """
    services: List[str]
    """
    Filter the logs to only ones from specific services.
    If empty, will include logs from all services.
    """
    terms: List[str]
    """
    The terms to search for.
    """
    combinator: Optional[SearchCombinator] = Field(default=None)
    """
    When searching for multiple terms, can use `AND` or `OR` combinator.
    
    - `AND`: Only include lines with **all** terms present in that line.
    - `OR`: Include lines that have one or more matches in the terms.
    """
    invert: Optional[bool] = Field(default=None)
    """
    Invert the results, ie return all lines that DON'T match the terms / combinator.
    """
    timestamps: Optional[bool] = Field(default=None)
    """
    Enable `--timestamps`
    """

class SendAlert(BaseModel):
    """
    Send a custom alert message to configured Alerters. Response: [Update]
    """
    level: Optional[SeverityLevel] = Field(default=None)
    """
    The alert level.
    """
    message: str
    """
    The alert message. Required.
    """
    details: Optional[str] = Field(default=None)
    """
    The alert details. Optional.
    """
    alerters: Optional[List[str]] = Field(default=None)
    """
    Specific alerter names or ids.
    If empty / not passed, sends to all configured alerters
    with the `Custom` alert type whitelisted / not blacklisted.
    """

class ServerBuilderConfig(BaseModel):
    """
    Configuration for a Komodo Server Builder.
    """
    server_id: Optional[str] = Field(default=None)
    """
    The server id of the builder
    """

class ServerHealthState(BaseModel):
    """
    The health of a part of the server.
    """
    level: SeverityLevel
    should_close_alert: bool
    """
    Whether the health is good enough to close an open alert.
    """

class ServerHealth(BaseModel):
    """
    Summary of the health of the server.
    """
    cpu: ServerHealthState
    mem: ServerHealthState
    disks: Dict[str, ServerHealthState]

class SetEveryoneUserGroup(BaseModel):
    """
    **Admin only.** Set `everyone` property of User Group.
    Response: [UserGroup]
    """
    user_group: str
    """
    Id or name.
    """
    everyone: bool
    """
    Whether this user group applies to everyone.
    """

class SetLastSeenUpdate(BaseModel):
    """
    Set the time the user last opened the UI updates.
    Used for unseen notification dot.
    Response: [NoData]
    """
    pass
class SetUsersInUserGroup(BaseModel):
    """
    **Admin only.** Completely override the users in the group.
    Response: [UserGroup]
    """
    user_group: str
    """
    Id or name.
    """
    users: List[str]
    """
    The user ids or usernames to hard set as the group's users.
    """

class SignUpLocalUser(BaseModel):
    """
    Sign up a new local user account. Will fail if a user with the
    given username already exists.
    Response: [SignUpLocalUserResponse].
    
    Note. This method is only available if the core api has `local_auth` enabled,
    and if user registration is not disabled (after the first user).
    """
    username: str
    """
    The username for the new user.
    """
    password: str
    """
    The password for the new user.
    This cannot be retreived later.
    """

class SingleNetworkInterfaceUsage(BaseModel):
    """
    Info for network interface usage.
    """
    name: str
    """
    The network interface name
    """
    ingress_bytes: float
    """
    The ingress in bytes
    """
    egress_bytes: float
    """
    The egress in bytes
    """

class SlackAlerterEndpoint(BaseModel):
    """
    Configuration for a Slack alerter.
    """
    url: str
    """
    The Slack app webhook url
    """

class Sleep(BaseModel):
    """
    Sleeps for the specified time.
    """
    duration_ms: Optional[I64] = Field(default=None)

class StartAllContainers(BaseModel):
    """
    Starts all containers on the target server. Response: [Update]
    """
    server: str
    """
    Name or id
    """

class StartContainer(BaseModel):
    """
    Starts the container on the target server. Response: [Update]
    
    1. Runs `docker start ${container_name}`.
    """
    server: str
    """
    Name or id
    """
    container: str
    """
    The container name
    """

class StartDeployment(BaseModel):
    """
    Starts the container for the target deployment. Response: [Update]
    
    1. Runs `docker start ${container_name}`.
    """
    deployment: str
    """
    Name or id
    """

class StartStack(BaseModel):
    """
    Starts the target stack. `docker compose start`. Response: [Update]
    """
    stack: str
    """
    Id or name
    """
    services: Optional[List[str]] = Field(default=None)
    """
    Filter to only start specific services.
    If empty, will start all services.
    """

class StopAllContainers(BaseModel):
    """
    Stops all containers on the target server. Response: [Update]
    """
    server: str
    """
    Name or id
    """

class StopContainer(BaseModel):
    """
    Stops the container on the target server. Response: [Update]
    
    1. Runs `docker stop ${container_name}`.
    """
    server: str
    """
    Name or id
    """
    container: str
    """
    The container name
    """
    signal: Optional[TerminationSignal] = Field(default=None)
    """
    Override the default termination signal.
    """
    time: Optional[int] = Field(default=None)
    """
    Override the default termination max time.
    """

class StopDeployment(BaseModel):
    """
    Stops the container for the target deployment. Response: [Update]
    
    1. Runs `docker stop ${container_name}`.
    """
    deployment: str
    """
    Name or id
    """
    signal: Optional[TerminationSignal] = Field(default=None)
    """
    Override the default termination signal specified in the deployment.
    """
    time: Optional[int] = Field(default=None)
    """
    Override the default termination max time.
    """

class StopStack(BaseModel):
    """
    Stops the target stack. `docker compose stop`. Response: [Update]
    """
    stack: str
    """
    Id or name
    """
    stop_time: Optional[int] = Field(default=None)
    """
    Override the default termination max time.
    """
    services: Optional[List[str]] = Field(default=None)
    """
    Filter to only stop specific services.
    If empty, will stop all services.
    """

class TerminationSignalLabel(BaseModel):
    signal: TerminationSignal
    label: str

class TestAlerter(BaseModel):
    """
    Tests an Alerters ability to reach the configured endpoint. Response: [Update]
    """
    alerter: str
    """
    Name or id
    """

class TotalDiskUsage(BaseModel):
    """
    Info for the all system disks combined.
    """
    used_gb: float
    """
    Used portion in GB
    """
    total_gb: float
    """
    Total size in GB
    """

class UnpauseAllContainers(BaseModel):
    """
    Unpauses all containers on the target server. Response: [Update]
    """
    server: str
    """
    Name or id
    """

class UnpauseContainer(BaseModel):
    """
    Unpauses the container on the target server. Response: [Update]
    
    1. Runs `docker unpause ${container_name}`.
    
    Note. This is the only way to restart a paused container.
    """
    server: str
    """
    Name or id
    """
    container: str
    """
    The container name
    """

class UnpauseDeployment(BaseModel):
    """
    Unpauses the container for the target deployment. Response: [Update]
    
    1. Runs `docker unpause ${container_name}`.
    
    Note. This is the only way to restart a paused container.
    """
    deployment: str
    """
    Name or id
    """

class UnpauseStack(BaseModel):
    """
    Unpauses the target stack. `docker compose unpause`. Response: [Update].
    
    Note. This is the only way to restart a paused container.
    """
    stack: str
    """
    Id or name
    """
    services: Optional[List[str]] = Field(default=None)
    """
    Filter to only unpause specific services.
    If empty, will unpause all services.
    """

class UpdateAction(BaseModel):
    """
    Update the action at the given id, and return the updated action.
    Response: [Action].
    
    Note. This method updates only the fields which are set in the [_PartialActionConfig],
    effectively merging diffs into the final document.
    This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The id of the action to update.
    """
    config: _PartialActionConfig
    """
    The partial config update to apply.
    """

class UpdateAlerter(BaseModel):
    """
    Update the alerter at the given id, and return the updated alerter. Response: [Alerter].
    
    Note. This method updates only the fields which are set in the [PartialAlerterConfig][crate::entities::alerter::PartialAlerterConfig],
    effectively merging diffs into the final document. This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The id of the alerter to update.
    """
    config: _PartialAlerterConfig
    """
    The partial config update to apply.
    """

class UpdateBuild(BaseModel):
    """
    Update the build at the given id, and return the updated build.
    Response: [Build].
    
    Note. This method updates only the fields which are set in the [_PartialBuildConfig],
    effectively merging diffs into the final document.
    This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The id or name of the build to update.
    """
    config: _PartialBuildConfig
    """
    The partial config update to apply.
    """

class UpdateBuilder(BaseModel):
    """
    Update the builder at the given id, and return the updated builder.
    Response: [Builder].
    
    Note. This method updates only the fields which are set in the [PartialBuilderConfig],
    effectively merging diffs into the final document.
    This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The id of the builder to update.
    """
    config: PartialBuilderConfig
    """
    The partial config update to apply.
    """

class UpdateDeployment(BaseModel):
    """
    Update the deployment at the given id, and return the updated deployment.
    Response: [Deployment].
    
    Note. If the attached server for the deployment changes,
    the deployment will be deleted / cleaned up on the old server.
    
    Note. This method updates only the fields which are set in the [_PartialDeploymentConfig],
    effectively merging diffs into the final document.
    This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The deployment id to update.
    """
    config: _PartialDeploymentConfig
    """
    The partial config update.
    """

class UpdateDockerRegistryAccount(BaseModel):
    """
    **Admin only.** Update a docker registry account.
    Response: [DockerRegistryAccount].
    """
    id: str
    """
    The id of the docker registry to update
    """
    account: _PartialDockerRegistryAccount
    """
    The partial docker registry account.
    """

class UpdateGitProviderAccount(BaseModel):
    """
    **Admin only.** Update a git provider account.
    Response: [GitProviderAccount].
    """
    id: str
    """
    The id of the git provider account to update.
    """
    account: _PartialGitProviderAccount
    """
    The partial git provider account.
    """

class UpdatePermissionOnResourceType(BaseModel):
    """
    **Admin only.** Update a user or user groups base permission level on a resource type.
    Response: [NoData].
    """
    user_target: UserTarget
    """
    Specify the user or user group.
    """
    resource_type: ResourceTargetTypes
    """
    The resource type: eg. Server, Build, Deployment, etc.
    """
    permission: PermissionLevelAndSpecifics
    """
    The base permission level.
    """

class UpdatePermissionOnTarget(BaseModel):
    """
    **Admin only.** Update a user or user groups permission on a resource.
    Response: [NoData].
    """
    user_target: UserTarget
    """
    Specify the user or user group.
    """
    resource_target: ResourceTarget
    """
    Specify the target resource.
    """
    permission: PermissionLevelAndSpecifics
    """
    Specify the permission level.
    """

class UpdateProcedure(BaseModel):
    """
    Update the procedure at the given id, and return the updated procedure.
    Response: [Procedure].
    
    Note. This method updates only the fields which are set in the [_PartialProcedureConfig],
    effectively merging diffs into the final document.
    This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The id of the procedure to update.
    """
    config: _PartialProcedureConfig
    """
    The partial config update.
    """

class UpdateRepo(BaseModel):
    """
    Update the repo at the given id, and return the updated repo.
    Response: [Repo].
    
    Note. If the attached server for the repo changes,
    the repo will be deleted / cleaned up on the old server.
    
    Note. This method updates only the fields which are set in the [_PartialRepoConfig],
    effectively merging diffs into the final document.
    This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The id of the repo to update.
    """
    config: _PartialRepoConfig
    """
    The partial config update to apply.
    """

class UpdateResourceMeta(BaseModel):
    """
    Update a resources common meta fields.
    - description
    - template
    - tags
    Response: [NoData].
    """
    target: ResourceTarget
    """
    The target resource to set update meta.
    """
    description: Optional[str] = Field(default=None)
    """
    New description to set,
    or null for no update
    """
    template: Optional[bool] = Field(default=None)
    """
    New template value (true or false),
    or null for no update
    """
    tags: Optional[List[str]] = Field(default=None)
    """
    The exact tags to set,
    or null for no update
    """

class UpdateResourceSync(BaseModel):
    """
    Update the sync at the given id, and return the updated sync.
    Response: [ResourceSync].
    
    Note. This method updates only the fields which are set in the [_PartialResourceSyncConfig],
    effectively merging diffs into the final document.
    This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The id of the sync to update.
    """
    config: _PartialResourceSyncConfig
    """
    The partial config update to apply.
    """

class UpdateServer(BaseModel):
    """
    Update the server at the given id, and return the updated server.
    Response: [Server].
    
    Note. This method updates only the fields which are set in the [_PartialServerConfig],
    effectively merging diffs into the final document.
    This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The id or name of the server to update.
    """
    config: _PartialServerConfig
    """
    The partial config update to apply.
    """

class UpdateServiceUserDescription(BaseModel):
    """
    **Admin only.** Update a service user's description.
    Response: [User].
    """
    username: str
    """
    The service user's username
    """
    description: str
    """
    A new description for the service user.
    """

class UpdateStack(BaseModel):
    """
    Update the stack at the given id, and return the updated stack.
    Response: [Stack].
    
    Note. If the attached server for the stack changes,
    the stack will be deleted / cleaned up on the old server.
    
    Note. This method updates only the fields which are set in the [_PartialStackConfig],
    merging diffs into the final document.
    This is helpful when multiple users are using
    the same resources concurrently by ensuring no unintentional
    field changes occur from out of date local state.
    """
    id: str
    """
    The id of the Stack to update.
    """
    config: _PartialStackConfig
    """
    The partial config update to apply.
    """

class UpdateTagColor(BaseModel):
    """
    Update color for tag. Response: [Tag].
    """
    tag: str
    """
    The name or id of the tag to update.
    """
    color: TagColor
    """
    The new color for the tag.
    """

class UpdateUserAdmin(BaseModel):
    """
    **Super Admin only.** Update's whether a user is admin.
    Response: [NoData].
    """
    user_id: str
    """
    The target user.
    """
    admin: bool
    """
    Whether user should be admin.
    """

class UpdateUserBasePermissions(BaseModel):
    """
    **Admin only.** Update a user's "base" permissions, eg. "enabled".
    Response: [NoData].
    """
    user_id: str
    """
    The target user.
    """
    enabled: Optional[bool] = Field(default=None)
    """
    If specified, will update users enabled state.
    """
    create_servers: Optional[bool] = Field(default=None)
    """
    If specified, will update user's ability to create servers.
    """
    create_builds: Optional[bool] = Field(default=None)
    """
    If specified, will update user's ability to create builds.
    """

class UpdateUserPassword(BaseModel):
    """
    **Only for local users**. Update the calling users password.
    Response: [NoData].
    """
    password: str

class UpdateUserUsername(BaseModel):
    """
    **Only for local users**. Update the calling users username.
    Response: [NoData].
    """
    username: str

class UpdateVariableDescription(BaseModel):
    """
    **Admin only.** Update variable description. Response: [Variable].
    """
    name: str
    """
    The name of the variable to update.
    """
    description: str
    """
    The description to set.
    """

class UpdateVariableIsSecret(BaseModel):
    """
    **Admin only.** Update whether variable is secret. Response: [Variable].
    """
    name: str
    """
    The name of the variable to update.
    """
    is_secret: bool
    """
    Whether variable is secret.
    """

class UpdateVariableValue(BaseModel):
    """
    **Admin only.** Update variable value. Response: [Variable].
    """
    name: str
    """
    The name of the variable to update.
    """
    value: str
    """
    The value to set.
    """

class UrlBuilderConfig(BaseModel):
    """
    Configuration for a Komodo Url Builder.
    """
    address: str
    """
    The address of the Periphery agent
    """
    passkey: Optional[str] = Field(default=None)
    """
    A custom passkey to use. Otherwise, use the default passkey.
    """

class WriteBuildFileContents(BaseModel):
    """
    Update dockerfile contents in Files on Server or Git Repo mode. Response: [Update].
    """
    build: str
    """
    The name or id of the target Build.
    """
    contents: str
    """
    The dockerfile contents to write.
    """

class WriteStackFileContents(BaseModel):
    """
    Update file contents in Files on Server or Git Repo mode. Response: [Update].
    """
    stack: str
    """
    The name or id of the target Stack.
    """
    file_path: str
    """
    The file path relative to the stack run directory,
    or absolute path.
    """
    contents: str
    """
    The contents to write.
    """

class WriteSyncFileContents(BaseModel):
    """
    Rename the stack at id to the given name. Response: [Update].
    """
    sync: str
    """
    The name or id of the target Sync.
    """
    resource_path: str
    """
    If this file was under a resource folder, this will be the folder.
    Otherwise, it should be empty string.
    """
    file_path: str
    """
    The file path relative to the resource path.
    """
    contents: str
    """
    The contents to write.
    """

class AuthRequestTypes(str, Enum):
    GET_LOGIN_OPTIONS = "GetLoginOptions"
    SIGN_UP_LOCAL_USER = "SignUpLocalUser"
    LOGIN_LOCAL_USER = "LoginLocalUser"
    EXCHANGE_FOR_JWT = "ExchangeForJwt"
    GET_USER = "GetUser"

class AuthRequestGetLoginOptions(BaseModel):
    type: Literal[AuthRequestTypes.GET_LOGIN_OPTIONS] = AuthRequestTypes.GET_LOGIN_OPTIONS
    params: GetLoginOptions

class AuthRequestSignUpLocalUser(BaseModel):
    type: Literal[AuthRequestTypes.SIGN_UP_LOCAL_USER] = AuthRequestTypes.SIGN_UP_LOCAL_USER
    params: SignUpLocalUser

class AuthRequestLoginLocalUser(BaseModel):
    type: Literal[AuthRequestTypes.LOGIN_LOCAL_USER] = AuthRequestTypes.LOGIN_LOCAL_USER
    params: LoginLocalUser

class AuthRequestExchangeForJwt(BaseModel):
    type: Literal[AuthRequestTypes.EXCHANGE_FOR_JWT] = AuthRequestTypes.EXCHANGE_FOR_JWT
    params: ExchangeForJwt

class AuthRequestGetUser(BaseModel):
    type: Literal[AuthRequestTypes.GET_USER] = AuthRequestTypes.GET_USER
    params: GetUser

AuthRequest = Union[AuthRequestGetLoginOptions, AuthRequestSignUpLocalUser, AuthRequestLoginLocalUser, AuthRequestExchangeForJwt, AuthRequestGetUser]
class DayOfWeek(str, Enum):
    """
    Days of the week
    """
    MONDAY = "Monday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"
    THURSDAY = "Thursday"
    FRIDAY = "Friday"
    SATURDAY = "Saturday"
    SUNDAY = "Sunday"
class ExecuteRequestTypes(str, Enum):
    START_CONTAINER = "StartContainer"
    RESTART_CONTAINER = "RestartContainer"
    PAUSE_CONTAINER = "PauseContainer"
    UNPAUSE_CONTAINER = "UnpauseContainer"
    STOP_CONTAINER = "StopContainer"
    DESTROY_CONTAINER = "DestroyContainer"
    START_ALL_CONTAINERS = "StartAllContainers"
    RESTART_ALL_CONTAINERS = "RestartAllContainers"
    PAUSE_ALL_CONTAINERS = "PauseAllContainers"
    UNPAUSE_ALL_CONTAINERS = "UnpauseAllContainers"
    STOP_ALL_CONTAINERS = "StopAllContainers"
    PRUNE_CONTAINERS = "PruneContainers"
    DELETE_NETWORK = "DeleteNetwork"
    PRUNE_NETWORKS = "PruneNetworks"
    DELETE_IMAGE = "DeleteImage"
    PRUNE_IMAGES = "PruneImages"
    DELETE_VOLUME = "DeleteVolume"
    PRUNE_VOLUMES = "PruneVolumes"
    PRUNE_DOCKER_BUILDERS = "PruneDockerBuilders"
    PRUNE_BUILDX = "PruneBuildx"
    PRUNE_SYSTEM = "PruneSystem"
    DEPLOY_STACK = "DeployStack"
    BATCH_DEPLOY_STACK = "BatchDeployStack"
    DEPLOY_STACK_IF_CHANGED = "DeployStackIfChanged"
    BATCH_DEPLOY_STACK_IF_CHANGED = "BatchDeployStackIfChanged"
    PULL_STACK = "PullStack"
    BATCH_PULL_STACK = "BatchPullStack"
    START_STACK = "StartStack"
    RESTART_STACK = "RestartStack"
    STOP_STACK = "StopStack"
    PAUSE_STACK = "PauseStack"
    UNPAUSE_STACK = "UnpauseStack"
    DESTROY_STACK = "DestroyStack"
    BATCH_DESTROY_STACK = "BatchDestroyStack"
    RUN_STACK_SERVICE = "RunStackService"
    DEPLOY = "Deploy"
    BATCH_DEPLOY = "BatchDeploy"
    PULL_DEPLOYMENT = "PullDeployment"
    START_DEPLOYMENT = "StartDeployment"
    RESTART_DEPLOYMENT = "RestartDeployment"
    PAUSE_DEPLOYMENT = "PauseDeployment"
    UNPAUSE_DEPLOYMENT = "UnpauseDeployment"
    STOP_DEPLOYMENT = "StopDeployment"
    DESTROY_DEPLOYMENT = "DestroyDeployment"
    BATCH_DESTROY_DEPLOYMENT = "BatchDestroyDeployment"
    RUN_BUILD = "RunBuild"
    BATCH_RUN_BUILD = "BatchRunBuild"
    CANCEL_BUILD = "CancelBuild"
    CLONE_REPO = "CloneRepo"
    BATCH_CLONE_REPO = "BatchCloneRepo"
    PULL_REPO = "PullRepo"
    BATCH_PULL_REPO = "BatchPullRepo"
    BUILD_REPO = "BuildRepo"
    BATCH_BUILD_REPO = "BatchBuildRepo"
    CANCEL_REPO_BUILD = "CancelRepoBuild"
    RUN_PROCEDURE = "RunProcedure"
    BATCH_RUN_PROCEDURE = "BatchRunProcedure"
    RUN_ACTION = "RunAction"
    BATCH_RUN_ACTION = "BatchRunAction"
    TEST_ALERTER = "TestAlerter"
    SEND_ALERT = "SendAlert"
    RUN_SYNC = "RunSync"
    CLEAR_REPO_CACHE = "ClearRepoCache"
    BACKUP_CORE_DATABASE = "BackupCoreDatabase"
    GLOBAL_AUTO_UPDATE = "GlobalAutoUpdate"

class ExecuteRequestStartContainer(BaseModel):
    type: Literal[ExecuteRequestTypes.START_CONTAINER] = ExecuteRequestTypes.START_CONTAINER
    params: StartContainer

class ExecuteRequestRestartContainer(BaseModel):
    type: Literal[ExecuteRequestTypes.RESTART_CONTAINER] = ExecuteRequestTypes.RESTART_CONTAINER
    params: RestartContainer

class ExecuteRequestPauseContainer(BaseModel):
    type: Literal[ExecuteRequestTypes.PAUSE_CONTAINER] = ExecuteRequestTypes.PAUSE_CONTAINER
    params: PauseContainer

class ExecuteRequestUnpauseContainer(BaseModel):
    type: Literal[ExecuteRequestTypes.UNPAUSE_CONTAINER] = ExecuteRequestTypes.UNPAUSE_CONTAINER
    params: UnpauseContainer

class ExecuteRequestStopContainer(BaseModel):
    type: Literal[ExecuteRequestTypes.STOP_CONTAINER] = ExecuteRequestTypes.STOP_CONTAINER
    params: StopContainer

class ExecuteRequestDestroyContainer(BaseModel):
    type: Literal[ExecuteRequestTypes.DESTROY_CONTAINER] = ExecuteRequestTypes.DESTROY_CONTAINER
    params: DestroyContainer

class ExecuteRequestStartAllContainers(BaseModel):
    type: Literal[ExecuteRequestTypes.START_ALL_CONTAINERS] = ExecuteRequestTypes.START_ALL_CONTAINERS
    params: StartAllContainers

class ExecuteRequestRestartAllContainers(BaseModel):
    type: Literal[ExecuteRequestTypes.RESTART_ALL_CONTAINERS] = ExecuteRequestTypes.RESTART_ALL_CONTAINERS
    params: RestartAllContainers

class ExecuteRequestPauseAllContainers(BaseModel):
    type: Literal[ExecuteRequestTypes.PAUSE_ALL_CONTAINERS] = ExecuteRequestTypes.PAUSE_ALL_CONTAINERS
    params: PauseAllContainers

class ExecuteRequestUnpauseAllContainers(BaseModel):
    type: Literal[ExecuteRequestTypes.UNPAUSE_ALL_CONTAINERS] = ExecuteRequestTypes.UNPAUSE_ALL_CONTAINERS
    params: UnpauseAllContainers

class ExecuteRequestStopAllContainers(BaseModel):
    type: Literal[ExecuteRequestTypes.STOP_ALL_CONTAINERS] = ExecuteRequestTypes.STOP_ALL_CONTAINERS
    params: StopAllContainers

class ExecuteRequestPruneContainers(BaseModel):
    type: Literal[ExecuteRequestTypes.PRUNE_CONTAINERS] = ExecuteRequestTypes.PRUNE_CONTAINERS
    params: PruneContainers

class ExecuteRequestDeleteNetwork(BaseModel):
    type: Literal[ExecuteRequestTypes.DELETE_NETWORK] = ExecuteRequestTypes.DELETE_NETWORK
    params: DeleteNetwork

class ExecuteRequestPruneNetworks(BaseModel):
    type: Literal[ExecuteRequestTypes.PRUNE_NETWORKS] = ExecuteRequestTypes.PRUNE_NETWORKS
    params: PruneNetworks

class ExecuteRequestDeleteImage(BaseModel):
    type: Literal[ExecuteRequestTypes.DELETE_IMAGE] = ExecuteRequestTypes.DELETE_IMAGE
    params: DeleteImage

class ExecuteRequestPruneImages(BaseModel):
    type: Literal[ExecuteRequestTypes.PRUNE_IMAGES] = ExecuteRequestTypes.PRUNE_IMAGES
    params: PruneImages

class ExecuteRequestDeleteVolume(BaseModel):
    type: Literal[ExecuteRequestTypes.DELETE_VOLUME] = ExecuteRequestTypes.DELETE_VOLUME
    params: DeleteVolume

class ExecuteRequestPruneVolumes(BaseModel):
    type: Literal[ExecuteRequestTypes.PRUNE_VOLUMES] = ExecuteRequestTypes.PRUNE_VOLUMES
    params: PruneVolumes

class ExecuteRequestPruneDockerBuilders(BaseModel):
    type: Literal[ExecuteRequestTypes.PRUNE_DOCKER_BUILDERS] = ExecuteRequestTypes.PRUNE_DOCKER_BUILDERS
    params: PruneDockerBuilders

class ExecuteRequestPruneBuildx(BaseModel):
    type: Literal[ExecuteRequestTypes.PRUNE_BUILDX] = ExecuteRequestTypes.PRUNE_BUILDX
    params: PruneBuildx

class ExecuteRequestPruneSystem(BaseModel):
    type: Literal[ExecuteRequestTypes.PRUNE_SYSTEM] = ExecuteRequestTypes.PRUNE_SYSTEM
    params: PruneSystem

class ExecuteRequestDeployStack(BaseModel):
    type: Literal[ExecuteRequestTypes.DEPLOY_STACK] = ExecuteRequestTypes.DEPLOY_STACK
    params: DeployStack

class ExecuteRequestBatchDeployStack(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_DEPLOY_STACK] = ExecuteRequestTypes.BATCH_DEPLOY_STACK
    params: BatchDeployStack

class ExecuteRequestDeployStackIfChanged(BaseModel):
    type: Literal[ExecuteRequestTypes.DEPLOY_STACK_IF_CHANGED] = ExecuteRequestTypes.DEPLOY_STACK_IF_CHANGED
    params: DeployStackIfChanged

class ExecuteRequestBatchDeployStackIfChanged(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_DEPLOY_STACK_IF_CHANGED] = ExecuteRequestTypes.BATCH_DEPLOY_STACK_IF_CHANGED
    params: BatchDeployStackIfChanged

class ExecuteRequestPullStack(BaseModel):
    type: Literal[ExecuteRequestTypes.PULL_STACK] = ExecuteRequestTypes.PULL_STACK
    params: PullStack

class ExecuteRequestBatchPullStack(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_PULL_STACK] = ExecuteRequestTypes.BATCH_PULL_STACK
    params: BatchPullStack

class ExecuteRequestStartStack(BaseModel):
    type: Literal[ExecuteRequestTypes.START_STACK] = ExecuteRequestTypes.START_STACK
    params: StartStack

class ExecuteRequestRestartStack(BaseModel):
    type: Literal[ExecuteRequestTypes.RESTART_STACK] = ExecuteRequestTypes.RESTART_STACK
    params: RestartStack

class ExecuteRequestStopStack(BaseModel):
    type: Literal[ExecuteRequestTypes.STOP_STACK] = ExecuteRequestTypes.STOP_STACK
    params: StopStack

class ExecuteRequestPauseStack(BaseModel):
    type: Literal[ExecuteRequestTypes.PAUSE_STACK] = ExecuteRequestTypes.PAUSE_STACK
    params: PauseStack

class ExecuteRequestUnpauseStack(BaseModel):
    type: Literal[ExecuteRequestTypes.UNPAUSE_STACK] = ExecuteRequestTypes.UNPAUSE_STACK
    params: UnpauseStack

class ExecuteRequestDestroyStack(BaseModel):
    type: Literal[ExecuteRequestTypes.DESTROY_STACK] = ExecuteRequestTypes.DESTROY_STACK
    params: DestroyStack

class ExecuteRequestBatchDestroyStack(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_DESTROY_STACK] = ExecuteRequestTypes.BATCH_DESTROY_STACK
    params: BatchDestroyStack

class ExecuteRequestRunStackService(BaseModel):
    type: Literal[ExecuteRequestTypes.RUN_STACK_SERVICE] = ExecuteRequestTypes.RUN_STACK_SERVICE
    params: RunStackService

class ExecuteRequestDeploy(BaseModel):
    type: Literal[ExecuteRequestTypes.DEPLOY] = ExecuteRequestTypes.DEPLOY
    params: Deploy

class ExecuteRequestBatchDeploy(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_DEPLOY] = ExecuteRequestTypes.BATCH_DEPLOY
    params: BatchDeploy

class ExecuteRequestPullDeployment(BaseModel):
    type: Literal[ExecuteRequestTypes.PULL_DEPLOYMENT] = ExecuteRequestTypes.PULL_DEPLOYMENT
    params: PullDeployment

class ExecuteRequestStartDeployment(BaseModel):
    type: Literal[ExecuteRequestTypes.START_DEPLOYMENT] = ExecuteRequestTypes.START_DEPLOYMENT
    params: StartDeployment

class ExecuteRequestRestartDeployment(BaseModel):
    type: Literal[ExecuteRequestTypes.RESTART_DEPLOYMENT] = ExecuteRequestTypes.RESTART_DEPLOYMENT
    params: RestartDeployment

class ExecuteRequestPauseDeployment(BaseModel):
    type: Literal[ExecuteRequestTypes.PAUSE_DEPLOYMENT] = ExecuteRequestTypes.PAUSE_DEPLOYMENT
    params: PauseDeployment

class ExecuteRequestUnpauseDeployment(BaseModel):
    type: Literal[ExecuteRequestTypes.UNPAUSE_DEPLOYMENT] = ExecuteRequestTypes.UNPAUSE_DEPLOYMENT
    params: UnpauseDeployment

class ExecuteRequestStopDeployment(BaseModel):
    type: Literal[ExecuteRequestTypes.STOP_DEPLOYMENT] = ExecuteRequestTypes.STOP_DEPLOYMENT
    params: StopDeployment

class ExecuteRequestDestroyDeployment(BaseModel):
    type: Literal[ExecuteRequestTypes.DESTROY_DEPLOYMENT] = ExecuteRequestTypes.DESTROY_DEPLOYMENT
    params: DestroyDeployment

class ExecuteRequestBatchDestroyDeployment(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_DESTROY_DEPLOYMENT] = ExecuteRequestTypes.BATCH_DESTROY_DEPLOYMENT
    params: BatchDestroyDeployment

class ExecuteRequestRunBuild(BaseModel):
    type: Literal[ExecuteRequestTypes.RUN_BUILD] = ExecuteRequestTypes.RUN_BUILD
    params: RunBuild

class ExecuteRequestBatchRunBuild(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_RUN_BUILD] = ExecuteRequestTypes.BATCH_RUN_BUILD
    params: BatchRunBuild

class ExecuteRequestCancelBuild(BaseModel):
    type: Literal[ExecuteRequestTypes.CANCEL_BUILD] = ExecuteRequestTypes.CANCEL_BUILD
    params: CancelBuild

class ExecuteRequestCloneRepo(BaseModel):
    type: Literal[ExecuteRequestTypes.CLONE_REPO] = ExecuteRequestTypes.CLONE_REPO
    params: CloneRepo

class ExecuteRequestBatchCloneRepo(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_CLONE_REPO] = ExecuteRequestTypes.BATCH_CLONE_REPO
    params: BatchCloneRepo

class ExecuteRequestPullRepo(BaseModel):
    type: Literal[ExecuteRequestTypes.PULL_REPO] = ExecuteRequestTypes.PULL_REPO
    params: PullRepo

class ExecuteRequestBatchPullRepo(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_PULL_REPO] = ExecuteRequestTypes.BATCH_PULL_REPO
    params: BatchPullRepo

class ExecuteRequestBuildRepo(BaseModel):
    type: Literal[ExecuteRequestTypes.BUILD_REPO] = ExecuteRequestTypes.BUILD_REPO
    params: BuildRepo

class ExecuteRequestBatchBuildRepo(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_BUILD_REPO] = ExecuteRequestTypes.BATCH_BUILD_REPO
    params: BatchBuildRepo

class ExecuteRequestCancelRepoBuild(BaseModel):
    type: Literal[ExecuteRequestTypes.CANCEL_REPO_BUILD] = ExecuteRequestTypes.CANCEL_REPO_BUILD
    params: CancelRepoBuild

class ExecuteRequestRunProcedure(BaseModel):
    type: Literal[ExecuteRequestTypes.RUN_PROCEDURE] = ExecuteRequestTypes.RUN_PROCEDURE
    params: RunProcedure

class ExecuteRequestBatchRunProcedure(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_RUN_PROCEDURE] = ExecuteRequestTypes.BATCH_RUN_PROCEDURE
    params: BatchRunProcedure

class ExecuteRequestRunAction(BaseModel):
    type: Literal[ExecuteRequestTypes.RUN_ACTION] = ExecuteRequestTypes.RUN_ACTION
    params: RunAction

class ExecuteRequestBatchRunAction(BaseModel):
    type: Literal[ExecuteRequestTypes.BATCH_RUN_ACTION] = ExecuteRequestTypes.BATCH_RUN_ACTION
    params: BatchRunAction

class ExecuteRequestTestAlerter(BaseModel):
    type: Literal[ExecuteRequestTypes.TEST_ALERTER] = ExecuteRequestTypes.TEST_ALERTER
    params: TestAlerter

class ExecuteRequestSendAlert(BaseModel):
    type: Literal[ExecuteRequestTypes.SEND_ALERT] = ExecuteRequestTypes.SEND_ALERT
    params: SendAlert

class ExecuteRequestRunSync(BaseModel):
    type: Literal[ExecuteRequestTypes.RUN_SYNC] = ExecuteRequestTypes.RUN_SYNC
    params: RunSync

class ExecuteRequestClearRepoCache(BaseModel):
    type: Literal[ExecuteRequestTypes.CLEAR_REPO_CACHE] = ExecuteRequestTypes.CLEAR_REPO_CACHE
    params: ClearRepoCache

class ExecuteRequestBackupCoreDatabase(BaseModel):
    type: Literal[ExecuteRequestTypes.BACKUP_CORE_DATABASE] = ExecuteRequestTypes.BACKUP_CORE_DATABASE
    params: BackupCoreDatabase

class ExecuteRequestGlobalAutoUpdate(BaseModel):
    type: Literal[ExecuteRequestTypes.GLOBAL_AUTO_UPDATE] = ExecuteRequestTypes.GLOBAL_AUTO_UPDATE
    params: GlobalAutoUpdate

ExecuteRequest = Union[ExecuteRequestStartContainer, ExecuteRequestRestartContainer, ExecuteRequestPauseContainer, ExecuteRequestUnpauseContainer, ExecuteRequestStopContainer, ExecuteRequestDestroyContainer, ExecuteRequestStartAllContainers, ExecuteRequestRestartAllContainers, ExecuteRequestPauseAllContainers, ExecuteRequestUnpauseAllContainers, ExecuteRequestStopAllContainers, ExecuteRequestPruneContainers, ExecuteRequestDeleteNetwork, ExecuteRequestPruneNetworks, ExecuteRequestDeleteImage, ExecuteRequestPruneImages, ExecuteRequestDeleteVolume, ExecuteRequestPruneVolumes, ExecuteRequestPruneDockerBuilders, ExecuteRequestPruneBuildx, ExecuteRequestPruneSystem, ExecuteRequestDeployStack, ExecuteRequestBatchDeployStack, ExecuteRequestDeployStackIfChanged, ExecuteRequestBatchDeployStackIfChanged, ExecuteRequestPullStack, ExecuteRequestBatchPullStack, ExecuteRequestStartStack, ExecuteRequestRestartStack, ExecuteRequestStopStack, ExecuteRequestPauseStack, ExecuteRequestUnpauseStack, ExecuteRequestDestroyStack, ExecuteRequestBatchDestroyStack, ExecuteRequestRunStackService, ExecuteRequestDeploy, ExecuteRequestBatchDeploy, ExecuteRequestPullDeployment, ExecuteRequestStartDeployment, ExecuteRequestRestartDeployment, ExecuteRequestPauseDeployment, ExecuteRequestUnpauseDeployment, ExecuteRequestStopDeployment, ExecuteRequestDestroyDeployment, ExecuteRequestBatchDestroyDeployment, ExecuteRequestRunBuild, ExecuteRequestBatchRunBuild, ExecuteRequestCancelBuild, ExecuteRequestCloneRepo, ExecuteRequestBatchCloneRepo, ExecuteRequestPullRepo, ExecuteRequestBatchPullRepo, ExecuteRequestBuildRepo, ExecuteRequestBatchBuildRepo, ExecuteRequestCancelRepoBuild, ExecuteRequestRunProcedure, ExecuteRequestBatchRunProcedure, ExecuteRequestRunAction, ExecuteRequestBatchRunAction, ExecuteRequestTestAlerter, ExecuteRequestSendAlert, ExecuteRequestRunSync, ExecuteRequestClearRepoCache, ExecuteRequestBackupCoreDatabase, ExecuteRequestGlobalAutoUpdate]
class IanaTimezone(str, Enum):
    """
    One representative IANA zone for each distinct base UTC offset in the tz database.
    https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
    
    The `serde`/`strum` renames ensure the canonical identifier is used
    when serializing or parsing from a string such as `"Etc/UTC"`.
    """
    ETCGMTMINUS12 = "Etc/GMT+12"
    """
    UTC−12:00
    """
    PACIFICPAGOPAGO = "Pacific/Pago_Pago"
    """
    UTC−11:00
    """
    PACIFICHONOLULU = "Pacific/Honolulu"
    """
    UTC−10:00
    """
    PACIFICMARQUESAS = "Pacific/Marquesas"
    """
    UTC−09:30
    """
    AMERICAANCHORAGE = "America/Anchorage"
    """
    UTC−09:00
    """
    AMERICALOSANGELES = "America/Los_Angeles"
    """
    UTC−08:00
    """
    AMERICADENVER = "America/Denver"
    """
    UTC−07:00
    """
    AMERICACHICAGO = "America/Chicago"
    """
    UTC−06:00
    """
    AMERICANEWYORK = "America/New_York"
    """
    UTC−05:00
    """
    AMERICAHALIFAX = "America/Halifax"
    """
    UTC−04:00
    """
    AMERICASTJOHNS = "America/St_Johns"
    """
    UTC−03:30
    """
    AMERICASAOPAULO = "America/Sao_Paulo"
    """
    UTC−03:00
    """
    AMERICANORONHA = "America/Noronha"
    """
    UTC−02:00
    """
    ATLANTICAZORES = "Atlantic/Azores"
    """
    UTC−01:00
    """
    ETCUTC = "Etc/UTC"
    """
    UTC±00:00
    """
    EUROPEBERLIN = "Europe/Berlin"
    """
    UTC+01:00
    """
    EUROPEBUCHAREST = "Europe/Bucharest"
    """
    UTC+02:00
    """
    EUROPEMOSCOW = "Europe/Moscow"
    """
    UTC+03:00
    """
    ASIATEHRAN = "Asia/Tehran"
    """
    UTC+03:30
    """
    ASIADUBAI = "Asia/Dubai"
    """
    UTC+04:00
    """
    ASIAKABUL = "Asia/Kabul"
    """
    UTC+04:30
    """
    ASIAKARACHI = "Asia/Karachi"
    """
    UTC+05:00
    """
    ASIAKOLKATA = "Asia/Kolkata"
    """
    UTC+05:30
    """
    ASIAKATHMANDU = "Asia/Kathmandu"
    """
    UTC+05:45
    """
    ASIADHAKA = "Asia/Dhaka"
    """
    UTC+06:00
    """
    ASIAYANGON = "Asia/Yangon"
    """
    UTC+06:30
    """
    ASIABANGKOK = "Asia/Bangkok"
    """
    UTC+07:00
    """
    ASIASHANGHAI = "Asia/Shanghai"
    """
    UTC+08:00
    """
    AUSTRALIAEUCLA = "Australia/Eucla"
    """
    UTC+08:45
    """
    ASIATOKYO = "Asia/Tokyo"
    """
    UTC+09:00
    """
    AUSTRALIAADELAIDE = "Australia/Adelaide"
    """
    UTC+09:30
    """
    AUSTRALIASYDNEY = "Australia/Sydney"
    """
    UTC+10:00
    """
    AUSTRALIALORDHOWE = "Australia/Lord_Howe"
    """
    UTC+10:30
    """
    PACIFICPORTMORESBY = "Pacific/Port_Moresby"
    """
    UTC+11:00
    """
    PACIFICAUCKLAND = "Pacific/Auckland"
    """
    UTC+12:00
    """
    PACIFICCHATHAM = "Pacific/Chatham"
    """
    UTC+12:45
    """
    PACIFICTONGATAPU = "Pacific/Tongatapu"
    """
    UTC+13:00
    """
    PACIFICKIRITIMATI = "Pacific/Kiritimati"
    """
    UTC+14:00
    """
class ReadRequestTypes(str, Enum):
    GET_VERSION = "GetVersion"
    GET_CORE_INFO = "GetCoreInfo"
    LIST_SECRETS = "ListSecrets"
    LIST_GIT_PROVIDERS_FROM_CONFIG = "ListGitProvidersFromConfig"
    LIST_DOCKER_REGISTRIES_FROM_CONFIG = "ListDockerRegistriesFromConfig"
    GET_USERNAME = "GetUsername"
    GET_PERMISSION = "GetPermission"
    FIND_USER = "FindUser"
    LIST_USERS = "ListUsers"
    LIST_API_KEYS = "ListApiKeys"
    LIST_API_KEYS_FOR_SERVICE_USER = "ListApiKeysForServiceUser"
    LIST_PERMISSIONS = "ListPermissions"
    LIST_USER_TARGET_PERMISSIONS = "ListUserTargetPermissions"
    GET_USER_GROUP = "GetUserGroup"
    LIST_USER_GROUPS = "ListUserGroups"
    GET_PROCEDURES_SUMMARY = "GetProceduresSummary"
    GET_PROCEDURE = "GetProcedure"
    GET_PROCEDURE_ACTION_STATE = "GetProcedureActionState"
    LIST_PROCEDURES = "ListProcedures"
    LIST_FULL_PROCEDURES = "ListFullProcedures"
    GET_ACTIONS_SUMMARY = "GetActionsSummary"
    GET_ACTION = "GetAction"
    GET_ACTION_ACTION_STATE = "GetActionActionState"
    LIST_ACTIONS = "ListActions"
    LIST_FULL_ACTIONS = "ListFullActions"
    LIST_SCHEDULES = "ListSchedules"
    GET_SERVERS_SUMMARY = "GetServersSummary"
    GET_SERVER = "GetServer"
    GET_SERVER_STATE = "GetServerState"
    GET_PERIPHERY_VERSION = "GetPeripheryVersion"
    GET_SERVER_ACTION_STATE = "GetServerActionState"
    GET_HISTORICAL_SERVER_STATS = "GetHistoricalServerStats"
    LIST_SERVERS = "ListServers"
    LIST_FULL_SERVERS = "ListFullServers"
    INSPECT_DOCKER_CONTAINER = "InspectDockerContainer"
    GET_RESOURCE_MATCHING_CONTAINER = "GetResourceMatchingContainer"
    GET_CONTAINER_LOG = "GetContainerLog"
    SEARCH_CONTAINER_LOG = "SearchContainerLog"
    INSPECT_DOCKER_NETWORK = "InspectDockerNetwork"
    INSPECT_DOCKER_IMAGE = "InspectDockerImage"
    LIST_DOCKER_IMAGE_HISTORY = "ListDockerImageHistory"
    INSPECT_DOCKER_VOLUME = "InspectDockerVolume"
    GET_DOCKER_CONTAINERS_SUMMARY = "GetDockerContainersSummary"
    LIST_ALL_DOCKER_CONTAINERS = "ListAllDockerContainers"
    LIST_DOCKER_CONTAINERS = "ListDockerContainers"
    LIST_DOCKER_NETWORKS = "ListDockerNetworks"
    LIST_DOCKER_IMAGES = "ListDockerImages"
    LIST_DOCKER_VOLUMES = "ListDockerVolumes"
    LIST_COMPOSE_PROJECTS = "ListComposeProjects"
    LIST_TERMINALS = "ListTerminals"
    GET_SYSTEM_INFORMATION = "GetSystemInformation"
    GET_SYSTEM_STATS = "GetSystemStats"
    LIST_SYSTEM_PROCESSES = "ListSystemProcesses"
    GET_STACKS_SUMMARY = "GetStacksSummary"
    GET_STACK = "GetStack"
    GET_STACK_ACTION_STATE = "GetStackActionState"
    GET_STACK_WEBHOOKS_ENABLED = "GetStackWebhooksEnabled"
    GET_STACK_LOG = "GetStackLog"
    SEARCH_STACK_LOG = "SearchStackLog"
    INSPECT_STACK_CONTAINER = "InspectStackContainer"
    LIST_STACKS = "ListStacks"
    LIST_FULL_STACKS = "ListFullStacks"
    LIST_STACK_SERVICES = "ListStackServices"
    LIST_COMMON_STACK_EXTRA_ARGS = "ListCommonStackExtraArgs"
    LIST_COMMON_STACK_BUILD_EXTRA_ARGS = "ListCommonStackBuildExtraArgs"
    GET_DEPLOYMENTS_SUMMARY = "GetDeploymentsSummary"
    GET_DEPLOYMENT = "GetDeployment"
    GET_DEPLOYMENT_CONTAINER = "GetDeploymentContainer"
    GET_DEPLOYMENT_ACTION_STATE = "GetDeploymentActionState"
    GET_DEPLOYMENT_STATS = "GetDeploymentStats"
    GET_DEPLOYMENT_LOG = "GetDeploymentLog"
    SEARCH_DEPLOYMENT_LOG = "SearchDeploymentLog"
    INSPECT_DEPLOYMENT_CONTAINER = "InspectDeploymentContainer"
    LIST_DEPLOYMENTS = "ListDeployments"
    LIST_FULL_DEPLOYMENTS = "ListFullDeployments"
    LIST_COMMON_DEPLOYMENT_EXTRA_ARGS = "ListCommonDeploymentExtraArgs"
    GET_BUILDS_SUMMARY = "GetBuildsSummary"
    GET_BUILD = "GetBuild"
    GET_BUILD_ACTION_STATE = "GetBuildActionState"
    GET_BUILD_MONTHLY_STATS = "GetBuildMonthlyStats"
    LIST_BUILD_VERSIONS = "ListBuildVersions"
    GET_BUILD_WEBHOOK_ENABLED = "GetBuildWebhookEnabled"
    LIST_BUILDS = "ListBuilds"
    LIST_FULL_BUILDS = "ListFullBuilds"
    LIST_COMMON_BUILD_EXTRA_ARGS = "ListCommonBuildExtraArgs"
    GET_REPOS_SUMMARY = "GetReposSummary"
    GET_REPO = "GetRepo"
    GET_REPO_ACTION_STATE = "GetRepoActionState"
    GET_REPO_WEBHOOKS_ENABLED = "GetRepoWebhooksEnabled"
    LIST_REPOS = "ListRepos"
    LIST_FULL_REPOS = "ListFullRepos"
    GET_RESOURCE_SYNCS_SUMMARY = "GetResourceSyncsSummary"
    GET_RESOURCE_SYNC = "GetResourceSync"
    GET_RESOURCE_SYNC_ACTION_STATE = "GetResourceSyncActionState"
    GET_SYNC_WEBHOOKS_ENABLED = "GetSyncWebhooksEnabled"
    LIST_RESOURCE_SYNCS = "ListResourceSyncs"
    LIST_FULL_RESOURCE_SYNCS = "ListFullResourceSyncs"
    GET_BUILDERS_SUMMARY = "GetBuildersSummary"
    GET_BUILDER = "GetBuilder"
    LIST_BUILDERS = "ListBuilders"
    LIST_FULL_BUILDERS = "ListFullBuilders"
    GET_ALERTERS_SUMMARY = "GetAlertersSummary"
    GET_ALERTER = "GetAlerter"
    LIST_ALERTERS = "ListAlerters"
    LIST_FULL_ALERTERS = "ListFullAlerters"
    EXPORT_ALL_RESOURCES_TO_TOML = "ExportAllResourcesToToml"
    EXPORT_RESOURCES_TO_TOML = "ExportResourcesToToml"
    GET_TAG = "GetTag"
    LIST_TAGS = "ListTags"
    GET_UPDATE = "GetUpdate"
    LIST_UPDATES = "ListUpdates"
    LIST_ALERTS = "ListAlerts"
    GET_ALERT = "GetAlert"
    GET_VARIABLE = "GetVariable"
    LIST_VARIABLES = "ListVariables"
    GET_GIT_PROVIDER_ACCOUNT = "GetGitProviderAccount"
    LIST_GIT_PROVIDER_ACCOUNTS = "ListGitProviderAccounts"
    GET_DOCKER_REGISTRY_ACCOUNT = "GetDockerRegistryAccount"
    LIST_DOCKER_REGISTRY_ACCOUNTS = "ListDockerRegistryAccounts"

class ReadRequestGetVersion(BaseModel):
    type: Literal[ReadRequestTypes.GET_VERSION] = ReadRequestTypes.GET_VERSION
    params: GetVersion

class ReadRequestGetCoreInfo(BaseModel):
    type: Literal[ReadRequestTypes.GET_CORE_INFO] = ReadRequestTypes.GET_CORE_INFO
    params: GetCoreInfo

class ReadRequestListSecrets(BaseModel):
    type: Literal[ReadRequestTypes.LIST_SECRETS] = ReadRequestTypes.LIST_SECRETS
    params: ListSecrets

class ReadRequestListGitProvidersFromConfig(BaseModel):
    type: Literal[ReadRequestTypes.LIST_GIT_PROVIDERS_FROM_CONFIG] = ReadRequestTypes.LIST_GIT_PROVIDERS_FROM_CONFIG
    params: ListGitProvidersFromConfig

class ReadRequestListDockerRegistriesFromConfig(BaseModel):
    type: Literal[ReadRequestTypes.LIST_DOCKER_REGISTRIES_FROM_CONFIG] = ReadRequestTypes.LIST_DOCKER_REGISTRIES_FROM_CONFIG
    params: ListDockerRegistriesFromConfig

class ReadRequestGetUsername(BaseModel):
    type: Literal[ReadRequestTypes.GET_USERNAME] = ReadRequestTypes.GET_USERNAME
    params: GetUsername

class ReadRequestGetPermission(BaseModel):
    type: Literal[ReadRequestTypes.GET_PERMISSION] = ReadRequestTypes.GET_PERMISSION
    params: GetPermission

class ReadRequestFindUser(BaseModel):
    type: Literal[ReadRequestTypes.FIND_USER] = ReadRequestTypes.FIND_USER
    params: FindUser

class ReadRequestListUsers(BaseModel):
    type: Literal[ReadRequestTypes.LIST_USERS] = ReadRequestTypes.LIST_USERS
    params: ListUsers

class ReadRequestListApiKeys(BaseModel):
    type: Literal[ReadRequestTypes.LIST_API_KEYS] = ReadRequestTypes.LIST_API_KEYS
    params: ListApiKeys

class ReadRequestListApiKeysForServiceUser(BaseModel):
    type: Literal[ReadRequestTypes.LIST_API_KEYS_FOR_SERVICE_USER] = ReadRequestTypes.LIST_API_KEYS_FOR_SERVICE_USER
    params: ListApiKeysForServiceUser

class ReadRequestListPermissions(BaseModel):
    type: Literal[ReadRequestTypes.LIST_PERMISSIONS] = ReadRequestTypes.LIST_PERMISSIONS
    params: ListPermissions

class ReadRequestListUserTargetPermissions(BaseModel):
    type: Literal[ReadRequestTypes.LIST_USER_TARGET_PERMISSIONS] = ReadRequestTypes.LIST_USER_TARGET_PERMISSIONS
    params: ListUserTargetPermissions

class ReadRequestGetUserGroup(BaseModel):
    type: Literal[ReadRequestTypes.GET_USER_GROUP] = ReadRequestTypes.GET_USER_GROUP
    params: GetUserGroup

class ReadRequestListUserGroups(BaseModel):
    type: Literal[ReadRequestTypes.LIST_USER_GROUPS] = ReadRequestTypes.LIST_USER_GROUPS
    params: ListUserGroups

class ReadRequestGetProceduresSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_PROCEDURES_SUMMARY] = ReadRequestTypes.GET_PROCEDURES_SUMMARY
    params: GetProceduresSummary

class ReadRequestGetProcedure(BaseModel):
    type: Literal[ReadRequestTypes.GET_PROCEDURE] = ReadRequestTypes.GET_PROCEDURE
    params: GetProcedure

class ReadRequestGetProcedureActionState(BaseModel):
    type: Literal[ReadRequestTypes.GET_PROCEDURE_ACTION_STATE] = ReadRequestTypes.GET_PROCEDURE_ACTION_STATE
    params: GetProcedureActionState

class ReadRequestListProcedures(BaseModel):
    type: Literal[ReadRequestTypes.LIST_PROCEDURES] = ReadRequestTypes.LIST_PROCEDURES
    params: ListProcedures

class ReadRequestListFullProcedures(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_PROCEDURES] = ReadRequestTypes.LIST_FULL_PROCEDURES
    params: ListFullProcedures

class ReadRequestGetActionsSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_ACTIONS_SUMMARY] = ReadRequestTypes.GET_ACTIONS_SUMMARY
    params: GetActionsSummary

class ReadRequestGetAction(BaseModel):
    type: Literal[ReadRequestTypes.GET_ACTION] = ReadRequestTypes.GET_ACTION
    params: GetAction

class ReadRequestGetActionActionState(BaseModel):
    type: Literal[ReadRequestTypes.GET_ACTION_ACTION_STATE] = ReadRequestTypes.GET_ACTION_ACTION_STATE
    params: GetActionActionState

class ReadRequestListActions(BaseModel):
    type: Literal[ReadRequestTypes.LIST_ACTIONS] = ReadRequestTypes.LIST_ACTIONS
    params: ListActions

class ReadRequestListFullActions(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_ACTIONS] = ReadRequestTypes.LIST_FULL_ACTIONS
    params: ListFullActions

class ReadRequestListSchedules(BaseModel):
    type: Literal[ReadRequestTypes.LIST_SCHEDULES] = ReadRequestTypes.LIST_SCHEDULES
    params: ListSchedules

class ReadRequestGetServersSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_SERVERS_SUMMARY] = ReadRequestTypes.GET_SERVERS_SUMMARY
    params: GetServersSummary

class ReadRequestGetServer(BaseModel):
    type: Literal[ReadRequestTypes.GET_SERVER] = ReadRequestTypes.GET_SERVER
    params: GetServer

class ReadRequestGetServerState(BaseModel):
    type: Literal[ReadRequestTypes.GET_SERVER_STATE] = ReadRequestTypes.GET_SERVER_STATE
    params: GetServerState

class ReadRequestGetPeripheryVersion(BaseModel):
    type: Literal[ReadRequestTypes.GET_PERIPHERY_VERSION] = ReadRequestTypes.GET_PERIPHERY_VERSION
    params: GetPeripheryVersion

class ReadRequestGetServerActionState(BaseModel):
    type: Literal[ReadRequestTypes.GET_SERVER_ACTION_STATE] = ReadRequestTypes.GET_SERVER_ACTION_STATE
    params: GetServerActionState

class ReadRequestGetHistoricalServerStats(BaseModel):
    type: Literal[ReadRequestTypes.GET_HISTORICAL_SERVER_STATS] = ReadRequestTypes.GET_HISTORICAL_SERVER_STATS
    params: GetHistoricalServerStats

class ReadRequestListServers(BaseModel):
    type: Literal[ReadRequestTypes.LIST_SERVERS] = ReadRequestTypes.LIST_SERVERS
    params: ListServers

class ReadRequestListFullServers(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_SERVERS] = ReadRequestTypes.LIST_FULL_SERVERS
    params: ListFullServers

class ReadRequestInspectDockerContainer(BaseModel):
    type: Literal[ReadRequestTypes.INSPECT_DOCKER_CONTAINER] = ReadRequestTypes.INSPECT_DOCKER_CONTAINER
    params: InspectDockerContainer

class ReadRequestGetResourceMatchingContainer(BaseModel):
    type: Literal[ReadRequestTypes.GET_RESOURCE_MATCHING_CONTAINER] = ReadRequestTypes.GET_RESOURCE_MATCHING_CONTAINER
    params: GetResourceMatchingContainer

class ReadRequestGetContainerLog(BaseModel):
    type: Literal[ReadRequestTypes.GET_CONTAINER_LOG] = ReadRequestTypes.GET_CONTAINER_LOG
    params: GetContainerLog

class ReadRequestSearchContainerLog(BaseModel):
    type: Literal[ReadRequestTypes.SEARCH_CONTAINER_LOG] = ReadRequestTypes.SEARCH_CONTAINER_LOG
    params: SearchContainerLog

class ReadRequestInspectDockerNetwork(BaseModel):
    type: Literal[ReadRequestTypes.INSPECT_DOCKER_NETWORK] = ReadRequestTypes.INSPECT_DOCKER_NETWORK
    params: InspectDockerNetwork

class ReadRequestInspectDockerImage(BaseModel):
    type: Literal[ReadRequestTypes.INSPECT_DOCKER_IMAGE] = ReadRequestTypes.INSPECT_DOCKER_IMAGE
    params: InspectDockerImage

class ReadRequestListDockerImageHistory(BaseModel):
    type: Literal[ReadRequestTypes.LIST_DOCKER_IMAGE_HISTORY] = ReadRequestTypes.LIST_DOCKER_IMAGE_HISTORY
    params: ListDockerImageHistory

class ReadRequestInspectDockerVolume(BaseModel):
    type: Literal[ReadRequestTypes.INSPECT_DOCKER_VOLUME] = ReadRequestTypes.INSPECT_DOCKER_VOLUME
    params: InspectDockerVolume

class ReadRequestGetDockerContainersSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_DOCKER_CONTAINERS_SUMMARY] = ReadRequestTypes.GET_DOCKER_CONTAINERS_SUMMARY
    params: GetDockerContainersSummary

class ReadRequestListAllDockerContainers(BaseModel):
    type: Literal[ReadRequestTypes.LIST_ALL_DOCKER_CONTAINERS] = ReadRequestTypes.LIST_ALL_DOCKER_CONTAINERS
    params: ListAllDockerContainers

class ReadRequestListDockerContainers(BaseModel):
    type: Literal[ReadRequestTypes.LIST_DOCKER_CONTAINERS] = ReadRequestTypes.LIST_DOCKER_CONTAINERS
    params: ListDockerContainers

class ReadRequestListDockerNetworks(BaseModel):
    type: Literal[ReadRequestTypes.LIST_DOCKER_NETWORKS] = ReadRequestTypes.LIST_DOCKER_NETWORKS
    params: ListDockerNetworks

class ReadRequestListDockerImages(BaseModel):
    type: Literal[ReadRequestTypes.LIST_DOCKER_IMAGES] = ReadRequestTypes.LIST_DOCKER_IMAGES
    params: ListDockerImages

class ReadRequestListDockerVolumes(BaseModel):
    type: Literal[ReadRequestTypes.LIST_DOCKER_VOLUMES] = ReadRequestTypes.LIST_DOCKER_VOLUMES
    params: ListDockerVolumes

class ReadRequestListComposeProjects(BaseModel):
    type: Literal[ReadRequestTypes.LIST_COMPOSE_PROJECTS] = ReadRequestTypes.LIST_COMPOSE_PROJECTS
    params: ListComposeProjects

class ReadRequestListTerminals(BaseModel):
    type: Literal[ReadRequestTypes.LIST_TERMINALS] = ReadRequestTypes.LIST_TERMINALS
    params: ListTerminals

class ReadRequestGetSystemInformation(BaseModel):
    type: Literal[ReadRequestTypes.GET_SYSTEM_INFORMATION] = ReadRequestTypes.GET_SYSTEM_INFORMATION
    params: GetSystemInformation

class ReadRequestGetSystemStats(BaseModel):
    type: Literal[ReadRequestTypes.GET_SYSTEM_STATS] = ReadRequestTypes.GET_SYSTEM_STATS
    params: GetSystemStats

class ReadRequestListSystemProcesses(BaseModel):
    type: Literal[ReadRequestTypes.LIST_SYSTEM_PROCESSES] = ReadRequestTypes.LIST_SYSTEM_PROCESSES
    params: ListSystemProcesses

class ReadRequestGetStacksSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_STACKS_SUMMARY] = ReadRequestTypes.GET_STACKS_SUMMARY
    params: GetStacksSummary

class ReadRequestGetStack(BaseModel):
    type: Literal[ReadRequestTypes.GET_STACK] = ReadRequestTypes.GET_STACK
    params: GetStack

class ReadRequestGetStackActionState(BaseModel):
    type: Literal[ReadRequestTypes.GET_STACK_ACTION_STATE] = ReadRequestTypes.GET_STACK_ACTION_STATE
    params: GetStackActionState

class ReadRequestGetStackWebhooksEnabled(BaseModel):
    type: Literal[ReadRequestTypes.GET_STACK_WEBHOOKS_ENABLED] = ReadRequestTypes.GET_STACK_WEBHOOKS_ENABLED
    params: GetStackWebhooksEnabled

class ReadRequestGetStackLog(BaseModel):
    type: Literal[ReadRequestTypes.GET_STACK_LOG] = ReadRequestTypes.GET_STACK_LOG
    params: GetStackLog

class ReadRequestSearchStackLog(BaseModel):
    type: Literal[ReadRequestTypes.SEARCH_STACK_LOG] = ReadRequestTypes.SEARCH_STACK_LOG
    params: SearchStackLog

class ReadRequestInspectStackContainer(BaseModel):
    type: Literal[ReadRequestTypes.INSPECT_STACK_CONTAINER] = ReadRequestTypes.INSPECT_STACK_CONTAINER
    params: InspectStackContainer

class ReadRequestListStacks(BaseModel):
    type: Literal[ReadRequestTypes.LIST_STACKS] = ReadRequestTypes.LIST_STACKS
    params: ListStacks

class ReadRequestListFullStacks(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_STACKS] = ReadRequestTypes.LIST_FULL_STACKS
    params: ListFullStacks

class ReadRequestListStackServices(BaseModel):
    type: Literal[ReadRequestTypes.LIST_STACK_SERVICES] = ReadRequestTypes.LIST_STACK_SERVICES
    params: ListStackServices

class ReadRequestListCommonStackExtraArgs(BaseModel):
    type: Literal[ReadRequestTypes.LIST_COMMON_STACK_EXTRA_ARGS] = ReadRequestTypes.LIST_COMMON_STACK_EXTRA_ARGS
    params: ListCommonStackExtraArgs

class ReadRequestListCommonStackBuildExtraArgs(BaseModel):
    type: Literal[ReadRequestTypes.LIST_COMMON_STACK_BUILD_EXTRA_ARGS] = ReadRequestTypes.LIST_COMMON_STACK_BUILD_EXTRA_ARGS
    params: ListCommonStackBuildExtraArgs

class ReadRequestGetDeploymentsSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_DEPLOYMENTS_SUMMARY] = ReadRequestTypes.GET_DEPLOYMENTS_SUMMARY
    params: GetDeploymentsSummary

class ReadRequestGetDeployment(BaseModel):
    type: Literal[ReadRequestTypes.GET_DEPLOYMENT] = ReadRequestTypes.GET_DEPLOYMENT
    params: GetDeployment

class ReadRequestGetDeploymentContainer(BaseModel):
    type: Literal[ReadRequestTypes.GET_DEPLOYMENT_CONTAINER] = ReadRequestTypes.GET_DEPLOYMENT_CONTAINER
    params: GetDeploymentContainer

class ReadRequestGetDeploymentActionState(BaseModel):
    type: Literal[ReadRequestTypes.GET_DEPLOYMENT_ACTION_STATE] = ReadRequestTypes.GET_DEPLOYMENT_ACTION_STATE
    params: GetDeploymentActionState

class ReadRequestGetDeploymentStats(BaseModel):
    type: Literal[ReadRequestTypes.GET_DEPLOYMENT_STATS] = ReadRequestTypes.GET_DEPLOYMENT_STATS
    params: GetDeploymentStats

class ReadRequestGetDeploymentLog(BaseModel):
    type: Literal[ReadRequestTypes.GET_DEPLOYMENT_LOG] = ReadRequestTypes.GET_DEPLOYMENT_LOG
    params: GetDeploymentLog

class ReadRequestSearchDeploymentLog(BaseModel):
    type: Literal[ReadRequestTypes.SEARCH_DEPLOYMENT_LOG] = ReadRequestTypes.SEARCH_DEPLOYMENT_LOG
    params: SearchDeploymentLog

class ReadRequestInspectDeploymentContainer(BaseModel):
    type: Literal[ReadRequestTypes.INSPECT_DEPLOYMENT_CONTAINER] = ReadRequestTypes.INSPECT_DEPLOYMENT_CONTAINER
    params: InspectDeploymentContainer

class ReadRequestListDeployments(BaseModel):
    type: Literal[ReadRequestTypes.LIST_DEPLOYMENTS] = ReadRequestTypes.LIST_DEPLOYMENTS
    params: ListDeployments

class ReadRequestListFullDeployments(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_DEPLOYMENTS] = ReadRequestTypes.LIST_FULL_DEPLOYMENTS
    params: ListFullDeployments

class ReadRequestListCommonDeploymentExtraArgs(BaseModel):
    type: Literal[ReadRequestTypes.LIST_COMMON_DEPLOYMENT_EXTRA_ARGS] = ReadRequestTypes.LIST_COMMON_DEPLOYMENT_EXTRA_ARGS
    params: ListCommonDeploymentExtraArgs

class ReadRequestGetBuildsSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_BUILDS_SUMMARY] = ReadRequestTypes.GET_BUILDS_SUMMARY
    params: GetBuildsSummary

class ReadRequestGetBuild(BaseModel):
    type: Literal[ReadRequestTypes.GET_BUILD] = ReadRequestTypes.GET_BUILD
    params: GetBuild

class ReadRequestGetBuildActionState(BaseModel):
    type: Literal[ReadRequestTypes.GET_BUILD_ACTION_STATE] = ReadRequestTypes.GET_BUILD_ACTION_STATE
    params: GetBuildActionState

class ReadRequestGetBuildMonthlyStats(BaseModel):
    type: Literal[ReadRequestTypes.GET_BUILD_MONTHLY_STATS] = ReadRequestTypes.GET_BUILD_MONTHLY_STATS
    params: GetBuildMonthlyStats

class ReadRequestListBuildVersions(BaseModel):
    type: Literal[ReadRequestTypes.LIST_BUILD_VERSIONS] = ReadRequestTypes.LIST_BUILD_VERSIONS
    params: ListBuildVersions

class ReadRequestGetBuildWebhookEnabled(BaseModel):
    type: Literal[ReadRequestTypes.GET_BUILD_WEBHOOK_ENABLED] = ReadRequestTypes.GET_BUILD_WEBHOOK_ENABLED
    params: GetBuildWebhookEnabled

class ReadRequestListBuilds(BaseModel):
    type: Literal[ReadRequestTypes.LIST_BUILDS] = ReadRequestTypes.LIST_BUILDS
    params: ListBuilds

class ReadRequestListFullBuilds(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_BUILDS] = ReadRequestTypes.LIST_FULL_BUILDS
    params: ListFullBuilds

class ReadRequestListCommonBuildExtraArgs(BaseModel):
    type: Literal[ReadRequestTypes.LIST_COMMON_BUILD_EXTRA_ARGS] = ReadRequestTypes.LIST_COMMON_BUILD_EXTRA_ARGS
    params: ListCommonBuildExtraArgs

class ReadRequestGetReposSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_REPOS_SUMMARY] = ReadRequestTypes.GET_REPOS_SUMMARY
    params: GetReposSummary

class ReadRequestGetRepo(BaseModel):
    type: Literal[ReadRequestTypes.GET_REPO] = ReadRequestTypes.GET_REPO
    params: GetRepo

class ReadRequestGetRepoActionState(BaseModel):
    type: Literal[ReadRequestTypes.GET_REPO_ACTION_STATE] = ReadRequestTypes.GET_REPO_ACTION_STATE
    params: GetRepoActionState

class ReadRequestGetRepoWebhooksEnabled(BaseModel):
    type: Literal[ReadRequestTypes.GET_REPO_WEBHOOKS_ENABLED] = ReadRequestTypes.GET_REPO_WEBHOOKS_ENABLED
    params: GetRepoWebhooksEnabled

class ReadRequestListRepos(BaseModel):
    type: Literal[ReadRequestTypes.LIST_REPOS] = ReadRequestTypes.LIST_REPOS
    params: ListRepos

class ReadRequestListFullRepos(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_REPOS] = ReadRequestTypes.LIST_FULL_REPOS
    params: ListFullRepos

class ReadRequestGetResourceSyncsSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_RESOURCE_SYNCS_SUMMARY] = ReadRequestTypes.GET_RESOURCE_SYNCS_SUMMARY
    params: GetResourceSyncsSummary

class ReadRequestGetResourceSync(BaseModel):
    type: Literal[ReadRequestTypes.GET_RESOURCE_SYNC] = ReadRequestTypes.GET_RESOURCE_SYNC
    params: GetResourceSync

class ReadRequestGetResourceSyncActionState(BaseModel):
    type: Literal[ReadRequestTypes.GET_RESOURCE_SYNC_ACTION_STATE] = ReadRequestTypes.GET_RESOURCE_SYNC_ACTION_STATE
    params: GetResourceSyncActionState

class ReadRequestGetSyncWebhooksEnabled(BaseModel):
    type: Literal[ReadRequestTypes.GET_SYNC_WEBHOOKS_ENABLED] = ReadRequestTypes.GET_SYNC_WEBHOOKS_ENABLED
    params: GetSyncWebhooksEnabled

class ReadRequestListResourceSyncs(BaseModel):
    type: Literal[ReadRequestTypes.LIST_RESOURCE_SYNCS] = ReadRequestTypes.LIST_RESOURCE_SYNCS
    params: ListResourceSyncs

class ReadRequestListFullResourceSyncs(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_RESOURCE_SYNCS] = ReadRequestTypes.LIST_FULL_RESOURCE_SYNCS
    params: ListFullResourceSyncs

class ReadRequestGetBuildersSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_BUILDERS_SUMMARY] = ReadRequestTypes.GET_BUILDERS_SUMMARY
    params: GetBuildersSummary

class ReadRequestGetBuilder(BaseModel):
    type: Literal[ReadRequestTypes.GET_BUILDER] = ReadRequestTypes.GET_BUILDER
    params: GetBuilder

class ReadRequestListBuilders(BaseModel):
    type: Literal[ReadRequestTypes.LIST_BUILDERS] = ReadRequestTypes.LIST_BUILDERS
    params: ListBuilders

class ReadRequestListFullBuilders(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_BUILDERS] = ReadRequestTypes.LIST_FULL_BUILDERS
    params: ListFullBuilders

class ReadRequestGetAlertersSummary(BaseModel):
    type: Literal[ReadRequestTypes.GET_ALERTERS_SUMMARY] = ReadRequestTypes.GET_ALERTERS_SUMMARY
    params: GetAlertersSummary

class ReadRequestGetAlerter(BaseModel):
    type: Literal[ReadRequestTypes.GET_ALERTER] = ReadRequestTypes.GET_ALERTER
    params: GetAlerter

class ReadRequestListAlerters(BaseModel):
    type: Literal[ReadRequestTypes.LIST_ALERTERS] = ReadRequestTypes.LIST_ALERTERS
    params: ListAlerters

class ReadRequestListFullAlerters(BaseModel):
    type: Literal[ReadRequestTypes.LIST_FULL_ALERTERS] = ReadRequestTypes.LIST_FULL_ALERTERS
    params: ListFullAlerters

class ReadRequestExportAllResourcesToToml(BaseModel):
    type: Literal[ReadRequestTypes.EXPORT_ALL_RESOURCES_TO_TOML] = ReadRequestTypes.EXPORT_ALL_RESOURCES_TO_TOML
    params: ExportAllResourcesToToml

class ReadRequestExportResourcesToToml(BaseModel):
    type: Literal[ReadRequestTypes.EXPORT_RESOURCES_TO_TOML] = ReadRequestTypes.EXPORT_RESOURCES_TO_TOML
    params: ExportResourcesToToml

class ReadRequestGetTag(BaseModel):
    type: Literal[ReadRequestTypes.GET_TAG] = ReadRequestTypes.GET_TAG
    params: GetTag

class ReadRequestListTags(BaseModel):
    type: Literal[ReadRequestTypes.LIST_TAGS] = ReadRequestTypes.LIST_TAGS
    params: ListTags

class ReadRequestGetUpdate(BaseModel):
    type: Literal[ReadRequestTypes.GET_UPDATE] = ReadRequestTypes.GET_UPDATE
    params: GetUpdate

class ReadRequestListUpdates(BaseModel):
    type: Literal[ReadRequestTypes.LIST_UPDATES] = ReadRequestTypes.LIST_UPDATES
    params: ListUpdates

class ReadRequestListAlerts(BaseModel):
    type: Literal[ReadRequestTypes.LIST_ALERTS] = ReadRequestTypes.LIST_ALERTS
    params: ListAlerts

class ReadRequestGetAlert(BaseModel):
    type: Literal[ReadRequestTypes.GET_ALERT] = ReadRequestTypes.GET_ALERT
    params: GetAlert

class ReadRequestGetVariable(BaseModel):
    type: Literal[ReadRequestTypes.GET_VARIABLE] = ReadRequestTypes.GET_VARIABLE
    params: GetVariable

class ReadRequestListVariables(BaseModel):
    type: Literal[ReadRequestTypes.LIST_VARIABLES] = ReadRequestTypes.LIST_VARIABLES
    params: ListVariables

class ReadRequestGetGitProviderAccount(BaseModel):
    type: Literal[ReadRequestTypes.GET_GIT_PROVIDER_ACCOUNT] = ReadRequestTypes.GET_GIT_PROVIDER_ACCOUNT
    params: GetGitProviderAccount

class ReadRequestListGitProviderAccounts(BaseModel):
    type: Literal[ReadRequestTypes.LIST_GIT_PROVIDER_ACCOUNTS] = ReadRequestTypes.LIST_GIT_PROVIDER_ACCOUNTS
    params: ListGitProviderAccounts

class ReadRequestGetDockerRegistryAccount(BaseModel):
    type: Literal[ReadRequestTypes.GET_DOCKER_REGISTRY_ACCOUNT] = ReadRequestTypes.GET_DOCKER_REGISTRY_ACCOUNT
    params: GetDockerRegistryAccount

class ReadRequestListDockerRegistryAccounts(BaseModel):
    type: Literal[ReadRequestTypes.LIST_DOCKER_REGISTRY_ACCOUNTS] = ReadRequestTypes.LIST_DOCKER_REGISTRY_ACCOUNTS
    params: ListDockerRegistryAccounts

ReadRequest = Union[ReadRequestGetVersion, ReadRequestGetCoreInfo, ReadRequestListSecrets, ReadRequestListGitProvidersFromConfig, ReadRequestListDockerRegistriesFromConfig, ReadRequestGetUsername, ReadRequestGetPermission, ReadRequestFindUser, ReadRequestListUsers, ReadRequestListApiKeys, ReadRequestListApiKeysForServiceUser, ReadRequestListPermissions, ReadRequestListUserTargetPermissions, ReadRequestGetUserGroup, ReadRequestListUserGroups, ReadRequestGetProceduresSummary, ReadRequestGetProcedure, ReadRequestGetProcedureActionState, ReadRequestListProcedures, ReadRequestListFullProcedures, ReadRequestGetActionsSummary, ReadRequestGetAction, ReadRequestGetActionActionState, ReadRequestListActions, ReadRequestListFullActions, ReadRequestListSchedules, ReadRequestGetServersSummary, ReadRequestGetServer, ReadRequestGetServerState, ReadRequestGetPeripheryVersion, ReadRequestGetServerActionState, ReadRequestGetHistoricalServerStats, ReadRequestListServers, ReadRequestListFullServers, ReadRequestInspectDockerContainer, ReadRequestGetResourceMatchingContainer, ReadRequestGetContainerLog, ReadRequestSearchContainerLog, ReadRequestInspectDockerNetwork, ReadRequestInspectDockerImage, ReadRequestListDockerImageHistory, ReadRequestInspectDockerVolume, ReadRequestGetDockerContainersSummary, ReadRequestListAllDockerContainers, ReadRequestListDockerContainers, ReadRequestListDockerNetworks, ReadRequestListDockerImages, ReadRequestListDockerVolumes, ReadRequestListComposeProjects, ReadRequestListTerminals, ReadRequestGetSystemInformation, ReadRequestGetSystemStats, ReadRequestListSystemProcesses, ReadRequestGetStacksSummary, ReadRequestGetStack, ReadRequestGetStackActionState, ReadRequestGetStackWebhooksEnabled, ReadRequestGetStackLog, ReadRequestSearchStackLog, ReadRequestInspectStackContainer, ReadRequestListStacks, ReadRequestListFullStacks, ReadRequestListStackServices, ReadRequestListCommonStackExtraArgs, ReadRequestListCommonStackBuildExtraArgs, ReadRequestGetDeploymentsSummary, ReadRequestGetDeployment, ReadRequestGetDeploymentContainer, ReadRequestGetDeploymentActionState, ReadRequestGetDeploymentStats, ReadRequestGetDeploymentLog, ReadRequestSearchDeploymentLog, ReadRequestInspectDeploymentContainer, ReadRequestListDeployments, ReadRequestListFullDeployments, ReadRequestListCommonDeploymentExtraArgs, ReadRequestGetBuildsSummary, ReadRequestGetBuild, ReadRequestGetBuildActionState, ReadRequestGetBuildMonthlyStats, ReadRequestListBuildVersions, ReadRequestGetBuildWebhookEnabled, ReadRequestListBuilds, ReadRequestListFullBuilds, ReadRequestListCommonBuildExtraArgs, ReadRequestGetReposSummary, ReadRequestGetRepo, ReadRequestGetRepoActionState, ReadRequestGetRepoWebhooksEnabled, ReadRequestListRepos, ReadRequestListFullRepos, ReadRequestGetResourceSyncsSummary, ReadRequestGetResourceSync, ReadRequestGetResourceSyncActionState, ReadRequestGetSyncWebhooksEnabled, ReadRequestListResourceSyncs, ReadRequestListFullResourceSyncs, ReadRequestGetBuildersSummary, ReadRequestGetBuilder, ReadRequestListBuilders, ReadRequestListFullBuilders, ReadRequestGetAlertersSummary, ReadRequestGetAlerter, ReadRequestListAlerters, ReadRequestListFullAlerters, ReadRequestExportAllResourcesToToml, ReadRequestExportResourcesToToml, ReadRequestGetTag, ReadRequestListTags, ReadRequestGetUpdate, ReadRequestListUpdates, ReadRequestListAlerts, ReadRequestGetAlert, ReadRequestGetVariable, ReadRequestListVariables, ReadRequestGetGitProviderAccount, ReadRequestListGitProviderAccounts, ReadRequestGetDockerRegistryAccount, ReadRequestListDockerRegistryAccounts]
class SpecificPermission(str, Enum):
    """
    The specific types of permission that a User or UserGroup can have on a resource.
    """
    TERMINAL = "Terminal"
    """
    On **Server**
    - Access the terminal apis
    On **Stack / Deployment**
    - Access the container exec Apis
    """
    ATTACH = "Attach"
    """
    On **Server**
    - Allowed to attach Stacks, Deployments, Repos, Builders to the Server
    On **Builder**
    - Allowed to attach Builds to the Builder
    On **Build**
    - Allowed to attach Deployments to the Build
    """
    INSPECT = "Inspect"
    """
    On **Server**
    - Access the `container inspect` apis
    On **Stack / Deployment**
    - Access `container inspect` apis for associated containers
    """
    LOGS = "Logs"
    """
    On **Server**
    - Read all container logs on the server
    On **Stack / Deployment**
    - Read the container logs
    """
    PROCESSES = "Processes"
    """
    On **Server**
    - Read all the processes on the host
    """
class UserRequestTypes(str, Enum):
    PUSH_RECENTLY_VIEWED = "PushRecentlyViewed"
    SET_LAST_SEEN_UPDATE = "SetLastSeenUpdate"
    CREATE_API_KEY = "CreateApiKey"
    DELETE_API_KEY = "DeleteApiKey"

class UserRequestPushRecentlyViewed(BaseModel):
    type: Literal[UserRequestTypes.PUSH_RECENTLY_VIEWED] = UserRequestTypes.PUSH_RECENTLY_VIEWED
    params: PushRecentlyViewed

class UserRequestSetLastSeenUpdate(BaseModel):
    type: Literal[UserRequestTypes.SET_LAST_SEEN_UPDATE] = UserRequestTypes.SET_LAST_SEEN_UPDATE
    params: SetLastSeenUpdate

class UserRequestCreateApiKey(BaseModel):
    type: Literal[UserRequestTypes.CREATE_API_KEY] = UserRequestTypes.CREATE_API_KEY
    params: CreateApiKey

class UserRequestDeleteApiKey(BaseModel):
    type: Literal[UserRequestTypes.DELETE_API_KEY] = UserRequestTypes.DELETE_API_KEY
    params: DeleteApiKey

UserRequest = Union[UserRequestPushRecentlyViewed, UserRequestSetLastSeenUpdate, UserRequestCreateApiKey, UserRequestDeleteApiKey]
class WriteRequestTypes(str, Enum):
    CREATE_LOCAL_USER = "CreateLocalUser"
    UPDATE_USER_USERNAME = "UpdateUserUsername"
    UPDATE_USER_PASSWORD = "UpdateUserPassword"
    DELETE_USER = "DeleteUser"
    CREATE_SERVICE_USER = "CreateServiceUser"
    UPDATE_SERVICE_USER_DESCRIPTION = "UpdateServiceUserDescription"
    CREATE_API_KEY_FOR_SERVICE_USER = "CreateApiKeyForServiceUser"
    DELETE_API_KEY_FOR_SERVICE_USER = "DeleteApiKeyForServiceUser"
    CREATE_USER_GROUP = "CreateUserGroup"
    RENAME_USER_GROUP = "RenameUserGroup"
    DELETE_USER_GROUP = "DeleteUserGroup"
    ADD_USER_TO_USER_GROUP = "AddUserToUserGroup"
    REMOVE_USER_FROM_USER_GROUP = "RemoveUserFromUserGroup"
    SET_USERS_IN_USER_GROUP = "SetUsersInUserGroup"
    SET_EVERYONE_USER_GROUP = "SetEveryoneUserGroup"
    UPDATE_USER_ADMIN = "UpdateUserAdmin"
    UPDATE_USER_BASE_PERMISSIONS = "UpdateUserBasePermissions"
    UPDATE_PERMISSION_ON_RESOURCE_TYPE = "UpdatePermissionOnResourceType"
    UPDATE_PERMISSION_ON_TARGET = "UpdatePermissionOnTarget"
    UPDATE_RESOURCE_META = "UpdateResourceMeta"
    CREATE_SERVER = "CreateServer"
    COPY_SERVER = "CopyServer"
    DELETE_SERVER = "DeleteServer"
    UPDATE_SERVER = "UpdateServer"
    RENAME_SERVER = "RenameServer"
    CREATE_NETWORK = "CreateNetwork"
    CREATE_TERMINAL = "CreateTerminal"
    DELETE_TERMINAL = "DeleteTerminal"
    DELETE_ALL_TERMINALS = "DeleteAllTerminals"
    CREATE_STACK = "CreateStack"
    COPY_STACK = "CopyStack"
    DELETE_STACK = "DeleteStack"
    UPDATE_STACK = "UpdateStack"
    RENAME_STACK = "RenameStack"
    WRITE_STACK_FILE_CONTENTS = "WriteStackFileContents"
    REFRESH_STACK_CACHE = "RefreshStackCache"
    CREATE_STACK_WEBHOOK = "CreateStackWebhook"
    DELETE_STACK_WEBHOOK = "DeleteStackWebhook"
    CREATE_DEPLOYMENT = "CreateDeployment"
    COPY_DEPLOYMENT = "CopyDeployment"
    CREATE_DEPLOYMENT_FROM_CONTAINER = "CreateDeploymentFromContainer"
    DELETE_DEPLOYMENT = "DeleteDeployment"
    UPDATE_DEPLOYMENT = "UpdateDeployment"
    RENAME_DEPLOYMENT = "RenameDeployment"
    CREATE_BUILD = "CreateBuild"
    COPY_BUILD = "CopyBuild"
    DELETE_BUILD = "DeleteBuild"
    UPDATE_BUILD = "UpdateBuild"
    RENAME_BUILD = "RenameBuild"
    WRITE_BUILD_FILE_CONTENTS = "WriteBuildFileContents"
    REFRESH_BUILD_CACHE = "RefreshBuildCache"
    CREATE_BUILD_WEBHOOK = "CreateBuildWebhook"
    DELETE_BUILD_WEBHOOK = "DeleteBuildWebhook"
    CREATE_BUILDER = "CreateBuilder"
    COPY_BUILDER = "CopyBuilder"
    DELETE_BUILDER = "DeleteBuilder"
    UPDATE_BUILDER = "UpdateBuilder"
    RENAME_BUILDER = "RenameBuilder"
    CREATE_REPO = "CreateRepo"
    COPY_REPO = "CopyRepo"
    DELETE_REPO = "DeleteRepo"
    UPDATE_REPO = "UpdateRepo"
    RENAME_REPO = "RenameRepo"
    REFRESH_REPO_CACHE = "RefreshRepoCache"
    CREATE_REPO_WEBHOOK = "CreateRepoWebhook"
    DELETE_REPO_WEBHOOK = "DeleteRepoWebhook"
    CREATE_ALERTER = "CreateAlerter"
    COPY_ALERTER = "CopyAlerter"
    DELETE_ALERTER = "DeleteAlerter"
    UPDATE_ALERTER = "UpdateAlerter"
    RENAME_ALERTER = "RenameAlerter"
    CREATE_PROCEDURE = "CreateProcedure"
    COPY_PROCEDURE = "CopyProcedure"
    DELETE_PROCEDURE = "DeleteProcedure"
    UPDATE_PROCEDURE = "UpdateProcedure"
    RENAME_PROCEDURE = "RenameProcedure"
    CREATE_ACTION = "CreateAction"
    COPY_ACTION = "CopyAction"
    DELETE_ACTION = "DeleteAction"
    UPDATE_ACTION = "UpdateAction"
    RENAME_ACTION = "RenameAction"
    CREATE_RESOURCE_SYNC = "CreateResourceSync"
    COPY_RESOURCE_SYNC = "CopyResourceSync"
    DELETE_RESOURCE_SYNC = "DeleteResourceSync"
    UPDATE_RESOURCE_SYNC = "UpdateResourceSync"
    RENAME_RESOURCE_SYNC = "RenameResourceSync"
    WRITE_SYNC_FILE_CONTENTS = "WriteSyncFileContents"
    COMMIT_SYNC = "CommitSync"
    REFRESH_RESOURCE_SYNC_PENDING = "RefreshResourceSyncPending"
    CREATE_SYNC_WEBHOOK = "CreateSyncWebhook"
    DELETE_SYNC_WEBHOOK = "DeleteSyncWebhook"
    CREATE_TAG = "CreateTag"
    DELETE_TAG = "DeleteTag"
    RENAME_TAG = "RenameTag"
    UPDATE_TAG_COLOR = "UpdateTagColor"
    CREATE_VARIABLE = "CreateVariable"
    UPDATE_VARIABLE_VALUE = "UpdateVariableValue"
    UPDATE_VARIABLE_DESCRIPTION = "UpdateVariableDescription"
    UPDATE_VARIABLE_IS_SECRET = "UpdateVariableIsSecret"
    DELETE_VARIABLE = "DeleteVariable"
    CREATE_GIT_PROVIDER_ACCOUNT = "CreateGitProviderAccount"
    UPDATE_GIT_PROVIDER_ACCOUNT = "UpdateGitProviderAccount"
    DELETE_GIT_PROVIDER_ACCOUNT = "DeleteGitProviderAccount"
    CREATE_DOCKER_REGISTRY_ACCOUNT = "CreateDockerRegistryAccount"
    UPDATE_DOCKER_REGISTRY_ACCOUNT = "UpdateDockerRegistryAccount"
    DELETE_DOCKER_REGISTRY_ACCOUNT = "DeleteDockerRegistryAccount"

class WriteRequestCreateLocalUser(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_LOCAL_USER] = WriteRequestTypes.CREATE_LOCAL_USER
    params: CreateLocalUser

class WriteRequestUpdateUserUsername(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_USER_USERNAME] = WriteRequestTypes.UPDATE_USER_USERNAME
    params: UpdateUserUsername

class WriteRequestUpdateUserPassword(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_USER_PASSWORD] = WriteRequestTypes.UPDATE_USER_PASSWORD
    params: UpdateUserPassword

class WriteRequestDeleteUser(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_USER] = WriteRequestTypes.DELETE_USER
    params: DeleteUser

class WriteRequestCreateServiceUser(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_SERVICE_USER] = WriteRequestTypes.CREATE_SERVICE_USER
    params: CreateServiceUser

class WriteRequestUpdateServiceUserDescription(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_SERVICE_USER_DESCRIPTION] = WriteRequestTypes.UPDATE_SERVICE_USER_DESCRIPTION
    params: UpdateServiceUserDescription

class WriteRequestCreateApiKeyForServiceUser(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_API_KEY_FOR_SERVICE_USER] = WriteRequestTypes.CREATE_API_KEY_FOR_SERVICE_USER
    params: CreateApiKeyForServiceUser

class WriteRequestDeleteApiKeyForServiceUser(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_API_KEY_FOR_SERVICE_USER] = WriteRequestTypes.DELETE_API_KEY_FOR_SERVICE_USER
    params: DeleteApiKeyForServiceUser

class WriteRequestCreateUserGroup(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_USER_GROUP] = WriteRequestTypes.CREATE_USER_GROUP
    params: CreateUserGroup

class WriteRequestRenameUserGroup(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_USER_GROUP] = WriteRequestTypes.RENAME_USER_GROUP
    params: RenameUserGroup

class WriteRequestDeleteUserGroup(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_USER_GROUP] = WriteRequestTypes.DELETE_USER_GROUP
    params: DeleteUserGroup

class WriteRequestAddUserToUserGroup(BaseModel):
    type: Literal[WriteRequestTypes.ADD_USER_TO_USER_GROUP] = WriteRequestTypes.ADD_USER_TO_USER_GROUP
    params: AddUserToUserGroup

class WriteRequestRemoveUserFromUserGroup(BaseModel):
    type: Literal[WriteRequestTypes.REMOVE_USER_FROM_USER_GROUP] = WriteRequestTypes.REMOVE_USER_FROM_USER_GROUP
    params: RemoveUserFromUserGroup

class WriteRequestSetUsersInUserGroup(BaseModel):
    type: Literal[WriteRequestTypes.SET_USERS_IN_USER_GROUP] = WriteRequestTypes.SET_USERS_IN_USER_GROUP
    params: SetUsersInUserGroup

class WriteRequestSetEveryoneUserGroup(BaseModel):
    type: Literal[WriteRequestTypes.SET_EVERYONE_USER_GROUP] = WriteRequestTypes.SET_EVERYONE_USER_GROUP
    params: SetEveryoneUserGroup

class WriteRequestUpdateUserAdmin(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_USER_ADMIN] = WriteRequestTypes.UPDATE_USER_ADMIN
    params: UpdateUserAdmin

class WriteRequestUpdateUserBasePermissions(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_USER_BASE_PERMISSIONS] = WriteRequestTypes.UPDATE_USER_BASE_PERMISSIONS
    params: UpdateUserBasePermissions

class WriteRequestUpdatePermissionOnResourceType(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_PERMISSION_ON_RESOURCE_TYPE] = WriteRequestTypes.UPDATE_PERMISSION_ON_RESOURCE_TYPE
    params: UpdatePermissionOnResourceType

class WriteRequestUpdatePermissionOnTarget(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_PERMISSION_ON_TARGET] = WriteRequestTypes.UPDATE_PERMISSION_ON_TARGET
    params: UpdatePermissionOnTarget

class WriteRequestUpdateResourceMeta(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_RESOURCE_META] = WriteRequestTypes.UPDATE_RESOURCE_META
    params: UpdateResourceMeta

class WriteRequestCreateServer(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_SERVER] = WriteRequestTypes.CREATE_SERVER
    params: CreateServer

class WriteRequestCopyServer(BaseModel):
    type: Literal[WriteRequestTypes.COPY_SERVER] = WriteRequestTypes.COPY_SERVER
    params: CopyServer

class WriteRequestDeleteServer(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_SERVER] = WriteRequestTypes.DELETE_SERVER
    params: DeleteServer

class WriteRequestUpdateServer(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_SERVER] = WriteRequestTypes.UPDATE_SERVER
    params: UpdateServer

class WriteRequestRenameServer(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_SERVER] = WriteRequestTypes.RENAME_SERVER
    params: RenameServer

class WriteRequestCreateNetwork(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_NETWORK] = WriteRequestTypes.CREATE_NETWORK
    params: CreateNetwork

class WriteRequestCreateTerminal(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_TERMINAL] = WriteRequestTypes.CREATE_TERMINAL
    params: CreateTerminal

class WriteRequestDeleteTerminal(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_TERMINAL] = WriteRequestTypes.DELETE_TERMINAL
    params: DeleteTerminal

class WriteRequestDeleteAllTerminals(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_ALL_TERMINALS] = WriteRequestTypes.DELETE_ALL_TERMINALS
    params: DeleteAllTerminals

class WriteRequestCreateStack(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_STACK] = WriteRequestTypes.CREATE_STACK
    params: CreateStack

class WriteRequestCopyStack(BaseModel):
    type: Literal[WriteRequestTypes.COPY_STACK] = WriteRequestTypes.COPY_STACK
    params: CopyStack

class WriteRequestDeleteStack(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_STACK] = WriteRequestTypes.DELETE_STACK
    params: DeleteStack

class WriteRequestUpdateStack(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_STACK] = WriteRequestTypes.UPDATE_STACK
    params: UpdateStack

class WriteRequestRenameStack(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_STACK] = WriteRequestTypes.RENAME_STACK
    params: RenameStack

class WriteRequestWriteStackFileContents(BaseModel):
    type: Literal[WriteRequestTypes.WRITE_STACK_FILE_CONTENTS] = WriteRequestTypes.WRITE_STACK_FILE_CONTENTS
    params: WriteStackFileContents

class WriteRequestRefreshStackCache(BaseModel):
    type: Literal[WriteRequestTypes.REFRESH_STACK_CACHE] = WriteRequestTypes.REFRESH_STACK_CACHE
    params: RefreshStackCache

class WriteRequestCreateStackWebhook(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_STACK_WEBHOOK] = WriteRequestTypes.CREATE_STACK_WEBHOOK
    params: CreateStackWebhook

class WriteRequestDeleteStackWebhook(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_STACK_WEBHOOK] = WriteRequestTypes.DELETE_STACK_WEBHOOK
    params: DeleteStackWebhook

class WriteRequestCreateDeployment(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_DEPLOYMENT] = WriteRequestTypes.CREATE_DEPLOYMENT
    params: CreateDeployment

class WriteRequestCopyDeployment(BaseModel):
    type: Literal[WriteRequestTypes.COPY_DEPLOYMENT] = WriteRequestTypes.COPY_DEPLOYMENT
    params: CopyDeployment

class WriteRequestCreateDeploymentFromContainer(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_DEPLOYMENT_FROM_CONTAINER] = WriteRequestTypes.CREATE_DEPLOYMENT_FROM_CONTAINER
    params: CreateDeploymentFromContainer

class WriteRequestDeleteDeployment(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_DEPLOYMENT] = WriteRequestTypes.DELETE_DEPLOYMENT
    params: DeleteDeployment

class WriteRequestUpdateDeployment(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_DEPLOYMENT] = WriteRequestTypes.UPDATE_DEPLOYMENT
    params: UpdateDeployment

class WriteRequestRenameDeployment(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_DEPLOYMENT] = WriteRequestTypes.RENAME_DEPLOYMENT
    params: RenameDeployment

class WriteRequestCreateBuild(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_BUILD] = WriteRequestTypes.CREATE_BUILD
    params: CreateBuild

class WriteRequestCopyBuild(BaseModel):
    type: Literal[WriteRequestTypes.COPY_BUILD] = WriteRequestTypes.COPY_BUILD
    params: CopyBuild

class WriteRequestDeleteBuild(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_BUILD] = WriteRequestTypes.DELETE_BUILD
    params: DeleteBuild

class WriteRequestUpdateBuild(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_BUILD] = WriteRequestTypes.UPDATE_BUILD
    params: UpdateBuild

class WriteRequestRenameBuild(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_BUILD] = WriteRequestTypes.RENAME_BUILD
    params: RenameBuild

class WriteRequestWriteBuildFileContents(BaseModel):
    type: Literal[WriteRequestTypes.WRITE_BUILD_FILE_CONTENTS] = WriteRequestTypes.WRITE_BUILD_FILE_CONTENTS
    params: WriteBuildFileContents

class WriteRequestRefreshBuildCache(BaseModel):
    type: Literal[WriteRequestTypes.REFRESH_BUILD_CACHE] = WriteRequestTypes.REFRESH_BUILD_CACHE
    params: RefreshBuildCache

class WriteRequestCreateBuildWebhook(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_BUILD_WEBHOOK] = WriteRequestTypes.CREATE_BUILD_WEBHOOK
    params: CreateBuildWebhook

class WriteRequestDeleteBuildWebhook(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_BUILD_WEBHOOK] = WriteRequestTypes.DELETE_BUILD_WEBHOOK
    params: DeleteBuildWebhook

class WriteRequestCreateBuilder(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_BUILDER] = WriteRequestTypes.CREATE_BUILDER
    params: CreateBuilder

class WriteRequestCopyBuilder(BaseModel):
    type: Literal[WriteRequestTypes.COPY_BUILDER] = WriteRequestTypes.COPY_BUILDER
    params: CopyBuilder

class WriteRequestDeleteBuilder(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_BUILDER] = WriteRequestTypes.DELETE_BUILDER
    params: DeleteBuilder

class WriteRequestUpdateBuilder(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_BUILDER] = WriteRequestTypes.UPDATE_BUILDER
    params: UpdateBuilder

class WriteRequestRenameBuilder(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_BUILDER] = WriteRequestTypes.RENAME_BUILDER
    params: RenameBuilder

class WriteRequestCreateRepo(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_REPO] = WriteRequestTypes.CREATE_REPO
    params: CreateRepo

class WriteRequestCopyRepo(BaseModel):
    type: Literal[WriteRequestTypes.COPY_REPO] = WriteRequestTypes.COPY_REPO
    params: CopyRepo

class WriteRequestDeleteRepo(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_REPO] = WriteRequestTypes.DELETE_REPO
    params: DeleteRepo

class WriteRequestUpdateRepo(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_REPO] = WriteRequestTypes.UPDATE_REPO
    params: UpdateRepo

class WriteRequestRenameRepo(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_REPO] = WriteRequestTypes.RENAME_REPO
    params: RenameRepo

class WriteRequestRefreshRepoCache(BaseModel):
    type: Literal[WriteRequestTypes.REFRESH_REPO_CACHE] = WriteRequestTypes.REFRESH_REPO_CACHE
    params: RefreshRepoCache

class WriteRequestCreateRepoWebhook(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_REPO_WEBHOOK] = WriteRequestTypes.CREATE_REPO_WEBHOOK
    params: CreateRepoWebhook

class WriteRequestDeleteRepoWebhook(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_REPO_WEBHOOK] = WriteRequestTypes.DELETE_REPO_WEBHOOK
    params: DeleteRepoWebhook

class WriteRequestCreateAlerter(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_ALERTER] = WriteRequestTypes.CREATE_ALERTER
    params: CreateAlerter

class WriteRequestCopyAlerter(BaseModel):
    type: Literal[WriteRequestTypes.COPY_ALERTER] = WriteRequestTypes.COPY_ALERTER
    params: CopyAlerter

class WriteRequestDeleteAlerter(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_ALERTER] = WriteRequestTypes.DELETE_ALERTER
    params: DeleteAlerter

class WriteRequestUpdateAlerter(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_ALERTER] = WriteRequestTypes.UPDATE_ALERTER
    params: UpdateAlerter

class WriteRequestRenameAlerter(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_ALERTER] = WriteRequestTypes.RENAME_ALERTER
    params: RenameAlerter

class WriteRequestCreateProcedure(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_PROCEDURE] = WriteRequestTypes.CREATE_PROCEDURE
    params: CreateProcedure

class WriteRequestCopyProcedure(BaseModel):
    type: Literal[WriteRequestTypes.COPY_PROCEDURE] = WriteRequestTypes.COPY_PROCEDURE
    params: CopyProcedure

class WriteRequestDeleteProcedure(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_PROCEDURE] = WriteRequestTypes.DELETE_PROCEDURE
    params: DeleteProcedure

class WriteRequestUpdateProcedure(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_PROCEDURE] = WriteRequestTypes.UPDATE_PROCEDURE
    params: UpdateProcedure

class WriteRequestRenameProcedure(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_PROCEDURE] = WriteRequestTypes.RENAME_PROCEDURE
    params: RenameProcedure

class WriteRequestCreateAction(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_ACTION] = WriteRequestTypes.CREATE_ACTION
    params: CreateAction

class WriteRequestCopyAction(BaseModel):
    type: Literal[WriteRequestTypes.COPY_ACTION] = WriteRequestTypes.COPY_ACTION
    params: CopyAction

class WriteRequestDeleteAction(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_ACTION] = WriteRequestTypes.DELETE_ACTION
    params: DeleteAction

class WriteRequestUpdateAction(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_ACTION] = WriteRequestTypes.UPDATE_ACTION
    params: UpdateAction

class WriteRequestRenameAction(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_ACTION] = WriteRequestTypes.RENAME_ACTION
    params: RenameAction

class WriteRequestCreateResourceSync(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_RESOURCE_SYNC] = WriteRequestTypes.CREATE_RESOURCE_SYNC
    params: CreateResourceSync

class WriteRequestCopyResourceSync(BaseModel):
    type: Literal[WriteRequestTypes.COPY_RESOURCE_SYNC] = WriteRequestTypes.COPY_RESOURCE_SYNC
    params: CopyResourceSync

class WriteRequestDeleteResourceSync(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_RESOURCE_SYNC] = WriteRequestTypes.DELETE_RESOURCE_SYNC
    params: DeleteResourceSync

class WriteRequestUpdateResourceSync(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_RESOURCE_SYNC] = WriteRequestTypes.UPDATE_RESOURCE_SYNC
    params: UpdateResourceSync

class WriteRequestRenameResourceSync(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_RESOURCE_SYNC] = WriteRequestTypes.RENAME_RESOURCE_SYNC
    params: RenameResourceSync

class WriteRequestWriteSyncFileContents(BaseModel):
    type: Literal[WriteRequestTypes.WRITE_SYNC_FILE_CONTENTS] = WriteRequestTypes.WRITE_SYNC_FILE_CONTENTS
    params: WriteSyncFileContents

class WriteRequestCommitSync(BaseModel):
    type: Literal[WriteRequestTypes.COMMIT_SYNC] = WriteRequestTypes.COMMIT_SYNC
    params: CommitSync

class WriteRequestRefreshResourceSyncPending(BaseModel):
    type: Literal[WriteRequestTypes.REFRESH_RESOURCE_SYNC_PENDING] = WriteRequestTypes.REFRESH_RESOURCE_SYNC_PENDING
    params: RefreshResourceSyncPending

class WriteRequestCreateSyncWebhook(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_SYNC_WEBHOOK] = WriteRequestTypes.CREATE_SYNC_WEBHOOK
    params: CreateSyncWebhook

class WriteRequestDeleteSyncWebhook(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_SYNC_WEBHOOK] = WriteRequestTypes.DELETE_SYNC_WEBHOOK
    params: DeleteSyncWebhook

class WriteRequestCreateTag(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_TAG] = WriteRequestTypes.CREATE_TAG
    params: CreateTag

class WriteRequestDeleteTag(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_TAG] = WriteRequestTypes.DELETE_TAG
    params: DeleteTag

class WriteRequestRenameTag(BaseModel):
    type: Literal[WriteRequestTypes.RENAME_TAG] = WriteRequestTypes.RENAME_TAG
    params: RenameTag

class WriteRequestUpdateTagColor(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_TAG_COLOR] = WriteRequestTypes.UPDATE_TAG_COLOR
    params: UpdateTagColor

class WriteRequestCreateVariable(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_VARIABLE] = WriteRequestTypes.CREATE_VARIABLE
    params: CreateVariable

class WriteRequestUpdateVariableValue(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_VARIABLE_VALUE] = WriteRequestTypes.UPDATE_VARIABLE_VALUE
    params: UpdateVariableValue

class WriteRequestUpdateVariableDescription(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_VARIABLE_DESCRIPTION] = WriteRequestTypes.UPDATE_VARIABLE_DESCRIPTION
    params: UpdateVariableDescription

class WriteRequestUpdateVariableIsSecret(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_VARIABLE_IS_SECRET] = WriteRequestTypes.UPDATE_VARIABLE_IS_SECRET
    params: UpdateVariableIsSecret

class WriteRequestDeleteVariable(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_VARIABLE] = WriteRequestTypes.DELETE_VARIABLE
    params: DeleteVariable

class WriteRequestCreateGitProviderAccount(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_GIT_PROVIDER_ACCOUNT] = WriteRequestTypes.CREATE_GIT_PROVIDER_ACCOUNT
    params: CreateGitProviderAccount

class WriteRequestUpdateGitProviderAccount(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_GIT_PROVIDER_ACCOUNT] = WriteRequestTypes.UPDATE_GIT_PROVIDER_ACCOUNT
    params: UpdateGitProviderAccount

class WriteRequestDeleteGitProviderAccount(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_GIT_PROVIDER_ACCOUNT] = WriteRequestTypes.DELETE_GIT_PROVIDER_ACCOUNT
    params: DeleteGitProviderAccount

class WriteRequestCreateDockerRegistryAccount(BaseModel):
    type: Literal[WriteRequestTypes.CREATE_DOCKER_REGISTRY_ACCOUNT] = WriteRequestTypes.CREATE_DOCKER_REGISTRY_ACCOUNT
    params: CreateDockerRegistryAccount

class WriteRequestUpdateDockerRegistryAccount(BaseModel):
    type: Literal[WriteRequestTypes.UPDATE_DOCKER_REGISTRY_ACCOUNT] = WriteRequestTypes.UPDATE_DOCKER_REGISTRY_ACCOUNT
    params: UpdateDockerRegistryAccount

class WriteRequestDeleteDockerRegistryAccount(BaseModel):
    type: Literal[WriteRequestTypes.DELETE_DOCKER_REGISTRY_ACCOUNT] = WriteRequestTypes.DELETE_DOCKER_REGISTRY_ACCOUNT
    params: DeleteDockerRegistryAccount

WriteRequest = Union[WriteRequestCreateLocalUser, WriteRequestUpdateUserUsername, WriteRequestUpdateUserPassword, WriteRequestDeleteUser, WriteRequestCreateServiceUser, WriteRequestUpdateServiceUserDescription, WriteRequestCreateApiKeyForServiceUser, WriteRequestDeleteApiKeyForServiceUser, WriteRequestCreateUserGroup, WriteRequestRenameUserGroup, WriteRequestDeleteUserGroup, WriteRequestAddUserToUserGroup, WriteRequestRemoveUserFromUserGroup, WriteRequestSetUsersInUserGroup, WriteRequestSetEveryoneUserGroup, WriteRequestUpdateUserAdmin, WriteRequestUpdateUserBasePermissions, WriteRequestUpdatePermissionOnResourceType, WriteRequestUpdatePermissionOnTarget, WriteRequestUpdateResourceMeta, WriteRequestCreateServer, WriteRequestCopyServer, WriteRequestDeleteServer, WriteRequestUpdateServer, WriteRequestRenameServer, WriteRequestCreateNetwork, WriteRequestCreateTerminal, WriteRequestDeleteTerminal, WriteRequestDeleteAllTerminals, WriteRequestCreateStack, WriteRequestCopyStack, WriteRequestDeleteStack, WriteRequestUpdateStack, WriteRequestRenameStack, WriteRequestWriteStackFileContents, WriteRequestRefreshStackCache, WriteRequestCreateStackWebhook, WriteRequestDeleteStackWebhook, WriteRequestCreateDeployment, WriteRequestCopyDeployment, WriteRequestCreateDeploymentFromContainer, WriteRequestDeleteDeployment, WriteRequestUpdateDeployment, WriteRequestRenameDeployment, WriteRequestCreateBuild, WriteRequestCopyBuild, WriteRequestDeleteBuild, WriteRequestUpdateBuild, WriteRequestRenameBuild, WriteRequestWriteBuildFileContents, WriteRequestRefreshBuildCache, WriteRequestCreateBuildWebhook, WriteRequestDeleteBuildWebhook, WriteRequestCreateBuilder, WriteRequestCopyBuilder, WriteRequestDeleteBuilder, WriteRequestUpdateBuilder, WriteRequestRenameBuilder, WriteRequestCreateRepo, WriteRequestCopyRepo, WriteRequestDeleteRepo, WriteRequestUpdateRepo, WriteRequestRenameRepo, WriteRequestRefreshRepoCache, WriteRequestCreateRepoWebhook, WriteRequestDeleteRepoWebhook, WriteRequestCreateAlerter, WriteRequestCopyAlerter, WriteRequestDeleteAlerter, WriteRequestUpdateAlerter, WriteRequestRenameAlerter, WriteRequestCreateProcedure, WriteRequestCopyProcedure, WriteRequestDeleteProcedure, WriteRequestUpdateProcedure, WriteRequestRenameProcedure, WriteRequestCreateAction, WriteRequestCopyAction, WriteRequestDeleteAction, WriteRequestUpdateAction, WriteRequestRenameAction, WriteRequestCreateResourceSync, WriteRequestCopyResourceSync, WriteRequestDeleteResourceSync, WriteRequestUpdateResourceSync, WriteRequestRenameResourceSync, WriteRequestWriteSyncFileContents, WriteRequestCommitSync, WriteRequestRefreshResourceSyncPending, WriteRequestCreateSyncWebhook, WriteRequestDeleteSyncWebhook, WriteRequestCreateTag, WriteRequestDeleteTag, WriteRequestRenameTag, WriteRequestUpdateTagColor, WriteRequestCreateVariable, WriteRequestUpdateVariableValue, WriteRequestUpdateVariableDescription, WriteRequestUpdateVariableIsSecret, WriteRequestDeleteVariable, WriteRequestCreateGitProviderAccount, WriteRequestUpdateGitProviderAccount, WriteRequestDeleteGitProviderAccount, WriteRequestCreateDockerRegistryAccount, WriteRequestUpdateDockerRegistryAccount, WriteRequestDeleteDockerRegistryAccount]
class WsLoginMessageJwtInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `Jwt` of the `WsLoginMessage` Rust enum
    """
    jwt: str

class WsLoginMessageApiKeysInner(BaseModel):
    """
    Generated type representing the anonymous struct variant `ApiKeys` of the `WsLoginMessage` Rust enum
    """
    key: str
    secret: str

class WsLoginMessageTypes(str, Enum):
    JWT = "Jwt"
    API_KEYS = "ApiKeys"

class WsLoginMessageJwt(BaseModel):
    type: Literal[WsLoginMessageTypes.JWT] = WsLoginMessageTypes.JWT
    params: WsLoginMessageJwtInner

class WsLoginMessageApiKeys(BaseModel):
    type: Literal[WsLoginMessageTypes.API_KEYS] = WsLoginMessageTypes.API_KEYS
    params: WsLoginMessageApiKeysInner

WsLoginMessage = Union[WsLoginMessageJwt, WsLoginMessageApiKeys]

_PartialAwsBuilderConfig = AwsBuilderConfig
_PartialServerBuilderConfig = ServerBuilderConfig
_PartialUrlBuilderConfig = UrlBuilderConfig
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from com.terraquantum.license.v1alpha2 import accept_contract_pb2 as com_dot_terraquantum_dot_license_dot_v1alpha2_dot_accept__contract__pb2
from com.terraquantum.license.v1alpha2 import license_pb2 as com_dot_terraquantum_dot_license_dot_v1alpha2_dot_license__pb2


class ContractServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AcceptContract = channel.unary_unary(
                '/com.terraquantum.license.v1alpha2.ContractService/AcceptContract',
                request_serializer=com_dot_terraquantum_dot_license_dot_v1alpha2_dot_accept__contract__pb2.AcceptContractRequest.SerializeToString,
                response_deserializer=com_dot_terraquantum_dot_license_dot_v1alpha2_dot_license__pb2.LicenseProto.FromString,
                _registered_method=True)


class ContractServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AcceptContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContractServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AcceptContract': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptContract,
                    request_deserializer=com_dot_terraquantum_dot_license_dot_v1alpha2_dot_accept__contract__pb2.AcceptContractRequest.FromString,
                    response_serializer=com_dot_terraquantum_dot_license_dot_v1alpha2_dot_license__pb2.LicenseProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.terraquantum.license.v1alpha2.ContractService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('com.terraquantum.license.v1alpha2.ContractService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ContractService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AcceptContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/com.terraquantum.license.v1alpha2.ContractService/AcceptContract',
            com_dot_terraquantum_dot_license_dot_v1alpha2_dot_accept__contract__pb2.AcceptContractRequest.SerializeToString,
            com_dot_terraquantum_dot_license_dot_v1alpha2_dot_license__pb2.LicenseProto.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
from .instance_state import InstanceState
import pydantic
from .instance_type import InstanceType
import datetime as dt
from .placement import Placement
from .architecture import Architecture
from .hypervisor_type import HypervisorType
from .platform_values import PlatformValues
from .tag import Tag
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class Ec2InstanceConfigurationInfo(UniversalBaseModel):
    state: typing.Optional[InstanceState] = None
    image_id: typing.Optional[str] = pydantic.Field(alias="imageId", default=None)
    key_name: typing.Optional[str] = pydantic.Field(alias="keyName", default=None)
    instance_type: typing.Optional[InstanceType] = pydantic.Field(alias="instanceType", default=None)
    launch_time: typing.Optional[dt.datetime] = pydantic.Field(alias="launchTime", default=None)
    placement: typing.Optional[Placement] = None
    architecture: typing.Optional[Architecture] = None
    hypervisor: typing.Optional[HypervisorType] = None
    platform: typing.Optional[PlatformValues] = None
    ebs_optimized: typing.Optional[bool] = pydantic.Field(alias="ebsOptimized", default=None)
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow

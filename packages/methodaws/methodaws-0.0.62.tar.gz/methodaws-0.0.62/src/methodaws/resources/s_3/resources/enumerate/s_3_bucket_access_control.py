# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class S3BucketAccessControl(UniversalBaseModel):
    allow_public_read: typing.Optional[bool] = pydantic.Field(alias="allowPublicRead", default=None)
    allow_public_write: typing.Optional[bool] = pydantic.Field(alias="allowPublicWrite", default=None)
    allow_public_read_acp: typing.Optional[bool] = pydantic.Field(alias="allowPublicReadAcp", default=None)
    allow_public_write_acp: typing.Optional[bool] = pydantic.Field(alias="allowPublicWriteAcp", default=None)
    allow_public_full_control: typing.Optional[bool] = pydantic.Field(alias="allowPublicFullControl", default=None)
    allow_authenticated_users_read: typing.Optional[bool] = pydantic.Field(
        alias="allowAuthenticatedUsersRead", default=None
    )
    allow_authenticated_users_write: typing.Optional[bool] = pydantic.Field(
        alias="allowAuthenticatedUsersWrite", default=None
    )
    allow_authenticated_users_read_acp: typing.Optional[bool] = pydantic.Field(
        alias="allowAuthenticatedUsersReadAcp", default=None
    )
    allow_authenticated_users_write_acp: typing.Optional[bool] = pydantic.Field(
        alias="allowAuthenticatedUsersWriteAcp", default=None
    )
    allow_authenticated_users_full_control: typing.Optional[bool] = pydantic.Field(
        alias="allowAuthenticatedUsersFullControl", default=None
    )
    allow_log_delivery_write: typing.Optional[bool] = pydantic.Field(alias="allowLogDeliveryWrite", default=None)
    allow_log_delivery_read_acp: typing.Optional[bool] = pydantic.Field(alias="allowLogDeliveryReadAcp", default=None)
    block_public_acls: typing.Optional[bool] = pydantic.Field(alias="blockPublicAcls", default=None)
    ignore_public_acls: typing.Optional[bool] = pydantic.Field(alias="ignorePublicAcls", default=None)
    block_public_policy: typing.Optional[bool] = pydantic.Field(alias="blockPublicPolicy", default=None)
    restrict_public_buckets: typing.Optional[bool] = pydantic.Field(alias="restrictPublicBuckets", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow

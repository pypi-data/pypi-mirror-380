# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
from .record_type import RecordType
import typing
from .alias_target import AliasTarget
import pydantic
from .cidr_routing import CidrRouting
from .geo_location import GeoLocation
from .resource_record import ResourceRecord
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class ResourceRecordSet(UniversalBaseModel):
    name: str
    type: RecordType
    alias_target: typing.Optional[AliasTarget] = pydantic.Field(alias="aliasTarget", default=None)
    cidr_routing: typing.Optional[CidrRouting] = pydantic.Field(alias="cidrRouting", default=None)
    failover: typing.Optional[str] = None
    geo_location: typing.Optional[GeoLocation] = pydantic.Field(alias="geoLocation", default=None)
    health_check_id: typing.Optional[str] = pydantic.Field(alias="healthCheckId", default=None)
    multi_value_answer: typing.Optional[bool] = pydantic.Field(alias="multiValueAnswer", default=None)
    region: typing.Optional[str] = None
    resource_records: typing.Optional[typing.List[ResourceRecord]] = pydantic.Field(
        alias="resourceRecords", default=None
    )
    set_identifier: typing.Optional[str] = pydantic.Field(alias="setIdentifier", default=None)
    ttl: typing.Optional[int] = None
    weight: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow

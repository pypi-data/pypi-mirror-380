# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
from ....common.resources.resources.vpc_reference import VpcReference
from ....common.resources.resources.iam_role_reference import IamRoleReference
import pydantic
from ....common.resources.resources.security_group_reference import SecurityGroupReference
from ....ec_2.resources.enumerate.ec_2_instance import Ec2Instance
from ....common.resources.resources.kms_key_reference import KmsKeyReference
from ....common.resources.resources.cloud_watch_log_reference import CloudWatchLogReference
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class EksResourceInfo(UniversalBaseModel):
    vpc: typing.Optional[VpcReference] = None
    iam_roles: typing.Optional[typing.List[IamRoleReference]] = pydantic.Field(alias="iamRoles", default=None)
    security_groups: typing.Optional[typing.List[SecurityGroupReference]] = pydantic.Field(
        alias="securityGroups", default=None
    )
    ec_2_instances: typing.Optional[typing.List[Ec2Instance]] = pydantic.Field(alias="ec2Instances", default=None)
    kms_keys: typing.Optional[typing.List[KmsKeyReference]] = pydantic.Field(alias="kmsKeys", default=None)
    cloud_watch_logs: typing.Optional[typing.List[CloudWatchLogReference]] = pydantic.Field(
        alias="cloudWatchLogs", default=None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow

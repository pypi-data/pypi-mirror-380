# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .endpoint import Endpoint
from .storage_config import StorageConfig
from .security_config import SecurityConfig
from .monitoring_config import MonitoringConfig
from .backup_config import BackupConfig
import datetime as dt
from ....common.resources.resources.tag import Tag
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class RdsConfigurationInfo(UniversalBaseModel):
    status: typing.Optional[str] = None
    class_: typing.Optional[str] = pydantic.Field(alias="class", default=None)
    engine: typing.Optional[str] = None
    engine_version: typing.Optional[str] = pydantic.Field(alias="engineVersion", default=None)
    master_username: typing.Optional[str] = pydantic.Field(alias="masterUsername", default=None)
    endpoint: typing.Optional[Endpoint] = None
    availability_zone: typing.Optional[str] = pydantic.Field(alias="availabilityZone", default=None)
    multi_az: typing.Optional[bool] = pydantic.Field(alias="multiAZ", default=None)
    publicly_accessible: typing.Optional[bool] = pydantic.Field(alias="publiclyAccessible", default=None)
    storage: typing.Optional[StorageConfig] = None
    security: typing.Optional[SecurityConfig] = None
    monitoring: typing.Optional[MonitoringConfig] = None
    backup: typing.Optional[BackupConfig] = None
    instance_create_time: typing.Optional[dt.datetime] = pydantic.Field(alias="instanceCreateTime", default=None)
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow

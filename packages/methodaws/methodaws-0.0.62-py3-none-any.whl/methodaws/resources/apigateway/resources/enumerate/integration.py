# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .....core.pydantic_utilities import UniversalBaseModel
import typing
from .lambda_backend import LambdaBackend
from .....core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .load_balancer_backend import LoadBalancerBackend
from .http_backend import HttpBackend
from .aws_service_backend import AwsServiceBackend
from .mock_backend import MockBackend


class Integration_AwsProxy(UniversalBaseModel):
    type: typing.Literal["aws_proxy"] = "aws_proxy"
    backend: LambdaBackend

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Integration_VpcLink(UniversalBaseModel):
    type: typing.Literal["vpc_link"] = "vpc_link"
    backend: LoadBalancerBackend

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Integration_Http(UniversalBaseModel):
    type: typing.Literal["http"] = "http"
    backend: HttpBackend

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Integration_HttpProxy(UniversalBaseModel):
    type: typing.Literal["http_proxy"] = "http_proxy"
    backend: HttpBackend

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Integration_Aws(UniversalBaseModel):
    type: typing.Literal["aws"] = "aws"
    backend: AwsServiceBackend

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Integration_Mock(UniversalBaseModel):
    type: typing.Literal["mock"] = "mock"
    backend: MockBackend

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


Integration = typing.Union[
    Integration_AwsProxy,
    Integration_VpcLink,
    Integration_Http,
    Integration_HttpProxy,
    Integration_Aws,
    Integration_Mock,
]

# This file was auto-generated by Fern from our API Definition.

from .....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .authorization_type import AuthorizationType
from .security_policy import SecurityPolicy
from .....core.pydantic_utilities import IS_PYDANTIC_V2


class ApiGatewaySecurity(UniversalBaseModel):
    has_waf_integration: typing.Optional[bool] = pydantic.Field(alias="hasWafIntegration", default=None)
    has_cloud_watch_logging: typing.Optional[bool] = pydantic.Field(alias="hasCloudWatchLogging", default=None)
    has_throttling: typing.Optional[bool] = pydantic.Field(alias="hasThrottling", default=None)
    open_endpoints: typing.Optional[int] = pydantic.Field(alias="openEndpoints", default=None)
    authentication_methods: typing.Optional[typing.List[AuthorizationType]] = pydantic.Field(
        alias="authenticationMethods", default=None
    )
    tls_versions: typing.Optional[typing.List[SecurityPolicy]] = pydantic.Field(alias="tlsVersions", default=None)
    cors_configured: typing.Optional[bool] = pydantic.Field(alias="corsConfigured", default=None)
    api_keys_required: typing.Optional[bool] = pydantic.Field(alias="apiKeysRequired", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow

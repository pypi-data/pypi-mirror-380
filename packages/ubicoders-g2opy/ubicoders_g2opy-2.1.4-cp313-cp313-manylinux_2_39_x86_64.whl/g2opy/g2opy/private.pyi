"""
Classes private to the implementation
"""
from __future__ import annotations
import collections.abc
import g2opy.g2opy
import numpy
import numpy.typing
import typing
__all__: list[str] = ['BaseEdge_1_double']
class BaseEdge_1_double(g2opy.g2opy.OptimizableGraph.OptimizableGraph_Edge):
    def chi2(self) -> float:
        ...
    def dimension_at_compile_time(self) -> int:
        ...
    def information(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[1, 1]"]:
        ...
    def information_identity(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[1, 1]"]:
        ...
    def initial_estimate(self, arg0: collections.abc.Set[g2opy.g2opy.HyperGraph.Vertex], arg1: g2opy.g2opy.OptimizableGraph.OptimizableGraph_Vertex) -> None:
        ...
    def measurement(self) -> float:
        ...
    def rank(self) -> int:
        ...
    def set_information(self, information: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[m, n]"]) -> None:
        ...
    def set_measurement(self, m: typing.SupportsFloat) -> None:
        ...
    @property
    def error(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float64], "[1, 1]"]:
        ...
    @error.setter
    def error(self, arg1: typing.Annotated[numpy.typing.ArrayLike, numpy.float64, "[1, 1]"]) -> None:
        ...

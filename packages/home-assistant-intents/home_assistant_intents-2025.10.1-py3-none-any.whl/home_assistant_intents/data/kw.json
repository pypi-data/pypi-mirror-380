{
  "language": "kw",
  "intents": {
    "HassTurnOff": {
      "data": [
        {
          "sentences": [
            "<turn> yn farow (<name> [<area>]|<name> [yn <area>])",
            "[<turn>] (<name> [<area>]|<name> [yn <area>]) [dhe] yn farow",
            "anbywha (<name> [<area>]|<name> [yn <area>])"
          ],
          "excludes_context": {
            "domain": [
              "binary_sensor",
              "cover",
              "lock",
              "scene",
              "script",
              "sensor"
            ]
          }
        }
      ]
    },
    "HassTurnOn": {
      "data": [
        {
          "sentences": [
            "<turn> yn fyw (<name> [<area>]|<name> [yn <area>])",
            "[<turn>] (<name> [<area>]|<name> [yn <area>]) [dhe] yn fyw",
            "bywha (<name> [<area>]|<name> [yn <area>])"
          ],
          "excludes_context": {
            "domain": [
              "binary_sensor",
              "cover",
              "lock",
              "scene",
              "script",
              "sensor",
              "valve"
            ]
          }
        }
      ]
    }
  },
  "responses": {
    "errors": {
      "no_intent": "Drog yw genev, ny yllis vy konvedhes henna",
      "handle_error": "Kamm anwaytys re hwarva",
      "no_area": "Drog yw genev, ny aswonav arenebedh henwys {{ area }}",
      "no_floor": "Drog yw genev, ny aswonav leur henwys {{ floor }}",
      "no_domain": "Drog yw genev, ny aswonav {{ domain }} vyth",
      "no_domain_in_area": "Drog yw genev, ny aswonav {{ domain }} vyth y'n arenebedh {{ area }}",
      "no_domain_in_floor": "Drog yw genev, ny aswonav {{ domain }} vyth war an leur {{ floor }}",
      "no_device_class": "Drog yw genev, ny aswonav {{ device_class }} vyth",
      "no_device_class_in_area": "Drog yw genev, ny aswonav {{ device_class }} vyth y'n {{ area }} arenebedh",
      "no_device_class_in_floor": "Drog yw genev, ny aswonav {{ device_class }} vyth y'n y'n leur {{ floor }}",
      "no_entity": "Drog yw genev, ny aswonav devis vyth henwys {{ entity }}",
      "no_entity_in_area": "Drog yw genev, ny aswonav devis vyth henwys {{ entity }} y'n arenebedh {{ area }}",
      "no_entity_in_floor": "Drog yw genev, ny aswonav devis vyth henwys {{ entity }} y'n leur {{ floor }}",
      "entity_wrong_state": "Drog yw genev, nyns eus devis vyth neb yw {{ state | lower }}",
      "feature_not_supported": "Drog yw genev, nyns eus devis a yll skodha an nasyow res",
      "no_entity_exposed": "Drog yw genev, nyns yw {{ entity }} diskevrys",
      "no_entity_in_area_exposed": "Drog yw genev, nyns yw {{ entity }} y'n arenebedh {{ area }} diskevrys",
      "no_entity_in_floor_exposed": "Drog yw genev, {{ entity }} in the {{ floor }} floor is not exposed",
      "no_domain_exposed": "Drog yw genev, nyns eus {{ domain }} diskevrys",
      "no_domain_in_area_exposed": "Drog yw genev, nyns eus {{ domain }} diskevrys y'n arenebedh {{ area }}",
      "no_domain_in_floor_exposed": "Drog yw genev, nyns eus {{ domain }} diskevrys y'n leur {{ floor }}",
      "no_device_class_exposed": "Drog yw genev, nyns eus {{ device_class }} diskevrys",
      "no_device_class_in_area_exposed": "Drog yw genev, nyns eus {{ device_class }} diskevrys y'n arenebedh {{ area }}",
      "no_device_class_in_floor_exposed": "Drog yw genev, nyns eus {{ device_class }} diskevrys y'n leur {{ floor }}",
      "duplicate_entities": "Drog yw genev, yma devisyow liesplek henwys {{ entity }}",
      "duplicate_entities_in_area": "Drog yw genev, yma devisyow liesplek henwys {{ entity }} y'n arenebedh {{ area }}",
      "duplicate_entities_in_floor": "Drog yw genev, yma devisyow liesplek henwys {{ entity }} y'n leur {{ floor }}",
      "timer_not_found": "Drog yw genev, ny yllis vy kavos an termynador na",
      "multiple_timers_matched": "Drog yw genev, ny allav vy kostenna termynadoryon liesplek",
      "no_timer_support": "Drog yw genev, nyns yw termynadoryon skodhys gans an devis ma"
    },
    "intents": {
      "HassGetState": {
        "default": "TODO: {{ state.state_with_unit }}",
        "one": "TODO: {{ slots.name | capitalize }} is {{ state.state_with_unit }}\n",
        "one_yesno": "TODO: {% if query.matched %}\n  Yes\n{% else %}\n  No, {{ state.state_with_unit }}\n{% endif %}\n",
        "any": "TODO: {% if query.matched %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    Yes, {{ match[:3] | join(\", \") }} and {{ (match | length - 3) }} more\n  {%- else -%}\n    Yes,\n    {% for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} and {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% else %}\n  No\n{% endif %}\n",
        "all": "TODO: {% if not query.unmatched: %}\n  Yes\n{% else %}\n  {% set no_match = query.unmatched | map(attribute=\"name\") | sort | list %}\n  {% if no_match | length > 4 %}\n    No, {{ no_match[:3] | join(\", \") }} and {{ (no_match | length - 3) }} more are not {{ slots.state }}\n  {%- else -%}\n    No,\n    {% for name in no_match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} and {% endif -%}\n      {{ name }}\n    {%- endfor %} {% if no_match | length > 1 %}are{% else %}is{% endif %} not {{ slots.state }}\n  {% endif %}\n{% endif %}\n",
        "which": "TODO: {% if not query.matched %}\n  Not any\n{% else: %}\n  {% set match = query.matched | map(attribute=\"name\") | sort | list %}\n  {% if match | length > 4 %}\n    {{ match[:3] | join(\", \") }} and {{ (match | length - 3) }} more\n  {% else %}\n    {%- for name in match -%}\n      {% if not loop.first and not loop.last %}, {% elif loop.last and not loop.first %} and {% endif -%}\n      {{ name }}\n    {%- endfor -%}\n  {% endif %}\n{% endif %}\n",
        "how_many": "TODO: {{ query.matched | length }}\n",
        "where": "TODO: {% if state == \"not_home\" %}\n  {{ slots.name | capitalize }} is away\n{% else %}\n  {{ slots.name | capitalize }} is at {{ state.state }}\n{% endif %}\n"
      },
      "HassTurnOff": {
        "default": "{% set translations = {\n  \"button\": \"an boton\",\n  \"camera\": \"an kamera\",\n  \"input_button\": \"an boton ynworra\",\n  \"alarm_control_panel\": \"an gwarnyans\",\n  \"automation\": \"an automation\",\n  \"fan\": \"an wynsell\",\n  \"climate\": \"an thermostat\",\n  \"humidifier\": \"an humidifier\",\n  \"input_boolean\": \"an skwychell\",\n  \"siren\": \"an siren\",\n  \"water_heater\": \"an dommell dowr\",\n  \"light\": \"an golow\",\n  \"switch\": \"an skwychell\",\n  \"remote\": \"an pellvotonek\",\n  \"vacuum\": \"an skubell-sugna\",\n  \"media_player\": \"an jynn media\",\n  \"lawn_mower\": \"an jynn glesin\"\n} %} Skwychis yn farow {{ translations.get(state.domain) }}",
        "lights_area": "Skwychis yn farow an golowys",
        "lights_floor": "Skwychis yn farow an golowys",
        "fans_area": "Skwychis yn farow the fans",
        "cover": "Deges",
        "light_all": "Skwychis yn farow an golowys oll",
        "fan_all": "Skwychis yn farow an gwynsellyow oll",
        "cover_device_class": "Degeis an {{ slots.device_class }}",
        "lock": "Analwedhys",
        "valve": "Deges"
      },
      "HassClimateSetTemperature": {
        "default": "TODO: Temperature set to {{ slots.temperature }} {{ 'degree' if (slots.temperature | float) == 1 else 'degrees' }}"
      },
      "HassStartTimer": {
        "default": "TODO: {% set h = slots.hours if slots.hours is defined else none %} {% set m = slots.minutes if slots.minutes is defined else none %} {% set s = slots.seconds if slots.seconds is defined else none %} {% set h_text = h ~ (' hour'  if h in [ \"1\", 'one'] else ' hours') if h else '' %} {% set m_text = (30 if m in ['half', '1/2'] else m) ~ (' minute' if m in [ \"1\", 'one'] else ' minutes') if m else '' %} {% set s_text = (30 if s in ['half', '1/2'] else s) ~ (' second' if s in [ \"1\", 'one'] else ' seconds') if s else '' %} {% set text_list = [ h_text, m_text, s_text] | select() | list %} {% set text = text_list[:-1] | join(', ') ~ ' and ' ~ text_list[-1] if text_list | count > 2 else text_list | join(' and ') %} {% set name = (' named ' ~ slots.name | trim) if slots.name is defined else '' %} Timer set for {{ text }}{{ name }}\n",
        "command": "TODO: {% set h = slots.hours if slots.hours is defined else none %} {% set m = slots.minutes if slots.minutes is defined else none %} {% set s = slots.seconds if slots.seconds is defined else none %} {% set h_text = h ~ (' hour'  if h in [ \"1\", 'one'] else ' hours') if h else '' %} {% set m_text = (30 if m in ['half', '1/2'] else m) ~ (' minute' if m in [ \"1\", 'one'] else ' minutes') if m else '' %} {% set s_text = (30 if s in ['half', '1/2'] else s) ~ (' second' if s in [ \"1\", 'one'] else ' seconds') if s else '' %} {% set text_list = [ h_text, m_text, s_text] | select() | list %} {% set text = text_list[:-1] | join(', ') ~ ' and ' ~ text_list[-1] if text_list | count > 2 else text_list | join(' and ') %} Command will be executed in {{ text }}\n"
      },
      "HassShoppingListAddItem": {
        "item_added": "TODO: Added {{ slots.item }}"
      },
      "HassTurnOn": {
        "default": "{% set translations = {\n  \"button\": \"an boton\",\n  \"camera\": \"an kamera\",\n  \"input_button\": \"an boton ynworra\",\n  \"alarm_control_panel\": \"an gwarnyans\",\n  \"automation\": \"an automation\",\n  \"fan\": \"an wynsell\",\n  \"climate\": \"an thermostat\",\n  \"humidifier\": \"an humidifier\",\n  \"input_boolean\": \"an skwychell\",\n  \"siren\": \"an siren\",\n  \"water_heater\": \"an dommell dowr\",\n  \"light\": \"an golow\",\n  \"switch\": \"an skwychell\",\n  \"remote\": \"an pellvotonek\",\n  \"vacuum\": \"an skubell-sugna\",\n  \"media_player\": \"an jynn media\",\n  \"lawn_mower\": \"an jynn glesin\"\n} %} Skwychis yn fyw {{ translations.get(state.domain) }}",
        "lights_area": "Skwychis yn fyw an golowys",
        "lights_floor": "Skwychis yn fyw an golowys",
        "light_all": "Skwychis yn fyw all of an golowys",
        "fans_area": "Skwychis yn fyw an wynsell",
        "cover": "Ygerys",
        "cover_device_class": "Ygeris an {{ slots.device_class }}",
        "scene": "Bywhes",
        "script": "Dallethys",
        "lock": "Alhwedhys",
        "valve": "Ygerys"
      },
      "HassMediaPause": {
        "default": "TODO: Paused"
      },
      "HassGetCurrentTime": {
        "default": "TODO: {% set minute_str = '{0:02d}'.format(slots.time.minute) %}\n{% if slots.time.hour == 0: %} 12:{{ minute_str }} AM {% elif slots.time.hour < 12: %} {{ slots.time.hour }}:{{ minute_str }} AM {% elif slots.time.hour == 12: %} 12:{{ minute_str }} PM {% else: %} {{ slots.time.hour - 12 }}:{{ minute_str }} PM {% endif %}\n"
      },
      "HassPauseTimer": {
        "default": "TODO: Timer paused"
      },
      "HassTimerStatus": {
        "default": "TODO: {% set num_timers = slots.timers | length %}\n{% set active_timers = slots.timers | selectattr('is_active') | list %}\n{% set num_active_timers = active_timers | length %}\n{% set paused_timers = slots.timers | rejectattr('is_active') | list %}\n{% set num_paused_timers = paused_timers | length %}\n{% set next_timer = None %}\n\n{% if num_timers == 0: %}\n  No timers.\n{% elif num_active_timers == 0: %}\n  {# No active timers #}\n  {% if num_paused_timers == 1: %}\n    {% set next_timer = paused_timers[0] %}\n    Timer is paused.\n  {% else: %}\n    {{ num_paused_timers }} paused timers.\n  {% endif %}\n{% else: %}\n  {# At least one active timer #}\n  {% if num_active_timers == 1: %}\n    {% set next_timer = active_timers[0] %}\n  {% else: %}\n    {# Get active timer that will finish soonest #}\n    {% set sorted_timers = active_timers | sort(attribute='total_seconds_left') %}\n    {% set next_timer = sorted_timers[0] %}\n    {{ num_active_timers }} running timers.\n  {% endif %}\n\n  {% if num_paused_timers == 1: %}\n    1 paused timer.\n  {% elif num_paused_timers > 0: %}\n    {{ num_paused_timers }} paused timers.\n  {% endif %}\n{% endif %}\n\n{% if next_timer: %}\n  {# At least one active timer #}\n  {% if (next_timer.rounded_hours_left == 1) and (next_timer.rounded_minutes_left > 0): %}\n    1 hour and {{ next_timer.rounded_minutes_left }} minutes\n  {% elif (next_timer.rounded_hours_left == 1): %}\n    1 hour\n  {% elif (next_timer.rounded_hours_left > 1) and (next_timer.rounded_minutes_left > 0): %}\n    {{ next_timer.rounded_hours_left }} hours and {{ next_timer.rounded_minutes_left }} minutes\n  {% elif (next_timer.rounded_hours_left > 1): %}\n    {{ next_timer.rounded_hours_left }} hours\n  {% elif (next_timer.rounded_minutes_left == 1) and (next_timer.rounded_seconds_left > 0): %}\n    1 minute and {{ next_timer.rounded_seconds_left }} seconds\n  {% elif (next_timer.rounded_minutes_left == 1): %}\n    1 minute\n  {% elif (next_timer.rounded_minutes_left > 1) and (next_timer.rounded_seconds_left > 0): %}\n    {{ next_timer.rounded_minutes_left }} minutes and {{ next_timer.rounded_seconds_left }} seconds\n  {% elif (next_timer.rounded_minutes_left > 1): %}\n    {{ next_timer.rounded_minutes_left }} minutes\n  {% elif (next_timer.rounded_seconds_left == 1): %}\n    1 second\n  {% elif (next_timer.rounded_seconds_left > 1): %}\n    {{ next_timer.rounded_seconds_left }} seconds\n  {% endif %}\n\n  {% if num_timers > 1: %}\n    {# Give some extra information to disambiguate #}\n    left on\n    {% if (next_timer.start_hours > 0) and (next_timer.start_minutes > 0): %}\n      {{ next_timer.start_hours }} hour and {{ next_timer.start_minutes }} minute\n    {% elif (next_timer.start_hours > 0): %}\n      {{ next_timer.start_hours }} hour\n    {% elif (next_timer.start_minutes > 0) and (next_timer.start_seconds > 0): %}\n      {{ next_timer.start_minutes }} minute and {{ next_timer.start_seconds }} second\n    {% elif (next_timer.start_minutes > 0): %}\n      {{ next_timer.start_minutes }} minute\n    {% elif (next_timer.start_seconds > 0): %}\n      {{ next_timer.start_seconds }} second\n    {% endif %}\n\n    {% if next_timer.name: %}\n      {{ next_timer.name }}\n    {% elif next_timer.area: %}\n      {{ next_timer.area }}\n    {% endif %}\n\n    timer.\n  {% else: %}\n    left.\n  {% endif %}\n{% endif %}\n"
      },
      "HassListAddItem": {
        "item_added": "TODO: Added {{ slots.item }}"
      },
      "HassGetCurrentDate": {
        "default": "TODO: {% set months = {\n   1: 'January',\n   2: 'February',\n   3: 'March',\n   4: 'April',\n   5: 'May',\n   6: 'June',\n   7: 'July',\n   8: 'August',\n   9: 'September',\n   10: 'October',\n   11: 'November',\n   12: 'December',\n} %} {% set ordinal = {\n   1: '1st',\n   2: '2nd',\n   3: '3rd',\n   4: '4th',\n   5: '5th',\n   6: '6th',\n   7: '7th',\n   8: '8th',\n   9: '9th',\n   10: '10th',\n   11: '11th',\n   12: '12th',\n   13: '13th',\n   14: '14th',\n   15: '15th',\n   16: '16th',\n   17: '17th',\n   18: '18th',\n   19: '19th',\n   20: '20th',\n   21: '21st',\n   22: '22nd',\n   23: '23rd',\n   24: '24th',\n   25: '25th',\n   26: '26th',\n   27: '27th',\n   28: '28th',\n   29: '29th',\n   30: '30th',\n   31: '31st',\n } %}\n{{ months[slots.date.month] }} {{ ordinal[slots.date.day] }}, {{ slots.date.year }}\n"
      },
      "HassUnpauseTimer": {
        "default": "TODO: Timer resumed"
      },
      "HassMediaPrevious": {
        "default": "TODO: Playing previous"
      },
      "HassGetWeather": {
        "default": "TODO: {% set weather_condition = {\n  'clear': 'and clear',\n  'clear-night': 'and clear',\n  'cloudy': 'and cloudy',\n  'exceptional': 'and exceptional',\n  'fog': 'with fog',\n  'hail': 'with hail',\n  'lightning': 'with lightning',\n  'lightning-rainy': 'with lightning and rain',\n  'partlycloudy': 'and partly cloudy',\n  'pouring': 'and pouring rain',\n  'rainy': 'and raining',\n  'snowy': 'and snowing',\n  'snowy-rainy': 'with snow and rain',\n  'sunny': 'and sunny',\n  'windy': 'and windy',\n  'windy-variant': 'with wind and clouds'\n} %} {{ state.attributes.get('temperature') }} {{ state.attributes.get('temperature_unit') }} {{ weather_condition.get((state.state | string).lower(), \"\") }}\n"
      },
      "HassLightSet": {
        "brightness": "TODO: Brightness set",
        "color": "TODO: Color set"
      },
      "HassCancelAllTimers": {
        "default": "TODO: {% if slots.canceled < 1: %} No timers were canceled. {% elif slots.canceled == 1: %} Canceled 1 timer. {% else: %} Canceled {{ slots.canceled }} timers. {% endif %}\n",
        "area": "TODO: {% if slots.canceled < 1: %} No timers were canceled in {{ slots.area }}. {% elif slots.canceled == 1: %} Canceled 1 timer in {{ slots.area }}. {% else: %} Canceled {{ slots.canceled }} timers in {{ slots.area }}. {% endif %}\n"
      },
      "HassBroadcast": {
        "default": "TODO: Done"
      },
      "HassVacuumStart": {
        "default": "TODO: Started"
      },
      "HassMediaUnpause": {
        "default": "TODO: Resumed"
      },
      "HassSetPosition": {
        "default": "TODO: Position set"
      },
      "HassMediaNext": {
        "default": "TODO: Playing next"
      },
      "HassCancelTimer": {
        "default": "TODO: Timer cancelled"
      },
      "HassClimateGetTemperature": {
        "default": "TODO: {% set current_temperature = state_attr(state.entity_id, 'current_temperature') %} {% set temperature = state.state if current_temperature is none else current_temperature %} %} {% if temperature == 1: %} {{ temperature }} degree {% else: %} {{ temperature }} degrees {% endif %}\n"
      },
      "HassSetVolume": {
        "default": "TODO: Volume set"
      },
      "HassDecreaseTimer": {
        "default": "TODO: {% set h = slots.hours if slots.hours is defined else none %} {% set m = slots.minutes if slots.minutes is defined else none %} {% set s = slots.seconds if slots.seconds is defined else none %} {% set h_text = h ~ (' hour'  if h in [ \"1\", 'one'] else ' hours') if h else '' %} {% set m_text = (30 if m in ['half', '1/2'] else m) ~ (' minute' if m in [ \"1\", 'one'] else ' minutes') if m else '' %} {% set s_text = (30 if s in ['half', '1/2'] else s) ~ (' second' if s in [ \"1\", 'one'] else ' seconds') if s else '' %} {% set text_list = [ h_text, m_text, s_text] | select() | list %} {% set text = text_list[:-1] | join(', ') ~ ' and ' ~ text_list[-1] if text_list | count > 2 else text_list | join(' and ') %} {% set name = (' named ' ~ slots.name | trim) if slots.name is defined else '' %} {{ text }} removed from timer{{ name }}\n"
      },
      "HassIncreaseTimer": {
        "default": "TODO: {% set h = slots.hours if slots.hours is defined else none %} {% set m = slots.minutes if slots.minutes is defined else none %} {% set s = slots.seconds if slots.seconds is defined else none %} {% set h_text = h ~ (' hour'  if h in [ \"1\", 'one'] else ' hours') if h else '' %} {% set m_text = (30 if m in ['half', '1/2'] else m) ~ (' minute' if m in [ \"1\", 'one'] else ' minutes') if m else '' %} {% set s_text = (30 if s in ['half', '1/2'] else s) ~ (' second' if s in [ \"1\", 'one'] else ' seconds') if s else '' %} {% set text_list = [ h_text, m_text, s_text] | select() | list %} {% set text = text_list[:-1] | join(', ') ~ ' and ' ~ text_list[-1] if text_list | count > 2 else text_list | join(' and ') %} {% set name = (' named ' ~ slots.name | trim) if slots.name is defined else '' %} {{ text }} added to timer{{ name }}\n"
      },
      "HassVacuumReturnToBase": {
        "default": "TODO: Returning"
      },
      "HassRespond": {
        "default": "TODO: ",
        "hello": "TODO: Hello from Home Assistant.",
        "listening": "TODO: No, I only record when you speak the wake word.",
        "data": "TODO: Your data is sent to your Home Assistant server.",
        "commands": "TODO: To learn what you can ask, visit home dash assistant dot I.O. slash voice.",
        "creator": "TODO: I was created by the wonderful Home Assistant community, made up of tinkerers world wide."
      }
    }
  },
  "lists": {
    "color": {
      "values": [
        {
          "in": "(gwynn|wynn)",
          "out": "white"
        },
        {
          "in": "(du|dhu)",
          "out": "black"
        },
        {
          "in": "rudh",
          "out": "red"
        },
        {
          "in": "(rudhvelyn|melynrudh)",
          "out": "orange"
        },
        {
          "in": "(melyn|velyn)",
          "out": "yellow"
        },
        {
          "in": "(gwyrdh|wyrdh)",
          "out": "green"
        },
        {
          "in": "(glas|las)",
          "out": "blue"
        },
        {
          "in": "(purpur|glasrudh|rudhlas)",
          "out": "purple"
        },
        {
          "in": "(gorm|gell)",
          "out": "brown"
        },
        {
          "in": "(rudhwyn|gwynnrudh)",
          "out": "pink"
        }
      ]
    },
    "brightness": {
      "range": {
        "type": "percentage",
        "from": 0,
        "to": 100
      }
    },
    "temperature": {
      "range": {
        "type": "temperature",
        "from": 0,
        "to": 100,
        "fractions": "halves"
      }
    },
    "brightness_level": {
      "values": [
        {
          "in": "(ughboynt|an moyha)",
          "out": 100
        },
        {
          "in": "(ispoynt|an lyha)",
          "out": 1
        }
      ]
    },
    "on_off_states": {
      "values": [
        {
          "in": "yn fyw",
          "out": "on"
        },
        {
          "in": "yn farow",
          "out": "off"
        }
      ]
    },
    "on_off_domains": {
      "values": [
        {
          "in": "golow[ys]",
          "out": "light"
        },
        {
          "in": "(gwynsell[ow]|wynsell[ow])",
          "out": "fan"
        },
        {
          "in": "skwychell[ow]",
          "out": "switch"
        }
      ]
    },
    "cover_states": {
      "values": [
        {
          "in": "ygor",
          "out": "open"
        },
        {
          "in": "deges",
          "out": "closed"
        },
        {
          "in": "owth ygeri",
          "out": "opening"
        },
        {
          "in": "ow tegea",
          "out": "closing"
        }
      ]
    },
    "cover_classes": {
      "values": [
        {
          "in": "(lenn dhu|lennow du)",
          "out": "blind"
        },
        {
          "in": "korglen[now]",
          "out": "curtain"
        },
        {
          "in": "daras[ow]",
          "out": "door"
        },
        {
          "in": "(daras karrji|darasow karrji)",
          "out": "garage"
        },
        {
          "in": "(yet|yetys|yetow)",
          "out": "gate"
        },
        {
          "in": "(goskes|gosketter)",
          "out": "shade"
        },
        {
          "in": "(fenester|fenestri)",
          "out": "window"
        }
      ]
    },
    "lock_states": {
      "values": [
        {
          "in": "alhwedhys [yn tiogel]",
          "out": "locked"
        },
        {
          "in": "analhwedys",
          "out": "unlocked"
        }
      ]
    },
    "bs_battery_states": {
      "values": [
        {
          "in": "isel",
          "out": "on"
        },
        {
          "in": "(usys|usadow|normal|charjys)",
          "out": "off"
        }
      ]
    },
    "bs_battery_charging_states": {
      "values": [
        {
          "in": "ow charjya",
          "out": "on"
        },
        {
          "in": "ow kortos",
          "out": "off"
        }
      ]
    },
    "bs_carbon_monoxide_states": {
      "values": [
        {
          "in": "(helerghys|yn fyw)",
          "out": "on"
        },
        {
          "in": "kler",
          "out": "off"
        }
      ]
    },
    "bs_cold_states": {
      "values": [
        {
          "in": "yeyn",
          "out": "on"
        },
        {
          "in": "(usys|usadow|normal)",
          "out": "off"
        }
      ]
    },
    "bs_connectivity_states": {
      "values": [
        {
          "in": "(junys|rosweythys|omjunys)",
          "out": "on"
        },
        {
          "in": "(anjunys|anrosweythys)",
          "out": "off"
        }
      ]
    },
    "bs_door_states": {
      "values": [
        {
          "in": "ygor",
          "out": "on"
        },
        {
          "in": "deges",
          "out": "off"
        }
      ]
    },
    "bs_garage_door_states": {
      "values": [
        {
          "in": "ygor",
          "out": "on"
        },
        {
          "in": "deges",
          "out": "off"
        }
      ]
    },
    "bs_gas_states": {
      "values": [
        {
          "in": "(helerghys|yn fyw)",
          "out": "on"
        },
        {
          "in": "kler",
          "out": "off"
        }
      ]
    },
    "bs_heat_states": {
      "values": [
        {
          "in": "(tomm|pooth)",
          "out": "on"
        },
        {
          "in": "(normal|usys|usadow)",
          "out": "off"
        }
      ]
    },
    "bs_light_states": {
      "values": [
        {
          "in": "helerghys",
          "out": "on"
        },
        {
          "in": "(nyns eus golow|golow vyth)",
          "out": "off"
        }
      ]
    },
    "bs_lock_states": {
      "values": [
        {
          "in": "(analhwedhys|anbrennys)",
          "out": "on"
        },
        {
          "in": "(alhwedhys|prennys)",
          "out": "off"
        }
      ]
    },
    "bs_moisture_states": {
      "values": [
        {
          "in": "glyb",
          "out": "on"
        },
        {
          "in": "sygh",
          "out": "off"
        }
      ]
    },
    "bs_motion_states": {
      "values": [
        {
          "in": "(helerghys|yn fyw)",
          "out": "on"
        },
        {
          "in": "kler",
          "out": "off"
        }
      ]
    },
    "bs_occupancy_states": {
      "values": [
        {
          "in": "(helerghys|yn fyw)",
          "out": "on"
        },
        {
          "in": "kler",
          "out": "off"
        }
      ]
    },
    "bs_opening_states": {
      "values": [
        {
          "in": "ygor",
          "out": "on"
        },
        {
          "in": "deges",
          "out": "off"
        }
      ]
    },
    "bs_plug_states": {
      "values": [
        {
          "in": "ebilys",
          "out": "on"
        },
        {
          "in": "anebilys",
          "out": "off"
        }
      ]
    },
    "bs_power_states": {
      "values": [
        {
          "in": "nerth helerghys",
          "out": "on"
        },
        {
          "in": "nyns eus nerth",
          "out": "off"
        }
      ]
    },
    "bs_presence_states": {
      "values": [
        {
          "in": "tre",
          "out": "on"
        },
        {
          "in": "(dhe ves|gyllys)",
          "out": "off"
        }
      ]
    },
    "bs_problem_states": {
      "values": [
        {
          "in": "helerghys",
          "out": "on"
        },
        {
          "in": "da lowr",
          "out": "off"
        }
      ]
    },
    "bs_running_states": {
      "values": [
        {
          "in": "owth oberi",
          "out": "on"
        },
        {
          "in": "nyns eus owth oberi",
          "out": "off"
        }
      ]
    },
    "bs_safety_states": {
      "values": [
        {
          "in": "diantel",
          "out": "on"
        },
        {
          "in": "(saw|salow)",
          "out": "off"
        }
      ]
    },
    "bs_smoke_states": {
      "values": [
        {
          "in": "(helerghys|yn fyw)",
          "out": "on"
        },
        {
          "in": "kler",
          "out": "off"
        }
      ]
    },
    "bs_sound_states": {
      "values": [
        {
          "in": "(helerghys|yn fyw)",
          "out": "on"
        },
        {
          "in": "kler",
          "out": "off"
        }
      ]
    },
    "bs_tamper_states": {
      "values": [
        {
          "in": "helerghys",
          "out": "on"
        },
        {
          "in": "kler",
          "out": "off"
        }
      ]
    },
    "bs_update_states": {
      "values": [
        {
          "in": "nowedheans kavadow",
          "out": "on"
        },
        {
          "in": "nowedhys",
          "out": "off"
        }
      ]
    },
    "bs_vibration_states": {
      "values": [
        {
          "in": "(helerghys|ow krena)",
          "out": "on"
        },
        {
          "in": "(kler|nyns eus ow krena)",
          "out": "off"
        }
      ]
    },
    "bs_window_states": {
      "values": [
        {
          "in": "ygor",
          "out": "on"
        },
        {
          "in": "deges",
          "out": "off"
        }
      ]
    },
    "shopping_list_item": {
      "wildcard": true
    },
    "zone": {
      "wildcard": true
    },
    "position": {
      "range": {
        "type": "percentage",
        "from": 0,
        "to": 100
      }
    },
    "volume": {
      "range": {
        "type": "percentage",
        "from": 0,
        "to": 100
      }
    },
    "timer_seconds": {
      "range": {
        "from": 1,
        "to": 100
      }
    },
    "timer_minutes": {
      "range": {
        "from": 1,
        "to": 100
      }
    },
    "timer_hours": {
      "range": {
        "from": 1,
        "to": 100
      }
    },
    "timer_half": {
      "values": [
        {
          "in": "half",
          "out": 30
        },
        {
          "in": "1/2",
          "out": 30
        }
      ]
    },
    "timer_name": {
      "wildcard": true
    },
    "timer_command": {
      "wildcard": true
    },
    "message": {
      "wildcard": true
    }
  },
  "expansion_rules": {
    "the": "(an|ow|agan)",
    "name": "[<the>] {name}",
    "area": "[<the>] {area}",
    "floor": "[<the>] [leur] {floor}",
    "area_floor": "(<area>|<floor>)",
    "in_area_floor": "[<in>] <area_floor>",
    "in": "(yn|y'n|war|orth|dhe|dres|a-dro [dhe])",
    "turn": "(treyl|skwych|chanj|dro)",
    "light": "(golow|golowys|golowyans|lugarn|lugern)",
    "what_is": "(pyth|pyth yw|lavar dhymm) [<the>]",
    "lockable": "[<the>] (lock|door|window|gate|garage door|shutter)[s]",
    "where_is": "ple'ma",
    "which": "py [(a'n|anedha)]",
    "is": "(yw|eus) [<the>]",
    "are": "<is>",
    "any": "nebes [<the>]",
    "are_any": "[<are>] <any>",
    "how_many": "(py lies|pygemmys) [<the>]",
    "brightness": "{brightness}[([ ]%)| kannsrann]",
    "temp": "tempredh",
    "temperature": "{temperature}[([ ]°)|( degre)]",
    "open": "(ygeri|drehevel)",
    "close": "degea",
    "set": "(sett|gorr|chanj|treyl)",
    "clean": "glanha",
    "numeric_value_set": "(set|change|turn [(up|down)]|increase|decrease|make)",
    "position": "{position}[([ ]%)| percent]",
    "volume": "{volume:volume_level}[([ ]%)| percent]",
    "currently": "(currently|presently|right now|at the moment)",
    "state": "[(present|current)] (state|status)"
  },
  "skip_words": [
    "mar pleg",
    "a yll'ta",
    "ragov [vy]",
    "y fia da genev [vy]",
    "my a vynn",
    "my a vynnsa"
  ]
}
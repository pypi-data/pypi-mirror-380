[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [{ name = "Cody Fincher", email = "cody@litestar.dev" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "litestar>=2.0.0",
    "typing-extensions>=4.0.0",
    "eval-type-backport ; python_full_version < '3.10'",
    "click>=8.0.0",
    "rich>=13.0.0",
]
description = "Litestar plugin for Model Context Protocol (MCP) integration"
keywords = ["litestar", "mcp", "model-context-protocol", "ai", "plugin"]
license = { text = "MIT" }
maintainers = [
    { name = "Litestar Developers", email = "hello@litestar.dev" },
    { name = "Cody Fincher", email = "cody@litestar.dev" },
]
name = "litestar-mcp"
readme = "README.md"
requires-python = ">=3.9"
version = "0.2.0"

[project.urls]
Changelog = "https://docs.litestar-mcp.litestar.dev/latest/changelog"
Discord = "https://discord.gg/litestar"
Documentation = "https://docs.litestar-mcp.litestar.dev/latest/"
Funding = "https://github.com/sponsors/litestar-org"
Homepage = "https://docs.litestar-mcp.litestar.dev/latest/"
Issue = "https://github.com/litestar-org/litestar-mcp/issues/"
Source = "https://github.com/litestar-org/litestar-mcp"

[tool.hatch.build.targets.wheel]
packages = ["litestar_mcp"]

[dependency-groups]
build = ["bump-my-version"]
dev = [{ include-group = "build" }, { include-group = "lint" }, { include-group = "doc" }, { include-group = "test" }]
doc = [
    "auto-pytabs[sphinx]>=0.5.0",
    "sphinx>=7.0.0; python_version <= \"3.9\"",
    "sphinx>=8.0.0; python_version >= \"3.10\"",
    "sphinx-autobuild>=2021.3.14",
    "sphinx-copybutton>=0.5.2",
    "sphinx-click>=6.0.0",
    "sphinx-design>=0.5.0",
    "sphinxcontrib-mermaid>=0.9.2",
    "sphinx-paramlinks>=0.6.0",
    "sphinx-togglebutton>=0.3.2",
    "sphinx-toolbox>=3.8.1",
    "myst-parser",
    "sphinx-autodoc-typehints",
    "shibuya",
]
lint = ["mypy>=1.13.0", "pre-commit>=3.5.0", "pyright>=1.1.386", "ruff>=0.7.1", "slotscheck>=0.16.5"]
test = [
    "litestar[standard,jwt]",
    "pytest>=7.4.1",
    "pytest-cov",
    "coverage",
    "pytest-asyncio",
    "pytest-sugar",
    "pytest-mock>=3.11.1",
    "pytest-xdist>=3.6.1",
    "httpx>=0.24.1",
    "attrs",
    "cattrs",
    "pydantic",
]

[tool.bumpversion]
allow_dirty = true
commit = false
commit_args = "--no-verify"
current_version = "0.1.0"
ignore_missing_files = false
ignore_missing_version = false
message = "chore(release): bump to v{new_version}"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
regex = false
replace = "{new_version}"
search = "{current_version}"
serialize = ["{major}.{minor}.{patch}"]
sign_tags = false
tag = false
tag_message = "chore(release): v{new_version}"
tag_name = "v{new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
replace = 'version = "{new_version}"'
search = 'version = "{current_version}"'

# Ruff configuration
[tool.ruff]
line-length = 120
src = ["litestar_mcp", "tests", "examples", "docs"]
target-version = "py39"

[tool.ruff.lint]
fixable = ["ALL"]
ignore = [
    "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
    "A005",    # flake8-builtins - module {name} shadows a Python standard-library module
    "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
    "D100",    # pydocstyle - missing docstring in public module
    "D101",    # pydocstyle - missing docstring in public class
    "D102",    # pydocstyle - missing docstring in public method
    "D103",    # pydocstyle - missing docstring in public function
    "D104",    # pydocstyle - missing docstring in public package
    "D105",    # pydocstyle - missing docstring in magic method
    "D106",    # pydocstyle - missing docstring in public nested class
    "D107",    # pydocstyle - missing docstring in __init__
    "D202",    # pydocstyle - no blank lines allowed after function docstring
    "D205",    # pydocstyle - 1 blank line required between summary line and description
    "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501",    # pydocstyle line too long, handled by black
    "PLW2901", # pylint - for loop variable overwritten by assignment target
    "RUF012",  # Ruff-specific rule - annotated with classvar
    "ANN401",
    "FBT",
    "PLR0913", # too many arguments
    "PT",
    "TD",
    "ARG002",  # ignore for now; investigate
    "ARG003",  # ignore for now; investigate
    "PERF203", # ignore for now; investigate
    "PD011",   # pandas
    "PLR0912",
    "ISC001",
    "COM812",
    "CPY001",
    "PGH003",
    "FA100",
    "PLC0415", # import should be at the top of the file
    "PLR0904", # too many public methods
    "PLR0917",
    "PGH003",
    "PLC2701",
    "PLW3201",
    "PLR6301",
    "DOC201",
    "DOC501",
]
select = ["ALL"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.per-file-ignores]
"__init__.py" = ['F401', 'D104']
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TC", "ERA", "D", "RET", "E731", "RUF012", "FA100", "ARG001"]
"docs/conf.py" = ["FIX002", "ARG001", "INP001"]
"tests/*.py" = ['D103', 'S101', "S105", "S106", 'D104', "PLR2004", "RUF029", "ARG001", "SLF001", "DOC"]
"tools/*.py" = ["INP001", "ERA001", "N999"]
"tools/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "INP001", "S603", "S404", "PLR0915"]

[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.ruff.lint.isort]
known-first-party = ["litestar_mcp", "tests"]

[tool.ruff.lint.mccabe]
max-complexity = 16

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.slotscheck]
strict-imports = false


[tool.codespell]
skip = 'uv.lock'
# MyPy configuration
[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
pretty = true
python_version = "3.9"
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true


# Pytest configuration
[tool.pytest.ini_options]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=litestar_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
filterwarnings = ["ignore::DeprecationWarning", "ignore::PendingDeprecationWarning"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
minversion = "7.0"
testpaths = ["tests"]

# Coverage configuration
[tool.coverage.run]
branch = true
omit = ["*/tests/*", "*/examples/*", "*/venv/*", "*/.venv/*"]
source = ["litestar_mcp"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = "htmlcov"

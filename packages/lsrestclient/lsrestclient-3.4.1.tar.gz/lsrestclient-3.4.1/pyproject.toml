[project]
name = "lsrestclient"
version = "3.4.1"
description = "REST Api Client"
authors = [{name = "mba", email = "bartel@electronic-shop.lu"}]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "requests>=2.31.0,<3.0.0",
    "lsjsonclasses>=2.0.1,<3.0.0",
    "pydash>4.0.0",
    "webexception>=1.0.5,<2.0.0",
    "requests-cache>=1.2.1,<2.0.0",
    "pydantic>=2.11.7,<3.0.0",
    "pydantic-settings>=2.10.1,<3.0.0",
    "redis>=6.4.0,<7.0.0",
]

# Add entry points for pytest plugin
[project.entry-points."pytest11"]
lsrestclient = "lsrestclient.fixtures"

[dependency-groups]
dev = [
    "pytest>=8.4.1,<9.0.0",
    "fastapi>=0.104.1,<1.0.0",
    "uvicorn>=0.35.0,<1.0.0",
    "killport>=1.2.0,<2.0.0",
    "fastapi-lsoft>=1.2.0,<2.0.0",
    "pytest-asyncio>=1.1.0,<2.0.0",
    "ruff>=0.13.0,<1.0.0",
    "pre-commit>=4.3.0,<5.0.0",
]

[project.optional-dependencies]
redis = ["redis"]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -s -v"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
]
log_cli = true
log_cli_level = "DEBUG"
#log_cli_level = "INFO"
#log_cli_format = "[%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_format = "[%(name)s][%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"

asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff.lint]
select = ["E", "F", "I","ANN","RUF"]
fixable=["ALL"]
ignore = [
    # "ANN002",
    # "ANN003",
    "E501",
    # "E402" # module level imports, should be turned on again when noqa is applied
]
[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F403"]
"tests/*" = ["ANN"]

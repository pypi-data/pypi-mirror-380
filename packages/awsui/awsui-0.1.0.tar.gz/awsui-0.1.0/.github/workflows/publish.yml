name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  build-and-publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.13

      - name: Extract version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Verify version matches pyproject.toml
        run: |
          PROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION="${{ steps.get_version.outputs.version }}"
          if [ "$PROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Version mismatch!"
            echo "pyproject.toml version: $PROJECT_VERSION"
            echo "Git tag version: $TAG_VERSION"
            exit 1
          fi
          echo "Version verified: $PROJECT_VERSION"

      - name: Build package
        run: |
          uv build
          echo "Built packages:"
          ls -lh dist/

      - name: Check distribution files
        run: |
          uv run --with twine twine check dist/*

      - name: Test wheel installation
        run: |
          # Create a temporary virtual environment
          uv venv .test-venv
          source .test-venv/bin/activate

          # Install from wheel
          uv pip install dist/*.whl

          # Verify installation
          awsui --version
          awsui --help

          # Cleanup
          deactivate
          rm -rf .test-venv

      - name: Publish to PyPI
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv publish

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: Release ${{ steps.get_version.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7

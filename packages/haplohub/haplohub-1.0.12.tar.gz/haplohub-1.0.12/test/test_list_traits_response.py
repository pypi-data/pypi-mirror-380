# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from haplohub.models.list_traits_response import ListTraitsResponse  # noqa: E501


class TestListTraitsResponse(unittest.TestCase):
    """ListTraitsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListTraitsResponse:
        """Test ListTraitsResponse
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ListTraitsResponse`
        """
        model = ListTraitsResponse()  # noqa: E501
        if include_optional:
            return ListTraitsResponse(
                status = 'success',
                total_count = 56,
                items = [
                    haplohub.models.trait_schema.TraitSchema(
                        id = '', 
                        label = '', 
                        category_id = '', 
                        ontology_url = '', )
                    ]
            )
        else:
            return ListTraitsResponse(
                total_count = 56,
                items = [
                    haplohub.models.trait_schema.TraitSchema(
                        id = '', 
                        label = '', 
                        category_id = '', 
                        ontology_url = '', )
                    ],
        )
        """

    def testListTraitsResponse(self):
        """Test ListTraitsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()

# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING, Any, List, Optional, Union

from pydantic import BaseModel, Field, ValidationError, validator

from haplohub.models.error_response import ErrorResponse
from haplohub.models.result_response_upload_request_response import ResultResponseUploadRequestResponse

RESPONSE_ANY_OF_SCHEMAS = ["ErrorResponse", "ResultResponseUploadRequestResponse"]


class Response(BaseModel):
    """
    Response
    """

    # data type: ResultResponseUploadRequestResponse
    anyof_schema_1_validator: Optional[ResultResponseUploadRequestResponse] = None
    # data type: ErrorResponse
    anyof_schema_2_validator: Optional[ErrorResponse] = None
    if TYPE_CHECKING:
        actual_instance: Union[ErrorResponse, ResultResponseUploadRequestResponse]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(RESPONSE_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = Response.construct()
        error_messages = []
        # validate data type: ResultResponseUploadRequestResponse
        if not isinstance(v, ResultResponseUploadRequestResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResultResponseUploadRequestResponse`")
        else:
            return v

        # validate data type: ErrorResponse
        if not isinstance(v, ErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorResponse`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in Response with anyOf schemas: ErrorResponse, ResultResponseUploadRequestResponse. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Response:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Response:
        """Returns the object represented by the json string"""
        instance = Response.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ResultResponseUploadRequestResponse] = None
        try:
            instance.actual_instance = ResultResponseUploadRequestResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[ErrorResponse] = None
        try:
            instance.actual_instance = ErrorResponse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into Response with anyOf schemas: ErrorResponse, ResultResponseUploadRequestResponse. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

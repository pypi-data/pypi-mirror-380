# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date, datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, constr

from haplohub.models.id import Id


class MemberSchema(BaseModel):
    """
    MemberSchema
    """

    id: Id = Field(...)
    has_samples: StrictBool = Field(...)
    patient_id: Optional[constr(strict=True, max_length=255)] = None
    first_name: Optional[constr(strict=True, max_length=255)] = None
    last_name: Optional[constr(strict=True, max_length=255)] = None
    gender: Optional[constr(strict=True, max_length=50)] = None
    birth_date: Optional[date] = None
    created: Optional[datetime] = None
    __properties = ["id", "has_samples", "patient_id", "first_name", "last_name", "gender", "birth_date", "created"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MemberSchema:
        """Create an instance of MemberSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict["id"] = self.id.to_dict()
        # set to None if patient_id (nullable) is None
        # and __fields_set__ contains the field
        if self.patient_id is None and "patient_id" in self.__fields_set__:
            _dict["patient_id"] = None

        # set to None if first_name (nullable) is None
        # and __fields_set__ contains the field
        if self.first_name is None and "first_name" in self.__fields_set__:
            _dict["first_name"] = None

        # set to None if last_name (nullable) is None
        # and __fields_set__ contains the field
        if self.last_name is None and "last_name" in self.__fields_set__:
            _dict["last_name"] = None

        # set to None if gender (nullable) is None
        # and __fields_set__ contains the field
        if self.gender is None and "gender" in self.__fields_set__:
            _dict["gender"] = None

        # set to None if birth_date (nullable) is None
        # and __fields_set__ contains the field
        if self.birth_date is None and "birth_date" in self.__fields_set__:
            _dict["birth_date"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MemberSchema:
        """Create an instance of MemberSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MemberSchema.parse_obj(obj)

        _obj = MemberSchema.parse_obj(
            {
                "id": Id.from_dict(obj.get("id")) if obj.get("id") is not None else None,
                "has_samples": obj.get("has_samples"),
                "patient_id": obj.get("patient_id"),
                "first_name": obj.get("first_name"),
                "last_name": obj.get("last_name"),
                "gender": obj.get("gender"),
                "birth_date": obj.get("birth_date"),
                "created": obj.get("created"),
            }
        )
        return _obj

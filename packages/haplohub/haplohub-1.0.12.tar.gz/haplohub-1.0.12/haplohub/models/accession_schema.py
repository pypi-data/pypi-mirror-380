# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, StrictInt, StrictStr


class AccessionSchema(BaseModel):
    """
    AccessionSchema
    """

    chromosome: StrictStr = Field(...)
    accession: StrictStr = Field(...)
    length: StrictInt = Field(...)
    build: StrictStr = Field(...)
    build_version: StrictStr = Field(...)
    __properties = ["chromosome", "accession", "length", "build", "build_version"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccessionSchema:
        """Create an instance of AccessionSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccessionSchema:
        """Create an instance of AccessionSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccessionSchema.parse_obj(obj)

        _obj = AccessionSchema.parse_obj(
            {
                "chromosome": obj.get("chromosome"),
                "accession": obj.get("accession"),
                "length": obj.get("length"),
                "build": obj.get("build"),
                "build_version": obj.get("build_version"),
            }
        )
        return _obj

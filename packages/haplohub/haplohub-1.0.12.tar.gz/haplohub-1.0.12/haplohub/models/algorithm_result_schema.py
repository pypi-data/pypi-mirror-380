# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, Dict

from pydantic import BaseModel, Field, StrictStr

from haplohub.models.algorithm_result_status import AlgorithmResultStatus


class AlgorithmResultSchema(BaseModel):
    """
    AlgorithmResultSchema
    """

    id: StrictStr = Field(...)
    algorithm_version_id: StrictStr = Field(...)
    cohort_id: StrictStr = Field(...)
    input: Dict[str, Any] = Field(...)
    output: Dict[str, Any] = Field(...)
    status: AlgorithmResultStatus = Field(...)
    time_created: datetime = Field(...)
    time_updated: datetime = Field(...)
    __properties = ["id", "algorithm_version_id", "cohort_id", "input", "output", "status", "time_created", "time_updated"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AlgorithmResultSchema:
        """Create an instance of AlgorithmResultSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AlgorithmResultSchema:
        """Create an instance of AlgorithmResultSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AlgorithmResultSchema.parse_obj(obj)

        _obj = AlgorithmResultSchema.parse_obj(
            {
                "id": obj.get("id"),
                "algorithm_version_id": obj.get("algorithm_version_id"),
                "cohort_id": obj.get("cohort_id"),
                "input": obj.get("input"),
                "output": obj.get("output"),
                "status": obj.get("status"),
                "time_created": obj.get("time_created"),
                "time_updated": obj.get("time_updated"),
            }
        )
        return _obj

# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime

from pydantic import BaseModel, Field

from haplohub.models.auth_schema import AuthSchema
from haplohub.models.request_schema import RequestSchema
from haplohub.models.response_schema import ResponseSchema
from haplohub.models.tenant_schema import TenantSchema


class LogSchema(BaseModel):
    """
    LogSchema
    """

    timestamp: datetime = Field(...)
    tenant: TenantSchema = Field(...)
    auth: AuthSchema = Field(...)
    request: RequestSchema = Field(...)
    response: ResponseSchema = Field(...)
    __properties = ["timestamp", "tenant", "auth", "request", "response"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LogSchema:
        """Create an instance of LogSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tenant
        if self.tenant:
            _dict["tenant"] = self.tenant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auth
        if self.auth:
            _dict["auth"] = self.auth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict["request"] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict["response"] = self.response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LogSchema:
        """Create an instance of LogSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LogSchema.parse_obj(obj)

        _obj = LogSchema.parse_obj(
            {
                "timestamp": obj.get("timestamp"),
                "tenant": TenantSchema.from_dict(obj.get("tenant")) if obj.get("tenant") is not None else None,
                "auth": AuthSchema.from_dict(obj.get("auth")) if obj.get("auth") is not None else None,
                "request": RequestSchema.from_dict(obj.get("request")) if obj.get("request") is not None else None,
                "response": ResponseSchema.from_dict(obj.get("response")) if obj.get("response") is not None else None,
            }
        )
        return _obj

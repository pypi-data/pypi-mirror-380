# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class HgvsSchema(BaseModel):
    """
    HgvsSchema
    """

    hgvs: StrictStr = Field(...)
    is_called: Optional[StrictBool] = None
    dosage: Optional[StrictInt] = None
    error_message: Optional[StrictStr] = None
    __properties = ["hgvs", "is_called", "dosage", "error_message"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HgvsSchema:
        """Create an instance of HgvsSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if is_called (nullable) is None
        # and __fields_set__ contains the field
        if self.is_called is None and "is_called" in self.__fields_set__:
            _dict["is_called"] = None

        # set to None if dosage (nullable) is None
        # and __fields_set__ contains the field
        if self.dosage is None and "dosage" in self.__fields_set__:
            _dict["dosage"] = None

        # set to None if error_message (nullable) is None
        # and __fields_set__ contains the field
        if self.error_message is None and "error_message" in self.__fields_set__:
            _dict["error_message"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HgvsSchema:
        """Create an instance of HgvsSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HgvsSchema.parse_obj(obj)

        _obj = HgvsSchema.parse_obj(
            {
                "hgvs": obj.get("hgvs"),
                "is_called": obj.get("is_called"),
                "dosage": obj.get("dosage"),
                "error_message": obj.get("error_message"),
            }
        )
        return _obj

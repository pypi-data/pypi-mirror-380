# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr


class VariantRange(BaseModel):
    """
    VariantRange
    """

    accession: StrictStr = Field(...)
    start: StrictInt = Field(...)
    end: StrictInt = Field(...)
    reference: Optional[StrictStr] = None
    alternate: Optional[StrictStr] = None
    __properties = ["accession", "start", "end", "reference", "alternate"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VariantRange:
        """Create an instance of VariantRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if reference (nullable) is None
        # and __fields_set__ contains the field
        if self.reference is None and "reference" in self.__fields_set__:
            _dict["reference"] = None

        # set to None if alternate (nullable) is None
        # and __fields_set__ contains the field
        if self.alternate is None and "alternate" in self.__fields_set__:
            _dict["alternate"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VariantRange:
        """Create an instance of VariantRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VariantRange.parse_obj(obj)

        _obj = VariantRange.parse_obj(
            {
                "accession": obj.get("accession"),
                "start": obj.get("start"),
                "end": obj.get("end"),
                "reference": obj.get("reference"),
                "alternate": obj.get("alternate"),
            }
        )
        return _obj

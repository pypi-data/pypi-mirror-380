# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, StrictStr


class UpdateReportTemplateRequest(BaseModel):
    """
    UpdateReportTemplateRequest
    """

    name: Optional[StrictStr] = None
    report_type: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    template: Optional[StrictStr] = None
    __properties = ["name", "report_type", "description", "template"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateReportTemplateRequest:
        """Create an instance of UpdateReportTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict["name"] = None

        # set to None if report_type (nullable) is None
        # and __fields_set__ contains the field
        if self.report_type is None and "report_type" in self.__fields_set__:
            _dict["report_type"] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict["description"] = None

        # set to None if template (nullable) is None
        # and __fields_set__ contains the field
        if self.template is None and "template" in self.__fields_set__:
            _dict["template"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateReportTemplateRequest:
        """Create an instance of UpdateReportTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateReportTemplateRequest.parse_obj(obj)

        _obj = UpdateReportTemplateRequest.parse_obj(
            {
                "name": obj.get("name"),
                "report_type": obj.get("report_type"),
                "description": obj.get("description"),
                "template": obj.get("template"),
            }
        )
        return _obj

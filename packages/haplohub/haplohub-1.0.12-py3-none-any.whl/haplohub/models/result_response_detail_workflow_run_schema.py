# coding: utf-8

"""
HaploHub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field

from haplohub.models.detail_workflow_run_schema import DetailWorkflowRunSchema
from haplohub.models.response_status import ResponseStatus


class ResultResponseDetailWorkflowRunSchema(BaseModel):
    """
    ResultResponseDetailWorkflowRunSchema
    """

    status: Optional[ResponseStatus] = None
    result: DetailWorkflowRunSchema = Field(...)
    __properties = ["status", "result"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResultResponseDetailWorkflowRunSchema:
        """Create an instance of ResultResponseDetailWorkflowRunSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict["result"] = self.result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResultResponseDetailWorkflowRunSchema:
        """Create an instance of ResultResponseDetailWorkflowRunSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ResultResponseDetailWorkflowRunSchema.parse_obj(obj)

        _obj = ResultResponseDetailWorkflowRunSchema.parse_obj(
            {
                "status": obj.get("status"),
                "result": DetailWorkflowRunSchema.from_dict(obj.get("result")) if obj.get("result") is not None else None,
            }
        )
        return _obj

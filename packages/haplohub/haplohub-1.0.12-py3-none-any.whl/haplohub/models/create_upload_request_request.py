# coding: utf-8

"""
HaploHub API

The HaploHub is a turnkey solution to securely store and interpret biomarkers, genetics, and 'omics data. Our customers use the HaploHub to:  * Store WGS, WES, low-pass, and array data with uniform REST interfaces to access variants  * Interpret genomic variants  * Generate risk scores for an individual  * Run the typical algorithms (phasing, imputation, etc.)  * Calculate 'biological age' or 'organ age' biomarkers  * Generate custom reports  The HaploHub platform is continually updated to remain at the forefront of scientific understanding.

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, conlist

from haplohub.models.file_info import FileInfo
from haplohub.models.member_id2 import MemberId2
from haplohub.models.sample_id2 import SampleId2
from haplohub.models.upload_type import UploadType


class CreateUploadRequestRequest(BaseModel):
    """
    CreateUploadRequestRequest
    """

    upload_request_id: StrictStr = Field(...)
    files: conlist(FileInfo) = Field(...)
    file_type: UploadType = Field(...)
    sample_id: Optional[SampleId2] = None
    member_id: Optional[MemberId2] = None
    __properties = ["upload_request_id", "files", "file_type", "sample_id", "member_id"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateUploadRequestRequest:
        """Create an instance of CreateUploadRequestRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict["files"] = _items
        # override the default output from pydantic by calling `to_dict()` of sample_id
        if self.sample_id:
            _dict["sample_id"] = self.sample_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member_id
        if self.member_id:
            _dict["member_id"] = self.member_id.to_dict()
        # set to None if sample_id (nullable) is None
        # and __fields_set__ contains the field
        if self.sample_id is None and "sample_id" in self.__fields_set__:
            _dict["sample_id"] = None

        # set to None if member_id (nullable) is None
        # and __fields_set__ contains the field
        if self.member_id is None and "member_id" in self.__fields_set__:
            _dict["member_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateUploadRequestRequest:
        """Create an instance of CreateUploadRequestRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateUploadRequestRequest.parse_obj(obj)

        _obj = CreateUploadRequestRequest.parse_obj(
            {
                "upload_request_id": obj.get("upload_request_id"),
                "files": [FileInfo.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None,
                "file_type": obj.get("file_type"),
                "sample_id": SampleId2.from_dict(obj.get("sample_id")) if obj.get("sample_id") is not None else None,
                "member_id": MemberId2.from_dict(obj.get("member_id")) if obj.get("member_id") is not None else None,
            }
        )
        return _obj

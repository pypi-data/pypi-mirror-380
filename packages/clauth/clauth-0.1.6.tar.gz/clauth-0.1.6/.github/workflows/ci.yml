name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Install dependencies
        run: |
          uv pip install --system .[test]

      - name: Run tests
        run: pytest

  publish-testpypi:
    name: Publish to TestPyPI
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Set dev version for TestPyPI
        run: |
          python - <<'PY'
          import os
          import pathlib
          import re

          path = pathlib.Path("pyproject.toml")
          text = path.read_text()
          match = re.search(r'(?m)^version\s*=\s*"([^"\s]+)"', text)
          if not match:
              raise SystemExit("Could not locate version field in pyproject.toml")

          original = match.group(1)
          base = original.split('.dev')[0]
          run_number = os.environ.get('GITHUB_RUN_NUMBER') or os.environ.get('GITHUB_RUN_ID') or '0'
          dev_version = f"{base}.dev{run_number}"

          updated = text[:match.start(1)] + dev_version + text[match.end(1):]
          path.write_text(updated)

          print(f"Set TestPyPI dev version: {original} -> {dev_version}")
          PY

      - name: Build package
        run: |
          uv pip install --system build
          uv build

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  publish-pypi:
    name: Publish to PyPI
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Build package
        run: |
          uv pip install --system build
          uv build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  release-notes:
    name: Draft GitHub Release
    needs: publish-pypi
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Generate release notes
        id: rn
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: ${{ steps.rn.outputs.body }}
          draft: false
          prerelease: false

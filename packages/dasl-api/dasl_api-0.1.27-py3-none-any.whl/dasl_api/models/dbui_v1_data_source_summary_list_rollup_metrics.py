# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class DbuiV1DataSourceSummaryListRollupMetrics(BaseModel):
    """
    DbuiV1DataSourceSummaryListRollupMetrics
    """ # noqa: E501
    events_last7days: Union[StrictFloat, StrictInt] = Field(description="Events in the time period from 7d ago to now.", alias="eventsLast7days")
    events_preceding7days: Union[StrictFloat, StrictInt] = Field(description="Events in the time period from 14d to 7d ago.", alias="eventsPreceding7days")
    events_last24hours: Union[StrictFloat, StrictInt] = Field(description="Events in the time period from 24h ago to now.", alias="eventsLast24hours")
    events_preceding24hours: Union[StrictFloat, StrictInt] = Field(description="Events in the time period from 48h to 24h ago.", alias="eventsPreceding24hours")
    events_spark_line: List[Union[StrictFloat, StrictInt]] = Field(description="Array of events in the time period from 7d ago to now, with one entry per day. ", alias="eventsSparkLine")
    __properties: ClassVar[List[str]] = ["eventsLast7days", "eventsPreceding7days", "eventsLast24hours", "eventsPreceding24hours", "eventsSparkLine"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DbuiV1DataSourceSummaryListRollupMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DbuiV1DataSourceSummaryListRollupMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventsLast7days": obj.get("eventsLast7days"),
            "eventsPreceding7days": obj.get("eventsPreceding7days"),
            "eventsLast24hours": obj.get("eventsLast24hours"),
            "eventsPreceding24hours": obj.get("eventsPreceding24hours"),
            "eventsSparkLine": obj.get("eventsSparkLine")
        })
        return _obj



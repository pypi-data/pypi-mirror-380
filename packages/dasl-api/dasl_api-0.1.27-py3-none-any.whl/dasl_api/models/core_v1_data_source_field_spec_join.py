# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dasl_api.models.core_v1_data_source_field_spec_join_with_csv import CoreV1DataSourceFieldSpecJoinWithCSV
from typing import Optional, Set
from typing_extensions import Self

class CoreV1DataSourceFieldSpecJoin(BaseModel):
    """
    CoreV1DataSourceFieldSpecJoin
    """ # noqa: E501
    with_table: Optional[StrictStr] = Field(default=None, description="The table to join to.", alias="withTable")
    with_csv: Optional[CoreV1DataSourceFieldSpecJoinWithCSV] = Field(default=None, alias="withCSV")
    lhs: Optional[StrictStr] = Field(default=None, description="The column in the source dataframe to join on.")
    rhs: Optional[StrictStr] = Field(default=None, description="The column in withTable (or withCSV) to join on.")
    select: Optional[StrictStr] = Field(default=None, description="A SQL expression to create the new field from the joined dataset. To avoid ambiguity, the source dataframe is aliased as \"lhs\" and the target table is aliased as \"rhs\". So to concatenate a column called \"name\" from the source dataframe with a column called \"name\" from the target, you would use `concat(lhs.name, \" \", rhs.name)` ")
    __properties: ClassVar[List[str]] = ["withTable", "withCSV", "lhs", "rhs", "select"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreV1DataSourceFieldSpecJoin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of with_csv
        if self.with_csv:
            _dict['withCSV'] = self.with_csv.to_dict()
        # set to None if with_table (nullable) is None
        # and model_fields_set contains the field
        if self.with_table is None and "with_table" in self.model_fields_set:
            _dict['withTable'] = None

        # set to None if with_csv (nullable) is None
        # and model_fields_set contains the field
        if self.with_csv is None and "with_csv" in self.model_fields_set:
            _dict['withCSV'] = None

        # set to None if lhs (nullable) is None
        # and model_fields_set contains the field
        if self.lhs is None and "lhs" in self.model_fields_set:
            _dict['lhs'] = None

        # set to None if rhs (nullable) is None
        # and model_fields_set contains the field
        if self.rhs is None and "rhs" in self.model_fields_set:
            _dict['rhs'] = None

        # set to None if select (nullable) is None
        # and model_fields_set contains the field
        if self.select is None and "select" in self.model_fields_set:
            _dict['select'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreV1DataSourceFieldSpecJoin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "withTable": obj.get("withTable"),
            "withCSV": CoreV1DataSourceFieldSpecJoinWithCSV.from_dict(obj["withCSV"]) if obj.get("withCSV") is not None else None,
            "lhs": obj.get("lhs"),
            "rhs": obj.get("rhs"),
            "select": obj.get("select")
        })
        return _obj



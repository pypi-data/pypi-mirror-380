# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DbuiV1TestAccessRequest(BaseModel):
    """
    DbuiV1TestAccessRequest
    """ # noqa: E501
    path: Optional[StrictStr] = Field(default=None, description="A Unity Catalog volume or external location (e.g. s3:// or dbfs://). Only one of `path` or `table` must be supplied ")
    table: Optional[StrictStr] = Field(default=None, description="A Unity Catalog table. Only one of `path` or `table` must be supplied ")
    constraint: StrictStr = Field(description="The testing constraint for the Unity Catalog path or table. A `mustExistRead` constraint will test that the path or table exists and can be read, while the `mustExistReadWrite` will also test that the path or the table is writable. The `mustExistReadWriteOrBeCreatable` does not require that the path or table exists, but if it does not exist, the specified path must be writable by the user, or for a table the user must have the ability to create it in the schema.  If the table or path does  exists, then it must be already be writable.The `mustNotExist` constraint asserts that the   given path or table is not present in Unity Catalog. ")
    context: Optional[StrictStr] = Field(default=None, description="The context of the request. For example, is this request to test access for a bronze table, or a silver-bronze table join. If this value is omitted, a fully qualified table name is expected. This is only for use in conjunction with table. If provided and a non-fully qualified table name is given, then the context will be used in conjunction with the workspace's configuration to work out what the catalog and schema are for the given table. Expected uses of values here are:   - bronze: target table resides in the bronze catalog.  - silver: target table resides in the silver catalog.  - gold: target table resides in the gold catalog.  - silver_bronze: target tables for silver stage input reside in    bronze catalog. ")
    __properties: ClassVar[List[str]] = ["path", "table", "constraint", "context"]

    @field_validator('constraint')
    def constraint_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['mustExistRead', 'mustExistReadWrite', 'mustExistReadWriteOrBeCreatable', 'mustNotExist']):
            raise ValueError("must be one of enum values ('mustExistRead', 'mustExistReadWrite', 'mustExistReadWriteOrBeCreatable', 'mustNotExist')")
        return value

    @field_validator('context')
    def context_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['bronze', 'silver', 'gold', 'silver_bronze']):
            raise ValueError("must be one of enum values ('bronze', 'silver', 'gold', 'silver_bronze')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DbuiV1TestAccessRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if path (nullable) is None
        # and model_fields_set contains the field
        if self.path is None and "path" in self.model_fields_set:
            _dict['path'] = None

        # set to None if table (nullable) is None
        # and model_fields_set contains the field
        if self.table is None and "table" in self.model_fields_set:
            _dict['table'] = None

        # set to None if context (nullable) is None
        # and model_fields_set contains the field
        if self.context is None and "context" in self.model_fields_set:
            _dict['context'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DbuiV1TestAccessRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "path": obj.get("path"),
            "table": obj.get("table"),
            "constraint": obj.get("constraint"),
            "context": obj.get("context")
        })
        return _obj



# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.workspace_v1_workspace_config_spec import WorkspaceV1WorkspaceConfigSpec

class TestWorkspaceV1WorkspaceConfigSpec(unittest.TestCase):
    """WorkspaceV1WorkspaceConfigSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkspaceV1WorkspaceConfigSpec:
        """Test WorkspaceV1WorkspaceConfigSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkspaceV1WorkspaceConfigSpec`
        """
        model = WorkspaceV1WorkspaceConfigSpec()
        if include_optional:
            return WorkspaceV1WorkspaceConfigSpec(
                system_tables_config = dasl_api.models.workspace_v1_workspace_config_spec_system_tables_config.workspace_v1_WorkspaceConfigSpec_systemTablesConfig(
                    catalog_name = '', 
                    schema = '', ),
                default_sql_warehouse = '',
                detection_rule_metadata = dasl_api.models.workspace_v1_workspace_config_spec_detection_rule_metadata.workspace_v1_WorkspaceConfigSpec_detectionRuleMetadata(
                    detection_categories = [
                        ''
                        ], ),
                notable_export = dasl_api.models.workspace/v1/export_config.workspace.v1.ExportConfig(
                    destination = 'webhook', 
                    export_open_only = True, 
                    webhook_config = dasl_api.models.workspace_v1_export_config_webhook_config.workspace_v1_ExportConfig_webhookConfig(
                        destination = dasl_api.models.workspace_v1_export_config_webhook_config_destination.workspace_v1_ExportConfig_webhookConfig_destination(
                            value = '', 
                            scope = '', 
                            key = '', ), ), 
                    slack_config = dasl_api.models.workspace_v1_export_config_slack_config.workspace_v1_ExportConfig_slackConfig(
                        token = dasl_api.models.workspace_v1_export_config_slack_config_token.workspace_v1_ExportConfig_slackConfig_token(
                            value = '', 
                            scope = '', 
                            key = '', ), 
                        channel = '', 
                        url = '', 
                        message = '', ), 
                    jira_config = dasl_api.models.workspace_v1_export_config_jira_config.workspace_v1_ExportConfig_jiraConfig(
                        server = '', 
                        project = '', 
                        issue_type = '', 
                        summary = '', 
                        email = '', ), 
                    service_now_config = dasl_api.models.workspace_v1_export_config_service_now_config.workspace_v1_ExportConfig_serviceNowConfig(
                        server = '', 
                        source_expr = '', 
                        node_expr = '', 
                        severity_expr = '', 
                        event_type = '', 
                        user_id = '', 
                        password = dasl_api.models.workspace_v1_export_config_service_now_config_password.workspace_v1_ExportConfig_serviceNowConfig_password(
                            value = '', 
                            scope = '', 
                            key = '', ), ), ),
                operational_alert_export = dasl_api.models.workspace/v1/export_config.workspace.v1.ExportConfig(
                    destination = 'webhook', 
                    export_open_only = True, 
                    webhook_config = dasl_api.models.workspace_v1_export_config_webhook_config.workspace_v1_ExportConfig_webhookConfig(
                        destination = dasl_api.models.workspace_v1_export_config_webhook_config_destination.workspace_v1_ExportConfig_webhookConfig_destination(
                            value = '', 
                            scope = '', 
                            key = '', ), ), 
                    slack_config = dasl_api.models.workspace_v1_export_config_slack_config.workspace_v1_ExportConfig_slackConfig(
                        token = dasl_api.models.workspace_v1_export_config_slack_config_token.workspace_v1_ExportConfig_slackConfig_token(
                            value = '', 
                            scope = '', 
                            key = '', ), 
                        channel = '', 
                        url = '', 
                        message = '', ), 
                    jira_config = dasl_api.models.workspace_v1_export_config_jira_config.workspace_v1_ExportConfig_jiraConfig(
                        server = '', 
                        project = '', 
                        issue_type = '', 
                        summary = '', 
                        email = '', ), 
                    service_now_config = dasl_api.models.workspace_v1_export_config_service_now_config.workspace_v1_ExportConfig_serviceNowConfig(
                        server = '', 
                        source_expr = '', 
                        node_expr = '', 
                        severity_expr = '', 
                        event_type = '', 
                        user_id = '', 
                        password = dasl_api.models.workspace_v1_export_config_service_now_config_password.workspace_v1_ExportConfig_serviceNowConfig_password(
                            value = '', 
                            scope = '', 
                            key = '', ), ), ),
                export_schedule = dasl_api.models.core/v1/schedule.core.v1.Schedule(
                    at_least_every = '', 
                    exactly = '', 
                    continuous = True, 
                    compute_group = '', 
                    enabled = True, ),
                observables = dasl_api.models.workspace_v1_workspace_config_spec_observables.workspace_v1_WorkspaceConfigSpec_observables(
                    kinds = [
                        dasl_api.models.workspace_v1_workspace_config_spec_observables_kinds_inner.workspace_v1_WorkspaceConfigSpec_observables_kinds_inner(
                            name = '', 
                            sql_type = '', )
                        ], 
                    relationships = [
                        ''
                        ], ),
                dasl_storage_path = '',
                dasl_custom_presets_path = '',
                default_rule_schedule = dasl_api.models.core/v1/default_schedule.core.v1.DefaultSchedule(
                    at_least_every = '', 
                    exactly = '', 
                    continuous = True, 
                    compute_group = '', ),
                default_custom_notebook_location = '',
                datasources = dasl_api.models.workspace_v1_workspace_config_spec_datasources.workspace_v1_WorkspaceConfigSpec_datasources(
                    catalog_name = '', 
                    bronze_schema = '', 
                    silver_schema = '', 
                    gold_schema = '', 
                    checkpoint_location = '', 
                    default_compute_mode = 'high', ),
                rules = dasl_api.models.workspace_v1_workspace_config_spec_rules.workspace_v1_WorkspaceConfigSpec_rules(
                    checkpoint_location = '', 
                    default_compute_mode = 'high', ),
                default_config = dasl_api.models.workspace_v1_workspace_config_spec_default_config.workspace_v1_WorkspaceConfigSpec_defaultConfig(
                    datasources = null, 
                    transforms = null, 
                    rules = null, 
                    global = null, ),
                managed_retention = [
                    dasl_api.models.workspace_v1_workspace_config_spec_managed_retention_inner.workspace_v1_WorkspaceConfigSpec_managedRetention_inner(
                        catalog = '', 
                        schema = '', 
                        column = 'time', 
                        duration = '', 
                        overrides = [
                            dasl_api.models.workspace_v1_workspace_config_spec_managed_retention_inner_overrides_inner.workspace_v1_WorkspaceConfigSpec_managedRetention_inner_overrides_inner(
                                table = '', 
                                column = 'time', 
                                duration = '', )
                            ], )
                    ]
            )
        else:
            return WorkspaceV1WorkspaceConfigSpec(
                system_tables_config = dasl_api.models.workspace_v1_workspace_config_spec_system_tables_config.workspace_v1_WorkspaceConfigSpec_systemTablesConfig(
                    catalog_name = '', 
                    schema = '', ),
                dasl_storage_path = '',
        )
        """

    def testWorkspaceV1WorkspaceConfigSpec(self):
        """Test WorkspaceV1WorkspaceConfigSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

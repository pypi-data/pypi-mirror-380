# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.core_v1_query import CoreV1Query

class TestCoreV1Query(unittest.TestCase):
    """CoreV1Query unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreV1Query:
        """Test CoreV1Query
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreV1Query`
        """
        model = CoreV1Query()
        if include_optional:
            return CoreV1Query(
                api_version = '',
                kind = '',
                metadata = dasl_api.models.common/v1/object_meta.common.v1.ObjectMeta(
                    name = '', 
                    workspace = '', 
                    comment = '', 
                    annotations = {
                        'key' : ''
                        }, 
                    created_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_by = '', 
                    modified_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_successful_run_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    modified_by = '', 
                    version = 56, 
                    deleted = True, 
                    resource_status = 'none', 
                    ui_status = '', 
                    client_of_origin = '', ),
                spec = dasl_api.models.core/v1/query_spec.core.v1.QuerySpec(
                    metadata = dasl_api.models.core_v1_query_spec_metadata.core_v1_QuerySpec_metadata(
                        version = 56, ), 
                    path = '', 
                    sql = '', 
                    warehouse = '', 
                    date_range = dasl_api.models.core_v1_query_spec_date_range.core_v1_QuerySpec_dateRange(
                        start_date = '', 
                        end_date = '', ), 
                    lookup_retention = null, ),
                status = dasl_api.models.core/v1/query_execution_status.core.v1.QueryExecutionStatus(
                    statement_id = '', 
                    table_name = '', 
                    cancel = True, 
                    status = 'pending', 
                    context = dasl_api.models.core_v1_query_execution_status_context.core_v1_QueryExecutionStatus_context(
                        error_message = '', 
                        position_in_queue = 56, 
                        total_tasks = 56, 
                        active_tasks = 56, 
                        complete_tasks = 56, 
                        failed_tasks = 56, 
                        killed_tasks = 56, ), )
            )
        else:
            return CoreV1Query(
                spec = dasl_api.models.core/v1/query_spec.core.v1.QuerySpec(
                    metadata = dasl_api.models.core_v1_query_spec_metadata.core_v1_QuerySpec_metadata(
                        version = 56, ), 
                    path = '', 
                    sql = '', 
                    warehouse = '', 
                    date_range = dasl_api.models.core_v1_query_spec_date_range.core_v1_QuerySpec_dateRange(
                        start_date = '', 
                        end_date = '', ), 
                    lookup_retention = null, ),
        )
        """

    def testCoreV1Query(self):
        """Test CoreV1Query"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

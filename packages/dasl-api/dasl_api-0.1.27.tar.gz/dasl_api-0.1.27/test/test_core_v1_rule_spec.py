# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.core_v1_rule_spec import CoreV1RuleSpec

class TestCoreV1RuleSpec(unittest.TestCase):
    """CoreV1RuleSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreV1RuleSpec:
        """Test CoreV1RuleSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreV1RuleSpec`
        """
        model = CoreV1RuleSpec()
        if include_optional:
            return CoreV1RuleSpec(
                metadata = dasl_api.models.core_v1_rule_spec_metadata.core_v1_RuleSpec_metadata(
                    version = 1.337, 
                    category = '', 
                    severity = '', 
                    fidelity = 'Investigative', 
                    mitre = [
                        dasl_api.models.core_v1_rule_spec_metadata_mitre_inner.core_v1_RuleSpec_metadata_mitre_inner(
                            taxonomy = '', 
                            tactic = '', 
                            technique_id = '', 
                            technique = '', 
                            sub_technique_id = '', 
                            sub_technique = '', )
                        ], 
                    objective = '', 
                    response = dasl_api.models.core_v1_rule_spec_metadata_response.core_v1_RuleSpec_metadata_response(
                        guidelines = '', 
                        playbooks = [
                            dasl_api.models.core_v1_rule_spec_metadata_response_playbooks_inner.core_v1_RuleSpec_metadata_response_playbooks_inner(
                                notebook = '', 
                                options = {
                                    'key' : ''
                                    }, )
                            ], ), ),
                schedule = dasl_api.models.core/v1/schedule.core.v1.Schedule(
                    at_least_every = '', 
                    exactly = '', 
                    continuous = True, 
                    compute_group = '', 
                    enabled = True, ),
                input = dasl_api.models.core_v1_rule_spec_input.core_v1_RuleSpec_input(
                    stream = dasl_api.models.core_v1_rule_spec_input_stream.core_v1_RuleSpec_input_stream(
                        tables = [
                            dasl_api.models.core_v1_rule_spec_input_stream_tables_inner.core_v1_RuleSpec_input_stream_tables_inner(
                                name = '', 
                                watermark = dasl_api.models.core_v1_rule_spec_input_stream_tables_inner_watermark.core_v1_RuleSpec_input_stream_tables_inner_watermark(
                                    event_time_column = '', 
                                    delay_threshold = '', 
                                    drop_duplicates = [
                                        ''
                                        ], ), 
                                alias = '', 
                                join_type = '', 
                                join_expr = '', 
                                streaming = True, )
                            ], 
                        filter = '', 
                        sql = '', 
                        custom = dasl_api.models.core_v1_rule_spec_input_stream_custom.core_v1_RuleSpec_input_stream_custom(
                            notebook = '', 
                            options = {
                                'key' : ''
                                }, ), 
                        starting_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    batch = dasl_api.models.core_v1_rule_spec_input_batch.core_v1_RuleSpec_input_batch(
                        sql = '', ), ),
                observables = [
                    dasl_api.models.core/v1/rule/observable.core.v1.Rule.Observable(
                        kind = '', 
                        value = '', 
                        relationship = '', 
                        risk = dasl_api.models.core_v1_rule_observable_risk.core_v1_Rule_Observable_risk(
                            impact = '', 
                            confidence = '', ), )
                    ],
                output = dasl_api.models.core_v1_rule_spec_output.core_v1_RuleSpec_output(
                    summary = '', 
                    context = {
                        'key' : ''
                        }, 
                    default_context = True, ),
                collate = dasl_api.models.core_v1_rule_spec_collate.core_v1_RuleSpec_collate(
                    collate_on = [
                        ''
                        ], 
                    within = '', 
                    action = 'append', ),
                compute_mode = 'high'
            )
        else:
            return CoreV1RuleSpec(
                schedule = dasl_api.models.core/v1/schedule.core.v1.Schedule(
                    at_least_every = '', 
                    exactly = '', 
                    continuous = True, 
                    compute_group = '', 
                    enabled = True, ),
                input = dasl_api.models.core_v1_rule_spec_input.core_v1_RuleSpec_input(
                    stream = dasl_api.models.core_v1_rule_spec_input_stream.core_v1_RuleSpec_input_stream(
                        tables = [
                            dasl_api.models.core_v1_rule_spec_input_stream_tables_inner.core_v1_RuleSpec_input_stream_tables_inner(
                                name = '', 
                                watermark = dasl_api.models.core_v1_rule_spec_input_stream_tables_inner_watermark.core_v1_RuleSpec_input_stream_tables_inner_watermark(
                                    event_time_column = '', 
                                    delay_threshold = '', 
                                    drop_duplicates = [
                                        ''
                                        ], ), 
                                alias = '', 
                                join_type = '', 
                                join_expr = '', 
                                streaming = True, )
                            ], 
                        filter = '', 
                        sql = '', 
                        custom = dasl_api.models.core_v1_rule_spec_input_stream_custom.core_v1_RuleSpec_input_stream_custom(
                            notebook = '', 
                            options = {
                                'key' : ''
                                }, ), 
                        starting_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    batch = dasl_api.models.core_v1_rule_spec_input_batch.core_v1_RuleSpec_input_batch(
                        sql = '', ), ),
                output = dasl_api.models.core_v1_rule_spec_output.core_v1_RuleSpec_output(
                    summary = '', 
                    context = {
                        'key' : ''
                        }, 
                    default_context = True, ),
        )
        """

    def testCoreV1RuleSpec(self):
        """Test CoreV1RuleSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

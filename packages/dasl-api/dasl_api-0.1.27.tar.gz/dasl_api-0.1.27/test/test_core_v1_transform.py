# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.core_v1_transform import CoreV1Transform

class TestCoreV1Transform(unittest.TestCase):
    """CoreV1Transform unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreV1Transform:
        """Test CoreV1Transform
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreV1Transform`
        """
        model = CoreV1Transform()
        if include_optional:
            return CoreV1Transform(
                api_version = '',
                kind = '',
                metadata = dasl_api.models.common/v1/object_meta.common.v1.ObjectMeta(
                    name = '', 
                    workspace = '', 
                    comment = '', 
                    annotations = {
                        'key' : ''
                        }, 
                    created_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_by = '', 
                    modified_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_successful_run_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    modified_by = '', 
                    version = 56, 
                    deleted = True, 
                    resource_status = 'none', 
                    ui_status = '', 
                    client_of_origin = '', ),
                spec = dasl_api.models.core/v1/transform_spec.core.v1.TransformSpec(
                    schedule = dasl_api.models.core/v1/schedule.core.v1.Schedule(
                        at_least_every = '', 
                        exactly = '', 
                        continuous = True, 
                        compute_group = '', 
                        enabled = True, ), 
                    output_table = '', 
                    stream = dasl_api.models.core_v1_transform_spec_stream.core_v1_TransformSpec_stream(
                        tables = [
                            dasl_api.models.core_v1_transform_spec_stream_tables_inner.core_v1_TransformSpec_stream_tables_inner(
                                name = '', 
                                alias = '', 
                                streaming = True, 
                                watermark = dasl_api.models.core_v1_transform_spec_stream_tables_inner_watermark.core_v1_TransformSpec_stream_tables_inner_watermark(
                                    event_time_column = '', 
                                    delay_threshold = '', 
                                    drop_duplicates = [
                                        ''
                                        ], ), 
                                join_type = '', 
                                join_expr = '', )
                            ], 
                        filter = '', 
                        sql = '', ), ),
                status = dasl_api.models.core/v1/resource_status.core.v1.ResourceStatus(
                    job_id = 56, 
                    job_name = '', 
                    enabled = True, 
                    notebook_path = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    job_status = 'unscheduled', 
                    events = [
                        null
                        ], )
            )
        else:
            return CoreV1Transform(
                spec = dasl_api.models.core/v1/transform_spec.core.v1.TransformSpec(
                    schedule = dasl_api.models.core/v1/schedule.core.v1.Schedule(
                        at_least_every = '', 
                        exactly = '', 
                        continuous = True, 
                        compute_group = '', 
                        enabled = True, ), 
                    output_table = '', 
                    stream = dasl_api.models.core_v1_transform_spec_stream.core_v1_TransformSpec_stream(
                        tables = [
                            dasl_api.models.core_v1_transform_spec_stream_tables_inner.core_v1_TransformSpec_stream_tables_inner(
                                name = '', 
                                alias = '', 
                                streaming = True, 
                                watermark = dasl_api.models.core_v1_transform_spec_stream_tables_inner_watermark.core_v1_TransformSpec_stream_tables_inner_watermark(
                                    event_time_column = '', 
                                    delay_threshold = '', 
                                    drop_duplicates = [
                                        ''
                                        ], ), 
                                join_type = '', 
                                join_expr = '', )
                            ], 
                        filter = '', 
                        sql = '', ), ),
        )
        """

    def testCoreV1Transform(self):
        """Test CoreV1Transform"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.core_v1_rule_spec_metadata import CoreV1RuleSpecMetadata

class TestCoreV1RuleSpecMetadata(unittest.TestCase):
    """CoreV1RuleSpecMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreV1RuleSpecMetadata:
        """Test CoreV1RuleSpecMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreV1RuleSpecMetadata`
        """
        model = CoreV1RuleSpecMetadata()
        if include_optional:
            return CoreV1RuleSpecMetadata(
                version = 1.337,
                category = '',
                severity = '',
                fidelity = 'Investigative',
                mitre = [
                    dasl_api.models.core_v1_rule_spec_metadata_mitre_inner.core_v1_RuleSpec_metadata_mitre_inner(
                        taxonomy = '', 
                        tactic = '', 
                        technique_id = '', 
                        technique = '', 
                        sub_technique_id = '', 
                        sub_technique = '', )
                    ],
                objective = '',
                response = dasl_api.models.core_v1_rule_spec_metadata_response.core_v1_RuleSpec_metadata_response(
                    guidelines = '', 
                    playbooks = [
                        dasl_api.models.core_v1_rule_spec_metadata_response_playbooks_inner.core_v1_RuleSpec_metadata_response_playbooks_inner(
                            notebook = '', 
                            options = {
                                'key' : ''
                                }, )
                        ], )
            )
        else:
            return CoreV1RuleSpecMetadata(
        )
        """

    def testCoreV1RuleSpecMetadata(self):
        """Test CoreV1RuleSpecMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

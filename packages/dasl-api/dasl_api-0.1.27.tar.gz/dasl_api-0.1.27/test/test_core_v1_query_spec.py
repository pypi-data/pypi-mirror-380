# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.core_v1_query_spec import CoreV1QuerySpec

class TestCoreV1QuerySpec(unittest.TestCase):
    """CoreV1QuerySpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreV1QuerySpec:
        """Test CoreV1QuerySpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreV1QuerySpec`
        """
        model = CoreV1QuerySpec()
        if include_optional:
            return CoreV1QuerySpec(
                metadata = dasl_api.models.core_v1_query_spec_metadata.core_v1_QuerySpec_metadata(
                    version = 56, ),
                path = '',
                sql = '',
                warehouse = '',
                date_range = dasl_api.models.core_v1_query_spec_date_range.core_v1_QuerySpec_dateRange(
                    start_date = '', 
                    end_date = '', ),
                lookup_retention = dasl_api.models.core/v1/query_lookup_request.core.v1.QueryLookupRequest(
                    warehouse = '', 
                    version = 56, 
                    start_value = '', 
                    row_count = 1, 
                    refinements = [
                        ''
                        ], 
                    pagination = dasl_api.models.core_v1_query_lookup_request_pagination.core_v1_QueryLookupRequest_pagination(
                        fields = {
                            'key' : ''
                            }, 
                        fetch_preceding = True, ), )
            )
        else:
            return CoreV1QuerySpec(
                path = '',
                sql = '',
        )
        """

    def testCoreV1QuerySpec(self):
        """Test CoreV1QuerySpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

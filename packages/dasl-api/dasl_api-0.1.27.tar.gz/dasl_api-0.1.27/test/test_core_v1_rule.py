# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.core_v1_rule import CoreV1Rule

class TestCoreV1Rule(unittest.TestCase):
    """CoreV1Rule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreV1Rule:
        """Test CoreV1Rule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreV1Rule`
        """
        model = CoreV1Rule()
        if include_optional:
            return CoreV1Rule(
                api_version = '',
                kind = '',
                metadata = dasl_api.models.common/v1/object_meta.common.v1.ObjectMeta(
                    name = '', 
                    workspace = '', 
                    comment = '', 
                    annotations = {
                        'key' : ''
                        }, 
                    created_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_by = '', 
                    modified_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_successful_run_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    modified_by = '', 
                    version = 56, 
                    deleted = True, 
                    resource_status = 'none', 
                    ui_status = '', 
                    client_of_origin = '', ),
                spec = dasl_api.models.core/v1/rule_spec.core.v1.RuleSpec(
                    metadata = dasl_api.models.core_v1_rule_spec_metadata.core_v1_RuleSpec_metadata(
                        version = 1.337, 
                        category = '', 
                        severity = '', 
                        fidelity = 'Investigative', 
                        mitre = [
                            dasl_api.models.core_v1_rule_spec_metadata_mitre_inner.core_v1_RuleSpec_metadata_mitre_inner(
                                taxonomy = '', 
                                tactic = '', 
                                technique_id = '', 
                                technique = '', 
                                sub_technique_id = '', 
                                sub_technique = '', )
                            ], 
                        objective = '', 
                        response = dasl_api.models.core_v1_rule_spec_metadata_response.core_v1_RuleSpec_metadata_response(
                            guidelines = '', 
                            playbooks = [
                                dasl_api.models.core_v1_rule_spec_metadata_response_playbooks_inner.core_v1_RuleSpec_metadata_response_playbooks_inner(
                                    notebook = '', 
                                    options = {
                                        'key' : ''
                                        }, )
                                ], ), ), 
                    schedule = dasl_api.models.core/v1/schedule.core.v1.Schedule(
                        at_least_every = '', 
                        exactly = '', 
                        continuous = True, 
                        compute_group = '', 
                        enabled = True, ), 
                    input = dasl_api.models.core_v1_rule_spec_input.core_v1_RuleSpec_input(
                        stream = dasl_api.models.core_v1_rule_spec_input_stream.core_v1_RuleSpec_input_stream(
                            tables = [
                                dasl_api.models.core_v1_rule_spec_input_stream_tables_inner.core_v1_RuleSpec_input_stream_tables_inner(
                                    name = '', 
                                    watermark = dasl_api.models.core_v1_rule_spec_input_stream_tables_inner_watermark.core_v1_RuleSpec_input_stream_tables_inner_watermark(
                                        event_time_column = '', 
                                        delay_threshold = '', 
                                        drop_duplicates = [
                                            ''
                                            ], ), 
                                    alias = '', 
                                    join_type = '', 
                                    join_expr = '', 
                                    streaming = True, )
                                ], 
                            filter = '', 
                            sql = '', 
                            custom = dasl_api.models.core_v1_rule_spec_input_stream_custom.core_v1_RuleSpec_input_stream_custom(
                                notebook = '', ), 
                            starting_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        batch = dasl_api.models.core_v1_rule_spec_input_batch.core_v1_RuleSpec_input_batch(
                            sql = '', ), ), 
                    observables = [
                        dasl_api.models.core/v1/rule/observable.core.v1.Rule.Observable(
                            kind = '', 
                            value = '', 
                            relationship = '', 
                            risk = dasl_api.models.core_v1_rule_observable_risk.core_v1_Rule_Observable_risk(
                                impact = '', 
                                confidence = '', ), )
                        ], 
                    output = dasl_api.models.core_v1_rule_spec_output.core_v1_RuleSpec_output(
                        summary = '', 
                        context = {
                            'key' : ''
                            }, 
                        default_context = True, ), 
                    collate = dasl_api.models.core_v1_rule_spec_collate.core_v1_RuleSpec_collate(
                        collate_on = [
                            ''
                            ], 
                        within = '', 
                        action = 'append', ), 
                    compute_mode = 'high', ),
                status = dasl_api.models.core/v1/resource_status.core.v1.ResourceStatus(
                    job_id = 56, 
                    job_name = '', 
                    enabled = True, 
                    notebook_path = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    job_status = 'unscheduled', 
                    events = [
                        null
                        ], )
            )
        else:
            return CoreV1Rule(
                spec = dasl_api.models.core/v1/rule_spec.core.v1.RuleSpec(
                    metadata = dasl_api.models.core_v1_rule_spec_metadata.core_v1_RuleSpec_metadata(
                        version = 1.337, 
                        category = '', 
                        severity = '', 
                        fidelity = 'Investigative', 
                        mitre = [
                            dasl_api.models.core_v1_rule_spec_metadata_mitre_inner.core_v1_RuleSpec_metadata_mitre_inner(
                                taxonomy = '', 
                                tactic = '', 
                                technique_id = '', 
                                technique = '', 
                                sub_technique_id = '', 
                                sub_technique = '', )
                            ], 
                        objective = '', 
                        response = dasl_api.models.core_v1_rule_spec_metadata_response.core_v1_RuleSpec_metadata_response(
                            guidelines = '', 
                            playbooks = [
                                dasl_api.models.core_v1_rule_spec_metadata_response_playbooks_inner.core_v1_RuleSpec_metadata_response_playbooks_inner(
                                    notebook = '', 
                                    options = {
                                        'key' : ''
                                        }, )
                                ], ), ), 
                    schedule = dasl_api.models.core/v1/schedule.core.v1.Schedule(
                        at_least_every = '', 
                        exactly = '', 
                        continuous = True, 
                        compute_group = '', 
                        enabled = True, ), 
                    input = dasl_api.models.core_v1_rule_spec_input.core_v1_RuleSpec_input(
                        stream = dasl_api.models.core_v1_rule_spec_input_stream.core_v1_RuleSpec_input_stream(
                            tables = [
                                dasl_api.models.core_v1_rule_spec_input_stream_tables_inner.core_v1_RuleSpec_input_stream_tables_inner(
                                    name = '', 
                                    watermark = dasl_api.models.core_v1_rule_spec_input_stream_tables_inner_watermark.core_v1_RuleSpec_input_stream_tables_inner_watermark(
                                        event_time_column = '', 
                                        delay_threshold = '', 
                                        drop_duplicates = [
                                            ''
                                            ], ), 
                                    alias = '', 
                                    join_type = '', 
                                    join_expr = '', 
                                    streaming = True, )
                                ], 
                            filter = '', 
                            sql = '', 
                            custom = dasl_api.models.core_v1_rule_spec_input_stream_custom.core_v1_RuleSpec_input_stream_custom(
                                notebook = '', ), 
                            starting_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        batch = dasl_api.models.core_v1_rule_spec_input_batch.core_v1_RuleSpec_input_batch(
                            sql = '', ), ), 
                    observables = [
                        dasl_api.models.core/v1/rule/observable.core.v1.Rule.Observable(
                            kind = '', 
                            value = '', 
                            relationship = '', 
                            risk = dasl_api.models.core_v1_rule_observable_risk.core_v1_Rule_Observable_risk(
                                impact = '', 
                                confidence = '', ), )
                        ], 
                    output = dasl_api.models.core_v1_rule_spec_output.core_v1_RuleSpec_output(
                        summary = '', 
                        context = {
                            'key' : ''
                            }, 
                        default_context = True, ), 
                    collate = dasl_api.models.core_v1_rule_spec_collate.core_v1_RuleSpec_collate(
                        collate_on = [
                            ''
                            ], 
                        within = '', 
                        action = 'append', ), 
                    compute_mode = 'high', ),
        )
        """

    def testCoreV1Rule(self):
        """Test CoreV1Rule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

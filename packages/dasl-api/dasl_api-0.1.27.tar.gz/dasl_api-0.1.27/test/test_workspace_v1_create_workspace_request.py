# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.workspace_v1_create_workspace_request import WorkspaceV1CreateWorkspaceRequest

class TestWorkspaceV1CreateWorkspaceRequest(unittest.TestCase):
    """WorkspaceV1CreateWorkspaceRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkspaceV1CreateWorkspaceRequest:
        """Test WorkspaceV1CreateWorkspaceRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkspaceV1CreateWorkspaceRequest`
        """
        model = WorkspaceV1CreateWorkspaceRequest()
        if include_optional:
            return WorkspaceV1CreateWorkspaceRequest(
                admin_user = '',
                workspace_name = '',
                admin_config = dasl_api.models.workspace/v1/admin_config_spec.workspace.v1.AdminConfigSpec(
                    auth = dasl_api.models.workspace_v1_admin_config_spec_auth.workspace_v1_AdminConfigSpec_auth(
                        host = '', 
                        service_principal = dasl_api.models.workspace_v1_admin_config_spec_auth_service_principal.workspace_v1_AdminConfigSpec_auth_servicePrincipal(
                            client_id = '', 
                            secret = '', ), 
                        app_client_id = dasl_api.models.workspace_v1_admin_config_spec_auth_app_client_id.workspace_v1_AdminConfigSpec_auth_appClientId(
                            client_id = '', ), ), )
            )
        else:
            return WorkspaceV1CreateWorkspaceRequest(
                admin_user = '',
                workspace_name = '',
                admin_config = dasl_api.models.workspace/v1/admin_config_spec.workspace.v1.AdminConfigSpec(
                    auth = dasl_api.models.workspace_v1_admin_config_spec_auth.workspace_v1_AdminConfigSpec_auth(
                        host = '', 
                        service_principal = dasl_api.models.workspace_v1_admin_config_spec_auth_service_principal.workspace_v1_AdminConfigSpec_auth_servicePrincipal(
                            client_id = '', 
                            secret = '', ), 
                        app_client_id = dasl_api.models.workspace_v1_admin_config_spec_auth_app_client_id.workspace_v1_AdminConfigSpec_auth_appClientId(
                            client_id = '', ), ), ),
        )
        """

    def testWorkspaceV1CreateWorkspaceRequest(self):
        """Test WorkspaceV1CreateWorkspaceRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

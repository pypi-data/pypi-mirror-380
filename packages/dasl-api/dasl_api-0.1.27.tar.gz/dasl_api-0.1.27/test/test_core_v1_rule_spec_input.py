# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.1.27
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.core_v1_rule_spec_input import CoreV1RuleSpecInput

class TestCoreV1RuleSpecInput(unittest.TestCase):
    """CoreV1RuleSpecInput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreV1RuleSpecInput:
        """Test CoreV1RuleSpecInput
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreV1RuleSpecInput`
        """
        model = CoreV1RuleSpecInput()
        if include_optional:
            return CoreV1RuleSpecInput(
                stream = dasl_api.models.core_v1_rule_spec_input_stream.core_v1_RuleSpec_input_stream(
                    tables = [
                        dasl_api.models.core_v1_rule_spec_input_stream_tables_inner.core_v1_RuleSpec_input_stream_tables_inner(
                            name = '', 
                            watermark = dasl_api.models.core_v1_rule_spec_input_stream_tables_inner_watermark.core_v1_RuleSpec_input_stream_tables_inner_watermark(
                                event_time_column = '', 
                                delay_threshold = '', 
                                drop_duplicates = [
                                    ''
                                    ], ), 
                            alias = '', 
                            join_type = '', 
                            join_expr = '', 
                            streaming = True, )
                        ], 
                    filter = '', 
                    sql = '', 
                    custom = dasl_api.models.core_v1_rule_spec_input_stream_custom.core_v1_RuleSpec_input_stream_custom(
                        notebook = '', 
                        options = {
                            'key' : ''
                            }, ), 
                    starting_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                batch = dasl_api.models.core_v1_rule_spec_input_batch.core_v1_RuleSpec_input_batch(
                    sql = '', 
                    custom = dasl_api.models.core_v1_rule_spec_input_batch_custom.core_v1_RuleSpec_input_batch_custom(
                        notebook = '', 
                        options = {
                            'key' : ''
                            }, ), )
            )
        else:
            return CoreV1RuleSpecInput(
        )
        """

    def testCoreV1RuleSpecInput(self):
        """Test CoreV1RuleSpecInput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

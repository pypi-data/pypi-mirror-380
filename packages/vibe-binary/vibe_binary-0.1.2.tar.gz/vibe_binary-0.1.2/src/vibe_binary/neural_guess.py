import random


class NeuralGuesser:
    def __init__(self, max_number=100, use_real_ai=True):
        self.max_number = max_number
        self.min_guess = 1
        self.max_guess = max_number
        self.guesses = 0
        self.use_real_ai = use_real_ai

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
        self.ai = None
        if use_real_ai:
            try:
                from .ai_api import NeuralAPI
                self.ai = NeuralAPI(silent_mode=True)
            except ImportError:
                # –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
                self.use_real_ai = False

    def smart_guess(self):
        self.guesses += 1

        if self.use_real_ai and self.ai:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å
                guess = self.ai.ask_neural_guess(
                    [(g, f) for g, f in self.history],
                    self.max_number
                )
                return guess
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–ª–æ–º–∞–ª–∞—Å—å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
                self.use_real_ai = False

        # –õ–æ–∫–∞–ª—å–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        if self.min_guess <= self.max_guess:
            return (self.min_guess + self.max_guess) // 2
        else:
            return random.randint(1, self.max_number)

    def add_feedback(self, feedback, last_guess):
        self.history.append((last_guess, feedback))

        if feedback == '+':
            self.min_guess = max(self.min_guess, last_guess + 1)
        elif feedback == '-':
            self.max_guess = min(self.max_guess, last_guess - 1)

    def start_game(self):
        print(f"üîÆ Vibe Binary —É–≥–∞–¥–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {self.max_number}!")

        # –¢–∏—Ö–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        mode = "–ù–ï–ô–†–û–°–ï–¢–¨" if self.use_real_ai else "–ª–æ–∫–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º"
        print(f"üí´ –†–µ–∂–∏–º: {mode}")

        print("–ü—Ä–∞–≤–∏–ª–∞: + (–ë–û–õ–¨–®–ï), - (–ú–ï–ù–¨–®–ï), = (—É–≥–∞–¥–∞–ª)")
        print("‚îÄ" * 50)

        self.guesses = 0
        self.history = []
        self.min_guess = 1
        self.max_guess = self.max_number

        while True:
            guess = self.smart_guess()
            print(f"ü§î –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {guess}")

            feedback = input("–¢–≤–æ–π –æ—Ç–≤–µ—Ç (+, -, =): ").strip()

            while feedback not in ['+', '-', '=']:
                print("‚ùå –¢–æ–ª—å–∫–æ +, - –∏–ª–∏ =!")
                feedback = input("–¢–≤–æ–π –æ—Ç–≤–µ—Ç (+, -, =): ").strip()

            if feedback == '=':
                print(f"üéâ –£–≥–∞–¥–∞–ª –∑–∞ {self.guesses} –ø–æ–ø—ã—Ç–æ–∫!")
                break

            self.add_feedback(feedback, guess)


def neural_guess_number(max_number=100, use_real_ai=True):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç"""
    try:
        game = NeuralGuesser(max_number, use_real_ai)
        game.start_game()
    except Exception as e:
        # –ê–≤–∞—Ä–∏–π–Ω—ã–π fallback - –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        print("‚ö†Ô∏è  –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º...")
        game = NeuralGuesser(max_number, use_real_ai=False)
        game.start_game()


def neural_guess_c(max_number=100):
    """–¢–∏—Ö–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    game = NeuralGuesser(max_number, use_real_ai=True)
    game.start_game()
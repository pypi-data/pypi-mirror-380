from .ai_api import NeuralAPI


class NeuralGuesser:
    def __init__(self, max_number=100, use_real_ai=True):
        self.max_number = max_number
        self.min_guess = 1
        self.max_guess = max_number
        self.guesses = 0
        self.history = []  # [(guess, feedback), ...]

        # –ù–∞—Å—Ç–æ—è—â–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å —á–µ—Ä–µ–∑ API
        self.use_real_ai = use_real_ai
        if use_real_ai:
            self.ai = NeuralAPI()

    def smart_guess(self):
        """–£–º–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ - –ª–∏–±–æ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –ª–∏–±–æ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫"""
        self.guesses += 1

        if self.use_real_ai and self.ai:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            guess = self.ai.ask_neural_guess(self.history, self.max_number)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            if self.min_guess <= self.max_guess:
                guess = (self.min_guess + self.max_guess) // 2
            else:
                guess = random.randint(1, self.max_number)

        return guess

    def add_feedback(self, feedback, last_guess):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–∏–∞–ø–∞–∑–æ–Ω"""
        self.history.append((last_guess, feedback))

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ—à–∏–±–∞–µ—Ç—Å—è)
        if feedback == '+':
            self.min_guess = max(self.min_guess, last_guess + 1)
        elif feedback == '-':
            self.max_guess = min(self.max_guess, last_guess - 1)

    def start_game(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —Å –Ω–∞—Å—Ç–æ—è—â–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"""
        print(f"üîÆ Vibe Binary —Å –ù–ï–ô–†–û–°–ï–¢–¨–Æ —É–≥–∞–¥–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {self.max_number}!")
        print("–ü—Ä–∞–≤–∏–ª–∞: + (–º–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï), - (–º–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï), = (—É–≥–∞–¥–∞–ª)")

        if self.use_real_ai:
            print("üí´ –†–µ–∂–∏–º: –ù–ê–°–¢–û–Ø–©–ê–Ø –ù–ï–ô–†–û–°–ï–¢–¨ —á–µ—Ä–µ–∑ API")
        else:
            print("‚ö° –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫")

        print("‚îÄ" * 50)

        self.guesses = 0
        self.history = []
        self.min_guess = 1
        self.max_guess = self.max_number

        while True:
            guess = self.smart_guess()
            print(f"ü§î –ù–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç: {guess}")

            feedback = input("–¢–≤–æ–π –æ—Ç–≤–µ—Ç (+, -, =): ").strip()

            while feedback not in ['+', '-', '=']:
                print("‚ùå –¢–æ–ª—å–∫–æ +, - –∏–ª–∏ =!")
                feedback = input("–¢–≤–æ–π –æ—Ç–≤–µ—Ç (+, -, =): ").strip()

            if feedback == '=':
                print(f"üéâ –ù–µ–π—Ä–æ—Å–µ—Ç—å —É–≥–∞–¥–∞–ª–∞ –∑–∞ {self.guesses} –ø–æ–ø—ã—Ç–æ–∫!")
                break

            self.add_feedback(feedback, guess)

            if self.min_guess > self.max_guess:
                print("ü§® –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–∞–º–∏...")
                break


def neural_guess_number(max_number=100, use_real_ai=True):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"""
    game = NeuralGuesser(max_number, use_real_ai)
    game.start_game()


def neural_guess_c(max_number=100):
    """–ß–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é"""
    game = NeuralGuesser(max_number, use_real_ai=True)
    game.start_game()
import random


class NeuralGuesser:
    def __init__(self, max_number=100):
        self.max_number = max_number
        self.min_guess = 1
        self.max_guess = max_number
        self.guesses = 0
        self.history = []

    def smart_guess(self):
        """–£–º–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫"""
        self.guesses += 1

        if self.min_guess <= self.max_guess:
            guess = (self.min_guess + self.max_guess) // 2
        else:
            # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å–ª–æ–º–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
            available = self.get_available_numbers()
            guess = random.choice(available) if available else random.randint(1, self.max_number)

        return guess

    def get_available_numbers(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        available = list(range(1, self.max_number + 1))

        for guess, feedback in self.history:
            if feedback == '+' and guess in available:
                available = [x for x in available if x > guess]
            elif feedback == '-' and guess in available:
                available = [x for x in available if x < guess]
            elif feedback == '=' and guess in available:
                available.remove(guess)

        return available

    def add_feedback(self, feedback, last_guess):
        """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–¥–±—ç–∫–∞"""
        self.history.append((last_guess, feedback))

        if feedback == '+':
            self.min_guess = max(self.min_guess, last_guess + 1)
        elif feedback == '-':
            self.max_guess = min(self.max_guess, last_guess - 1)

    def start_game(self, show_intro=True):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –ø–æ —É–≥–∞–¥—ã–≤–∞–Ω–∏—é —á–∏—Å–ª–∞"""
        if show_intro:
            print(f"üîÆ Vibe Binary —É–≥–∞–¥–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {self.max_number}!")
            print("–ü—Ä–∞–≤–∏–ª–∞: + (—Ç–≤–æ–µ —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï), - (—Ç–≤–æ–µ —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï), = (—É–≥–∞–¥–∞–ª)")
            print("‚îÄ" * 50)

        self.guesses = 0
        self.history = []
        self.min_guess = 1
        self.max_guess = self.max_number

        while True:
            guess = self.smart_guess()
            print(f"ü§î –ú–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {guess}")

            feedback = input("–¢–≤–æ–π –æ—Ç–≤–µ—Ç (+, -, =): ").strip()

            while feedback not in ['+', '-', '=']:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ +, - –∏–ª–∏ =")
                feedback = input("–¢–≤–æ–π –æ—Ç–≤–µ—Ç (+, -, =): ").strip()

            if feedback == '=':
                print(f"üéâ –£—Ä–∞! –Ø —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {guess} –∑–∞ {self.guesses} –ø–æ–ø—ã—Ç–æ–∫!")
                return guess

            self.add_feedback(feedback, guess)

            if self.min_guess > self.max_guess:
                print("ü§® –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±—Å—è —Å –æ—Ç–≤–µ—Ç–∞–º–∏... –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")
                self.min_guess = 1
                self.max_guess = self.max_number


def neural_guess_number(max_number=100):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –≤ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª"""
    guesser = NeuralGuesser(max_number)
    guesser.start_game()


def neural_guess_c(max_number=100):
    """–ß–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    guesser = NeuralGuesser(max_number)
    guesser.start_game(show_intro=False)
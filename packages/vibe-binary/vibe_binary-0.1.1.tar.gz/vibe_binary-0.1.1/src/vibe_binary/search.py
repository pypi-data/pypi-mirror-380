def binary_search(arr, target, verbose=False, auto_sort=True):
    """
    –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    if auto_sort and not is_sorted(arr):
        if verbose:
            print(f"üì¶ –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤...")
        arr = sorted(arr)

    low, high = 0, len(arr) - 1
    steps = 0

    if verbose:
        print(f"üîç –ò—â–µ–º {target} –≤ –º–∞—Å—Å–∏–≤–µ –∏–∑ {len(arr)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    while low <= high:
        steps += 1
        mid = (low + high) // 2
        mid_val = arr[mid]

        if verbose:
            print(f"–®–∞–≥ {steps}: [{low}-{high}] mid={mid} ‚Üí {mid_val}")

        if mid_val == target:
            if verbose:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ! –ò–Ω–¥–µ–∫—Å: {mid}")
            return mid
        elif mid_val < target:
            low = mid + 1
            if verbose:
                print(f"   ‚û°Ô∏è –ò–¥—ë–º –≤–ø—Ä–∞–≤–æ")
        else:
            high = mid - 1
            if verbose:
                print(f"   ‚¨ÖÔ∏è –ò–¥—ë–º –≤–ª–µ–≤–æ")

    if verbose:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
    return -1


def binary_search_c(arr, target, auto_sort=True):
    """
    –ß–∏—Å—Ç—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –≤—ã–≤–æ–¥–∞
    """
    if auto_sort and not is_sorted(arr):
        arr = sorted(arr)

    low, high = 0, len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        mid_val = arr[mid]

        if mid_val == target:
            return mid
        elif mid_val < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1


def is_sorted(arr):
    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))
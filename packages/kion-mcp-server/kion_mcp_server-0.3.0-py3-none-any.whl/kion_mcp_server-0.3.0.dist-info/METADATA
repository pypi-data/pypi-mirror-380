Metadata-Version: 2.4
Name: kion-mcp-server
Version: 0.3.0
Summary: Kion MCP Server - Model Context Protocol server for Kion API integration
Project-URL: Homepage, https://github.com/kionsoftware/kion-mcp
Project-URL: Repository, https://github.com/kionsoftware/kion-mcp
Project-URL: Issues, https://github.com/kionsoftware/kion-mcp/issues
Project-URL: Documentation, https://github.com/kionsoftware/kion-mcp/blob/main/README.md
Author-email: Kion Software <support@kion.io>
Maintainer-email: Kion Software <support@kion.io>
License: MIT License
        
        Copyright (c) 2025 Nor Labs, Inc., DBA Kion
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Keywords: api,cloud,governance,kion,mcp
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Systems Administration
Requires-Python: >=3.13
Requires-Dist: fastmcp>=2.10.5
Requires-Dist: httpx>=0.28.1
Requires-Dist: pyyaml>=6.0.2
Description-Content-Type: text/markdown

# Kion MCP Server

## Installation

> [!TIP]
> For more detailed installation and usage instructions, please see our [support documentation](https://support.kion.io/hc/en-us/articles/38760650970765-MCP-Server-Installation-and-Configuration)

### Claude Desktop Extension
`uv` is currently a requirement for the desktop extension. Please see [installation instructions](https://docs.astral.sh/uv/getting-started/installation/)

Once `uv` is installed, the Claude Desktop Extension can be installed by downloading the `.dxt` archive from the releases section, and then the archive can be installed via the extension settings in Claude Destkop, double clicking the file, or dragging the file onto the extension settings.

### Dockerhub
Releases are published to the `kionsoftware/kion-mcp` repository, and can be run directly using docker.

### Pypi
This package can be installed via pip.
`pip install kion-mcp-server`

## Development Setup

### Install uv

Install `uv` using homebrew with `brew install uv`

### Install an MCP client

An MCP server needs an MCP client to run it. For development - [the mcp inspector](https://github.com/modelcontextprotocol/inspector) is a great tool for getting up and running with the server.

### Add this server as a tool

For your MCP client there should be a json file defining what MCP Servers it has access to. Look up where this file is for your client and add something similar to this to it (json objects vary slightly by client check your client's documentation for the exact required JSON. MCP inspector has fields that can be configured directly.):

```
"KionMcp": {
    "command": "uv",
    "args": [
        "--directory",
        "<absolute path to this folder>",
        "run",
        "kion-mcp-server"
    ]
}
```

NOTE: sometimes you will need to give an exact path to `uv` for some clients to work properly. Just run `which uv` and put the output of that as the command in the JSON

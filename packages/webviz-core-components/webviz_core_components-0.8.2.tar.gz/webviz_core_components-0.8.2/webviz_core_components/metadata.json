{
  "dist/components/Backdrop/Backdrop.js": {
    "description": "",
    "displayName": "Backdrop",
    "methods": [],
    "props": {
      "opacity": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": ""
      }
    }
  },
  "dist/components/Dialog/Dialog.js": {
    "description": "A modal dialog component with optional buttons. Can be set to be draggable.",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "States if the dialog is open or not.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "max_width": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"xs\"",
              "computed": false
            },
            {
              "value": "\"sm\"",
              "computed": false
            },
            {
              "value": "\"md\"",
              "computed": false
            },
            {
              "value": "\"lg\"",
              "computed": false
            },
            {
              "value": "\"xl\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Width of the dialog. Can be one of 'xs' | 'sm' | 'md' | 'lg' | 'xl'.",
        "defaultValue": {
          "value": "\"md\"",
          "computed": false
        }
      },
      "full_screen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to show the dialog fullscreen.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "draggable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true if the dialog shall be draggable.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The title of the dialog."
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "The child elements showed in the dialog",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "backdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to false if you do not want to have a backdrop behind the dialog."
      },
      "actions": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "A list of actions to be displayed as buttons in the lower right corner of the dialog.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "last_action_called": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The name of the action that was called last.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "actions_called": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A counter for how often actions have been called so far.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change.",
        "defaultValue": {
          "value": "() => {\n    return;\n}",
          "computed": false
        }
      }
    }
  },
  "dist/components/EdsIcon/EdsIcon.js": {
    "description": "",
    "displayName": "EdsIcon",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "16",
              "computed": false
            },
            {
              "value": "24",
              "computed": false
            },
            {
              "value": "32",
              "computed": false
            },
            {
              "value": "40",
              "computed": false
            },
            {
              "value": "48",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/Menu/Menu.js": {
    "description": "Menu is a component that allows to create an interactive menu with flexible depth that\ncan be pinned and filtered.",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks",
        "defaultValue": {
          "value": "\"some-id\"",
          "computed": false
        }
      },
      "initiallyPinned": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true if the menu shall be initially shown as pinned.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "initiallyCollapsed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true if you want all groups in the menu to be initially collapsed."
      },
      "menuBarPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Define the position the menu bar shall be displayed at.",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "menuDrawerPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Define the position the menu drawer shall be displayed at.",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "showLogo": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true if a logo shall be shown, false if not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "navigationItems": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "A list of navigation items to show in the menu."
      },
      "homepageUrl": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "URL to be shown when clicking on the logo. If not defined, the first page will be used."
      }
    }
  },
  "dist/components/Overlay/Overlay.js": {
    "description": "An overlay that can be used to remove focus from the background and set focus on a certain component\n(e.g. dialog, notification).",
    "displayName": "Overlay",
    "methods": [],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "Set if the overlay shall be shown or not."
      },
      "zIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Optionally defined a preferred z-index for the overlay."
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Callback function called when the overlay is clicked on."
      }
    }
  },
  "dist/components/ScrollArea/ScrollArea.js": {
    "description": "",
    "displayName": "ScrollArea",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "noScrollbarPadding": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/Select/Select.js": {
    "description": "Select is a dash wrapper for the html select tag.",
    "displayName": "Select",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks"
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of visible options",
        "defaultValue": {
          "value": "4",
          "computed": false
        }
      },
      "options": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "exact",
            "value": {
              "label": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ],
                "description": "The dropdown's label",
                "required": true
              },
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ],
                "description": "The value of the dropdown. This value\ncorresponds to the items specified in the\n`value` property.",
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "An array of options {label: [string|number], value: [string|number]},\nan optional disabled field can be used for each option",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ]
              }
            }
          ]
        },
        "required": false,
        "description": "The value of the input. If `multi` is false\nthen value is just a string that corresponds to the values\nprovided in the `options` property. If `multi` is true, then\nmultiple values can be selected at once, and `value` is an\narray of items with values corresponding to those in the\n`options` prop.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "debounce_time_ms": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Debounce time for props update for user. The value prop for selected\nvalues for Dash callbacks are debounced with the configured number\nof milliseconds.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "multi": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the user can select multiple values",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appends a class to the select tag",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Appends styles to the select tag",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "parent_className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appends a class to the wrapping div",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "parent_style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Appends inline styles to the wrapping div",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the input changes",
        "defaultValue": {
          "value": "() => {\n    return;\n}",
          "computed": false
        }
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"value\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page. Since only `value` is allowed this prop can\nnormally be ignored.",
        "defaultValue": {
          "value": "[\"value\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      }
    }
  },
  "dist/components/SmartNodeSelector/SmartNodeSelector.js": {
    "description": "SmartNodeSelector is a component that allows to create tags by selecting data from a tree structure.\nThe tree structure can also provide meta data that is displayed as color or icon.",
    "displayName": "SmartNodeSelector",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "maxNumSelectedNodes": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The max number of tags that can be selected. Set to '-1' in order to not have any limits.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "delimiter": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The delimiter used to separate input levels.",
        "defaultValue": {
          "value": "\":\"",
          "computed": false
        }
      },
      "numMetaNodes": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of meta data used. Meta data is not shown as text in the final tag but used\nto set properties like border color or icons.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "data": {
        "type": {
          "name": "array"
        },
        "required": true,
        "description": "A JSON object holding all tags."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A label that will be printed when this component is rendered."
      },
      "showSuggestions": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Stating of suggestions should be shown or not.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      },
      "selectedTags": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Selected tags.",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text for input field.",
        "defaultValue": {
          "value": "\"Add new tag...\"",
          "computed": false
        }
      },
      "numSecondsUntilSuggestionsAreShown": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of seconds until suggestions are shown.",
        "defaultValue": {
          "value": "0.5",
          "computed": false
        }
      },
      "lineBreakAfterTag": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, tags will be separated by a line break.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "caseInsensitiveMatching": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true if case-wise incorrect values should be accepted anyways.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "useBetaFeatures": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set to true to enable beta features.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page.",
        "defaultValue": {
          "value": "[\"selectedTags\"]",
          "computed": false
        }
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit.",
        "defaultValue": {
          "value": "\"local\"",
          "computed": false
        }
      }
    }
  },
  "dist/components/ViewVisibilityContainer/ViewVisibilityContainer.js": {
    "description": "",
    "displayName": "ViewVisibilityContainer",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "showInViews": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": ""
      },
      "notShowInViews": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizContentManager/WebvizContentManager.js": {
    "description": "",
    "displayName": "WebvizContentManager",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "activePluginId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "activeViewId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizDialog/WebvizDialog.js": {
    "description": "",
    "displayName": "WebvizDialog",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "modal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "heightOwner": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"dialog\"",
              "computed": false
            },
            {
              "value": "\"content\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "minWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "200",
          "computed": false
        }
      },
      "maxWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "disableDraggable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableEscapeKeyDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "actions": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "() => {\n    return;\n}",
          "computed": false
        }
      }
    }
  },
  "dist/components/WebvizPluginLayoutColumn/WebvizPluginLayoutColumn.js": {
    "description": "",
    "displayName": "WebvizPluginLayoutColumn",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "flexGrow": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizPluginLayoutRow/WebvizPluginLayoutRow.js": {
    "description": "",
    "displayName": "WebvizPluginLayoutRow",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "flexGrow": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizPluginLoadingIndicator/WebvizPluginLoadingIndicator.js": {
    "description": "",
    "displayName": "WebvizPluginLoadingIndicator",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizPluginPlaceholder/WebvizPluginPlaceholder.js": {
    "description": "WebvizPluginPlaceholder is a fundamental webviz dash component.\nIt takes a property, `label`, and displays it.\nIt renders an input with the property `value` which is editable by the user.",
    "displayName": "WebvizPluginPlaceholder",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks",
        "defaultValue": {
          "value": "\"some-id\"",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "buttons": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of strings, representing which buttons to render. Full set is\n['download', 'contact_person', 'guided_tour', 'screenshot', 'expand']",
        "defaultValue": {
          "value": "[\n    \"screenshot\",\n    \"expand\",\n    \"download\",\n    \"guided_tour\",\n    \"contact_person\",\n    \"feedback\",\n]",
          "computed": false
        }
      },
      "contact_person": {
        "type": {
          "name": "shape",
          "value": {
            "name": {
              "name": "string",
              "required": false
            },
            "email": {
              "name": "string",
              "required": false
            },
            "phone": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "A dictionary of information regarding contact person for the data content.\nValid keys are 'name', 'email' and 'phone'.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "download": {
        "type": {
          "name": "shape",
          "value": {
            "filename": {
              "name": "string",
              "required": true
            },
            "content": {
              "name": "string",
              "required": true
            },
            "mime_type": {
              "name": "string",
              "required": true
            }
          }
        },
        "required": false,
        "description": "A dictionary with information regarding the resource file the plugin requested.\nDictionary keys are 'filename', 'content' and 'mime_type'.\nThe 'content' value should be a base64 encoded ASCII string.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "screenshot_filename": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "File name used when saving a screenshot of the plugin.",
        "defaultValue": {
          "value": "\"webviz-screenshot.png\"",
          "computed": false
        }
      },
      "tour_steps": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Tour steps. List of dictionaries, each with two keys ('selector' and 'content').",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "data_requested": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat the data download button has been clicked.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "deprecation_warnings": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "message": {
                "name": "string",
                "required": true
              },
              "url": {
                "name": "string",
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "Stating if a deprecation warning for the related plugin should be shown.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "feedback_url": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "URL to feedback website.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change",
        "defaultValue": {
          "value": "() => {\n    return;\n}",
          "computed": false
        }
      }
    }
  },
  "dist/components/WebvizPluginWrapper/WebvizPluginWrapper.js": {
    "description": "",
    "displayName": "WebvizPluginWrapper",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "views": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": "import { ViewPropTypes } from \"../../shared-types/webviz-content/webviz\";",
            "computed": true
          }
        },
        "required": true,
        "description": ""
      },
      "initiallyActiveViewId": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "screenshotFilename": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "contactPerson": {
        "type": {
          "name": "shape",
          "value": "import { ContactPersonPropTypes, } from \"../../shared-types/webviz-content/contact-person\";",
          "computed": true
        },
        "required": false,
        "description": ""
      },
      "deprecationWarnings": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": "import { DeprecationWarningPropTypes, } from \"../../shared-types/webviz-content/deprecation-warning\";",
            "computed": true
          }
        },
        "required": false,
        "description": ""
      },
      "stretch": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "feedbackUrl": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "tourSteps": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": "import { TourStepPropTypes, } from \"../../shared-types/webviz-content/tour-step\";",
            "computed": true
          }
        },
        "required": false,
        "description": ""
      },
      "persistence": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Used to allow user interactions in this component to be persisted when\nthe component - or the page - is refreshed. If `persisted` is truthy and\nhasn't changed from its previous value, a `value` that the user has\nchanged while using the app will keep that change, as long as\nthe new `value` also matches what was given originally.\nUsed in conjunction with `persistence_type`."
      },
      "persisted_props": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "\"children\"",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "Properties whose user interactions will persist after refreshing the\ncomponent or the page."
      },
      "persistence_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"local\"",
              "computed": false
            },
            {
              "value": "\"session\"",
              "computed": false
            },
            {
              "value": "\"memory\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where persisted user changes will be stored:\nmemory: only kept in memory, reset on page refresh.\nlocal: window.localStorage, data is kept after the browser quit.\nsession: window.sessionStorage, data is cleared once the browser quit."
      }
    }
  },
  "dist/components/WebvizPluginsWrapper/WebvizPluginsWrapper.js": {
    "description": "",
    "displayName": "WebvizPluginsWrapper",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizSettings/WebvizSettings.js": {
    "description": "",
    "displayName": "WebvizSettings",
    "methods": [],
    "props": {
      "visible": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": ""
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizSettingsDrawer/WebvizSettingsDrawer.js": {
    "description": "",
    "displayName": "WebvizSettingsDrawer",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizSettingsGroup/WebvizSettingsGroup.js": {
    "description": "",
    "displayName": "WebvizSettingsGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "open": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "viewId": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "pluginId": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "visibleInViews": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": ""
      },
      "notVisibleInViews": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": ""
      },
      "alwaysOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "onToggle": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizView/WebvizView.js": {
    "description": "",
    "displayName": "WebvizView",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "download": {
        "type": {
          "name": "shape",
          "value": "import { DownloadDataPropTypes, } from \"../../shared-types/webviz-content/download-data\";",
          "computed": true
        },
        "required": false,
        "description": ""
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "dist/components/WebvizViewElement/WebvizViewElement.js": {
    "description": "",
    "displayName": "WebvizViewElement",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "flexGrow": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "hidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "showDownload": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "screenshotFilename": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "download": {
        "type": {
          "name": "shape",
          "value": "import { DownloadDataPropTypes, } from \"../../shared-types/webviz-content/download-data\";",
          "computed": true
        },
        "required": false,
        "description": ""
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  }
}
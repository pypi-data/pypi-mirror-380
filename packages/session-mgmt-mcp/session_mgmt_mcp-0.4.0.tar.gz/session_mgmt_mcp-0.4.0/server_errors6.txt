session_mgmt_mcp/server.py:299:16: error: Incompatible return value type (got "SessionPermissionsManager", expected "Self")  [return-value]
    |
296 |             cls._instance = super().__new__(cls)
297 |             cls._instance._initialized = False
298 |         return cls._instance
299 |
300 |     def __init__(self, claude_dir: Path) -> None:

session_mgmt_mcp/server.py:3486:19: error: "FunctionTool" not callable  [operator]
     |
3483 |     output.append(f"   📁 {wt['path']}")
3484 |
3485 |     status_line = _format_worktree_status(wt)
3486 |     if status_line:
3487 |         output.append(f"   Status: {status_line}")

session_mgmt_mcp/server.py:3641:5: error: invalid syntax  [syntax]
     |
3638 |     manager = WorktreeManager(session_logger=session_logger)
3639 |
3640 |     try:
3641 |         result = await manager.get_worktree_status(working_dir)
3642 |
3643 |         if not result["success"]:
3644 |             return f"❌ {result['error']}"
3645 |
3646 |

session_mgmt_mcp/server.py:3656:5: error: invalid syntax  [syntax]
     |
3653 |     manager = WorktreeManager(session_logger=session_logger)
3654 |
3655 |     try:
3656 |         result = await manager.prune_worktrees(working_dir)
3657 |
3658 |         if not result["success"]:
3659 |             return f"❌ {result['error']}"
3660 |
3661 |         output = ["🧹 **Worktree Pruning Complete**\n"]
3662 |
3663 |         if result["pruned_count"] > 0:
3664 |             output.append(
3665 |                 f"🗑️ Pruned {result['pruned_count']} stale worktree references",
3666 |             )
3667 |             if result.get("output"):
3668 |                 output.append(f"📝 Details: {result['output']}")
3669 |         else:
3670 |             output.append("✅ No stale worktree references found")
3671 |             output.append("🎉 All worktrees are clean and up to date")
3672 |
3673 |         output.append("\n💡 Use `git_worktree_list` to see current worktrees")
3674 |
3675 |         return "\n".join(output)
3676 |
3677 |     except Exception as e:
3678 |     manager = WorktreeManager(session_logger=session_logger)
3679 |

session_mgmt_mcp/server.py:3682:61: error: Name "from_path" is not defined  [name-defined]
     |
3679 |
3680 |     try:
3681 |         result = await manager.switch_worktree_context(Path(from_path), Path(to_path))
3682 |
3683 |         if not result["success"]:

session_mgmt_mcp/server.py:3682:78: error: Name "to_path" is not defined  [name-defined]
     |
3679 |
3680 |     try:
3681 |         result = await manager.switch_worktree_context(Path(from_path), Path(to_path))
3682 |
3683 |         if not result["success"]:

session_mgmt_mcp/server.py:3827:5: error: Need type annotation for "types" (hint: "types: Dict[<type>, <type>] = ...")  [var-annotated]
     |
3824 |
3825 |     # Group by type if available
3826 |     types = {}
3827 |     for interruption in interruptions:
3828 |         int_type = interruption.get("type", "unknown")

Found 7 errors in 1 file (checked 1 source file)

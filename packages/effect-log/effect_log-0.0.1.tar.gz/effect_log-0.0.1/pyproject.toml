[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "effect-log"
version = "0.0.1"
description = "Functional structured logging with composable effects"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Effect-Py Organization", email = "maintainers@effect-py.org"}
]
maintainers = [
    {name = "Effect-Py Organization", email = "maintainers@effect-py.org"}
]
keywords = ["logging", "functional", "structured", "effect", "immutable"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Logging",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = ["starlette (>=0.47.2)"]

[project.urls]
Homepage = "https://github.com/effect-py/log"
Repository = "https://github.com/effect-py/log"
Documentation = "https://github.com/effect-py/log/blob/main/README.md"

[tool.poetry]
packages = [{ include = "effect_log" }]

[tool.poetry.dependencies]
python = ">=3.11"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.0"
pytest-cov = ">=4.0"
ruff = ">=0.1.0"
mypy = ">=1.0"
coverage = { version = ">=7.0", extras = ["toml"] }

[tool.poetry.group.web.dependencies]
flask = ">=2.0"
fastapi = ">=0.68"
django = ">=3.2"

# Ruff - lint + format
[tool.ruff]
target-version = "py312"
line-length = 88
[tool.ruff.lint]
select = ["E", "W", "F", "I", "B", "C4", "UP"]
ignore = ["B008", "C901"]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# Mypy
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = ["^examples/", "^tests/", "^setup.py$"]

[[tool.mypy.overrides]]
module = ["flask", "fastapi", "fastapi.responses", "django.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "effect_log.middleware"
disallow_untyped_defs = false
disallow_untyped_decorators = false

# Pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=effect_log --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage
[tool.coverage.run]
source = ["effect_log"]
omit = ["tests/*", "examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

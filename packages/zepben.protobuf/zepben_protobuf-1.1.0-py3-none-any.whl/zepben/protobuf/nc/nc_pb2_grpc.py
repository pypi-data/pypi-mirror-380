# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from zepben.protobuf.connection import connection_requests_pb2 as zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2
from zepben.protobuf.metadata import metadata_requests_pb2 as zepben_dot_protobuf_dot_metadata_dot_metadata__requests__pb2
from zepben.protobuf.metadata import metadata_responses_pb2 as zepben_dot_protobuf_dot_metadata_dot_metadata__responses__pb2
from zepben.protobuf.nc import nc_requests_pb2 as zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2
from zepben.protobuf.nc import nc_responses_pb2 as zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2


class NetworkConsumerStub(object):
    """*
    A service providing consumer access to the network model.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getIdentifiedObjects = channel.stream_stream(
                '/zepben.protobuf.nc.NetworkConsumer/getIdentifiedObjects',
                request_serializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetIdentifiedObjectsRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetIdentifiedObjectsResponse.FromString,
                )
        self.getNetworkHierarchy = channel.unary_unary(
                '/zepben.protobuf.nc.NetworkConsumer/getNetworkHierarchy',
                request_serializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetNetworkHierarchyRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetNetworkHierarchyResponse.FromString,
                )
        self.getEquipmentForContainers = channel.stream_stream(
                '/zepben.protobuf.nc.NetworkConsumer/getEquipmentForContainers',
                request_serializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetEquipmentForContainersRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetEquipmentForContainersResponse.FromString,
                )
        self.getEquipmentForRestriction = channel.unary_stream(
                '/zepben.protobuf.nc.NetworkConsumer/getEquipmentForRestriction',
                request_serializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetEquipmentForRestrictionRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetEquipmentForRestrictionResponse.FromString,
                )
        self.getTerminalsForNode = channel.unary_stream(
                '/zepben.protobuf.nc.NetworkConsumer/getTerminalsForNode',
                request_serializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetTerminalsForNodeRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetTerminalsForNodeResponse.FromString,
                )
        self.getMetadata = channel.unary_unary(
                '/zepben.protobuf.nc.NetworkConsumer/getMetadata',
                request_serializer=zepben_dot_protobuf_dot_metadata_dot_metadata__requests__pb2.GetMetadataRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_metadata_dot_metadata__responses__pb2.GetMetadataResponse.FromString,
                )
        self.checkConnection = channel.unary_unary(
                '/zepben.protobuf.nc.NetworkConsumer/checkConnection',
                request_serializer=zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2.CheckConnectionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class NetworkConsumerServicer(object):
    """*
    A service providing consumer access to the network model.
    """

    def getIdentifiedObjects(self, request_iterator, context):
        """*
        Get identified objects.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNetworkHierarchy(self, request, context):
        """*
        Get a simplified view of the network hierarchy from the geographical region down to the feeder level.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEquipmentForContainers(self, request_iterator, context):
        """*
        Get an EquipmentContainer's equipment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEquipmentForRestriction(self, request, context):
        """*
        Get an OperationalRestriction's equipment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTerminalsForNode(self, request, context):
        """*
        Get a ConnectivityNodes Terminals.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMetadata(self, request, context):
        """*
        Get Metadata related to the service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkConnection(self, request, context):
        """*
        Return an empty response for SDK connection tests.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkConsumerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getIdentifiedObjects': grpc.stream_stream_rpc_method_handler(
                    servicer.getIdentifiedObjects,
                    request_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetIdentifiedObjectsRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetIdentifiedObjectsResponse.SerializeToString,
            ),
            'getNetworkHierarchy': grpc.unary_unary_rpc_method_handler(
                    servicer.getNetworkHierarchy,
                    request_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetNetworkHierarchyRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetNetworkHierarchyResponse.SerializeToString,
            ),
            'getEquipmentForContainers': grpc.stream_stream_rpc_method_handler(
                    servicer.getEquipmentForContainers,
                    request_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetEquipmentForContainersRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetEquipmentForContainersResponse.SerializeToString,
            ),
            'getEquipmentForRestriction': grpc.unary_stream_rpc_method_handler(
                    servicer.getEquipmentForRestriction,
                    request_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetEquipmentForRestrictionRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetEquipmentForRestrictionResponse.SerializeToString,
            ),
            'getTerminalsForNode': grpc.unary_stream_rpc_method_handler(
                    servicer.getTerminalsForNode,
                    request_deserializer=zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetTerminalsForNodeRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetTerminalsForNodeResponse.SerializeToString,
            ),
            'getMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.getMetadata,
                    request_deserializer=zepben_dot_protobuf_dot_metadata_dot_metadata__requests__pb2.GetMetadataRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_metadata_dot_metadata__responses__pb2.GetMetadataResponse.SerializeToString,
            ),
            'checkConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.checkConnection,
                    request_deserializer=zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2.CheckConnectionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zepben.protobuf.nc.NetworkConsumer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NetworkConsumer(object):
    """*
    A service providing consumer access to the network model.
    """

    @staticmethod
    def getIdentifiedObjects(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/zepben.protobuf.nc.NetworkConsumer/getIdentifiedObjects',
            zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetIdentifiedObjectsRequest.SerializeToString,
            zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetIdentifiedObjectsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNetworkHierarchy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zepben.protobuf.nc.NetworkConsumer/getNetworkHierarchy',
            zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetNetworkHierarchyRequest.SerializeToString,
            zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetNetworkHierarchyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getEquipmentForContainers(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/zepben.protobuf.nc.NetworkConsumer/getEquipmentForContainers',
            zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetEquipmentForContainersRequest.SerializeToString,
            zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetEquipmentForContainersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getEquipmentForRestriction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/zepben.protobuf.nc.NetworkConsumer/getEquipmentForRestriction',
            zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetEquipmentForRestrictionRequest.SerializeToString,
            zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetEquipmentForRestrictionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTerminalsForNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/zepben.protobuf.nc.NetworkConsumer/getTerminalsForNode',
            zepben_dot_protobuf_dot_nc_dot_nc__requests__pb2.GetTerminalsForNodeRequest.SerializeToString,
            zepben_dot_protobuf_dot_nc_dot_nc__responses__pb2.GetTerminalsForNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zepben.protobuf.nc.NetworkConsumer/getMetadata',
            zepben_dot_protobuf_dot_metadata_dot_metadata__requests__pb2.GetMetadataRequest.SerializeToString,
            zepben_dot_protobuf_dot_metadata_dot_metadata__responses__pb2.GetMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zepben.protobuf.nc.NetworkConsumer/checkConnection',
            zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2.CheckConnectionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

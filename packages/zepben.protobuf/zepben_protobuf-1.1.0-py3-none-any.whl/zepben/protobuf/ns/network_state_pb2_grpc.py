# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from zepben.protobuf.connection import connection_requests_pb2 as zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2
from zepben.protobuf.ns import network_state_requests_pb2 as zepben_dot_protobuf_dot_ns_dot_network__state__requests__pb2
from zepben.protobuf.ns import network_state_responses_pb2 as zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2


class UpdateNetworkStateServiceStub(object):
    """*
    A service for updating the state of the network.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setCurrentStates = channel.stream_stream(
                '/zepben.protobuf.ns.UpdateNetworkStateService/setCurrentStates',
                request_serializer=zepben_dot_protobuf_dot_ns_dot_network__state__requests__pb2.SetCurrentStatesRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2.SetCurrentStatesResponse.FromString,
                )
        self.checkConnection = channel.unary_unary(
                '/zepben.protobuf.ns.UpdateNetworkStateService/checkConnection',
                request_serializer=zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2.CheckConnectionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class UpdateNetworkStateServiceServicer(object):
    """*
    A service for updating the state of the network.
    """

    def setCurrentStates(self, request_iterator, context):
        """*
        Receive batches of current state events in a constant stream. All events in a single request will be processed as a
        batch and will be acknowledged. Separate requests may be processed together, but there is no guarantee.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkConnection(self, request, context):
        """*
        Return an empty response for SDK connection tests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UpdateNetworkStateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setCurrentStates': grpc.stream_stream_rpc_method_handler(
                    servicer.setCurrentStates,
                    request_deserializer=zepben_dot_protobuf_dot_ns_dot_network__state__requests__pb2.SetCurrentStatesRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2.SetCurrentStatesResponse.SerializeToString,
            ),
            'checkConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.checkConnection,
                    request_deserializer=zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2.CheckConnectionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zepben.protobuf.ns.UpdateNetworkStateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UpdateNetworkStateService(object):
    """*
    A service for updating the state of the network.
    """

    @staticmethod
    def setCurrentStates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/zepben.protobuf.ns.UpdateNetworkStateService/setCurrentStates',
            zepben_dot_protobuf_dot_ns_dot_network__state__requests__pb2.SetCurrentStatesRequest.SerializeToString,
            zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2.SetCurrentStatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zepben.protobuf.ns.UpdateNetworkStateService/checkConnection',
            zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2.CheckConnectionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class QueryNetworkStateServiceStub(object):
    """*
    A service for querying the state of the network.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getCurrentStates = channel.unary_stream(
                '/zepben.protobuf.ns.QueryNetworkStateService/getCurrentStates',
                request_serializer=zepben_dot_protobuf_dot_ns_dot_network__state__requests__pb2.GetCurrentStatesRequest.SerializeToString,
                response_deserializer=zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2.GetCurrentStatesResponse.FromString,
                )
        self.reportBatchStatus = channel.stream_unary(
                '/zepben.protobuf.ns.QueryNetworkStateService/reportBatchStatus',
                request_serializer=zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2.SetCurrentStatesResponse.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.checkConnection = channel.unary_unary(
                '/zepben.protobuf.ns.QueryNetworkStateService/checkConnection',
                request_serializer=zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2.CheckConnectionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class QueryNetworkStateServiceServicer(object):
    """*
    A service for querying the state of the network.
    """

    def getCurrentStates(self, request, context):
        """*
        Get a stream of all current state events between two timestamps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reportBatchStatus(self, request_iterator, context):
        """*
        Send a stream of status responses, one for each message received in the GetCurrentStatesResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkConnection(self, request, context):
        """*
        Return an empty response for SDK connection tests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryNetworkStateServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getCurrentStates': grpc.unary_stream_rpc_method_handler(
                    servicer.getCurrentStates,
                    request_deserializer=zepben_dot_protobuf_dot_ns_dot_network__state__requests__pb2.GetCurrentStatesRequest.FromString,
                    response_serializer=zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2.GetCurrentStatesResponse.SerializeToString,
            ),
            'reportBatchStatus': grpc.stream_unary_rpc_method_handler(
                    servicer.reportBatchStatus,
                    request_deserializer=zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2.SetCurrentStatesResponse.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'checkConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.checkConnection,
                    request_deserializer=zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2.CheckConnectionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zepben.protobuf.ns.QueryNetworkStateService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueryNetworkStateService(object):
    """*
    A service for querying the state of the network.
    """

    @staticmethod
    def getCurrentStates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/zepben.protobuf.ns.QueryNetworkStateService/getCurrentStates',
            zepben_dot_protobuf_dot_ns_dot_network__state__requests__pb2.GetCurrentStatesRequest.SerializeToString,
            zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2.GetCurrentStatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reportBatchStatus(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/zepben.protobuf.ns.QueryNetworkStateService/reportBatchStatus',
            zepben_dot_protobuf_dot_ns_dot_network__state__responses__pb2.SetCurrentStatesResponse.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zepben.protobuf.ns.QueryNetworkStateService/checkConnection',
            zepben_dot_protobuf_dot_connection_dot_connection__requests__pb2.CheckConnectionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# coding: utf-8

"""
    FINBOURNE Access Management API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, constr 
from finbourne_access.models.text_operator import TextOperator

class IfIdentityClaimExpression(BaseModel):
    """
    IfIdentityClaimExpression
    """
    claim_type:  StrictStr = Field(...,alias="claimType") 
    claim_value_type:  Optional[StrictStr] = Field(None,alias="claimValueType") 
    claim_issuer:  Optional[StrictStr] = Field(None,alias="claimIssuer") 
    claim_original_issuer:  Optional[StrictStr] = Field(None,alias="claimOriginalIssuer") 
    operator: TextOperator = Field(...)
    value:  Optional[StrictStr] = Field(None,alias="value") 
    __properties = ["claimType", "claimValueType", "claimIssuer", "claimOriginalIssuer", "operator", "value"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IfIdentityClaimExpression:
        """Create an instance of IfIdentityClaimExpression from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if claim_value_type (nullable) is None
        # and __fields_set__ contains the field
        if self.claim_value_type is None and "claim_value_type" in self.__fields_set__:
            _dict['claimValueType'] = None

        # set to None if claim_issuer (nullable) is None
        # and __fields_set__ contains the field
        if self.claim_issuer is None and "claim_issuer" in self.__fields_set__:
            _dict['claimIssuer'] = None

        # set to None if claim_original_issuer (nullable) is None
        # and __fields_set__ contains the field
        if self.claim_original_issuer is None and "claim_original_issuer" in self.__fields_set__:
            _dict['claimOriginalIssuer'] = None

        # set to None if value (nullable) is None
        # and __fields_set__ contains the field
        if self.value is None and "value" in self.__fields_set__:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IfIdentityClaimExpression:
        """Create an instance of IfIdentityClaimExpression from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IfIdentityClaimExpression.parse_obj(obj)

        _obj = IfIdentityClaimExpression.parse_obj({
            "claim_type": obj.get("claimType"),
            "claim_value_type": obj.get("claimValueType"),
            "claim_issuer": obj.get("claimIssuer"),
            "claim_original_issuer": obj.get("claimOriginalIssuer"),
            "operator": obj.get("operator"),
            "value": obj.get("value")
        })
        return _obj

# coding: utf-8

"""
    FINBOURNE Access Management API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field 
from finbourne_access.models.requested_action_key import RequestedActionKey

class RequestDetails(BaseModel):
    """
    The details of the requested evaluation  # noqa: E501
    """
    action: RequestedActionKey = Field(...)
    from_effective_date: Optional[datetime] = Field(None, alias="fromEffectiveDate", description="The start date for the requested effective date range for the resource (if null, UtcNow)")
    to_effective_date: Optional[datetime] = Field(None, alias="toEffectiveDate", description="The end date for the requested effective date range for the resource (if null, same as from date)")
    from_as_at: Optional[datetime] = Field(None, alias="fromAsAt", description="The requested AsAt date for the resource (if null, Latest). If specifying a range of AsAt dates, this is the lower bounds.")
    to_as_at: Optional[datetime] = Field(None, alias="toAsAt", description="Upper bound if specifying a request that requires a range of AsAt dates. This is used if specifying the desire to grant access for a user between an AsAt range.")
    __properties = ["action", "fromEffectiveDate", "toEffectiveDate", "fromAsAt", "toAsAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RequestDetails:
        """Create an instance of RequestDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # set to None if from_effective_date (nullable) is None
        # and __fields_set__ contains the field
        if self.from_effective_date is None and "from_effective_date" in self.__fields_set__:
            _dict['fromEffectiveDate'] = None

        # set to None if to_effective_date (nullable) is None
        # and __fields_set__ contains the field
        if self.to_effective_date is None and "to_effective_date" in self.__fields_set__:
            _dict['toEffectiveDate'] = None

        # set to None if from_as_at (nullable) is None
        # and __fields_set__ contains the field
        if self.from_as_at is None and "from_as_at" in self.__fields_set__:
            _dict['fromAsAt'] = None

        # set to None if to_as_at (nullable) is None
        # and __fields_set__ contains the field
        if self.to_as_at is None and "to_as_at" in self.__fields_set__:
            _dict['toAsAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RequestDetails:
        """Create an instance of RequestDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RequestDetails.parse_obj(obj)

        _obj = RequestDetails.parse_obj({
            "action": RequestedActionKey.from_dict(obj.get("action")) if obj.get("action") is not None else None,
            "from_effective_date": obj.get("fromEffectiveDate"),
            "to_effective_date": obj.get("toEffectiveDate"),
            "from_as_at": obj.get("fromAsAt"),
            "to_as_at": obj.get("toAsAt")
        })
        return _obj

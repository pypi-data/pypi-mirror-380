# coding: utf-8

"""
    FINBOURNE Access Management API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictInt, StrictStr, conlist 
from finbourne_access.models.for_spec import ForSpec
from finbourne_access.models.grant import Grant
from finbourne_access.models.how_spec import HowSpec
from finbourne_access.models.if_expression import IfExpression
from finbourne_access.models.policy_id import PolicyId
from finbourne_access.models.policy_type import PolicyType
from finbourne_access.models.role_id import RoleId
from finbourne_access.models.selector_definition import SelectorDefinition
from finbourne_access.models.when_spec import WhenSpec

class AttachedPolicyDefinitionResponse(BaseModel):
    """
    AttachedPolicyDefinitionResponse
    """
    source_role: Optional[RoleId] = Field(None, alias="sourceRole")
    role_hierarchy_index: Optional[StrictInt] = Field(None, alias="roleHierarchyIndex")
    description:  Optional[StrictStr] = Field(None,alias="description") 
    applications: Optional[conlist(StrictStr)] = None
    policy_type: Optional[PolicyType] = Field(None, alias="policyType")
    id: Optional[PolicyId] = None
    grant: Optional[Grant] = None
    selectors: Optional[conlist(SelectorDefinition)] = None
    var_for: Optional[conlist(ForSpec)] = Field(None, alias="for")
    var_if: Optional[conlist(IfExpression)] = Field(None, alias="if")
    when: Optional[WhenSpec] = None
    how: Optional[HowSpec] = None
    __properties = ["sourceRole", "roleHierarchyIndex", "description", "applications", "policyType", "id", "grant", "selectors", "for", "if", "when", "how"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AttachedPolicyDefinitionResponse:
        """Create an instance of AttachedPolicyDefinitionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source_role
        if self.source_role:
            _dict['sourceRole'] = self.source_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in selectors (list)
        _items = []
        if self.selectors:
            for _item in self.selectors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['selectors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_for (list)
        _items = []
        if self.var_for:
            for _item in self.var_for:
                if _item:
                    _items.append(_item.to_dict())
            _dict['for'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in var_if (list)
        _items = []
        if self.var_if:
            for _item in self.var_if:
                if _item:
                    _items.append(_item.to_dict())
            _dict['if'] = _items
        # override the default output from pydantic by calling `to_dict()` of when
        if self.when:
            _dict['when'] = self.when.to_dict()
        # override the default output from pydantic by calling `to_dict()` of how
        if self.how:
            _dict['how'] = self.how.to_dict()
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if applications (nullable) is None
        # and __fields_set__ contains the field
        if self.applications is None and "applications" in self.__fields_set__:
            _dict['applications'] = None

        # set to None if selectors (nullable) is None
        # and __fields_set__ contains the field
        if self.selectors is None and "selectors" in self.__fields_set__:
            _dict['selectors'] = None

        # set to None if var_for (nullable) is None
        # and __fields_set__ contains the field
        if self.var_for is None and "var_for" in self.__fields_set__:
            _dict['for'] = None

        # set to None if var_if (nullable) is None
        # and __fields_set__ contains the field
        if self.var_if is None and "var_if" in self.__fields_set__:
            _dict['if'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AttachedPolicyDefinitionResponse:
        """Create an instance of AttachedPolicyDefinitionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AttachedPolicyDefinitionResponse.parse_obj(obj)

        _obj = AttachedPolicyDefinitionResponse.parse_obj({
            "source_role": RoleId.from_dict(obj.get("sourceRole")) if obj.get("sourceRole") is not None else None,
            "role_hierarchy_index": obj.get("roleHierarchyIndex"),
            "description": obj.get("description"),
            "applications": obj.get("applications"),
            "policy_type": obj.get("policyType"),
            "id": PolicyId.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "grant": obj.get("grant"),
            "selectors": [SelectorDefinition.from_dict(_item) for _item in obj.get("selectors")] if obj.get("selectors") is not None else None,
            "var_for": [ForSpec.from_dict(_item) for _item in obj.get("for")] if obj.get("for") is not None else None,
            "var_if": [IfExpression.from_dict(_item) for _item in obj.get("if")] if obj.get("if") is not None else None,
            "when": WhenSpec.from_dict(obj.get("when")) if obj.get("when") is not None else None,
            "how": HowSpec.from_dict(obj.get("how")) if obj.get("how") is not None else None
        })
        return _obj

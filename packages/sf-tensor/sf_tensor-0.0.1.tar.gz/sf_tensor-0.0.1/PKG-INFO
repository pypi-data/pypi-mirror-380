Metadata-Version: 2.4
Name: sf-tensor
Version: 0.0.1
Summary: The SF Tensor package
Project-URL: Homepage, https://sf-tensor.com
License: MIT License
        
        Copyright (c) 2025
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
        
License-File: LICENSE
Keywords: example,packaging,tutorial
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# sf-tensor

Minimal start of a Python package for functionality related to the services offered by SF Tensor.
This will include functionality to interact with SF Tensor's API endpoints for metric logging and more.

Updates will arrive in the next days and weeks ;)


## Installation

Install with:

```bash
pip install sf-tensor
```

## Usage

```python
from sf_tensor import logAccuracy
import torch
from torch import nn

model = nn.Sequential(nn.Linear(4, 2))
opt = torch.optim.SGD(model.parameters(), lr=0.1)
loss_fn = nn.CrossEntropyLoss()
x = torch.randn(64, 4)
y = torch.randint(0, 2, (64,))
for _ in range(5):
    opt.zero_grad(); o = model(x); (loss_fn(o, y)).backward(); opt.step()
    logAccuracy((o.argmax(1) == y).float().mean().item())
```



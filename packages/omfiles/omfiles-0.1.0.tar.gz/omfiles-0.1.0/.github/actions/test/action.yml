name: "Test Package"
description: "Run tests on built wheels"

inputs:
  python-version:
    description: "Python version to use for testing"
    required: false
    default: "3.12"
  is-musl:
    description: "Whether this is a musl build"
    required: false
    default: "false"
  test-type:
    description: "Type of test to run (standard or min_deps)"
    required: false
    default: "standard"
  platform-name:
    description: "Platform name for artifact identification"
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.8.19"
        enable-cache: ${{ inputs.is-musl != 'true' && 'true' || 'false' }}
        cache-dependency-glob: "**/uv.lock"
        python-version: ${{ inputs.python-version }}

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        name: wheels-${{ inputs.platform-name }}
        path: dist

    # Regular tests (non-musl platforms)
    - name: Run regular tests
      if: ${{ inputs.test-type == 'standard' && inputs.is-musl != 'true' }}
      shell: bash
      run: |
        WHEEL_PATH=$(ls dist/*.whl)
        uv venv
        uv sync --no-install-project --no-default-groups --group=test
        uv pip install --force-reinstall "$WHEEL_PATH"
        uv run --no-sync pytest tests/

    # Musl tests
    - name: Run musl tests
      if: ${{ inputs.test-type == 'standard' && inputs.is-musl == 'true' }}
      uses: addnab/docker-run-action@v3
      with:
        image: ghcr.io/astral-sh/uv:0.8.19-alpine
        options: -v ${{ github.workspace }}:/io -w /io
        run: |
          apk add python3 py3-pip py3-psutil gcc python3-dev musl-dev linux-headers
          WHEEL_PATH=$(ls dist/*.whl)
          uv venv
          uv sync --no-install-project --no-default-groups --group=test
          uv pip install --force-reinstall "$WHEEL_PATH"
          uv run --no-sync pytest tests/

    # Minimum dependencies test
    - name: Run tests with minimum dependencies
      if: ${{ inputs.test-type == 'min_deps' }}
      shell: bash
      run: |
        WHEEL_PATH=$(ls dist/*.whl)
        uv venv
        uv sync --no-install-project --no-default-groups --group=test
        uv pip install --force-reinstall "$WHEEL_PATH"
        uv run --no-sync pytest tests/

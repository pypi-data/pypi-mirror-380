"use strict";(self.webpackChunkjupyterlab_zip=self.webpackChunkjupyterlab_zip||[]).push([[675],{675:(e,t,r)=>{r.r(t),r.d(t,{default:()=>p});var n=r(794),o=r(327),a=r(23),i=r(296);async function c(e="",t={}){const r=i.ServerConnection.makeSettings(),n=a.URLExt.join(r.baseUrl,"jupyterlab-zip",e);let o;try{o=await i.ServerConnection.makeRequest(n,t,r)}catch(e){throw new i.ServerConnection.NetworkError(e)}let c=await o.text();if(c.length>0)try{c=JSON.parse(c)}catch(e){console.log("Not a JSON response body.",o)}if(!o.ok)throw new i.ServerConnection.ResponseError(o,c.message||c);return c}const s="filebrowser:unzip-file",l="filebrowser:zip-files";function d(e){return"zip"===e.toLowerCase().split(".").pop()}const p={id:"jupyterlab-zip-extension:plugin",description:"A JupyterLab extension to zip/unzip files in the file browser.",autoStart:!0,requires:[o.IFileBrowserFactory],optional:[n.ICommandPalette],activate:(e,t,r)=>{console.log("JupyterLab Zip/Unzip Extension is activated!");const{commands:o}=e,{tracker:a}=t;o.addCommand(s,{label:"Extract Archive",caption:"Extract the selected archive file",iconClass:"jp-FolderOpenIcon",execute:async()=>{const e=a.currentWidget;if(!e)return void console.warn("No file browser widget active");const t=Array.from(e.selectedItems());if(1!==t.length)return void console.warn("Please select exactly one archive file");const r=t[0];if(d(r.name))try{console.log(`Extracting ${r.name}...`);const t=await c("unzip",{method:"POST",body:JSON.stringify({archive_path:r.path})});t.success?(console.log(`Successfully extracted to: ${t.extract_path}`),await e.model.refresh()):console.error(`Extraction failed: ${t.error}`)}catch(e){console.error("Error extracting archive:",e)}else console.warn("Selected file is not a supported archive format (.zip)")},isEnabled:()=>{const e=a.currentWidget;if(!e)return!1;const t=Array.from(e.selectedItems());return 1===t.length&&d(t[0].name)},isVisible:()=>{const e=a.currentWidget;if(!e)return!1;const t=Array.from(e.selectedItems());return 1===t.length&&d(t[0].name)}}),o.addCommand(l,{label:"Create Archive",caption:"Create a zip archive from selected files/folders",iconClass:"jp-DownloadIcon",execute:async()=>{const e=a.currentWidget;if(!e)return;const t=Array.from(e.selectedItems());if(0===t.length)return;const r=1===t.length?`${t[0].name}.zip`:"archive.zip",o=await n.InputDialog.getText({title:"Create Archive",text:r,label:"Archive name:"});if(o.button.accept&&o.value){let r=o.value;r.endsWith(".zip")||(r+=".zip");try{console.log(`Creating archive ${r}...`);const n=t.map(e=>e.path),o=await c("zip",{method:"POST",body:JSON.stringify({archive_name:r,paths:n})});o.success?(console.log(`Successfully created archive: ${o.archive_path}`),await e.model.refresh()):console.error(`Archive creation failed: ${o.error}`)}catch(e){console.error("Error creating archive:",e)}}},isEnabled:()=>{const e=a.currentWidget;return!!e&&Array.from(e.selectedItems()).length>0}}),e.contextMenu.addItem({command:s,selector:".jp-DirListing-item",rank:11}),e.contextMenu.addItem({command:l,selector:".jp-DirListing-item",rank:11}),r&&(r.addItem({command:s,category:"File Operations"}),r.addItem({command:l,category:"File Operations"}))}}}}]);
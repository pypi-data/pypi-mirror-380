"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .v3_services_suppressionrules_basicexpression import (
    V3ServicesSuppressionRulesBasicExpression,
    V3ServicesSuppressionRulesBasicExpressionTypedDict,
)
from .v3_services_suppressionrules_timeslot import (
    V3ServicesSuppressionRulesTimeslot,
    V3ServicesSuppressionRulesTimeslotTypedDict,
)
from datetime import datetime
from pydantic import model_serializer
from squadcast_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
from typing import List
from typing_extensions import TypedDict


class V3ServicesSuppressionRulesSuppressionRuleTypedDict(TypedDict):
    rule_id: str
    created_at: datetime
    updated_at: datetime
    created_by: str
    updated_by: str
    description: str
    expression: str
    is_basic: bool
    is_timebased: bool
    timeslots: Nullable[List[V3ServicesSuppressionRulesTimeslotTypedDict]]
    basic_expression: List[V3ServicesSuppressionRulesBasicExpressionTypedDict]


class V3ServicesSuppressionRulesSuppressionRule(BaseModel):
    rule_id: str

    created_at: datetime

    updated_at: datetime

    created_by: str

    updated_by: str

    description: str

    expression: str

    is_basic: bool

    is_timebased: bool

    timeslots: Nullable[List[V3ServicesSuppressionRulesTimeslot]]

    basic_expression: List[V3ServicesSuppressionRulesBasicExpression]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["timeslots"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

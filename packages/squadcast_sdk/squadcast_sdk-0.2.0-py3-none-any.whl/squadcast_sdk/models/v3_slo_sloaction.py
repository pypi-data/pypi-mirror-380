"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .v3_slo_sloactiontype import V3SLOSLOActionType
from datetime import datetime
from pydantic import model_serializer
from squadcast_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class V3SLOSLOActionTypedDict(TypedDict):
    type: V3SLOSLOActionType
    id: NotRequired[int]
    slo_id: NotRequired[int]
    user_id: NotRequired[str]
    squad_id: NotRequired[str]
    service_id: NotRequired[str]
    owner_type: NotRequired[str]
    owner_id: NotRequired[str]
    created_at: NotRequired[datetime]
    updated_at: NotRequired[datetime]
    deleted_at: NotRequired[Nullable[datetime]]


class V3SLOSLOAction(BaseModel):
    type: V3SLOSLOActionType

    id: Optional[int] = None

    slo_id: Optional[int] = None

    user_id: Optional[str] = None

    squad_id: Optional[str] = None

    service_id: Optional[str] = None

    owner_type: Optional[str] = None

    owner_id: Optional[str] = None

    created_at: Optional[datetime] = None

    updated_at: Optional[datetime] = None

    deleted_at: OptionalNullable[datetime] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "slo_id",
            "user_id",
            "squad_id",
            "service_id",
            "owner_type",
            "owner_id",
            "created_at",
            "updated_at",
            "deleted_at",
        ]
        nullable_fields = ["deleted_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

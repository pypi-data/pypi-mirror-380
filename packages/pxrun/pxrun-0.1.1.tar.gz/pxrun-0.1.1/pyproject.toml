[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pxrun"
version = "0.1.1"
description = "Proxmox LXC Lifecycle Management Tool"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [{name = "Your Name", email = "your.email@example.com"}]
keywords = ["proxmox", "lxc", "containers", "virtualization", "cli"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: System :: Systems Administration",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "proxmoxer>=2.0.1",
    "paramiko>=3.3.1",
    "PyYAML>=6.0.1",
    "click>=8.1.7",
    "python-dotenv>=1.0.0",
    "cryptography>=41.0.7",
    "requests>=2.31.0",
    "tabulate>=0.9.0",
    "colorama>=0.4.6",
    "rich>=13.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "responses>=0.24.1",
    "jsonschema>=4.19.2",
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.7.1",
    "types-requests>=2.31.0.10",
    "types-paramiko>=3.3.0.0",
    "types-PyYAML>=6.0.12.12",
    "types-tabulate>=0.9.0.3",
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-click>=5.1.0",
    "ipython>=8.18.1",
    "ipdb>=0.13.13",
    "pre-commit>=3.6.0",
]

[project.scripts]
pxrun = "src.cli.__main__:main"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-v",
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "build",
    "dist",
    "__pycache__",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG"]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
no_implicit_reexport = true
namespace_packages = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Ignore missing imports for third-party packages without type stubs
[[tool.mypy.overrides]]
module = [
    "proxmoxer.*",
    "paramiko.*",
    "sops.*",
    "tabulate.*",
    "colorama.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "class .*\\(Protocol\\):",
    "@abstractmethod",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

[project.urls]
Homepage = "https://github.com/yourusername/pxrun"
Documentation = "https://github.com/yourusername/pxrun/blob/main/README.md"
Repository = "https://github.com/yourusername/pxrun.git"
"Bug Tracker" = "https://github.com/yourusername/pxrun/issues"
Changelog = "https://github.com/yourusername/pxrun/blob/main/CHANGELOG.md"

[tool.twine]
repository = "https://upload.pypi.org/legacy/"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/requirements*.txt",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
    "pyproject.toml",
    "setup.py",
]
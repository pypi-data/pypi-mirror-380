Metadata-Version: 2.4
Name: bottle-file-cache
Version: 1.1.0
Summary: A simple file cache for the Python Bottle web framework.
Project-URL: Homepage, https://pypi.org/project/bottle-file-cache
Project-URL: Changelog, https://github.com/BoboTiG/bottle-file-cache/blob/main/CHANGELOG.md
Project-URL: Source, https://github.com/BoboTiG/bottle-file-cache
Project-URL: Sponsor, https://github.com/sponsors/BoboTiG
Project-URL: Tracker, https://github.com/BoboTiG/bottle-file-cache/issues
Project-URL: Released Versions, https://github.com/BoboTiG/bottle-file-cache/releases
Author-email: Mickaël Schoentgen <contact@tiger-222.fr>
Maintainer-email: Mickaël Schoentgen <contact@tiger-222.fr>
License: MIT License
        Copyright (c) 2025, Mickaël 'Tiger-222' Schoentgen
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
License-File: LICENSE
Keywords: bottle,cache,file
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3.14
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Provides-Extra: dev
Requires-Dist: build==1.2.2.post1; extra == 'dev'
Requires-Dist: twine==6.1.0; extra == 'dev'
Provides-Extra: tests
Requires-Dist: bottle==0.13.3; extra == 'tests'
Requires-Dist: mypy==1.15.0; extra == 'tests'
Requires-Dist: pytest-cov==6.1.1; extra == 'tests'
Requires-Dist: pytest==8.3.5; extra == 'tests'
Requires-Dist: ruff==0.11.11; extra == 'tests'
Requires-Dist: webtest==3.0.4; extra == 'tests'
Description-Content-Type: text/markdown

# Bottle File Cache

A simple file cache for the Python [Bottle](https://pypi.org/project/bottle) web framework.

## Installation

```bash
python -m pip install -U bottle-file-cache
```

## Usage

Given that example:

```python
import bottle


@bottle.route("/hello/<name>")
def index(name: str) -> str:
    return bottle.template("<b>Hello {{name}}</b>!", name=name)


if __name__ == "__main__":
    bottle.run(host="localhost", port=8080)
```

Add those lines to enable the cache:

```diff
+from bottle_file_cache import cache
import bottle


@bottle.route("/hello/<name>")
+@cache()
def index(name: str) -> str:
    return bottle.template("<b>Hello {{name}}</b>!", name=name)
```

And that's it!

## Advanced Usage

### Bottle Parameters

You can specify more details to compute the cache key.

Here, it takes URL parameters in addition to the request path:

```python
@bottle.route("/hello2/<name>")
@cache(params=["gender", "pron", "not-used"])
def index2(name: str) -> str:
    return bottle.template("<b>Hello {{name}} ({{gender}}, {{pron}})</b>!", name=name, **bottle.request.params)
```

### Par-Call Expiration

You can specify a custom expiration time (in seconds) on a per-call basis:

```python
@bottle.route("/hello3/<name>")
@cache(expires=1)
def index3(name: str) -> str:
    return bottle.template("<b>Hello {{name}}</b>!", name=name)
```

name: CI / Build / Publish

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]          # tag releases like v0.2.0 or v0.2.0rc1
  pull_request:
  workflow_dispatch: {}

jobs:
  test:
    name: Test (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/setup.cfg', 'setup.py', 'requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install package (dev)
        run: |
          python -m pip install -e .[dev]

      - name: Run tests
        run: python -m pytest -q

  build:
    name: Build sdist + wheel
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Upgrade build tools
        run: python -m pip install --upgrade pip setuptools wheel build twine

      - name: Clean previous build artifacts
        run: rm -rf build dist *.egg-info

      - name: Build
        run: python -m build

      - name: Verify metadata
        run: python -m twine check dist/*

      - name: Inspect license headers in METADATA (debug)
        run: |
          python - <<'PY'
          import tarfile, zipfile, glob
          # Check sdist PKG-INFO
          for tgz in glob.glob("dist/*.tar.gz"):
              with tarfile.open(tgz, "r:gz") as tf:
                  for m in tf.getmembers():
                      if m.name.endswith("PKG-INFO"):
                          data = tf.extractfile(m).read().decode("utf-8", "replace")
                          print(f"---- {tgz} :: PKG-INFO (License lines) ----")
                          for line in data.splitlines():
                              if "License" in line or "license" in line:
                                  print(line)
          # Check wheel METADATA
          for whl in glob.glob("dist/*.whl"):
              with zipfile.ZipFile(whl) as zf:
                  meta = [n for n in zf.namelist() if n.endswith("METADATA")]
                  for n in meta:
                      data = zf.read(n).decode("utf-8","replace")
                      print(f"---- {whl} :: METADATA (License lines) ----")
                      for line in data.splitlines():
                          if "License" in line or "license" in line:
                              print(line)
          PY

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  publish-testpypi:
    name: Publish to TestPyPI (pre-releases)
    runs-on: ubuntu-latest
    needs: build
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
      (contains(github.ref_name, 'rc') || contains(github.ref_name, 'a') || contains(github.ref_name, 'b'))
    steps:
      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Inspect license headers (debug)
        run: |
          python - <<'PY'
          import tarfile, zipfile, glob
          for tgz in glob.glob("dist/*.tar.gz"):
              with tarfile.open(tgz, "r:gz") as tf:
                  for m in tf.getmembers():
                      if m.name.endswith("PKG-INFO"):
                          data = tf.extractfile(m).read().decode("utf-8","replace")
                          print(f"---- {tgz} :: PKG-INFO (license lines) ----")
                          for line in data.splitlines():
                              if "License" in line or "license" in line:
                                  print(line)
          for whl in glob.glob("dist/*.whl"):
              with zipfile.ZipFile(whl) as zf:
                  for n in zf.namelist():
                      if n.endswith("METADATA"):
                          data = zf.read(n).decode("utf-8","replace")
                          print(f"---- {whl} :: METADATA (license lines) ----")
                          for line in data.splitlines():
                              if "License" in line or "license" in line:
                                  print(line)
          PY

      - name: Install Twine
        run: python -m pip install --upgrade twine

      - name: Upload to TestPyPI (wheel only to unblock)
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: twine upload --repository testpypi dist/*.whl

  publish-pypi:
    name: Publish to PyPI (final releases)
    runs-on: ubuntu-latest
    needs: build
    if: |
      startsWith(github.ref, 'refs/tags/v') &&
      !contains(github.ref_name, 'rc') &&
      !contains(github.ref_name, 'a') &&
      !contains(github.ref_name, 'b')
    steps:
      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Inspect license headers (debug)
        run: |
          python - <<'PY'
          import tarfile, zipfile, glob
          for tgz in glob.glob("dist/*.tar.gz"):
              with tarfile.open(tgz, "r:gz") as tf:
                  for m in tf.getmembers():
                      if m.name.endswith("PKG-INFO"):
                          data = tf.extractfile(m).read().decode("utf-8","replace")
                          print(f"---- {tgz} :: PKG-INFO (license lines) ----")
                          for line in data.splitlines():
                              if "License" in line or "license" in line:
                                  print(line)
          for whl in glob.glob("dist/*.whl"):
              with zipfile.ZipFile(whl) as zf:
                  for n in zf.namelist():
                      if n.endswith("METADATA"):
                          data = zf.read(n).decode("utf-8","replace")
                          print(f"---- {whl} :: METADATA (license lines) ----")
                          for line in data.splitlines():
                              if "License" in line or "license" in line:
                                  print(line)
          PY

      - name: Install Twine
        run: python -m pip install --upgrade twine

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

# coding: utf-8

"""
    FINBOURNE Horizon API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr 

class IntegrationLogTargetRecord(BaseModel):
    """
    IntegrationLogTargetRecord
    """
    record_action:  Optional[StrictStr] = Field(None,alias="recordAction") 
    record_type:  Optional[StrictStr] = Field(None,alias="recordType") 
    id_type:  Optional[StrictStr] = Field(None,alias="idType") 
    id_value:  Optional[StrictStr] = Field(None,alias="idValue") 
    attribute_name:  Optional[StrictStr] = Field(None,alias="attributeName") 
    attribute_value:  Optional[StrictStr] = Field(None,alias="attributeValue") 
    __properties = ["recordAction", "recordType", "idType", "idValue", "attributeName", "attributeValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntegrationLogTargetRecord:
        """Create an instance of IntegrationLogTargetRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if record_action (nullable) is None
        # and __fields_set__ contains the field
        if self.record_action is None and "record_action" in self.__fields_set__:
            _dict['recordAction'] = None

        # set to None if record_type (nullable) is None
        # and __fields_set__ contains the field
        if self.record_type is None and "record_type" in self.__fields_set__:
            _dict['recordType'] = None

        # set to None if id_type (nullable) is None
        # and __fields_set__ contains the field
        if self.id_type is None and "id_type" in self.__fields_set__:
            _dict['idType'] = None

        # set to None if id_value (nullable) is None
        # and __fields_set__ contains the field
        if self.id_value is None and "id_value" in self.__fields_set__:
            _dict['idValue'] = None

        # set to None if attribute_name (nullable) is None
        # and __fields_set__ contains the field
        if self.attribute_name is None and "attribute_name" in self.__fields_set__:
            _dict['attributeName'] = None

        # set to None if attribute_value (nullable) is None
        # and __fields_set__ contains the field
        if self.attribute_value is None and "attribute_value" in self.__fields_set__:
            _dict['attributeValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntegrationLogTargetRecord:
        """Create an instance of IntegrationLogTargetRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntegrationLogTargetRecord.parse_obj(obj)

        _obj = IntegrationLogTargetRecord.parse_obj({
            "record_action": obj.get("recordAction"),
            "record_type": obj.get("recordType"),
            "id_type": obj.get("idType"),
            "id_value": obj.get("idValue"),
            "attribute_name": obj.get("attributeName"),
            "attribute_value": obj.get("attributeValue")
        })
        return _obj

# coding: utf-8

"""
    FINBOURNE Horizon API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, conlist 
from finbourne_horizon.models.vendor_field import VendorField

class FieldMapping(BaseModel):
    """
    Mapping from a set of Vendor Fields to a LUSID core entity field  # noqa: E501
    """
    field_name:  StrictStr = Field(...,alias="fieldName", description="The LUSID core entity field") 
    default_value:  Optional[StrictStr] = Field(None,alias="defaultValue", description="Default value if needed") 
    vendor_fields: conlist(VendorField) = Field(..., alias="vendorFields", description="Fields that will be used to map to this field")
    transformation_description:  Optional[StrictStr] = Field(None,alias="transformationDescription", description="The transformation, if required, to map from VendorFields to the LUSID Property") 
    entity_type:  StrictStr = Field(...,alias="entityType", description="The LUSID Entity this is valid for") 
    entity_sub_type:  Optional[StrictStr] = Field(None,alias="entitySubType", description="The LUSID Entity sub type this is valid for") 
    versions: conlist(StrictStr) = Field(..., description="The versions of the Vendor integration this mapping is valid for")
    __properties = ["fieldName", "defaultValue", "vendorFields", "transformationDescription", "entityType", "entitySubType", "versions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FieldMapping:
        """Create an instance of FieldMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in vendor_fields (list)
        _items = []
        if self.vendor_fields:
            for _item in self.vendor_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['vendorFields'] = _items
        # set to None if default_value (nullable) is None
        # and __fields_set__ contains the field
        if self.default_value is None and "default_value" in self.__fields_set__:
            _dict['defaultValue'] = None

        # set to None if transformation_description (nullable) is None
        # and __fields_set__ contains the field
        if self.transformation_description is None and "transformation_description" in self.__fields_set__:
            _dict['transformationDescription'] = None

        # set to None if entity_sub_type (nullable) is None
        # and __fields_set__ contains the field
        if self.entity_sub_type is None and "entity_sub_type" in self.__fields_set__:
            _dict['entitySubType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FieldMapping:
        """Create an instance of FieldMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FieldMapping.parse_obj(obj)

        _obj = FieldMapping.parse_obj({
            "field_name": obj.get("fieldName"),
            "default_value": obj.get("defaultValue"),
            "vendor_fields": [VendorField.from_dict(_item) for _item in obj.get("vendorFields")] if obj.get("vendorFields") is not None else None,
            "transformation_description": obj.get("transformationDescription"),
            "entity_type": obj.get("entityType"),
            "entity_sub_type": obj.get("entitySubType"),
            "versions": obj.get("versions")
        })
        return _obj

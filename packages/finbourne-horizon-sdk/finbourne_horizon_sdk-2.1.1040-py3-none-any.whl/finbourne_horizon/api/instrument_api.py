# coding: utf-8

"""
    FINBOURNE Horizon API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic.v1 import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic.v1 import Field, StrictBool, StrictInt, constr, validator

from typing import List, Optional

from finbourne_horizon.models.allowed_parameter_value import AllowedParameterValue
from finbourne_horizon.models.enrichment_response import EnrichmentResponse
from finbourne_horizon.models.identifiers import Identifiers
from finbourne_horizon.models.onboard_instrument_request import OnboardInstrumentRequest
from finbourne_horizon.models.onboard_instrument_response import OnboardInstrumentResponse
from finbourne_horizon.models.open_figi_parameter_option_name import OpenFigiParameterOptionName
from finbourne_horizon.models.open_figi_search_result import OpenFigiSearchResult
from finbourne_horizon.models.perm_id_data import PermIdData
from finbourne_horizon.models.vendor_product import VendorProduct

from finbourne_horizon.api_client import ApiClient
from finbourne_horizon.api_response import ApiResponse
from finbourne_horizon.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)
from finbourne_horizon.extensions.configuration_options import ConfigurationOptions

# ensure templated type usages are imported
from pydantic.v1 import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated

class InstrumentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @overload
    async def create_instrument(self, onboard_instrument_request : OnboardInstrumentRequest, **kwargs) -> OnboardInstrumentResponse:  # noqa: E501
        ...

    @overload
    def create_instrument(self, onboard_instrument_request : OnboardInstrumentRequest, async_req: Optional[bool]=True, **kwargs) -> OnboardInstrumentResponse:  # noqa: E501
        ...

    @validate_arguments
    def create_instrument(self, onboard_instrument_request : OnboardInstrumentRequest, async_req: Optional[bool]=None, **kwargs) -> Union[OnboardInstrumentResponse, Awaitable[OnboardInstrumentResponse]]:  # noqa: E501
        """[EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_instrument(onboard_instrument_request, async_req=True)
        >>> result = thread.get()

        :param onboard_instrument_request:  (required)
        :type onboard_instrument_request: OnboardInstrumentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OnboardInstrumentResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_instrument_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_instrument_with_http_info(onboard_instrument_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_instrument_with_http_info(self, onboard_instrument_request : OnboardInstrumentRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_instrument_with_http_info(onboard_instrument_request, async_req=True)
        >>> result = thread.get()

        :param onboard_instrument_request:  (required)
        :type onboard_instrument_request: OnboardInstrumentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OnboardInstrumentResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'onboard_instrument_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_instrument" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['onboard_instrument_request'] is not None:
            _body_params = _params['onboard_instrument_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "OnboardInstrumentResponse",
            '400': "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/instrument/onboarding/create', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def enrich_instrument(self, vendor_product_key : Annotated[StrictStr, Field(..., description="")], identifiers : Identifiers, **kwargs) -> EnrichmentResponse:  # noqa: E501
        ...

    @overload
    def enrich_instrument(self, vendor_product_key : Annotated[StrictStr, Field(..., description="")], identifiers : Identifiers, async_req: Optional[bool]=True, **kwargs) -> EnrichmentResponse:  # noqa: E501
        ...

    @validate_arguments
    def enrich_instrument(self, vendor_product_key : Annotated[StrictStr, Field(..., description="")], identifiers : Identifiers, async_req: Optional[bool]=None, **kwargs) -> Union[EnrichmentResponse, Awaitable[EnrichmentResponse]]:  # noqa: E501
        """[EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enrich_instrument(vendor_product_key, identifiers, async_req=True)
        >>> result = thread.get()

        :param vendor_product_key:  (required)
        :type vendor_product_key: str
        :param identifiers:  (required)
        :type identifiers: Identifiers
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EnrichmentResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the enrich_instrument_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.enrich_instrument_with_http_info(vendor_product_key, identifiers, **kwargs)  # noqa: E501

    @validate_arguments
    def enrich_instrument_with_http_info(self, vendor_product_key : Annotated[StrictStr, Field(..., description="")], identifiers : Identifiers, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.enrich_instrument_with_http_info(vendor_product_key, identifiers, async_req=True)
        >>> result = thread.get()

        :param vendor_product_key:  (required)
        :type vendor_product_key: str
        :param identifiers:  (required)
        :type identifiers: Identifiers
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EnrichmentResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'vendor_product_key',
            'identifiers'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrich_instrument" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('vendor_product_key') is not None:  # noqa: E501
            _query_params.append(('vendorProductKey', _params['vendor_product_key']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['identifiers'] is not None:
            _body_params = _params['identifiers']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "EnrichmentResponse",
            '400': "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/instrument/onboarding/enrich', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def get_open_figi_parameter_option(self, parameter_name : Annotated[str, Field(..., description="OpenFigi API Parameters that have a restricted / permitted range of values.")], **kwargs) -> List[AllowedParameterValue]:  # noqa: E501
        ...

    @overload
    def get_open_figi_parameter_option(self, parameter_name : Annotated[str, Field(..., description="OpenFigi API Parameters that have a restricted / permitted range of values.")], async_req: Optional[bool]=True, **kwargs) -> List[AllowedParameterValue]:  # noqa: E501
        ...

    @validate_arguments
    def get_open_figi_parameter_option(self, parameter_name : Annotated[str, Field(..., description="OpenFigi API Parameters that have a restricted / permitted range of values.")], async_req: Optional[bool]=None, **kwargs) -> Union[List[AllowedParameterValue], Awaitable[List[AllowedParameterValue]]]:  # noqa: E501
        """[EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_open_figi_parameter_option(parameter_name, async_req=True)
        >>> result = thread.get()

        :param parameter_name: OpenFigi API Parameters that have a restricted / permitted range of values. (required)
        :type parameter_name: OpenFigiParameterOptionName
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AllowedParameterValue]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_open_figi_parameter_option_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_open_figi_parameter_option_with_http_info(parameter_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_open_figi_parameter_option_with_http_info(self, parameter_name : Annotated[str, Field(..., description="OpenFigi API Parameters that have a restricted / permitted range of values.")], **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_open_figi_parameter_option_with_http_info(parameter_name, async_req=True)
        >>> result = thread.get()

        :param parameter_name: OpenFigi API Parameters that have a restricted / permitted range of values. (required)
        :type parameter_name: OpenFigiParameterOptionName
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AllowedParameterValue], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'parameter_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_open_figi_parameter_option" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('parameter_name') is not None:  # noqa: E501
            _query_params.append(('parameterName', _params['parameter_name']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "List[AllowedParameterValue]",
            '400': "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/instrument/onboarding/search/openfigi/parameterOptions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def retrieve_perm_id_result(self, id : Annotated[StrictStr, Field(..., description="The execution ID returned by a previous query")], **kwargs) -> List[PermIdData]:  # noqa: E501
        ...

    @overload
    def retrieve_perm_id_result(self, id : Annotated[StrictStr, Field(..., description="The execution ID returned by a previous query")], async_req: Optional[bool]=True, **kwargs) -> List[PermIdData]:  # noqa: E501
        ...

    @validate_arguments
    def retrieve_perm_id_result(self, id : Annotated[StrictStr, Field(..., description="The execution ID returned by a previous query")], async_req: Optional[bool]=None, **kwargs) -> Union[List[PermIdData], Awaitable[List[PermIdData]]]:  # noqa: E501
        """[EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_perm_id_result(id, async_req=True)
        >>> result = thread.get()

        :param id: The execution ID returned by a previous query (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[PermIdData]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the retrieve_perm_id_result_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.retrieve_perm_id_result_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def retrieve_perm_id_result_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The execution ID returned by a previous query")], **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_perm_id_result_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The execution ID returned by a previous query (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[PermIdData], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_perm_id_result" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "List[PermIdData]",
            '400': "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/instrument/onboarding/search/permid/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def search_open_figi(self, query : Annotated[StrictStr, Field(..., description="")], use_perm_id : Annotated[StrictBool, Field(..., description="Should also search PermId for additional information, defaults to `false`.")], limit : Annotated[Optional[StrictInt], Field(description="Only affects results rom OpenFigi general text search")] = None, market_sector : Annotated[Optional[StrictStr], Field( description="The market sector to search, defaults to `All`.")] = None, **kwargs) -> OpenFigiSearchResult:  # noqa: E501
        ...

    @overload
    def search_open_figi(self, query : Annotated[StrictStr, Field(..., description="")], use_perm_id : Annotated[StrictBool, Field(..., description="Should also search PermId for additional information, defaults to `false`.")], limit : Annotated[Optional[StrictInt], Field(description="Only affects results rom OpenFigi general text search")] = None, market_sector : Annotated[Optional[StrictStr], Field( description="The market sector to search, defaults to `All`.")] = None, async_req: Optional[bool]=True, **kwargs) -> OpenFigiSearchResult:  # noqa: E501
        ...

    @validate_arguments
    def search_open_figi(self, query : Annotated[StrictStr, Field(..., description="")], use_perm_id : Annotated[StrictBool, Field(..., description="Should also search PermId for additional information, defaults to `false`.")], limit : Annotated[Optional[StrictInt], Field(description="Only affects results rom OpenFigi general text search")] = None, market_sector : Annotated[Optional[StrictStr], Field( description="The market sector to search, defaults to `All`.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[OpenFigiSearchResult, Awaitable[OpenFigiSearchResult]]:  # noqa: E501
        """[EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_open_figi(query, use_perm_id, limit, market_sector, async_req=True)
        >>> result = thread.get()

        :param query:  (required)
        :type query: str
        :param use_perm_id: Should also search PermId for additional information, defaults to `false`. (required)
        :type use_perm_id: bool
        :param limit: Only affects results rom OpenFigi general text search
        :type limit: int
        :param market_sector: The market sector to search, defaults to `All`.
        :type market_sector: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OpenFigiSearchResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_open_figi_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.search_open_figi_with_http_info(query, use_perm_id, limit, market_sector, **kwargs)  # noqa: E501

    @validate_arguments
    def search_open_figi_with_http_info(self, query : Annotated[StrictStr, Field(..., description="")], use_perm_id : Annotated[StrictBool, Field(..., description="Should also search PermId for additional information, defaults to `false`.")], limit : Annotated[Optional[StrictInt], Field(description="Only affects results rom OpenFigi general text search")] = None, market_sector : Annotated[Optional[StrictStr], Field( description="The market sector to search, defaults to `All`.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_open_figi_with_http_info(query, use_perm_id, limit, market_sector, async_req=True)
        >>> result = thread.get()

        :param query:  (required)
        :type query: str
        :param use_perm_id: Should also search PermId for additional information, defaults to `false`. (required)
        :type use_perm_id: bool
        :param limit: Only affects results rom OpenFigi general text search
        :type limit: int
        :param market_sector: The market sector to search, defaults to `All`.
        :type market_sector: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OpenFigiSearchResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'use_perm_id',
            'limit',
            'market_sector'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_open_figi" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('use_perm_id') is not None:  # noqa: E501
            _query_params.append(('usePermId', _params['use_perm_id']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('market_sector') is not None:  # noqa: E501
            _query_params.append(('marketSector', _params['market_sector']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "OpenFigiSearchResult",
            '400': "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/instrument/onboarding/search/openfigi', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))


    @overload
    async def vendors(self, market_sector : Annotated[StrictStr, Field(..., description="")], security_type : Annotated[StrictStr, Field(..., description="")], general_security_type : Annotated[StrictStr, Field(..., description="")], **kwargs) -> List[VendorProduct]:  # noqa: E501
        ...

    @overload
    def vendors(self, market_sector : Annotated[StrictStr, Field(..., description="")], security_type : Annotated[StrictStr, Field(..., description="")], general_security_type : Annotated[StrictStr, Field(..., description="")], async_req: Optional[bool]=True, **kwargs) -> List[VendorProduct]:  # noqa: E501
        ...

    @validate_arguments
    def vendors(self, market_sector : Annotated[StrictStr, Field(..., description="")], security_type : Annotated[StrictStr, Field(..., description="")], general_security_type : Annotated[StrictStr, Field(..., description="")], async_req: Optional[bool]=None, **kwargs) -> Union[List[VendorProduct], Awaitable[List[VendorProduct]]]:  # noqa: E501
        """[EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vendors(market_sector, security_type, general_security_type, async_req=True)
        >>> result = thread.get()

        :param market_sector:  (required)
        :type market_sector: str
        :param security_type:  (required)
        :type security_type: str
        :param general_security_type:  (required)
        :type general_security_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[VendorProduct]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the vendors_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.vendors_with_http_info(market_sector, security_type, general_security_type, **kwargs)  # noqa: E501

    @validate_arguments
    def vendors_with_http_info(self, market_sector : Annotated[StrictStr, Field(..., description="")], security_type : Annotated[StrictStr, Field(..., description="")], general_security_type : Annotated[StrictStr, Field(..., description="")], **kwargs) -> ApiResponse:  # noqa: E501
        """[EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.vendors_with_http_info(market_sector, security_type, general_security_type, async_req=True)
        >>> result = thread.get()

        :param market_sector:  (required)
        :type market_sector: str
        :param security_type:  (required)
        :type security_type: str
        :param general_security_type:  (required)
        :type general_security_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: Timeout setting. Do not use - use the opts parameter instead
        :param opts: Configuration options for this request
        :type opts: ConfigurationOptions, optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[VendorProduct], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'market_sector',
            'security_type',
            'general_security_type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
                'opts'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendors" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('market_sector') is not None:  # noqa: E501
            _query_params.append(('marketSector', _params['market_sector']))

        if _params.get('security_type') is not None:  # noqa: E501
            _query_params.append(('securityType', _params['security_type']))

        if _params.get('general_security_type') is not None:  # noqa: E501
            _query_params.append(('generalSecurityType', _params['general_security_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['oauth2']  # noqa: E501

        _response_types_map = {
            '200': "List[VendorProduct]",
            '400': "LusidValidationProblemDetails",
        }

        return self.api_client.call_api(
            '/api/instrument/onboarding/vendors', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            opts=_params.get('opts'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

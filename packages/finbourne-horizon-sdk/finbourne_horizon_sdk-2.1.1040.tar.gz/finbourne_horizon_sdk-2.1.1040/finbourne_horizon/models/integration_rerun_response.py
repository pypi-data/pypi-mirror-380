# coding: utf-8

"""
    FINBOURNE Horizon API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic.v1 import StrictStr, Field, BaseModel, Field 
from finbourne_horizon.models.instance_execution_reference_id import InstanceExecutionReferenceId

class IntegrationRerunResponse(BaseModel):
    """
    IntegrationRerunResponse
    """
    run_id: InstanceExecutionReferenceId = Field(..., alias="runId")
    __properties = ["runId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntegrationRerunResponse:
        """Create an instance of IntegrationRerunResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of run_id
        if self.run_id:
            _dict['runId'] = self.run_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntegrationRerunResponse:
        """Create an instance of IntegrationRerunResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntegrationRerunResponse.parse_obj(obj)

        _obj = IntegrationRerunResponse.parse_obj({
            "run_id": InstanceExecutionReferenceId.from_dict(obj.get("runId")) if obj.get("runId") is not None else None
        })
        return _obj

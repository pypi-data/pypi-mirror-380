# coding: utf-8

"""
    FINBOURNE Horizon API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr 
from finbourne_horizon.models.lusid_property_definition import LusidPropertyDefinition
from finbourne_horizon.models.optionality import Optionality

class LusidPropertyToVendorFieldMapping(BaseModel):
    """
    The mapping of a LUSID Property from the Vendor Field that would populate it  # noqa: E501
    """
    var_property: LusidPropertyDefinition = Field(..., alias="property")
    vendor_field:  StrictStr = Field(...,alias="vendorField") 
    vendor_package:  StrictStr = Field(...,alias="vendorPackage") 
    vendor_namespace:  StrictStr = Field(...,alias="vendorNamespace") 
    optionality: Optionality = Field(...)
    __properties = ["property", "vendorField", "vendorPackage", "vendorNamespace", "optionality"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LusidPropertyToVendorFieldMapping:
        """Create an instance of LusidPropertyToVendorFieldMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_property
        if self.var_property:
            _dict['property'] = self.var_property.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LusidPropertyToVendorFieldMapping:
        """Create an instance of LusidPropertyToVendorFieldMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LusidPropertyToVendorFieldMapping.parse_obj(obj)

        _obj = LusidPropertyToVendorFieldMapping.parse_obj({
            "var_property": LusidPropertyDefinition.from_dict(obj.get("property")) if obj.get("property") is not None else None,
            "vendor_field": obj.get("vendorField"),
            "vendor_package": obj.get("vendorPackage"),
            "vendor_namespace": obj.get("vendorNamespace"),
            "optionality": obj.get("optionality")
        })
        return _obj

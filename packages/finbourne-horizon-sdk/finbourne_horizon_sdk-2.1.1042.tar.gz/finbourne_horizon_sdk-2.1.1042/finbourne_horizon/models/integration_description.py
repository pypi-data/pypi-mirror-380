# coding: utf-8

"""
    FINBOURNE Horizon API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictBool, StrictStr, conlist 

class IntegrationDescription(BaseModel):
    """
    Response containing the description of an integration.  # noqa: E501
    """
    type:  StrictStr = Field(...,alias="type", description="Unique identifier of the integration e.g. \"copp-clark\".") 
    name:  StrictStr = Field(...,alias="name", description="Readable name of the integration e.g. \"Copp Clark\".") 
    description:  StrictStr = Field(...,alias="description", description="Describes the purpose of the integration.") 
    supported_trigger_types: conlist(StrictStr) = Field(..., alias="supportedTriggerTypes", description="Trigger types (Time, File) the integration supports.")
    licensed: StrictBool = Field(..., description="True if your domain is licensed to use this integration, otherwise false.")
    __properties = ["type", "name", "description", "supportedTriggerTypes", "licensed"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IntegrationDescription:
        """Create an instance of IntegrationDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IntegrationDescription:
        """Create an instance of IntegrationDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IntegrationDescription.parse_obj(obj)

        _obj = IntegrationDescription.parse_obj({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "supported_trigger_types": obj.get("supportedTriggerTypes"),
            "licensed": obj.get("licensed")
        })
        return _obj

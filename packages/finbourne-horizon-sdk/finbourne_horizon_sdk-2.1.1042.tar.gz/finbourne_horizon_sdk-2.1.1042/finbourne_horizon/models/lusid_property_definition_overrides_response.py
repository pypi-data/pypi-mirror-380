# coding: utf-8

"""
    FINBOURNE Horizon API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, constr 

class LusidPropertyDefinitionOverridesResponse(BaseModel):
    """
    An item that has been updated as a result of setting LusidPropertyDefinitionOverrides.  # noqa: E501
    """
    action:  StrictStr = Field(...,alias="action", description="The action performed on this property. \"upsert\" for setting values for new and existing              properties. \"delete\" for existing properties that were removed") 
    write_error:  Optional[StrictStr] = Field(None,alias="writeError", description="") 
    write_error_detail:  Optional[StrictStr] = Field(None,alias="writeErrorDetail", description="") 
    display_name_override:  Optional[StrictStr] = Field(None,alias="displayNameOverride", description="") 
    description_override:  Optional[StrictStr] = Field(None,alias="descriptionOverride", description="") 
    __properties = ["action", "writeError", "writeErrorDetail", "displayNameOverride", "descriptionOverride"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LusidPropertyDefinitionOverridesResponse:
        """Create an instance of LusidPropertyDefinitionOverridesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if write_error (nullable) is None
        # and __fields_set__ contains the field
        if self.write_error is None and "write_error" in self.__fields_set__:
            _dict['writeError'] = None

        # set to None if write_error_detail (nullable) is None
        # and __fields_set__ contains the field
        if self.write_error_detail is None and "write_error_detail" in self.__fields_set__:
            _dict['writeErrorDetail'] = None

        # set to None if display_name_override (nullable) is None
        # and __fields_set__ contains the field
        if self.display_name_override is None and "display_name_override" in self.__fields_set__:
            _dict['displayNameOverride'] = None

        # set to None if description_override (nullable) is None
        # and __fields_set__ contains the field
        if self.description_override is None and "description_override" in self.__fields_set__:
            _dict['descriptionOverride'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LusidPropertyDefinitionOverridesResponse:
        """Create an instance of LusidPropertyDefinitionOverridesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LusidPropertyDefinitionOverridesResponse.parse_obj(obj)

        _obj = LusidPropertyDefinitionOverridesResponse.parse_obj({
            "action": obj.get("action"),
            "write_error": obj.get("writeError"),
            "write_error_detail": obj.get("writeErrorDetail"),
            "display_name_override": obj.get("displayNameOverride"),
            "description_override": obj.get("descriptionOverride")
        })
        return _obj

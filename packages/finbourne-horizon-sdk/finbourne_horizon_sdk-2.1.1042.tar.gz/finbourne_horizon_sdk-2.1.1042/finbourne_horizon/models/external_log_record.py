# coding: utf-8

"""
    FINBOURNE Horizon API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictInt, constr 

class ExternalLogRecord(BaseModel):
    """
    ExternalLogRecord
    """
    logid: StrictInt = Field(...)
    parentlogid: Optional[StrictInt] = None
    loglevel:  StrictStr = Field(...,alias="loglevel") 
    logstatus:  StrictStr = Field(...,alias="logstatus") 
    sourcerecordtype:  Optional[StrictStr] = Field(None,alias="sourcerecordtype") 
    sourceprimaryidtype:  Optional[StrictStr] = Field(None,alias="sourceprimaryidtype") 
    sourceprimaryidvalue:  Optional[StrictStr] = Field(None,alias="sourceprimaryidvalue") 
    targetrecordtype:  Optional[StrictStr] = Field(None,alias="targetrecordtype") 
    targetrecordaction:  Optional[StrictStr] = Field(None,alias="targetrecordaction") 
    targetprimaryidtype:  Optional[StrictStr] = Field(None,alias="targetprimaryidtype") 
    targetprimaryidvalue:  Optional[StrictStr] = Field(None,alias="targetprimaryidvalue") 
    message:  Optional[StrictStr] = Field(None,alias="message") 
    messagetype:  Optional[StrictStr] = Field(None,alias="messagetype") 
    timestamp:  StrictStr = Field(...,alias="timestamp") 
    __properties = ["logid", "parentlogid", "loglevel", "logstatus", "sourcerecordtype", "sourceprimaryidtype", "sourceprimaryidvalue", "targetrecordtype", "targetrecordaction", "targetprimaryidtype", "targetprimaryidvalue", "message", "messagetype", "timestamp"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalLogRecord:
        """Create an instance of ExternalLogRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if parentlogid (nullable) is None
        # and __fields_set__ contains the field
        if self.parentlogid is None and "parentlogid" in self.__fields_set__:
            _dict['parentlogid'] = None

        # set to None if sourcerecordtype (nullable) is None
        # and __fields_set__ contains the field
        if self.sourcerecordtype is None and "sourcerecordtype" in self.__fields_set__:
            _dict['sourcerecordtype'] = None

        # set to None if sourceprimaryidtype (nullable) is None
        # and __fields_set__ contains the field
        if self.sourceprimaryidtype is None and "sourceprimaryidtype" in self.__fields_set__:
            _dict['sourceprimaryidtype'] = None

        # set to None if sourceprimaryidvalue (nullable) is None
        # and __fields_set__ contains the field
        if self.sourceprimaryidvalue is None and "sourceprimaryidvalue" in self.__fields_set__:
            _dict['sourceprimaryidvalue'] = None

        # set to None if targetrecordtype (nullable) is None
        # and __fields_set__ contains the field
        if self.targetrecordtype is None and "targetrecordtype" in self.__fields_set__:
            _dict['targetrecordtype'] = None

        # set to None if targetrecordaction (nullable) is None
        # and __fields_set__ contains the field
        if self.targetrecordaction is None and "targetrecordaction" in self.__fields_set__:
            _dict['targetrecordaction'] = None

        # set to None if targetprimaryidtype (nullable) is None
        # and __fields_set__ contains the field
        if self.targetprimaryidtype is None and "targetprimaryidtype" in self.__fields_set__:
            _dict['targetprimaryidtype'] = None

        # set to None if targetprimaryidvalue (nullable) is None
        # and __fields_set__ contains the field
        if self.targetprimaryidvalue is None and "targetprimaryidvalue" in self.__fields_set__:
            _dict['targetprimaryidvalue'] = None

        # set to None if message (nullable) is None
        # and __fields_set__ contains the field
        if self.message is None and "message" in self.__fields_set__:
            _dict['message'] = None

        # set to None if messagetype (nullable) is None
        # and __fields_set__ contains the field
        if self.messagetype is None and "messagetype" in self.__fields_set__:
            _dict['messagetype'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalLogRecord:
        """Create an instance of ExternalLogRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalLogRecord.parse_obj(obj)

        _obj = ExternalLogRecord.parse_obj({
            "logid": obj.get("logid"),
            "parentlogid": obj.get("parentlogid"),
            "loglevel": obj.get("loglevel"),
            "logstatus": obj.get("logstatus"),
            "sourcerecordtype": obj.get("sourcerecordtype"),
            "sourceprimaryidtype": obj.get("sourceprimaryidtype"),
            "sourceprimaryidvalue": obj.get("sourceprimaryidvalue"),
            "targetrecordtype": obj.get("targetrecordtype"),
            "targetrecordaction": obj.get("targetrecordaction"),
            "targetprimaryidtype": obj.get("targetprimaryidtype"),
            "targetprimaryidvalue": obj.get("targetprimaryidvalue"),
            "message": obj.get("message"),
            "messagetype": obj.get("messagetype"),
            "timestamp": obj.get("timestamp")
        })
        return _obj

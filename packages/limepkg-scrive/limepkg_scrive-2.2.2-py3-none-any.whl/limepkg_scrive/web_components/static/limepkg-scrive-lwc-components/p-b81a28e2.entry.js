import{r as e}from"./p-02a3464d.js";import{C as t,O as i,P as s,a as o,S as c}from"./p-ad7895b4.js";let n=class{};n=function(e,t,i,s){var o,c=arguments.length,n=c<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,i,s);else for(var r=e.length-1;r>=0;r--)(o=e[r])&&(n=(c<3?o(n):c>3?o(t,i,n):o(t,i))||n);return c>3&&n&&Object.defineProperty(t,i,n),n}([t({id:"limepkg_scrive.esign"})],n);class r{constructor(e,t,i,s){this.notifications=e,this.query=t,this.config=i,this.language=s,this.config=i}async handle(e){const t=e.filter.exp,i=await this.fetchScriveDocumentIds(t);if("document"!==e.context.limetype||!e.filter||"IN"!==e.filter.op||"_id"!==e.filter.key)return void this.notifications.notify("The EsignCommand can only be run on document limetypes with a filter expression that includes _id.");const{scriveHost:s,includePerson:o,includeCoworker:c,cloneDocument:n,target:r}=this.config,a=[`limeDocId=${t.join(",")}`,`lang=${this.language}`,`usePerson=${o}`,`useCoworker=${c}`,`cloneDocument=${n}`,`scriveDocId=${i.join(",")}`,`parentType=${e.context.parent.limetype}`,`parentId=${e.context.parent.id}`];window.open(`${s}/public/?${a.join("&")}`,r)}async fetchScriveDocumentIds(e){return(await Promise.all(e.map((e=>this.query.execute({limetype:"document",filter:{op:i.EQUALS,key:"_id",exp:e},responseFormat:{object:{_id:"",scrive_document_id:"",scrive_document_status:""}}}))))).map((e=>e.objects)).map((e=>e[0].scrive_document_id||""))}}var a=function(e,t,i,s){var o,c=arguments.length,n=c<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,i,s);else for(var r=e.length-1;r>=0;r--)(o=e[r])&&(n=(c<3?o(n):c>3?o(t,i,n):o(t,i))||n);return c>3&&n&&Object.defineProperty(t,i,n),n};const l=class{constructor(t){e(this,t)}connectedCallback(){}componentWillLoad(){const e=new r(this.notificationService,this.queryService,this.config.limepkg_scrive,this.session.language);this.commandBus.register(n,e)}componentWillUpdate(){}disconnectedCallback(){}get notificationService(){return this.platform.get(s.Notification)}get queryService(){return this.platform.get(s.Query)}get commandBus(){return this.platform.get(s.CommandBus)}};a([o({})],l.prototype,"config",void 0),a([c()],l.prototype,"session",void 0);export{l as lwc_limepkg_scrive_loader}
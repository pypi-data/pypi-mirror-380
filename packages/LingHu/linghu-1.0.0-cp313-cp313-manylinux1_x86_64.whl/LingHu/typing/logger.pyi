"""
日志模块类型提示
"""

import logging
from typing import Optional, Union, Dict, Any, TypeVar
from threading import Lock

class LoggerManager:
    """日志管理器 - 单例模式，管理全局日志配置"""
    
    _instance: Optional['LoggerManager']
    _lock: Lock
    
    def __new__(cls) -> 'LoggerManager': ...
    def __init__(self) -> None: ...
    def configure(self, **kwargs) -> None: ...
    def get_logger(self) -> logging.Logger: ...
    def get_config(self) -> Dict[str, Any]: ...
    def get_log_file_path(self) -> Optional[str]: ...

class Logger:
    """公开的日志类 - 提供用户友好的接口"""
    
    def __init__(
        self,
        log_dir: Optional[str] = ...,
        log_filename: Optional[str] = ...,
        log_level: Union[int, str] = ...,
        max_file_size: int = ...,
        backup_count: int = ...,
        console_output: bool = ...,
        file_output: bool = ...
    ) -> None: ...
    def debug(self, msg: str, *args, **kwargs) -> None: ...
    def info(self, msg: str, *args, **kwargs) -> None: ...
    def warning(self, msg: str, *args, **kwargs) -> None: ...
    def error(self, msg: str, *args, **kwargs) -> None: ...
    def critical(self, msg: str, *args, **kwargs) -> None: ...
    def exception(self, msg: str, *args, **kwargs) -> None: ...
# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulpcore.configuration import Configuration


class UserRoleResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pulp_href': 'str',
        'prn': 'str',
        'pulp_created': 'datetime',
        'pulp_last_updated': 'datetime',
        'role': 'str',
        'content_object': 'str',
        'description': 'str',
        'permissions': 'list[str]',
        'domain': 'str'
    }

    attribute_map = {
        'pulp_href': 'pulp_href',
        'prn': 'prn',
        'pulp_created': 'pulp_created',
        'pulp_last_updated': 'pulp_last_updated',
        'role': 'role',
        'content_object': 'content_object',
        'description': 'description',
        'permissions': 'permissions',
        'domain': 'domain'
    }

    def __init__(self, pulp_href=None, prn=None, pulp_created=None, pulp_last_updated=None, role=None, content_object=None, description=None, permissions=None, domain=None, local_vars_configuration=None):  # noqa: E501
        """UserRoleResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pulp_href = None
        self._prn = None
        self._pulp_created = None
        self._pulp_last_updated = None
        self._role = None
        self._content_object = None
        self._description = None
        self._permissions = None
        self._domain = None
        self.discriminator = None

        if pulp_href is not None:
            self.pulp_href = pulp_href
        if prn is not None:
            self.prn = prn
        if pulp_created is not None:
            self.pulp_created = pulp_created
        if pulp_last_updated is not None:
            self.pulp_last_updated = pulp_last_updated
        self.role = role
        self.content_object = content_object
        if description is not None:
            self.description = description
        if permissions is not None:
            self.permissions = permissions
        self.domain = domain

    @property
    def pulp_href(self):
        """Gets the pulp_href of this UserRoleResponse.  # noqa: E501


        :return: The pulp_href of this UserRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._pulp_href

    @pulp_href.setter
    def pulp_href(self, pulp_href):
        """Sets the pulp_href of this UserRoleResponse.


        :param pulp_href: The pulp_href of this UserRoleResponse.  # noqa: E501
        :type: str
        """

        self._pulp_href = pulp_href

    @property
    def prn(self):
        """Gets the prn of this UserRoleResponse.  # noqa: E501

        The Pulp Resource Name (PRN).  # noqa: E501

        :return: The prn of this UserRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._prn

    @prn.setter
    def prn(self, prn):
        """Sets the prn of this UserRoleResponse.

        The Pulp Resource Name (PRN).  # noqa: E501

        :param prn: The prn of this UserRoleResponse.  # noqa: E501
        :type: str
        """

        self._prn = prn

    @property
    def pulp_created(self):
        """Gets the pulp_created of this UserRoleResponse.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The pulp_created of this UserRoleResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_created

    @pulp_created.setter
    def pulp_created(self, pulp_created):
        """Sets the pulp_created of this UserRoleResponse.

        Timestamp of creation.  # noqa: E501

        :param pulp_created: The pulp_created of this UserRoleResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_created = pulp_created

    @property
    def pulp_last_updated(self):
        """Gets the pulp_last_updated of this UserRoleResponse.  # noqa: E501

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :return: The pulp_last_updated of this UserRoleResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_last_updated

    @pulp_last_updated.setter
    def pulp_last_updated(self, pulp_last_updated):
        """Sets the pulp_last_updated of this UserRoleResponse.

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :param pulp_last_updated: The pulp_last_updated of this UserRoleResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_last_updated = pulp_last_updated

    @property
    def role(self):
        """Gets the role of this UserRoleResponse.  # noqa: E501


        :return: The role of this UserRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserRoleResponse.


        :param role: The role of this UserRoleResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and role is None:  # noqa: E501
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def content_object(self):
        """Gets the content_object of this UserRoleResponse.  # noqa: E501

        pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on either domain or model-level.  # noqa: E501

        :return: The content_object of this UserRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._content_object

    @content_object.setter
    def content_object(self, content_object):
        """Sets the content_object of this UserRoleResponse.

        pulp_href of the object for which role permissions should be asserted. If set to 'null', permissions will act on either domain or model-level.  # noqa: E501

        :param content_object: The content_object of this UserRoleResponse.  # noqa: E501
        :type: str
        """

        self._content_object = content_object

    @property
    def description(self):
        """Gets the description of this UserRoleResponse.  # noqa: E501


        :return: The description of this UserRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserRoleResponse.


        :param description: The description of this UserRoleResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def permissions(self):
        """Gets the permissions of this UserRoleResponse.  # noqa: E501


        :return: The permissions of this UserRoleResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserRoleResponse.


        :param permissions: The permissions of this UserRoleResponse.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def domain(self):
        """Gets the domain of this UserRoleResponse.  # noqa: E501

        Domain this role should be applied on, mutually exclusive with content_object.  # noqa: E501

        :return: The domain of this UserRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this UserRoleResponse.

        Domain this role should be applied on, mutually exclusive with content_object.  # noqa: E501

        :param domain: The domain of this UserRoleResponse.  # noqa: E501
        :type: str
        """

        self._domain = domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRoleResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserRoleResponse):
            return True

        return self.to_dict() != other.to_dict()

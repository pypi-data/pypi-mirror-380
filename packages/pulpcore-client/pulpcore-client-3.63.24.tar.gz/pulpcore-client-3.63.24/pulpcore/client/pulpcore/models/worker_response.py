# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulpcore.configuration import Configuration


class WorkerResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pulp_href': 'str',
        'prn': 'str',
        'pulp_created': 'datetime',
        'pulp_last_updated': 'datetime',
        'name': 'str',
        'last_heartbeat': 'datetime',
        'versions': 'dict(str, str)',
        'current_task': 'str'
    }

    attribute_map = {
        'pulp_href': 'pulp_href',
        'prn': 'prn',
        'pulp_created': 'pulp_created',
        'pulp_last_updated': 'pulp_last_updated',
        'name': 'name',
        'last_heartbeat': 'last_heartbeat',
        'versions': 'versions',
        'current_task': 'current_task'
    }

    def __init__(self, pulp_href=None, prn=None, pulp_created=None, pulp_last_updated=None, name=None, last_heartbeat=None, versions=None, current_task=None, local_vars_configuration=None):  # noqa: E501
        """WorkerResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pulp_href = None
        self._prn = None
        self._pulp_created = None
        self._pulp_last_updated = None
        self._name = None
        self._last_heartbeat = None
        self._versions = None
        self._current_task = None
        self.discriminator = None

        if pulp_href is not None:
            self.pulp_href = pulp_href
        if prn is not None:
            self.prn = prn
        if pulp_created is not None:
            self.pulp_created = pulp_created
        if pulp_last_updated is not None:
            self.pulp_last_updated = pulp_last_updated
        if name is not None:
            self.name = name
        if last_heartbeat is not None:
            self.last_heartbeat = last_heartbeat
        if versions is not None:
            self.versions = versions
        if current_task is not None:
            self.current_task = current_task

    @property
    def pulp_href(self):
        """Gets the pulp_href of this WorkerResponse.  # noqa: E501


        :return: The pulp_href of this WorkerResponse.  # noqa: E501
        :rtype: str
        """
        return self._pulp_href

    @pulp_href.setter
    def pulp_href(self, pulp_href):
        """Sets the pulp_href of this WorkerResponse.


        :param pulp_href: The pulp_href of this WorkerResponse.  # noqa: E501
        :type: str
        """

        self._pulp_href = pulp_href

    @property
    def prn(self):
        """Gets the prn of this WorkerResponse.  # noqa: E501

        The Pulp Resource Name (PRN).  # noqa: E501

        :return: The prn of this WorkerResponse.  # noqa: E501
        :rtype: str
        """
        return self._prn

    @prn.setter
    def prn(self, prn):
        """Sets the prn of this WorkerResponse.

        The Pulp Resource Name (PRN).  # noqa: E501

        :param prn: The prn of this WorkerResponse.  # noqa: E501
        :type: str
        """

        self._prn = prn

    @property
    def pulp_created(self):
        """Gets the pulp_created of this WorkerResponse.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The pulp_created of this WorkerResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_created

    @pulp_created.setter
    def pulp_created(self, pulp_created):
        """Sets the pulp_created of this WorkerResponse.

        Timestamp of creation.  # noqa: E501

        :param pulp_created: The pulp_created of this WorkerResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_created = pulp_created

    @property
    def pulp_last_updated(self):
        """Gets the pulp_last_updated of this WorkerResponse.  # noqa: E501

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :return: The pulp_last_updated of this WorkerResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_last_updated

    @pulp_last_updated.setter
    def pulp_last_updated(self, pulp_last_updated):
        """Sets the pulp_last_updated of this WorkerResponse.

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :param pulp_last_updated: The pulp_last_updated of this WorkerResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_last_updated = pulp_last_updated

    @property
    def name(self):
        """Gets the name of this WorkerResponse.  # noqa: E501

        The name of the worker.  # noqa: E501

        :return: The name of this WorkerResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkerResponse.

        The name of the worker.  # noqa: E501

        :param name: The name of this WorkerResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def last_heartbeat(self):
        """Gets the last_heartbeat of this WorkerResponse.  # noqa: E501

        Timestamp of the last time the worker talked to the service.  # noqa: E501

        :return: The last_heartbeat of this WorkerResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_heartbeat

    @last_heartbeat.setter
    def last_heartbeat(self, last_heartbeat):
        """Sets the last_heartbeat of this WorkerResponse.

        Timestamp of the last time the worker talked to the service.  # noqa: E501

        :param last_heartbeat: The last_heartbeat of this WorkerResponse.  # noqa: E501
        :type: datetime
        """

        self._last_heartbeat = last_heartbeat

    @property
    def versions(self):
        """Gets the versions of this WorkerResponse.  # noqa: E501

        Versions of the components installed.  # noqa: E501

        :return: The versions of this WorkerResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this WorkerResponse.

        Versions of the components installed.  # noqa: E501

        :param versions: The versions of this WorkerResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._versions = versions

    @property
    def current_task(self):
        """Gets the current_task of this WorkerResponse.  # noqa: E501

        The task this worker is currently executing, or empty if the worker is not currently assigned to a task.  # noqa: E501

        :return: The current_task of this WorkerResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_task

    @current_task.setter
    def current_task(self, current_task):
        """Sets the current_task of this WorkerResponse.

        The task this worker is currently executing, or empty if the worker is not currently assigned to a task.  # noqa: E501

        :param current_task: The current_task of this WorkerResponse.  # noqa: E501
        :type: str
        """

        self._current_task = current_task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkerResponse):
            return True

        return self.to_dict() != other.to_dict()

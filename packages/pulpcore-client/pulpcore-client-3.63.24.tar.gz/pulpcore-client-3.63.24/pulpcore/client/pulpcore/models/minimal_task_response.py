# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulpcore.configuration import Configuration


class MinimalTaskResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pulp_href': 'str',
        'prn': 'str',
        'pulp_created': 'datetime',
        'pulp_last_updated': 'datetime',
        'name': 'str',
        'state': 'str',
        'unblocked_at': 'datetime',
        'started_at': 'datetime',
        'finished_at': 'datetime',
        'worker': 'str'
    }

    attribute_map = {
        'pulp_href': 'pulp_href',
        'prn': 'prn',
        'pulp_created': 'pulp_created',
        'pulp_last_updated': 'pulp_last_updated',
        'name': 'name',
        'state': 'state',
        'unblocked_at': 'unblocked_at',
        'started_at': 'started_at',
        'finished_at': 'finished_at',
        'worker': 'worker'
    }

    def __init__(self, pulp_href=None, prn=None, pulp_created=None, pulp_last_updated=None, name=None, state=None, unblocked_at=None, started_at=None, finished_at=None, worker=None, local_vars_configuration=None):  # noqa: E501
        """MinimalTaskResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pulp_href = None
        self._prn = None
        self._pulp_created = None
        self._pulp_last_updated = None
        self._name = None
        self._state = None
        self._unblocked_at = None
        self._started_at = None
        self._finished_at = None
        self._worker = None
        self.discriminator = None

        if pulp_href is not None:
            self.pulp_href = pulp_href
        if prn is not None:
            self.prn = prn
        if pulp_created is not None:
            self.pulp_created = pulp_created
        if pulp_last_updated is not None:
            self.pulp_last_updated = pulp_last_updated
        self.name = name
        if state is not None:
            self.state = state
        if unblocked_at is not None:
            self.unblocked_at = unblocked_at
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if worker is not None:
            self.worker = worker

    @property
    def pulp_href(self):
        """Gets the pulp_href of this MinimalTaskResponse.  # noqa: E501


        :return: The pulp_href of this MinimalTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._pulp_href

    @pulp_href.setter
    def pulp_href(self, pulp_href):
        """Sets the pulp_href of this MinimalTaskResponse.


        :param pulp_href: The pulp_href of this MinimalTaskResponse.  # noqa: E501
        :type: str
        """

        self._pulp_href = pulp_href

    @property
    def prn(self):
        """Gets the prn of this MinimalTaskResponse.  # noqa: E501

        The Pulp Resource Name (PRN).  # noqa: E501

        :return: The prn of this MinimalTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._prn

    @prn.setter
    def prn(self, prn):
        """Sets the prn of this MinimalTaskResponse.

        The Pulp Resource Name (PRN).  # noqa: E501

        :param prn: The prn of this MinimalTaskResponse.  # noqa: E501
        :type: str
        """

        self._prn = prn

    @property
    def pulp_created(self):
        """Gets the pulp_created of this MinimalTaskResponse.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The pulp_created of this MinimalTaskResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_created

    @pulp_created.setter
    def pulp_created(self, pulp_created):
        """Sets the pulp_created of this MinimalTaskResponse.

        Timestamp of creation.  # noqa: E501

        :param pulp_created: The pulp_created of this MinimalTaskResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_created = pulp_created

    @property
    def pulp_last_updated(self):
        """Gets the pulp_last_updated of this MinimalTaskResponse.  # noqa: E501

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :return: The pulp_last_updated of this MinimalTaskResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._pulp_last_updated

    @pulp_last_updated.setter
    def pulp_last_updated(self, pulp_last_updated):
        """Sets the pulp_last_updated of this MinimalTaskResponse.

        Timestamp of the last time this resource was updated. Note: for immutable resources - like content, repository versions, and publication - pulp_created and pulp_last_updated dates will be the same.  # noqa: E501

        :param pulp_last_updated: The pulp_last_updated of this MinimalTaskResponse.  # noqa: E501
        :type: datetime
        """

        self._pulp_last_updated = pulp_last_updated

    @property
    def name(self):
        """Gets the name of this MinimalTaskResponse.  # noqa: E501

        The name of task.  # noqa: E501

        :return: The name of this MinimalTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MinimalTaskResponse.

        The name of task.  # noqa: E501

        :param name: The name of this MinimalTaskResponse.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def state(self):
        """Gets the state of this MinimalTaskResponse.  # noqa: E501

        The current state of the task. The possible values include: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'.  # noqa: E501

        :return: The state of this MinimalTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MinimalTaskResponse.

        The current state of the task. The possible values include: 'waiting', 'skipped', 'running', 'completed', 'failed', 'canceled' and 'canceling'.  # noqa: E501

        :param state: The state of this MinimalTaskResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def unblocked_at(self):
        """Gets the unblocked_at of this MinimalTaskResponse.  # noqa: E501

        Timestamp of when this task was identified ready for pickup.  # noqa: E501

        :return: The unblocked_at of this MinimalTaskResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._unblocked_at

    @unblocked_at.setter
    def unblocked_at(self, unblocked_at):
        """Sets the unblocked_at of this MinimalTaskResponse.

        Timestamp of when this task was identified ready for pickup.  # noqa: E501

        :param unblocked_at: The unblocked_at of this MinimalTaskResponse.  # noqa: E501
        :type: datetime
        """

        self._unblocked_at = unblocked_at

    @property
    def started_at(self):
        """Gets the started_at of this MinimalTaskResponse.  # noqa: E501

        Timestamp of when this task started execution.  # noqa: E501

        :return: The started_at of this MinimalTaskResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this MinimalTaskResponse.

        Timestamp of when this task started execution.  # noqa: E501

        :param started_at: The started_at of this MinimalTaskResponse.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this MinimalTaskResponse.  # noqa: E501

        Timestamp of when this task stopped execution.  # noqa: E501

        :return: The finished_at of this MinimalTaskResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this MinimalTaskResponse.

        Timestamp of when this task stopped execution.  # noqa: E501

        :param finished_at: The finished_at of this MinimalTaskResponse.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def worker(self):
        """Gets the worker of this MinimalTaskResponse.  # noqa: E501

        The worker associated with this task. This field is empty if a worker is not yet assigned.  # noqa: E501

        :return: The worker of this MinimalTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this MinimalTaskResponse.

        The worker associated with this task. This field is empty if a worker is not yet assigned.  # noqa: E501

        :param worker: The worker of this MinimalTaskResponse.  # noqa: E501
        :type: str
        """

        self._worker = worker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MinimalTaskResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MinimalTaskResponse):
            return True

        return self.to_dict() != other.to_dict()

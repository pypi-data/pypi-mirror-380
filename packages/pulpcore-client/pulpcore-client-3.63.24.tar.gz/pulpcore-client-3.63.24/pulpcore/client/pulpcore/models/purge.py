# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulpcore.configuration import Configuration


class Purge(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'finished_before': 'datetime',
        'states': 'list[StatesEnum]'
    }

    attribute_map = {
        'finished_before': 'finished_before',
        'states': 'states'
    }

    def __init__(self, finished_before=None, states=["completed"], local_vars_configuration=None):  # noqa: E501
        """Purge - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._finished_before = None
        self._states = None
        self.discriminator = None

        if finished_before is not None:
            self.finished_before = finished_before
        if states is not None:
            self.states = states

    @property
    def finished_before(self):
        """Gets the finished_before of this Purge.  # noqa: E501

        Purge tasks completed earlier than this timestamp. Format '%Y-%m-%d[T%H:%M:%S]'  # noqa: E501

        :return: The finished_before of this Purge.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_before

    @finished_before.setter
    def finished_before(self, finished_before):
        """Sets the finished_before of this Purge.

        Purge tasks completed earlier than this timestamp. Format '%Y-%m-%d[T%H:%M:%S]'  # noqa: E501

        :param finished_before: The finished_before of this Purge.  # noqa: E501
        :type: datetime
        """

        self._finished_before = finished_before

    @property
    def states(self):
        """Gets the states of this Purge.  # noqa: E501

        List of task-states to be purged. Only 'final' states are allowed.  # noqa: E501

        :return: The states of this Purge.  # noqa: E501
        :rtype: list[StatesEnum]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this Purge.

        List of task-states to be purged. Only 'final' states are allowed.  # noqa: E501

        :param states: The states of this Purge.  # noqa: E501
        :type: list[StatesEnum]
        """

        self._states = states

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Purge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Purge):
            return True

        return self.to_dict() != other.to_dict()

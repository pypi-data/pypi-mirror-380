# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pulpcore.client.pulpcore.api_client import ApiClient
from pulpcore.client.pulpcore.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class UpstreamPulpsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_role(self, upstream_pulp_href, nested_role,  **kwargs):  # noqa: E501
        """Add a role  # noqa: E501

        Add a role for this object to users/groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role(upstream_pulp_href, nested_role, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param NestedRole nested_role: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: NestedRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_role_with_http_info(upstream_pulp_href, nested_role,  **kwargs)  # noqa: E501

    def add_role_with_http_info(self, upstream_pulp_href, nested_role,  **kwargs):  # noqa: E501
        """Add a role  # noqa: E501

        Add a role for this object to users/groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_with_http_info(upstream_pulp_href, nested_role, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param NestedRole nested_role: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(NestedRoleResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp_href',
            'nested_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp_href' is set
        if self.api_client.client_side_validation and ('upstream_pulp_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp_href` when calling `add_role`")  # noqa: E501
        # verify the required parameter 'nested_role' is set
        if self.api_client.client_side_validation and ('nested_role' not in local_var_params or  # noqa: E501
                                                        local_var_params['nested_role'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `nested_role` when calling `add_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upstream_pulp_href' in local_var_params:
            path_params['upstream_pulp_href'] = local_var_params['upstream_pulp_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nested_role' in local_var_params:
            body_params = local_var_params['nested_role']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{upstream_pulp_href}add_role/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NestedRoleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create(self, upstream_pulp,  **kwargs):  # noqa: E501
        """Create an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(upstream_pulp, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpstreamPulp upstream_pulp: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpstreamPulpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_with_http_info(upstream_pulp,  **kwargs)  # noqa: E501

    def create_with_http_info(self, upstream_pulp,  **kwargs):  # noqa: E501
        """Create an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(upstream_pulp, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpstreamPulp upstream_pulp: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpstreamPulpResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp' is set
        if self.api_client.client_side_validation and ('upstream_pulp' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upstream_pulp' in local_var_params:
            body_params = local_var_params['upstream_pulp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pulp/api/v3/upstream-pulps/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpstreamPulpResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """Delete an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_with_http_info(upstream_pulp_href,  **kwargs)  # noqa: E501

    def delete_with_http_info(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """Delete an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp_href'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp_href' is set
        if self.api_client.client_side_validation and ('upstream_pulp_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp_href` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upstream_pulp_href' in local_var_params:
            path_params['upstream_pulp_href'] = local_var_params['upstream_pulp_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{upstream_pulp_href}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list(self,  **kwargs):  # noqa: E501
        """List upstream pulps  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str base_url: Filter results where base_url matches value
        :param str base_url__contains: Filter results where base_url contains value
        :param str base_url__icontains: Filter results where base_url contains value
        :param str base_url__iexact: Filter results where base_url matches value
        :param list[str] base_url__in: Filter results where base_url is in a comma-separated list of values
        :param str base_url__iregex: Filter results where base_url matches regex value
        :param str base_url__istartswith: Filter results where base_url starts with value
        :param str base_url__regex: Filter results where base_url matches regex value
        :param str base_url__startswith: Filter results where base_url starts with value
        :param datetime last_replication: Filter results where last_replication matches value
        :param datetime last_replication__gt: Filter results where last_replication is greater than value
        :param datetime last_replication__gte: Filter results where last_replication is greater than or equal to value
        :param datetime last_replication__lt: Filter results where last_replication is less than value
        :param datetime last_replication__lte: Filter results where last_replication is less than or equal to value
        :param list[datetime] last_replication__range: Filter results where last_replication is between two comma separated values
        :param int limit: Number of results to return per page.
        :param str name: Filter results where name matches value
        :param str name__contains: Filter results where name contains value
        :param str name__icontains: Filter results where name contains value
        :param str name__iexact: Filter results where name matches value
        :param list[str] name__in: Filter results where name is in a comma-separated list of values
        :param str name__iregex: Filter results where name matches regex value
        :param str name__istartswith: Filter results where name starts with value
        :param str name__regex: Filter results where name matches regex value
        :param str name__startswith: Filter results where name starts with value
        :param int offset: The initial index from which to return the results.
        :param list[str] ordering: Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `name` - Name * `-name` - Name (descending) * `base_url` - Base url * `-base_url` - Base url (descending) * `api_root` - Api root * `-api_root` - Api root (descending) * `domain` - Domain * `-domain` - Domain (descending) * `ca_cert` - Ca cert * `-ca_cert` - Ca cert (descending) * `client_cert` - Client cert * `-client_cert` - Client cert (descending) * `client_key` - Client key * `-client_key` - Client key (descending) * `tls_validation` - Tls validation * `-tls_validation` - Tls validation (descending) * `username` - Username * `-username` - Username (descending) * `password` - Password * `-password` - Password (descending) * `pulp_label_select` - Pulp label select * `-pulp_label_select` - Pulp label select (descending) * `q_select` - Q select * `-q_select` - Q select (descending) * `last_replication` - Last replication * `-last_replication` - Last replication (descending) * `pk` - Pk * `-pk` - Pk (descending)
        :param list[str] prn__in: Multiple values may be separated by commas.
        :param list[str] pulp_href__in: Multiple values may be separated by commas.
        :param list[str] pulp_id__in: Multiple values may be separated by commas.
        :param str q: Filter results by using NOT, AND and OR operations on other filters
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PaginatedUpstreamPulpResponseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_with_http_info( **kwargs)  # noqa: E501

    def list_with_http_info(self,  **kwargs):  # noqa: E501
        """List upstream pulps  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str base_url: Filter results where base_url matches value
        :param str base_url__contains: Filter results where base_url contains value
        :param str base_url__icontains: Filter results where base_url contains value
        :param str base_url__iexact: Filter results where base_url matches value
        :param list[str] base_url__in: Filter results where base_url is in a comma-separated list of values
        :param str base_url__iregex: Filter results where base_url matches regex value
        :param str base_url__istartswith: Filter results where base_url starts with value
        :param str base_url__regex: Filter results where base_url matches regex value
        :param str base_url__startswith: Filter results where base_url starts with value
        :param datetime last_replication: Filter results where last_replication matches value
        :param datetime last_replication__gt: Filter results where last_replication is greater than value
        :param datetime last_replication__gte: Filter results where last_replication is greater than or equal to value
        :param datetime last_replication__lt: Filter results where last_replication is less than value
        :param datetime last_replication__lte: Filter results where last_replication is less than or equal to value
        :param list[datetime] last_replication__range: Filter results where last_replication is between two comma separated values
        :param int limit: Number of results to return per page.
        :param str name: Filter results where name matches value
        :param str name__contains: Filter results where name contains value
        :param str name__icontains: Filter results where name contains value
        :param str name__iexact: Filter results where name matches value
        :param list[str] name__in: Filter results where name is in a comma-separated list of values
        :param str name__iregex: Filter results where name matches regex value
        :param str name__istartswith: Filter results where name starts with value
        :param str name__regex: Filter results where name matches regex value
        :param str name__startswith: Filter results where name starts with value
        :param int offset: The initial index from which to return the results.
        :param list[str] ordering: Ordering  * `pulp_id` - Pulp id * `-pulp_id` - Pulp id (descending) * `pulp_created` - Pulp created * `-pulp_created` - Pulp created (descending) * `pulp_last_updated` - Pulp last updated * `-pulp_last_updated` - Pulp last updated (descending) * `name` - Name * `-name` - Name (descending) * `base_url` - Base url * `-base_url` - Base url (descending) * `api_root` - Api root * `-api_root` - Api root (descending) * `domain` - Domain * `-domain` - Domain (descending) * `ca_cert` - Ca cert * `-ca_cert` - Ca cert (descending) * `client_cert` - Client cert * `-client_cert` - Client cert (descending) * `client_key` - Client key * `-client_key` - Client key (descending) * `tls_validation` - Tls validation * `-tls_validation` - Tls validation (descending) * `username` - Username * `-username` - Username (descending) * `password` - Password * `-password` - Password (descending) * `pulp_label_select` - Pulp label select * `-pulp_label_select` - Pulp label select (descending) * `q_select` - Q select * `-q_select` - Q select (descending) * `last_replication` - Last replication * `-last_replication` - Last replication (descending) * `pk` - Pk * `-pk` - Pk (descending)
        :param list[str] prn__in: Multiple values may be separated by commas.
        :param list[str] pulp_href__in: Multiple values may be separated by commas.
        :param list[str] pulp_id__in: Multiple values may be separated by commas.
        :param str q: Filter results by using NOT, AND and OR operations on other filters
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PaginatedUpstreamPulpResponseList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'base_url',
            'base_url__contains',
            'base_url__icontains',
            'base_url__iexact',
            'base_url__in',
            'base_url__iregex',
            'base_url__istartswith',
            'base_url__regex',
            'base_url__startswith',
            'last_replication',
            'last_replication__gt',
            'last_replication__gte',
            'last_replication__lt',
            'last_replication__lte',
            'last_replication__range',
            'limit',
            'name',
            'name__contains',
            'name__icontains',
            'name__iexact',
            'name__in',
            'name__iregex',
            'name__istartswith',
            'name__regex',
            'name__startswith',
            'offset',
            'ordering',
            'prn__in',
            'pulp_href__in',
            'pulp_id__in',
            'q',
            'fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'base_url' in local_var_params and local_var_params['base_url'] is not None:  # noqa: E501
            query_params.append(('base_url', local_var_params['base_url']))  # noqa: E501
        if 'base_url__contains' in local_var_params and local_var_params['base_url__contains'] is not None:  # noqa: E501
            query_params.append(('base_url__contains', local_var_params['base_url__contains']))  # noqa: E501
        if 'base_url__icontains' in local_var_params and local_var_params['base_url__icontains'] is not None:  # noqa: E501
            query_params.append(('base_url__icontains', local_var_params['base_url__icontains']))  # noqa: E501
        if 'base_url__iexact' in local_var_params and local_var_params['base_url__iexact'] is not None:  # noqa: E501
            query_params.append(('base_url__iexact', local_var_params['base_url__iexact']))  # noqa: E501
        if 'base_url__in' in local_var_params and local_var_params['base_url__in'] is not None:  # noqa: E501
            query_params.append(('base_url__in', local_var_params['base_url__in']))  # noqa: E501
            collection_formats['base_url__in'] = 'csv'  # noqa: E501
        if 'base_url__iregex' in local_var_params and local_var_params['base_url__iregex'] is not None:  # noqa: E501
            query_params.append(('base_url__iregex', local_var_params['base_url__iregex']))  # noqa: E501
        if 'base_url__istartswith' in local_var_params and local_var_params['base_url__istartswith'] is not None:  # noqa: E501
            query_params.append(('base_url__istartswith', local_var_params['base_url__istartswith']))  # noqa: E501
        if 'base_url__regex' in local_var_params and local_var_params['base_url__regex'] is not None:  # noqa: E501
            query_params.append(('base_url__regex', local_var_params['base_url__regex']))  # noqa: E501
        if 'base_url__startswith' in local_var_params and local_var_params['base_url__startswith'] is not None:  # noqa: E501
            query_params.append(('base_url__startswith', local_var_params['base_url__startswith']))  # noqa: E501
        if 'last_replication' in local_var_params and local_var_params['last_replication'] is not None:  # noqa: E501
            query_params.append(('last_replication', local_var_params['last_replication']))  # noqa: E501
        if 'last_replication__gt' in local_var_params and local_var_params['last_replication__gt'] is not None:  # noqa: E501
            query_params.append(('last_replication__gt', local_var_params['last_replication__gt']))  # noqa: E501
        if 'last_replication__gte' in local_var_params and local_var_params['last_replication__gte'] is not None:  # noqa: E501
            query_params.append(('last_replication__gte', local_var_params['last_replication__gte']))  # noqa: E501
        if 'last_replication__lt' in local_var_params and local_var_params['last_replication__lt'] is not None:  # noqa: E501
            query_params.append(('last_replication__lt', local_var_params['last_replication__lt']))  # noqa: E501
        if 'last_replication__lte' in local_var_params and local_var_params['last_replication__lte'] is not None:  # noqa: E501
            query_params.append(('last_replication__lte', local_var_params['last_replication__lte']))  # noqa: E501
        if 'last_replication__range' in local_var_params and local_var_params['last_replication__range'] is not None:  # noqa: E501
            query_params.append(('last_replication__range', local_var_params['last_replication__range']))  # noqa: E501
            collection_formats['last_replication__range'] = 'csv'  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'name__contains' in local_var_params and local_var_params['name__contains'] is not None:  # noqa: E501
            query_params.append(('name__contains', local_var_params['name__contains']))  # noqa: E501
        if 'name__icontains' in local_var_params and local_var_params['name__icontains'] is not None:  # noqa: E501
            query_params.append(('name__icontains', local_var_params['name__icontains']))  # noqa: E501
        if 'name__iexact' in local_var_params and local_var_params['name__iexact'] is not None:  # noqa: E501
            query_params.append(('name__iexact', local_var_params['name__iexact']))  # noqa: E501
        if 'name__in' in local_var_params and local_var_params['name__in'] is not None:  # noqa: E501
            query_params.append(('name__in', local_var_params['name__in']))  # noqa: E501
            collection_formats['name__in'] = 'csv'  # noqa: E501
        if 'name__iregex' in local_var_params and local_var_params['name__iregex'] is not None:  # noqa: E501
            query_params.append(('name__iregex', local_var_params['name__iregex']))  # noqa: E501
        if 'name__istartswith' in local_var_params and local_var_params['name__istartswith'] is not None:  # noqa: E501
            query_params.append(('name__istartswith', local_var_params['name__istartswith']))  # noqa: E501
        if 'name__regex' in local_var_params and local_var_params['name__regex'] is not None:  # noqa: E501
            query_params.append(('name__regex', local_var_params['name__regex']))  # noqa: E501
        if 'name__startswith' in local_var_params and local_var_params['name__startswith'] is not None:  # noqa: E501
            query_params.append(('name__startswith', local_var_params['name__startswith']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'ordering' in local_var_params and local_var_params['ordering'] is not None:  # noqa: E501
            query_params.append(('ordering', local_var_params['ordering']))  # noqa: E501
            collection_formats['ordering'] = 'csv'  # noqa: E501
        if 'prn__in' in local_var_params and local_var_params['prn__in'] is not None:  # noqa: E501
            query_params.append(('prn__in', local_var_params['prn__in']))  # noqa: E501
            collection_formats['prn__in'] = 'csv'  # noqa: E501
        if 'pulp_href__in' in local_var_params and local_var_params['pulp_href__in'] is not None:  # noqa: E501
            query_params.append(('pulp_href__in', local_var_params['pulp_href__in']))  # noqa: E501
            collection_formats['pulp_href__in'] = 'csv'  # noqa: E501
        if 'pulp_id__in' in local_var_params and local_var_params['pulp_id__in'] is not None:  # noqa: E501
            query_params.append(('pulp_id__in', local_var_params['pulp_id__in']))  # noqa: E501
            collection_formats['pulp_id__in'] = 'csv'  # noqa: E501
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pulp/api/v3/upstream-pulps/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedUpstreamPulpResponseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_roles(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """List roles  # noqa: E501

        List roles assigned to this object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_roles(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ObjectRolesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.list_roles_with_http_info(upstream_pulp_href,  **kwargs)  # noqa: E501

    def list_roles_with_http_info(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """List roles  # noqa: E501

        List roles assigned to this object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_roles_with_http_info(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ObjectRolesResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp_href',
            'fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_roles" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp_href' is set
        if self.api_client.client_side_validation and ('upstream_pulp_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp_href` when calling `list_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upstream_pulp_href' in local_var_params:
            path_params['upstream_pulp_href'] = local_var_params['upstream_pulp_href']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{upstream_pulp_href}list_roles/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObjectRolesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def my_permissions(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """List user permissions  # noqa: E501

        List permissions available to the current user on this object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.my_permissions(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: MyPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.my_permissions_with_http_info(upstream_pulp_href,  **kwargs)  # noqa: E501

    def my_permissions_with_http_info(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """List user permissions  # noqa: E501

        List permissions available to the current user on this object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.my_permissions_with_http_info(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(MyPermissionsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp_href',
            'fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method my_permissions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp_href' is set
        if self.api_client.client_side_validation and ('upstream_pulp_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp_href` when calling `my_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upstream_pulp_href' in local_var_params:
            path_params['upstream_pulp_href'] = local_var_params['upstream_pulp_href']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{upstream_pulp_href}my_permissions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MyPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update(self, upstream_pulp_href, patched_upstream_pulp,  **kwargs):  # noqa: E501
        """Update an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update(upstream_pulp_href, patched_upstream_pulp, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param PatchedUpstreamPulp patched_upstream_pulp: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpstreamPulpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.partial_update_with_http_info(upstream_pulp_href, patched_upstream_pulp,  **kwargs)  # noqa: E501

    def partial_update_with_http_info(self, upstream_pulp_href, patched_upstream_pulp,  **kwargs):  # noqa: E501
        """Update an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_with_http_info(upstream_pulp_href, patched_upstream_pulp, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param PatchedUpstreamPulp patched_upstream_pulp: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpstreamPulpResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp_href',
            'patched_upstream_pulp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp_href' is set
        if self.api_client.client_side_validation and ('upstream_pulp_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp_href` when calling `partial_update`")  # noqa: E501
        # verify the required parameter 'patched_upstream_pulp' is set
        if self.api_client.client_side_validation and ('patched_upstream_pulp' not in local_var_params or  # noqa: E501
                                                        local_var_params['patched_upstream_pulp'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `patched_upstream_pulp` when calling `partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upstream_pulp_href' in local_var_params:
            path_params['upstream_pulp_href'] = local_var_params['upstream_pulp_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patched_upstream_pulp' in local_var_params:
            body_params = local_var_params['patched_upstream_pulp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{upstream_pulp_href}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpstreamPulpResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """Inspect an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpstreamPulpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.read_with_http_info(upstream_pulp_href,  **kwargs)  # noqa: E501

    def read_with_http_info(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """Inspect an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_with_http_info(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param list[str] fields: A list of fields to include in the response.
        :param list[str] exclude_fields: A list of fields to exclude from the response.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpstreamPulpResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp_href',
            'fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp_href' is set
        if self.api_client.client_side_validation and ('upstream_pulp_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp_href` when calling `read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upstream_pulp_href' in local_var_params:
            path_params['upstream_pulp_href'] = local_var_params['upstream_pulp_href']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{upstream_pulp_href}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpstreamPulpResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_role(self, upstream_pulp_href, nested_role,  **kwargs):  # noqa: E501
        """Remove a role  # noqa: E501

        Remove a role for this object from users/groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_role(upstream_pulp_href, nested_role, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param NestedRole nested_role: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: NestedRoleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.remove_role_with_http_info(upstream_pulp_href, nested_role,  **kwargs)  # noqa: E501

    def remove_role_with_http_info(self, upstream_pulp_href, nested_role,  **kwargs):  # noqa: E501
        """Remove a role  # noqa: E501

        Remove a role for this object from users/groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_role_with_http_info(upstream_pulp_href, nested_role, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param NestedRole nested_role: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(NestedRoleResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp_href',
            'nested_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_role" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp_href' is set
        if self.api_client.client_side_validation and ('upstream_pulp_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp_href` when calling `remove_role`")  # noqa: E501
        # verify the required parameter 'nested_role' is set
        if self.api_client.client_side_validation and ('nested_role' not in local_var_params or  # noqa: E501
                                                        local_var_params['nested_role'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `nested_role` when calling `remove_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upstream_pulp_href' in local_var_params:
            path_params['upstream_pulp_href'] = local_var_params['upstream_pulp_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'nested_role' in local_var_params:
            body_params = local_var_params['nested_role']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{upstream_pulp_href}remove_role/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NestedRoleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replicate(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """Replicate  # noqa: E501

        Trigger an asynchronous repository replication task group. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replicate(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TaskGroupOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.replicate_with_http_info(upstream_pulp_href,  **kwargs)  # noqa: E501

    def replicate_with_http_info(self, upstream_pulp_href,  **kwargs):  # noqa: E501
        """Replicate  # noqa: E501

        Trigger an asynchronous repository replication task group. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replicate_with_http_info(upstream_pulp_href, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TaskGroupOperationResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp_href'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replicate" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp_href' is set
        if self.api_client.client_side_validation and ('upstream_pulp_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp_href` when calling `replicate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upstream_pulp_href' in local_var_params:
            path_params['upstream_pulp_href'] = local_var_params['upstream_pulp_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{upstream_pulp_href}replicate/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskGroupOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, upstream_pulp_href, upstream_pulp,  **kwargs):  # noqa: E501
        """Update an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(upstream_pulp_href, upstream_pulp, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param UpstreamPulp upstream_pulp: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpstreamPulpResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_with_http_info(upstream_pulp_href, upstream_pulp,  **kwargs)  # noqa: E501

    def update_with_http_info(self, upstream_pulp_href, upstream_pulp,  **kwargs):  # noqa: E501
        """Update an upstream pulp  # noqa: E501

        API for configuring an upstream Pulp to replicate. This API is provided as a tech preview.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(upstream_pulp_href, upstream_pulp, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str upstream_pulp_href: (required)
        :param UpstreamPulp upstream_pulp: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpstreamPulpResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'upstream_pulp_href',
            'upstream_pulp'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'upstream_pulp_href' is set
        if self.api_client.client_side_validation and ('upstream_pulp_href' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp_href'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp_href` when calling `update`")  # noqa: E501
        # verify the required parameter 'upstream_pulp' is set
        if self.api_client.client_side_validation and ('upstream_pulp' not in local_var_params or  # noqa: E501
                                                        local_var_params['upstream_pulp'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `upstream_pulp` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'upstream_pulp_href' in local_var_params:
            path_params['upstream_pulp_href'] = local_var_params['upstream_pulp_href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upstream_pulp' in local_var_params:
            body_params = local_var_params['upstream_pulp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'cookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '{upstream_pulp_href}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpstreamPulpResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

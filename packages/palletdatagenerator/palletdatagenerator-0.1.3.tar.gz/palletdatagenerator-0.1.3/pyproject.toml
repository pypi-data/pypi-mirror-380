[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "palletdatagenerator"
version = "0.1.3"
description = "Professional Blender library for synthetic pallet dataset generation."
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    { name = "Ibrahim Boubakri", email = "ibrahimbouakri1@gmail.com" },
]
keywords = [
    "blender",
    "synthetic-data",
    "computer-vision",
    "dataset-generation",
    "pallet-detection",
    "machine-learning",
    "3d-rendering"
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Multimedia :: Graphics :: 3D Rendering",
]

dependencies = [
    "pillow>=10.0.0",
    "pascal_voc_writer>=0.1.4",
    "numpy>=1.20.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.2",
    "sphinxext-opengraph>=0.8.2",
    "linkify-it-py>=2.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coveralls>=3.3.1",
]

[project.urls]
Homepage = "https://github.com/boubakriibrahim/PalletDataGenerator"
Documentation = "https://boubakriibrahim.github.io/PalletDataGenerator/"
Repository = "https://github.com/boubakriibrahim/PalletDataGenerator.git"
Issues = "https://github.com/boubakriibrahim/PalletDataGenerator/issues"

[project.scripts]
palletgen = "palletdatagenerator.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/palletdatagenerator"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
lint.select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "Q",   # flake8-quotes
]
lint.ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W505",  # doc line too long
]
lint.unfixable = [
    "F841",  # unused variable
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101"]
# Ignore unused imports for Blender modules (they're conditionally imported)
"src/palletdatagenerator/exporters/coco.py" = ["F401"]
"src/palletdatagenerator/utils.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["palletdatagenerator"]

[tool.mypy]
python_version = "3.11"
# Relaxed settings for development phase
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true
# Skip error checking for problematic patterns
disable_error_code = ["import", "no-redef", "attr-defined", "operator", "index", "call-arg", "assignment", "arg-type", "return-value", "call-overload", "no-untyped-def", "var-annotated", "func-returns-value", "unreachable", "valid-type", "no-any-return"]

[[tool.mypy.overrides]]
module = [
    "bpy.*",
    "mathutils.*",
    "bpy_extras.*",
    "bmesh.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=palletdatagenerator",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "blender: marks tests that require Blender",
]

[tool.coverage.run]
source = ["palletdatagenerator"]
omit = [
    "*/tests/*",
    "*/test_*",
    # Blender-specific modules that can't be tested outside Blender
    "*/modes/*",
    "*/blender_runner.py",
]

[tool.coverage.report]
fail_under = 20
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # Blender-specific exclusions
    "import bpy",
    "if BLENDER_AVAILABLE:",
    "except ImportError:",
    "if not BLENDER_AVAILABLE:",
]

[tool.bandit]
# Skip tests that are too strict for development
skips = [
    "B101",  # assert_used
    "B601",  # paramiko_calls
    "B602",  # subprocess_popen_with_shell_equals_true
    "B603",  # subprocess_without_shell_equals_true
    "B604",  # any_other_function_with_shell_equals_true
    "B605",  # start_process_with_a_shell
    "B606",  # start_process_with_no_shell
    "B607",  # start_process_with_partial_path
    "B608",  # hardcoded_sql_expressions
    "B701",  # jinja2_autoescape_false
]
exclude_dirs = ["tests"]

name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e ".[dev]"

    - name: Run tests
      run: uv run pytest tests/ -v

  build-and-publish:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write  # For trusted publishing to PyPI
      contents: write  # For creating releases

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Build package
      run: uv build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true

  docker-release:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          ${{ github.repository }}:latest
          ${{ github.repository }}:${{ steps.version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push GPU image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: gpu
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:gpu
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}-gpu
          ${{ github.repository }}:gpu
          ${{ github.repository }}:${{ steps.version.outputs.VERSION }}-gpu
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-kubeflow:
    runs-on: ubuntu-latest
    needs: [build-and-publish, docker-release]
    if: contains(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install Kubeflow Pipelines SDK
      run: uv pip install kfp

    - name: Compile and upload pipeline
      run: |
        cd kubeflow/pipelines
        uv run python ragents_training_pipeline.py
      env:
        KFP_ENDPOINT: ${{ secrets.KFP_ENDPOINT }}
        KFP_NAMESPACE: ${{ secrets.KFP_NAMESPACE || 'kubeflow' }}

    - name: Upload pipeline artifacts
      uses: actions/upload-artifact@v3
      with:
        name: kubeflow-pipeline
        path: kubeflow/pipelines/*.yaml
[build-system]
requires = ["setuptools>=80", "wheel", "setuptools_scm[toml]>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "drf-to-mkdoc"
description = "Generate Markdown API docs from Django/DRF OpenAPI schema for MkDocs"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Hossein Shayesteh", email = "shayestehhs1@gmail.com"}
]
dynamic = ["version"]
maintainers = [
    {name = "Hossein Shayesteh", email = "shayestehhs1@gmail.com"}
]
keywords = ["django", "django-rest-framework", "documentation", "mkdocs", "api"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Framework :: Django :: 4.1",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.0",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
]
requires-python = ">=3.8"
dependencies = [
    "Django>=3.2,<6.0",
    "djangorestframework>=3.12,<4.0",
    "PyYAML>=6.0",
    "drf-spectacular>=0.26.0",
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "coreapi>=2.3.0",
]

[project.urls]
Homepage = "https://github.com/shayestehhs/drf-to-mkdoc"
Repository = "https://github.com/shayestehhs/drf-to-mkdoc"
Documentation = "https://github.com/shayestehhs/drf-to-mkdoc#readme"
"Bug Tracker" = "https://github.com/shayestehhs/drf-to-mkdoc/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-django>=4.5.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["drf_to_mkdoc*"]

[tool.setuptools.package-data]
"drf_to_mkdoc" = [
    "conf/*.py",
    "utils/**/*.py",
    "management/**/*.py",
    "static/**/*",
]

[tool.setuptools_scm]
tag_regex = "^v(?P<version>[0-9]+\\.[0-9]+\\.[0-9]+)$"
version_scheme = "no-guess-dev"
local_scheme = "node-and-date"

[tool.ruff]
# Set the maximum line length to 88 (Black's default)
line-length = 96
indent-width = 4

# Assume Python 3.11
target-version = "py311"

# Include additional directories
include = ["*.py", "*.pyi", "**/pyproject.toml"]
extend-include = ["*.ipynb"]

# Exclude common directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "staticfiles",
    "media",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "DJ",  # flake8-django
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (commented code)
    "PL",  # Pylint
    "TRY", # tryceratops
    "RUF", # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # Line too long (handled by formatter)
    "S101",   # Use of assert (common in Django/tests)
    "PT009",   # Use of assert (common in Django/tests)
    "DJ001",  # Null=True on string fields (sometimes needed)
    "B008",   # Function call in argument defaults (common in Django)
    "RUF012", # Mutable class attributes (common in Django models)
    "TRY003", # Long messages outside exception class
    "PLR0913", # Too many arguments in function definition
    "PLR2004", # Magic value used in comparison
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "ARG002", # Unused method argument: `args`
    # ## Disabled for now
    # "B019", # Unused method argument: `args`
    # "DJ012", # Unused method argument: `args`
    # "DJ008", # Unused method argument: `args`
    # "PTH123", # Unused method argument: `args`
    # "PTH110", # Unused method argument: `args`
    # "PTH118", # Unused method argument: `args`
    # "PLC0415", # Unused method argument: `args`
    # "ARG004", # Unused method argument: `args`
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Ignore import issues in __init__.py files
"__init__.py" = ["F401", "F403"]
######################################################### For now: all except T20
# Ignore unused-arguments for Django functions
"*/views.py" = ["ARG001"]
"*/admin.py" = ["ARG001"]

[tool.ruff.lint.isort]
known-first-party = ["config", "apps"]
known-third-party = ["django"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`
keep-runtime-typing = true

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces, rather than tabs
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Automatically detect the appropriate line ending
line-ending = "auto"

# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_condition import V1Condition
from kubernetes_asyncio_pydantic.models.v1beta1_network_device_data import (
    V1beta1NetworkDeviceData,
)


class V1beta1AllocatedDeviceStatus(BaseModel):
    """
    AllocatedDeviceStatus contains the status of an allocated device, if the driver chooses to report it. This may include driver-specific information.  The combination of Driver, Pool, Device, and ShareID must match the corresponding key in Status.Allocation.Devices.
    """  # noqa: E501

    conditions: Optional[List[V1Condition]] = Field(
        default=None,
        description="Conditions contains the latest observation of the device's state. If the device has been configured according to the class and claim config references, the `Ready` condition should be True.  Must not contain more than 8 entries.",
    )
    data: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Data contains arbitrary driver-specific data.  The length of the raw data must be smaller or equal to 10 Ki.",
    )
    device: StrictStr = Field(
        description="Device references one device instance via its name in the driver's resource pool. It must be a DNS label."
    )
    driver: StrictStr = Field(
        description="Driver specifies the name of the DRA driver whose kubelet plugin should be invoked to process the allocation once the claim is needed on a node.  Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver."
    )
    network_data: Optional[V1beta1NetworkDeviceData] = Field(
        default=None,
        description="NetworkData contains network-related information specific to the device.",
        alias="networkData",
    )
    pool: StrictStr = Field(
        description="This name together with the driver name and the device name field identify which device was allocated (`<driver name>/<pool name>/<device name>`).  Must not be longer than 253 characters and may contain one or more DNS sub-domains separated by slashes."
    )
    share_id: Optional[StrictStr] = Field(
        default=None,
        description="ShareID uniquely identifies an individual allocation share of the device.",
        alias="shareID",
    )
    __properties: ClassVar[List[str]] = [
        "conditions",
        "data",
        "device",
        "driver",
        "networkData",
        "pool",
        "shareID",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1AllocatedDeviceStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict["conditions"] = _items
        # override the default output from pydantic by calling `to_dict()` of network_data
        if self.network_data:
            _dict["networkData"] = self.network_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1AllocatedDeviceStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "conditions": (
                    [V1Condition.from_dict(_item) for _item in obj["conditions"]]
                    if obj.get("conditions") is not None
                    else None
                ),
                "data": obj.get("data"),
                "device": obj.get("device") if obj.get("device") is not None else "",
                "driver": obj.get("driver") if obj.get("driver") is not None else "",
                "networkData": (
                    V1beta1NetworkDeviceData.from_dict(obj["networkData"])
                    if obj.get("networkData") is not None
                    else None
                ),
                "pool": obj.get("pool") if obj.get("pool") is not None else "",
                "shareID": obj.get("shareID"),
            }
        )
        return _obj

# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1beta1_device_allocation_configuration import (
    V1beta1DeviceAllocationConfiguration,
)
from kubernetes_asyncio_pydantic.models.v1beta1_device_request_allocation_result import (
    V1beta1DeviceRequestAllocationResult,
)


class V1beta1DeviceAllocationResult(BaseModel):
    """
    DeviceAllocationResult is the result of allocating devices.
    """  # noqa: E501

    config: Optional[List[V1beta1DeviceAllocationConfiguration]] = Field(
        default=None,
        description="This field is a combination of all the claim and class configuration parameters. Drivers can distinguish between those based on a flag.  This includes configuration parameters for drivers which have no allocated devices in the result because it is up to the drivers which configuration parameters they support. They can silently ignore unknown configuration parameters.",
    )
    results: Optional[List[V1beta1DeviceRequestAllocationResult]] = Field(
        default=None, description="Results lists all allocated devices."
    )
    __properties: ClassVar[List[str]] = ["config", "results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1DeviceAllocationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in config (list)
        _items = []
        if self.config:
            for _item_config in self.config:
                if _item_config:
                    _items.append(_item_config.to_dict())
            _dict["config"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict["results"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1DeviceAllocationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "config": (
                    [
                        V1beta1DeviceAllocationConfiguration.from_dict(_item)
                        for _item in obj["config"]
                    ]
                    if obj.get("config") is not None
                    else None
                ),
                "results": (
                    [
                        V1beta1DeviceRequestAllocationResult.from_dict(_item)
                        for _item in obj["results"]
                    ]
                    if obj.get("results") is not None
                    else None
                ),
            }
        )
        return _obj

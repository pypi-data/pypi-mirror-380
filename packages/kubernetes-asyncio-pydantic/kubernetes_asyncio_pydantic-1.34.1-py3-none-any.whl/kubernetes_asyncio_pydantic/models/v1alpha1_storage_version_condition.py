# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self


class V1alpha1StorageVersionCondition(BaseModel):
    """
    Describes the state of the storageVersion at a certain point.
    """  # noqa: E501

    last_transition_time: Optional[datetime] = Field(
        default=None,
        description="Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
        alias="lastTransitionTime",
    )
    message: StrictStr = Field(
        description="A human readable message indicating details about the transition."
    )
    observed_generation: Optional[StrictInt] = Field(
        default=None,
        description="If set, this represents the .metadata.generation that the condition was set based upon.",
        alias="observedGeneration",
    )
    reason: StrictStr = Field(
        description="The reason for the condition's last transition."
    )
    status: StrictStr = Field(
        description="Status of the condition, one of True, False, Unknown."
    )
    type: StrictStr = Field(description="Type of the condition.")
    __properties: ClassVar[List[str]] = [
        "lastTransitionTime",
        "message",
        "observedGeneration",
        "reason",
        "status",
        "type",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1alpha1StorageVersionCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1alpha1StorageVersionCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "lastTransitionTime": obj.get("lastTransitionTime"),
                "message": obj.get("message"),
                "observedGeneration": obj.get("observedGeneration"),
                "reason": obj.get("reason") if obj.get("reason") is not None else "",
                "status": obj.get("status") if obj.get("status") is not None else "",
                "type": obj.get("type") if obj.get("type") is not None else "",
            }
        )
        return _obj

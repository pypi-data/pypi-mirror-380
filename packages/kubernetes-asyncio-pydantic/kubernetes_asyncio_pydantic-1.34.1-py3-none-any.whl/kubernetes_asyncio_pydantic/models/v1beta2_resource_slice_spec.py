# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_node_selector import V1NodeSelector
from kubernetes_asyncio_pydantic.models.v1beta2_counter_set import V1beta2CounterSet
from kubernetes_asyncio_pydantic.models.v1beta2_device import V1beta2Device
from kubernetes_asyncio_pydantic.models.v1beta2_resource_pool import V1beta2ResourcePool


class V1beta2ResourceSliceSpec(BaseModel):
    """
    ResourceSliceSpec contains the information published by the driver in one ResourceSlice.
    """  # noqa: E501

    all_nodes: Optional[StrictBool] = Field(
        default=None,
        description="AllNodes indicates that all nodes have access to the resources in the pool.  Exactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set.",
        alias="allNodes",
    )
    devices: Optional[List[V1beta2Device]] = Field(
        default=None,
        description="Devices lists some or all of the devices in this pool.  Must not have more than 128 entries.",
    )
    driver: StrictStr = Field(
        description="Driver identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.  Must be a DNS subdomain and should end with a DNS domain owned by the vendor of the driver. This field is immutable."
    )
    node_name: Optional[StrictStr] = Field(
        default=None,
        description="NodeName identifies the node which provides the resources in this pool. A field selector can be used to list only ResourceSlice objects belonging to a certain node.  This field can be used to limit access from nodes to ResourceSlices with the same node name. It also indicates to autoscalers that adding new nodes of the same type as some old node might also make new resources available.  Exactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set. This field is immutable.",
        alias="nodeName",
    )
    node_selector: Optional[V1NodeSelector] = Field(
        default=None,
        description="NodeSelector defines which nodes have access to the resources in the pool, when that pool is not limited to a single node.  Must use exactly one term.  Exactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set.",
        alias="nodeSelector",
    )
    per_device_node_selection: Optional[StrictBool] = Field(
        default=None,
        description="PerDeviceNodeSelection defines whether the access from nodes to resources in the pool is set on the ResourceSlice level or on each device. If it is set to true, every device defined the ResourceSlice must specify this individually.  Exactly one of NodeName, NodeSelector, AllNodes, and PerDeviceNodeSelection must be set.",
        alias="perDeviceNodeSelection",
    )
    pool: V1beta2ResourcePool = Field(
        description="Pool describes the pool that this ResourceSlice belongs to."
    )
    shared_counters: Optional[List[V1beta2CounterSet]] = Field(
        default=None,
        description="SharedCounters defines a list of counter sets, each of which has a name and a list of counters available.  The names of the SharedCounters must be unique in the ResourceSlice.  The maximum number of counters in all sets is 32.",
        alias="sharedCounters",
    )
    __properties: ClassVar[List[str]] = [
        "allNodes",
        "devices",
        "driver",
        "nodeName",
        "nodeSelector",
        "perDeviceNodeSelection",
        "pool",
        "sharedCounters",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta2ResourceSliceSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in devices (list)
        _items = []
        if self.devices:
            for _item_devices in self.devices:
                if _item_devices:
                    _items.append(_item_devices.to_dict())
            _dict["devices"] = _items
        # override the default output from pydantic by calling `to_dict()` of node_selector
        if self.node_selector:
            _dict["nodeSelector"] = self.node_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pool
        if self.pool:
            _dict["pool"] = self.pool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shared_counters (list)
        _items = []
        if self.shared_counters:
            for _item_shared_counters in self.shared_counters:
                if _item_shared_counters:
                    _items.append(_item_shared_counters.to_dict())
            _dict["sharedCounters"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta2ResourceSliceSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "allNodes": obj.get("allNodes"),
                "devices": (
                    [V1beta2Device.from_dict(_item) for _item in obj["devices"]]
                    if obj.get("devices") is not None
                    else None
                ),
                "driver": obj.get("driver") if obj.get("driver") is not None else "",
                "nodeName": obj.get("nodeName"),
                "nodeSelector": (
                    V1NodeSelector.from_dict(obj["nodeSelector"])
                    if obj.get("nodeSelector") is not None
                    else None
                ),
                "perDeviceNodeSelection": obj.get("perDeviceNodeSelection"),
                "pool": (
                    V1beta2ResourcePool.from_dict(obj["pool"])
                    if obj.get("pool") is not None
                    else None
                ),
                "sharedCounters": (
                    [
                        V1beta2CounterSet.from_dict(_item)
                        for _item in obj["sharedCounters"]
                    ]
                    if obj.get("sharedCounters") is not None
                    else None
                ),
            }
        )
        return _obj

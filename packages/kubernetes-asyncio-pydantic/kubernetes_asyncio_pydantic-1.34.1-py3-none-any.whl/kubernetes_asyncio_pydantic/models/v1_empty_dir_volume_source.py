# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_empty_dir_volume_source_size_limit import (
    V1EmptyDirVolumeSourceSizeLimit,
)


class V1EmptyDirVolumeSource(BaseModel):
    """
    Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
    """  # noqa: E501

    medium: Optional[StrictStr] = Field(
        default=None,
        description='medium represents what type of storage medium should back this directory. The default is "" which means to use the node\'s default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir',
    )
    size_limit: Optional[V1EmptyDirVolumeSourceSizeLimit] = Field(
        default=None, alias="sizeLimit"
    )
    __properties: ClassVar[List[str]] = ["medium", "sizeLimit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1EmptyDirVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of size_limit
        if self.size_limit:
            _dict["sizeLimit"] = self.size_limit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1EmptyDirVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "medium": obj.get("medium"),
                "sizeLimit": (
                    V1EmptyDirVolumeSourceSizeLimit.from_dict(obj["sizeLimit"])
                    if obj.get("sizeLimit") is not None
                    else None
                ),
            }
        )
        return _obj

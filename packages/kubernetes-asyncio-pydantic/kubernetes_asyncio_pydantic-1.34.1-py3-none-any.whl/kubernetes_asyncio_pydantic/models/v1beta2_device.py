# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_node_selector import V1NodeSelector
from kubernetes_asyncio_pydantic.models.v1beta2_device_attribute import (
    V1beta2DeviceAttribute,
)
from kubernetes_asyncio_pydantic.models.v1beta2_device_capacity import (
    V1beta2DeviceCapacity,
)
from kubernetes_asyncio_pydantic.models.v1beta2_device_counter_consumption import (
    V1beta2DeviceCounterConsumption,
)
from kubernetes_asyncio_pydantic.models.v1beta2_device_taint import V1beta2DeviceTaint


class V1beta2Device(BaseModel):
    """
    Device represents one individual hardware instance that can be selected based on its attributes. Besides the name, exactly one field must be set.
    """  # noqa: E501

    all_nodes: Optional[StrictBool] = Field(
        default=None,
        description="AllNodes indicates that all nodes have access to the device.  Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.",
        alias="allNodes",
    )
    allow_multiple_allocations: Optional[StrictBool] = Field(
        default=None,
        description="AllowMultipleAllocations marks whether the device is allowed to be allocated to multiple DeviceRequests.  If AllowMultipleAllocations is set to true, the device can be allocated more than once, and all of its capacity is consumable, regardless of whether the requestPolicy is defined or not.",
        alias="allowMultipleAllocations",
    )
    attributes: Optional[Dict[str, V1beta2DeviceAttribute]] = Field(
        default=None,
        description="Attributes defines the set of attributes for this device. The name of each attribute must be unique in that set.  The maximum number of attributes and capacities combined is 32.",
    )
    binding_conditions: Optional[List[StrictStr]] = Field(
        default=None,
        description="BindingConditions defines the conditions for proceeding with binding. All of these conditions must be set in the per-device status conditions with a value of True to proceed with binding the pod to the node while scheduling the pod.  The maximum number of binding conditions is 4.  The conditions must be a valid condition type string.  This is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.",
        alias="bindingConditions",
    )
    binding_failure_conditions: Optional[List[StrictStr]] = Field(
        default=None,
        description='BindingFailureConditions defines the conditions for binding failure. They may be set in the per-device status conditions. If any is set to "True", a binding failure occurred.  The maximum number of binding failure conditions is 4.  The conditions must be a valid condition type string.  This is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.',
        alias="bindingFailureConditions",
    )
    binds_to_node: Optional[StrictBool] = Field(
        default=None,
        description="BindsToNode indicates if the usage of an allocation involving this device has to be limited to exactly the node that was chosen when allocating the claim. If set to true, the scheduler will set the ResourceClaim.Status.Allocation.NodeSelector to match the node where the allocation was made.  This is an alpha field and requires enabling the DRADeviceBindingConditions and DRAResourceClaimDeviceStatus feature gates.",
        alias="bindsToNode",
    )
    capacity: Optional[Dict[str, V1beta2DeviceCapacity]] = Field(
        default=None,
        description="Capacity defines the set of capacities for this device. The name of each capacity must be unique in that set.  The maximum number of attributes and capacities combined is 32.",
    )
    consumes_counters: Optional[List[V1beta2DeviceCounterConsumption]] = Field(
        default=None,
        description="ConsumesCounters defines a list of references to sharedCounters and the set of counters that the device will consume from those counter sets.  There can only be a single entry per counterSet.  The total number of device counter consumption entries must be <= 32. In addition, the total number in the entire ResourceSlice must be <= 1024 (for example, 64 devices with 16 counters each).",
        alias="consumesCounters",
    )
    name: StrictStr = Field(
        description="Name is unique identifier among all devices managed by the driver in the pool. It must be a DNS label."
    )
    node_name: Optional[StrictStr] = Field(
        default=None,
        description="NodeName identifies the node where the device is available.  Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.",
        alias="nodeName",
    )
    node_selector: Optional[V1NodeSelector] = Field(
        default=None,
        description="NodeSelector defines the nodes where the device is available.  Must use exactly one term.  Must only be set if Spec.PerDeviceNodeSelection is set to true. At most one of NodeName, NodeSelector and AllNodes can be set.",
        alias="nodeSelector",
    )
    taints: Optional[List[V1beta2DeviceTaint]] = Field(
        default=None,
        description="If specified, these are the driver-defined taints.  The maximum number of taints is 4.  This is an alpha field and requires enabling the DRADeviceTaints feature gate.",
    )
    __properties: ClassVar[List[str]] = [
        "allNodes",
        "allowMultipleAllocations",
        "attributes",
        "bindingConditions",
        "bindingFailureConditions",
        "bindsToNode",
        "capacity",
        "consumesCounters",
        "name",
        "nodeName",
        "nodeSelector",
        "taints",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta2Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key_attributes in self.attributes:
                if self.attributes[_key_attributes]:
                    _field_dict[_key_attributes] = self.attributes[
                        _key_attributes
                    ].to_dict()
            _dict["attributes"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in capacity (dict)
        _field_dict = {}
        if self.capacity:
            for _key_capacity in self.capacity:
                if self.capacity[_key_capacity]:
                    _field_dict[_key_capacity] = self.capacity[_key_capacity].to_dict()
            _dict["capacity"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in consumes_counters (list)
        _items = []
        if self.consumes_counters:
            for _item_consumes_counters in self.consumes_counters:
                if _item_consumes_counters:
                    _items.append(_item_consumes_counters.to_dict())
            _dict["consumesCounters"] = _items
        # override the default output from pydantic by calling `to_dict()` of node_selector
        if self.node_selector:
            _dict["nodeSelector"] = self.node_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taints (list)
        _items = []
        if self.taints:
            for _item_taints in self.taints:
                if _item_taints:
                    _items.append(_item_taints.to_dict())
            _dict["taints"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta2Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "allNodes": obj.get("allNodes"),
                "allowMultipleAllocations": obj.get("allowMultipleAllocations"),
                "attributes": (
                    dict(
                        (_k, V1beta2DeviceAttribute.from_dict(_v))
                        for _k, _v in obj["attributes"].items()
                    )
                    if obj.get("attributes") is not None
                    else None
                ),
                "bindingConditions": obj.get("bindingConditions"),
                "bindingFailureConditions": obj.get("bindingFailureConditions"),
                "bindsToNode": obj.get("bindsToNode"),
                "capacity": (
                    dict(
                        (_k, V1beta2DeviceCapacity.from_dict(_v))
                        for _k, _v in obj["capacity"].items()
                    )
                    if obj.get("capacity") is not None
                    else None
                ),
                "consumesCounters": (
                    [
                        V1beta2DeviceCounterConsumption.from_dict(_item)
                        for _item in obj["consumesCounters"]
                    ]
                    if obj.get("consumesCounters") is not None
                    else None
                ),
                "name": obj.get("name") if obj.get("name") is not None else "",
                "nodeName": obj.get("nodeName"),
                "nodeSelector": (
                    V1NodeSelector.from_dict(obj["nodeSelector"])
                    if obj.get("nodeSelector") is not None
                    else None
                ),
                "taints": (
                    [V1beta2DeviceTaint.from_dict(_item) for _item in obj["taints"]]
                    if obj.get("taints") is not None
                    else None
                ),
            }
        )
        return _obj

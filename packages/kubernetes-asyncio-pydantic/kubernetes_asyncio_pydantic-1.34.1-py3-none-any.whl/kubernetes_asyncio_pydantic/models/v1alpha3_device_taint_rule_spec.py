# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1alpha3_device_taint import V1alpha3DeviceTaint
from kubernetes_asyncio_pydantic.models.v1alpha3_device_taint_selector import (
    V1alpha3DeviceTaintSelector,
)


class V1alpha3DeviceTaintRuleSpec(BaseModel):
    """
    DeviceTaintRuleSpec specifies the selector and one taint.
    """  # noqa: E501

    device_selector: Optional[V1alpha3DeviceTaintSelector] = Field(
        default=None,
        description="DeviceSelector defines which device(s) the taint is applied to. All selector criteria must be satified for a device to match. The empty selector matches all devices. Without a selector, no devices are matches.",
        alias="deviceSelector",
    )
    taint: V1alpha3DeviceTaint = Field(
        description="The taint that gets applied to matching devices."
    )
    __properties: ClassVar[List[str]] = ["deviceSelector", "taint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1alpha3DeviceTaintRuleSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_selector
        if self.device_selector:
            _dict["deviceSelector"] = self.device_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of taint
        if self.taint:
            _dict["taint"] = self.taint.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1alpha3DeviceTaintRuleSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "deviceSelector": (
                    V1alpha3DeviceTaintSelector.from_dict(obj["deviceSelector"])
                    if obj.get("deviceSelector") is not None
                    else None
                ),
                "taint": (
                    V1alpha3DeviceTaint.from_dict(obj["taint"])
                    if obj.get("taint") is not None
                    else None
                ),
            }
        )
        return _obj

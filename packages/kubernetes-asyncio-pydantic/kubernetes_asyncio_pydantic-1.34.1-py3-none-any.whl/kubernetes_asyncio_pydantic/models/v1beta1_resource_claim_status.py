# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1beta1_allocated_device_status import (
    V1beta1AllocatedDeviceStatus,
)
from kubernetes_asyncio_pydantic.models.v1beta1_allocation_result import (
    V1beta1AllocationResult,
)
from kubernetes_asyncio_pydantic.models.v1beta1_resource_claim_consumer_reference import (
    V1beta1ResourceClaimConsumerReference,
)


class V1beta1ResourceClaimStatus(BaseModel):
    """
    ResourceClaimStatus tracks whether the resource has been allocated and what the result of that was.
    """  # noqa: E501

    allocation: Optional[V1beta1AllocationResult] = Field(
        default=None,
        description="Allocation is set once the claim has been allocated successfully.",
    )
    devices: Optional[List[V1beta1AllocatedDeviceStatus]] = Field(
        default=None,
        description="Devices contains the status of each device allocated for this claim, as reported by the driver. This can include driver-specific information. Entries are owned by their respective drivers.",
    )
    reserved_for: Optional[List[V1beta1ResourceClaimConsumerReference]] = Field(
        default=None,
        description="ReservedFor indicates which entities are currently allowed to use the claim. A Pod which references a ResourceClaim which is not reserved for that Pod will not be started. A claim that is in use or might be in use because it has been reserved must not get deallocated.  In a cluster with multiple scheduler instances, two pods might get scheduled concurrently by different schedulers. When they reference the same ResourceClaim which already has reached its maximum number of consumers, only one pod can be scheduled.  Both schedulers try to add their pod to the claim.status.reservedFor field, but only the update that reaches the API server first gets stored. The other one fails with an error and the scheduler which issued it knows that it must put the pod back into the queue, waiting for the ResourceClaim to become usable again.  There can be at most 256 such reservations. This may get increased in the future, but not reduced.",
        alias="reservedFor",
    )
    __properties: ClassVar[List[str]] = ["allocation", "devices", "reservedFor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1ResourceClaimStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allocation
        if self.allocation:
            _dict["allocation"] = self.allocation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in devices (list)
        _items = []
        if self.devices:
            for _item_devices in self.devices:
                if _item_devices:
                    _items.append(_item_devices.to_dict())
            _dict["devices"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reserved_for (list)
        _items = []
        if self.reserved_for:
            for _item_reserved_for in self.reserved_for:
                if _item_reserved_for:
                    _items.append(_item_reserved_for.to_dict())
            _dict["reservedFor"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1ResourceClaimStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "allocation": (
                    V1beta1AllocationResult.from_dict(obj["allocation"])
                    if obj.get("allocation") is not None
                    else None
                ),
                "devices": (
                    [
                        V1beta1AllocatedDeviceStatus.from_dict(_item)
                        for _item in obj["devices"]
                    ]
                    if obj.get("devices") is not None
                    else None
                ),
                "reservedFor": (
                    [
                        V1beta1ResourceClaimConsumerReference.from_dict(_item)
                        for _item in obj["reservedFor"]
                    ]
                    if obj.get("reservedFor") is not None
                    else None
                ),
            }
        )
        return _obj

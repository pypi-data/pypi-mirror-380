# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1beta1_match_resources import (
    V1beta1MatchResources,
)
from kubernetes_asyncio_pydantic.models.v1beta1_param_ref import V1beta1ParamRef


class V1beta1MutatingAdmissionPolicyBindingSpec(BaseModel):
    """
    MutatingAdmissionPolicyBindingSpec is the specification of the MutatingAdmissionPolicyBinding.
    """  # noqa: E501

    match_resources: Optional[V1beta1MatchResources] = Field(
        default=None,
        description="matchResources limits what resources match this binding and may be mutated by it. Note that if matchResources matches a resource, the resource must also match a policy's matchConstraints and matchConditions before the resource may be mutated. When matchResources is unset, it does not constrain resource matching, and only the policy's matchConstraints and matchConditions must match for the resource to be mutated. Additionally, matchResources.resourceRules are optional and do not constraint matching when unset. Note that this is differs from MutatingAdmissionPolicy matchConstraints, where resourceRules are required. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT.",
        alias="matchResources",
    )
    param_ref: Optional[V1beta1ParamRef] = Field(
        default=None,
        description="paramRef specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in spec.ParamKind of the bound MutatingAdmissionPolicy. If the policy specifies a ParamKind and the resource referred to by ParamRef does not exist, this binding is considered mis-configured and the FailurePolicy of the MutatingAdmissionPolicy applied. If the policy does not specify a ParamKind then this field is ignored, and the rules are evaluated without a param.",
        alias="paramRef",
    )
    policy_name: Optional[StrictStr] = Field(
        default=None,
        description="policyName references a MutatingAdmissionPolicy name which the MutatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored Required.",
        alias="policyName",
    )
    __properties: ClassVar[List[str]] = ["matchResources", "paramRef", "policyName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1MutatingAdmissionPolicyBindingSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of match_resources
        if self.match_resources:
            _dict["matchResources"] = self.match_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of param_ref
        if self.param_ref:
            _dict["paramRef"] = self.param_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1MutatingAdmissionPolicyBindingSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "matchResources": (
                    V1beta1MatchResources.from_dict(obj["matchResources"])
                    if obj.get("matchResources") is not None
                    else None
                ),
                "paramRef": (
                    V1beta1ParamRef.from_dict(obj["paramRef"])
                    if obj.get("paramRef") is not None
                    else None
                ),
                "policyName": obj.get("policyName"),
            }
        )
        return _obj

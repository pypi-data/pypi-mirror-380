# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_volume_error import V1VolumeError


class V1VolumeAttachmentStatus(BaseModel):
    """
    VolumeAttachmentStatus is the status of a VolumeAttachment request.
    """  # noqa: E501

    attach_error: Optional[V1VolumeError] = Field(
        default=None,
        description="attachError represents the last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
        alias="attachError",
    )
    attached: StrictBool = Field(
        description="attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher."
    )
    attachment_metadata: Optional[Dict[str, StrictStr]] = Field(
        default=None,
        description="attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
        alias="attachmentMetadata",
    )
    detach_error: Optional[V1VolumeError] = Field(
        default=None,
        description="detachError represents the last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.",
        alias="detachError",
    )
    __properties: ClassVar[List[str]] = [
        "attachError",
        "attached",
        "attachmentMetadata",
        "detachError",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1VolumeAttachmentStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attach_error
        if self.attach_error:
            _dict["attachError"] = self.attach_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detach_error
        if self.detach_error:
            _dict["detachError"] = self.detach_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1VolumeAttachmentStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "attachError": (
                    V1VolumeError.from_dict(obj["attachError"])
                    if obj.get("attachError") is not None
                    else None
                ),
                "attached": (
                    obj.get("attached") if obj.get("attached") is not None else False
                ),
                "attachmentMetadata": obj.get("attachmentMetadata"),
                "detachError": (
                    V1VolumeError.from_dict(obj["detachError"])
                    if obj.get("detachError") is not None
                    else None
                ),
            }
        )
        return _obj

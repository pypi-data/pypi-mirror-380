# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_for_node import V1ForNode
from kubernetes_asyncio_pydantic.models.v1_for_zone import V1ForZone


class V1EndpointHints(BaseModel):
    """
    EndpointHints provides hints describing how an endpoint should be consumed.
    """  # noqa: E501

    for_nodes: Optional[List[V1ForNode]] = Field(
        default=None,
        description="forNodes indicates the node(s) this endpoint should be consumed by when using topology aware routing. May contain a maximum of 8 entries. This is an Alpha feature and is only used when the PreferSameTrafficDistribution feature gate is enabled.",
        alias="forNodes",
    )
    for_zones: Optional[List[V1ForZone]] = Field(
        default=None,
        description="forZones indicates the zone(s) this endpoint should be consumed by when using topology aware routing. May contain a maximum of 8 entries.",
        alias="forZones",
    )
    __properties: ClassVar[List[str]] = ["forNodes", "forZones"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1EndpointHints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in for_nodes (list)
        _items = []
        if self.for_nodes:
            for _item_for_nodes in self.for_nodes:
                if _item_for_nodes:
                    _items.append(_item_for_nodes.to_dict())
            _dict["forNodes"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in for_zones (list)
        _items = []
        if self.for_zones:
            for _item_for_zones in self.for_zones:
                if _item_for_zones:
                    _items.append(_item_for_zones.to_dict())
            _dict["forZones"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1EndpointHints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "forNodes": (
                    [V1ForNode.from_dict(_item) for _item in obj["forNodes"]]
                    if obj.get("forNodes") is not None
                    else None
                ),
                "forZones": (
                    [V1ForZone.from_dict(_item) for _item in obj["forZones"]]
                    if obj.get("forZones") is not None
                    else None
                ),
            }
        )
        return _obj

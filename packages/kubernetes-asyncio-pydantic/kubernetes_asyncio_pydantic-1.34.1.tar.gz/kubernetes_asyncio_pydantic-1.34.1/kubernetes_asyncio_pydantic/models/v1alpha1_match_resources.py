# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_label_selector import V1LabelSelector
from kubernetes_asyncio_pydantic.models.v1alpha1_named_rule_with_operations import (
    V1alpha1NamedRuleWithOperations,
)


class V1alpha1MatchResources(BaseModel):
    """
    MatchResources decides whether to run the admission control policy on an object based on whether it meets the match criteria. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)
    """  # noqa: E501

    exclude_resource_rules: Optional[List[V1alpha1NamedRuleWithOperations]] = Field(
        default=None,
        description="ExcludeResourceRules describes what operations on what resources/subresources the policy should not care about. The exclude rules take precedence over include rules (if a resource matches both, it is excluded)",
        alias="excludeResourceRules",
    )
    match_policy: Optional[StrictStr] = Field(
        default=None,
        description='matchPolicy defines how the "MatchResources" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".  - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, the admission policy does not consider requests to apps/v1beta1 or extensions/v1beta1 API groups.  - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, the admission policy **does** consider requests made to apps/v1beta1 or extensions/v1beta1 API groups. The API server translates the request to a matched resource API if necessary.  Defaults to "Equivalent"',
        alias="matchPolicy",
    )
    namespace_selector: Optional[V1LabelSelector] = Field(
        default=None,
        description='NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the policy.  For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {   "matchExpressions": [     {       "key": "runlevel",       "operator": "NotIn",       "values": [         "0",         "1"       ]     }   ] }  If instead you want to only run the policy on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {   "matchExpressions": [     {       "key": "environment",       "operator": "In",       "values": [         "prod",         "staging"       ]     }   ] }  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.  Default to the empty LabelSelector, which matches everything.',
        alias="namespaceSelector",
    )
    object_selector: Optional[V1LabelSelector] = Field(
        default=None,
        description="ObjectSelector decides whether to run the policy based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the policy's expression (CEL), and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.",
        alias="objectSelector",
    )
    resource_rules: Optional[List[V1alpha1NamedRuleWithOperations]] = Field(
        default=None,
        description="ResourceRules describes what operations on what resources/subresources the admission policy matches. The policy cares about an operation if it matches _any_ Rule.",
        alias="resourceRules",
    )
    __properties: ClassVar[List[str]] = [
        "excludeResourceRules",
        "matchPolicy",
        "namespaceSelector",
        "objectSelector",
        "resourceRules",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1alpha1MatchResources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in exclude_resource_rules (list)
        _items = []
        if self.exclude_resource_rules:
            for _item_exclude_resource_rules in self.exclude_resource_rules:
                if _item_exclude_resource_rules:
                    _items.append(_item_exclude_resource_rules.to_dict())
            _dict["excludeResourceRules"] = _items
        # override the default output from pydantic by calling `to_dict()` of namespace_selector
        if self.namespace_selector:
            _dict["namespaceSelector"] = self.namespace_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_selector
        if self.object_selector:
            _dict["objectSelector"] = self.object_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resource_rules (list)
        _items = []
        if self.resource_rules:
            for _item_resource_rules in self.resource_rules:
                if _item_resource_rules:
                    _items.append(_item_resource_rules.to_dict())
            _dict["resourceRules"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1alpha1MatchResources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "excludeResourceRules": (
                    [
                        V1alpha1NamedRuleWithOperations.from_dict(_item)
                        for _item in obj["excludeResourceRules"]
                    ]
                    if obj.get("excludeResourceRules") is not None
                    else None
                ),
                "matchPolicy": obj.get("matchPolicy"),
                "namespaceSelector": (
                    V1LabelSelector.from_dict(obj["namespaceSelector"])
                    if obj.get("namespaceSelector") is not None
                    else None
                ),
                "objectSelector": (
                    V1LabelSelector.from_dict(obj["objectSelector"])
                    if obj.get("objectSelector") is not None
                    else None
                ),
                "resourceRules": (
                    [
                        V1alpha1NamedRuleWithOperations.from_dict(_item)
                        for _item in obj["resourceRules"]
                    ]
                    if obj.get("resourceRules") is not None
                    else None
                ),
            }
        )
        return _obj

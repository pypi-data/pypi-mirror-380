# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1beta1_match_condition import (
    V1beta1MatchCondition,
)
from kubernetes_asyncio_pydantic.models.v1beta1_match_resources import (
    V1beta1MatchResources,
)
from kubernetes_asyncio_pydantic.models.v1beta1_mutation import V1beta1Mutation
from kubernetes_asyncio_pydantic.models.v1beta1_param_kind import V1beta1ParamKind
from kubernetes_asyncio_pydantic.models.v1beta1_variable import V1beta1Variable


class V1beta1MutatingAdmissionPolicySpec(BaseModel):
    """
    MutatingAdmissionPolicySpec is the specification of the desired behavior of the admission policy.
    """  # noqa: E501

    failure_policy: Optional[StrictStr] = Field(
        default=None,
        description="failurePolicy defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.  A policy is invalid if paramKind refers to a non-existent Kind. A binding is invalid if paramRef.name refers to a non-existent resource.  failurePolicy does not define how validations that evaluate to false are handled.  Allowed values are Ignore or Fail. Defaults to Fail.",
        alias="failurePolicy",
    )
    match_conditions: Optional[List[V1beta1MatchCondition]] = Field(
        default=None,
        description="matchConditions is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the matchConstraints. An empty list of matchConditions matches all requests. There are a maximum of 64 match conditions allowed.  If a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.  The exact matching logic is (in order):   1. If ANY matchCondition evaluates to FALSE, the policy is skipped.   2. If ALL matchConditions evaluate to TRUE, the policy is evaluated.   3. If any matchCondition evaluates to an error (but none are FALSE):      - If failurePolicy=Fail, reject the request      - If failurePolicy=Ignore, the policy is skipped",
        alias="matchConditions",
    )
    match_constraints: Optional[V1beta1MatchResources] = Field(
        default=None,
        description="matchConstraints specifies what resources this policy is designed to validate. The MutatingAdmissionPolicy cares about a request if it matches _all_ Constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API MutatingAdmissionPolicy cannot match MutatingAdmissionPolicy and MutatingAdmissionPolicyBinding. The CREATE, UPDATE and CONNECT operations are allowed.  The DELETE operation may not be matched. '*' matches CREATE, UPDATE and CONNECT. Required.",
        alias="matchConstraints",
    )
    mutations: Optional[List[V1beta1Mutation]] = Field(
        default=None,
        description="mutations contain operations to perform on matching objects. mutations may not be empty; a minimum of one mutation is required. mutations are evaluated in order, and are reinvoked according to the reinvocationPolicy. The mutations of a policy are invoked for each binding of this policy and reinvocation of mutations occurs on a per binding basis.",
    )
    param_kind: Optional[V1beta1ParamKind] = Field(
        default=None,
        description="paramKind specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If paramKind refers to a non-existent kind, this policy definition is mis-configured and the FailurePolicy is applied. If paramKind is specified but paramRef is unset in MutatingAdmissionPolicyBinding, the params variable will be null.",
        alias="paramKind",
    )
    reinvocation_policy: Optional[StrictStr] = Field(
        default=None,
        description='reinvocationPolicy indicates whether mutations may be called multiple times per MutatingAdmissionPolicyBinding as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".  Never: These mutations will not be called more than once per binding in a single admission evaluation.  IfNeeded: These mutations may be invoked more than once per binding for a single admission request and there is no guarantee of order with respect to other admission plugins, admission webhooks, bindings of this policy and admission policies.  Mutations are only reinvoked when mutations change the object after this mutation is invoked. Required.',
        alias="reinvocationPolicy",
    )
    variables: Optional[List[V1beta1Variable]] = Field(
        default=None,
        description="variables contain definitions of variables that can be used in composition of other expressions. Each variable is defined as a named CEL expression. The variables defined here will be available under `variables` in other expressions of the policy except matchConditions because matchConditions are evaluated before the rest of the policy.  The expression of a variable can refer to other variables defined earlier in the list but not those after. Thus, variables must be sorted by the order of first appearance and acyclic.",
    )
    __properties: ClassVar[List[str]] = [
        "failurePolicy",
        "matchConditions",
        "matchConstraints",
        "mutations",
        "paramKind",
        "reinvocationPolicy",
        "variables",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1MutatingAdmissionPolicySpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in match_conditions (list)
        _items = []
        if self.match_conditions:
            for _item_match_conditions in self.match_conditions:
                if _item_match_conditions:
                    _items.append(_item_match_conditions.to_dict())
            _dict["matchConditions"] = _items
        # override the default output from pydantic by calling `to_dict()` of match_constraints
        if self.match_constraints:
            _dict["matchConstraints"] = self.match_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mutations (list)
        _items = []
        if self.mutations:
            for _item_mutations in self.mutations:
                if _item_mutations:
                    _items.append(_item_mutations.to_dict())
            _dict["mutations"] = _items
        # override the default output from pydantic by calling `to_dict()` of param_kind
        if self.param_kind:
            _dict["paramKind"] = self.param_kind.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item_variables in self.variables:
                if _item_variables:
                    _items.append(_item_variables.to_dict())
            _dict["variables"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1MutatingAdmissionPolicySpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "failurePolicy": obj.get("failurePolicy"),
                "matchConditions": (
                    [
                        V1beta1MatchCondition.from_dict(_item)
                        for _item in obj["matchConditions"]
                    ]
                    if obj.get("matchConditions") is not None
                    else None
                ),
                "matchConstraints": (
                    V1beta1MatchResources.from_dict(obj["matchConstraints"])
                    if obj.get("matchConstraints") is not None
                    else None
                ),
                "mutations": (
                    [V1beta1Mutation.from_dict(_item) for _item in obj["mutations"]]
                    if obj.get("mutations") is not None
                    else None
                ),
                "paramKind": (
                    V1beta1ParamKind.from_dict(obj["paramKind"])
                    if obj.get("paramKind") is not None
                    else None
                ),
                "reinvocationPolicy": obj.get("reinvocationPolicy"),
                "variables": (
                    [V1beta1Variable.from_dict(_item) for _item in obj["variables"]]
                    if obj.get("variables") is not None
                    else None
                ),
            }
        )
        return _obj

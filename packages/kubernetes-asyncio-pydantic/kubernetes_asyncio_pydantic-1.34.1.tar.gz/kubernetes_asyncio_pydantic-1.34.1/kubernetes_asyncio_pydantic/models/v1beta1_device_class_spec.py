# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1beta1_device_class_configuration import (
    V1beta1DeviceClassConfiguration,
)
from kubernetes_asyncio_pydantic.models.v1beta1_device_selector import (
    V1beta1DeviceSelector,
)


class V1beta1DeviceClassSpec(BaseModel):
    """
    DeviceClassSpec is used in a [DeviceClass] to define what can be allocated and how to configure it.
    """  # noqa: E501

    config: Optional[List[V1beta1DeviceClassConfiguration]] = Field(
        default=None,
        description="Config defines configuration parameters that apply to each device that is claimed via this class. Some classses may potentially be satisfied by multiple drivers, so each instance of a vendor configuration applies to exactly one driver.  They are passed to the driver, but are not considered while allocating the claim.",
    )
    extended_resource_name: Optional[StrictStr] = Field(
        default=None,
        description="ExtendedResourceName is the extended resource name for the devices of this class. The devices of this class can be used to satisfy a pod's extended resource requests. It has the same format as the name of a pod's extended resource. It should be unique among all the device classes in a cluster. If two device classes have the same name, then the class created later is picked to satisfy a pod's extended resource requests. If two classes are created at the same time, then the name of the class lexicographically sorted first is picked.  This is an alpha field.",
        alias="extendedResourceName",
    )
    selectors: Optional[List[V1beta1DeviceSelector]] = Field(
        default=None,
        description="Each selector must be satisfied by a device which is claimed via this class.",
    )
    __properties: ClassVar[List[str]] = ["config", "extendedResourceName", "selectors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1DeviceClassSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in config (list)
        _items = []
        if self.config:
            for _item_config in self.config:
                if _item_config:
                    _items.append(_item_config.to_dict())
            _dict["config"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in selectors (list)
        _items = []
        if self.selectors:
            for _item_selectors in self.selectors:
                if _item_selectors:
                    _items.append(_item_selectors.to_dict())
            _dict["selectors"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1DeviceClassSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "config": (
                    [
                        V1beta1DeviceClassConfiguration.from_dict(_item)
                        for _item in obj["config"]
                    ]
                    if obj.get("config") is not None
                    else None
                ),
                "extendedResourceName": obj.get("extendedResourceName"),
                "selectors": (
                    [
                        V1beta1DeviceSelector.from_dict(_item)
                        for _item in obj["selectors"]
                    ]
                    if obj.get("selectors") is not None
                    else None
                ),
            }
        )
        return _obj

# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_device_sub_request import V1DeviceSubRequest
from kubernetes_asyncio_pydantic.models.v1_exact_device_request import (
    V1ExactDeviceRequest,
)


class V1DeviceRequest(BaseModel):
    """
    DeviceRequest is a request for devices required for a claim. This is typically a request for a single resource like a device, but can also ask for several identical devices. With FirstAvailable it is also possible to provide a prioritized list of requests.
    """  # noqa: E501

    exactly: Optional[V1ExactDeviceRequest] = Field(
        default=None,
        description="Exactly specifies the details for a single request that must be met exactly for the request to be satisfied.  One of Exactly or FirstAvailable must be set.",
    )
    first_available: Optional[List[V1DeviceSubRequest]] = Field(
        default=None,
        description="FirstAvailable contains subrequests, of which exactly one will be selected by the scheduler. It tries to satisfy them in the order in which they are listed here. So if there are two entries in the list, the scheduler will only check the second one if it determines that the first one can not be used.  DRA does not yet implement scoring, so the scheduler will select the first set of devices that satisfies all the requests in the claim. And if the requirements can be satisfied on more than one node, other scheduling features will determine which node is chosen. This means that the set of devices allocated to a claim might not be the optimal set available to the cluster. Scoring will be implemented later.",
        alias="firstAvailable",
    )
    name: StrictStr = Field(
        description="Name can be used to reference this request in a pod.spec.containers[].resources.claims entry and in a constraint of the claim.  References using the name in the DeviceRequest will uniquely identify a request when the Exactly field is set. When the FirstAvailable field is set, a reference to the name of the DeviceRequest will match whatever subrequest is chosen by the scheduler.  Must be a DNS label."
    )
    __properties: ClassVar[List[str]] = ["exactly", "firstAvailable", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DeviceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of exactly
        if self.exactly:
            _dict["exactly"] = self.exactly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in first_available (list)
        _items = []
        if self.first_available:
            for _item_first_available in self.first_available:
                if _item_first_available:
                    _items.append(_item_first_available.to_dict())
            _dict["firstAvailable"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DeviceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "exactly": (
                    V1ExactDeviceRequest.from_dict(obj["exactly"])
                    if obj.get("exactly") is not None
                    else None
                ),
                "firstAvailable": (
                    [
                        V1DeviceSubRequest.from_dict(_item)
                        for _item in obj["firstAvailable"]
                    ]
                    if obj.get("firstAvailable") is not None
                    else None
                ),
                "name": obj.get("name") if obj.get("name") is not None else "",
            }
        )
        return _obj

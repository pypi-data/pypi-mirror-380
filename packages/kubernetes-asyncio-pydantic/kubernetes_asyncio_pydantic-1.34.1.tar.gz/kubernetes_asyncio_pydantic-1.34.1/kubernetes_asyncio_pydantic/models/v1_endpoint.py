# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_endpoint_conditions import (
    V1EndpointConditions,
)
from kubernetes_asyncio_pydantic.models.v1_endpoint_hints import V1EndpointHints
from kubernetes_asyncio_pydantic.models.v1_object_reference import V1ObjectReference


class V1Endpoint(BaseModel):
    """
    Endpoint represents a single logical \"backend\" implementing a service.
    """  # noqa: E501

    addresses: List[StrictStr] = Field(
        description='addresses of this endpoint. For EndpointSlices of addressType "IPv4" or "IPv6", the values are IP addresses in canonical form. The syntax and semantics of other addressType values are not defined. This must contain at least one address but no more than 100. EndpointSlices generated by the EndpointSlice controller will always have exactly 1 address. No semantics are defined for additional addresses beyond the first, and kube-proxy does not look at them.'
    )
    conditions: Optional[V1EndpointConditions] = Field(
        default=None,
        description="conditions contains information about the current status of the endpoint.",
    )
    deprecated_topology: Optional[Dict[str, StrictStr]] = Field(
        default=None,
        description="deprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated, and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While this field can hold values, it is not writable through the v1 API, and any attempts to write to it will be silently ignored. Topology information can be found in the zone and nodeName fields instead.",
        alias="deprecatedTopology",
    )
    hints: Optional[V1EndpointHints] = Field(
        default=None,
        description="hints contains information associated with how an endpoint should be consumed.",
    )
    hostname: Optional[StrictStr] = Field(
        default=None,
        description="hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.",
    )
    node_name: Optional[StrictStr] = Field(
        default=None,
        description="nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.",
        alias="nodeName",
    )
    target_ref: Optional[V1ObjectReference] = Field(
        default=None,
        description="targetRef is a reference to a Kubernetes object that represents this endpoint.",
        alias="targetRef",
    )
    zone: Optional[StrictStr] = Field(
        default=None,
        description="zone is the name of the Zone this endpoint exists in.",
    )
    __properties: ClassVar[List[str]] = [
        "addresses",
        "conditions",
        "deprecatedTopology",
        "hints",
        "hostname",
        "nodeName",
        "targetRef",
        "zone",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Endpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict["conditions"] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hints
        if self.hints:
            _dict["hints"] = self.hints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_ref
        if self.target_ref:
            _dict["targetRef"] = self.target_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Endpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "addresses": obj.get("addresses"),
                "conditions": (
                    V1EndpointConditions.from_dict(obj["conditions"])
                    if obj.get("conditions") is not None
                    else None
                ),
                "deprecatedTopology": obj.get("deprecatedTopology"),
                "hints": (
                    V1EndpointHints.from_dict(obj["hints"])
                    if obj.get("hints") is not None
                    else None
                ),
                "hostname": obj.get("hostname"),
                "nodeName": obj.get("nodeName"),
                "targetRef": (
                    V1ObjectReference.from_dict(obj["targetRef"])
                    if obj.get("targetRef") is not None
                    else None
                ),
                "zone": obj.get("zone"),
            }
        )
        return _obj

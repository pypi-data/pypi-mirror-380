# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_capacity_request_policy_range import (
    V1CapacityRequestPolicyRange,
)
from kubernetes_asyncio_pydantic.models.v1_pod_spec_overhead_value import (
    V1PodSpecOverheadValue,
)
from kubernetes_asyncio_pydantic.models.v1beta1_capacity_request_policy_default import (
    V1beta1CapacityRequestPolicyDefault,
)


class V1CapacityRequestPolicy(BaseModel):
    """
    CapacityRequestPolicy defines how requests consume device capacity.  Must not set more than one ValidRequestValues.
    """  # noqa: E501

    default: Optional[V1beta1CapacityRequestPolicyDefault] = None
    valid_range: Optional[V1CapacityRequestPolicyRange] = Field(
        default=None,
        description="ValidRange defines an acceptable quantity value range in consuming requests.  If this field is set, Default must be defined and it must fall within the defined ValidRange.  If the requested amount does not fall within the defined range, the request violates the policy, and this device cannot be allocated.  If the request doesn't contain this capacity entry, Default value is used.",
        alias="validRange",
    )
    valid_values: Optional[List[V1PodSpecOverheadValue]] = Field(
        default=None,
        description="ValidValues defines a set of acceptable quantity values in consuming requests.  Must not contain more than 10 entries. Must be sorted in ascending order.  If this field is set, Default must be defined and it must be included in ValidValues list.  If the requested amount does not match any valid value but smaller than some valid values, the scheduler calculates the smallest valid value that is greater than or equal to the request. That is: min(ceil(requestedValue) ∈ validValues), where requestedValue ≤ max(validValues).  If the requested amount exceeds all valid values, the request violates the policy, and this device cannot be allocated.",
        alias="validValues",
    )
    __properties: ClassVar[List[str]] = ["default", "validRange", "validValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1CapacityRequestPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict["default"] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of valid_range
        if self.valid_range:
            _dict["validRange"] = self.valid_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in valid_values (list)
        _items = []
        if self.valid_values:
            for _item_valid_values in self.valid_values:
                if _item_valid_values:
                    _items.append(_item_valid_values.to_dict())
            _dict["validValues"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1CapacityRequestPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "default": (
                    V1beta1CapacityRequestPolicyDefault.from_dict(obj["default"])
                    if obj.get("default") is not None
                    else None
                ),
                "validRange": (
                    V1CapacityRequestPolicyRange.from_dict(obj["validRange"])
                    if obj.get("validRange") is not None
                    else None
                ),
                "validValues": (
                    [
                        V1PodSpecOverheadValue.from_dict(_item)
                        for _item in obj["validValues"]
                    ]
                    if obj.get("validValues") is not None
                    else None
                ),
            }
        )
        return _obj

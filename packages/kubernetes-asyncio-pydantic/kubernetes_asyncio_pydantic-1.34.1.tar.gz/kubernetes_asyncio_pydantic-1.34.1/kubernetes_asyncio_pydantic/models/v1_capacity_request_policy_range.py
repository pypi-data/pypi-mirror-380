# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1beta1_capacity_request_policy_range_max import (
    V1beta1CapacityRequestPolicyRangeMax,
)
from kubernetes_asyncio_pydantic.models.v1beta1_capacity_request_policy_range_min import (
    V1beta1CapacityRequestPolicyRangeMin,
)
from kubernetes_asyncio_pydantic.models.v1beta1_capacity_request_policy_range_step import (
    V1beta1CapacityRequestPolicyRangeStep,
)


class V1CapacityRequestPolicyRange(BaseModel):
    """
    CapacityRequestPolicyRange defines a valid range for consumable capacity values.    - If the requested amount is less than Min, it is rounded up to the Min value.   - If Step is set and the requested amount is between Min and Max but not aligned with Step,     it will be rounded up to the next value equal to Min + (n * Step).   - If Step is not set, the requested amount is used as-is if it falls within the range Min to Max (if set).   - If the requested or rounded amount exceeds Max (if set), the request does not satisfy the policy,     and the device cannot be allocated.
    """  # noqa: E501

    max: Optional[V1beta1CapacityRequestPolicyRangeMax] = None
    min: V1beta1CapacityRequestPolicyRangeMin
    step: Optional[V1beta1CapacityRequestPolicyRangeStep] = None
    __properties: ClassVar[List[str]] = ["max", "min", "step"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1CapacityRequestPolicyRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max
        if self.max:
            _dict["max"] = self.max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min
        if self.min:
            _dict["min"] = self.min.to_dict()
        # override the default output from pydantic by calling `to_dict()` of step
        if self.step:
            _dict["step"] = self.step.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1CapacityRequestPolicyRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "max": (
                    V1beta1CapacityRequestPolicyRangeMax.from_dict(obj["max"])
                    if obj.get("max") is not None
                    else None
                ),
                "min": (
                    V1beta1CapacityRequestPolicyRangeMin.from_dict(obj["min"])
                    if obj.get("min") is not None
                    else None
                ),
                "step": (
                    V1beta1CapacityRequestPolicyRangeStep.from_dict(obj["step"])
                    if obj.get("step") is not None
                    else None
                ),
            }
        )
        return _obj

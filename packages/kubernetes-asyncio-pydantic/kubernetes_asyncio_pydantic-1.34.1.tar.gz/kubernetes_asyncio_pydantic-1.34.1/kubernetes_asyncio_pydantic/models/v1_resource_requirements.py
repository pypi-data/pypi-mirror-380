# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1_pod_spec_overhead_value import (
    V1PodSpecOverheadValue,
)
from kubernetes_asyncio_pydantic.models.v1_resource_claim import V1ResourceClaim


class V1ResourceRequirements(BaseModel):
    """
    ResourceRequirements describes the compute resource requirements.
    """  # noqa: E501

    claims: Optional[List[V1ResourceClaim]] = Field(
        default=None,
        description="Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.  This field depends on the DynamicResourceAllocation feature gate.  This field is immutable. It can only be set for containers.",
    )
    limits: Optional[Dict[str, V1PodSpecOverheadValue]] = Field(
        default=None,
        description="Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )
    requests: Optional[Dict[str, V1PodSpecOverheadValue]] = Field(
        default=None,
        description="Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    )
    __properties: ClassVar[List[str]] = ["claims", "limits", "requests"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1ResourceRequirements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in claims (list)
        _items = []
        if self.claims:
            for _item_claims in self.claims:
                if _item_claims:
                    _items.append(_item_claims.to_dict())
            _dict["claims"] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in limits (dict)
        _field_dict = {}
        if self.limits:
            for _key_limits in self.limits:
                if self.limits[_key_limits]:
                    _field_dict[_key_limits] = self.limits[_key_limits].to_dict()
            _dict["limits"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in requests (dict)
        _field_dict = {}
        if self.requests:
            for _key_requests in self.requests:
                if self.requests[_key_requests]:
                    _field_dict[_key_requests] = self.requests[_key_requests].to_dict()
            _dict["requests"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1ResourceRequirements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "claims": (
                    [V1ResourceClaim.from_dict(_item) for _item in obj["claims"]]
                    if obj.get("claims") is not None
                    else None
                ),
                "limits": (
                    dict(
                        (_k, V1PodSpecOverheadValue.from_dict(_v))
                        for _k, _v in obj["limits"].items()
                    )
                    if obj.get("limits") is not None
                    else None
                ),
                "requests": (
                    dict(
                        (_k, V1PodSpecOverheadValue.from_dict(_v))
                        for _k, _v in obj["requests"].items()
                    )
                    if obj.get("requests") is not None
                    else None
                ),
            }
        )
        return _obj

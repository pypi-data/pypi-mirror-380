# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from kubernetes_asyncio_pydantic.models.v1beta1_counter import V1beta1Counter


class V1beta1DeviceCounterConsumption(BaseModel):
    """
    DeviceCounterConsumption defines a set of counters that a device will consume from a CounterSet.
    """  # noqa: E501

    counter_set: StrictStr = Field(
        description="CounterSet is the name of the set from which the counters defined will be consumed.",
        alias="counterSet",
    )
    counters: Dict[str, V1beta1Counter] = Field(
        description="Counters defines the counters that will be consumed by the device.  The maximum number counters in a device is 32. In addition, the maximum number of all counters in all devices is 1024 (for example, 64 devices with 16 counters each)."
    )
    __properties: ClassVar[List[str]] = ["counterSet", "counters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1DeviceCounterConsumption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in counters (dict)
        _field_dict = {}
        if self.counters:
            for _key_counters in self.counters:
                if self.counters[_key_counters]:
                    _field_dict[_key_counters] = self.counters[_key_counters].to_dict()
            _dict["counters"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1DeviceCounterConsumption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "counterSet": (
                    obj.get("counterSet") if obj.get("counterSet") is not None else ""
                ),
                "counters": (
                    dict(
                        (_k, V1beta1Counter.from_dict(_v))
                        for _k, _v in obj["counters"].items()
                    )
                    if obj.get("counters") is not None
                    else None
                ),
            }
        )
        return _obj

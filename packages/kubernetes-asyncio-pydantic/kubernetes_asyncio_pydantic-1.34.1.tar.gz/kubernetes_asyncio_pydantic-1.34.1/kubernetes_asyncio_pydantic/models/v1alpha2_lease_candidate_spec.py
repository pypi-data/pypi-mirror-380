# coding: utf-8

"""
merged spec

merged spec

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self


class V1alpha2LeaseCandidateSpec(BaseModel):
    """
    LeaseCandidateSpec is a specification of a Lease.
    """  # noqa: E501

    binary_version: StrictStr = Field(
        description="BinaryVersion is the binary version. It must be in a semver format without leading `v`. This field is required.",
        alias="binaryVersion",
    )
    emulation_version: Optional[StrictStr] = Field(
        default=None,
        description='EmulationVersion is the emulation version. It must be in a semver format without leading `v`. EmulationVersion must be less than or equal to BinaryVersion. This field is required when strategy is "OldestEmulationVersion"',
        alias="emulationVersion",
    )
    lease_name: StrictStr = Field(
        description="LeaseName is the name of the lease for which this candidate is contending. This field is immutable.",
        alias="leaseName",
    )
    ping_time: Optional[datetime] = Field(
        default=None,
        description="MicroTime is version of Time with microsecond level precision.",
        alias="pingTime",
    )
    renew_time: Optional[datetime] = Field(
        default=None,
        description="MicroTime is version of Time with microsecond level precision.",
        alias="renewTime",
    )
    strategy: StrictStr = Field(
        description="Strategy is the strategy that coordinated leader election will use for picking the leader. If multiple candidates for the same Lease return different strategies, the strategy provided by the candidate with the latest BinaryVersion will be used. If there is still conflict, this is a user error and coordinated leader election will not operate the Lease until resolved."
    )
    __properties: ClassVar[List[str]] = [
        "binaryVersion",
        "emulationVersion",
        "leaseName",
        "pingTime",
        "renewTime",
        "strategy",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1alpha2LeaseCandidateSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1alpha2LeaseCandidateSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "binaryVersion": (
                    obj.get("binaryVersion")
                    if obj.get("binaryVersion") is not None
                    else ""
                ),
                "emulationVersion": obj.get("emulationVersion"),
                "leaseName": (
                    obj.get("leaseName") if obj.get("leaseName") is not None else ""
                ),
                "pingTime": obj.get("pingTime"),
                "renewTime": obj.get("renewTime"),
                "strategy": obj.get("strategy"),
            }
        )
        return _obj

##################### generated by xml-casa (v2) from defintent.xml #################
##################### 24e4a55bc1407415b9ca0254317c55fa ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_defintent import defintent as _defintent_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _defintent:
    """
    defintent ---- Manually set scan intents

    
    Allows the user to manually set scan intents

    --------- parameter descriptions ---------------------------------------------

    vis       Name of input visibility file (MS)
              Default: none
              
                 Example: vis='ngc5921.ms'
    intent    select intent to add
              The list of strings will be combined into an intent string to be added
    mode      Intent modification mode (set/append)
    outputvis Creates an output ms with all the changes from the task leaving the original vis untouched.
    scan      Select Scan to apply the new intents to
    field     Select field using field id(s) or field name(s)
    obsid     Select ObsId
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of clearcal in CASA Docs:
    
    https://casa.nrao.edu/casadocs/
    
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Manually set scan intents"""

    def __call__( self, vis='', intent='', mode='', outputvis='', scan='', field='', obsid='' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'intent': {'type': 'cStr', 'coerce': _coerce.to_str}, 'mode': {'type': 'cStr', 'coerce': _coerce.to_str}, 'outputvis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'obsid': {'type': 'cStr', 'coerce': _coerce.to_str}}
        doc = {'vis': vis, 'intent': intent, 'mode': mode, 'outputvis': outputvis, 'scan': scan, 'field': field, 'obsid': obsid}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'defintent', [ 'vis=' + repr(_pc.document['vis']), 'intent=' + repr(_pc.document['intent']), 'mode=' + repr(_pc.document['mode']), 'outputvis=' + repr(_pc.document['outputvis']), 'scan=' + repr(_pc.document['scan']), 'field=' + repr(_pc.document['field']), 'obsid=' + repr(_pc.document['obsid']) ] )
        task_result = None
        try:
            task_result = _defintent_t( _pc.document['vis'], _pc.document['intent'], _pc.document['mode'], _pc.document['outputvis'], _pc.document['scan'], _pc.document['field'], _pc.document['obsid'] )
        except Exception as exc:
            _except_log('defintent', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'defintent', task_result )
        return task_result

defintent = _defintent( )


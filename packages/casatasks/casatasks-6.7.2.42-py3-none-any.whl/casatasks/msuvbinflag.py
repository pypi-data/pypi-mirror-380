##################### generated by xml-casa (v2) from msuvbinflag.xml ###############
##################### 82abe82f71c0bf31357db45d077c1513 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_msuvbinflag import msuvbinflag as _msuvbinflag_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _msuvbinflag:
    """
    msuvbinflag ---- An algorithm to identify outliers in the UV plane via the UV grid generated by msuvbin.
    Both msuvbin and msuvbinflag tasks are experimental
    

    
    Msuvbinflag is an automatic flagging algorithm for the identification
    of Radio Frequency Interference (RFI) in the UV plane. Prior to flagging,
    the visibilities in the input CASA Measurements Set (MS) have to be
    gridded onto a uniforme UV plane using the msuvbin task.
    
    The principle underlying this algorithm is that RFI typically appears as
    large scale ripples in the image domain, and therefore as compact structures
    in the UV domain. Astronomical sources tend to have the opposite behavior, i.e.,
    compact in the image domain and extended in the UV domain. Therefore by locating
    compact outlier structures in the UV domain it should be possible to flag RFI.
    
    

    --------- parameter descriptions ---------------------------------------------

    binnedvis d visibility data (MS) (the output of the msuvbin task).
              default: none;
              example: binnedvis='SNR_binnedvis.ms'
    method    are currently two algorithm options to identify outliers in the UV domain: radial_per_plane, radial_mean_annular
              
               radial_per_plane: This algorithm works independently
               on each plane (channel, polarization) of the binned ms. A mean radial profile is
               generated by doing a weighted average of all data at a given
               UV-radius. A polynomial is fit to the radially averaged
               profile. All the binned UV points that are larger than the
               nsigma threshold are flagged. The threshold is calculated as :
              
               originalValue[u,v] > radialfitValue[r]+nsigma*rms
              
               where (u,v) are the UV coordinates, r is the radial distance from the
               center, and rms is the rms of the radial profile at radius r.
              
              
               radial_mean_annular: This algorithm combines all the planes in the
               binned MS on to a single UV grid. This combined grid is then
               divided into annular circles from 0 through the maximum UV radius
               in log-spaced intervals. A radial profile is constructed by
               calculating the median values within each annulus, as well as
               the median absolute deviation scaled to the standard deviation.
               Similar to the radial_per_plane method, each plane is then individually
               treated, and a point in the UV plane is flagged if it is greater than
               the nsigma threshold. The threshold is calculated as :
              
               originalValue[u,v] > radiatValue[n] + nsigma*rms[n]
              
               where (u,v) are the UV coordinates, and n is the nth annulus.
              
              
              
              default: 'radial_per_plane'
              example: method='radial_mean_annular'
    nsigma    User defined nsigma value for flagging.
              The default value is 5.
    doplot    Generate plots of the radial profiles calculated prior to flagging. This can be useful to
              debug the performance of the algorithm, however it can severely impact runtime performance.
              In general you do not need to turn this option on.
              
              The default value is False.
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    
    
    msuvbinflag(binnedvis='SNR_G55_10s.ms', method='radial_per_plane', nsigma=5)
    
    Keyword arguments:
    binnedvis -- Name of input binned visibility file which is output from msuvbin.
    After msuvbinflag, binnedvis is modified with flagging info.
    
    method -- Three method options: "radian", "regional mean","median","gradient"
    default: 'radian'
    
    nsigma -- User set nsigma value for radial algorithm.
    default=5.0
    
    


    """

    _info_group_ = """flagging, manipulation, imaging"""
    _info_desc_ = """An algorithm to identify outliers in the UV plane via the UV grid generated by msuvbin.
      Both msuvbin and msuvbinflag tasks are experimental
  """

    def __call__( self, binnedvis, method='radial_per_plane', nsigma=float(5.0), doplot=False ):
        schema = {'binnedvis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'method': {'type': 'cVariant', 'coerce': [_coerce.to_variant] # <allowed> IS NOT ALLOWED FOR A PARAMETER OF TYPE any
}, 'nsigma': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'doplot': {'type': 'cBool'}}
        doc = {'binnedvis': binnedvis, 'method': method, 'nsigma': nsigma, 'doplot': doplot}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'msuvbinflag', [ 'binnedvis=' + repr(_pc.document['binnedvis']), 'method=' + repr(_pc.document['method']), 'nsigma=' + repr(_pc.document['nsigma']), 'doplot=' + repr(_pc.document['doplot']) ] )
        task_result = None
        try:
            task_result = _msuvbinflag_t( _pc.document['binnedvis'], _pc.document['method'], _pc.document['nsigma'], _pc.document['doplot'] )
        except Exception as exc:
            _except_log('msuvbinflag', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'msuvbinflag', task_result )
        return task_result

msuvbinflag = _msuvbinflag( )


##################### generated by xml-casa (v2) from polfromgain.xml ###############
##################### 81a3ae6d4c5273a4ac930473d37d18bb ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_polfromgain import polfromgain as _polfromgain_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _polfromgain:
    """
    polfromgain ---- Derive linear polarization from gain ratio

    
    TBD
    

    --------- parameter descriptions ---------------------------------------------

    vis      Name of input MS from which gaincal caltable in tablein originated.  Used to extract geometry information not available in the tablein caltable.
    tablein  Input gain calibration table corresponding to MS specified in vis.
    caltable Optional output calibration table which will contain source polarization-corrected gains, if specified
    paoffset Manual position angle offset (clockwise, in deg); added to value stored in the MS FEED subtable.  Use with care, since downstream calibration operation using polfromgain results will change according to this position angle offset.
    minpacov Minimum parallactic angle coverage (deg) required for Q,U estimation. Reliable Q,U estimation depends on adequate parallactic angle coverage, and this parameter enforces a minimum allowable range of parallactic angle (per antenna) for unflagged gain solutions before the Q,U esimation is attempted.  (If caltable is specified, gains for antennas failing the minpacov criteria will be corrected by the per-spw average of Q,U estimates from good antennas.)
    [1;42mRETURNS[1;m     void

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Derive linear polarization from gain ratio"""

    def __call__( self, vis='', tablein='', caltable='', paoffset=float(0.0), minpacov=float(30.0) ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr', 'coerce': _coerce.to_str}, 'paoffset': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'minpacov': {'type': 'cFloat', 'coerce': _coerce.to_float}}
        doc = {'vis': vis, 'tablein': tablein, 'caltable': caltable, 'paoffset': paoffset, 'minpacov': minpacov}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'polfromgain', [ 'vis=' + repr(_pc.document['vis']), 'tablein=' + repr(_pc.document['tablein']), 'caltable=' + repr(_pc.document['caltable']), 'paoffset=' + repr(_pc.document['paoffset']), 'minpacov=' + repr(_pc.document['minpacov']) ] )
        task_result = None
        try:
            task_result = _polfromgain_t( _pc.document['vis'], _pc.document['tablein'], _pc.document['caltable'], _pc.document['paoffset'], _pc.document['minpacov'] )
        except Exception as exc:
            _except_log('polfromgain', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'polfromgain', task_result )
        return task_result

polfromgain = _polfromgain( )


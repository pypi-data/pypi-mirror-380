##################### generated by xml-casa (v2) from sdatmcor.xml ##################
##################### e8ee8b38fa0a4cd83c694ea0c3a33a00 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_sdatmcor import sdatmcor as _sdatmcor_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _sdatmcor:
    """
    sdatmcor ---- Offline correction of residual atmospheric features

    
    
    The task sdatmcor provides the capability of offline correction of
    residual atmospheric features in the calibrated single-dish spectra
    which result from the difference of elevation angle between ON_SOURCE
    and OFF_SOURCE measurements.
    
    The correction factor is derived from the atmosphere model based on
    the atmospheric properties (temperature, pressure, etc.) measured
    during the observation. The model is constructed by the atmosphere
    (at) tool.
    
    For spw selection, two selection parameters, spw and outputspw,
    are available. The former specifies the data to be
    corrected while the latter corresponds to the spw for output.
    In practice, intersection of spw and outputspw is corrected.
    For example, when spw='19,23' and outputspw='19', spw 23 is not
    corrected because data for spw 23 is not written to outfile so
    that the correction is not meaningful.
    For data selection parameters other than spw,  only data selected
    by data selection parameters are corrected and written to the outfile.
    
    Note that outfile will have the data column DATA regardless of
    what data column exists in infile.

    --------- parameter descriptions ---------------------------------------------

    infile           name of input MS.
    datacolumn       name of data column to be used ["data", "float_data", or "corrected"]
    outfile          name of output MS.
    overwrite        allow to overwrite the output file if already exists.
    field            Select fields. Use field id(s) or name(s).
                     
                     If field string is a non-negative integer, it is assumed to
                     be a field index otherwise, it is assumed to be a field name.
                     
                     Default: ''= all fields
                     
                     Example:
                       field='0~2'; field ids 0,1,2
                       field='0,4,5~7'; field ids 0,4,5,6,7
                       field='3C286,3C295'; field named 3C286 and 3C295
                       field = '3,4C*'; field id 3, all names starting with 4C
    spw              Select spectral windows
                     
                     Note that spw specifies the list of spw ids to apply correction.
                     Spw ids to output should be specified by outputspw.
                     
                     Note also that channel selection is not available for this task.
                     
                     Default: ''=all spectral windows
                     Example:
                        spw='0~2,4'; spectral windows 0,1,2,4
                        spw='<2';   spectral windows less than 2 (i.e. 0,1)
                        spw='0,10'; spw 0,10
    scan             Scan number range
                     
                     Default: '' (all)
                     Example: scan='1~5'
    antenna          Select data based on antenna/baseline
                     
                     If antenna string is a non-negative integer, it is
                     assumed to be an antenna index, otherwise, it is
                     considered an antenna name.
                     
                     If specified selection doesn't contain any autocorrelation,
                     the selection will be tweaked to include autocorrelation data.
                     For example, 'PM02' will be interpreted as 'PM02&&&'.
                     
                     Default: '' (all)
                     Example:
                     antenna='5&6'; baseline between antenna index 5 and
                                   index 6.
                     antenna='VA05&VA06'; baseline between VLA antenna 5
                                         and 6.
                     antenna='5&6;7&8'; baselines 5-6 and 7-8
                     antenna='5'; all baselines with antenna index 5
                     antenna='05'; all baselines with antenna number 05
                                  (VLA old name)
                     antenna='5,6,9'; all baselines with antennas 5,6,9
                                     index number
    correlation      Correlation (polarization) types or expression
                     
                     Default: '' (all correlations)
                     Example: correlation='XX,YY'
    timerange        Range of time to select from data
                     
                     timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
                     Note: if YYYY/MM/DD is missing date defaults to first
                           day in data set
                     
                     Default: '' (all)
                     Example:
                     timerange='09:14:0~09:54:0' picks 40 min on first day
                     timerange='25:00:00~27:30:00' picks 1 hr to 3 hr
                               30min on NEXT day
                     timerange='09:44:00' pick data within one integration
                               of time
                     timerange='> 10:24:00' data after this time
    intent           Scan Intent(s)
                     
                     Default: '' (all)
                     Example:
                     intent='TARGET_SOURCE'
                     intent='TARGET_SOURCE1,TARGET_SOURCE2'
                     intent='TARGET_POINTING*'
    observation      Observation ID range
                     
                     Default: '' (all observations)
                     Example: observation='0~5'
    feed             feed selection
                     
                     Default: '' (all feeds)
                     Example: feed='0,1'
    msselect         Complicated data selection using TaQL
                     
                     Complicated data selection that cannot be supported by other
                     data selection parameters should be specified here using TaQL.
                     See Casacore Note 199 for detailed syntax of TaQL:
                     
                       https://casacore.github.io/casacore-notes/199.html
                     
                     Default: '' (all data)
                     Example:
                     msselect='ABS(DATA) < 1 && ANTENNA1 == ANTENNA2 + 1'
                     msselect='ROWNUMBER() < 100'
    outputspw        select spws to output, same syntax of spw.("" = all)
                     
                     Note that outputspw specifies the list of spw ids to output.
                     Spw ids to be corrected should be specified by spw.
                     
                     Note also that channel selection is not available for this task.
    gainfactor       Gain factor to multiply correction term.
                     
                     In ALMA data reduction, intensity of calibrated spectra, antenna
                     temperature Ta* in unit of Kelvin, is converted to Jansky (Jy)
                     by multiplying conversion factor. This parameter is intended to
                     apply exactly the same multiplicative factor to correction term.
                     If no conversion is applied to spectral data, gainfactor should
                     be 1.0, which means that the correction is in unit of Ta*.
                     The value can be float, dict, or string. Default is 1.0.
                     
                     Float value is interpreted as fixed factor, which is applied to all spws.
                     
                     Dict should be the pair of spw id (key) and the factor to be applied (value).
                     Key should be string rather than int.
                     
                     If string is given, it should be the name of caltable. For caltable,
                     inverse square of stored value is applied.
                     
                     Default: 1.0
                     Example: 10.0
                              {'17': 45.0, '19': 43.5, '21': 42.0, '23': 40.0}
                              'k2jycal.tbl'
    dtem_dh          temperature gradient [K/km], e.g. -5.6. ("" = Tool default)
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in K/km. String value should be the numeric value with unit
                     such as '-5.6K/km'.
                     
                     Default: '' (tool default, -5.6K/km, is used)
    h0               scale height for water [km], e.g. 2.0. ("" = Tool default)
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in kilometer. String value should be the numeric value with
                     unit compatible with length, such as '2km' or '2000m'.
    atmtype          Atmospheric type.
                     The value is directly passed to initialization method for ATM model.
                     The type should be specified as integer. Available options are,
                     
                       1: tropical
                       2: mid latitude summer (default)
                       3: mid latitude winter
                       4: subarctic summer
                       5: subarctic winter
    atmdetail        Expose parameters for detailed configuration of ATM model if True.
                     
                     The following parameters are exposed to the user if atmdetail is True:
                     
                       altitude
                       temperature
                       pressure
                       humidity
                       pwv
                       dp
                       dpm
                       layerboundaries
                       layertemperature
    altitude         Site altitude [m].
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in meter. String value should be the numeric value with
                     unit compatible with length, such as '5km' or '5000m'.
                     
                     Default value is taken from the input MS (ANTENNA table).
    temperature      Ambient temperature [K].
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in Kelvin. String value should be the numeric value with
                     unit, such as '270K'.
                     
                     Default value is taken from the input MS (ASDM_CALATMOSPHERE table).
    pressure         Ambient pressure [mbar].
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in mbar. String value should be the numeric value with
                     unit compatible with pressure, such as '1000mbar' or '1000hPa'.
                     
                     Default value is taken from the input MS (ASDM_CALATMOSPHERE table).
    humidity         Relative humidity [percent].
                     
                     If the value is explicitly specified, it should range from 0 to 100.
                     
                     Default value (-1) indicates that the value is taken from the input MS
                     (ASDM_CALATMOSPHERE table).
    pwv              Zenith water vapor [mm].
                     
                     The value is directly passed to configuration method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in millimeter. String value should be the numeric value with
                     the unit compatible with length, such as '0.3mm'
                     
                     Default value is taken from the input MS (ASDM_CALWVR table).
    dp               Initial pressure step.
                     
                     The value is directly passed to initialization method for ATM model.
                     Float and string types are acceptable. Float value is interpreted as
                     the value in mbar. String value should be the numeric value with
                     unit compatible with pressure, such as '10mbar' or '10hPa'.
                     
                     Default value ('') indicates to use tool default (10mbar).
    dpm              Pressure multiplicative factor for steps.
                     
                     The value is directly passed to initialization method for ATM model.
                     Default value (-1) indicates to use tool default (1.2).
    layerboundaries  Altitude of user-defined temperature profile.
                     
                     The value is directly passed to initialization method for ATM model.
                     String, list of strings, and list of float values are acceptable.
                     
                     For list inputs, float values are interpreted as the value in meter
                     while the string values should be the numeric value with the unit
                     compatible with length.
                     
                     For string input, the value should be comma separated list of
                     strings consisting of numeric value and the unit compatible with
                     length.
                     
                     Number of values should be identical to the number for layertemperature.
                     
                     Default value ('') indicates to use tool default.
                     
                     Example: [1000, 2000]
                              ['1km', '2km']
                              '1km,2km'
    layertemperature User-defined temperature profile [K].
                     
                     The value is directly passed to initialization method for ATM model.
                     String, list of strings, and list of float values are acceptable.
                     
                     For list inputs, float values are interpreted as the value in Kelvin
                     while the string values should be the numeric value with unit.
                     
                     For string input, the value should be comma separated list of
                     strings consisting of numeric value and unit.
                     
                     Number of values should be identical to the number for layerboundaries.
                     
                     Example: [250, 240]
                              ['250K', '240K']
                              '250K,240K'

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """single dish"""
    _info_desc_ = """Offline correction of residual atmospheric features"""

    def __call__( self, infile='', datacolumn='data', outfile='', overwrite=False, field='', spw='', scan='', antenna='', correlation='', timerange='', intent='', observation='', feed='', msselect='', outputspw='', gainfactor=float(1.0), dtem_dh='', h0='', atmtype=int(2), atmdetail=False, altitude='', temperature='', pressure='', humidity=float(-1), pwv='', dp='', dpm=float(-1), layerboundaries='', layertemperature='' ):
        schema = {'infile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'datacolumn': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'data', 'float_data', 'corrected' ]}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'antenna': {'type': 'cStr', 'coerce': _coerce.to_str}, 'correlation': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'intent': {'type': 'cStr', 'coerce': _coerce.to_str}, 'observation': {'type': 'cStr', 'coerce': _coerce.to_str}, 'feed': {'type': 'cStr', 'coerce': _coerce.to_str}, 'msselect': {'type': 'cStr', 'coerce': _coerce.to_str}, 'outputspw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'gainfactor': {'anyof': [{'type': 'cFloat', 'coerce': _coerce.to_float}, {'type': 'cDict'}, {'type': 'cStr', 'coerce': _coerce.to_str}]}, 'dtem_dh': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'h0': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'atmtype': {'type': 'cInt'}, 'atmdetail': {'type': 'cBool'}, 'altitude': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'temperature': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'pressure': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'humidity': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'pwv': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'dp': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'dpm': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'layerboundaries': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}]}, 'layertemperature': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}]}}
        doc = {'infile': infile, 'datacolumn': datacolumn, 'outfile': outfile, 'overwrite': overwrite, 'field': field, 'spw': spw, 'scan': scan, 'antenna': antenna, 'correlation': correlation, 'timerange': timerange, 'intent': intent, 'observation': observation, 'feed': feed, 'msselect': msselect, 'outputspw': outputspw, 'gainfactor': gainfactor, 'dtem_dh': dtem_dh, 'h0': h0, 'atmtype': atmtype, 'atmdetail': atmdetail, 'altitude': altitude, 'temperature': temperature, 'pressure': pressure, 'humidity': humidity, 'pwv': pwv, 'dp': dp, 'dpm': dpm, 'layerboundaries': layerboundaries, 'layertemperature': layertemperature}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'sdatmcor', [ 'infile=' + repr(_pc.document['infile']), 'datacolumn=' + repr(_pc.document['datacolumn']), 'outfile=' + repr(_pc.document['outfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'scan=' + repr(_pc.document['scan']), 'antenna=' + repr(_pc.document['antenna']), 'correlation=' + repr(_pc.document['correlation']), 'timerange=' + repr(_pc.document['timerange']), 'intent=' + repr(_pc.document['intent']), 'observation=' + repr(_pc.document['observation']), 'feed=' + repr(_pc.document['feed']), 'msselect=' + repr(_pc.document['msselect']), 'outputspw=' + repr(_pc.document['outputspw']), 'gainfactor=' + repr(_pc.document['gainfactor']), 'dtem_dh=' + repr(_pc.document['dtem_dh']), 'h0=' + repr(_pc.document['h0']), 'atmtype=' + repr(_pc.document['atmtype']), 'atmdetail=' + repr(_pc.document['atmdetail']), 'altitude=' + repr(_pc.document['altitude']), 'temperature=' + repr(_pc.document['temperature']), 'pressure=' + repr(_pc.document['pressure']), 'humidity=' + repr(_pc.document['humidity']), 'pwv=' + repr(_pc.document['pwv']), 'dp=' + repr(_pc.document['dp']), 'dpm=' + repr(_pc.document['dpm']), 'layerboundaries=' + repr(_pc.document['layerboundaries']), 'layertemperature=' + repr(_pc.document['layertemperature']) ] )
        task_result = None
        try:
            task_result = _sdatmcor_t( _pc.document['infile'], _pc.document['datacolumn'], _pc.document['outfile'], _pc.document['overwrite'], _pc.document['field'], _pc.document['spw'], _pc.document['scan'], _pc.document['antenna'], _pc.document['correlation'], _pc.document['timerange'], _pc.document['intent'], _pc.document['observation'], _pc.document['feed'], _pc.document['msselect'], _pc.document['outputspw'], _pc.document['gainfactor'], _pc.document['dtem_dh'], _pc.document['h0'], _pc.document['atmtype'], _pc.document['atmdetail'], _pc.document['altitude'], _pc.document['temperature'], _pc.document['pressure'], _pc.document['humidity'], _pc.document['pwv'], _pc.document['dp'], _pc.document['dpm'], _pc.document['layerboundaries'], _pc.document['layertemperature'] )
        except Exception as exc:
            _except_log('sdatmcor', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'sdatmcor', task_result )
        return task_result

sdatmcor = _sdatmcor( )


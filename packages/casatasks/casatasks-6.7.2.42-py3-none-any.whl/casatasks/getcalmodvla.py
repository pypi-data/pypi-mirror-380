##################### generated by xml-casa (v2) from getcalmodvla.xml ##############
##################### e2069cb4389a7df15be10805dc748018 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_getcalmodvla import getcalmodvla as _getcalmodvla_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _getcalmodvla:
    """
    getcalmodvla ---- Retrieve calibrator brightness distributions from a VLA web service.

    
    This application retrieves calibrator information via a VLA web service
    and writes this information as a componentlist so that it may be used by applications
    downstream.
    

    --------- parameter descriptions ---------------------------------------------

    outfile   The name of the output component list to be written. Must be specified
              Default: none, must be specified
                 Example: outfile="3c273.cl"
    overwrite Overwrite a file or directory of the same name of outfile if it exists. If overwrite=False and a file or directory of the same name as outfile exists, an exception will be thrown.
    source    The calibrator name. The case-insensitive names
              "3C48", "3C286", "3C138",
              and "3C147" are supported. Exactly one of source
              or direction must be specified.
    direction An alternative to source. It is the direction of the calibrator. The supported
              formats are of the form "EPOCH LONGITUDE LATITUDE", eg
              
              "J2000 12:34:56 -12.34.56".
              "J2000 19h53m50 40d06m00"
              "B1950 292.5deg -40.0deg"
              "ICRS 13:05:27.2780 -049.28.04.458"
              "GALACTIC 47.5rad -60.22rad"
              
              Only astronomical coordinate systems should be used; eg AZEL is right out. The web service
              will attempt to locate a known calibrator near this direction, where "near" is defined by
              the web service team. Exactly one of source or direction must be specified.
    band      A string representing the case-insensitive code of
              the band for which the data are required. For the VLA,
              supported codes are "P", "L", "S", "C", "X", "U", "K", "A", and "Q".
    obsdate   The date for which to obtain the calibrator information. If numeric,
              is assumed to be an MJD. If a string, is assumed to be a date and must
              be of the form "YYYY-MM-DD".
    refdate   The reference date after which new database entries will be ignored. If numeric,
              is assumed to be an MJD. If a string, is assumed to be a date and must
              be of the form "YYYY-MM-DD". Used to support
              historical reproducibility. A non-positive value will result in this parameter being ignored,
              and the most recent entry will be used (which may be later than obsdate).
    hosts     List of hostnames to use when querying the web service. They will be queried in
              order until a successful response is received.
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    SEE TASK DESCRIPTION IN CASADOCS
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Retrieve calibrator brightness distributions from a VLA web service."""

    def __call__( self, outfile='', overwrite=False, source='', direction='', band='', obsdate=int(0), refdate=int(0), hosts=[ 'http://obs.vla.nrao.edu/calmodvla' ] ):
        schema = {'outfile': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'overwrite': {'type': 'cBool'}, 'source': {'type': 'cStr', 'coerce': _coerce.to_str}, 'direction': {'type': 'cStr', 'coerce': _coerce.to_str}, 'band': {'type': 'cStr', 'coerce': _coerce.to_str}, 'obsdate': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'refdate': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'hosts': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}}
        doc = {'outfile': outfile, 'overwrite': overwrite, 'source': source, 'direction': direction, 'band': band, 'obsdate': obsdate, 'refdate': refdate, 'hosts': hosts}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'getcalmodvla', [ 'outfile=' + repr(_pc.document['outfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'source=' + repr(_pc.document['source']), 'direction=' + repr(_pc.document['direction']), 'band=' + repr(_pc.document['band']), 'obsdate=' + repr(_pc.document['obsdate']), 'refdate=' + repr(_pc.document['refdate']), 'hosts=' + repr(_pc.document['hosts']) ] )
        task_result = None
        try:
            task_result = _getcalmodvla_t( _pc.document['outfile'], _pc.document['overwrite'], _pc.document['source'], _pc.document['direction'], _pc.document['band'], _pc.document['obsdate'], _pc.document['refdate'], _pc.document['hosts'] )
        except Exception as exc:
            _except_log('getcalmodvla', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'getcalmodvla', task_result )
        return task_result

getcalmodvla = _getcalmodvla( )


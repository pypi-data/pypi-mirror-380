##################### generated by xml-casa (v2) from nrobeamaverage.xml ############
##################### a845209a9e306f10ea04d323c4c5103b ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_nrobeamaverage import nrobeamaverage as _nrobeamaverage_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _nrobeamaverage:
    """
    nrobeamaverage ---- Average SD data over beams and do time averaging

    
    
    The task nrobeamaverage is for Nobeyama dataset of ON-ON observations.
    It averages on-source spectra having specified beam IDs over specified
    time bins.
    

    --------- parameter descriptions ---------------------------------------------

    infile     name of input SD dataset
    datacolumn name of data column to be used ["data", "float_data", or "corrected_data"]
    field      select data by field IDs and names, e.g. "3C2*" (""=all)
    spw        select data by IF IDs (spectral windows), e.g. "3,5,7" (""=all)
    timerange  select data by time range, e.g. "09:14:0~09:54:0" (""=all) (see examples in help)
    scan       select data by scan numbers, e.g. "21~23" (""=all)
    beam       beam IDs to be averaged over, e.g. "1,3" (""=all)
    timebin    bin width for time averaging.
    outfile    name of output file

    --------- examples -----------------------------------------------------------

    
    -----------------
    Keyword arguments
    -----------------
    infile -- name of input SD dataset
    datacolumn -- name of data column to be used
    options: 'data', 'float_data', or 'corrected_data'
    default: 'float_data'
    field -- select data by field IDs and names
    default: '' (use all fields)
    example: field='3C2*' (all names starting with 3C2)
    field='0,4,5~7' (field IDs 0,4,5,6,7)
    field='0,3C273' (field ID 0 or field named 3C273)
    this selection is in addition to the other selections to data
    spw -- select data by IF IDs (spectral windows)
    default: '' (use all IFs)
    example: spw='0~2,4'; spectral windows 0,1,2,4 (all channels)
    spw='<2';  spectral windows less than 2 (i.e. 0,1)
    this selection is in addition to the other selections to data
    timerange -- select data by time range
    default: '' (use all)
    example: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
    Note: YYYY/MM/DD can be dropped as needed:
    timerange='09:14:00~09:54:00' # this time range
    timerange='09:44:00' # data within one integration of time
    timerange='>10:24:00' # data after this time
    timerange='09:44:00+00:13:00' #data 13 minutes after time
    this selection is in addition to the other selections to data
    scan -- select data by scan numbers
    default: '' (use all scans)
    example: scan='21~23' (scan IDs 21,22,23)
    this selection is in addition to the other selections to data
    beam -- beam IDs to be averaged over
    default: '' (all beam IDs)
    example: beam='1,3' (beam IDs 1 and 3)
    NOTE: beam IDs of averaged spectra in the output file will
    be the smallest one, e.g., in case of beam='1,3',
    the averaged output spectra will have beam ID 1.
    Note also that beam IDs should be stored in the
    ANTENNA column of input MS.
    timebin -- bin width for time averaging
    default: '' (only beam IDs changed, no time averaging)
    outfile -- name of output file


    """

    _info_group_ = """single dish"""
    _info_desc_ = """Average SD data over beams and do time averaging"""

    def __call__( self, infile='', datacolumn='float_data', field='', spw='', timerange='', scan='', beam='', timebin='0s', outfile='' ):
        schema = {'infile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'datacolumn': {'type': 'cStr', 'coerce': _coerce.to_str}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'beam': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timebin': {'type': 'cStr', 'coerce': _coerce.to_str}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}}
        doc = {'infile': infile, 'datacolumn': datacolumn, 'field': field, 'spw': spw, 'timerange': timerange, 'scan': scan, 'beam': beam, 'timebin': timebin, 'outfile': outfile}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'nrobeamaverage', [ 'infile=' + repr(_pc.document['infile']), 'datacolumn=' + repr(_pc.document['datacolumn']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'timerange=' + repr(_pc.document['timerange']), 'scan=' + repr(_pc.document['scan']), 'beam=' + repr(_pc.document['beam']), 'timebin=' + repr(_pc.document['timebin']), 'outfile=' + repr(_pc.document['outfile']) ] )
        task_result = None
        try:
            task_result = _nrobeamaverage_t( _pc.document['infile'], _pc.document['datacolumn'], _pc.document['field'], _pc.document['spw'], _pc.document['timerange'], _pc.document['scan'], _pc.document['beam'], _pc.document['timebin'], _pc.document['outfile'] )
        except Exception as exc:
            _except_log('nrobeamaverage', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'nrobeamaverage', task_result )
        return task_result

nrobeamaverage = _nrobeamaverage( )


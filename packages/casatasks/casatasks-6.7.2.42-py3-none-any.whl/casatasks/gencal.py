##################### generated by xml-casa (v2) from gencal.xml ####################
##################### c1c8e47ed65e84953105bd45e8a50894 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_gencal import gencal as _gencal_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _gencal:
    """
    gencal ---- Specify Calibration Values of Various Types

    
    The gencal task provides a means of specifying antenna-based
    calibration values manually.  The values are put in designated tables
    and applied to the data using applycal. Several specialized
    calibrations are also generated with gencal.
    
    Current antenna-based gencal options (caltype) are:
    
    - 'amp'= amplitude correction
    - 'ph' = phase correction
    - 'sbd'= single-band delay (phase-frequency slope for each spw)
    - 'mbd'= multi-band delay (phase-frequency slope over all spw)
    - 'antpos' = ITRF antenna position corrections
    - 'antposvla' = VLA-centric antenna position corrections
    - 'tsys' = Tsys from the SYSCAL table (ALMA)
    - 'swpow' = EVLA switched-power gains (experimental)
    - ?swpwts? = EVLA switched-power for weights only, no temperature rescaling
    - 'evlagain' (='swpow') (this syntax will deprecate)
    - 'rq' = EVLA requantizer gains _only_
    - 'swp/rq' = EVLA switched-power gains divided by requantizer gain
    - 'opac' = Tropospheric opacity
    - 'gc' = Gain curve (zenith-angle-dependent gain) (VLA only)
    - 'eff' = Antenna efficiency (sqrt(K/Jy)) (VLA only)
    - 'gceff' = Gain curve and efficiency (VLA only)
    - 'tecim' = Time-dep TEC image specified in infile
    - 'jyperk'= Jy/K factor via Jy/K DB Web API
    - 'eop' = EOP corrections

    --------- parameter descriptions ---------------------------------------------

    vis                Name of input visibility file
                                            Default: none
                       
                                               Example: vis='ngc5921.ms'
    caltable           Name of input calibration table
                       
                                            Default: none
                       
                                            If a calibration table does not exist, it will be
                                            created. Specifying an existing table will result
                                            in the parameters being applied
                                            cumulatively. Only a single time-stamp for all
                                            calibrations are supported, currently.  Do not
                                            use a caltable created by gaincal, bandpass,
                                            etc. 
                       
                                               Example: caltable='test.G'
    caltype            The calibration parameter type being specified
                                            Default: none
                                            Options: 'amp', 'ph', 'sbd', 'mbd', 'antpos',
                                            'antposvla', 'tsys', 'evlagain', 'opac', 'gc',
                                            'gceff', 'eff', 'tecim', 'jyperk', 'eop'
                       
                                            - 'amp' = gain (G) amplitude (1 real parameter
                                               per pol, antenna, spw)
                                            - 'ph'  = gain (G) phase (deg) (1 real parameter
                                               per pol, antenna, spw)
                                            - 'sbd' = single-band delays (nsec) (1 real
                                               parameter per pol, antenna, spw)
                                            - 'mbd' = multi-band delay (nsec) (1 real
                                               parameter per pol, antenna, spw)
                                            - 'antpos' = antenna position corrections (m) (3
                                               real ITRF offset parameters per antenna; spw,
                                               pol selection will be ignored)
                                               With antenna='', this triggers an automated
                                               lookup of antenna positions for EVLA. For ALMA
                                               an input file generated with getantposalma task
                                               can be input in paramter infile.
                                            - 'antposvla' = antenna position corrections (m)
                                               specified in the old VLA-centric coordinate
                                               system
                                            - 'tsys' = Tsys from the SYSCAL table (ALMA)
                                            - ?swpwts? = EVLA switched-power weights
                                            - 'evlagain' = EVLA switched-power gains
                                               (experimental)
                                            - 'opac' = Tropospheric opacity (1 real parameter
                                               per antenna, spw)
                                            - 'gc' = Antenna zenith-angle dependent gain
                                               curve (auto-lookup)
                                            - 'gceff' = Gain curve and efficiency
                                               (auto-lookup)
                                            - 'eff' = Antenna efficiency (auto-lookup)
                                            - 'jyperk' = Jy/K factor via Jy/K DB Web API
                                            - 'eop' = EOP corrections
                       
                                               Example: caltype='ph'
    infile             Input ancilliary file
                                        Subparameter of caltype='antpos|gc|gceff|tecim|jyperk'
                                        Default: none
                       
                                        The format of the file in case of 'antpos' is JSON.
                                        The file contains the information about the antenna
                                        positions as well as some metadata. As a reference,
                                        this code snippet would create the most minimal JSON file
                                        that can be used by **gencal**
                       
                       ::
                          import json
                          ...
                          with open("outfile.json", "w") as f:
                              json.dump({"data":{"ANT1" : [500000, 500000, 500000]}, "metadata" : {"product_code": "antposalma"} }, f)
    endpoint           Input endpoint of the Jy/K DB Web API.
                       Subparameter of caltype='jyperk'
                       Default: 'asdm'
                       Options: 'asdm', 'model-fit', 'interpolation'
                       
                       The 'interpolation' option may not work for the data after 2019.
    timeout            Maximum waiting time [sec] for the Web API access.
                       Subparameter of caltype='jyperk'
                       Default: 180
    retry              Number of retry when the Web API access fails.
                       Subparameter of caltype='jyperk'
                       Default: 3
    retry_wait_time    Waiting time [sec] until next query, when the Web API access fails.
                       Subparameter of caltype='jyperk'
                       Default: 5
    ant_pos_time_limit Maximum number of days beyond the observation for which a
                       correction should be included in the final offset. This subparameter has only
                       an effect on VLA data.
                                  Subparameter of caltype='antpos'
                                  Default: 0
    spw                Select spectral window/channels
                                Default: '' (all spectral windows and channels)
                       
                                   Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw
                                   3 - chans 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2
                                   through 6 in each.
                                   spw = '\*:3~64'  channels 3 through 64 for all sp id's
                                   spw = ' :3~64' will NOT work.
    antenna            Select data based on antenna/baseline
                                            Subparameter of selectdata=True
                                            Default: '' (all)
                       
                                            If antenna string is a non-negative integer, it
                                            is assumed an antenna index, otherwise, it is
                                            assumed as an antenna name
                         
                                                Examples: 
                                                antenna='5&6'; baseline between antenna
                                                index 5 and index 6.
                                                antenna='VA05&VA06'; baseline between VLA
                                                antenna 5 and 6.
                                                antenna='5&6;7&8'; baselines with
                                                indices 5-6 and 7-8
                                                antenna='5'; all baselines with antenna index
                                                5
                                                antenna='05'; all baselines with antenna
                                                number 05 (VLA old name)
                                                antenna='5,6,10'; all baselines with antennas
                                                5,6,10 index numbers
    pol                Polarization selection for specified parameters
                                            Default: pol='' (specified parameters apply to
                                            all polarizations)
                       
                                               Example: pol='R' (specified parameters to
                                               apply to R only)
    parameter          The calibration values
                       
                                            The calibration parameters, specified as a list,
                                            to store in the caltable for the spw, antenna,
                                            and pol selection.  The required length of the
                                            list is determined by the caltype and the spw,
                                            antenna, pol selection.  One "set" of parameters
                                            (e.g., one value for 'amp', 'ph', etc., three
                                            values for 'antpos') specified the same value for
                                            all indicated spw, antenna, and pol.
                                            OR, 
                                            When specifying a long list of calibration
                                            parameter values, these should be ordered first
                                            (fastest) by pol (if pol!=''), then by antenna
                                            (if antenna!=''), and finally (sloweset) by spw
                                            (if spw!='').  Unspecified selection axes must
                                            not be enumerated in the parameter list
    uniform            Assume uniform calibration values across the array
                       Subparameter of caltype='tsys'
                        Default: True
                        Options: True|False
    [1;42mRETURNS[1;m               void

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF GENCAL IN CASA DOCS:
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Specify Calibration Values of Various Types"""

    def __call__( self, vis='', caltable='', caltype='', infile='', endpoint='asdm', timeout=int(180), retry=int(3), retry_wait_time=int(5), ant_pos_time_limit=int(0), spw='', antenna='', pol='', parameter=[  ], uniform=True ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr', 'coerce': _coerce.to_str}, 'caltype': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'eff', 'antposvla', 'swpwts', 'mbd', 'opac', 'gc', 'antpos', 'tsys', 'swp/rq', 'swpow', 'amp', 'tecim', 'gceff', 'jyperk', 'eop', 'ph', 'rq', 'evlagain', 'sbd' ]}, 'infile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'endpoint': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timeout': {'type': 'cInt'}, 'retry': {'type': 'cInt'}, 'retry_wait_time': {'type': 'cInt'}, 'ant_pos_time_limit': {'type': 'cInt'}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'antenna': {'type': 'cStr', 'coerce': _coerce.to_str}, 'pol': {'type': 'cStr', 'coerce': _coerce.to_str}, 'parameter': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'uniform': {'type': 'cBool'}}
        doc = {'vis': vis, 'caltable': caltable, 'caltype': caltype, 'infile': infile, 'endpoint': endpoint, 'timeout': timeout, 'retry': retry, 'retry_wait_time': retry_wait_time, 'ant_pos_time_limit': ant_pos_time_limit, 'spw': spw, 'antenna': antenna, 'pol': pol, 'parameter': parameter, 'uniform': uniform}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'gencal', [ 'vis=' + repr(_pc.document['vis']), 'caltable=' + repr(_pc.document['caltable']), 'caltype=' + repr(_pc.document['caltype']), 'infile=' + repr(_pc.document['infile']), 'endpoint=' + repr(_pc.document['endpoint']), 'timeout=' + repr(_pc.document['timeout']), 'retry=' + repr(_pc.document['retry']), 'retry_wait_time=' + repr(_pc.document['retry_wait_time']), 'ant_pos_time_limit=' + repr(_pc.document['ant_pos_time_limit']), 'spw=' + repr(_pc.document['spw']), 'antenna=' + repr(_pc.document['antenna']), 'pol=' + repr(_pc.document['pol']), 'parameter=' + repr(_pc.document['parameter']), 'uniform=' + repr(_pc.document['uniform']) ] )
        task_result = None
        try:
            task_result = _gencal_t( _pc.document['vis'], _pc.document['caltable'], _pc.document['caltype'], _pc.document['infile'], _pc.document['endpoint'], _pc.document['timeout'], _pc.document['retry'], _pc.document['retry_wait_time'], _pc.document['ant_pos_time_limit'], _pc.document['spw'], _pc.document['antenna'], _pc.document['pol'], _pc.document['parameter'], _pc.document['uniform'] )
        except Exception as exc:
            _except_log('gencal', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'gencal', task_result )
        return task_result

gencal = _gencal( )


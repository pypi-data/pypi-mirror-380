##################### generated by xml-casa (v2) from sdpolaverage.xml ##############
##################### 6ce0e4d70928a41ecc113cd78a7d2fa9 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_sdpolaverage import sdpolaverage as _sdpolaverage_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _sdpolaverage:
    """
    sdpolaverage ---- Average SD spectra over polarisation

    
    
    The task sdpolaverage exports data averaged over different polarisations.
    Scope of this task is to obtain Stokes I from orthogonal autocorrelation
    pairs (XXYY/LLRR). Available options include:
    
    * '' (blank string as the default: polarisation averaging turned off)
    * stokes
    * geometric

    --------- parameter descriptions ---------------------------------------------

    infile     name of input SD dataset
    datacolumn name of data column to be used ["data", "float_data", or "corrected_data"]
    antenna    select data by antenna name or ID, e.g. "PM03"
    field      select data by field IDs and names, e.g. "3C2*" (""=all)
    spw        select data by IF IDs (spectral windows), e.g. "3,5,7" (""=all)
    timerange  select data by time range, e.g. "09:14:0~09:54:0" (""=all) (see examples in help)
    scan       select data by scan numbers, e.g. "21~23" (""=all)
    intent     select data by observational intent, e.g. "*ON_SOURCE*" (""=all)
    polaverage polarization averaging mode ("", "stokes" or "geometric").
    outfile    name of output file

    --------- examples -----------------------------------------------------------

    
    -----------------
    Keyword arguments
    -----------------
    infile -- name of input SD dataset
    datacolumn -- name of data column to be used
    options: 'data', 'float_data', or 'corrected_data'
    default: 'data'
    antenna -- select data by antenna name or ID
    default: '' (use all antennas)
    example: 'PM03'
    field -- select data by field IDs and names
    default: '' (use all fields)
    example: field='3C2*' (all names starting with 3C2)
    field='0,4,5~7' (field IDs 0,4,5,6,7)
    field='0,3C273' (field ID 0 or field named 3C273)
    this selection is in addition to the other selections to data
    spw -- select data by IF IDs (spectral windows)/channels
    default: '' (use all IFs and channels)
    example: spw='0~2,4'; spectral windows 0,1,2,4 (all channels)
    spw='<2';  spectral windows less than 2 (i.e. 0,1)
    spw='0:5~61'; spw 0, channels 5 to 61
    spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45.
    spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each.
    spw = '*:3~64'  channels 3 through 64 for all sp id's
    spw = ' :3~64' will NOT work.
    
    NOTE: sdpolaverage does not support multiple channel ranges
    per spectral window (';') just like mstransform doesn't.
    this selection is in addition to the other selections to data
    timerange -- select data by time range
    default: '' (use all)
    example: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
    Note: YYYY/MM/DD can be dropped as needed:
    timerange='09:14:00~09:54:00' # this time range
    timerange='09:44:00' # data within one integration of time
    timerange='>10:24:00' # data after this time
    timerange='09:44:00+00:13:00' #data 13 minutes after time
    this selection is in addition to the other selections to data
    scan -- select data by scan numbers
    default: '' (use all scans)
    example: scan='21~23' (scan IDs 21,22,23)
    this selection is in addition to the other selections to data
    intent -- select data by observational intent, also referred to as 'scan intent'
    default: '' (use all scan intents)
    example: intent='*ON_SOURCE*' (any valid scan-intent expression accepted by the MSSelection module can be specified)
    this selection is in addition to the other selections to data
    polaverage -- polarization averaging mode
    default: '' (no averaging over polarization)
    options: '', 'stokes', 'geometric'
    outfile -- name of output file
    
    
    -------
    POLARIZATION AVERAGE
    -------
    Two modes of polarization averaging are available. The default is
    'stokes' which is an average based on a formulation of Stokes
    parameter. In this mode, averaged data is calculated by
    (XX + YY) / 2 or (RR + LL) / 2. Other option is 'geometric', which
    is a conventional way of averaging in the field of single-dish
    data reduction. The averaged data is given by weighted average
    of XX and YY, or RR and LL.


    """

    _info_group_ = """single dish"""
    _info_desc_ = """Average SD spectra over polarisation"""

    def __call__( self, infile='', datacolumn='data', antenna='', field='', spw='', timerange='', scan='', intent='', polaverage='', outfile='' ):
        schema = {'infile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'datacolumn': {'type': 'cStr', 'coerce': _coerce.to_str}, 'antenna': {'type': 'cStr', 'coerce': _coerce.to_str}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'intent': {'type': 'cStr', 'coerce': _coerce.to_str}, 'polaverage': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ '', 'stokes', 'geometric' ]}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}}
        doc = {'infile': infile, 'datacolumn': datacolumn, 'antenna': antenna, 'field': field, 'spw': spw, 'timerange': timerange, 'scan': scan, 'intent': intent, 'polaverage': polaverage, 'outfile': outfile}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'sdpolaverage', [ 'infile=' + repr(_pc.document['infile']), 'datacolumn=' + repr(_pc.document['datacolumn']), 'antenna=' + repr(_pc.document['antenna']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'timerange=' + repr(_pc.document['timerange']), 'scan=' + repr(_pc.document['scan']), 'intent=' + repr(_pc.document['intent']), 'polaverage=' + repr(_pc.document['polaverage']), 'outfile=' + repr(_pc.document['outfile']) ] )
        task_result = None
        try:
            task_result = _sdpolaverage_t( _pc.document['infile'], _pc.document['datacolumn'], _pc.document['antenna'], _pc.document['field'], _pc.document['spw'], _pc.document['timerange'], _pc.document['scan'], _pc.document['intent'], _pc.document['polaverage'], _pc.document['outfile'] )
        except Exception as exc:
            _except_log('sdpolaverage', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'sdpolaverage', task_result )
        return task_result

sdpolaverage = _sdpolaverage( )


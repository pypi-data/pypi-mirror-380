##################### generated by xml-casa (v2) from plotprofilemap.xml ############
##################### b8e72814dcbd57ab3b49a9f1b6b9d3a8 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_plotprofilemap import plotprofilemap as _plotprofilemap_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _plotprofilemap:
    """
    plotprofilemap ---- Makes profile map

    
    The plotprofilemap makes spectral profile map from specified image.
    The task accepts both CASA image and FITS cube as an input.
    

    --------- parameter descriptions ---------------------------------------------

    imagename     Input image name (CASA image or FITS)
    figfile       Output figure name
    overwrite     Overwrite existing figfile
    transparent   Output transparent figure
    pol           Polarization component to be plotted
    spectralaxis  Type of spectral axis
    restfreq      Rest frequency
    plotrange     Spectral axis range to plot
    title         Title of the plot
    linecolor     Line color
    linestyle     Line style
    linewidth     Line width in points
    separatepanel Separate plots
    plotmasked    Masked data handling
    maskedcolor   Line color for masked data
    showaxislabel Show axis labels on the bottom left panel
    showtick      Show axis ticks
    showticklabel Show axis tick labels on the bottom left panel
    figsize       Size of the figure
    numpanels     Number of panels
    [1;42mRETURNS[1;m          variant

    --------- examples -----------------------------------------------------------

    
    
    The plotprofilemap makes spectral profile map from specified image.
    The task accepts both CASA image and FITS cube as an input.
    
    It is necessary to specify existing CASA image or FITS cube as an
    imagename. Otherwise, the task will fail. If figfile is specified,
    profile map is saved as an PNG image. Please set overwrite to False
    if you don't want to overwrite existing file.
    
    Keyword arguments:
    imagename -- input image name (CASA image or FITS cube)
    figfile -- output PNG image name. No output if figfile is empty
    default: '' (no output)
    overwrite -- overwrite existing output file
    default: False
    transparent -- output transparent figure
    default: False
    pol -- polarization component to be plotted. It is an index for stokes axis
    of the image.
    default: 0
    spectralaxis -- spectral axis type
    default: '' (use image's spectral axis)
    options: 'channel', 'freuquency', 'velocity'
    restfreq -- rest frequency
    default: '' (use image's rest frequency)
    example: '100GHz'
    plotrange -- spectral axis range to plot. unit for the range depends on
    what spectral axis is chosen: channel for 'channel', GHz for
    'frequency', and km/s for 'velocity'
    default: '' (whole range)
    example: '0~1000' (from 0.0 to 1000.0)
    '~1000' (from minimul value to 1000.0)
    '24~' (from 24.0 to maximum value)
    title -- title of the plot
    default: '' (no title)
    linecolor -- line color in matplotlib format
    default: 'b' (blue)
    example: 'r' (red), 'black', '#ff99ff'
    linestyle -- line style in matplotlib format
    default: '-' (solid line)
    example: '..' (dotted line), '.-' (solid line with point marker)
    linewidth -- line width in points
    default: 0.2
    separatepanel -- separate panels
    default: True
    plotmasked -- masked data handling
    default: 'empty' (show empty panel)
    option: 'zero' (plot zero level)
    'none' (show nothing)
    'text' (show text indicating 'NO DATA')
    'plot' (plot masked data with different
    color specified by maskedcolor)
    maskedcolor -- line color for masked data
    showaxislabel -- Show axis labels on the bottom left panel
    default: False
    showtick -- Show ticks
    default: False
    showticklabel -- Show tick labels on the bottom left panel
    default: False
    figsize -- size of the figure
    default: '' (matplotlib default)
    example: '10cm' (10cm square)
    '122mm,10cm' (122mm width and 10cm height)
    numpanels -- Number of panels
    default: '' (auto)
    example: '6,8' (nx=6, ny=8)
    '8' (nx=8, ny=8)
    
    Number of panels along horizontal and vertical direction can be specified
    via the parameter 'numpanels'. It should be a string containing numerical
    value indicating number of panels. If only one number is given it will be
    applied to both axes. If you want to provide different numbers to horizontal
    and vertical axes, you should give two numbers as a string separated by comma.
    See example of the above parameter description section.
    
    If the number of panels is less than the number of pixels of input image,
    more than one pixels are assigned to one panel. In that case, spectra to be
    shown are the average of the assigned spectra in each pixel.
    
    Default value for numpanels is empty string ('') which corresponds to an auto
    calculation of the number of panels based on the number of pixels of input
    image. Formula for the number of horizontal and vertical panels, nh and nv,
    are as follows:
    
    npanel = min(max(nx, ny), 8)
    step = (max(nx, ny) - 1) / npanel + 1
    nh = nx / step + 1
    nv = ny / step + 1
    
    where nx and ny are the number of pixels along direction axes. In the above
    calculation, upper limit for nh and nv is 9.
    
    


    """

    _info_group_ = """visualization"""
    _info_desc_ = """Makes profile map"""

    def __call__( self, imagename='', figfile='', overwrite=False, transparent=False, pol=int(0), spectralaxis='', restfreq='', plotrange='', title='', linecolor='b', linestyle='-', linewidth=float(0.2), separatepanel=True, plotmasked='empty', maskedcolor='gray', showaxislabel=False, showtick=False, showticklabel=False, figsize='', numpanels='' ):
        schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'figfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}, 'transparent': {'type': 'cBool'}, 'pol': {'type': 'cInt'}, 'spectralaxis': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ '', 'frequency', 'channel', 'velocity' ]}, 'restfreq': {'type': 'cStr', 'coerce': _coerce.to_str}, 'plotrange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'title': {'type': 'cStr', 'coerce': _coerce.to_str}, 'linecolor': {'type': 'cStr', 'coerce': _coerce.to_str}, 'linestyle': {'type': 'cStr', 'coerce': _coerce.to_str}, 'linewidth': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'separatepanel': {'type': 'cBool'}, 'plotmasked': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'none', 'plot', 'empty', 'zero', 'text' ]}, 'maskedcolor': {'type': 'cStr', 'coerce': _coerce.to_str}, 'showaxislabel': {'type': 'cBool'}, 'showtick': {'type': 'cBool'}, 'showticklabel': {'type': 'cBool'}, 'figsize': {'type': 'cStr', 'coerce': _coerce.to_str}, 'numpanels': {'type': 'cStr', 'coerce': _coerce.to_str}}
        doc = {'imagename': imagename, 'figfile': figfile, 'overwrite': overwrite, 'transparent': transparent, 'pol': pol, 'spectralaxis': spectralaxis, 'restfreq': restfreq, 'plotrange': plotrange, 'title': title, 'linecolor': linecolor, 'linestyle': linestyle, 'linewidth': linewidth, 'separatepanel': separatepanel, 'plotmasked': plotmasked, 'maskedcolor': maskedcolor, 'showaxislabel': showaxislabel, 'showtick': showtick, 'showticklabel': showticklabel, 'figsize': figsize, 'numpanels': numpanels}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'plotprofilemap', [ 'imagename=' + repr(_pc.document['imagename']), 'figfile=' + repr(_pc.document['figfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'transparent=' + repr(_pc.document['transparent']), 'pol=' + repr(_pc.document['pol']), 'spectralaxis=' + repr(_pc.document['spectralaxis']), 'restfreq=' + repr(_pc.document['restfreq']), 'plotrange=' + repr(_pc.document['plotrange']), 'title=' + repr(_pc.document['title']), 'linecolor=' + repr(_pc.document['linecolor']), 'linestyle=' + repr(_pc.document['linestyle']), 'linewidth=' + repr(_pc.document['linewidth']), 'separatepanel=' + repr(_pc.document['separatepanel']), 'plotmasked=' + repr(_pc.document['plotmasked']), 'maskedcolor=' + repr(_pc.document['maskedcolor']), 'showaxislabel=' + repr(_pc.document['showaxislabel']), 'showtick=' + repr(_pc.document['showtick']), 'showticklabel=' + repr(_pc.document['showticklabel']), 'figsize=' + repr(_pc.document['figsize']), 'numpanels=' + repr(_pc.document['numpanels']) ] )
        task_result = None
        try:
            task_result = _plotprofilemap_t( _pc.document['imagename'], _pc.document['figfile'], _pc.document['overwrite'], _pc.document['transparent'], _pc.document['pol'], _pc.document['spectralaxis'], _pc.document['restfreq'], _pc.document['plotrange'], _pc.document['title'], _pc.document['linecolor'], _pc.document['linestyle'], _pc.document['linewidth'], _pc.document['separatepanel'], _pc.document['plotmasked'], _pc.document['maskedcolor'], _pc.document['showaxislabel'], _pc.document['showtick'], _pc.document['showticklabel'], _pc.document['figsize'], _pc.document['numpanels'] )
        except Exception as exc:
            _except_log('plotprofilemap', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'plotprofilemap', task_result )
        return task_result

plotprofilemap = _plotprofilemap( )


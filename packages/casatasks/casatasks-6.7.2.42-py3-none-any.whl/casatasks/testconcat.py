##################### generated by xml-casa (v2) from testconcat.xml ################
##################### ab4e58e1beb9e0a5c4d05f506de8e425 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_testconcat import testconcat as _testconcat_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _testconcat:
    """
    testconcat ---- Concatenate the subtables of several visibility data sets, not the MAIN bulk data.

    --------- parameter descriptions ---------------------------------------------

    vis           Name(s) of input visibility files to be test-concatenated
    testconcatvis Name of output MS containing the merged subtables
    freqtol       Frequency shift tolerance for considering data as the same spwid
    dirtol        Direction shift tolerance for considering data as the same field
    copypointing  Copy all rows of the POINTING table.

    --------- examples -----------------------------------------------------------

    
    
    The list of data sets given in the vis argument are concatenated into an output
    data set in testconcatvis without the bulk data of the MAIN table.
    This is useful for obtaining the information in the merged subtables without
    actually performing a time-consuming concatenation of the MAIN tables on disk.
    
    
    Keyword arguments:
    vis -- Name of input visibility files for which the subtables are to be combined
    default: none; example: vis = 'mydata.ms',
    vis=['src2.ms','ngc5921.ms','ngc315.ms']
    testconcatvis -- Name of MS that will contain the concatenated subtables
    default: none; example: testconcatvis='test.ms'
    
    freqtol -- Frequency shift tolerance for considering data to be in the same
    spwid.  The number of channels must also be the same.
    default: ''  do not combine unless frequencies are equal
    example: freqtol='10MHz' will not combine spwid unless they are
    within 10 MHz.
    Note: This option is useful to conbine spectral windows with very slight
    frequency differences caused by Doppler tracking, for example.
    
    dirtol -- Direction shift tolerance for considering data as the same field
    default: '' means always combine.
    example: dirtol='1.arcsec' will not combine data for a field unless
    their phase center differ by less than 1 arcsec.  If the field names
    are different in the input data sets, the name in the output data
    set will be the first relevant data set in the list.
    
    copypointing -- Make a proper copy of the POINTING subtable (can be time consuming).
    If False, the result is an empty POINTING table.
    default: True


    """

    _info_group_ = """manipulation"""
    _info_desc_ = """Concatenate the subtables of several visibility data sets, not the MAIN bulk data."""

    def __call__( self, vis=[  ], testconcatvis='', freqtol='', dirtol='', copypointing=True ):
        schema = {'vis': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'testconcatvis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'freqtol': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'dirtol': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'copypointing': {'type': 'cBool'}}
        doc = {'vis': vis, 'testconcatvis': testconcatvis, 'freqtol': freqtol, 'dirtol': dirtol, 'copypointing': copypointing}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'testconcat', [ 'vis=' + repr(_pc.document['vis']), 'testconcatvis=' + repr(_pc.document['testconcatvis']), 'freqtol=' + repr(_pc.document['freqtol']), 'dirtol=' + repr(_pc.document['dirtol']), 'copypointing=' + repr(_pc.document['copypointing']) ] )
        task_result = None
        try:
            task_result = _testconcat_t( _pc.document['vis'], _pc.document['testconcatvis'], _pc.document['freqtol'], _pc.document['dirtol'], _pc.document['copypointing'] )
        except Exception as exc:
            _except_log('testconcat', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'testconcat', task_result )
        return task_result

testconcat = _testconcat( )


##################### generated by xml-casa (v2) from listhistory.xml ###############
##################### e0e67645af2957d5aabe406b36746d9e ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_listhistory import listhistory as _listhistory_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _listhistory:
    """
    listhistory ---- List the processing history of a dataset:

    
    List the processing history of a dataset:
    The list of all task processing steps will be
    given in the logger.
    

    --------- parameter descriptions ---------------------------------------------

    vis     Name of input visibility file (MS)
    [1;42mRETURNS[1;m    void

    --------- examples -----------------------------------------------------------

    
    
    The list of all task processing steps in a visibility data set
    are listed in the logger.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    


    """

    _info_group_ = """information"""
    _info_desc_ = """List the processing history of a dataset:"""

    def __call__( self, vis='' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}}
        doc = {'vis': vis}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'listhistory', [ 'vis=' + repr(_pc.document['vis']) ] )
        task_result = None
        try:
            task_result = _listhistory_t( _pc.document['vis'] )
        except Exception as exc:
            _except_log('listhistory', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'listhistory', task_result )
        return task_result

listhistory = _listhistory( )


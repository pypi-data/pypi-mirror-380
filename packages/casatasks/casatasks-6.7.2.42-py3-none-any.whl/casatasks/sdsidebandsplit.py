##################### generated by xml-casa (v2) from sdsidebandsplit.xml ###########
##################### 9a41da2f188957e5ce7307211fb89954 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_sdsidebandsplit import sdsidebandsplit as _sdsidebandsplit_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _sdsidebandsplit:
    """
    sdsidebandsplit ---- [EXPERIMENTAL] invoke sideband separation using FFT

    [EXPERIMENTAL] SD sideband separation and supression task:
    Invoke sideband separation / supression using FFT

    --------- parameter descriptions ---------------------------------------------

    imagename   a list of names of input images. At least two valid images are required for processing
    outfile     Prefix of output image name.
                A suffix, ".signalband" or ".imageband" is added to 
                output image name depending on the side band side being solved.
    overwrite   overwrite option
    signalshift a list of channel number shifts in signal side band.
                The number of elements must be equal to that of imagename
    imageshift  t of channel number shifts in image side band.
                The number of elements must be either zero or equal to that of imagename.
                In case of zero length array, the values are obtained from signalshift
                assuming the shifts are the same magnitude in opposite direction.
    getbothside sideband separation (True) or supression (False)
    refchan     reference channel of spectral axis in image sideband
    refval      frequency at the reference channel of spectral axis in image sideband (e.g., "100GHz")
    otherside   solve the solution of the other side band side and subtract the solution
    threshold   Rejection limit of solution. The value must be greater than 0.0 and less than 1.0.
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    
    Solve signal sideband
    
    sdsidebandsplit(imagename=['shift_0ch.image', 'shift_132ch.image', 'shift_neg81ch.image'],
    outfile='separated.image', signalshift=[0.0, +132.0, -81.0],
    imageshift=[0.0, -132.0, +81.0])
    
    The output image is 'separated.image.signalband'.
    
    Solve both signal and image sidebands (need to set frequency of image sideband explicitly)
    
    sdsidebandsplit(imagename=['shift_0ch.image', 'shift_132ch.image', 'shift_neg81ch.image'],
    outfile='separated.image', signalshift=[0.0, +132.0, -81.0],
    imageshift=[0.0, -132.0, +81.0],
    getbothside=True, refchan=0.0, refval='805.8869GHz')
    
    The output images are 'separated.image.signalband' and 'separated.image.imageband'
    for signal and image sideband, respectively.
    
    Obtain signal sideband image by solving image sideband
    
    sdsidebandsplit(imagename=['shift_0ch.image', 'shift_132ch.image', 'shift_neg81ch.image'],
    outfile='separated.image', signalshift=[0.0, +132.0, -81.0],
    imageshift=[0.0, -132.0, +81.0], otherside=True)
    
    Solution of image sidband is obtained and subtracted from the original (double sideband) spectra
    to derive spectra of signal sideband.
    
    


    """

    _info_group_ = """single dish"""
    _info_desc_ = """[EXPERIMENTAL] invoke sideband separation using FFT"""

    def __call__( self, imagename=[  ], outfile='', overwrite=False, signalshift=[  ], imageshift=[  ], getbothside=False, refchan=float(0.0), refval='', otherside=False, threshold=float(0.2) ):
        schema = {'imagename': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}, 'signalshift': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'imageshift': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'getbothside': {'type': 'cBool'}, 'refchan': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'refval': {'type': 'cStr', 'coerce': _coerce.to_str}, 'otherside': {'type': 'cBool'}, 'threshold': {'type': 'cFloat', 'coerce': _coerce.to_float, 'min': 0.0, 'max': 1.0}}
        doc = {'imagename': imagename, 'outfile': outfile, 'overwrite': overwrite, 'signalshift': signalshift, 'imageshift': imageshift, 'getbothside': getbothside, 'refchan': refchan, 'refval': refval, 'otherside': otherside, 'threshold': threshold}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'sdsidebandsplit', [ 'imagename=' + repr(_pc.document['imagename']), 'outfile=' + repr(_pc.document['outfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'signalshift=' + repr(_pc.document['signalshift']), 'imageshift=' + repr(_pc.document['imageshift']), 'getbothside=' + repr(_pc.document['getbothside']), 'refchan=' + repr(_pc.document['refchan']), 'refval=' + repr(_pc.document['refval']), 'otherside=' + repr(_pc.document['otherside']), 'threshold=' + repr(_pc.document['threshold']) ] )
        task_result = None
        try:
            task_result = _sdsidebandsplit_t( _pc.document['imagename'], _pc.document['outfile'], _pc.document['overwrite'], _pc.document['signalshift'], _pc.document['imageshift'], _pc.document['getbothside'], _pc.document['refchan'], _pc.document['refval'], _pc.document['otherside'], _pc.document['threshold'] )
        except Exception as exc:
            _except_log('sdsidebandsplit', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'sdsidebandsplit', task_result )
        return task_result

sdsidebandsplit = _sdsidebandsplit( )


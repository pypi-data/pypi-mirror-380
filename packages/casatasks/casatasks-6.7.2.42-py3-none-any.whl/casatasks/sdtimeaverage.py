##################### generated by xml-casa (v2) from sdtimeaverage.xml #############
##################### ffe403c03a9e371c5ec04b5ebcd69334 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_sdtimeaverage import sdtimeaverage as _sdtimeaverage_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _sdtimeaverage:
    """
    sdtimeaverage ---- Average SD data, perform time averaging

    
    
    The task sdtimeaverage is an SD task for averaging spectral data
    over specified time range.
    

    --------- parameter descriptions ---------------------------------------------

    infile     name of input SD dataset
    datacolumn name of data column to be used ["data", "float_data", or "corrected_data"]
    field      select data by field IDs and names, e.g. "3C2*" (""=all)
    spw        select data by spectral windows and channels, e.g. "3,5,7" (""=all)
    timerange  select data by time range, e.g. "09:14:0~09:54:0" (""=all) (see examples in help)
    scan       select data by scan numbers, e.g. "21~23" (""=all)
    antenna    antenna IDs to be averaged over, e.g. "PM03" (""=all)
    timebin    bin width for time averaging.
    timespan   span across scan, state or both.
    outfile    name of output file

    --------- examples -----------------------------------------------------------

    
    -----------------
    Keyword arguments
    -----------------
    infile -- name of input SD dataset
    datacolumn -- name of data column to be used
    options: 'data', 'float_data', or 'corrected_data'
    default: 'float_data'
    In case the column 'float_data' does not exists on the specified MS,
    sdtimeaverage alternatively attempt to use 'data' column.
    
    field -- select data by field IDs and names
    default: '' (use all fields)
    example: field='3C2*' (all names starting with 3C2)
    field='0,4,5~7' (field IDs 0,4,5,6,7)
    field='0,3C273' (field ID 0 or field named 3C273)
    this selection is in addition to the other selections to data
    spw -- select data by IF IDs (spectral windows)
    default: '' (use all IFs)
    example: spw='0~2,4'; spectral windows 0,1,2,4 (all channels)
    spw='<2';  spectral windows less than 2 (i.e. 0,1)
    this selection is in addition to the other selections to data
    timerange -- select data by time range
    default: '' (use all)
    example: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
    Note: YYYY/MM/DD can be dropped as needed:
    timerange='09:14:00~09:54:00' # this time range
    timerange='09:44:00' # data within one integration of time
    timerange='>10:24:00' # data after this time
    timerange='09:44:00+00:13:00' #data 13 minutes after time
    this selection is in addition to the other selections to data
    scan -- select data by scan numbers
    default: '' (use all scans)
    example: scan='21~23' (scan IDs 21,22,23)
    this selection is in addition to the other selections to data
    antenna -- select data by antenna name or ID
    default: '' (use all antennas)
    example: 'PM03'
    timebin -- bin width for time averaging
    default: 'all'
    example: timebin='100s' (time averaging performed over 100 second bins)
    timebin=''  (use all)
    timespan -- Let the timebin span across scan, state or both.
    State is equivalent to sub-scans. One scan may have several
    state ids. For ALMA MSs, the sub-scans are limited to about
    30s duration each. In these cases, the task will automatically
    add state to the timespan parameter. To see the number of states
    in an MS, use the msmd tool. See help msmd.
    
    default: 'scan' (separate time bins by both of the above)
    options: 'scan', 'state', 'state,scan', ''
    
    examples:
    timespan = 'scan'; can be useful when the scan number
    goes up with each integration as in many WSRT MSs.
    timespan = ['scan', 'state']: disregard scan and state
    numbers when time averaging.
    timespan = 'state,scan'; same as above
    timespan = '': averages for each combination of scan and state
    outfile -- name of output file


    """

    _info_group_ = """single dish"""
    _info_desc_ = """Average SD data, perform time averaging"""

    def __call__( self, infile='', datacolumn='float_data', field='', spw='', timerange='', scan='', antenna='', timebin='all', timespan='scan', outfile='' ):
        schema = {'infile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'datacolumn': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'data', 'float_data', 'corrected' ]}, 'field': {'type': 'cStr', 'coerce': _coerce.to_str}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'antenna': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timebin': {'type': 'cStr', 'coerce': _coerce.to_str}, 'timespan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'outfile': {'type': 'cStr', 'coerce': _coerce.to_str}}
        doc = {'infile': infile, 'datacolumn': datacolumn, 'field': field, 'spw': spw, 'timerange': timerange, 'scan': scan, 'antenna': antenna, 'timebin': timebin, 'timespan': timespan, 'outfile': outfile}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'sdtimeaverage', [ 'infile=' + repr(_pc.document['infile']), 'datacolumn=' + repr(_pc.document['datacolumn']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'timerange=' + repr(_pc.document['timerange']), 'scan=' + repr(_pc.document['scan']), 'antenna=' + repr(_pc.document['antenna']), 'timebin=' + repr(_pc.document['timebin']), 'timespan=' + repr(_pc.document['timespan']), 'outfile=' + repr(_pc.document['outfile']) ] )
        task_result = None
        try:
            task_result = _sdtimeaverage_t( _pc.document['infile'], _pc.document['datacolumn'], _pc.document['field'], _pc.document['spw'], _pc.document['timerange'], _pc.document['scan'], _pc.document['antenna'], _pc.document['timebin'], _pc.document['timespan'], _pc.document['outfile'] )
        except Exception as exc:
            _except_log('sdtimeaverage', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'sdtimeaverage', task_result )
        return task_result

sdtimeaverage = _sdtimeaverage( )


##################### generated by xml-casa (v2) from importfitsidi.xml #############
##################### 456fb4c638b6af5ef692797c58d5fe65 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_importfitsidi import importfitsidi as _importfitsidi_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _importfitsidi:
    """
    importfitsidi ---- Convert a FITS-IDI file to a CASA visibility data set

    
    Convert a FITS-IDI file to a CASA visiblity data set.
    If several files are given, they will be concatenated into one MS.

    --------- parameter descriptions ---------------------------------------------

    fitsidifile      Name(s) of input FITS-IDI file(s)
                     Default: none (must be supplied)
                     
                        Examples: 
                        fitsidifile='3C273XC1.IDI'
                        fitsidifile=['3C273XC1.IDI1','3C273XC1.IDI2']
    vis              Name of output visibility file
                     Default: none
                     
                        Example: outputvis='3C273XC1.ms'
    constobsid       If True, give constant obs ID==0 to the data from all
                     input fitsidi files (False = separate obs id for each file)
                     Default: False (new obs id for each input file)
                     Options: False|True
    scanreindexgap_s Min time gap (seconds) between integrations to start a
                     new scan
                     Default: 0. (no reindexing)
                     
                     If > 0., a new scan is started whenever the gap
                     between two integrations is > the given value
                     (seconds) or when a new field starts or when the
                     ARRAY_ID changes.
    specframe        This frame will be used to set the spectral reference
                     frame for all spectral windows in the output MS
                     Default: GEO (geocentric)
                     Options: GEO|TOPO|LSRK|BARY
                     
                     NOTE: if specframe is set to TOPO, the reference
                     location will be taken from the Observatories
                     table in the CASA data repository for the given
                     name of the observatory. You can edit that table
                     and add new rows.
    coordframe       This frame will be used to set the reference
                     frame for all source positions in the output MS
                     Default: '' (set based on epoch/equinox)
                     Options: ICRS|B1950|J2000
                     
                     NOTE: if the epoch/equinox is set to J2000 in
                     the FITS-IDI file, the reference frame will be
                     set to ICRS. To use FK5/J2000 as the reference
                     frame, set coordframe to J2000.

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTFITSIDI IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a FITS-IDI file to a CASA visibility data set"""

    def __call__( self, fitsidifile=[  ], vis='', constobsid=False, scanreindexgap_s=float(0.), specframe='GEO', coordframe='' ):
        schema = {'fitsidifile': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'vis': {'type': 'cStr', 'coerce': _coerce.to_str}, 'constobsid': {'type': 'cBool'}, 'scanreindexgap_s': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'specframe': {'type': 'cStr', 'coerce': _coerce.to_str}, 'coordframe': {'type': 'cStr', 'coerce': _coerce.to_str}}
        doc = {'fitsidifile': fitsidifile, 'vis': vis, 'constobsid': constobsid, 'scanreindexgap_s': scanreindexgap_s, 'specframe': specframe, 'coordframe': coordframe}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'importfitsidi', [ 'fitsidifile=' + repr(_pc.document['fitsidifile']), 'vis=' + repr(_pc.document['vis']), 'constobsid=' + repr(_pc.document['constobsid']), 'scanreindexgap_s=' + repr(_pc.document['scanreindexgap_s']), 'specframe=' + repr(_pc.document['specframe']), 'coordframe=' + repr(_pc.document['coordframe']) ] )
        task_result = None
        try:
            task_result = _importfitsidi_t( _pc.document['fitsidifile'], _pc.document['vis'], _pc.document['constobsid'], _pc.document['scanreindexgap_s'], _pc.document['specframe'], _pc.document['coordframe'] )
        except Exception as exc:
            _except_log('importfitsidi', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'importfitsidi', task_result )
        return task_result

importfitsidi = _importfitsidi( )


##################### generated by xml-casa (v2) from splattotable.xml ##############
##################### fc127278a648878086dac0aee00fe5cf ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_splattotable import splattotable as _splattotable_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _splattotable:
    """
    splattotable ---- Convert a downloaded Splatalogue spectral line list to a casa table.

    
    This task reads a spectral line list(s) downloaded from Splatalogue
    (www.splatalogue.net) and loads it into a CASA table which can be
    queried via eg the slsearch task.

    --------- parameter descriptions ---------------------------------------------

    filenames Files containing Splatalogue lists.
              
              The downloaded files must be in a specific format
              for this task to succeed. Fro details, see the splattotable
              task pages on CASA Docs
              (https://casa.nrao.edu/casadocs/)
    table     Output table name. Must be specified.
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    For more information, see the task pages of splattotable in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a downloaded Splatalogue spectral line list to a casa table."""

    def __call__( self, filenames=[  ], table='' ):
        schema = {'filenames': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'table': {'type': 'cStr', 'coerce': _coerce.to_str}}
        doc = {'filenames': filenames, 'table': table}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'splattotable', [ 'filenames=' + repr(_pc.document['filenames']), 'table=' + repr(_pc.document['table']) ] )
        task_result = None
        try:
            task_result = _splattotable_t( _pc.document['filenames'], _pc.document['table'] )
        except Exception as exc:
            _except_log('splattotable', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'splattotable', task_result )
        return task_result

splattotable = _splattotable( )


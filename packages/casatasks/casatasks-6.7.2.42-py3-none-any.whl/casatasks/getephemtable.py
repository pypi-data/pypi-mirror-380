##################### generated by xml-casa (v2) from getephemtable.xml #############
##################### ee42dc427cda73f59a313d88491d20a7 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_getephemtable import getephemtable as _getephemtable_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _getephemtable:
    """
    getephemtable ---- Query the JPL-Horizons database for ephemeris data and create a CASA table

    
    This task retrieves the ephemeris data of a specific ephemeris object by sending
    a query to JPL's Horizons system and creates the ephemeris data stored in a CASA table
    format.

    --------- parameter descriptions ---------------------------------------------

    objectname  Name of ephemeris object. The common name of major bodies such as
                 planets known in CASA will be converted into the (NAIF/SPK) ID. If the parameter, asis
                 is set to True, objectname is passed to the query as is to the JPL-Horizons system.
                 If the object ID is used asis must be set to True.
                
                         Default: '' 
                
                            Example: 
                            objectname='Titan'
                            objectname='606' (should set asis=True in this case)
    asis        A toggle for objectname check to be done or not before sending a query to the JPL-Horizons system. 
                Default: False 
                
                As described in objectname parameter description, when asis=False, objectname is checked 
                against the known objects (a list of the supported ephemeris sources in setjy task plus 
                a few others) in CASA (See the getephemtable Description section in CASA Docs).
                Setting asis=True will skip this check/conversion thus objectname has to be uniquly 
                recognized by the JPL-Horzions system.
                For example, objectname='Jupiter' with asis=True results in the JPL-Horizons system 
                to return no ephemeris data as multiple objects matches with the name.
    timerange   Time range of ephemeris data to be queried.
                Default: ''
                
                Standard CASA timerange specification('T0~T1'),YY/MM/DD/hh:mm,
                or by Modified Julian date or Julian date if the string is prefixed by 'MJD' or 'JD'.
                
                   Example:
                   timerange = '2023/09/01/20:45~2023/09/02/04:00'
                   (Note: Both start and end times need to be fully specified starting with YYYY 
                    but hours or minutes can be omitted  as long as the
                    start and stop times are distinguishable. The omitted hours or minutes are translated as '00')
                   timerange = 'MJD 60175.1~60176.1'
    interval    Interval or step size of ephemeris data
                Default: '5m' 
                
                A string with integer value and unit (minutes, hours, days) or
                a string with integer value without unit (to produce equal time interval defined by
                timerange/interval).
                The unit can be given as the first few characters, e.g. 'm', 'min', 'h', or 'd'.
                
                Note: The JPL-Horizons query allows the step size by calendar months or years however
                the task will not convert such data to the CASA table as Measures requires the ephemeris
                table data in equal time interval.  When the calendar months or years is specified 
                for interval, the task execution will result in a SEVERE error. The raw query results
                will be saved even such a case if rawdatafile parameter is specified.
                
                   Example:
                
                   interval='5min'
                   interval='5minutes'
                   interval='1h'
                   interval='1d'
    outfile     Output CASA table name
                Default: '' 
                
                   Example: 
                   outfile = 'Titan_MJD60175.1-60176.1.tab'
    rawdatafile Name of raw ephemeris data file before converting into a CASA table (optional)
                Default: '' = No raw ephemeris data is saved 
                
                Useful for debugging when errors occured and/or no output table is produced.
                
                    Example: rawdatafile='Titan-jplhorizons.dat'
    overwrite   If True, overwrite output files (outfile, rawdatafile), if already exist
                Default: False
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Query the JPL-Horizons database for ephemeris data and create a CASA table"""

    def __call__( self, objectname='', asis=False, timerange='', interval='5m', outfile='', rawdatafile='', overwrite=False ):
        schema = {'objectname': {'type': 'cStr', 'coerce': _coerce.to_str}, 'asis': {'type': 'cBool'}, 'timerange': {'type': 'cStr', 'coerce': _coerce.to_str}, 'interval': {'type': 'cStr', 'coerce': _coerce.to_str}, 'outfile': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'rawdatafile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'overwrite': {'type': 'cBool'}}
        doc = {'objectname': objectname, 'asis': asis, 'timerange': timerange, 'interval': interval, 'outfile': outfile, 'rawdatafile': rawdatafile, 'overwrite': overwrite}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'getephemtable', [ 'objectname=' + repr(_pc.document['objectname']), 'asis=' + repr(_pc.document['asis']), 'timerange=' + repr(_pc.document['timerange']), 'interval=' + repr(_pc.document['interval']), 'outfile=' + repr(_pc.document['outfile']), 'rawdatafile=' + repr(_pc.document['rawdatafile']), 'overwrite=' + repr(_pc.document['overwrite']) ] )
        task_result = None
        try:
            task_result = _getephemtable_t( _pc.document['objectname'], _pc.document['asis'], _pc.document['timerange'], _pc.document['interval'], _pc.document['outfile'], _pc.document['rawdatafile'], _pc.document['overwrite'] )
        except Exception as exc:
            _except_log('getephemtable', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'getephemtable', task_result )
        return task_result

getephemtable = _getephemtable( )


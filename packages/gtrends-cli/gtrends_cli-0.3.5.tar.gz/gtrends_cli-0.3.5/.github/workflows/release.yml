name: Release
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      manual_version:
        description: 'Manual version override (leave empty to auto-calculate)'
        required: false
        type: string
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
          
      - name: Debug repository state
        run: |
          echo "Current working directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          echo "Git status:"
          git status
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bumpversion
          pip install -e .
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=""
          
          # Check pyproject.toml first (preferred)
          if [ -f "pyproject.toml" ]; then
            CURRENT_VERSION=$(grep -Po 'version\s*=\s*"\K[^"]*' pyproject.toml 2>/dev/null || echo "")
            if [ ! -z "$CURRENT_VERSION" ]; then
              echo "Current version from pyproject.toml: $CURRENT_VERSION"
            fi
          fi
          
          # Check __init__.py if pyproject.toml didn't have version
          if [ -z "$CURRENT_VERSION" ] && [ -f "src/gtrends_core/__init__.py" ]; then
            CURRENT_VERSION=$(grep -Po '__version__\s*=\s*"\K[^"]*' src/gtrends_core/__init__.py 2>/dev/null || echo "")
            if [ ! -z "$CURRENT_VERSION" ]; then
              echo "Current version from src/gtrends_core/__init__.py: $CURRENT_VERSION"
            fi
          fi
          
          # Check setup.py if others didn't have version
          if [ -z "$CURRENT_VERSION" ] && [ -f "setup.py" ]; then
            CURRENT_VERSION=$(grep -Po 'version\s*=\s*"\K[^"]*' setup.py 2>/dev/null || echo "")
            if [ ! -z "$CURRENT_VERSION" ]; then
              echo "Current version from setup.py: $CURRENT_VERSION"
            fi
          fi
          
          # Fallback to 0.0.0 if no version found
          if [ -z "$CURRENT_VERSION" ]; then
            echo "::warning::Could not find version in any files. Using default 0.0.0"
            CURRENT_VERSION="0.0.0"
          fi
          
          echo "Final current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
      - name: Calculate next version
        id: next
        run: |
          CURRENT_VERSION=${{ steps.current.outputs.current_version }}
          
          # Use manual version if provided
          if [ ! -z "${{ github.event.inputs.manual_version }}" ]; then
            NEXT_VERSION="${{ github.event.inputs.manual_version }}"
          else
            # Parse current version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            # Increment based on release type
            case "${{ github.event.inputs.release_type }}" in
              major)
                NEXT_VERSION="$((MAJOR + 1)).0.0"
                ;;
              minor)
                NEXT_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              patch)
                NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          fi
          
          echo "Next version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          
      - name: Update version number
        run: |
          CURRENT_VERSION="${{ steps.current.outputs.current_version }}"
          NEXT_VERSION="${{ steps.next.outputs.next_version }}"
          
          echo "Updating version from $CURRENT_VERSION to $NEXT_VERSION"
          
          # Update version in setup.py
          if [ -f "setup.py" ]; then
            echo "Checking setup.py for version=\"$CURRENT_VERSION\""
            if grep -q "version=\"${CURRENT_VERSION}\"" setup.py; then
              sed -i "s/version=\"${CURRENT_VERSION}\"/version=\"${NEXT_VERSION}\"/" setup.py
              echo "✓ Updated version in setup.py"
            else
              echo "::warning::Could not find version=\"$CURRENT_VERSION\" in setup.py"
              echo "Current content of setup.py around version:"
              grep -n "version=" setup.py || echo "No version= line found"
            fi
          else
            echo "::notice::setup.py file not found"
          fi
          
          # Update version in src/gtrends_core/__init__.py
          if [ -f "src/gtrends_core/__init__.py" ]; then
            echo "Checking src/gtrends_core/__init__.py for __version__ = \"$CURRENT_VERSION\""
            if grep -q "__version__ = \"${CURRENT_VERSION}\"" src/gtrends_core/__init__.py; then
              sed -i "s/__version__ = \"${CURRENT_VERSION}\"/__version__ = \"${NEXT_VERSION}\"/" src/gtrends_core/__init__.py
              echo "✓ Updated version in src/gtrends_core/__init__.py"
            else
              echo "::warning::Could not find __version__ = \"$CURRENT_VERSION\" in src/gtrends_core/__init__.py"
              echo "Current content of src/gtrends_core/__init__.py around version:"
              grep -n "__version__" src/gtrends_core/__init__.py || echo "No __version__ line found"
            fi
          else
            echo "::notice::src/gtrends_core/__init__.py file not found"
          fi
          
          # Update version in pyproject.toml
          if [ -f "pyproject.toml" ]; then
            # Update the version field
            echo "Checking pyproject.toml for version = \"$CURRENT_VERSION\""
            if grep -q "version = \"${CURRENT_VERSION}\"" pyproject.toml; then
              sed -i "s/version = \"${CURRENT_VERSION}\"/version = \"${NEXT_VERSION}\"/" pyproject.toml
              echo "✓ Updated version field in pyproject.toml"
            else
              echo "::warning::Could not find version = \"$CURRENT_VERSION\" in pyproject.toml"
              echo "Current content of pyproject.toml around version:"
              grep -n "version =" pyproject.toml || echo "No version = line found"
            fi
            
            # Update the Download Link
            echo "Checking pyproject.toml for Download Link with v$CURRENT_VERSION"
            if grep -q "\"Download Link\" = \"https://github.com/Nao-30/google-trends-cli/archive/refs/tags/v${CURRENT_VERSION}.tar.gz\"" pyproject.toml; then
              sed -i "s|\"Download Link\" = \"https://github.com/Nao-30/google-trends-cli/archive/refs/tags/v${CURRENT_VERSION}.tar.gz\"|\"Download Link\" = \"https://github.com/Nao-30/google-trends-cli/archive/refs/tags/v${NEXT_VERSION}.tar.gz\"|" pyproject.toml
              echo "✓ Updated Download Link in pyproject.toml"
            else
              echo "::warning::Could not find Download Link with version v$CURRENT_VERSION in pyproject.toml"
              echo "Current Download Link content:"
              grep -n "Download Link" pyproject.toml || echo "No Download Link found"
            fi
          else
            echo "::notice::pyproject.toml file not found"
          fi
          
          # Debug - verify files were updated
          echo ""
          echo "=== VERIFICATION ==="
          if [ -f "setup.py" ]; then
            echo "setup.py version line:"
            grep -n "version=" setup.py || echo "No version= found"
          fi
          if [ -f "src/gtrends_core/__init__.py" ]; then
            echo "src/gtrends_core/__init__.py version line:"
            grep -n "__version__" src/gtrends_core/__init__.py || echo "No __version__ found"
          fi
          if [ -f "pyproject.toml" ]; then
            echo "pyproject.toml version line:"
            grep -n "version = " pyproject.toml || echo "No version = found"
            echo "pyproject.toml Download Link:"
            grep -n "Download Link" pyproject.toml || echo "No Download Link found"
          fi
          
      - name: Update Changelog
        run: |
          DATE=$(date +%Y-%m-%d)
          NEW_ENTRY="## [${{ steps.next.outputs.next_version }}] - $DATE\n\n### Added\n- \n\n### Changed\n- \n\n### Fixed\n- \n"
          
          # Check if CHANGELOG.md exists
          if [ ! -f "CHANGELOG.md" ]; then
            echo "::notice::Creating new CHANGELOG.md file"
            echo -e "# Changelog\n\nAll notable changes to the project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n$NEW_ENTRY" > CHANGELOG.md
          else
            # Create backup
            cp CHANGELOG.md CHANGELOG.md.bak
            
            # Extract header (everything before the first ## line)
            awk '/^##/{exit} {print}' CHANGELOG.md > header.tmp
            
            # Extract existing content without header
            awk '/^##/{p=1} p' CHANGELOG.md > content.tmp
            
            # Combine header, new entry, and content
            cat header.tmp > CHANGELOG.md
            echo -e "\n$NEW_ENTRY" >> CHANGELOG.md
            cat content.tmp >> CHANGELOG.md
            
            # Cleanup
            rm header.tmp content.tmp
          fi
          
          echo "::notice::Updated CHANGELOG.md with new version entry"
          echo "First 20 lines of CHANGELOG.md:"
          head -n 20 CHANGELOG.md
          
      - name: Create Release Branch
        run: |
          RELEASE_BRANCH="release/v${{ steps.next.outputs.next_version }}"
          
          # Check if branch already exists remotely
          if git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
            echo "::warning::Branch $RELEASE_BRANCH already exists remotely. Deleting and recreating."
            # Force delete the remote branch
            git push origin --delete $RELEASE_BRANCH || true
          fi
          
          # Check if branch exists locally
          if git show-ref --verify --quiet refs/heads/$RELEASE_BRANCH; then
            git branch -D $RELEASE_BRANCH
          fi
          
          # Create new branch
          git checkout -b $RELEASE_BRANCH
          
          # Stage all changes
          git add setup.py src/gtrends_core/__init__.py pyproject.toml CHANGELOG.md
          
          # Debug git status
          echo "Git status after adding files:"
          git status
          
          # Commit changes
          git commit -m "Bump version to ${{ steps.next.outputs.next_version }} and update changelog"
          
          # Push to remote
          git push -u origin $RELEASE_BRANCH --force
          
          echo "::notice::Created/updated release branch $RELEASE_BRANCH"
          
          # Check if PR already exists
          PR_EXISTS=$(gh pr list --head $RELEASE_BRANCH --base main --json number --jq 'length')
          
          if [ "$PR_EXISTS" -eq "0" ]; then
            # Create pull request if it doesn't exist
            gh pr create --base main --head $RELEASE_BRANCH \
              --title "Release v${{ steps.next.outputs.next_version }}" \
              --body "## Release v${{ steps.next.outputs.next_version }}
            This PR prepares the release of version ${{ steps.next.outputs.next_version }}.
            ### Files Updated:
            - setup.py
            - src/gtrends_core/__init__.py  
            - pyproject.toml (version and Download Link)
            - CHANGELOG.md
            ### Before merging:
            - [ ] Review and update the CHANGELOG.md
            - [ ] Verify all tests pass
            - [ ] Approve the PR
            After merging, a GitHub release will automatically be created which will trigger PyPI publishing."
          else
            echo "::notice::PR for branch $RELEASE_BRANCH already exists. Skipping PR creation."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
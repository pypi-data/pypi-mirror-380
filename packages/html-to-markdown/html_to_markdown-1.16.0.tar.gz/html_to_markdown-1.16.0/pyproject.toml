[build-system]
build-backend = "setuptools.build_meta"

requires = [ "setuptools>=78.1" ]

[project]
name = "html-to-markdown"
version = "1.16.0"
description = "A modern, type-safe Python library for converting HTML to Markdown with comprehensive tag support and customizable options"
readme = "README.md"
keywords = [
  "beautifulsoup",
  "cli-tool",
  "converter",
  "html",
  "html2markdown",
  "markdown",
  "markup",
  "text-extraction",
  "text-processing",
]
license = { text = "MIT" }
authors = [ { name = "Na'aman Hirschfeld", email = "nhirschfeld@gmail.com" } ]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Text Processing",
  "Topic :: Text Processing :: Markup",
  "Topic :: Text Processing :: Markup :: HTML",
  "Topic :: Text Processing :: Markup :: Markdown",
  "Topic :: Utilities",
  "Typing :: Typed",
]
dependencies = [
  "beautifulsoup4>=4.13.5",
  "nh3>=0.3",
]
optional-dependencies.html5lib = [ "beautifulsoup4[html5lib]>=4.13.5" ]

optional-dependencies.lxml = [ "beautifulsoup4[lxml]>=4.13.5" ]
urls.Changelog = "https://github.com/Goldziher/html-to-markdown/releases"
urls.Homepage = "https://github.com/Goldziher/html-to-markdown"
urls.Issues = "https://github.com/Goldziher/html-to-markdown/issues"
urls.Repository = "https://github.com/Goldziher/html-to-markdown.git"
scripts.html-to-markdown = "html_to_markdown.__main__:cli"
scripts.html_to_markdown = "html_to_markdown.__main__:cli"

[dependency-groups]
dev = [
  "beautifulsoup4[html5lib]>=4.13.5",
  "beautifulsoup4[lxml]>=4.13.5",
  "covdefaults>=2.3",
  "memray>=1.18; sys_platform!='win32'",
  "mypy>=1.18.2",
  "pre-commit>=4.3",
  "psutil>=7.1; sys_platform!='win32'",
  "pytest>=8.4.2",
  "pytest-benchmark>=5.1",
  "pytest-cov>=7",
  "pytest-mock>=3.15.1",
  "ruff>=0.13.2",
  "types-beautifulsoup4>=4.12.0.20250516",
  "types-psutil>=7.0.0.20250822",
  "uv-bump",
]

[tool.setuptools.packages.find]
include = [ "html_to_markdown" ]

[tool.setuptools.package-data]
html_to_markdown = [ "py.typed" ]

[tool.hatch.build]
skip-excluded-dirs = true

[tool.ruff]
target-version = "py310"
line-length = 120
src = [ "html_to_markdown", "tests" ]

format.docstring-code-line-length = 120
format.docstring-code-format = true
lint.select = [ "ALL" ]
lint.ignore = [
  "ANN401",  # dynamically typed ANY
  "C901",    # Complex function complexity - allow for streaming functions
  "COM812",  # Conflicts with formatter
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D107",    # pydocstyle - missing docstring in __init__
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D301",    # pydocstyle - use r""" if any backslashes in docstring
  "E501",    # pycodestyle line too long, handled by ruff format
  "EM",      # Exception messages
  "FBT",     # Boolean Args
  "FIX",     # we allow todo and fixme comments
  "ISC001",  # Conflicts with formatter
  "PLR0912", # Pylint - too many branches - allow for streaming functions
  "PLR0913", # Pylint - too many arguments
  "PLR0915", # Pylint - too many statements - allow for performance tests
  "PLR2004", # Magic variables, we allow them
  "TD",      # we allow todo and fixme comments
  "TRY",     # Try except block, rules are too strict
]
lint.per-file-ignores."performance_test.py" = [
  "PLC0415",
  "S101",
  "UP006",
  "UP035",
]
lint.per-file-ignores."tests/**/*.*" = [ "ARG", "D", "PD", "PT006", "PT013", "S" ]
lint.per-file-ignores."tests/benchmark_*_test.py" = [ "T201" ]
lint.isort.known-first-party = [ "html_to_markdown", "tests" ]
lint.pydocstyle.convention = "google"

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = [ "tests" ]
filterwarnings = [
  "error",
  "ignore::pytest.PytestConfigWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
  "ignore::ResourceWarning",
]

[tool.coverage.run]
source = [ "html_to_markdown" ]
omit = [ "tests/*" ]

[tool.coverage.report]
exclude_lines = [ "if TYPE_CHECKING:" ]
fail_under = 0
show_missing = true

[tool.mypy]
packages = [ "html_to_markdown", "tests" ]
python_version = "3.10"
strict = true
implicit_reexport = false
show_error_codes = true
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_any_generics = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "tests.benchmark_performance_test"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.benchmark_memory_test"
ignore_missing_imports = true

[tool.uv]
default-groups = [ "dev" ]

[tool.uv.sources]
uv-bump = { git = "https://github.com/Goldziher/uv-bump" }

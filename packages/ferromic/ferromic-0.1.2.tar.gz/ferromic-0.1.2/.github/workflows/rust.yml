name: Rust CI/CD

permissions:
  contents: write
  packages: write

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for the release (e.g., v1.0.0)'
        required: true
        default: ''

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
      - name: Build
        run: cargo build --verbose --release
      - name: Test
        run: cargo test --verbose --release

  create_release:
    name: Create Release
    needs: build
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}
          release_name: Release ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}
          draft: false
          prerelease: false

  cross_compile:
    name: Cross-compile
    needs: create_release
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cross

      - name: Build
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Package and Upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          binaries=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].targets[] | select(.kind[] | contains("bin")) | .name')
          for binary in $binaries; do
            src="target/${{ matrix.target }}/release/${binary}"
            dst="${binary}-${{ matrix.target }}.tar.gz"
            tar czvf "${dst}" -C "$(dirname "${src}")" "$(basename "${src}")"
            asset_path="${dst}"
            content_type="application/gzip"
            
            echo "Uploading ${dst}"
            
            gh release upload "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}" "${asset_path}" --clobber
          done
        shell: bash

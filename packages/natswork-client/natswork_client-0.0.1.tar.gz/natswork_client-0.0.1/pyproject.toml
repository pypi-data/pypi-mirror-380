[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "natswork-client"
version = "0.0.1"
authors = [
    {name = "NatsWork Contributors", email = "natswork@tesote.com"},
]
description = "Client library for NatsWork job processing system"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
keywords = ["nats", "jobs", "queue", "worker", "distributed"]
dependencies = [
    "nats-py>=2.4.0,<3.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "testcontainers>=3.7.0",
]

[project.urls]
Homepage = "https://github.com/tesote/nats-work"
Repository = "https://github.com/tesote/nats-work"
Documentation = "https://github.com/tesote/nats-work/tree/main/docs/python"
"Bug Reports" = "https://github.com/tesote/nats-work/issues"
Changelog = "https://github.com/tesote/nats-work/blob/main/CHANGELOG.md"

[tool.hatch.build.targets.wheel]
packages = ["src/natswork_client"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

# Ruff configuration
[tool.ruff]
line-length = 120
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "B904",  # Allow raising without from
    "B027",  # Allow empty methods in abstract base classes
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit tests (fast, no external dependencies)",
    "integration: marks tests as integration tests (slower, requires NATS)",
    "slow: marks tests as slow running",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
Metadata-Version: 2.1
Name: django-migration-zero
Version: 2.3.10
Summary: Holistic implementation of "migration zero" pattern for Django covering local changes and in-production database adjustments.
Author-email: Ambient Digital <hello@ambient.digital>
Description-Content-Type: text/markdown
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 4.2
Classifier: Framework :: Django :: 5.1
Classifier: Framework :: Django :: 5.2
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Utilities
Requires-Dist: Django>=4.2
Requires-Dist: typer~=0.12 ; extra == "dev"
Requires-Dist: pytest-django~=4.9 ; extra == "dev"
Requires-Dist: pytest-mock~=3.14 ; extra == "dev"
Requires-Dist: coverage~=7.6 ; extra == "dev"
Requires-Dist: pre-commit~=4.2 ; extra == "dev"
Requires-Dist: ruff~=0.11 ; extra == "dev"
Requires-Dist: sphinx~=7.1 ; extra == "dev"
Requires-Dist: sphinx-rtd-theme~=2.0 ; extra == "dev"
Requires-Dist: m2r2==0.3.3.post2 ; extra == "dev"
Requires-Dist: mistune<2.0.0 ; extra == "dev"
Requires-Dist: flit~=3.12 ; extra == "dev"
Requires-Dist: keyring~=25.6 ; extra == "dev"
Requires-Dist: ambient-package-update ; extra == "dev"
Requires-Dist: unittest-parametrize~=1.3 ; extra == "dev"
Requires-Dist: freezegun~=1.5 ; extra == "dev"
Project-URL: Bugtracker, https://github.com/ambient-innovation/django-migration-zero/issues
Project-URL: Changelog, https://django-migration-zero.readthedocs.io/en/latest/features/changelog.html
Project-URL: Documentation, https://django-migration-zero.readthedocs.io/en/latest/index.html
Project-URL: Homepage, https://github.com/ambient-innovation/django-migration-zero/
Project-URL: Maintained by, https://ambient.digital/
Provides-Extra: dev

[![PyPI release](https://img.shields.io/pypi/v/django-migration-zero.svg)](https://pypi.org/project/django-migration-zero/)
[![Downloads](https://static.pepy.tech/badge/django-migration-zero)](https://pepy.tech/project/django-migration-zero)
[![Coverage](https://img.shields.io/badge/Coverage-100.0%25-success)](https://github.com/ambient-innovation/django-migration-zero/actions?workflow=CI)
[![Linting](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)
[![Coding Style](https://img.shields.io/badge/code%20style-Ruff-000000.svg)](https://github.com/astral-sh/ruff)
[![Documentation Status](https://readthedocs.org/projects/django-migration-zero/badge/?version=latest)](https://django-migration-zero.readthedocs.io/en/latest/?badge=latest)

Welcome to **django-migration-zero** - the holistic implementation of "migration zero" pattern for
Django covering local changes and CI/CD pipeline adjustments.

This package implements the "migration zero" pattern to clean up your local migrations and provides convenient
management commands to recreate your migration files and updating your migration history on your environments
(like test or production systems).

* [PyPI](https://pypi.org/project/django-migration-zero/)
* [GitHub](https://github.com/ambient-innovation/django-migration-zero)
* [Full documentation](https://django-migration-zero.readthedocs.io/en/latest/index.html)
* Creator & Maintainer: [Ambient Digital](https://ambient.digital/)

## Features

* Remove all existing local migration files and recreate them as initial migrations
* Configuration singleton in Django admin to prepare your clean-up deployment
* Management command for your pipeline to update Django's migration history table to reflect the changed migrations

## Motivation

Working with any proper ORM will result in database changes which are reflected in migration files to update your
different environment's database structure. These files are versioned in your repository and if you follow any of the
most popular deployment approaches, they won't be needed when they are deployed on production. This means, they clutter
your repo, might lead to merge conflicts in the future and will slow down your test setup.

Django's default way of handling this is called "squashing". This approach is covered broadly in the
[official documentation](https://docs.djangoproject.com/en/dev/topics/migrations/#migration-squashing). The main
drawback here is, that you have to take care of circular dependencies between models. Depending on your project's
size, this can take a fair amount of time.

The main benefit of squashing migrations is, that the history stays intact, therefore it can be used for example in
package which can be installed by anybody and you don't have control over their database.

If you are working on a "regular" application, you have full control over your data(bases) and once everything has
been applied on the "last" system, typically production, the migrations are obsolete. To avoid spending much time on
fixing squashed migrations you won't need, you can use the "migration zero" pattern. In a nutshell, this means:

* Delete all your local migration files
* Recreate initial migration files containing your current model state
* Fix the migration history on every of your environments

## Installation

- Install the package via pip:

  `pip install django-migration-zero`

  or via pipenv:

  `pipenv install django-migration-zero`

- Add module to `INSTALLED_APPS` within the main django `settings.py`:

    ````
    INSTALLED_APPS = (
        ...
        'django_migration_zero',
    )
     ````

- Apply migrations by running:

  `python ./manage.py migrate`

- Add this block to your loggers in your main Django `settings.py` to show logs in your console.

```python
LOGGING = {
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django_migration_zero": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}
```

### Publish to ReadTheDocs.io

- Fetch the latest changes in GitHub mirror and push them
- Trigger new build at ReadTheDocs.io (follow instructions in admin panel at RTD) if the GitHub webhook is not yet set
  up.

### Publish to PyPi

- Update documentation about new/changed functionality

- Update the `Changelog`

- Increment version in main `__init__.py`

- Create pull request / merge to master

- This project uses the flit package to publish to PyPI. Thus, publishing should be as easy as running:
  ```
  flit publish
  ```

  To publish to TestPyPI use the following to ensure that you have set up your .pypirc as
  shown [here](https://flit.readthedocs.io/en/latest/upload.html#using-pypirc) and use the following command:

  ```
  flit publish --repository testpypi
  ```

### Maintenance

Please note that this package supports the [ambient-package-update](https://pypi.org/project/ambient-package-update/).
So you don't have to worry about the maintenance of this package. This updater is rendering all important
configuration and setup files. It works similar to well-known updaters like `pyupgrade` or `django-upgrade`.

To run an update, refer to the [documentation page](https://pypi.org/project/ambient-package-update/)
of the "ambient-package-update".


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcpypi"
version = "2025.09.30.1"
description = "ðŸŽ¤ mcpypi - Your Master of Ceremonies for PyPI! The ultimate PyPI package intelligence platform through Model Context Protocol (MCP)"
authors = [
    {name = "Ryan Malloy", email = "ryan@supported.systems"}
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
keywords = ["mcp", "pypi", "package", "dependency", "python", "security", "license", "analysis", "intelligence", "claude"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Software Distribution",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
    "Framework :: AsyncIO",
]
dependencies = [
    "fastmcp>=2.0.0",
    "httpx>=0.28.0",
    "packaging>=24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "click==8.1.7",
    "feedparser>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=6.0.0", 
    "pytest-mock>=3.12.0",
    "ruff>=0.12.0",
    "pre-commit>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/rsp2k/pypi-query-mcp-server"
Repository = "https://github.com/rsp2k/pypi-query-mcp-server"
Documentation = "https://github.com/rsp2k/pypi-query-mcp-server"

[project.scripts]
mcpypi = "pypi_query_mcp.server:main"
pypi-query-mcp = "pypi_query_mcp.server:main"

[tool.hatch.build.targets.wheel]
packages = ["pypi_query_mcp"]

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pypi_query_mcp"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["pypi_query_mcp"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "pip-audit>=2.9.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.3.0",
    "safety>=3.2.11",
    "twine>=5.0.0",
    "build>=1.0.0",
]

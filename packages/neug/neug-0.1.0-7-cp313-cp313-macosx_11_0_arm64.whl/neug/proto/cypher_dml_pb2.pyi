"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
*
Copyright 2020 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import common_pb2
import cypher_ddl_pb2
import expr_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ReadCSV(google.protobuf.message.Message):
    """A implementation of data source by reading from CSV files"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class options(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DELIMITER_FIELD_NUMBER: builtins.int
        HEADER_FIELD_NUMBER: builtins.int
        SKIP_NUM_FIELD_NUMBER: builtins.int
        QUOTE_CHAR_FIELD_NUMBER: builtins.int
        ESCAPE_CHAR_FIELD_NUMBER: builtins.int
        IGNORE_ERRORS_FIELD_NUMBER: builtins.int
        AUTO_DETECTION_FIELD_NUMBER: builtins.int
        PARALLEL_FIELD_NUMBER: builtins.int
        delimiter: builtins.str
        """Character that separates different columns in a lines, default is ','"""
        header: builtins.bool
        """Whether the first line of the CSV file is the header. Can be true or false, default is false"""
        skip_num: builtins.int
        """Number of rows to skip from the input file, default is 0"""
        quote_char: builtins.str
        """Character to start a string quote, default is '"'"""
        escape_char: builtins.str
        """Character within string quotes to escape QUOTE and other characters, default is '\\'"""
        ignore_errors: builtins.bool
        """Skips malformed rows in CSV files if set to true, default is false"""
        auto_detection: builtins.bool
        """Automatically detect HEADER, DELIM, QUOTE, ESCAPE if not manually set, default is true"""
        parallel: builtins.bool
        """Whether to read the CSV file in parallel, default is true"""
        def __init__(
            self,
            *,
            delimiter: builtins.str = ...,
            header: builtins.bool = ...,
            skip_num: builtins.int = ...,
            quote_char: builtins.str = ...,
            escape_char: builtins.str = ...,
            ignore_errors: builtins.bool = ...,
            auto_detection: builtins.bool = ...,
            parallel: builtins.bool = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing.Literal[
                "auto_detection",
                b"auto_detection",
                "delimiter",
                b"delimiter",
                "escape_char",
                b"escape_char",
                "header",
                b"header",
                "ignore_errors",
                b"ignore_errors",
                "parallel",
                b"parallel",
                "quote_char",
                b"quote_char",
                "skip_num",
                b"skip_num",
            ],
        ) -> None: ...

    FILE_PATH_FIELD_NUMBER: builtins.int
    CSV_OPTIONS_FIELD_NUMBER: builtins.int
    BATCH_READER_FIELD_NUMBER: builtins.int
    file_path: builtins.str
    batch_reader: builtins.bool
    """Whether to read the CSV file in batch mode, default is false"""
    @property
    def csv_options(self) -> global___ReadCSV.options: ...
    def __init__(
        self,
        *,
        file_path: builtins.str = ...,
        csv_options: global___ReadCSV.options | None = ...,
        batch_reader: builtins.bool = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["csv_options", b"csv_options"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "batch_reader",
            b"batch_reader",
            "csv_options",
            b"csv_options",
            "file_path",
            b"file_path",
        ],
    ) -> None: ...

global___ReadCSV = ReadCSV

@typing.final
class DataSource(google.protobuf.message.Message):
    """Unified abstraction of data source, used to load external data sources and encapsulate them into an internal unified row-based data structure."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    READ_CSV_FIELD_NUMBER: builtins.int
    @property
    def read_csv(self) -> global___ReadCSV: ...
    def __init__(
        self,
        *,
        read_csv: global___ReadCSV | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["read_csv", b"read_csv", "source", b"source"]
    ) -> builtins.bool: ...
    def ClearField(
        self, field_name: typing.Literal["read_csv", b"read_csv", "source", b"source"]
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing.Literal["source", b"source"]
    ) -> typing.Literal["read_csv"] | None: ...

global___DataSource = DataSource

@typing.final
class PropertyMapping(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROPERTY_FIELD_NUMBER: builtins.int
    DATA_FIELD_NUMBER: builtins.int
    @property
    def property(self) -> expr_pb2.Property: ...
    @property
    def data(self) -> expr_pb2.Expression: ...
    def __init__(
        self,
        *,
        property: expr_pb2.Property | None = ...,
        data: expr_pb2.Expression | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["data", b"data", "property", b"property"]
    ) -> builtins.bool: ...
    def ClearField(
        self, field_name: typing.Literal["data", b"data", "property", b"property"]
    ) -> None: ...

global___PropertyMapping = PropertyMapping

@typing.final
class BatchInsertVertex(google.protobuf.message.Message):
    """COPY User from 'user.csv'
    Batch load data from a row-based data source and insert it into node types on the graph.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERTEX_TYPE_FIELD_NUMBER: builtins.int
    PROPERTY_MAPPINGS_FIELD_NUMBER: builtins.int
    @property
    def vertex_type(self) -> common_pb2.NameOrId: ...
    @property
    def property_mappings(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___PropertyMapping
    ]:
        """Column mapping specifies which column in the data source corresponds to a property, where the data in PropertyMapping is the column index."""

    def __init__(
        self,
        *,
        vertex_type: common_pb2.NameOrId | None = ...,
        property_mappings: (
            collections.abc.Iterable[global___PropertyMapping] | None
        ) = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["vertex_type", b"vertex_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "property_mappings", b"property_mappings", "vertex_type", b"vertex_type"
        ],
    ) -> None: ...

global___BatchInsertVertex = BatchInsertVertex

@typing.final
class BatchInsertEdge(google.protobuf.message.Message):
    """COPY Knows FROM 'knows_user_user.csv' (from='User', to='User');"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EDGE_TYPE_FIELD_NUMBER: builtins.int
    SOURCE_VERTEX_BINDING_FIELD_NUMBER: builtins.int
    DESTINATION_VERTEX_BINDING_FIELD_NUMBER: builtins.int
    PROPERTY_MAPPINGS_FIELD_NUMBER: builtins.int
    @property
    def edge_type(self) -> cypher_ddl_pb2.EdgeType: ...
    @property
    def source_vertex_binding(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___PropertyMapping
    ]:
        """Specify the source node bound to the edge via column mapping."""

    @property
    def destination_vertex_binding(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___PropertyMapping
    ]:
        """Specify the destination node bound to the edge via column mapping."""

    @property
    def property_mappings(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___PropertyMapping
    ]:
        """Column mapping specifies which column in the data source corresponds to a property, where the data in PropertyMapping is the column index."""

    def __init__(
        self,
        *,
        edge_type: cypher_ddl_pb2.EdgeType | None = ...,
        source_vertex_binding: (
            collections.abc.Iterable[global___PropertyMapping] | None
        ) = ...,
        destination_vertex_binding: (
            collections.abc.Iterable[global___PropertyMapping] | None
        ) = ...,
        property_mappings: (
            collections.abc.Iterable[global___PropertyMapping] | None
        ) = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["edge_type", b"edge_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "destination_vertex_binding",
            b"destination_vertex_binding",
            "edge_type",
            b"edge_type",
            "property_mappings",
            b"property_mappings",
            "source_vertex_binding",
            b"source_vertex_binding",
        ],
    ) -> None: ...

global___BatchInsertEdge = BatchInsertEdge

@typing.final
class InsertVertex(google.protobuf.message.Message):
    """Create (u1:User {name: 'Alice', age: 18}), (u2:User {name: 'Bob', age: 20})"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Entry(google.protobuf.message.Message):
        """Define the insertion operation for a single vertex type"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        VERTEX_TYPE_FIELD_NUMBER: builtins.int
        PROPERTY_MAPPINGS_FIELD_NUMBER: builtins.int
        ALIAS_FIELD_NUMBER: builtins.int
        CONFLICT_ACTION_FIELD_NUMBER: builtins.int
        conflict_action: cypher_ddl_pb2.ConflictAction.ValueType
        @property
        def vertex_type(self) -> common_pb2.NameOrId: ...
        @property
        def property_mappings(
            self,
        ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
            global___PropertyMapping
        ]:
            """Specify property key-value pairs"""

        @property
        def alias(self) -> common_pb2.NameOrId: ...
        def __init__(
            self,
            *,
            vertex_type: common_pb2.NameOrId | None = ...,
            property_mappings: (
                collections.abc.Iterable[global___PropertyMapping] | None
            ) = ...,
            alias: common_pb2.NameOrId | None = ...,
            conflict_action: cypher_ddl_pb2.ConflictAction.ValueType = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing.Literal[
                "alias", b"alias", "vertex_type", b"vertex_type"
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing.Literal[
                "alias",
                b"alias",
                "conflict_action",
                b"conflict_action",
                "property_mappings",
                b"property_mappings",
                "vertex_type",
                b"vertex_type",
            ],
        ) -> None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___InsertVertex.Entry
    ]:
        """include multiple vertex type insertion operations"""

    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___InsertVertex.Entry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___InsertVertex = InsertVertex

@typing.final
class InsertEdge(google.protobuf.message.Message):
    """Create (u1:User {name: 'Alice', age: 18}), (u2:User {name: 'Bob', age: 20})
    Create (u1)-[:FOLLOWS {since: '2020-01-01'}]->(u2)
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Entry(google.protobuf.message.Message):
        """Define the insertion operation for a single edge type"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EDGE_TYPE_FIELD_NUMBER: builtins.int
        SOURCE_VERTEX_BINDING_FIELD_NUMBER: builtins.int
        DESTINATION_VERTEX_BINDING_FIELD_NUMBER: builtins.int
        PROPERTY_MAPPINGS_FIELD_NUMBER: builtins.int
        ALIAS_FIELD_NUMBER: builtins.int
        CONFLICT_ACTION_FIELD_NUMBER: builtins.int
        conflict_action: cypher_ddl_pb2.ConflictAction.ValueType
        @property
        def edge_type(self) -> cypher_ddl_pb2.EdgeType: ...
        @property
        def source_vertex_binding(self) -> common_pb2.NameOrId:
            """Specify the source node bound to the edge using an alias.
            If the query does not explicitly provide an alias for the src node, the system will automatically assign a unique alias.
            """

        @property
        def destination_vertex_binding(self) -> common_pb2.NameOrId:
            """Specify the destination node bound to the edge using an alias.
            If the query does not explicitly provide an alias for the dst node, the system will automatically assign a unique alias.
            """

        @property
        def property_mappings(
            self,
        ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
            global___PropertyMapping
        ]:
            """Specify property key-value pairs"""

        @property
        def alias(self) -> common_pb2.NameOrId: ...
        def __init__(
            self,
            *,
            edge_type: cypher_ddl_pb2.EdgeType | None = ...,
            source_vertex_binding: common_pb2.NameOrId | None = ...,
            destination_vertex_binding: common_pb2.NameOrId | None = ...,
            property_mappings: (
                collections.abc.Iterable[global___PropertyMapping] | None
            ) = ...,
            alias: common_pb2.NameOrId | None = ...,
            conflict_action: cypher_ddl_pb2.ConflictAction.ValueType = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing.Literal[
                "alias",
                b"alias",
                "destination_vertex_binding",
                b"destination_vertex_binding",
                "edge_type",
                b"edge_type",
                "source_vertex_binding",
                b"source_vertex_binding",
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing.Literal[
                "alias",
                b"alias",
                "conflict_action",
                b"conflict_action",
                "destination_vertex_binding",
                b"destination_vertex_binding",
                "edge_type",
                b"edge_type",
                "property_mappings",
                b"property_mappings",
                "source_vertex_binding",
                b"source_vertex_binding",
            ],
        ) -> None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___InsertEdge.Entry
    ]: ...
    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___InsertEdge.Entry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___InsertEdge = InsertEdge

@typing.final
class SetVertexProperty(google.protobuf.message.Message):
    """MATCH (u:User)
    WHERE u.name = 'Adam'
    SET u.age = 50
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Entry(google.protobuf.message.Message):
        """set a single vertex property based on the single alias, the alias can refer to vertices with different labels"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        VERTEX_BINDING_FIELD_NUMBER: builtins.int
        PROPERTY_MAPPING_FIELD_NUMBER: builtins.int
        @property
        def vertex_binding(self) -> expr_pb2.Variable: ...
        @property
        def property_mapping(self) -> global___PropertyMapping: ...
        def __init__(
            self,
            *,
            vertex_binding: expr_pb2.Variable | None = ...,
            property_mapping: global___PropertyMapping | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing.Literal[
                "property_mapping",
                b"property_mapping",
                "vertex_binding",
                b"vertex_binding",
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing.Literal[
                "property_mapping",
                b"property_mapping",
                "vertex_binding",
                b"vertex_binding",
            ],
        ) -> None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___SetVertexProperty.Entry
    ]:
        """set multiple vertex properties based on the multiple aliases"""

    def __init__(
        self,
        *,
        entries: (
            collections.abc.Iterable[global___SetVertexProperty.Entry] | None
        ) = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___SetVertexProperty = SetVertexProperty

@typing.final
class SetEdgeProperty(google.protobuf.message.Message):
    """MATCH (u0)-[f]->()
    WHERE u0.name = 'Adam'
    SET f.since = 1999
    RETURN f;
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Entry(google.protobuf.message.Message):
        """set a single edge property based on the single alias, the alias can refer to edges with different labels"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EDGE_BINDING_FIELD_NUMBER: builtins.int
        PROPERTY_MAPPING_FIELD_NUMBER: builtins.int
        @property
        def edge_binding(self) -> expr_pb2.Variable: ...
        @property
        def property_mapping(self) -> global___PropertyMapping: ...
        def __init__(
            self,
            *,
            edge_binding: expr_pb2.Variable | None = ...,
            property_mapping: global___PropertyMapping | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing.Literal[
                "edge_binding", b"edge_binding", "property_mapping", b"property_mapping"
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing.Literal[
                "edge_binding", b"edge_binding", "property_mapping", b"property_mapping"
            ],
        ) -> None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___SetEdgeProperty.Entry
    ]:
        """set multiple edge properties based on the multiple aliases"""

    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___SetEdgeProperty.Entry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___SetEdgeProperty = SetEdgeProperty

@typing.final
class DeleteVertex(google.protobuf.message.Message):
    """MATCH (u)
    WHERE u.name = 'A'
    DELETE u
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _type:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _typeEnumTypeWrapper(
        google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
            DeleteVertex._type.ValueType
        ],
        builtins.type,
    ):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        DELETE: DeleteVertex._type.ValueType  # 0
        DETACH_DELETE: DeleteVertex._type.ValueType  # 1

    class type(_type, metaclass=_typeEnumTypeWrapper):
        """when deleting a node, delete all relationships connected to it if `detached` is true, otherwise only delete the node itself."""

    DELETE: DeleteVertex.type.ValueType  # 0
    DETACH_DELETE: DeleteVertex.type.ValueType  # 1

    @typing.final
    class Entry(google.protobuf.message.Message):
        """delete vertices bound to a single alias"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        VERTEX_BINDING_FIELD_NUMBER: builtins.int
        DELETE_TYPE_FIELD_NUMBER: builtins.int
        delete_type: global___DeleteVertex.type.ValueType
        @property
        def vertex_binding(self) -> expr_pb2.Variable: ...
        def __init__(
            self,
            *,
            vertex_binding: expr_pb2.Variable | None = ...,
            delete_type: global___DeleteVertex.type.ValueType = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing.Literal["vertex_binding", b"vertex_binding"]
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing.Literal[
                "delete_type", b"delete_type", "vertex_binding", b"vertex_binding"
            ],
        ) -> None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___DeleteVertex.Entry
    ]:
        """delete vertices bound to multiple aliases"""

    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___DeleteVertex.Entry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___DeleteVertex = DeleteVertex

@typing.final
class DeleteEdge(google.protobuf.message.Message):
    """MATCH (u:User)-[f]->(u1)
    WHERE u.name = 'Karissa'
    DELETE f;
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EDGE_BINDING_FIELD_NUMBER: builtins.int
    @property
    def edge_binding(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        expr_pb2.Variable
    ]:
        """delete edges bound to multiple aliases"""

    def __init__(
        self,
        *,
        edge_binding: collections.abc.Iterable[expr_pb2.Variable] | None = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing.Literal["edge_binding", b"edge_binding"]
    ) -> None: ...

global___DeleteEdge = DeleteEdge

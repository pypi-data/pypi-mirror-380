# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: expr.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import common_pb2 as common__pb2
import type_pb2 as type__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\nexpr.proto\x12\x06\x63ommon\x1a\x0c\x63ommon.proto\x1a\ntype.proto"\x07\n\x05IdKey"\n\n\x08LabelKey"\x0b\n\tLengthKey"\x08\n\x06\x41llKey",\n\x0bNameOrIdKey\x12\x1d\n\x03key\x18\x01 \x01(\x0b\x32\x10.common.NameOrId"\xb4\x01\n\x08Property\x12\x1b\n\x02id\x18\x02 \x01(\x0b\x32\r.common.IdKeyH\x00\x12!\n\x05label\x18\x03 \x01(\x0b\x32\x10.common.LabelKeyH\x00\x12 \n\x03len\x18\x04 \x01(\x0b\x32\x11.common.LengthKeyH\x00\x12\x1d\n\x03\x61ll\x18\x05 \x01(\x0b\x32\x0e.common.AllKeyH\x00\x12\x1f\n\x03key\x18\x06 \x01(\x0b\x32\x10.common.NameOrIdH\x00\x42\x06\n\x04item"t\n\x08Variable\x12\x1d\n\x03tag\x18\x01 \x01(\x0b\x32\x10.common.NameOrId\x12"\n\x08property\x18\x02 \x01(\x0b\x32\x10.common.Property\x12%\n\tnode_type\x18\x03 \x01(\x0b\x32\x12.common.IrDataType"\xc2\x04\n\x0cPathFunction\x12\x1d\n\x03tag\x18\x01 \x01(\x0b\x32\x10.common.NameOrId\x12$\n\x08property\x18\x02 \x01(\x0b\x32\x10.common.PropertyH\x00\x12\x34\n\x04vars\x18\x03 \x01(\x0b\x32$.common.PathFunction.PathElementKeysH\x00\x12\x38\n\x03map\x18\x04 \x01(\x0b\x32).common.PathFunction.PathElementKeyValuesH\x00\x12)\n\x03opt\x18\x05 \x01(\x0e\x32\x1c.common.PathFunction.FuncOpt\x12%\n\tnode_type\x18\x06 \x01(\x0b\x32\x12.common.IrDataType\x1a\x31\n\x0fPathElementKeys\x12\x1e\n\x04keys\x18\x01 \x03(\x0b\x32\x10.common.Property\x1a\xb9\x01\n\x14PathElementKeyValues\x12O\n\x08key_vals\x18\x01 \x03(\x0b\x32=.common.PathFunction.PathElementKeyValues.PathElementKeyValue\x1aP\n\x13PathElementKeyValue\x12\x1a\n\x03key\x18\x01 \x01(\x0b\x32\r.common.Value\x12\x1d\n\x03val\x18\x02 \x01(\x0b\x32\x10.common.Property"0\n\x07\x46uncOpt\x12\n\n\x06VERTEX\x10\x00\x12\x08\n\x04\x45\x44GE\x10\x01\x12\x0f\n\x0bVERTEX_EDGE\x10\x02\x42\n\n\x08path_key".\n\x0cVariableKeys\x12\x1e\n\x04keys\x18\x01 \x03(\x0b\x32\x10.common.Variable"Z\n\x0e\x43ompositeField\x12\x1e\n\x05value\x18\x01 \x01(\x0b\x32\r.common.ValueH\x00\x12\x1f\n\x03var\x18\x02 \x01(\x0b\x32\x10.common.VariableH\x00\x42\x07\n\x05\x66ield"1\n\x07ToTuple\x12&\n\x06\x66ields\x18\x01 \x03(\x0b\x32\x16.common.CompositeField"\xb0\x01\n\x10VariableKeyValue\x12\x1a\n\x03key\x18\x01 \x01(\x0b\x32\r.common.Value\x12\x1f\n\x03val\x18\x02 \x01(\x0b\x32\x10.common.VariableH\x00\x12)\n\tpath_func\x18\x03 \x01(\x0b\x32\x14.common.PathFunctionH\x00\x12+\n\x06nested\x18\x04 \x01(\x0b\x32\x19.common.VariableKeyValuesH\x00\x42\x07\n\x05value"?\n\x11VariableKeyValues\x12*\n\x08key_vals\x18\x01 \x03(\x0b\x32\x18.common.VariableKeyValue"R\n\x0c\x44ynamicParam\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05index\x18\x02 \x01(\x05\x12%\n\tdata_type\x18\x03 \x01(\x0b\x32\x12.common.IrDataType"\xdd\x01\n\x04\x43\x61se\x12\x34\n\x15when_then_expressions\x18\x01 \x03(\x0b\x32\x15.common.Case.WhenThen\x12\x32\n\x16\x65lse_result_expression\x18\x02 \x01(\x0b\x32\x12.common.Expression\x1ak\n\x08WhenThen\x12+\n\x0fwhen_expression\x18\x01 \x01(\x0b\x32\x12.common.Expression\x12\x32\n\x16then_result_expression\x18\x02 \x01(\x0b\x32\x12.common.Expression"\x92\x01\n\x07\x45xtract\x12*\n\x08interval\x18\x01 \x01(\x0e\x32\x18.common.Extract.Interval"[\n\x08Interval\x12\x08\n\x04YEAR\x10\x00\x12\t\n\x05MONTH\x10\x01\x12\x07\n\x03\x44\x41Y\x10\x02\x12\x08\n\x04HOUR\x10\x03\x12\n\n\x06MINUTE\x10\x04\x12\n\n\x06SECOND\x10\x05\x12\x0f\n\x0bMILLISECOND\x10\x06"\x8a\x01\n\x0cTimeInterval\x12*\n\x08interval\x18\x01 \x01(\x0e\x32\x18.common.Extract.Interval\x12\x1e\n\x05\x63onst\x18\x02 \x01(\x0b\x32\r.common.ValueH\x00\x12%\n\x05param\x18\x03 \x01(\x0b\x32\x14.common.DynamicParamH\x00\x42\x07\n\x05value";\n\rDateTimeMinus\x12*\n\x08interval\x18\x01 \x01(\x0e\x32\x18.common.Extract.Interval"\xf4\x01\n\nPathConcat\x12/\n\x04left\x18\x01 \x01(\x0b\x32!.common.PathConcat.ConcatPathInfo\x12\x30\n\x05right\x18\x02 \x01(\x0b\x32!.common.PathConcat.ConcatPathInfo\x1a\x63\n\x0e\x43oncatPathInfo\x12"\n\x08path_tag\x18\x01 \x01(\x0b\x32\x10.common.Variable\x12-\n\x08\x65ndpoint\x18\x02 \x01(\x0e\x32\x1b.common.PathConcat.Endpoint"\x1e\n\x08\x45ndpoint\x12\t\n\x05START\x10\x00\x12\x07\n\x03\x45ND\x10\x01"K\n\x13UserDefinedFunction\x12\x0c\n\x04name\x18\x01 \x01(\t\x12&\n\nparameters\x18\x02 \x03(\x0b\x32\x12.common.Expression"\x1a\n\x06ToDate\x12\x10\n\x08\x64\x61te_str\x18\x01 \x01(\t""\n\nToDatetime\x12\x14\n\x0c\x64\x61tetime_str\x18\x01 \x01(\t""\n\nToInterval\x12\x14\n\x0cinterval_str\x18\x01 \x01(\t"\xfc\x06\n\x07\x45xprOpr\x12"\n\x07logical\x18\x02 \x01(\x0e\x32\x0f.common.LogicalH\x00\x12#\n\x05\x61rith\x18\x03 \x01(\x0e\x32\x12.common.ArithmeticH\x00\x12\x1e\n\x05\x63onst\x18\x04 \x01(\x0b\x32\r.common.ValueH\x00\x12\x1f\n\x03var\x18\x05 \x01(\x0b\x32\x10.common.VariableH\x00\x12&\n\x05\x62race\x18\x06 \x01(\x0e\x32\x15.common.ExprOpr.BraceH\x00\x12$\n\x04vars\x18\x07 \x01(\x0b\x32\x14.common.VariableKeysH\x00\x12\'\n\x07var_map\x18\x08 \x01(\x0b\x32\x14.common.VariableKeysH\x00\x12%\n\x05param\x18\t \x01(\x0b\x32\x14.common.DynamicParamH\x00\x12\x1c\n\x04\x63\x61se\x18\n \x01(\x0b\x32\x0c.common.CaseH\x00\x12"\n\x07\x65xtract\x18\x0b \x01(\x0b\x32\x0f.common.ExtractH\x00\x12(\n\x03map\x18\r \x01(\x0b\x32\x19.common.VariableKeyValuesH\x00\x12-\n\rtime_interval\x18\x0e \x01(\x0b\x32\x14.common.TimeIntervalH\x00\x12\x30\n\x0f\x64\x61te_time_minus\x18\x0f \x01(\x0b\x32\x15.common.DateTimeMinusH\x00\x12)\n\x0bpath_concat\x18\x10 \x01(\x0b\x32\x12.common.PathConcatH\x00\x12)\n\tpath_func\x18\x11 \x01(\x0b\x32\x14.common.PathFunctionH\x00\x12/\n\x08udf_func\x18\x12 \x01(\x0b\x32\x1b.common.UserDefinedFunctionH\x00\x12!\n\x07to_date\x18\x13 \x01(\x0b\x32\x0e.common.ToDateH\x00\x12)\n\x0bto_datetime\x18\x14 \x01(\x0b\x32\x12.common.ToDatetimeH\x00\x12)\n\x0bto_interval\x18\x15 \x01(\x0b\x32\x12.common.ToIntervalH\x00\x12#\n\x08to_tuple\x18\x16 \x01(\x0b\x32\x0f.common.ToTupleH\x00\x12%\n\tnode_type\x18\x0c \x01(\x0b\x32\x12.common.IrDataType"(\n\x05\x42race\x12\x0e\n\nLEFT_BRACE\x10\x00\x12\x0f\n\x0bRIGHT_BRACE\x10\x01\x42\x06\n\x04item"0\n\nExpression\x12"\n\toperators\x18\x01 \x03(\x0b\x32\x0f.common.ExprOpr*\xa1\x01\n\x07Logical\x12\x06\n\x02\x45Q\x10\x00\x12\x06\n\x02NE\x10\x01\x12\x06\n\x02LT\x10\x02\x12\x06\n\x02LE\x10\x03\x12\x06\n\x02GT\x10\x04\x12\x06\n\x02GE\x10\x05\x12\n\n\x06WITHIN\x10\x06\x12\x0b\n\x07WITHOUT\x10\x07\x12\x0e\n\nSTARTSWITH\x10\x08\x12\x0c\n\x08\x45NDSWITH\x10\t\x12\x07\n\x03\x41ND\x10\n\x12\x06\n\x02OR\x10\x0b\x12\x07\n\x03NOT\x10\x0c\x12\n\n\x06ISNULL\x10\r\x12\t\n\x05REGEX\x10\x0e*\x83\x01\n\nArithmetic\x12\x07\n\x03\x41\x44\x44\x10\x00\x12\x07\n\x03SUB\x10\x01\x12\x07\n\x03MUL\x10\x02\x12\x07\n\x03\x44IV\x10\x03\x12\x07\n\x03MOD\x10\x04\x12\x07\n\x03\x45XP\x10\x05\x12\n\n\x06\x42ITAND\x10\x06\x12\t\n\x05\x42ITOR\x10\x07\x12\n\n\x06\x42ITXOR\x10\x08\x12\r\n\tBITLSHIFT\x10\t\x12\r\n\tBITRSHIFT\x10\nB4\n!com.alibaba.graphscope.gaia.protoB\x0fOuterExpressionb\x06proto3'
)

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "expr_pb2", globals())
if _descriptor._USE_C_DESCRIPTORS == False:

    DESCRIPTOR._options = None
    DESCRIPTOR._serialized_options = (
        b"\n!com.alibaba.graphscope.gaia.protoB\017OuterExpression"
    )
    _LOGICAL._serialized_start = 3484
    _LOGICAL._serialized_end = 3645
    _ARITHMETIC._serialized_start = 3648
    _ARITHMETIC._serialized_end = 3779
    _IDKEY._serialized_start = 48
    _IDKEY._serialized_end = 55
    _LABELKEY._serialized_start = 57
    _LABELKEY._serialized_end = 67
    _LENGTHKEY._serialized_start = 69
    _LENGTHKEY._serialized_end = 80
    _ALLKEY._serialized_start = 82
    _ALLKEY._serialized_end = 90
    _NAMEORIDKEY._serialized_start = 92
    _NAMEORIDKEY._serialized_end = 136
    _PROPERTY._serialized_start = 139
    _PROPERTY._serialized_end = 319
    _VARIABLE._serialized_start = 321
    _VARIABLE._serialized_end = 437
    _PATHFUNCTION._serialized_start = 440
    _PATHFUNCTION._serialized_end = 1018
    _PATHFUNCTION_PATHELEMENTKEYS._serialized_start = 719
    _PATHFUNCTION_PATHELEMENTKEYS._serialized_end = 768
    _PATHFUNCTION_PATHELEMENTKEYVALUES._serialized_start = 771
    _PATHFUNCTION_PATHELEMENTKEYVALUES._serialized_end = 956
    _PATHFUNCTION_PATHELEMENTKEYVALUES_PATHELEMENTKEYVALUE._serialized_start = 876
    _PATHFUNCTION_PATHELEMENTKEYVALUES_PATHELEMENTKEYVALUE._serialized_end = 956
    _PATHFUNCTION_FUNCOPT._serialized_start = 958
    _PATHFUNCTION_FUNCOPT._serialized_end = 1006
    _VARIABLEKEYS._serialized_start = 1020
    _VARIABLEKEYS._serialized_end = 1066
    _COMPOSITEFIELD._serialized_start = 1068
    _COMPOSITEFIELD._serialized_end = 1158
    _TOTUPLE._serialized_start = 1160
    _TOTUPLE._serialized_end = 1209
    _VARIABLEKEYVALUE._serialized_start = 1212
    _VARIABLEKEYVALUE._serialized_end = 1388
    _VARIABLEKEYVALUES._serialized_start = 1390
    _VARIABLEKEYVALUES._serialized_end = 1453
    _DYNAMICPARAM._serialized_start = 1455
    _DYNAMICPARAM._serialized_end = 1537
    _CASE._serialized_start = 1540
    _CASE._serialized_end = 1761
    _CASE_WHENTHEN._serialized_start = 1654
    _CASE_WHENTHEN._serialized_end = 1761
    _EXTRACT._serialized_start = 1764
    _EXTRACT._serialized_end = 1910
    _EXTRACT_INTERVAL._serialized_start = 1819
    _EXTRACT_INTERVAL._serialized_end = 1910
    _TIMEINTERVAL._serialized_start = 1913
    _TIMEINTERVAL._serialized_end = 2051
    _DATETIMEMINUS._serialized_start = 2053
    _DATETIMEMINUS._serialized_end = 2112
    _PATHCONCAT._serialized_start = 2115
    _PATHCONCAT._serialized_end = 2359
    _PATHCONCAT_CONCATPATHINFO._serialized_start = 2228
    _PATHCONCAT_CONCATPATHINFO._serialized_end = 2327
    _PATHCONCAT_ENDPOINT._serialized_start = 2329
    _PATHCONCAT_ENDPOINT._serialized_end = 2359
    _USERDEFINEDFUNCTION._serialized_start = 2361
    _USERDEFINEDFUNCTION._serialized_end = 2436
    _TODATE._serialized_start = 2438
    _TODATE._serialized_end = 2464
    _TODATETIME._serialized_start = 2466
    _TODATETIME._serialized_end = 2500
    _TOINTERVAL._serialized_start = 2502
    _TOINTERVAL._serialized_end = 2536
    _EXPROPR._serialized_start = 2539
    _EXPROPR._serialized_end = 3431
    _EXPROPR_BRACE._serialized_start = 3383
    _EXPROPR_BRACE._serialized_end = 3423
    _EXPRESSION._serialized_start = 3433
    _EXPRESSION._serialized_end = 3481
# @@protoc_insertion_point(module_scope)

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
*
Copyright 2020 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import basic_type_pb2
import builtins
import collections.abc
import common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class GraphDataType(google.protobuf.message.Message):
    """GraphDataType, including structured data types of vertices or edges."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _GraphElementOpt:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _GraphElementOptEnumTypeWrapper(
        google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
            GraphDataType._GraphElementOpt.ValueType
        ],
        builtins.type,
    ):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        VERTEX: GraphDataType._GraphElementOpt.ValueType  # 0
        EDGE: GraphDataType._GraphElementOpt.ValueType  # 1

    class GraphElementOpt(_GraphElementOpt, metaclass=_GraphElementOptEnumTypeWrapper):
        """The Option of the graph element, i.e., vertex or edge"""

    VERTEX: GraphDataType.GraphElementOpt.ValueType  # 0
    EDGE: GraphDataType.GraphElementOpt.ValueType  # 1

    @typing.final
    class GraphElementLabel(google.protobuf.message.Message):
        """The label of the graph element. i.e., the label of vertex or edge.
        Specifically, for an edge, the labels of its src and dst vertices can be further specified.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        LABEL_FIELD_NUMBER: builtins.int
        SRC_LABEL_FIELD_NUMBER: builtins.int
        DST_LABEL_FIELD_NUMBER: builtins.int
        label: builtins.int
        """the label of vertex or edge"""
        @property
        def src_label(self) -> google.protobuf.wrappers_pb2.Int32Value:
            """optional field, denoting the label of the src vertex of the edge"""

        @property
        def dst_label(self) -> google.protobuf.wrappers_pb2.Int32Value:
            """optional field, denoting the label of the dst vertex of the edge"""

        def __init__(
            self,
            *,
            label: builtins.int = ...,
            src_label: google.protobuf.wrappers_pb2.Int32Value | None = ...,
            dst_label: google.protobuf.wrappers_pb2.Int32Value | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing.Literal[
                "dst_label", b"dst_label", "src_label", b"src_label"
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing.Literal[
                "dst_label", b"dst_label", "label", b"label", "src_label", b"src_label"
            ],
        ) -> None: ...

    @typing.final
    class GraphElementTypeField(google.protobuf.message.Message):
        """GraphElementTypeField represents the definition of a field in the structured GraphElementType
        In common, it denotes the type of properties.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PROP_ID_FIELD_NUMBER: builtins.int
        TYPE_FIELD_NUMBER: builtins.int
        @property
        def prop_id(self) -> common_pb2.NameOrId: ...
        @property
        def type(self) -> basic_type_pb2.DataType: ...
        def __init__(
            self,
            *,
            prop_id: common_pb2.NameOrId | None = ...,
            type: basic_type_pb2.DataType | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing.Literal["prop_id", b"prop_id", "type", b"type"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing.Literal["prop_id", b"prop_id", "type", b"type"]
        ) -> None: ...

    @typing.final
    class GraphElementType(google.protobuf.message.Message):
        """GraphElementType represents the type of the graph element,
        consisting the GraphElementLabel (of vertex or edge), and the corresponding property types.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        LABEL_FIELD_NUMBER: builtins.int
        PROPS_FIELD_NUMBER: builtins.int
        @property
        def label(self) -> global___GraphDataType.GraphElementLabel: ...
        @property
        def props(
            self,
        ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
            global___GraphDataType.GraphElementTypeField
        ]: ...
        def __init__(
            self,
            *,
            label: global___GraphDataType.GraphElementLabel | None = ...,
            props: (
                collections.abc.Iterable[global___GraphDataType.GraphElementTypeField]
                | None
            ) = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing.Literal["label", b"label"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing.Literal["label", b"label", "props", b"props"]
        ) -> None: ...

    ELEMENT_OPT_FIELD_NUMBER: builtins.int
    GRAPH_DATA_TYPE_FIELD_NUMBER: builtins.int
    element_opt: global___GraphDataType.GraphElementOpt.ValueType
    @property
    def graph_data_type(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___GraphDataType.GraphElementType
    ]: ...
    def __init__(
        self,
        *,
        element_opt: global___GraphDataType.GraphElementOpt.ValueType = ...,
        graph_data_type: (
            collections.abc.Iterable[global___GraphDataType.GraphElementType] | None
        ) = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "element_opt", b"element_opt", "graph_data_type", b"graph_data_type"
        ],
    ) -> None: ...

global___GraphDataType = GraphDataType

@typing.final
class IrDataType(google.protobuf.message.Message):
    """IrDataType, which could be either basic DataType or GraphDataType"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATA_TYPE_FIELD_NUMBER: builtins.int
    GRAPH_TYPE_FIELD_NUMBER: builtins.int
    @property
    def data_type(self) -> basic_type_pb2.DataType: ...
    @property
    def graph_type(self) -> global___GraphDataType: ...
    def __init__(
        self,
        *,
        data_type: basic_type_pb2.DataType | None = ...,
        graph_type: global___GraphDataType | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal[
            "data_type", b"data_type", "graph_type", b"graph_type", "type", b"type"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "data_type", b"data_type", "graph_type", b"graph_type", "type", b"type"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing.Literal["type", b"type"]
    ) -> typing.Literal["data_type", "graph_type"] | None: ...

global___IrDataType = IrDataType

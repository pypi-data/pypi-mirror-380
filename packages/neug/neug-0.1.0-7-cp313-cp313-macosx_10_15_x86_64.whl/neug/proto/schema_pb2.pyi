"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
*
Copyright 2020 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import basic_type_pb2
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class LabelMeta(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    id: builtins.int
    name: builtins.str
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        name: builtins.str = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing.Literal["id", b"id", "name", b"name"]
    ) -> None: ...

global___LabelMeta = LabelMeta

@typing.final
class ColumnMeta(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    DATA_TYPE_FIELD_NUMBER: builtins.int
    IS_PRIMARY_KEY_FIELD_NUMBER: builtins.int
    is_primary_key: builtins.bool
    """Whether this column is a part of a primary key"""
    @property
    def key(self) -> global___LabelMeta: ...
    @property
    def data_type(self) -> basic_type_pb2.DataType: ...
    def __init__(
        self,
        *,
        key: global___LabelMeta | None = ...,
        data_type: basic_type_pb2.DataType | None = ...,
        is_primary_key: builtins.bool = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["data_type", b"data_type", "key", b"key"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "data_type",
            b"data_type",
            "is_primary_key",
            b"is_primary_key",
            "key",
            b"key",
        ],
    ) -> None: ...

global___ColumnMeta = ColumnMeta

@typing.final
class EntityMeta(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LABEL_FIELD_NUMBER: builtins.int
    COLUMNS_FIELD_NUMBER: builtins.int
    @property
    def label(self) -> global___LabelMeta: ...
    @property
    def columns(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___ColumnMeta
    ]: ...
    def __init__(
        self,
        *,
        label: global___LabelMeta | None = ...,
        columns: collections.abc.Iterable[global___ColumnMeta] | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["label", b"label"]
    ) -> builtins.bool: ...
    def ClearField(
        self, field_name: typing.Literal["columns", b"columns", "label", b"label"]
    ) -> None: ...

global___EntityMeta = EntityMeta

@typing.final
class RelationMeta(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class LabelPair(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SRC_FIELD_NUMBER: builtins.int
        DST_FIELD_NUMBER: builtins.int
        @property
        def src(self) -> global___LabelMeta: ...
        @property
        def dst(self) -> global___LabelMeta: ...
        def __init__(
            self,
            *,
            src: global___LabelMeta | None = ...,
            dst: global___LabelMeta | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing.Literal["dst", b"dst", "src", b"src"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing.Literal["dst", b"dst", "src", b"src"]
        ) -> None: ...

    LABEL_FIELD_NUMBER: builtins.int
    ENTITY_PAIRS_FIELD_NUMBER: builtins.int
    COLUMNS_FIELD_NUMBER: builtins.int
    @property
    def label(self) -> global___LabelMeta: ...
    @property
    def entity_pairs(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___RelationMeta.LabelPair
    ]: ...
    @property
    def columns(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___ColumnMeta
    ]: ...
    def __init__(
        self,
        *,
        label: global___LabelMeta | None = ...,
        entity_pairs: (
            collections.abc.Iterable[global___RelationMeta.LabelPair] | None
        ) = ...,
        columns: collections.abc.Iterable[global___ColumnMeta] | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["label", b"label"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "columns", b"columns", "entity_pairs", b"entity_pairs", "label", b"label"
        ],
    ) -> None: ...

global___RelationMeta = RelationMeta

@typing.final
class Schema(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENTITIES_FIELD_NUMBER: builtins.int
    RELATIONS_FIELD_NUMBER: builtins.int
    IS_TABLE_ID_FIELD_NUMBER: builtins.int
    IS_COLUMN_ID_FIELD_NUMBER: builtins.int
    is_table_id: builtins.bool
    """is the table (label)'s name mapped as an id"""
    is_column_id: builtins.bool
    """is the column (property)'s name mapped as an id"""
    @property
    def entities(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___EntityMeta
    ]:
        """the entities (vertices)"""

    @property
    def relations(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___RelationMeta
    ]:
        """the relations (edges)"""

    def __init__(
        self,
        *,
        entities: collections.abc.Iterable[global___EntityMeta] | None = ...,
        relations: collections.abc.Iterable[global___RelationMeta] | None = ...,
        is_table_id: builtins.bool = ...,
        is_column_id: builtins.bool = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "entities",
            b"entities",
            "is_column_id",
            b"is_column_id",
            "is_table_id",
            b"is_table_id",
            "relations",
            b"relations",
        ],
    ) -> None: ...

global___Schema = Schema

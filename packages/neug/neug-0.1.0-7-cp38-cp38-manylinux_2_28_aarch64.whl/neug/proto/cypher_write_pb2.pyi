"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
*
Copyright 2020 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import expr_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Set(google.protobuf.message.Message):
    """Examples:
    SET p.name = 'marko'; set property 'name' of node p to 'marko', if not exist, create it.
    SET p = {name: 'Peter Smith', position: 'Entrepreneur'}; after replacing, the node p will extactly have two properties with the provided values.
    SET p += {name: 'Peter Smith', position: 'Entrepreneur'}; after mutating, the original properties still exist, and two new properties are added.
    SET n:PERSON; after mutating, the original labels still exist, and a new label is added.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Item(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class _Kind:
            ValueType = typing.NewType("ValueType", builtins.int)
            V: typing_extensions.TypeAlias = ValueType

        class _KindEnumTypeWrapper(
            google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
                Set.Item._Kind.ValueType
            ],
            builtins.type,
        ):
            DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
            REPLACE_PROPERTY: Set.Item._Kind.ValueType  # 0
            """replace all existing properties on a node or relationship with those values provided in a literal or a map."""
            MUTATE_PROPERTY: Set.Item._Kind.ValueType  # 1
            """mutate properties from a map in a fine-grained fashion, it functions as follows:
            Any properties in the map that are not on the node or relationship will be added.
            Any properties not in the map that are on the node or relationship will be left as is.
            Any properties that are in both the map and the node or relationship will be replaced in the node or relationship.
            """
            MUTATE_LABEL: Set.Item._Kind.ValueType  # 2
            """mutate a label on a node"""

        class Kind(_Kind, metaclass=_KindEnumTypeWrapper): ...
        REPLACE_PROPERTY: Set.Item.Kind.ValueType  # 0
        """replace all existing properties on a node or relationship with those values provided in a literal or a map."""
        MUTATE_PROPERTY: Set.Item.Kind.ValueType  # 1
        """mutate properties from a map in a fine-grained fashion, it functions as follows:
        Any properties in the map that are not on the node or relationship will be added.
        Any properties not in the map that are on the node or relationship will be left as is.
        Any properties that are in both the map and the node or relationship will be replaced in the node or relationship.
        """
        MUTATE_LABEL: Set.Item.Kind.ValueType  # 2
        """mutate a label on a node"""

        KIND_FIELD_NUMBER: builtins.int
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        kind: global___Set.Item.Kind.ValueType
        @property
        def key(self) -> expr_pb2.Variable: ...
        @property
        def value(self) -> expr_pb2.Expression: ...
        def __init__(
            self,
            *,
            kind: global___Set.Item.Kind.ValueType = ...,
            key: expr_pb2.Variable | None = ...,
            value: expr_pb2.Expression | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing.Literal["key", b"key", "value", b"value"]
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing.Literal[
                "key", b"key", "kind", b"kind", "value", b"value"
            ],
        ) -> None: ...

    ITEMS_FIELD_NUMBER: builtins.int
    @property
    def items(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___Set.Item
    ]: ...
    def __init__(
        self,
        *,
        items: collections.abc.Iterable[global___Set.Item] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["items", b"items"]) -> None: ...

global___Set = Set

@typing.final
class Load(google.protobuf.message.Message):
    """Init data source from external input files.
    Example1:
    LOAD CSV FROM $csv_file AS row FIELDTERMINATOR '|'
    WITH toInteger(row[1]) AS commentId,
    CREATE (comment:Comment {commentId: commentId});

    Example2:
    LOAD CSV FROM $csv_file AS row FIELDTERMINATOR '|'
    WITH toInteger(row[1]) AS id
    MATCH (forum:Forum {id: id});
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Kind:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _KindEnumTypeWrapper(
        google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
            Load._Kind.ValueType
        ],
        builtins.type,
    ):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        MATCH: Load._Kind.ValueType  # 0
        CREATE: Load._Kind.ValueType  # 1
        """TODO: MERGE"""

    class Kind(_Kind, metaclass=_KindEnumTypeWrapper):
        """define the specific way to init the data source.
        `Match` only matches existing node patterns in the graph and binds them, outputting only when vertices/edges specified in external files exist,
        while `CREATE` always creates new vertices/edges.
        """

    MATCH: Load.Kind.ValueType  # 0
    CREATE: Load.Kind.ValueType  # 1
    """TODO: MERGE"""

    @typing.final
    class ColumnMappings(google.protobuf.message.Message):
        """denote mappings between columns in the input data and the properties of the node or relationship
        follow data import specification in gs-interactive (https://graphscope.io/docs/src/interactive/data_import)
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class LoadingConfig(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            @typing.final
            class DataSource(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                SCHEME_FIELD_NUMBER: builtins.int
                LOCATION_FIELD_NUMBER: builtins.int
                scheme: builtins.str
                location: builtins.str
                def __init__(
                    self,
                    *,
                    scheme: builtins.str = ...,
                    location: builtins.str = ...,
                ) -> None: ...
                def ClearField(
                    self,
                    field_name: typing.Literal[
                        "location", b"location", "scheme", b"scheme"
                    ],
                ) -> None: ...

            @typing.final
            class Format(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                @typing.final
                class Metadata(google.protobuf.message.Message):
                    DESCRIPTOR: google.protobuf.descriptor.Descriptor

                    DELIMITER_FIELD_NUMBER: builtins.int
                    HEADER_ROW_FIELD_NUMBER: builtins.int
                    QUOTING_FIELD_NUMBER: builtins.int
                    QUOTE_CHAR_FIELD_NUMBER: builtins.int
                    DOUBLE_QUOTE_FIELD_NUMBER: builtins.int
                    ESCAPE_CHAR_FIELD_NUMBER: builtins.int
                    BLOCK_SIZE_FIELD_NUMBER: builtins.int
                    delimiter: builtins.str
                    header_row: builtins.bool
                    quoting: builtins.bool
                    quote_char: builtins.str
                    double_quote: builtins.bool
                    escape_char: builtins.str
                    block_size: builtins.str
                    def __init__(
                        self,
                        *,
                        delimiter: builtins.str = ...,
                        header_row: builtins.bool = ...,
                        quoting: builtins.bool = ...,
                        quote_char: builtins.str = ...,
                        double_quote: builtins.bool = ...,
                        escape_char: builtins.str = ...,
                        block_size: builtins.str = ...,
                    ) -> None: ...
                    def ClearField(
                        self,
                        field_name: typing.Literal[
                            "block_size",
                            b"block_size",
                            "delimiter",
                            b"delimiter",
                            "double_quote",
                            b"double_quote",
                            "escape_char",
                            b"escape_char",
                            "header_row",
                            b"header_row",
                            "quote_char",
                            b"quote_char",
                            "quoting",
                            b"quoting",
                        ],
                    ) -> None: ...

                METADATA_FIELD_NUMBER: builtins.int
                @property
                def metadata(
                    self,
                ) -> global___Load.ColumnMappings.LoadingConfig.Format.Metadata: ...
                def __init__(
                    self,
                    *,
                    metadata: (
                        global___Load.ColumnMappings.LoadingConfig.Format.Metadata
                        | None
                    ) = ...,
                ) -> None: ...
                def HasField(
                    self, field_name: typing.Literal["metadata", b"metadata"]
                ) -> builtins.bool: ...
                def ClearField(
                    self, field_name: typing.Literal["metadata", b"metadata"]
                ) -> None: ...

            DATA_SOURCE_FIELD_NUMBER: builtins.int
            FORMAT_FIELD_NUMBER: builtins.int
            @property
            def data_source(
                self,
            ) -> global___Load.ColumnMappings.LoadingConfig.DataSource: ...
            @property
            def format(self) -> global___Load.ColumnMappings.LoadingConfig.Format: ...
            def __init__(
                self,
                *,
                data_source: (
                    global___Load.ColumnMappings.LoadingConfig.DataSource | None
                ) = ...,
                format: global___Load.ColumnMappings.LoadingConfig.Format | None = ...,
            ) -> None: ...
            def HasField(
                self,
                field_name: typing.Literal[
                    "data_source", b"data_source", "format", b"format"
                ],
            ) -> builtins.bool: ...
            def ClearField(
                self,
                field_name: typing.Literal[
                    "data_source", b"data_source", "format", b"format"
                ],
            ) -> None: ...

        @typing.final
        class ColumnMapping(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            @typing.final
            class Column(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                INDEX_FIELD_NUMBER: builtins.int
                NAME_FIELD_NUMBER: builtins.int
                index: builtins.int
                name: builtins.str
                def __init__(
                    self,
                    *,
                    index: builtins.int = ...,
                    name: builtins.str = ...,
                ) -> None: ...
                def ClearField(
                    self, field_name: typing.Literal["index", b"index", "name", b"name"]
                ) -> None: ...

            COLUMN_FIELD_NUMBER: builtins.int
            PROPERTY_FIELD_NUMBER: builtins.int
            @property
            def column(self) -> global___Load.ColumnMappings.ColumnMapping.Column: ...
            @property
            def property(self) -> expr_pb2.Property: ...
            def __init__(
                self,
                *,
                column: global___Load.ColumnMappings.ColumnMapping.Column | None = ...,
                property: expr_pb2.Property | None = ...,
            ) -> None: ...
            def HasField(
                self,
                field_name: typing.Literal[
                    "column", b"column", "property", b"property"
                ],
            ) -> builtins.bool: ...
            def ClearField(
                self,
                field_name: typing.Literal[
                    "column", b"column", "property", b"property"
                ],
            ) -> None: ...

        @typing.final
        class Input(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            PATH_FIELD_NUMBER: builtins.int
            DYN_PATH_FIELD_NUMBER: builtins.int
            path: builtins.str
            @property
            def dyn_path(self) -> expr_pb2.DynamicParam: ...
            def __init__(
                self,
                *,
                path: builtins.str = ...,
                dyn_path: expr_pb2.DynamicParam | None = ...,
            ) -> None: ...
            def HasField(
                self,
                field_name: typing.Literal[
                    "dyn_path", b"dyn_path", "input", b"input", "path", b"path"
                ],
            ) -> builtins.bool: ...
            def ClearField(
                self,
                field_name: typing.Literal[
                    "dyn_path", b"dyn_path", "input", b"input", "path", b"path"
                ],
            ) -> None: ...
            def WhichOneof(
                self, oneof_group: typing.Literal["input", b"input"]
            ) -> typing.Literal["path", "dyn_path"] | None: ...

        @typing.final
        class VertexMapping(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            TYPE_NAME_FIELD_NUMBER: builtins.int
            INPUTS_FIELD_NUMBER: builtins.int
            COLUMN_MAPPINGS_FIELD_NUMBER: builtins.int
            type_name: builtins.str
            @property
            def inputs(
                self,
            ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
                global___Load.ColumnMappings.Input
            ]: ...
            @property
            def column_mappings(
                self,
            ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
                global___Load.ColumnMappings.ColumnMapping
            ]: ...
            def __init__(
                self,
                *,
                type_name: builtins.str = ...,
                inputs: (
                    collections.abc.Iterable[global___Load.ColumnMappings.Input] | None
                ) = ...,
                column_mappings: (
                    collections.abc.Iterable[global___Load.ColumnMappings.ColumnMapping]
                    | None
                ) = ...,
            ) -> None: ...
            def ClearField(
                self,
                field_name: typing.Literal[
                    "column_mappings",
                    b"column_mappings",
                    "inputs",
                    b"inputs",
                    "type_name",
                    b"type_name",
                ],
            ) -> None: ...

        @typing.final
        class EdgeMapping(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            @typing.final
            class TypeTriplet(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor

                EDGE_FIELD_NUMBER: builtins.int
                SOURCE_VERTEX_FIELD_NUMBER: builtins.int
                DESTINATION_VERTEX_FIELD_NUMBER: builtins.int
                edge: builtins.str
                source_vertex: builtins.str
                destination_vertex: builtins.str
                def __init__(
                    self,
                    *,
                    edge: builtins.str = ...,
                    source_vertex: builtins.str = ...,
                    destination_vertex: builtins.str = ...,
                ) -> None: ...
                def ClearField(
                    self,
                    field_name: typing.Literal[
                        "destination_vertex",
                        b"destination_vertex",
                        "edge",
                        b"edge",
                        "source_vertex",
                        b"source_vertex",
                    ],
                ) -> None: ...

            TYPE_TRIPLET_FIELD_NUMBER: builtins.int
            INPUTS_FIELD_NUMBER: builtins.int
            SOURCE_VERTEX_MAPPINGS_FIELD_NUMBER: builtins.int
            DESTINATION_VERTEX_MAPPINGS_FIELD_NUMBER: builtins.int
            COLUMN_MAPPINGS_FIELD_NUMBER: builtins.int
            @property
            def type_triplet(
                self,
            ) -> global___Load.ColumnMappings.EdgeMapping.TypeTriplet: ...
            @property
            def inputs(
                self,
            ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
                global___Load.ColumnMappings.Input
            ]: ...
            @property
            def source_vertex_mappings(
                self,
            ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
                global___Load.ColumnMappings.ColumnMapping
            ]: ...
            @property
            def destination_vertex_mappings(
                self,
            ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
                global___Load.ColumnMappings.ColumnMapping
            ]: ...
            @property
            def column_mappings(
                self,
            ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
                global___Load.ColumnMappings.ColumnMapping
            ]: ...
            def __init__(
                self,
                *,
                type_triplet: (
                    global___Load.ColumnMappings.EdgeMapping.TypeTriplet | None
                ) = ...,
                inputs: (
                    collections.abc.Iterable[global___Load.ColumnMappings.Input] | None
                ) = ...,
                source_vertex_mappings: (
                    collections.abc.Iterable[global___Load.ColumnMappings.ColumnMapping]
                    | None
                ) = ...,
                destination_vertex_mappings: (
                    collections.abc.Iterable[global___Load.ColumnMappings.ColumnMapping]
                    | None
                ) = ...,
                column_mappings: (
                    collections.abc.Iterable[global___Load.ColumnMappings.ColumnMapping]
                    | None
                ) = ...,
            ) -> None: ...
            def HasField(
                self, field_name: typing.Literal["type_triplet", b"type_triplet"]
            ) -> builtins.bool: ...
            def ClearField(
                self,
                field_name: typing.Literal[
                    "column_mappings",
                    b"column_mappings",
                    "destination_vertex_mappings",
                    b"destination_vertex_mappings",
                    "inputs",
                    b"inputs",
                    "source_vertex_mappings",
                    b"source_vertex_mappings",
                    "type_triplet",
                    b"type_triplet",
                ],
            ) -> None: ...

        LOAD_CONFIG_FIELD_NUMBER: builtins.int
        VERTEX_MAPPINGS_FIELD_NUMBER: builtins.int
        EDGE_MAPPINGS_FIELD_NUMBER: builtins.int
        @property
        def load_config(self) -> global___Load.ColumnMappings.LoadingConfig: ...
        @property
        def vertex_mappings(
            self,
        ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
            global___Load.ColumnMappings.VertexMapping
        ]: ...
        @property
        def edge_mappings(
            self,
        ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
            global___Load.ColumnMappings.EdgeMapping
        ]: ...
        def __init__(
            self,
            *,
            load_config: global___Load.ColumnMappings.LoadingConfig | None = ...,
            vertex_mappings: (
                collections.abc.Iterable[global___Load.ColumnMappings.VertexMapping]
                | None
            ) = ...,
            edge_mappings: (
                collections.abc.Iterable[global___Load.ColumnMappings.EdgeMapping]
                | None
            ) = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing.Literal["load_config", b"load_config"]
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing.Literal[
                "edge_mappings",
                b"edge_mappings",
                "load_config",
                b"load_config",
                "vertex_mappings",
                b"vertex_mappings",
            ],
        ) -> None: ...

    KIND_FIELD_NUMBER: builtins.int
    MAPPINGS_FIELD_NUMBER: builtins.int
    kind: global___Load.Kind.ValueType
    @property
    def mappings(self) -> global___Load.ColumnMappings: ...
    def __init__(
        self,
        *,
        kind: global___Load.Kind.ValueType = ...,
        mappings: global___Load.ColumnMappings | None = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["mappings", b"mappings"]
    ) -> builtins.bool: ...
    def ClearField(
        self, field_name: typing.Literal["kind", b"kind", "mappings", b"mappings"]
    ) -> None: ...

global___Load = Load

@typing.final
class Delete(google.protobuf.message.Message):
    """Examples:
    MATCH (n:Person {name: 'Tom Hanks'}) DETACH DELETE n;
    MATCH (n:Person {name: 'Laurence Fishburne'})-[r:ACTED_IN]->() DELETE r;
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DETACHED_FIELD_NUMBER: builtins.int
    KEYS_FIELD_NUMBER: builtins.int
    detached: builtins.bool
    """when deleting a node, delete all relationships connected to it if `detached` is true, otherwise only delete the node itself."""
    @property
    def keys(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        expr_pb2.Expression
    ]: ...
    def __init__(
        self,
        *,
        detached: builtins.bool = ...,
        keys: collections.abc.Iterable[expr_pb2.Expression] | None = ...,
    ) -> None: ...
    def ClearField(
        self, field_name: typing.Literal["detached", b"detached", "keys", b"keys"]
    ) -> None: ...

global___Delete = Delete

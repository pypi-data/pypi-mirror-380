# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cypher_write.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import common_pb2 as common__pb2
import expr_pb2 as expr__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\x12\x63ypher_write.proto\x12\x06\x63ypher\x1a\x0c\x63ommon.proto\x1a\nexpr.proto"\xdb\x01\n\x03Set\x12\x1f\n\x05items\x18\x01 \x03(\x0b\x32\x10.cypher.Set.Item\x1a\xb2\x01\n\x04Item\x12#\n\x04kind\x18\x01 \x01(\x0e\x32\x15.cypher.Set.Item.Kind\x12\x1d\n\x03key\x18\x02 \x01(\x0b\x32\x10.common.Variable\x12!\n\x05value\x18\x03 \x01(\x0b\x32\x12.common.Expression"C\n\x04Kind\x12\x14\n\x10REPLACE_PROPERTY\x10\x00\x12\x13\n\x0fMUTATE_PROPERTY\x10\x01\x12\x10\n\x0cMUTATE_LABEL\x10\x02"\xcf\x0c\n\x04Load\x12\x1f\n\x04kind\x18\x01 \x01(\x0e\x32\x11.cypher.Load.Kind\x12-\n\x08mappings\x18\x02 \x01(\x0b\x32\x1b.cypher.Load.ColumnMappings\x1a\xd7\x0b\n\x0e\x43olumnMappings\x12>\n\x0bload_config\x18\x01 \x01(\x0b\x32).cypher.Load.ColumnMappings.LoadingConfig\x12\x42\n\x0fvertex_mappings\x18\x02 \x03(\x0b\x32).cypher.Load.ColumnMappings.VertexMapping\x12>\n\redge_mappings\x18\x03 \x03(\x0b\x32\'.cypher.Load.ColumnMappings.EdgeMapping\x1a\xbc\x03\n\rLoadingConfig\x12I\n\x0b\x64\x61ta_source\x18\x01 \x01(\x0b\x32\x34.cypher.Load.ColumnMappings.LoadingConfig.DataSource\x12@\n\x06\x66ormat\x18\x02 \x01(\x0b\x32\x30.cypher.Load.ColumnMappings.LoadingConfig.Format\x1a.\n\nDataSource\x12\x0e\n\x06scheme\x18\x01 \x01(\t\x12\x10\n\x08location\x18\x02 \x01(\t\x1a\xed\x01\n\x06\x46ormat\x12K\n\x08metadata\x18\x01 \x01(\x0b\x32\x39.cypher.Load.ColumnMappings.LoadingConfig.Format.Metadata\x1a\x95\x01\n\x08Metadata\x12\x11\n\tdelimiter\x18\x01 \x01(\t\x12\x12\n\nheader_row\x18\x02 \x01(\x08\x12\x0f\n\x07quoting\x18\x03 \x01(\x08\x12\x12\n\nquote_char\x18\x04 \x01(\t\x12\x14\n\x0c\x64ouble_quote\x18\x05 \x01(\x08\x12\x13\n\x0b\x65scape_char\x18\x06 \x01(\t\x12\x12\n\nblock_size\x18\x07 \x01(\t\x1a\x9c\x01\n\rColumnMapping\x12@\n\x06\x63olumn\x18\x01 \x01(\x0b\x32\x30.cypher.Load.ColumnMappings.ColumnMapping.Column\x12"\n\x08property\x18\x02 \x01(\x0b\x32\x10.common.Property\x1a%\n\x06\x43olumn\x12\r\n\x05index\x18\x01 \x01(\x05\x12\x0c\n\x04name\x18\x02 \x01(\t\x1aJ\n\x05Input\x12\x0e\n\x04path\x18\x01 \x01(\tH\x00\x12(\n\x08\x64yn_path\x18\x02 \x01(\x0b\x32\x14.common.DynamicParamH\x00\x42\x07\n\x05input\x1a\x99\x01\n\rVertexMapping\x12\x11\n\ttype_name\x18\x01 \x01(\t\x12\x31\n\x06inputs\x18\x02 \x03(\x0b\x32!.cypher.Load.ColumnMappings.Input\x12\x42\n\x0f\x63olumn_mappings\x18\x03 \x03(\x0b\x32).cypher.Load.ColumnMappings.ColumnMapping\x1a\xba\x03\n\x0b\x45\x64geMapping\x12I\n\x0ctype_triplet\x18\x01 \x01(\x0b\x32\x33.cypher.Load.ColumnMappings.EdgeMapping.TypeTriplet\x12\x31\n\x06inputs\x18\x02 \x03(\x0b\x32!.cypher.Load.ColumnMappings.Input\x12I\n\x16source_vertex_mappings\x18\x03 \x03(\x0b\x32).cypher.Load.ColumnMappings.ColumnMapping\x12N\n\x1b\x64\x65stination_vertex_mappings\x18\x04 \x03(\x0b\x32).cypher.Load.ColumnMappings.ColumnMapping\x12\x42\n\x0f\x63olumn_mappings\x18\x05 \x03(\x0b\x32).cypher.Load.ColumnMappings.ColumnMapping\x1aN\n\x0bTypeTriplet\x12\x0c\n\x04\x65\x64ge\x18\x01 \x01(\t\x12\x15\n\rsource_vertex\x18\x02 \x01(\t\x12\x1a\n\x12\x64\x65stination_vertex\x18\x03 \x01(\t"\x1d\n\x04Kind\x12\t\n\x05MATCH\x10\x00\x12\n\n\x06\x43REATE\x10\x01"<\n\x06\x44\x65lete\x12\x10\n\x08\x64\x65tached\x18\x01 \x01(\x08\x12 \n\x04keys\x18\x02 \x03(\x0b\x32\x12.common.ExpressionB<\n!com.alibaba.graphscope.gaia.protoB\x17GraphAlgebraCypherWriteb\x06proto3'
)

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "cypher_write_pb2", globals())
if _descriptor._USE_C_DESCRIPTORS == False:

    DESCRIPTOR._options = None
    DESCRIPTOR._serialized_options = (
        b"\n!com.alibaba.graphscope.gaia.protoB\027GraphAlgebraCypherWrite"
    )
    _SET._serialized_start = 57
    _SET._serialized_end = 276
    _SET_ITEM._serialized_start = 98
    _SET_ITEM._serialized_end = 276
    _SET_ITEM_KIND._serialized_start = 209
    _SET_ITEM_KIND._serialized_end = 276
    _LOAD._serialized_start = 279
    _LOAD._serialized_end = 1894
    _LOAD_COLUMNMAPPINGS._serialized_start = 368
    _LOAD_COLUMNMAPPINGS._serialized_end = 1863
    _LOAD_COLUMNMAPPINGS_LOADINGCONFIG._serialized_start = 583
    _LOAD_COLUMNMAPPINGS_LOADINGCONFIG._serialized_end = 1027
    _LOAD_COLUMNMAPPINGS_LOADINGCONFIG_DATASOURCE._serialized_start = 741
    _LOAD_COLUMNMAPPINGS_LOADINGCONFIG_DATASOURCE._serialized_end = 787
    _LOAD_COLUMNMAPPINGS_LOADINGCONFIG_FORMAT._serialized_start = 790
    _LOAD_COLUMNMAPPINGS_LOADINGCONFIG_FORMAT._serialized_end = 1027
    _LOAD_COLUMNMAPPINGS_LOADINGCONFIG_FORMAT_METADATA._serialized_start = 878
    _LOAD_COLUMNMAPPINGS_LOADINGCONFIG_FORMAT_METADATA._serialized_end = 1027
    _LOAD_COLUMNMAPPINGS_COLUMNMAPPING._serialized_start = 1030
    _LOAD_COLUMNMAPPINGS_COLUMNMAPPING._serialized_end = 1186
    _LOAD_COLUMNMAPPINGS_COLUMNMAPPING_COLUMN._serialized_start = 1149
    _LOAD_COLUMNMAPPINGS_COLUMNMAPPING_COLUMN._serialized_end = 1186
    _LOAD_COLUMNMAPPINGS_INPUT._serialized_start = 1188
    _LOAD_COLUMNMAPPINGS_INPUT._serialized_end = 1262
    _LOAD_COLUMNMAPPINGS_VERTEXMAPPING._serialized_start = 1265
    _LOAD_COLUMNMAPPINGS_VERTEXMAPPING._serialized_end = 1418
    _LOAD_COLUMNMAPPINGS_EDGEMAPPING._serialized_start = 1421
    _LOAD_COLUMNMAPPINGS_EDGEMAPPING._serialized_end = 1863
    _LOAD_COLUMNMAPPINGS_EDGEMAPPING_TYPETRIPLET._serialized_start = 1785
    _LOAD_COLUMNMAPPINGS_EDGEMAPPING_TYPETRIPLET._serialized_end = 1863
    _LOAD_KIND._serialized_start = 1865
    _LOAD_KIND._serialized_end = 1894
    _DELETE._serialized_start = 1896
    _DELETE._serialized_end = 1956
# @@protoc_insertion_point(module_scope)

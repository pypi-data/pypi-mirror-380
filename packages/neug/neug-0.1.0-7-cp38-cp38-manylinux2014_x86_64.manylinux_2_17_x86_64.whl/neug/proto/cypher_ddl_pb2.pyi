"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
*
Copyright 2020 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import basic_type_pb2
import builtins
import collections.abc
import common_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ConflictAction:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ConflictActionEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
        _ConflictAction.ValueType
    ],
    builtins.type,
):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    ON_CONFLICT_THROW: _ConflictAction.ValueType  # 0
    ON_CONFLICT_DO_NOTHING: _ConflictAction.ValueType  # 1

class ConflictAction(_ConflictAction, metaclass=_ConflictActionEnumTypeWrapper):
    """When the operation does not meet the data requirements, an exception is thrown by default;
    conflicts can be ignored by setting IF NOT EXISTS or IF EXISTS.
    """

ON_CONFLICT_THROW: ConflictAction.ValueType  # 0
ON_CONFLICT_DO_NOTHING: ConflictAction.ValueType  # 1
global___ConflictAction = ConflictAction

@typing.final
class EdgeType(google.protobuf.message.Message):
    """The create/drop/alter operations for edges are all based on the triplet type <src_type, edge_type, dst_type>."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_NAME_FIELD_NUMBER: builtins.int
    SRC_TYPE_NAME_FIELD_NUMBER: builtins.int
    DST_TYPE_NAME_FIELD_NUMBER: builtins.int
    @property
    def type_name(self) -> common_pb2.NameOrId: ...
    @property
    def src_type_name(self) -> common_pb2.NameOrId: ...
    @property
    def dst_type_name(self) -> common_pb2.NameOrId: ...
    def __init__(
        self,
        *,
        type_name: common_pb2.NameOrId | None = ...,
        src_type_name: common_pb2.NameOrId | None = ...,
        dst_type_name: common_pb2.NameOrId | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal[
            "dst_type_name",
            b"dst_type_name",
            "src_type_name",
            b"src_type_name",
            "type_name",
            b"type_name",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "dst_type_name",
            b"dst_type_name",
            "src_type_name",
            b"src_type_name",
            "type_name",
            b"type_name",
        ],
    ) -> None: ...

global___EdgeType = EdgeType

@typing.final
class PropertyDef(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    DEFAULT_VALUE_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def type(self) -> basic_type_pb2.DataType: ...
    @property
    def default_value(self) -> common_pb2.Value: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        type: basic_type_pb2.DataType | None = ...,
        default_value: common_pb2.Value | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal["default_value", b"default_value", "type", b"type"],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "default_value", b"default_value", "name", b"name", "type", b"type"
        ],
    ) -> None: ...

global___PropertyDef = PropertyDef

@typing.final
class CreateVertexSchema(google.protobuf.message.Message):
    """Example:
    CREATE NODE TABLE IF NOT EXISTS User (name STRING, age INT64 DEFAULT 0, reg_date DATE, PRIMARY KEY (name))
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERTEX_TYPE_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    PRIMARY_KEY_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def vertex_type(self) -> common_pb2.NameOrId: ...
    @property
    def properties(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___PropertyDef
    ]: ...
    @property
    def primary_key(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[
        builtins.str
    ]: ...
    def __init__(
        self,
        *,
        vertex_type: common_pb2.NameOrId | None = ...,
        properties: collections.abc.Iterable[global___PropertyDef] | None = ...,
        primary_key: collections.abc.Iterable[builtins.str] | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["vertex_type", b"vertex_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "primary_key",
            b"primary_key",
            "properties",
            b"properties",
            "vertex_type",
            b"vertex_type",
        ],
    ) -> None: ...

global___CreateVertexSchema = CreateVertexSchema

@typing.final
class CreateEdgeSchema(google.protobuf.message.Message):
    """Example:
    CREATE REL TABLE IF NOT EXISTS Follows(FROM User TO User, since DATE);
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Multiplicity:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _MultiplicityEnumTypeWrapper(
        google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[
            CreateEdgeSchema._Multiplicity.ValueType
        ],
        builtins.type,
    ):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        ONE_TO_ONE: CreateEdgeSchema._Multiplicity.ValueType  # 0
        ONE_TO_MANY: CreateEdgeSchema._Multiplicity.ValueType  # 1
        MANY_TO_ONE: CreateEdgeSchema._Multiplicity.ValueType  # 2
        MANY_TO_MANY: CreateEdgeSchema._Multiplicity.ValueType  # 3

    class Multiplicity(_Multiplicity, metaclass=_MultiplicityEnumTypeWrapper):
        """multiplicity from src to dst"""

    ONE_TO_ONE: CreateEdgeSchema.Multiplicity.ValueType  # 0
    ONE_TO_MANY: CreateEdgeSchema.Multiplicity.ValueType  # 1
    MANY_TO_ONE: CreateEdgeSchema.Multiplicity.ValueType  # 2
    MANY_TO_MANY: CreateEdgeSchema.Multiplicity.ValueType  # 3

    EDGE_TYPE_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    PRIMARY_KEY_FIELD_NUMBER: builtins.int
    MULTIPLICITY_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    multiplicity: global___CreateEdgeSchema.Multiplicity.ValueType
    conflict_action: global___ConflictAction.ValueType
    @property
    def edge_type(self) -> global___EdgeType: ...
    @property
    def properties(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___PropertyDef
    ]: ...
    @property
    def primary_key(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[
        builtins.str
    ]: ...
    def __init__(
        self,
        *,
        edge_type: global___EdgeType | None = ...,
        properties: collections.abc.Iterable[global___PropertyDef] | None = ...,
        primary_key: collections.abc.Iterable[builtins.str] | None = ...,
        multiplicity: global___CreateEdgeSchema.Multiplicity.ValueType = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["edge_type", b"edge_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "edge_type",
            b"edge_type",
            "multiplicity",
            b"multiplicity",
            "primary_key",
            b"primary_key",
            "properties",
            b"properties",
        ],
    ) -> None: ...

global___CreateEdgeSchema = CreateEdgeSchema

@typing.final
class DropVertexSchema(google.protobuf.message.Message):
    """Example:
    DROP TABLE IF EXISTS User;
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERTEX_TYPE_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def vertex_type(self) -> common_pb2.NameOrId: ...
    def __init__(
        self,
        *,
        vertex_type: common_pb2.NameOrId | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["vertex_type", b"vertex_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action", b"conflict_action", "vertex_type", b"vertex_type"
        ],
    ) -> None: ...

global___DropVertexSchema = DropVertexSchema

@typing.final
class DropEdgeSchema(google.protobuf.message.Message):
    """Example:
    DROP TABLE IF EXISTS Follows;
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EDGE_TYPE_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def edge_type(self) -> global___EdgeType: ...
    def __init__(
        self,
        *,
        edge_type: global___EdgeType | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["edge_type", b"edge_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action", b"conflict_action", "edge_type", b"edge_type"
        ],
    ) -> None: ...

global___DropEdgeSchema = DropEdgeSchema

@typing.final
class AddVertexPropertySchema(google.protobuf.message.Message):
    """Example:
    ALTER TABLE User ADD IF NOT EXISTS age INT64;
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERTEX_TYPE_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def vertex_type(self) -> common_pb2.NameOrId: ...
    @property
    def properties(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___PropertyDef
    ]: ...
    def __init__(
        self,
        *,
        vertex_type: common_pb2.NameOrId | None = ...,
        properties: collections.abc.Iterable[global___PropertyDef] | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["vertex_type", b"vertex_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "properties",
            b"properties",
            "vertex_type",
            b"vertex_type",
        ],
    ) -> None: ...

global___AddVertexPropertySchema = AddVertexPropertySchema

@typing.final
class AddEdgePropertySchema(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EDGE_TYPE_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def edge_type(self) -> global___EdgeType: ...
    @property
    def properties(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___PropertyDef
    ]: ...
    def __init__(
        self,
        *,
        edge_type: global___EdgeType | None = ...,
        properties: collections.abc.Iterable[global___PropertyDef] | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["edge_type", b"edge_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "edge_type",
            b"edge_type",
            "properties",
            b"properties",
        ],
    ) -> None: ...

global___AddEdgePropertySchema = AddEdgePropertySchema

@typing.final
class DropVertexPropertySchema(google.protobuf.message.Message):
    """Example:
    ALTER TABLE User DROP IF EXISTS age;
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERTEX_TYPE_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def vertex_type(self) -> common_pb2.NameOrId: ...
    @property
    def properties(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[
        builtins.str
    ]: ...
    def __init__(
        self,
        *,
        vertex_type: common_pb2.NameOrId | None = ...,
        properties: collections.abc.Iterable[builtins.str] | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["vertex_type", b"vertex_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "properties",
            b"properties",
            "vertex_type",
            b"vertex_type",
        ],
    ) -> None: ...

global___DropVertexPropertySchema = DropVertexPropertySchema

@typing.final
class DropEdgePropertySchema(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EDGE_TYPE_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def edge_type(self) -> global___EdgeType: ...
    @property
    def properties(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[
        builtins.str
    ]: ...
    def __init__(
        self,
        *,
        edge_type: global___EdgeType | None = ...,
        properties: collections.abc.Iterable[builtins.str] | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["edge_type", b"edge_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "edge_type",
            b"edge_type",
            "properties",
            b"properties",
        ],
    ) -> None: ...

global___DropEdgePropertySchema = DropEdgePropertySchema

@typing.final
class RenameVertexPropertySchema(google.protobuf.message.Message):
    """ALTER TABLE User RENAME age TO grade;"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class MappingsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing.Literal["key", b"key", "value", b"value"]
        ) -> None: ...

    VERTEX_TYPE_FIELD_NUMBER: builtins.int
    MAPPINGS_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def vertex_type(self) -> common_pb2.NameOrId: ...
    @property
    def mappings(
        self,
    ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """map from old property name to new property name"""

    def __init__(
        self,
        *,
        vertex_type: common_pb2.NameOrId | None = ...,
        mappings: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["vertex_type", b"vertex_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "mappings",
            b"mappings",
            "vertex_type",
            b"vertex_type",
        ],
    ) -> None: ...

global___RenameVertexPropertySchema = RenameVertexPropertySchema

@typing.final
class RenameEdgePropertySchema(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class MappingsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing.Literal["key", b"key", "value", b"value"]
        ) -> None: ...

    EDGE_TYPE_FIELD_NUMBER: builtins.int
    MAPPINGS_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def edge_type(self) -> global___EdgeType: ...
    @property
    def mappings(
        self,
    ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """map from old property name to new property name"""

    def __init__(
        self,
        *,
        edge_type: global___EdgeType | None = ...,
        mappings: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing.Literal["edge_type", b"edge_type"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "edge_type",
            b"edge_type",
            "mappings",
            b"mappings",
        ],
    ) -> None: ...

global___RenameEdgePropertySchema = RenameEdgePropertySchema

@typing.final
class RenameVertexTypeSchema(google.protobuf.message.Message):
    """ALTER TABLE User RENAME TO Student;"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OLD_TYPE_FIELD_NUMBER: builtins.int
    NEW_TYPE_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def old_type(self) -> common_pb2.NameOrId: ...
    @property
    def new_type(self) -> common_pb2.NameOrId: ...
    def __init__(
        self,
        *,
        old_type: common_pb2.NameOrId | None = ...,
        new_type: common_pb2.NameOrId | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal["new_type", b"new_type", "old_type", b"old_type"],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "new_type",
            b"new_type",
            "old_type",
            b"old_type",
        ],
    ) -> None: ...

global___RenameVertexTypeSchema = RenameVertexTypeSchema

@typing.final
class RenameEdgeTypeSchema(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OLD_TYPE_FIELD_NUMBER: builtins.int
    NEW_TYPE_FIELD_NUMBER: builtins.int
    CONFLICT_ACTION_FIELD_NUMBER: builtins.int
    conflict_action: global___ConflictAction.ValueType
    @property
    def old_type(self) -> global___EdgeType: ...
    @property
    def new_type(self) -> global___EdgeType: ...
    def __init__(
        self,
        *,
        old_type: global___EdgeType | None = ...,
        new_type: global___EdgeType | None = ...,
        conflict_action: global___ConflictAction.ValueType = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal["new_type", b"new_type", "old_type", b"old_type"],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "conflict_action",
            b"conflict_action",
            "new_type",
            b"new_type",
            "old_type",
            b"old_type",
        ],
    ) -> None: ...

global___RenameEdgeTypeSchema = RenameEdgeTypeSchema

@typing.final
class DDLPlan(google.protobuf.message.Message):
    """A single Cypher query can perform only one DDL operation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CREATE_VERTEX_SCHEMA_FIELD_NUMBER: builtins.int
    CREATE_EDGE_SCHEMA_FIELD_NUMBER: builtins.int
    DROP_VERTEX_SCHEMA_FIELD_NUMBER: builtins.int
    DROP_EDGE_SCHEMA_FIELD_NUMBER: builtins.int
    ADD_VERTEX_PROPERTY_SCHEMA_FIELD_NUMBER: builtins.int
    ADD_EDGE_PROPERTY_SCHEMA_FIELD_NUMBER: builtins.int
    DROP_VERTEX_PROPERTY_SCHEMA_FIELD_NUMBER: builtins.int
    DROP_EDGE_PROPERTY_SCHEMA_FIELD_NUMBER: builtins.int
    RENAME_VERTEX_PROPERTY_SCHEMA_FIELD_NUMBER: builtins.int
    RENAME_EDGE_PROPERTY_SCHEMA_FIELD_NUMBER: builtins.int
    RENAME_VERTEX_TYPE_SCHEMA_FIELD_NUMBER: builtins.int
    RENAME_EDGE_TYPE_SCHEMA_FIELD_NUMBER: builtins.int
    @property
    def create_vertex_schema(self) -> global___CreateVertexSchema: ...
    @property
    def create_edge_schema(self) -> global___CreateEdgeSchema: ...
    @property
    def drop_vertex_schema(self) -> global___DropVertexSchema: ...
    @property
    def drop_edge_schema(self) -> global___DropEdgeSchema: ...
    @property
    def add_vertex_property_schema(self) -> global___AddVertexPropertySchema: ...
    @property
    def add_edge_property_schema(self) -> global___AddEdgePropertySchema: ...
    @property
    def drop_vertex_property_schema(self) -> global___DropVertexPropertySchema: ...
    @property
    def drop_edge_property_schema(self) -> global___DropEdgePropertySchema: ...
    @property
    def rename_vertex_property_schema(self) -> global___RenameVertexPropertySchema: ...
    @property
    def rename_edge_property_schema(self) -> global___RenameEdgePropertySchema: ...
    @property
    def rename_vertex_type_schema(self) -> global___RenameVertexTypeSchema: ...
    @property
    def rename_edge_type_schema(self) -> global___RenameEdgeTypeSchema: ...
    def __init__(
        self,
        *,
        create_vertex_schema: global___CreateVertexSchema | None = ...,
        create_edge_schema: global___CreateEdgeSchema | None = ...,
        drop_vertex_schema: global___DropVertexSchema | None = ...,
        drop_edge_schema: global___DropEdgeSchema | None = ...,
        add_vertex_property_schema: global___AddVertexPropertySchema | None = ...,
        add_edge_property_schema: global___AddEdgePropertySchema | None = ...,
        drop_vertex_property_schema: global___DropVertexPropertySchema | None = ...,
        drop_edge_property_schema: global___DropEdgePropertySchema | None = ...,
        rename_vertex_property_schema: global___RenameVertexPropertySchema | None = ...,
        rename_edge_property_schema: global___RenameEdgePropertySchema | None = ...,
        rename_vertex_type_schema: global___RenameVertexTypeSchema | None = ...,
        rename_edge_type_schema: global___RenameEdgeTypeSchema | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing.Literal[
            "add_edge_property_schema",
            b"add_edge_property_schema",
            "add_vertex_property_schema",
            b"add_vertex_property_schema",
            "create_edge_schema",
            b"create_edge_schema",
            "create_vertex_schema",
            b"create_vertex_schema",
            "drop_edge_property_schema",
            b"drop_edge_property_schema",
            "drop_edge_schema",
            b"drop_edge_schema",
            "drop_vertex_property_schema",
            b"drop_vertex_property_schema",
            "drop_vertex_schema",
            b"drop_vertex_schema",
            "plan",
            b"plan",
            "rename_edge_property_schema",
            b"rename_edge_property_schema",
            "rename_edge_type_schema",
            b"rename_edge_type_schema",
            "rename_vertex_property_schema",
            b"rename_vertex_property_schema",
            "rename_vertex_type_schema",
            b"rename_vertex_type_schema",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing.Literal[
            "add_edge_property_schema",
            b"add_edge_property_schema",
            "add_vertex_property_schema",
            b"add_vertex_property_schema",
            "create_edge_schema",
            b"create_edge_schema",
            "create_vertex_schema",
            b"create_vertex_schema",
            "drop_edge_property_schema",
            b"drop_edge_property_schema",
            "drop_edge_schema",
            b"drop_edge_schema",
            "drop_vertex_property_schema",
            b"drop_vertex_property_schema",
            "drop_vertex_schema",
            b"drop_vertex_schema",
            "plan",
            b"plan",
            "rename_edge_property_schema",
            b"rename_edge_property_schema",
            "rename_edge_type_schema",
            b"rename_edge_type_schema",
            "rename_vertex_property_schema",
            b"rename_vertex_property_schema",
            "rename_vertex_type_schema",
            b"rename_vertex_type_schema",
        ],
    ) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["plan", b"plan"]) -> (
        typing.Literal[
            "create_vertex_schema",
            "create_edge_schema",
            "drop_vertex_schema",
            "drop_edge_schema",
            "add_vertex_property_schema",
            "add_edge_property_schema",
            "drop_vertex_property_schema",
            "drop_edge_property_schema",
            "rename_vertex_property_schema",
            "rename_edge_property_schema",
            "rename_vertex_type_schema",
            "rename_edge_type_schema",
        ]
        | None
    ): ...

global___DDLPlan = DDLPlan

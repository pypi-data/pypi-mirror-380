# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: algebra.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import common_pb2 as common__pb2
import expr_pb2 as expr__pb2
import schema_pb2 as schema__pb2
import type_pb2 as type__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\ralgebra.proto\x12\x07\x61lgebra\x1a\x0c\x63ommon.proto\x1a\nexpr.proto\x1a\x0cschema.proto\x1a\ntype.proto\x1a\x1egoogle/protobuf/wrappers.proto";\n\x08MetaData\x12 \n\x04type\x18\x01 \x01(\x0b\x32\x12.common.IrDataType\x12\r\n\x05\x61lias\x18\x02 \x01(\x05"\xc0\x01\n\x07Project\x12,\n\x08mappings\x18\x01 \x03(\x0b\x32\x1a.algebra.Project.ExprAlias\x12\x11\n\tis_append\x18\x02 \x01(\x08\x12$\n\tmeta_data\x18\x03 \x03(\x0b\x32\x11.algebra.MetaData\x1aN\n\tExprAlias\x12 \n\x04\x65xpr\x18\x01 \x01(\x0b\x32\x12.common.Expression\x12\x1f\n\x05\x61lias\x18\x02 \x01(\x0b\x32\x10.common.NameOrId"/\n\x06Select\x12%\n\tpredicate\x18\x01 \x01(\x0b\x32\x12.common.Expression"\xde\x01\n\x04Join\x12#\n\tleft_keys\x18\x01 \x03(\x0b\x32\x10.common.Variable\x12$\n\nright_keys\x18\x02 \x03(\x0b\x32\x10.common.Variable\x12$\n\x04kind\x18\x03 \x01(\x0e\x32\x16.algebra.Join.JoinKind"e\n\x08JoinKind\x12\t\n\x05INNER\x10\x00\x12\x0e\n\nLEFT_OUTER\x10\x01\x12\x0f\n\x0bRIGHT_OUTER\x10\x02\x12\x0e\n\nFULL_OUTER\x10\x03\x12\x08\n\x04SEMI\x10\x04\x12\x08\n\x04\x41NTI\x10\x05\x12\t\n\x05TIMES\x10\x06"\x18\n\x05Union\x12\x0f\n\x07parents\x18\x01 \x03(\x05";\n\tIntersect\x12\x0f\n\x07parents\x18\x01 \x03(\x05\x12\x1d\n\x03key\x18\x02 \x01(\x0b\x32\x10.common.NameOrId"\xcd\x03\n\x07GroupBy\x12+\n\x08mappings\x18\x01 \x03(\x0b\x32\x19.algebra.GroupBy.KeyAlias\x12+\n\tfunctions\x18\x02 \x03(\x0b\x32\x18.algebra.GroupBy.AggFunc\x12$\n\tmeta_data\x18\x03 \x03(\x0b\x32\x11.algebra.MetaData\x1a\xf5\x01\n\x07\x41ggFunc\x12\x1e\n\x04vars\x18\x01 \x03(\x0b\x32\x10.common.Variable\x12\x35\n\taggregate\x18\x02 \x01(\x0e\x32".algebra.GroupBy.AggFunc.Aggregate\x12\x1f\n\x05\x61lias\x18\x03 \x01(\x0b\x32\x10.common.NameOrId"r\n\tAggregate\x12\x07\n\x03SUM\x10\x00\x12\x07\n\x03MIN\x10\x01\x12\x07\n\x03MAX\x10\x02\x12\t\n\x05\x43OUNT\x10\x03\x12\x12\n\x0e\x43OUNT_DISTINCT\x10\x04\x12\x0b\n\x07TO_LIST\x10\x05\x12\n\n\x06TO_SET\x10\x06\x12\x07\n\x03\x41VG\x10\x07\x12\t\n\x05\x46IRST\x10\x08\x1aJ\n\x08KeyAlias\x12\x1d\n\x03key\x18\x01 \x01(\x0b\x32\x10.common.Variable\x12\x1f\n\x05\x61lias\x18\x02 \x01(\x0b\x32\x10.common.NameOrId"\xe3\x01\n\x07OrderBy\x12,\n\x05pairs\x18\x02 \x03(\x0b\x32\x1d.algebra.OrderBy.OrderingPair\x12\x1d\n\x05limit\x18\x03 \x01(\x0b\x32\x0e.algebra.Range\x1a\x8a\x01\n\x0cOrderingPair\x12\x1d\n\x03key\x18\x01 \x01(\x0b\x32\x10.common.Variable\x12\x32\n\x05order\x18\x02 \x01(\x0e\x32#.algebra.OrderBy.OrderingPair.Order"\'\n\x05Order\x12\x0b\n\x07SHUFFLE\x10\x00\x12\x07\n\x03\x41SC\x10\x01\x12\x08\n\x04\x44\x45SC\x10\x02"\'\n\x05\x44\x65\x64up\x12\x1e\n\x04keys\x18\x01 \x03(\x0b\x32\x10.common.Variable"n\n\x06Unfold\x12\x1d\n\x03tag\x18\x01 \x01(\x0b\x32\x10.common.NameOrId\x12\x1f\n\x05\x61lias\x18\x02 \x01(\x0b\x32\x10.common.NameOrId\x12$\n\tmeta_data\x18\x03 \x01(\x0b\x32\x11.algebra.MetaData"%\n\x05Range\x12\r\n\x05lower\x18\x01 \x01(\x05\x12\r\n\x05upper\x18\x02 \x01(\x05"&\n\x05Limit\x12\x1d\n\x05range\x18\x01 \x01(\x0b\x32\x0e.algebra.Range"\xab\x02\n\x0eIndexPredicate\x12;\n\ror_predicates\x18\x01 \x03(\x0b\x32$.algebra.IndexPredicate.AndPredicate\x1a\x96\x01\n\x07Triplet\x12\x1d\n\x03key\x18\x01 \x01(\x0b\x32\x10.common.Property\x12\x1e\n\x05\x63onst\x18\x02 \x01(\x0b\x32\r.common.ValueH\x00\x12%\n\x05param\x18\x03 \x01(\x0b\x32\x14.common.DynamicParamH\x00\x12\x1c\n\x03\x63mp\x18\x04 \x01(\x0e\x32\x0f.common.LogicalB\x07\n\x05value\x1a\x43\n\x0c\x41ndPredicate\x12\x33\n\npredicates\x18\x01 \x03(\x0b\x32\x1f.algebra.IndexPredicate.Triplet"\xa4\x02\n\x0bQueryParams\x12 \n\x06tables\x18\x01 \x03(\x0b\x32\x10.common.NameOrId\x12!\n\x07\x63olumns\x18\x02 \x03(\x0b\x32\x10.common.NameOrId\x12\x16\n\x0eis_all_columns\x18\x03 \x01(\x08\x12\x1d\n\x05limit\x18\x04 \x01(\x0b\x32\x0e.algebra.Range\x12%\n\tpredicate\x18\x05 \x01(\x0b\x32\x12.common.Expression\x12\x14\n\x0csample_ratio\x18\x06 \x01(\x01\x12.\n\x05\x65xtra\x18\x07 \x03(\x0b\x32\x1f.algebra.QueryParams.ExtraEntry\x1a,\n\nExtraEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01"\x8f\x02\n\x04Scan\x12\'\n\x08scan_opt\x18\x01 \x01(\x0e\x32\x15.algebra.Scan.ScanOpt\x12\x1f\n\x05\x61lias\x18\x02 \x01(\x0b\x32\x10.common.NameOrId\x12$\n\x06params\x18\x03 \x01(\x0b\x32\x14.algebra.QueryParams\x12.\n\ridx_predicate\x18\x04 \x01(\x0b\x32\x17.algebra.IndexPredicate\x12\x15\n\ris_count_only\x18\x05 \x01(\x08\x12$\n\tmeta_data\x18\x06 \x01(\x0b\x32\x11.algebra.MetaData"*\n\x07ScanOpt\x12\n\n\x06VERTEX\x10\x00\x12\x08\n\x04\x45\x44GE\x10\x01\x12\t\n\x05TABLE\x10\x02"\xe4\x01\n\x04GetV\x12\x1d\n\x03tag\x18\x01 \x01(\x0b\x32\x10.common.NameOrId\x12\x1f\n\x03opt\x18\x02 \x01(\x0e\x32\x12.algebra.GetV.VOpt\x12$\n\x06params\x18\x03 \x01(\x0b\x32\x14.algebra.QueryParams\x12\x1f\n\x05\x61lias\x18\x04 \x01(\x0b\x32\x10.common.NameOrId\x12$\n\tmeta_data\x18\x05 \x01(\x0b\x32\x11.algebra.MetaData"/\n\x04VOpt\x12\t\n\x05START\x10\x00\x12\x07\n\x03\x45ND\x10\x01\x12\t\n\x05OTHER\x10\x02\x12\x08\n\x04\x42OTH\x10\x03"%\n\x02\x41s\x12\x1f\n\x05\x61lias\x18\x01 \x01(\x0b\x32\x10.common.NameOrId"\xeb\x02\n\nEdgeExpand\x12\x1f\n\x05v_tag\x18\x01 \x01(\x0b\x32\x10.common.NameOrId\x12\x30\n\tdirection\x18\x02 \x01(\x0e\x32\x1d.algebra.EdgeExpand.Direction\x12$\n\x06params\x18\x03 \x01(\x0b\x32\x14.algebra.QueryParams\x12\x1f\n\x05\x61lias\x18\x04 \x01(\x0b\x32\x10.common.NameOrId\x12\x31\n\nexpand_opt\x18\x05 \x01(\x0e\x32\x1d.algebra.EdgeExpand.ExpandOpt\x12$\n\tmeta_data\x18\x06 \x01(\x0b\x32\x11.algebra.MetaData\x12\x13\n\x0bis_optional\x18\x07 \x01(\x08"&\n\tDirection\x12\x07\n\x03OUT\x10\x00\x12\x06\n\x02IN\x10\x01\x12\x08\n\x04\x42OTH\x10\x02"-\n\tExpandOpt\x12\n\n\x06VERTEX\x10\x00\x12\x08\n\x04\x45\x44GE\x10\x01\x12\n\n\x06\x44\x45GREE\x10\x02"\xf8\x03\n\nPathExpand\x12,\n\x04\x62\x61se\x18\x01 \x01(\x0b\x32\x1e.algebra.PathExpand.ExpandBase\x12#\n\tstart_tag\x18\x02 \x01(\x0b\x32\x10.common.NameOrId\x12\x1f\n\x05\x61lias\x18\x03 \x01(\x0b\x32\x10.common.NameOrId\x12!\n\thop_range\x18\x04 \x01(\x0b\x32\x0e.algebra.Range\x12-\n\x08path_opt\x18\x05 \x01(\x0e\x32\x1b.algebra.PathExpand.PathOpt\x12\x31\n\nresult_opt\x18\x06 \x01(\x0e\x32\x1d.algebra.PathExpand.ResultOpt\x12%\n\tcondition\x18\x07 \x01(\x0b\x32\x12.common.Expression\x12\x13\n\x0bis_optional\x18\x08 \x01(\x08\x1aT\n\nExpandBase\x12(\n\x0b\x65\x64ge_expand\x18\x01 \x01(\x0b\x32\x13.algebra.EdgeExpand\x12\x1c\n\x05get_V\x18\x02 \x01(\x0b\x32\r.algebra.GetV"/\n\x07PathOpt\x12\r\n\tARBITRARY\x10\x00\x12\n\n\x06SIMPLE\x10\x01\x12\t\n\x05TRAIL\x10\x02".\n\tResultOpt\x12\t\n\x05\x45ND_V\x10\x00\x12\t\n\x05\x41LL_V\x10\x01\x12\x0b\n\x07\x41LL_V_E\x10\x02"\x84\x01\n\x05\x41pply\x12)\n\tjoin_kind\x18\x01 \x01(\x0e\x32\x16.algebra.Join.JoinKind\x12\x1e\n\x04tags\x18\x02 \x03(\x0b\x32\x10.common.NameOrId\x12\x0f\n\x07subtask\x18\x03 \x01(\x05\x12\x1f\n\x05\x61lias\x18\x04 \x01(\x0b\x32\x10.common.NameOrId"U\n\x0cSegmentApply\x12\x1e\n\x04keys\x18\x01 \x03(\x0b\x32\x10.common.NameOrId\x12%\n\rapply_subtask\x18\x02 \x01(\x0b\x32\x0e.algebra.Apply"\xa0\x03\n\x07Pattern\x12,\n\tsentences\x18\x01 \x03(\x0b\x32\x19.algebra.Pattern.Sentence\x12$\n\tmeta_data\x18\x02 \x03(\x0b\x32\x11.algebra.MetaData\x1a\x9e\x01\n\x06\x42inder\x12#\n\x04\x65\x64ge\x18\x01 \x01(\x0b\x32\x13.algebra.EdgeExpandH\x00\x12#\n\x04path\x18\x02 \x01(\x0b\x32\x13.algebra.PathExpandH\x00\x12\x1f\n\x06vertex\x18\x03 \x01(\x0b\x32\r.algebra.GetVH\x00\x12!\n\x06select\x18\x04 \x01(\x0b\x32\x0f.algebra.SelectH\x00\x42\x06\n\x04item\x1a\x9f\x01\n\x08Sentence\x12\x1f\n\x05start\x18\x01 \x01(\x0b\x32\x10.common.NameOrId\x12(\n\x07\x62inders\x18\x02 \x03(\x0b\x32\x17.algebra.Pattern.Binder\x12\x1d\n\x03\x65nd\x18\x03 \x01(\x0b\x32\x10.common.NameOrId\x12)\n\tjoin_kind\x18\x04 \x01(\x0e\x32\x16.algebra.Join.JoinKind"\xd1\x02\n\x06Sample\x12/\n\x0bsample_type\x18\x01 \x01(\x0b\x32\x1a.algebra.Sample.SampleType\x12)\n\x04seed\x18\x02 \x01(\x0b\x32\x1b.google.protobuf.Int32Value\x12\'\n\rsample_weight\x18\x03 \x01(\x0b\x32\x10.common.Variable\x1a\x1e\n\rSampleByRatio\x12\r\n\x05ratio\x18\x01 \x01(\x01\x1a\x1a\n\x0bSampleByNum\x12\x0b\n\x03num\x18\x01 \x01(\x05\x1a\x85\x01\n\nSampleType\x12\x38\n\x0fsample_by_ratio\x18\x01 \x01(\x0b\x32\x1d.algebra.Sample.SampleByRatioH\x00\x12\x34\n\rsample_by_num\x18\x02 \x01(\x0b\x32\x1b.algebra.Sample.SampleByNumH\x00\x42\x07\n\x05inner"\xcd\x01\n\x04Sink\x12!\n\x04tags\x18\x01 \x03(\x0b\x32\x13.common.NameOrIdKey\x12-\n\x0bsink_target\x18\x02 \x01(\x0b\x32\x18.algebra.Sink.SinkTarget\x1as\n\nSinkTarget\x12,\n\x0csink_default\x18\x01 \x01(\x0b\x32\x14.algebra.SinkDefaultH\x00\x12.\n\rsink_vineyard\x18\x02 \x01(\x0b\x32\x15.algebra.SinkVineyardH\x00\x42\x07\n\x05inner"\xe3\x01\n\x0bSinkDefault\x12<\n\x10id_name_mappings\x18\x01 \x03(\x0b\x32".algebra.SinkDefault.IdNameMapping\x1a[\n\rIdNameMapping\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x30\n\tmeta_type\x18\x03 \x01(\x0e\x32\x1d.algebra.SinkDefault.MetaType"9\n\x08MetaType\x12\n\n\x06\x45NTITY\x10\x00\x12\x0c\n\x08RELATION\x10\x01\x12\n\n\x06\x43OLUMN\x10\x02\x12\x07\n\x03TAG\x10\x03"H\n\x0cSinkVineyard\x12\x12\n\ngraph_name\x18\x01 \x01(\t\x12$\n\x0cgraph_schema\x18\x02 \x01(\x0b\x32\x0e.schema.Schema"\x06\n\x04Root"\x08\n\x06\x42ranch"\x9d\x07\n\x0bLogicalPlan\x12(\n\x05nodes\x18\x01 \x03(\x0b\x32\x19.algebra.LogicalPlan.Node\x12\r\n\x05roots\x18\x02 \x03(\x05\x1a\x8e\x06\n\x08Operator\x12#\n\x07project\x18\x01 \x01(\x0b\x32\x10.algebra.ProjectH\x00\x12!\n\x06select\x18\x02 \x01(\x0b\x32\x0f.algebra.SelectH\x00\x12\x1d\n\x04join\x18\x03 \x01(\x0b\x32\r.algebra.JoinH\x00\x12\x1f\n\x05union\x18\x04 \x01(\x0b\x32\x0e.algebra.UnionH\x00\x12$\n\x08group_by\x18\x05 \x01(\x0b\x32\x10.algebra.GroupByH\x00\x12$\n\x08order_by\x18\x06 \x01(\x0b\x32\x10.algebra.OrderByH\x00\x12\x1f\n\x05\x64\x65\x64up\x18\x07 \x01(\x0b\x32\x0e.algebra.DedupH\x00\x12!\n\x06unfold\x18\x08 \x01(\x0b\x32\x0f.algebra.UnfoldH\x00\x12\x1f\n\x05\x61pply\x18\t \x01(\x0b\x32\x0e.algebra.ApplyH\x00\x12*\n\tseg_apply\x18\n \x01(\x0b\x32\x15.algebra.SegmentApplyH\x00\x12\x1d\n\x04scan\x18\x0b \x01(\x0b\x32\r.algebra.ScanH\x00\x12\x1f\n\x05limit\x18\x0c \x01(\x0b\x32\x0e.algebra.LimitH\x00\x12\x19\n\x02\x61s\x18\x0e \x01(\x0b\x32\x0b.algebra.AsH\x00\x12\'\n\tintersect\x18\x0f \x01(\x0b\x32\x12.algebra.IntersectH\x00\x12\x1d\n\x04sink\x18\x10 \x01(\x0b\x32\r.algebra.SinkH\x00\x12\x1d\n\x04root\x18\x11 \x01(\x0b\x32\r.algebra.RootH\x00\x12!\n\x06sample\x18\x12 \x01(\x0b\x32\x0f.algebra.SampleH\x00\x12!\n\x06\x62ranch\x18\x13 \x01(\x0b\x32\x0f.algebra.BranchH\x00\x12\x1f\n\x06vertex\x18\x1e \x01(\x0b\x32\r.algebra.GetVH\x00\x12#\n\x04\x65\x64ge\x18\x1f \x01(\x0b\x32\x13.algebra.EdgeExpandH\x00\x12#\n\x04path\x18  \x01(\x0b\x32\x13.algebra.PathExpandH\x00\x12#\n\x07pattern\x18# \x01(\x0b\x32\x10.algebra.PatternH\x00\x42\x05\n\x03opr\x1a\x44\n\x04Node\x12*\n\x03opr\x18\x01 \x01(\x0b\x32\x1d.algebra.LogicalPlan.Operator\x12\x10\n\x08\x63hildren\x18\x02 \x03(\x05\x42\x31\n!com.alibaba.graphscope.gaia.protoB\x0cGraphAlgebrab\x06proto3'
)

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "algebra_pb2", globals())
if _descriptor._USE_C_DESCRIPTORS == False:

    DESCRIPTOR._options = None
    DESCRIPTOR._serialized_options = (
        b"\n!com.alibaba.graphscope.gaia.protoB\014GraphAlgebra"
    )
    _QUERYPARAMS_EXTRAENTRY._options = None
    _QUERYPARAMS_EXTRAENTRY._serialized_options = b"8\001"
    _METADATA._serialized_start = 110
    _METADATA._serialized_end = 169
    _PROJECT._serialized_start = 172
    _PROJECT._serialized_end = 364
    _PROJECT_EXPRALIAS._serialized_start = 286
    _PROJECT_EXPRALIAS._serialized_end = 364
    _SELECT._serialized_start = 366
    _SELECT._serialized_end = 413
    _JOIN._serialized_start = 416
    _JOIN._serialized_end = 638
    _JOIN_JOINKIND._serialized_start = 537
    _JOIN_JOINKIND._serialized_end = 638
    _UNION._serialized_start = 640
    _UNION._serialized_end = 664
    _INTERSECT._serialized_start = 666
    _INTERSECT._serialized_end = 725
    _GROUPBY._serialized_start = 728
    _GROUPBY._serialized_end = 1189
    _GROUPBY_AGGFUNC._serialized_start = 868
    _GROUPBY_AGGFUNC._serialized_end = 1113
    _GROUPBY_AGGFUNC_AGGREGATE._serialized_start = 999
    _GROUPBY_AGGFUNC_AGGREGATE._serialized_end = 1113
    _GROUPBY_KEYALIAS._serialized_start = 1115
    _GROUPBY_KEYALIAS._serialized_end = 1189
    _ORDERBY._serialized_start = 1192
    _ORDERBY._serialized_end = 1419
    _ORDERBY_ORDERINGPAIR._serialized_start = 1281
    _ORDERBY_ORDERINGPAIR._serialized_end = 1419
    _ORDERBY_ORDERINGPAIR_ORDER._serialized_start = 1380
    _ORDERBY_ORDERINGPAIR_ORDER._serialized_end = 1419
    _DEDUP._serialized_start = 1421
    _DEDUP._serialized_end = 1460
    _UNFOLD._serialized_start = 1462
    _UNFOLD._serialized_end = 1572
    _RANGE._serialized_start = 1574
    _RANGE._serialized_end = 1611
    _LIMIT._serialized_start = 1613
    _LIMIT._serialized_end = 1651
    _INDEXPREDICATE._serialized_start = 1654
    _INDEXPREDICATE._serialized_end = 1953
    _INDEXPREDICATE_TRIPLET._serialized_start = 1734
    _INDEXPREDICATE_TRIPLET._serialized_end = 1884
    _INDEXPREDICATE_ANDPREDICATE._serialized_start = 1886
    _INDEXPREDICATE_ANDPREDICATE._serialized_end = 1953
    _QUERYPARAMS._serialized_start = 1956
    _QUERYPARAMS._serialized_end = 2248
    _QUERYPARAMS_EXTRAENTRY._serialized_start = 2204
    _QUERYPARAMS_EXTRAENTRY._serialized_end = 2248
    _SCAN._serialized_start = 2251
    _SCAN._serialized_end = 2522
    _SCAN_SCANOPT._serialized_start = 2480
    _SCAN_SCANOPT._serialized_end = 2522
    _GETV._serialized_start = 2525
    _GETV._serialized_end = 2753
    _GETV_VOPT._serialized_start = 2706
    _GETV_VOPT._serialized_end = 2753
    _AS._serialized_start = 2755
    _AS._serialized_end = 2792
    _EDGEEXPAND._serialized_start = 2795
    _EDGEEXPAND._serialized_end = 3158
    _EDGEEXPAND_DIRECTION._serialized_start = 3073
    _EDGEEXPAND_DIRECTION._serialized_end = 3111
    _EDGEEXPAND_EXPANDOPT._serialized_start = 3113
    _EDGEEXPAND_EXPANDOPT._serialized_end = 3158
    _PATHEXPAND._serialized_start = 3161
    _PATHEXPAND._serialized_end = 3665
    _PATHEXPAND_EXPANDBASE._serialized_start = 3484
    _PATHEXPAND_EXPANDBASE._serialized_end = 3568
    _PATHEXPAND_PATHOPT._serialized_start = 3570
    _PATHEXPAND_PATHOPT._serialized_end = 3617
    _PATHEXPAND_RESULTOPT._serialized_start = 3619
    _PATHEXPAND_RESULTOPT._serialized_end = 3665
    _APPLY._serialized_start = 3668
    _APPLY._serialized_end = 3800
    _SEGMENTAPPLY._serialized_start = 3802
    _SEGMENTAPPLY._serialized_end = 3887
    _PATTERN._serialized_start = 3890
    _PATTERN._serialized_end = 4306
    _PATTERN_BINDER._serialized_start = 3986
    _PATTERN_BINDER._serialized_end = 4144
    _PATTERN_SENTENCE._serialized_start = 4147
    _PATTERN_SENTENCE._serialized_end = 4306
    _SAMPLE._serialized_start = 4309
    _SAMPLE._serialized_end = 4646
    _SAMPLE_SAMPLEBYRATIO._serialized_start = 4452
    _SAMPLE_SAMPLEBYRATIO._serialized_end = 4482
    _SAMPLE_SAMPLEBYNUM._serialized_start = 4484
    _SAMPLE_SAMPLEBYNUM._serialized_end = 4510
    _SAMPLE_SAMPLETYPE._serialized_start = 4513
    _SAMPLE_SAMPLETYPE._serialized_end = 4646
    _SINK._serialized_start = 4649
    _SINK._serialized_end = 4854
    _SINK_SINKTARGET._serialized_start = 4739
    _SINK_SINKTARGET._serialized_end = 4854
    _SINKDEFAULT._serialized_start = 4857
    _SINKDEFAULT._serialized_end = 5084
    _SINKDEFAULT_IDNAMEMAPPING._serialized_start = 4934
    _SINKDEFAULT_IDNAMEMAPPING._serialized_end = 5025
    _SINKDEFAULT_METATYPE._serialized_start = 5027
    _SINKDEFAULT_METATYPE._serialized_end = 5084
    _SINKVINEYARD._serialized_start = 5086
    _SINKVINEYARD._serialized_end = 5158
    _ROOT._serialized_start = 5160
    _ROOT._serialized_end = 5166
    _BRANCH._serialized_start = 5168
    _BRANCH._serialized_end = 5176
    _LOGICALPLAN._serialized_start = 5179
    _LOGICALPLAN._serialized_end = 6104
    _LOGICALPLAN_OPERATOR._serialized_start = 5252
    _LOGICALPLAN_OPERATOR._serialized_end = 6034
    _LOGICALPLAN_NODE._serialized_start = 6036
    _LOGICALPLAN_NODE._serialized_end = 6104
# @@protoc_insertion_point(module_scope)

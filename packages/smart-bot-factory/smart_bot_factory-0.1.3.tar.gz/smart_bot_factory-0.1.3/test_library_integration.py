"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
"""
import asyncio
import logging
from smart_bot_factory import (
    check_timeouts,
    test_admin_system,
    check_setup,
    setup_bot_environment,
    Config,
    SupabaseClient,
    AdminManager,
    ConversationManager,
    AnalyticsManager
)

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

async def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""
    bot_name = "new-valera"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
    
    logger.info("üîç –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π")
    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –±–æ—Ç–µ: {bot_name}\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º setup_bot_environment
    logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç setup_bot_environment:")
    config_dir = setup_bot_environment(bot_name)
    if not config_dir:
        logger.error("‚ùå setup_bot_environment –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    logger.info("‚úÖ setup_bot_environment —Ä–∞–±–æ—Ç–∞–µ—Ç\n")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º check_setup
    logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç check_setup:")
    setup_ok = await check_setup(bot_name)
    if not setup_ok:
        logger.error("‚ùå check_setup –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    logger.info("‚úÖ check_setup —Ä–∞–±–æ—Ç–∞–µ—Ç\n")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º check_timeouts
    logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç check_timeouts:")
    timeouts_ok = await check_timeouts(bot_name)
    if not timeouts_ok:
        logger.error("‚ùå check_timeouts –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    logger.info("‚úÖ check_timeouts —Ä–∞–±–æ—Ç–∞–µ—Ç\n")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º test_admin_system
    logger.info("4Ô∏è‚É£ –¢–µ—Å—Ç test_admin_system:")
    admin_ok = await test_admin_system(bot_name)
    if not admin_ok:
        logger.error("‚ùå test_admin_system –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    logger.info("‚úÖ test_admin_system —Ä–∞–±–æ—Ç–∞–µ—Ç\n")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    logger.info("5Ô∏è‚É£ –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        logger.info("‚úÖ Config –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
        supabase = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await supabase.initialize()
        logger.info("‚úÖ SupabaseClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AdminManager
        admin_manager = AdminManager(config, supabase)
        logger.info("‚úÖ AdminManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ConversationManager
        conversation_manager = ConversationManager(supabase, admin_manager)
        logger.info("‚úÖ ConversationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AnalyticsManager
        analytics_manager = AnalyticsManager(supabase)
        logger.info("‚úÖ AnalyticsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        conversations = await conversation_manager.get_active_conversations()
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(conversations)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
        
        stats = await analytics_manager.get_funnel_stats(1)
        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False
    
    logger.info("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    try:
        success = asyncio.run(test_integration())
        if not success:
            logger.error("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            exit(1)
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
        exit(1)

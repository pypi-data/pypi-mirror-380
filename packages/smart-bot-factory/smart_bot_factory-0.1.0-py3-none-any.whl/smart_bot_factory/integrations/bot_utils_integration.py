"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å bot_utils.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
"""

import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

async def enhanced_process_events(session_id: str, events: List[Dict[str, Any]], user_id: int):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è process_events –∏–∑ bot_utils.py
    —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    """
    from ..events.decorators import (
        execute_event_handler, 
        get_event_handlers, 
        get_scheduled_tasks,
        execute_scheduled_task_from_event
    )
    
    logger.info(f"üîî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    for event in events:
        try:
            event_type = event.get('—Ç–∏–ø', '')
            event_info = event.get('–∏–Ω—Ñ–æ', '')
            
            if not event_type:
                continue
            
            logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: {event_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            event_handlers = get_event_handlers()
            scheduled_tasks = get_scheduled_tasks()
            
            if event_type in event_handlers:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
                logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è '{event_type}'")
                
                try:
                    # –ü–∞—Ä—Å–∏–º event_info –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    if isinstance(event_info, str):
                        event_data = _parse_event_info(event_info, user_id)
                    else:
                        event_data = event_info
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    result = await execute_event_handler(event_type, user_id, event_data)
                    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '{event_type}' –≤—ã–ø–æ–ª–Ω–µ–Ω: {result}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '{event_type}': {e}")
                    # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                    await _fallback_event_processing(session_id, event_type, event_info, user_id)
                    
            elif event_type in scheduled_tasks:
                # –≠—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ø–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ event_info
                logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É '{event_type}' –Ω–∞ –æ—Å–Ω–æ–≤–µ event_info: {event_info}")
                
                try:
                    result = await execute_scheduled_task_from_event(user_id, event_type, event_info)
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{event_type}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {result}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ '{event_type}': {e}")
                    # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                    await _fallback_event_processing(session_id, event_type, event_info, user_id)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑ bot_utils.py
                logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è '{event_type}'")
                await _fallback_event_processing(session_id, event_type, event_info, user_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {event}: {e}")

def _parse_event_info(event_info: str, user_id: int) -> Dict[str, Any]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É event_info –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, +7-999-123-45-67, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–µ–π"
    
    data = {
        "user_id": user_id,
        "raw_info": event_info
    }
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–ª–µ—Ñ–æ–Ω
    import re
    phone_match = re.search(r'\+?[7-8]?[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}', event_info)
    if phone_match:
        data["phone"] = phone_match.group(0)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
    words = event_info.split(',')
    if words:
        data["name"] = words[0].strip()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —É—Å–ª—É–≥—É/–∏–Ω—Ç–µ—Ä–µ—Å
    if len(words) > 2:
        data["interest"] = words[2].strip()
    
    return data

async def _fallback_event_processing(session_id: str, event_type: str, event_info: str, user_id: int):
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ bot_utils.py)
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    import sys
    from pathlib import Path
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
    project_root = Path(__file__).parent.parent.parent.parent
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    try:
        from supabase_client import SupabaseClient
        from main import supabase_client
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await supabase_client.add_session_event(session_id, event_type, event_info)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await _notify_admins_about_event(user_id, {
            '—Ç–∏–ø': event_type,
            '–∏–Ω—Ñ–æ': event_info
        })
        
    except ImportError:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è fallback –æ–±—Ä–∞–±–æ—Ç–∫–∏")

async def _notify_admins_about_event(user_id: int, event: Dict[str, Any]):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ —Å–æ–±—ã—Ç–∏–∏ (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ bot_utils.py)
    """
    try:
        import sys
        from pathlib import Path
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
        project_root = Path(__file__).parent.parent.parent.parent
        if str(project_root) not in sys.path:
            sys.path.insert(0, str(project_root))
        
        from main import supabase_client, admin_manager, bot
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        from datetime import datetime
        
        event_type = event.get('—Ç–∏–ø', '')
        event_info = event.get('–∏–Ω—Ñ–æ', '')
        
        if not event_type:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            user_response = supabase_client.client.table('sales_users').select(
                'first_name', 'last_name', 'username'
            ).eq('telegram_id', user_id).execute()
            
            user_info = user_response.data[0] if user_response.data else {}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            name_parts = []
            if user_info.get('first_name'):
                name_parts.append(user_info['first_name'])
            if user_info.get('last_name'):
                name_parts.append(user_info['last_name'])
            
            user_name = " ".join(name_parts) if name_parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_info.get('username'):
                user_display = f"{user_name} (@{user_info['username']})"
            else:
                user_display = user_name
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            user_display = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ–¥–∑–∏
        emoji_map = {
            '—Ç–µ–ª–µ—Ñ–æ–Ω': 'üì±',
            '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': 'üí¨',
            '–ø–æ–∫—É–ø–∫–∞': 'üí∞',
            '–æ—Ç–∫–∞–∑': '‚ùå',
            'appointment_booking': 'üìÖ',
            'phone_collection': 'üì±'
        }
        
        emoji = emoji_map.get(event_type, 'üîî')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = f"""
{emoji} {event_type.upper()}!
üë§ {user_display}
üÜî ID: {user_id}
üìù {event_info}
üïê {datetime.now().strftime('%H:%M')}
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí¨ –ß–∞—Ç", callback_data=f"admin_chat_{user_id}"),
                InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"admin_history_{user_id}")
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
        active_admins = await admin_manager.get_active_admins()
        for admin_id in active_admins:
            try:
                await bot.send_message(admin_id, notification.strip(), reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")

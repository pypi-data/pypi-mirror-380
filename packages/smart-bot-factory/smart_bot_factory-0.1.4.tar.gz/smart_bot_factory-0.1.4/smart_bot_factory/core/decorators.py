"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
"""

import asyncio
import logging
from typing import Callable, Any, Dict, Optional
from datetime import datetime, timedelta
from functools import wraps

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
_event_handlers: Dict[str, Callable] = {}
_scheduled_tasks: Dict[str, Dict[str, Any]] = {}

def event_handler(event_type: str, description: str = "", notify: bool = False):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
    
    Args:
        event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'appointment_booking', 'phone_collection')
        description: –û–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç)
        notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    Example:
        @event_handler("appointment_booking", "–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–∏–µ–º", notify=True)
        async def book_appointment(user_id: int, appointment_data: dict):
            # –õ–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
            return {"status": "success", "appointment_id": "123"}
    """
    def decorator(func: Callable) -> Callable:
        _event_handlers[event_type] = {
            'handler': func,
            'description': description,
            'name': func.__name__,
            'notify': notify
        }
        
        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è '{event_type}': {func.__name__}")
        
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                logger.info(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è '{event_type}'")
                result = await func(*args, **kwargs)
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '{event_type}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ notify –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if isinstance(result, dict):
                    result['notify'] = notify
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                    result = {
                        'status': 'success',
                        'result': result,
                        'notify': notify
                    }
                
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '{event_type}': {e}")
                raise
        
        return wrapper
    return decorator

def schedule_task(task_name: str, description: str = "", notify: bool = False):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—Ä–µ–º—è
    
    Args:
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'send_reminder', 'follow_up')
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç)
        notify: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –∞–¥–º–∏–Ω–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    Example:
        @schedule_task("send_reminder", "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", notify=False)
        async def send_reminder(user_id: int, user_data: dict):
            # user_data —Å–æ–¥–µ—Ä–∂–∏—Ç: {"delay_seconds": 3600, "scheduled_at": "..."}
            delay_seconds = user_data.get("delay_seconds", 0)
            # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Ñ–æ–Ω–µ)
            return {"status": "sent", "delay_seconds": delay_seconds}
    """
    def decorator(func: Callable) -> Callable:
        _scheduled_tasks[task_name] = {
            'handler': func,
            'description': description,
            'name': func.__name__,
            'notify': notify
        }
        
        logger.info(f"‚è∞ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ '{task_name}': {func.__name__}")
        
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                logger.info(f"‚è∞ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É '{task_name}'")
                result = await func(*args, **kwargs)
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ notify –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                if isinstance(result, dict):
                    result['notify'] = notify
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                    result = {
                        'status': 'success',
                        'result': result,
                        'notify': notify
                    }
                
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ '{task_name}': {e}")
                raise
        
        return wrapper
    return decorator

def get_event_handlers() -> Dict[str, Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    return _event_handlers.copy()

def get_scheduled_tasks() -> Dict[str, Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    return _scheduled_tasks.copy()

def get_handlers_for_prompt() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç
    """
    if not _event_handlers and not _scheduled_tasks:
        return ""
    
    prompt_parts = []
    
    if _event_handlers:
        prompt_parts.append("–î–û–°–¢–£–ü–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô:")
        for event_type, handler_info in _event_handlers.items():
            prompt_parts.append(f"- {event_type}: {handler_info['description']}")
    
    if _scheduled_tasks:
        prompt_parts.append("\n–î–û–°–¢–£–ü–ù–´–ï –ó–ê–î–ê–ß–ò –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
        for task_name, task_info in _scheduled_tasks.items():
            prompt_parts.append(f"- {task_name}: {task_info['description']}")
    
    return "\n".join(prompt_parts)

async def execute_event_handler(event_type: str, *args, **kwargs) -> Any:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø—É"""
    if event_type not in _event_handlers:
        raise ValueError(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è '{event_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    handler_info = _event_handlers[event_type]
    return await handler_info['handler'](*args, **kwargs)

async def execute_scheduled_task(task_name: str, user_id: int, user_data: dict) -> Any:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ –∏–º–µ–Ω–∏"""
    if task_name not in _scheduled_tasks:
        raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    task_info = _scheduled_tasks[task_name]
    return await task_info['handler'](user_id, user_data)

async def schedule_task_for_later(task_name: str, delay_seconds: int, user_id: int, user_data: dict):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    
    Args:
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        delay_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏
    """
    if task_name not in _scheduled_tasks:
        raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    logger.info(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É '{task_name}' —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")
    
    async def delayed_task():
        await asyncio.sleep(delay_seconds)
        await execute_scheduled_task(task_name, user_id, user_data)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(delayed_task())
    
    return {
        "status": "scheduled",
        "task_name": task_name,
        "delay_seconds": delay_seconds,
        "scheduled_at": datetime.now().isoformat()
    }

async def execute_scheduled_task_from_event(user_id: int, task_name: str, event_info: str):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ò–ò
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        event_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ò–ò (—Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    if task_name not in _scheduled_tasks:
        raise ValueError(f"–ó–∞–¥–∞—á–∞ '{task_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    try:
        # –ò–ò –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–∞—Ä—Å–∏–º –µ–≥–æ
        delay_seconds = int(event_info)
        
        # –°–æ–∑–¥–∞–µ–º user_data —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        user_data = {
            "delay_seconds": delay_seconds,
            "scheduled_at": datetime.now().isoformat()
        }
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Ñ–æ–Ω–µ
        result = await schedule_task_for_later(task_name, delay_seconds, user_id, user_data)
        
        return result
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ event_info '{event_info}': {e}")
        # Fallback - –ø–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å
        user_data = {
            "delay_seconds": 3600,
            "scheduled_at": datetime.now().isoformat()
        }
        return await schedule_task_for_later(task_name, 3600, user_id, user_data)


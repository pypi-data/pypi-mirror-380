import asyncio
import json
import logging
from datetime import datetime
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    FSInputFile,
)
from aiogram.utils.media_group import MediaGroupBuilder

from pathlib import Path
from ..core.decorators import execute_event_handler, execute_scheduled_task

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
def get_global_var(var_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –º–æ–¥—É–ª—è bot_utils"""
    import sys
    current_module = sys.modules[__name__]
    return getattr(current_module, var_name, None)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥
utils_router = Router()

def setup_utils_handlers(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Ç–∏–ª–∏—Ç"""
    dp.include_router(utils_router)

def parse_ai_response(ai_response: str) -> tuple[str, dict]:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –∫–æ–Ω—Ü–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
    try:
        # –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è JSON —Å "—ç—Ç–∞–ø"
        last_etap_pos = ai_response.rfind('"—ç—Ç–∞–ø"')
        if last_etap_pos == -1:
            logger.debug("JSON –±–µ–∑ –∫–ª—é—á–∞ '—ç—Ç–∞–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ai_response, {}
        
        # –ò—â–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –ø–µ—Ä–µ–¥ "—ç—Ç–∞–ø"
        json_start = -1
        for i in range(last_etap_pos, -1, -1):
            if ai_response[i] == '{':
                json_start = i
                break
        
        if json_start == -1:
            logger.debug("–û—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –ø–µ—Ä–µ–¥ '—ç—Ç–∞–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ai_response, {}
        
        # –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
        brace_count = 0
        json_end = -1
        
        for i in range(json_start, len(ai_response)):
            char = ai_response[i]
            if char == '{':
                brace_count += 1
            elif char == '}':
                brace_count -= 1
                if brace_count == 0:
                    json_end = i
                    break
        
        if json_end == -1:
            logger.debug("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ai_response, {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        json_str = ai_response[json_start:json_end + 1]
        response_text = ai_response[:json_start].strip()
        
        # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ response_text –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –ë–ï–ó JSON
        if not response_text:
            logger.debug("–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ JSON —á–∞—Å—Ç–∏")
            # –ë–µ—Ä–µ–º –≤—Å–µ –∫—Ä–æ–º–µ JSON —á–∞—Å—Ç–∏
            remaining_text = ai_response[json_end + 1:].strip()
            if remaining_text:
                response_text = remaining_text
            else:
                # –ï—Å–ª–∏ –∏ –ø–æ—Å–ª–µ JSON –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –æ—Ç–≤–µ—Ç –±—ã–ª —Ç–æ–ª—å–∫–æ JSON
                response_text = "–û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π."
                logger.warning("–û—Ç–≤–µ—Ç –ò–ò —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
        
        try:
            metadata = json.loads(json_str)
            logger.debug(f"JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {metadata}")
            return response_text, metadata
        except json.JSONDecodeError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.debug(f"JSON —Å—Ç—Ä–æ–∫–∞: {json_str}")
            return parse_ai_response_method2(ai_response)
            
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –ò–ò: {e}")
        return parse_ai_response_method2(ai_response)

def parse_ai_response_method2(ai_response: str) -> tuple[str, dict]:
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON - –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ—Å—Ç–∞–º)"""
    try:
        logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
        
        lines = ai_response.strip().split('\n')
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "—ç—Ç–∞–ø"
        etap_line = -1
        for i, line in enumerate(lines):
            if '"—ç—Ç–∞–ø"' in line:
                etap_line = i
                break
        
        if etap_line == -1:
            return ai_response, {}
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON (—Å—Ç—Ä–æ–∫—É —Å { –ø–µ—Ä–µ–¥ —ç—Ç–∞–ø)
        json_start_line = -1
        for i in range(etap_line, -1, -1):
            if lines[i].strip().startswith('{'):
                json_start_line = i
                break
        
        if json_start_line == -1:
            return ai_response, {}
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü JSON (–±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏)
        brace_count = 0
        json_end_line = -1
        
        for i in range(json_start_line, len(lines)):
            line = lines[i]
            for char in line:
                if char == '{':
                    brace_count += 1
                elif char == '}':
                    brace_count -= 1
                    if brace_count == 0:
                        json_end_line = i
                        break
            if json_end_line != -1:
                break
        
        if json_end_line == -1:
            return ai_response, {}
        
        # –°–æ–±–∏—Ä–∞–µ–º JSON
        json_lines = lines[json_start_line:json_end_line + 1]
        json_str = '\n'.join(json_lines)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_lines = lines[:json_start_line]
        response_text = '\n'.join(response_lines).strip()
        
        try:
            metadata = json.loads(json_str)
            logger.debug(f"JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {metadata}")
            return response_text, metadata
        except json.JSONDecodeError as e:
            logger.warning(f"–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: –æ—à–∏–±–∫–∞ JSON: {e}")
            return ai_response, {}
            
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")
        return ai_response, {}

async def process_events(session_id: str, events: list, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
    supabase_client = get_global_var('supabase_client')
    
    for event in events:
        try:
            event_type = event.get('—Ç–∏–ø', '')
            event_info = event.get('–∏–Ω—Ñ–æ', '')
            
            if not event_type:
                logger.warning(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –±–µ–∑ —Ç–∏–ø–∞: {event}")
                continue
            
            logger.info(f"\nüîî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è:")
            logger.info(f"   üìù –¢–∏–ø: {event_type}")
            logger.info(f"   üìÑ –î–∞–Ω–Ω—ã–µ: {event_info}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await supabase_client.add_session_event(session_id, event_type, event_info)
            logger.info(f"   ‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
            
            # –í—ã–∑—ã–≤–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∑–∞–¥–∞—á–∏
            should_notify = False
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                try:
                    logger.info(f"   üéØ –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è '{event_type}'")
                    result = await execute_event_handler(event_type, user_id, event_info)
                    logger.info(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤–µ—Ä–Ω—É–ª: {result}")
                    
                    should_notify = result.get('notify', False)
                        
                except ValueError:
                    # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                    logger.info(f"   ‚è∞ –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É '{event_type}'")
                    result = await execute_scheduled_task(event_type, user_id, event_info)
                    logger.info(f"   ‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")
                    
                    should_notify = result.get('notify', False)
                        
            except ValueError as e:
                logger.warning(f"   ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫/–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ/–∑–∞–¥–∞—á–µ: {e}")
                logger.exception("   –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ result.notify = True
            if should_notify:
                await notify_admins_about_event(user_id, event)
                logger.info(f"   ‚úÖ –ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã")
            else:
                logger.info(f"   üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è '{event_type}'")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event}: {e}")
            logger.exception("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

async def notify_admins_about_event(user_id: int, event: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ —Å–æ–±—ã—Ç–∏–∏ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    supabase_client = get_global_var('supabase_client')
    admin_manager = get_global_var('admin_manager')
    bot = get_global_var('bot')
    
    event_type = event.get('—Ç–∏–ø', '')
    event_info = event.get('–∏–Ω—Ñ–æ', '')
    
    if not event_type:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è username
    try:
        user_response = supabase_client.client.table('sales_users').select(
            'first_name', 'last_name', 'username'
        ).eq('telegram_id', user_id).execute()
        
        user_info = user_response.data[0] if user_response.data else {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ ID)
        name_parts = []
        if user_info.get('first_name'):
            name_parts.append(user_info['first_name'])
        if user_info.get('last_name'):
            name_parts.append(user_info['last_name'])
        
        user_name = " ".join(name_parts) if name_parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú ID
        if user_info.get('username'):
            user_display = f"{user_name} (@{user_info['username']})"
        else:
            user_display = user_name
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        user_display = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    emoji_map = {
        '—Ç–µ–ª–µ—Ñ–æ–Ω': 'üì±',
        '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': 'üí¨',
        '–ø–æ–∫—É–ø–∫–∞': 'üí∞',
        '–æ—Ç–∫–∞–∑': '‚ùå'
    }
    
    emoji = emoji_map.get(event_type, 'üîî')
    
    # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: ID –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    notification = f"""
{emoji} {event_type.upper()}!
üë§ {user_display}
üÜî ID: {user_id}
üìù {event_info}
üïê {datetime.now().strftime('%H:%M')}
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí¨ –ß–∞—Ç", callback_data=f"admin_chat_{user_id}"),
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"admin_history_{user_id}")
        ]
    ])
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
        active_admins = await admin_manager.get_active_admins()
        for admin_id in active_admins:
            try:
                await bot.send_message(admin_id, notification.strip(), reply_markup=keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
        
async def send_message(message: Message, text: str, files_list: list = [], directories_list: list = [], **kwargs):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π parse_mode"""
    config = get_global_var('config')
    
    logger.info(f"üì§ send_message –≤—ã–∑–≤–∞–Ω–∞:")
    logger.info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    logger.info(f"   üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"   üêõ Debug —Ä–µ–∂–∏–º: {config.DEBUG_MODE}")
    
    try:
        parse_mode = config.MESSAGE_PARSE_MODE if config.MESSAGE_PARSE_MODE != 'None' else None
        logger.info(f"   üîß Parse mode: {parse_mode}")
        
        # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º JSON
        if config.DEBUG_MODE:
            final_text = text
            logger.info(f"   üêõ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç (debug —Ä–µ–∂–∏–º)")
        else:
            # –£–±–∏—Ä–∞–µ–º JSON –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            final_text, json_metadata = parse_ai_response(text)
            logger.info(f"   ‚úÇÔ∏è –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ JSON: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –∏ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
            if json_metadata:
                logger.info(f"   üìä –ù–∞–π–¥–µ–Ω JSON: {json_metadata}")
                
                files_list = json_metadata.get('—Ñ–∞–π–ª—ã', [])
                directories_list = json_metadata.get('–∫–∞—Ç–∞–ª–æ–≥–∏', [])
                
                files_info = []
                if files_list:
                    files_str = "\n".join(f"‚Ä¢ {file}" for file in files_list)
                    files_info.append(f"\n\nüìé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:\n{files_str}")
                
                if directories_list:
                    dirs_str = "\n".join(f"‚Ä¢ {directory}" for directory in directories_list)
                    files_info.append(f"\n\nüìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏:\n{dirs_str}")
                
                if files_info:
                    final_text = final_text.strip() + "".join(files_info)
                    logger.info(f"   ‚ú® –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(files_list)} —Ñ–∞–π–ª–∞—Ö –∏ {len(directories_list)} –∫–∞—Ç–∞–ª–æ–≥–∞—Ö")
                    
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if not final_text or not final_text.strip():
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: final_text –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            logger.error(f"   –ò—Å—Ö–æ–¥–Ω—ã–π text: '{text[:200]}...'")
            final_text = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        logger.info(f"üì± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if files_list or directories_list:
            # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            def get_media_type(file_path: str) -> str:
                ext = Path(file_path).suffix.lower()
                if ext in {'.jpg', '.jpeg', '.png'}:
                    return 'photo'
                elif ext in {'.mp4'}:
                    return 'video'
                else:
                    return 'document'
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
            media_files = []  # –¥–ª—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
            document_files = []  # –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            
            # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            def process_file(file_path: Path, source: str = ""):
                if file_path.is_file():
                    media_type = get_media_type(str(file_path))
                    if media_type in ('photo', 'video'):
                        media_files.append((file_path, media_type))
                        logger.info(f"   üì∏ –î–æ–±–∞–≤–ª–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª{f' –∏–∑ {source}' if source else ''}: {file_path.name}")
                    else:
                        document_files.append(file_path)
                        logger.info(f"   üìÑ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç{f' –∏–∑ {source}' if source else ''}: {file_path.name}")
                else:
                    logger.warning(f"   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã–µ —Ñ–∞–π–ª—ã
            for file_name in files_list:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –±–æ—Ç–∞
                    config = get_global_var('config')
                    bot_id = config.BOT_ID if config else "unknown"
                    file_path = Path(f"bots/{bot_id}/files/{file_name}")
                    process_file(file_path)
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
            for dir_name in directories_list:
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ –±–æ—Ç–∞
                config = get_global_var('config')
                bot_id = config.BOT_ID if config else "unknown"
                dir_path = Path(f"bots/{bot_id}/{dir_name}")
                try:
                    if dir_path.is_dir():
                        for file_path in dir_path.iterdir():
                            try:
                                process_file(file_path, dir_path)
                            except Exception as e:
                                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    else:
                        logger.warning(f"   ‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {dir_path}")
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ {dir_path}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if media_files:
                # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç–æ–º
                media_group = MediaGroupBuilder(caption=final_text)
                for file_path, media_type in media_files:
                    if media_type == 'photo':
                        media_group.add_photo(media=FSInputFile(str(file_path)))
                    else:  # video
                        media_group.add_video(media=FSInputFile(str(file_path)))
                
                media = media_group.build()
                if media:
                    result = await message.answer_media_group(media=media)
                    logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å {len(media)} –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                result = await message.answer(final_text, parse_mode=parse_mode, **kwargs)
                logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if document_files:
                doc_group = MediaGroupBuilder()
                for file_path in document_files:
                    doc_group.add_document(media=FSInputFile(str(file_path)))
                
                docs = doc_group.build()
                if docs:
                    await message.answer_media_group(media=docs)
                    logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs)} —Ñ–∞–π–ª–æ–≤")
            
            return result
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                logger.warning("   ‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç")
                result = await message.answer(final_text, parse_mode=parse_mode, **kwargs)
                return result
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ send_message: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ send_message:")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            fallback_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            result = await message.answer(fallback_text)
            logger.info(f"‚úÖ –ó–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return result
        except Exception as e2:
            logger.error(f"‚ùå –î–∞–∂–µ –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å: {e2}")
            raise
        
async def cleanup_expired_conversations():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    conversation_manager = get_global_var('conversation_manager')
    
    while True:
        try:
            await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await conversation_manager.cleanup_expired_conversations()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")

# üÜï –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

async def get_welcome_file_path() -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –∏–∑ –ø–∞–ø–∫–∏ WELCOME_FILE_DIR –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.

    –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫: configs/<bot_id>/.env (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WELCOME_FILE_DIR)
    –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø—É—Å–∫–∞–ª–∫–æ–π –Ω–∞ configs/<bot_id>.
    
    Returns:
        str | None: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    config = get_global_var('config') 
    try:
        folder_value = config.WELCOME_FILE_DIR
        if not folder_value:
            return None

        folder = Path(folder_value)
        if not folder.exists():
            logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_value}")
            return None
        
        if not folder.is_dir():
            logger.info(f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {folder_value}")
            return None

        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π PDF —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for path in folder.iterdir():
            if path.is_file() and path.suffix.lower() == '.pdf':
                return str(path)
        
        logger.info(f"PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {folder_value}")
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None

async def get_welcome_msg_path() -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É welcome_file_msg.txt –∏–∑ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è PDF —Ñ–∞–π–ª.
    
    Returns:
        str | None: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        pdf_path = await get_welcome_file_path()
        if not pdf_path:
            return None
            
        msg_path = str(Path(pdf_path).parent / 'welcome_file_msg.txt')
        if not Path(msg_path).is_file():
            logger.info(f"–§–∞–π–ª –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {msg_path}")
            return None
            
        return msg_path
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return None

async def send_welcome_file(message: Message) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é –∏–∑ —Ñ–∞–π–ª–∞ welcome_file_msg.txt.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å—å.
    
    Returns:
         str: —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏
    """
    try:
        config = get_global_var('config')

        file_path = await get_welcome_file_path()
        if not file_path:
            return ""

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–¥–ø–∏—Å—å—é –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ
        caption = ""
        msg_path = await get_welcome_msg_path()
        if msg_path:
            try:
                with open(msg_path, 'r', encoding='utf-8') as f:
                    caption = f.read().strip()
                    logger.info(f"–ü–æ–¥–ø–∏—Å—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {msg_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å–∏ {msg_path}: {e}")

        parse_mode = config.MESSAGE_PARSE_MODE
        document = FSInputFile(file_path)
        
        await message.answer_document(document=document, caption=caption, parse_mode=parse_mode)
    
        logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
        return caption
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return ""

# –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã

@utils_router.message(Command("help"))
async def help_handler(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞"""
    admin_manager = get_global_var('admin_manager')
    prompt_loader = get_global_var('prompt_loader')
    
    try:
        # –†–∞–∑–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if admin_manager.is_admin(message.from_user.id):
            if admin_manager.is_in_admin_mode(message.from_user.id):
                help_text = """
üëë **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/—Å—Ç–∞—Ç` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –∏ —Å–æ–±—ã—Ç–∏–π
‚Ä¢ `/–∏—Å—Ç–æ—Ä–∏—è <user_id>` - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/—á–∞—Ç <user_id>` - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
‚Ä¢ `/—á–∞—Ç—ã` - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
‚Ä¢ `/—Å—Ç–æ–ø` - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
‚Ä¢ `/–∞–¥–º–∏–Ω` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∞–¥–º–∏–Ω—É –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è
‚Ä¢ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –æ—Ç –±–æ—Ç–∞
‚Ä¢ –î–∏–∞–ª–æ–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
"""
                await message.answer(help_text, parse_mode='Markdown')
                return
        
        # –û–±—ã—á–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        help_text = await prompt_loader.load_help_message()
        await send_message(message, help_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–∫–∏: {e}")
        # Fallback —Å–ø—Ä–∞–≤–∫–∞
        await send_message(message, "ü§ñ –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞.")

@utils_router.message(Command("status"))
async def status_handler(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    openai_client = get_global_var('openai_client')
    prompt_loader = get_global_var('prompt_loader')
    admin_manager = get_global_var('admin_manager')
    config = get_global_var('config')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI
        openai_status = await openai_client.check_api_health()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç—ã
        prompts_status = await prompt_loader.validate_prompts()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if admin_manager.is_admin(message.from_user.id):
            admin_stats = admin_manager.get_stats()
            
            status_message = f"""
üîß **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

OpenAI API: {'‚úÖ' if openai_status else '‚ùå'}
–ü—Ä–æ–º–ø—Ç—ã: {'‚úÖ ' + str(sum(prompts_status.values())) + '/' + str(len(prompts_status)) + ' –∑–∞–≥—Ä—É–∂–µ–Ω–æ' if any(prompts_status.values()) else '‚ùå'}
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ)

üëë **–ê–¥–º–∏–Ω—ã:** {admin_stats['active_admins']}/{admin_stats['total_admins']} –∞–∫—Ç–∏–≤–Ω—ã
üêõ **–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:** {'–í–∫–ª—é—á–µ–Ω' if config.DEBUG_MODE else '–í—ã–∫–ª—é—á–µ–Ω'}

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
            """
        else:
            status_message = f"""
üîß **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

OpenAI API: {'‚úÖ' if openai_status else '‚ùå'}
–ü—Ä–æ–º–ø—Ç—ã: {'‚úÖ ' + str(sum(prompts_status.values())) + '/' + str(len(prompts_status)) + ' –∑–∞–≥—Ä—É–∂–µ–Ω–æ' if any(prompts_status.values()) else '‚ùå'}
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ)

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
            """
        
        await send_message(message, status_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await send_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        
def parse_utm_from_start_param(start_param: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç UTM-–º–µ—Ç–∫–∏ –∏–∑ start –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ source-vk_campaign-summer2025
    
    Args:
        start_param: —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ 'source-vk_campaign-summer2025' –∏–ª–∏ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
        
    Returns:
        dict: {'utm_source': 'vk', 'utm_campaign': 'summer2025'}
        
    Examples:
        >>> parse_utm_from_start_param('source-vk_campaign-summer2025')
        {'utm_source': 'vk', 'utm_campaign': 'summer2025'}
        
        >>> parse_utm_from_start_param('https://t.me/bot?start=source-vk_campaign-summer2025')
        {'utm_source': 'vk', 'utm_campaign': 'summer2025'}
    """
    import re
    from urllib.parse import unquote
    
    utm_data = {}
    
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º start –ø–∞—Ä–∞–º–µ—Ç—Ä
        if 't.me/' in start_param or 'https://' in start_param:
            match = re.search(r'[?&]start=([^&]+)', start_param)
            if match:
                start_param = unquote(match.group(1))
            else:
                return {}
        
        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: source-vk_campaign-summer2025
        if '_' in start_param and '-' in start_param:
            parts = start_param.split('_')
            for part in parts:
                if '-' in part:
                    key, value = part.split('-', 1)
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º source –≤ utm_source
                    if key in ['source', 'medium', 'campaign', 'content', 'term']:
                        key = 'utm_' + key
                        utm_data[key] = value
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        
    return utm_data
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–æ–≤

import asyncio
import logging
from datetime import datetime, timezone
from pathlib import Path
import sys
import os
from dotenv import load_dotenv

def setup_bot_environment(bot_name: str = "growthmed-october-24"):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º BOT_ID"""
    root_dir = Path(__file__).parent
    config_dir = root_dir / 'configs' / bot_name
    
    print(f"üîç –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞ –≤: {config_dir}")
    
    if not config_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_dir}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:")
        configs_dir = root_dir / 'configs'
        if configs_dir.exists():
            for bot_dir in configs_dir.iterdir():
                if bot_dir.is_dir():
                    print(f"     - {bot_dir.name}")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
    prompts_dir = config_dir / 'prompts'
    if not prompts_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {prompts_dir}")
        return None
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: {prompts_dir}")
    
    # üÜï –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BOT_ID –ò–ó –ò–ú–ï–ù–ò –ë–û–¢–ê
    os.environ['BOT_ID'] = bot_name
    print(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_ID: {bot_name}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
    env_file = config_dir / '.env'
    if env_file.exists():
        print(f"üîß –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑: {env_file}")
        load_dotenv(env_file)
    else:
        print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")
        return None
    
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –º–µ–Ω—è–µ–º –µ—ë
    original_cwd = os.getcwd()
    os.chdir(str(config_dir))
    print(f"üìÅ –ò–∑–º–µ–Ω–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
    if str(root_dir) not in sys.path:
        sys.path.insert(0, str(root_dir))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–º–ø—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    local_prompts = Path('prompts')
    if local_prompts.exists():
        print(f"‚úÖ –ü—Ä–æ–º–ø—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {local_prompts.absolute()}")
    else:
        print(f"‚ùå –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {local_prompts.absolute()}")
        os.chdir(original_cwd)  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        return None
    
    return config_dir

async def check_timeouts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–æ–≤\n")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
    bot_name = "growthmed-october-24"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if len(sys.argv) > 1:
        bot_name = sys.argv[1]
    
    print(f"üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±–æ—Ç–∞: {bot_name}")
    print(f"ü§ñ Bot ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {bot_name}\n")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç BOT_ID)
    config_dir = setup_bot_environment(bot_name)
    if not config_dir:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –±–æ—Ç–∞")
        return
    
    print(f"üìÅ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    for item in Path('.').iterdir():
        if item.is_dir():
            print(f"   üìÅ {item.name}/")
        else:
            print(f"   üìÑ {item.name}")
    print()
    
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    try:
        print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print("   - –ò–º–ø–æ—Ä—Ç config...")
        from config import Config
        
        print("   - –ò–º–ø–æ—Ä—Ç supabase_client...")
        from supabase_client import SupabaseClient
        
        print("   - –ò–º–ø–æ—Ä—Ç conversation_manager...")
        from conversation_manager import ConversationManager
        
        print("   - –ò–º–ø–æ—Ä—Ç admin_manager...")
        from admin_manager import AdminManager
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        import traceback
        print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try:
        print("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = Config()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...")
        supabase_client = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await supabase_client.initialize()
        print(f"‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        print("üëë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
        admin_manager = AdminManager(config, supabase_client)
        conversation_manager = ConversationManager(supabase_client, admin_manager)
        print(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return
    
    print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   BOT_ID: {config.BOT_ID}")
    print(f"   ADMIN_SESSION_TIMEOUT_MINUTES: {config.ADMIN_SESSION_TIMEOUT_MINUTES}")
    print(f"   PROMT_FILES_DIR: {config.PROMT_FILES_DIR}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç-—Ñ–∞–π–ª–æ–≤: {len(config.PROMPT_FILES)}")
    print(f"   –ê–¥–º–∏–Ω–æ–≤: {len(config.ADMIN_TELEGRAM_IDS)}")
    print(f"   –°–µ–π—á–∞—Å UTC: {datetime.now(timezone.utc)}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    try:
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤...")
        conversations = await conversation_manager.get_active_conversations()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(conversations)} –¥–∏–∞–ª–æ–≥–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        return
    
    if not conversations:
        print("üí¨ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /—á–∞—Ç USER_ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        print(f"\nüß™ –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:")
        print(f"1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python {bot_name}.py")
        print(f"2. –ö–∞–∫ –∞–¥–º–∏–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: /—á–∞—Ç 123456789")
        print(f"3. –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ: /—á–∞—Ç—ã")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(conversations)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:")
    print()
    
    problems_found = 0
    
    for i, conv in enumerate(conversations, 1):
        print(f"{i}. –î–∏–∞–ª–æ–≥ ID: {conv['id']}")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conv['user_id']}")
        print(f"   üëë –ê–¥–º–∏–Ω: {conv['admin_id']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞
        started_at_str = conv['started_at']
        auto_end_str = conv['auto_end_at']
        
        print(f"   üïê started_at (—Å—ã—Ä–æ–µ): {started_at_str}")
        print(f"   ‚è∞ auto_end_at (—Å—ã—Ä–æ–µ): {auto_end_str}")
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π timezone
            if started_at_str.endswith('Z'):
                start_time = datetime.fromisoformat(started_at_str.replace('Z', '+00:00'))
            elif '+' in started_at_str or started_at_str.count(':') >= 3:
                start_time = datetime.fromisoformat(started_at_str)
            else:
                naive_time = datetime.fromisoformat(started_at_str)
                start_time = naive_time.replace(tzinfo=timezone.utc)
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π timezone
            if auto_end_str.endswith('Z'):
                auto_end = datetime.fromisoformat(auto_end_str.replace('Z', '+00:00'))
            elif '+' in auto_end_str or auto_end_str.count(':') >= 3:
                auto_end = datetime.fromisoformat(auto_end_str)
            else:
                naive_time = datetime.fromisoformat(auto_end_str)
                auto_end = naive_time.replace(tzinfo=timezone.utc)
            
            print(f"   üìÖ start_time (parsed): {start_time}")
            print(f"   ‚è∞ auto_end (parsed): {auto_end}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            planned_duration = auto_end - start_time
            planned_minutes = int(planned_duration.total_seconds() / 60)
            print(f"   üìè –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {planned_minutes} –º–∏–Ω—É—Ç")
            
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
            now_utc = datetime.now(timezone.utc)
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫ UTC –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            if start_time.tzinfo != timezone.utc:
                start_time_utc = start_time.astimezone(timezone.utc)
            else:
                start_time_utc = start_time
                
            if auto_end.tzinfo != timezone.utc:
                auto_end_utc = auto_end.astimezone(timezone.utc)
            else:
                auto_end_utc = auto_end
            
            # –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏
            elapsed = now_utc - start_time_utc
            elapsed_minutes = max(0, int(elapsed.total_seconds() / 60))
            print(f"   ‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes} –º–∏–Ω—É—Ç")
            
            # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            remaining = auto_end_utc - now_utc
            remaining_minutes = max(0, int(remaining.total_seconds() / 60))
            print(f"   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_minutes} –º–∏–Ω—É—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            expected_timeout = config.ADMIN_SESSION_TIMEOUT_MINUTES
            if abs(planned_minutes - expected_timeout) <= 2:  # –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã
                print(f"   ‚úÖ –¢–∞–π–º–∞—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–æ–∂–∏–¥–∞–ª—Å—è {expected_timeout} –º–∏–Ω)")
            else:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª—Å—è {expected_timeout} –º–∏–Ω, –ø–æ–ª—É—á–∏–ª–∏ {planned_minutes} –º–∏–Ω")
                problems_found += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
            total_check = elapsed_minutes + remaining_minutes
            print(f"   üî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞: {elapsed_minutes} + {remaining_minutes} = {total_check} –º–∏–Ω")
            
            if abs(total_check - planned_minutes) > 2:
                print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: —Å—É–º–º–∞ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è! –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å timezone")
                problems_found += 1
            else:
                print(f"   ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Å—Ö–æ–¥–∏—Ç—Å—è")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            problems_found += 1
            import traceback
            print(f"   –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ format_active_conversations:")
    try:
        formatted_text = conversation_manager.format_active_conversations(conversations)
        print(formatted_text)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        problems_found += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n{'='*50}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if problems_found == 0:
        print("‚úÖ –í—Å–µ —Ç–∞–π–º–∞—É—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    else:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {problems_found} –ø—Ä–æ–±–ª–µ–º")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ fix_existing_timeouts.py –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print(f"{'='*50}")

if __name__ == "__main__":
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
    logging.basicConfig(level=logging.ERROR, format='%(levelname)s - %(message)s')
    
    print("üîç –£—Ç–∏–ª–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤")
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python check_timeouts.py [bot_name]")
    print("  python check_timeouts.py growthmed-october-24")
    print()
    
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help', 'help']:
        exit(0)
    
    try:
        asyncio.run(check_timeouts())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
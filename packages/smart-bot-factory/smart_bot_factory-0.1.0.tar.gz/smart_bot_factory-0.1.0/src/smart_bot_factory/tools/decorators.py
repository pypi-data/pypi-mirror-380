"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ AI (Function Calling)
"""

import json
import logging
from typing import Callable, Any, Dict, List, Optional
from functools import wraps

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ AI
_ai_tools: Dict[str, Dict[str, Any]] = {}

def ai_tool(name: str, description: str, parameters_schema: Dict[str, Any]):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ AI (Function Calling)
    
    Args:
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        description: –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è AI
        parameters_schema: JSON Schema –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    Example:
        @ai_tool(
            name="book_appointment",
            description="–ó–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É",
            parameters_schema={
                "type": "object",
                "properties": {
                    "user_id": {"type": "integer", "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"},
                    "service": {"type": "string", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏"},
                    "datetime": {"type": "string", "description": "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"}
                },
                "required": ["user_id", "service", "datetime"]
            }
        )
        async def book_appointment(user_id: int, service: str, datetime: str):
            # –õ–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
            return {"status": "success", "appointment_id": "123"}
    """
    def decorator(func: Callable) -> Callable:
        _ai_tools[name] = {
            'handler': func,
            'description': description,
            'parameters_schema': parameters_schema,
            'name': func.__name__
        }
        
        logger.info(f"üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{name}': {func.__name__}")
        
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                logger.info(f"ü§ñ AI –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{name}'")
                result = await func(*args, **kwargs)
                logger.info(f"‚úÖ AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{name}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ '{name}': {e}")
                raise
        
        return wrapper
    return decorator

def get_ai_tools() -> Dict[str, Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
    return _ai_tools.copy()

def get_openai_tools_schema() -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ö–µ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI Function Calling
    """
    tools = []
    for tool_name, tool_info in _ai_tools.items():
        tools.append({
            "type": "function",
            "function": {
                "name": tool_name,
                "description": tool_info['description'],
                "parameters": tool_info['parameters_schema']
            }
        })
    
    return tools

def get_tools_for_prompt() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç
    """
    if not _ai_tools:
        return ""
    
    prompt_parts = ["–î–û–°–¢–£–ü–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ AI:"]
    
    for tool_name, tool_info in _ai_tools.items():
        prompt_parts.append(f"- {tool_name}: {tool_info['description']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        required_params = tool_info['parameters_schema'].get('required', [])
        if required_params:
            prompt_parts.append(f"  –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(required_params)}")
    
    return "\n".join(prompt_parts)

async def execute_ai_tool(tool_name: str, arguments: Dict[str, Any]) -> Any:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
    if tool_name not in _ai_tools:
        raise ValueError(f"AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç '{tool_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    tool_info = _ai_tools[tool_name]
    handler = tool_info['handler']
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ —Å—Ö–µ–º–µ
    _validate_tool_arguments(tool_name, arguments, tool_info['parameters_schema'])
    
    return await handler(**arguments)

def _validate_tool_arguments(tool_name: str, arguments: Dict[str, Any], schema: Dict[str, Any]):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ JSON Schema"""
    required_params = schema.get('required', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    for param in required_params:
        if param not in arguments:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä '{param}' –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '{tool_name}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    properties = schema.get('properties', {})
    for param_name, param_value in arguments.items():
        if param_name in properties:
            param_schema = properties[param_name]
            expected_type = param_schema.get('type')
            
            if expected_type == 'integer' and not isinstance(param_value, int):
                raise ValueError(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å integer –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '{tool_name}'")
            elif expected_type == 'string' and not isinstance(param_value, str):
                raise ValueError(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å string –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '{tool_name}'")
            elif expected_type == 'boolean' and not isinstance(param_value, bool):
                raise ValueError(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ '{tool_name}'")

"""
–°—Ç—Ä–æ–∏—Ç–µ–ª—å –±–æ—Ç–æ–≤ –¥–ª—è Smart Bot Factory
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
from typing import Optional, Dict, Any, List

from ..integrations import (
    Config, OpenAIClient, SupabaseClient, 
    ConversationManager, AdminManager, PromptLoader
)
from ..events.decorators import get_handlers_for_prompt

logger = logging.getLogger(__name__)

class BotBuilder:
    """
    –°—Ç—Ä–æ–∏—Ç–µ–ª—å –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    """
    
    def __init__(self, bot_id: str, config_dir: Optional[Path] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –±–æ—Ç–∞
        
        Args:
            bot_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–æ—Ç–∞
            config_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é configs/bot_id)
        """
        self.bot_id = bot_id
        self.config_dir = config_dir or Path("bots") / bot_id
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
        self.config: Optional[Config] = None
        self.openai_client: Optional[OpenAIClient] = None
        self.supabase_client: Optional[SupabaseClient] = None
        self.conversation_manager: Optional[ConversationManager] = None
        self.admin_manager: Optional[AdminManager] = None
        self.prompt_loader: Optional[PromptLoader] = None
        
        # –§–ª–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._initialized = False
        
        logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω BotBuilder –¥–ª—è –±–æ—Ç–∞: {bot_id}")
    
    async def build(self) -> 'BotBuilder':
        """
        –°—Ç—Ä–æ–∏—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
        
        Returns:
            BotBuilder: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç self –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
        """
        if self._initialized:
            logger.warning(f"‚ö†Ô∏è –ë–æ—Ç {self.bot_id} —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return self
        
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –±–æ—Ç–∞ {self.bot_id}")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await self._init_config()
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
            await self._init_clients()
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            await self._init_managers()
            
            # 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            await self._update_prompts_with_tools()
            
            self._initialized = True
            logger.info(f"‚úÖ –ë–æ—Ç {self.bot_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            return self
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –±–æ—Ç–∞ {self.bot_id}: {e}")
            raise
    
    async def _init_config(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info(f"‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {self.bot_id}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BOT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['BOT_ID'] = self.bot_id
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        env_file = self.config_dir / ".env"
        if env_file.exists():
            from dotenv import load_dotenv
            load_dotenv(env_file)
            logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º –≤ —Ñ–∞–π–ª–µ –∑–∞–ø—É—Å–∫–∞–ª–∫–∏
        if "PROMT_FILES_DIR" in os.environ:
            logger.info(f"üìÅ –ü—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {os.environ['PROMT_FILES_DIR']}")
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ .env
            # –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ .env –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø—É—Ç–∏ bots/bot-id/
            prompts_subdir = os.environ.get("PROMT_FILES_DIR", "prompts")
            logger.info(f"üîç PROMT_FILES_DIR –∏–∑ .env: {prompts_subdir}")
            logger.info(f"üîç config_dir: {self.config_dir}")
            
            prompts_dir = self.config_dir / prompts_subdir
            logger.info(f"üîç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º: {prompts_dir}")
            logger.info(f"üîç –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞: {prompts_dir.exists()}")
            
            # –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –î–û —Å–æ–∑–¥–∞–Ω–∏—è Config
            if prompts_dir.exists():
                os.environ["PROMT_FILES_DIR"] = str(prompts_dir)
                logger.info(f"üìÅ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç–∞–º: {prompts_dir}")
            else:
                logger.error(f"‚ùå –ü–∞–ø–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {prompts_dir}")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç, —á—Ç–æ–±—ã Config –Ω–µ —É–ø–∞–ª
                os.environ["PROMT_FILES_DIR"] = str(prompts_dir)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info(f"üîç PROMT_FILES_DIR –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º Config: {os.environ.get('PROMT_FILES_DIR')}")
        self.config = Config()
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def _init_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        logger.info(f"üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è {self.bot_id}")
        
        # OpenAI –∫–ª–∏–µ–Ω—Ç
        self.openai_client = OpenAIClient(
            api_key=self.config.OPENAI_API_KEY,
            model=self.config.OPENAI_MODEL,
            max_tokens=self.config.OPENAI_MAX_TOKENS,
            temperature=self.config.OPENAI_TEMPERATURE
        )
        logger.info(f"‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # Supabase –∫–ª–∏–µ–Ω—Ç
        self.supabase_client = SupabaseClient(
            url=self.config.SUPABASE_URL,
            key=self.config.SUPABASE_KEY,
            bot_id=self.bot_id
        )
        await self.supabase_client.initialize()
        logger.info(f"‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _init_managers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        logger.info(f"üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è {self.bot_id}")
        
        # Admin Manager
        self.admin_manager = AdminManager(self.config, self.supabase_client)
        await self.admin_manager.sync_admins_from_config()
        logger.info(f"‚úÖ Admin Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # Conversation Manager
        self.conversation_manager = ConversationManager(self.supabase_client, self.admin_manager)
        logger.info(f"‚úÖ Conversation Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # Prompt Loader
        self.prompt_loader = PromptLoader(
            prompts_dir=self.config.PROMT_FILES_DIR,
            prompt_files=self.config.PROMPT_FILES
        )
        await self.prompt_loader.validate_prompts()
        logger.info(f"‚úÖ Prompt Loader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _update_prompts_with_tools(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö —Å–æ–±—ã—Ç–∏–π
        """
        logger.info(f"üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        event_handlers_info = get_handlers_for_prompt()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if event_handlers_info:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers.py
            self._tools_prompt = event_handlers_info
            
            logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö")
        else:
            self._tools_prompt = ""
            logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    
    def get_tools_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö"""
        return getattr(self, '_tools_prompt', '')
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        return {
            "bot_id": self.bot_id,
            "initialized": self._initialized,
            "config_dir": str(self.config_dir),
            "components": {
                "config": self.config is not None,
                "openai_client": self.openai_client is not None,
                "supabase_client": self.supabase_client is not None,
                "conversation_manager": self.conversation_manager is not None,
                "admin_manager": self.admin_manager is not None,
                "prompt_loader": self.prompt_loader is not None
            },
            "tools": {
                "event_handlers": len(get_handlers_for_prompt().split('\n')) if get_handlers_for_prompt() else 0
            }
        }
    
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (–∞–Ω–∞–ª–æ–≥ main.py)
        """
        if not self._initialized:
            raise RuntimeError(f"–ë–æ—Ç {self.bot_id} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ build() —Å–Ω–∞—á–∞–ª–∞")
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ {self.bot_id}")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            from aiogram import Bot, Dispatcher
            from aiogram.fsm.storage.memory import MemoryStorage
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            bot = Bot(token=self.config.TELEGRAM_BOT_TOKEN)
            storage = MemoryStorage()
            dp = Dispatcher(storage=storage)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.supabase_client.initialize()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self.admin_manager.sync_admins_from_config()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–æ–≤
            prompts_status = await self.prompt_loader.validate_prompts()
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–ø—Ç–æ–≤: {prompts_status}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –î–û –∏–º–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            import sys
            import importlib
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –º–æ–¥—É–ª—è—Ö handlers –∏ admin_logic
            try:
                handlers_module = importlib.import_module('handlers')
                handlers_module.config = self.config
                handlers_module.bot = bot
                handlers_module.dp = dp
                handlers_module.supabase_client = self.supabase_client
                handlers_module.openai_client = self.openai_client
                handlers_module.prompt_loader = self.prompt_loader
                handlers_module.admin_manager = self.admin_manager
                handlers_module.conversation_manager = self.conversation_manager
                logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ handlers")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ handlers: {e}")
            
            try:
                admin_logic_module = importlib.import_module('admin_logic')
                admin_logic_module.config = self.config
                admin_logic_module.bot = bot
                admin_logic_module.dp = dp
                admin_logic_module.supabase_client = self.supabase_client
                admin_logic_module.openai_client = self.openai_client
                admin_logic_module.prompt_loader = self.prompt_loader
                admin_logic_module.admin_manager = self.admin_manager
                admin_logic_module.conversation_manager = self.conversation_manager
                logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ admin_logic")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ admin_logic: {e}")
            
            # –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ bot_utils
            try:
                bot_utils_module = importlib.import_module('bot_utils')
                bot_utils_module.config = self.config
                bot_utils_module.bot = bot
                bot_utils_module.dp = dp
                bot_utils_module.supabase_client = self.supabase_client
                bot_utils_module.openai_client = self.openai_client
                bot_utils_module.prompt_loader = self.prompt_loader
                bot_utils_module.admin_manager = self.admin_manager
                bot_utils_module.conversation_manager = self.conversation_manager
                logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ bot_utils")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ bot_utils: {e}")
            
            # –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ debug_routing
            try:
                debug_routing_module = importlib.import_module('debug_routing')
                debug_routing_module.config = self.config
                debug_routing_module.bot = bot
                debug_routing_module.dp = dp
                debug_routing_module.supabase_client = self.supabase_client
                debug_routing_module.openai_client = self.openai_client
                debug_routing_module.prompt_loader = self.prompt_loader
                debug_routing_module.admin_manager = self.admin_manager
                debug_routing_module.conversation_manager = self.conversation_manager
                logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ debug_routing")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ debug_routing: {e}")
            
            # –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            from ..integrations import setup_handlers, setup_admin_handlers, setup_utils_handlers
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            setup_utils_handlers(dp)    # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/status, /help)
            setup_admin_handlers(dp)    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (/–∞–¥–º–∏–Ω, /—Å—Ç–∞—Ç, /—á–∞—Ç)
            setup_handlers(dp)          # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
            logger.info(f"‚úÖ –ë–æ—Ç {self.bot_id} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info(f"   üìä –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: bot_id = {self.config.BOT_ID}")
            logger.info(f"   üëë –ê–¥–º–∏–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(self.config.ADMIN_TELEGRAM_IDS)}")
            logger.info(f"   üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(self.config.PROMPT_FILES)}")
            
            # –ß–µ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            print(f"\nüöÄ –ë–û–¢ {self.bot_id.upper()} –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù!")
            print(f"üì± Telegram Bot ID: {self.config.BOT_ID}")
            print(f"üëë –ê–¥–º–∏–Ω–æ–≤: {len(self.config.ADMIN_TELEGRAM_IDS)}")
            print(f"üìù –ü—Ä–æ–º–ø—Ç–æ–≤: {len(self.config.PROMPT_FILES)}")
            print(f"üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            print(f"‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")
            
            # –ó–∞–ø—É—Å–∫ polling (–±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
            await dp.start_polling(bot)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {self.bot_id}: {e}")
            import traceback
            logger.error(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            raise
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if 'bot' in locals():
                await bot.session.close()

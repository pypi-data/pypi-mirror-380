#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Sales Bot v2.0 (—Å –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π)
–ó–∞–ø—É—Å–∫: 
  python setup_check.py                           # –¥–ª—è growthmed-october-24 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  python setup_check.py growthmed-october-24      # —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞
  python setup_check.py –¥—Ä—É–≥–æ–π-–±–æ—Ç               # –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
"""

import asyncio
import logging
import sys
import os
from pathlib import Path
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def setup_bot_environment(bot_name: str = "growthmed-october-24"):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º BOT_ID"""
    root_dir = Path(__file__).parent
    config_dir = root_dir / 'configs' / bot_name
    
    if not config_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_dir}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:")
        configs_dir = root_dir / 'configs'
        if configs_dir.exists():
            for bot_dir in configs_dir.iterdir():
                if bot_dir.is_dir():
                    print(f"     - {bot_dir.name}")
        return None
    
    # üÜï –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BOT_ID –ò–ó –ò–ú–ï–ù–ò –ë–û–¢–ê
    os.environ['BOT_ID'] = bot_name
    print(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_ID: {bot_name}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
    env_file = config_dir / '.env'
    if env_file.exists():
        print(f"üîß –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑: {env_file}")
        load_dotenv(env_file)
    else:
        print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")
        return None
    
    # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.chdir(str(config_dir))
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config_dir}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
    if str(root_dir) not in sys.path:
        sys.path.insert(0, str(root_dir))
    
    return config_dir


async def check_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    try:
        from config import Config
        config = Config()
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìã –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        
        summary = config.get_summary()
        for key, value in summary.items():
            print(f"   ‚Ä¢ {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"\nüëë –ê–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   ‚Ä¢ –ê–¥–º–∏–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(config.ADMIN_TELEGRAM_IDS)}")
        if config.ADMIN_TELEGRAM_IDS:
            print(f"   ‚Ä¢ ID –∞–¥–º–∏–Ω–æ–≤: {config.ADMIN_TELEGRAM_IDS}")
        print(f"   ‚Ä¢ –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–π: {config.ADMIN_SESSION_TIMEOUT_MINUTES} –º–∏–Ω")
        print(f"   ‚Ä¢ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í–∫–ª—é—á–µ–Ω' if config.DEBUG_MODE else '–í—ã–∫–ª—é—á–µ–Ω'}")
        
        return config
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

async def check_supabase(config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –∏ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        from supabase_client import SupabaseClient
        
        client = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await client.initialize()
        
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        response = client.client.table('sales_users').select('id').limit(1).execute()
        print("‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
        admin_tables = [
            'sales_admins',
            'admin_user_conversations', 
            'session_events'
        ]
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü:")
        for table in admin_tables:
            try:
                response = client.client.table(table).select('*').limit(1).execute()
                print(f"   ‚úÖ {table}")
            except Exception as e:
                print(f"   ‚ùå {table}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        try:
            response = client.client.table('sales_chat_sessions').select(
                'current_stage', 'lead_quality_score'
            ).limit(1).execute()
            print("   ‚úÖ sales_chat_sessions: current_stage, lead_quality_score")
        except Exception as e:
            print(f"   ‚ùå sales_chat_sessions –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {e}")
        
        try:
            response = client.client.table('sales_messages').select('ai_metadata').limit(1).execute()
            print("   ‚úÖ sales_messages: ai_metadata")
        except Exception as e:
            print(f"   ‚ùå sales_messages.ai_metadata: {e}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Supabase: {e}")
        return False

async def check_openai(config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API"""
    try:
        from openai_client import OpenAIClient
        
        client = OpenAIClient(
            config.OPENAI_API_KEY,
            config.OPENAI_MODEL,
            config.OPENAI_MAX_TOKENS,
            config.OPENAI_TEMPERATURE
        )
        
        health = await client.check_api_health()
        
        if health:
            print("‚úÖ OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            models = await client.get_available_models()
            if config.OPENAI_MODEL in models:
                print(f"‚úÖ –ú–æ–¥–µ–ª—å {config.OPENAI_MODEL} –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {config.OPENAI_MODEL} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {models[:5]}...")
        
        return health
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return False

async def check_prompts(config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç—ã —Å –Ω–æ–≤—ã–º–∏ JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    try:
        from prompt_loader import PromptLoader
        
        loader = PromptLoader(
            prompts_dir=config.PROMT_FILES_DIR,
            prompt_files=config.PROMPT_FILES
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
        validation = await loader.validate_prompts()
        
        print(f"üìù –°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–ø—Ç–æ–≤:")
        for filename, status in validation.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"   {status_icon} {filename}")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if any(validation.values()):
            system_prompt = await loader.load_system_prompt()
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            if "JSON –ú–ï–¢–ê–î–ê–ù–ù–´–ú" in system_prompt:
                print("‚úÖ JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
            else:
                print("‚ö†Ô∏è JSON –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ")
            
            if '"—ç—Ç–∞–ø":' in system_prompt:
                print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã JSON –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–º–ø—Ç–µ")
            else:
                print("‚ö†Ô∏è –ü—Ä–∏–º–µ—Ä—ã JSON –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–º–ø—Ç–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = await loader.load_welcome_message()
            print(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ({len(welcome_message)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            help_message = await loader.load_help_message()
            print(f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ({len(help_message)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        return False

async def check_admin_system(config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É"""
    try:
        print("üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        if not config.ADMIN_TELEGRAM_IDS:
            print("‚ö†Ô∏è –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (ADMIN_TELEGRAM_IDS –ø—É—Å—Ç)")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AdminManager
        from admin_manager import AdminManager
        from supabase_client import SupabaseClient
        
        supabase_client = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await supabase_client.initialize()
        
        admin_manager = AdminManager(config, supabase_client)
        print(f"‚úÖ AdminManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({len(admin_manager.admin_ids)} –∞–¥–º–∏–Ω–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ConversationManager
        from conversation_manager import ConversationManager
        conversation_manager = ConversationManager(supabase_client, admin_manager)
        print("‚úÖ ConversationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AnalyticsManager
        from analytics_manager import AnalyticsManager
        analytics_manager = AnalyticsManager(supabase_client)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        funnel_stats = await analytics_manager.get_funnel_stats(1)
        print("‚úÖ AnalyticsManager —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

async def check_json_parsing():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON...")
        
        import json
        
        def parse_ai_response(ai_response: str) -> tuple[str, dict]:
            """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ quick_json_test.py"""
            try:
                # –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è JSON —Å "—ç—Ç–∞–ø"
                last_etap_pos = ai_response.rfind('"—ç—Ç–∞–ø"')
                if last_etap_pos == -1:
                    return ai_response, {}
                
                # –ò—â–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –ø–µ—Ä–µ–¥ "—ç—Ç–∞–ø"
                json_start = -1
                for i in range(last_etap_pos, -1, -1):
                    if ai_response[i] == '{':
                        json_start = i
                        break
                
                if json_start == -1:
                    return ai_response, {}
                
                # –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                brace_count = 0
                json_end = -1
                
                for i in range(json_start, len(ai_response)):
                    char = ai_response[i]
                    if char == '{':
                        brace_count += 1
                    elif char == '}':
                        brace_count -= 1
                        if brace_count == 0:
                            json_end = i
                            break
                
                if json_end == -1:
                    return ai_response, {}
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                json_str = ai_response[json_start:json_end + 1]
                response_text = ai_response[:json_start].strip()
                
                try:
                    metadata = json.loads(json_str)
                    return response_text, metadata
                except json.JSONDecodeError:
                    return ai_response, {}
                    
            except Exception:
                return ai_response, {}
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_response = '''–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

{
  "—ç—Ç–∞–ø": "contacts",
  "–∫–∞—á–µ—Å—Ç–≤–æ": 9,
  "—Å–æ–±—ã—Ç–∏—è": [
    {
      "—Ç–∏–ø": "—Ç–µ–ª–µ—Ñ–æ–Ω",
      "–∏–Ω—Ñ–æ": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ +79219603144"
    }
  ]
}'''
        
        response_text, metadata = parse_ai_response(test_response)
        
        if metadata:
            print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            print(f"   –≠—Ç–∞–ø: {metadata.get('—ç—Ç–∞–ø')}")
            print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {metadata.get('–∫–∞—á–µ—Å—Ç–≤–æ')}")
            print(f"   –°–æ–±—ã—Ç–∏—è: {len(metadata.get('—Å–æ–±—ã—Ç–∏—è', []))}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False

        
async def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SQL —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        root_dir = Path(__file__).parent
        sql_files = [
            "database_structure.sql",
            "admin_migration.sql"
        ]
        
        for sql_file in sql_files:
            sql_path = root_dir / sql_file
            if sql_path.exists():
                print(f"‚úÖ {sql_file} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå {sql_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("‚ÑπÔ∏è –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü –≤ –ë–î –∑–∞–ø—É—Å—Ç–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç—ã –≤ Supabase")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

async def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_file = Path(".env")
    if env_file.exists():
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dependencies = [
        ('aiogram', 'aiogram'),
        ('supabase', 'supabase'), 
        ('openai', 'openai'),
        ('python-dotenv', 'dotenv'),
        ('aiofiles', 'aiofiles')
    ]
    
    for dep_name, import_name in dependencies:
        try:
            if import_name == 'aiogram':
                import aiogram
                print(f"‚úÖ {dep_name} {aiogram.__version__}")
            elif import_name == 'openai':
                import openai
                print(f"‚úÖ {dep_name} {openai.version.VERSION}")
            else:
                __import__(import_name)
                print(f"‚úÖ {dep_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {dep_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    try:
        print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        from config import Config
        config = Config()
        
        if config.ADMIN_TELEGRAM_IDS:
            print(f"‚úÖ {len(config.ADMIN_TELEGRAM_IDS)} –∞–¥–º–∏–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è –ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
        await check_json_parsing()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
    bot_name = "growthmed-october-24"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if len(sys.argv) > 1:
        bot_name = sys.argv[1]
    
    print(f"üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Sales Bot v2.0: {bot_name}")
    print(f"ü§ñ Bot ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {bot_name}\n")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç BOT_ID)
    config_dir = setup_bot_environment(bot_name)
    if not config_dir:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    await check_environment()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = await check_config()
    if not config:
        print("\n‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    print()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database_structure()),
        ("Supabase", check_supabase(config)),
        ("OpenAI", check_openai(config)),
        ("–ü—Ä–æ–º–ø—Ç—ã", check_prompts(config)),
        ("–ê–¥–º–∏–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞", check_admin_system(config)),
        ("JSON –ø–∞—Ä—Å–∏–Ω–≥", check_json_parsing()),
        ("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", run_quick_test())
    ]
    
    results = {}
    for name, check_coro in checks:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {name}")
        results[name] = await check_coro
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n{'='*60}")
    print(f"üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¥–ª—è {bot_name}:")
    
    all_passed = True
    critical_failed = False
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    critical_checks = ["Supabase", "OpenAI", "–ü—Ä–æ–º–ø—Ç—ã"]
    
    for name, passed in results.items():
        if name in critical_checks:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if passed else "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê"
            if not passed:
                critical_failed = True
        else:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if passed else "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"
        
        print(f"   {name}: {status}")
        if not passed:
            all_passed = False
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(results.values())}/{len(results)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if critical_failed:
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        print("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    elif all_passed:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print(f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python {bot_name}.py")
        if config.ADMIN_TELEGRAM_IDS:
            print(f"   üëë –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: {config.ADMIN_TELEGRAM_IDS}")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.")
    
    if config and config.DEBUG_MODE:
        print("\nüêõ –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò –í–ö–õ–Æ–ß–ï–ù - JSON –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    print(f"{'='*60}")

if __name__ == "__main__":
    asyncio.run(main())
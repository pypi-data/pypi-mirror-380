# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–∏–∞–ª–æ–≥–æ–≤

import asyncio
import logging
from datetime import datetime, timezone
from pathlib import Path
import sys
import os
from dotenv import load_dotenv

def setup_bot_environment(bot_name: str = "growthmed-october-24"):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º BOT_ID"""
    root_dir = Path(__file__).parent
    config_dir = root_dir / 'configs' / bot_name
    
    if not config_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config_dir}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:")
        configs_dir = root_dir / 'configs'
        if configs_dir.exists():
            for bot_dir in configs_dir.iterdir():
                if bot_dir.is_dir():
                    print(f"     - {bot_dir.name}")
        return None
    
    # üÜï –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BOT_ID –ò–ó –ò–ú–ï–ù–ò –ë–û–¢–ê
    os.environ['BOT_ID'] = bot_name
    print(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_ID: {bot_name}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
    env_file = config_dir / '.env'
    if env_file.exists():
        print(f"üîß –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑: {env_file}")
        load_dotenv(env_file)
    else:
        print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")
        return None
    
    # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.chdir(str(config_dir))
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config_dir}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
    if str(root_dir) not in sys.path:
        sys.path.insert(0, str(root_dir))
    
    return config_dir

async def debug_timeout_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–∏–∞–ª–æ–≥–æ–≤\n")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
    bot_name = "growthmed-october-24"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if len(sys.argv) > 1:
        bot_name = sys.argv[1]
    
    print(f"üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞: {bot_name}")
    print(f"ü§ñ Bot ID –±—É–¥–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {bot_name}\n")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç BOT_ID)
    config_dir = setup_bot_environment(bot_name)
    if not config_dir:
        return
    
    # –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from config import Config
    from supabase_client import SupabaseClient
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   BOT_ID: {config.BOT_ID}")
    print(f"   ADMIN_SESSION_TIMEOUT_MINUTES: {config.ADMIN_SESSION_TIMEOUT_MINUTES}")
    print(f"   PROMT_FILES_DIR: {config.PROMT_FILES_DIR}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–ø—Ç-—Ñ–∞–π–ª–æ–≤: {len(config.PROMPT_FILES)}")
    print()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
    print(f"üïê –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã:")
    now_naive = datetime.now()
    now_utc = datetime.now(timezone.utc)
    print(f"   datetime.now() (–ª–æ–∫–∞–ª—å–Ω–æ–µ): {now_naive}")
    print(f"   datetime.now(timezone.utc): {now_utc}")
    print(f"   –†–∞–∑–Ω–∏—Ü–∞: {(now_naive.replace(tzinfo=timezone.utc) - now_utc).total_seconds() / 3600:.1f} —á–∞—Å–æ–≤")
    print()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –ë–î
    try:
        supabase_client = SupabaseClient(config.SUPABASE_URL, config.SUPABASE_KEY)
        await supabase_client.initialize()
        
        response = supabase_client.client.table('admin_user_conversations').select(
            'id', 'admin_id', 'user_id', 'started_at', 'auto_end_at'
        ).eq('status', 'active').execute()
        
        conversations = response.data
        
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –ë–î: {len(conversations)}")
        
        for i, conv in enumerate(conversations, 1):
            print(f"\n{i}. –î–∏–∞–ª–æ–≥ ID: {conv['id']}")
            print(f"   –ê–¥–º–∏–Ω: {conv['admin_id']}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conv['user_id']}")
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞
            started_at = conv['started_at']
            auto_end_at = conv['auto_end_at']
            
            print(f"   started_at (—Å—ã—Ä–æ–µ): {started_at}")
            print(f"   auto_end_at (—Å—ã—Ä–æ–µ): {auto_end_at}")
            
            try:
                # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –¥–µ–ª–∞–µ—Ç –∫–æ–¥
                if started_at.endswith('Z'):
                    start_time = datetime.fromisoformat(started_at.replace('Z', '+00:00'))
                elif '+' in started_at or started_at.count(':') >= 3:
                    start_time = datetime.fromisoformat(started_at)
                else:
                    naive_time = datetime.fromisoformat(started_at)
                    start_time = naive_time.replace(tzinfo=timezone.utc)
                
                if auto_end_at.endswith('Z'):
                    end_time = datetime.fromisoformat(auto_end_at.replace('Z', '+00:00'))
                elif '+' in auto_end_at or auto_end_at.count(':') >= 3:
                    end_time = datetime.fromisoformat(auto_end_at)
                else:
                    naive_time = datetime.fromisoformat(auto_end_at)
                    end_time = naive_time.replace(tzinfo=timezone.utc)
                
                print(f"   start_time (–ø–∞—Ä—Å–µ–¥): {start_time}")
                print(f"   end_time (–ø–∞—Ä—Å–µ–¥): {end_time}")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
                planned_duration = end_time - start_time
                planned_minutes = int(planned_duration.total_seconds() / 60)
                print(f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {planned_minutes} –º–∏–Ω—É—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–∏–≥—É
                expected = config.ADMIN_SESSION_TIMEOUT_MINUTES
                if planned_minutes == expected:
                    print(f"   ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É ({expected} –º–∏–Ω)")
                else:
                    print(f"   ‚ùå –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É! –û–∂–∏–¥–∞–ª–æ—Å—å {expected} –º–∏–Ω, –ø–æ–ª—É—á–∏–ª–∏ {planned_minutes} –º–∏–Ω")
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                now_utc = datetime.now(timezone.utc)
                
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC
                if end_time.tzinfo != timezone.utc:
                    end_time_utc = end_time.astimezone(timezone.utc)
                else:
                    end_time_utc = end_time
                
                remaining = end_time_utc - now_utc
                remaining_minutes = max(0, int(remaining.total_seconds() / 60))
                
                print(f"   now_utc: {now_utc}")
                print(f"   end_time_utc: {end_time_utc}")
                print(f"   –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {remaining_minutes} –º–∏–Ω—É—Ç")
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–æ—à–ª–æ
                if start_time.tzinfo != timezone.utc:
                    start_time_utc = start_time.astimezone(timezone.utc)
                else:
                    start_time_utc = start_time
                    
                elapsed = now_utc - start_time_utc
                elapsed_minutes = max(0, int(elapsed.total_seconds() / 60))
                print(f"   –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes} –º–∏–Ω—É—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
                total_check = elapsed_minutes + remaining_minutes
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞: {elapsed_minutes} + {remaining_minutes} = {total_check} –º–∏–Ω (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~{planned_minutes})")
                
                if abs(total_check - planned_minutes) > 2:
                    print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: —Å—É–º–º–∞ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è! –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å timezone")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        
        if not conversations:
            print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            print("   üí° –°–æ–∑–¥–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /—á–∞—Ç USER_ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

async def test_conversation_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
    print(f"\n{'='*50}")
    print("üß™ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –î–ò–ê–õ–û–ì–ê")
    print(f"{'='*50}")
    
    from config import Config
    from supabase_client import SupabaseClient
    from datetime import timedelta
    
    config = Config()
    timeout_minutes = config.ADMIN_SESSION_TIMEOUT_MINUTES
    
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–∞—É—Ç–∞: {timeout_minutes} –º–∏–Ω—É—Ç")
    
    # –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    now_utc = datetime.now(timezone.utc)
    auto_end_utc = now_utc + timedelta(minutes=timeout_minutes)
    
    print(f"üïê now_utc: {now_utc}")
    print(f"‚è∞ auto_end_utc: {auto_end_utc}")
    print(f"üìè –†–∞–∑–Ω–∏—Ü–∞: {int((auto_end_utc - now_utc).total_seconds() / 60)} –º–∏–Ω—É—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ISO —Ñ–æ—Ä–º–∞—Ç
    auto_end_iso = auto_end_utc.isoformat()
    print(f"üìù ISO —Ñ–æ—Ä–º–∞—Ç: {auto_end_iso}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—Ä–∞—Ç–Ω–æ
    try:
        if auto_end_iso.endswith('Z'):
            parsed_back = datetime.fromisoformat(auto_end_iso.replace('Z', '+00:00'))
        elif '+' in auto_end_iso:
            parsed_back = datetime.fromisoformat(auto_end_iso)
        else:
            parsed_back = datetime.fromisoformat(auto_end_iso).replace(tzinfo=timezone.utc)
        
        print(f"üîÑ –ü–∞—Ä—Å–µ–¥ –æ–±—Ä–∞—Ç–Ω–æ: {parsed_back}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if abs((parsed_back - auto_end_utc).total_seconds()) < 1:
            print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.WARNING, format='%(levelname)s - %(message)s')
    
    async def main():
        await debug_timeout_issue()
        await test_conversation_creation()
    
    asyncio.run(main())
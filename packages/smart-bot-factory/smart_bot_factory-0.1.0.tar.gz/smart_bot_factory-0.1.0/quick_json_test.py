#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON
–ó–∞–ø—É—Å–∫: python final_fixed_json_parser.py
"""

import json

def parse_ai_response(ai_response: str) -> tuple[str, dict]:
    """–§–∏–Ω–∞–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"""
    try:
        # –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è JSON —Å "—ç—Ç–∞–ø"
        last_etap_pos = ai_response.rfind('"—ç—Ç–∞–ø"')
        if last_etap_pos == -1:
            print("‚ùå –ö–ª—é—á '—ç—Ç–∞–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ai_response, {}
        
        # –ò—â–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –ø–µ—Ä–µ–¥ "—ç—Ç–∞–ø"
        json_start = -1
        for i in range(last_etap_pos, -1, -1):
            if ai_response[i] == '{':
                json_start = i
                break
        
        if json_start == -1:
            print("‚ùå –û—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –ø–µ—Ä–µ–¥ '—ç—Ç–∞–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ai_response, {}
        
        # –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
        brace_count = 0
        json_end = -1
        
        for i in range(json_start, len(ai_response)):
            char = ai_response[i]
            if char == '{':
                brace_count += 1
            elif char == '}':
                brace_count -= 1
                if brace_count == 0:
                    json_end = i
                    break
        
        if json_end == -1:
            print("‚ùå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ai_response, {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        json_str = ai_response[json_start:json_end + 1]
        response_text = ai_response[:json_start].strip()
        
        try:
            metadata = json.loads(json_str)
            print(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –º–µ—Ç–æ–¥–æ–º 1")
            return response_text, metadata
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"JSON —Å—Ç—Ä–æ–∫–∞: {json_str}")
            return parse_ai_response_method2(ai_response)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ 1: {e}")
        return parse_ai_response_method2(ai_response)

def parse_ai_response_method2(ai_response: str) -> tuple[str, dict]:
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–∞–º"""
    try:
        print("üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ 2...")
        
        lines = ai_response.strip().split('\n')
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "—ç—Ç–∞–ø"
        etap_line = -1
        for i, line in enumerate(lines):
            if '"—ç—Ç–∞–ø"' in line:
                etap_line = i
                break
        
        if etap_line == -1:
            print("‚ùå –°—Ç—Ä–æ–∫–∞ —Å '—ç—Ç–∞–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ai_response, {}
        
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON (—Å—Ç—Ä–æ–∫—É —Å { –ø–µ—Ä–µ–¥ —ç—Ç–∞–ø)
        json_start_line = -1
        for i in range(etap_line, -1, -1):
            if lines[i].strip().startswith('{'):
                json_start_line = i
                break
        
        if json_start_line == -1:
            print("‚ùå –ù–∞—á–∞–ª–æ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ai_response, {}
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü JSON (–±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏)
        brace_count = 0
        json_end_line = -1
        
        for i in range(json_start_line, len(lines)):
            line = lines[i]
            for char in line:
                if char == '{':
                    brace_count += 1
                elif char == '}':
                    brace_count -= 1
                    if brace_count == 0:
                        json_end_line = i
                        break
            if json_end_line != -1:
                break
        
        if json_end_line == -1:
            print("‚ùå –ö–æ–Ω–µ—Ü JSON –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ai_response, {}
        
        # –°–æ–±–∏—Ä–∞–µ–º JSON
        json_lines = lines[json_start_line:json_end_line + 1]
        json_str = '\n'.join(json_lines)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_lines = lines[:json_start_line]
        response_text = '\n'.join(response_lines).strip()
        
        try:
            metadata = json.loads(json_str)
            print(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –º–µ—Ç–æ–¥–æ–º 2")
            return response_text, metadata
        except json.JSONDecodeError as e:
            print(f"‚ùå –ú–µ—Ç–æ–¥ 2: –æ—à–∏–±–∫–∞ JSON: {e}")
            print(f"JSON —Å—Ç—Ä–æ–∫–∞: {json_str}")
            return ai_response, {}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ 2: {e}")
        return ai_response, {}

def main():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä"""
    print("üß™ –¢–µ—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ JSON\n")
    
    test_cases = [
        {
            "name": "JSON —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏",
            "response": '''–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

{
  "—ç—Ç–∞–ø": "contacts",
  "–∫–∞—á–µ—Å—Ç–≤–æ": 9,
  "—Å–æ–±—ã—Ç–∏—è": [
    {
      "—Ç–∏–ø": "—Ç–µ–ª–µ—Ñ–æ–Ω",
      "–∏–Ω—Ñ–æ": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ +79219603144"
    }
  ],
  "—Ñ–∞–π–ª—ã": ["–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.pdf", "–ø—Ä–∞–π—Å.pdf"],
  "–∫–∞—Ç–∞–ª–æ–≥–∏": ["–æ—Å–Ω–æ–≤–Ω–æ–π", "—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"]
}'''
        },
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π JSON",
            "response": '''–†–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏...

{
  "—ç—Ç–∞–ø": "consult",
  "–∫–∞—á–µ—Å—Ç–≤–æ": 6,
  "—Å–æ–±—ã—Ç–∏—è": [],
  "—Ñ–∞–π–ª—ã": [],
  "–∫–∞—Ç–∞–ª–æ–≥–∏": []
}'''
        },
        {
            "name": "JSON –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞",
            "response": '''–ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞.

{
  "—ç—Ç–∞–ø": "introduction",
  "–∫–∞—á–µ—Å—Ç–≤–æ": 5,
  "—Å–æ–±—ã—Ç–∏—è": [],
  "—Ñ–∞–π–ª—ã": ["welcome.pdf"],
  "–∫–∞—Ç–∞–ª–æ–≥–∏": ["–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ"]
}

–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ JSON –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç.'''
        },
        {
            "name": "–û—Ç–≤–µ—Ç –±–µ–∑ JSON",
            "response": "–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"
        }
    ]
    
    results = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"{'='*20} –¢–µ—Å—Ç {i}: {test_case['name']} {'='*20}")
        
        response_text, metadata = parse_ai_response(test_case['response'])
        has_json = bool(metadata)
        
        if has_json:
            print("‚úÖ –£–°–ü–ï–•!")
            print(f"   üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text[:50]}...")
            print(f"   üìä –≠—Ç–∞–ø: {metadata.get('—ç—Ç–∞–ø')}")
            print(f"   ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {metadata.get('–∫–∞—á–µ—Å—Ç–≤–æ')}")
            print(f"   üéØ –°–æ–±—ã—Ç–∏—è: {len(metadata.get('—Å–æ–±—ã—Ç–∏—è', []))}")
            if metadata.get('—Å–æ–±—ã—Ç–∏—è'):
                for event in metadata['—Å–æ–±—ã—Ç–∏—è']:
                    print(f"      - {event.get('—Ç–∏–ø')}: {event.get('–∏–Ω—Ñ–æ')}")
            print(f"   üìÅ –§–∞–π–ª—ã: {len(metadata.get('—Ñ–∞–π–ª—ã', []))}")
            if metadata.get('—Ñ–∞–π–ª—ã'):
                for file in metadata['—Ñ–∞–π–ª—ã']:
                    print(f"      - {file}")
            print(f"   üìÇ –ö–∞—Ç–∞–ª–æ–≥–∏: {len(metadata.get('–∫–∞—Ç–∞–ª–æ–≥–∏', []))}")
            if metadata.get('–∫–∞—Ç–∞–ª–æ–≥–∏'):
                for catalog in metadata['–∫–∞—Ç–∞–ª–æ–≥–∏']:
                    print(f"      - {catalog}")
        else:
            print("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –±–µ–∑ JSON)")
        
        results.append(has_json)
        print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    passed = sum(results)
    expected = 3  # –û–∂–∏–¥–∞–µ–º —á—Ç–æ –ø–µ—Ä–≤—ã–µ 3 —Ç–µ—Å—Ç–∞ –ø—Ä–æ–π–¥—É—Ç
    
    print(f"üìä –ò–¢–û–ì–û: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ —Å JSON")
    
    if passed >= expected:
        print("üéâ –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON")
        return False

if __name__ == "__main__":
    main()
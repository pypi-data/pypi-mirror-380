# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π main.py —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π bot_id –≤ SupabaseClient

import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import Config
from supabase_client import SupabaseClient
from openai_client import OpenAIClient
from prompt_loader import PromptLoader
from admin_manager import AdminManager
from conversation_manager import ConversationManager
from analytics_manager import AnalyticsManager

from handlers import setup_handlers
from admin_logic import setup_admin_handlers
from bot_utils import cleanup_expired_conversations, setup_utils_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
config = None
bot = None
dp = None
supabase_client = None
openai_client = None
prompt_loader = None
admin_manager = None
conversation_manager = None
analytics_manager = None

def init_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    global config, bot, dp, supabase_client, openai_client, prompt_loader
    global admin_manager, conversation_manager, analytics_manager
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Config()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞ –° bot_id –¥–ª—è –º—É–ª—å—Ç–∏–±–æ—Ç–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    supabase_client = SupabaseClient(
        url=config.SUPABASE_URL, 
        key=config.SUPABASE_KEY,
        bot_id=config.BOT_ID  # üÜï –ü–µ—Ä–µ–¥–∞–µ–º bot_id –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
    openai_client = OpenAIClient(
        api_key=config.OPENAI_API_KEY,
        model=config.OPENAI_MODEL,
        max_tokens=config.OPENAI_MAX_TOKENS,
        temperature=config.OPENAI_TEMPERATURE
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
    prompt_loader = PromptLoader(
        prompts_dir=config.PROMT_FILES_DIR, 
        prompt_files=config.PROMPT_FILES
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
    admin_manager = AdminManager(config, supabase_client)
    conversation_manager = ConversationManager(supabase_client, admin_manager)
    analytics_manager = AnalyticsManager(supabase_client)
    
    logger.info(f"‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è bot_id: {config.BOT_ID}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        init_components()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await supabase_client.initialize()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await admin_manager.sync_admins_from_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–º–ø—Ç–æ–≤
        prompts_status = await prompt_loader.validate_prompts()
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–º–ø—Ç–æ–≤: {prompts_status}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        setup_utils_handlers(dp)    # –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/status, /help)
        setup_admin_handlers(dp)    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (/–∞–¥–º–∏–Ω, /—Å—Ç–∞—Ç, /—á–∞—Ç)
        setup_handlers(dp)          # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        asyncio.create_task(cleanup_expired_conversations())
        
        logger.info(f"üöÄ –ë–æ—Ç {config.BOT_ID.upper()} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –º—É–ª—å—Ç–∏–±–æ—Ç–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π!")
        logger.info(f"   üìä –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: bot_id = {config.BOT_ID}")
        logger.info(f"   üëë –ê–¥–º–∏–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(config.ADMIN_TELEGRAM_IDS)}")
        logger.info(f"   üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(config.PROMPT_FILES)}")
        
        # –ó–∞–ø—É—Å–∫ polling (–±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ {config.BOT_ID if config else 'UNKNOWN'}: {e}")
        import traceback
        logger.error(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        raise
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if bot:
            await bot.session.close()
        logger.info(f"‚èπÔ∏è –ë–æ—Ç {config.BOT_ID if config else 'UNKNOWN'} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
# -*- coding: utf-8 -*-

import typing as T
import dataclasses
from functools import cached_property

if T.TYPE_CHECKING:  # pragma: no cover
    from mypy_boto3_quicksight import type_defs


def field(name: str):
    def getter(self):
        return self.boto3_raw_data[name]

    return cached_property(getter)


@dataclasses.dataclass(frozen=True)
class AccountCustomization:
    boto3_raw_data: "type_defs.AccountCustomizationTypeDef" = dataclasses.field()

    DefaultTheme = field("DefaultTheme")
    DefaultEmailCustomizationTemplate = field("DefaultEmailCustomizationTemplate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AccountCustomizationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AccountCustomizationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AccountInfo:
    boto3_raw_data: "type_defs.AccountInfoTypeDef" = dataclasses.field()

    AccountName = field("AccountName")
    Edition = field("Edition")
    NotificationEmail = field("NotificationEmail")
    AuthenticationType = field("AuthenticationType")
    AccountSubscriptionStatus = field("AccountSubscriptionStatus")
    IAMIdentityCenterInstanceArn = field("IAMIdentityCenterInstanceArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AccountInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AccountInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AccountSettings:
    boto3_raw_data: "type_defs.AccountSettingsTypeDef" = dataclasses.field()

    AccountName = field("AccountName")
    Edition = field("Edition")
    DefaultNamespace = field("DefaultNamespace")
    NotificationEmail = field("NotificationEmail")
    PublicSharingEnabled = field("PublicSharingEnabled")
    TerminationProtectionEnabled = field("TerminationProtectionEnabled")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AccountSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AccountSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActiveIAMPolicyAssignment:
    boto3_raw_data: "type_defs.ActiveIAMPolicyAssignmentTypeDef" = dataclasses.field()

    AssignmentName = field("AssignmentName")
    PolicyArn = field("PolicyArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ActiveIAMPolicyAssignmentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ActiveIAMPolicyAssignmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdHocFilteringOption:
    boto3_raw_data: "type_defs.AdHocFilteringOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AdHocFilteringOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AdHocFilteringOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AggFunctionOutput:
    boto3_raw_data: "type_defs.AggFunctionOutputTypeDef" = dataclasses.field()

    Aggregation = field("Aggregation")
    AggregationFunctionParameters = field("AggregationFunctionParameters")
    Period = field("Period")
    PeriodField = field("PeriodField")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AggFunctionOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AggFunctionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AggFunction:
    boto3_raw_data: "type_defs.AggFunctionTypeDef" = dataclasses.field()

    Aggregation = field("Aggregation")
    AggregationFunctionParameters = field("AggregationFunctionParameters")
    Period = field("Period")
    PeriodField = field("PeriodField")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AggFunctionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AggFunctionTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AttributeAggregationFunction:
    boto3_raw_data: "type_defs.AttributeAggregationFunctionTypeDef" = (
        dataclasses.field()
    )

    SimpleAttributeAggregation = field("SimpleAttributeAggregation")
    ValueForMultipleValues = field("ValueForMultipleValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AttributeAggregationFunctionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AttributeAggregationFunctionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AggregationPartitionBy:
    boto3_raw_data: "type_defs.AggregationPartitionByTypeDef" = dataclasses.field()

    FieldName = field("FieldName")
    TimeGranularity = field("TimeGranularity")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AggregationPartitionByTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AggregationPartitionByTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnIdentifier:
    boto3_raw_data: "type_defs.ColumnIdentifierTypeDef" = dataclasses.field()

    DataSetIdentifier = field("DataSetIdentifier")
    ColumnName = field("ColumnName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnIdentifierTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnIdentifierTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AmazonElasticsearchParameters:
    boto3_raw_data: "type_defs.AmazonElasticsearchParametersTypeDef" = (
        dataclasses.field()
    )

    Domain = field("Domain")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AmazonElasticsearchParametersTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AmazonElasticsearchParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AmazonOpenSearchParameters:
    boto3_raw_data: "type_defs.AmazonOpenSearchParametersTypeDef" = dataclasses.field()

    Domain = field("Domain")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AmazonOpenSearchParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AmazonOpenSearchParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataQnAConfigurations:
    boto3_raw_data: "type_defs.DataQnAConfigurationsTypeDef" = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataQnAConfigurationsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataQnAConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataStoriesConfigurations:
    boto3_raw_data: "type_defs.DataStoriesConfigurationsTypeDef" = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataStoriesConfigurationsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataStoriesConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExecutiveSummaryConfigurations:
    boto3_raw_data: "type_defs.ExecutiveSummaryConfigurationsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ExecutiveSummaryConfigurationsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExecutiveSummaryConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GenerativeAuthoringConfigurations:
    boto3_raw_data: "type_defs.GenerativeAuthoringConfigurationsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GenerativeAuthoringConfigurationsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GenerativeAuthoringConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CalculatedField:
    boto3_raw_data: "type_defs.CalculatedFieldTypeDef" = dataclasses.field()

    DataSetIdentifier = field("DataSetIdentifier")
    Name = field("Name")
    Expression = field("Expression")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CalculatedFieldTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CalculatedFieldTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetIdentifierDeclaration:
    boto3_raw_data: "type_defs.DataSetIdentifierDeclarationTypeDef" = (
        dataclasses.field()
    )

    Identifier = field("Identifier")
    DataSetArn = field("DataSetArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSetIdentifierDeclarationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSetIdentifierDeclarationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class QueryExecutionOptions:
    boto3_raw_data: "type_defs.QueryExecutionOptionsTypeDef" = dataclasses.field()

    QueryExecutionMode = field("QueryExecutionMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.QueryExecutionOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.QueryExecutionOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Entity:
    boto3_raw_data: "type_defs.EntityTypeDef" = dataclasses.field()

    Path = field("Path")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EntityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EntityTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisSearchFilter:
    boto3_raw_data: "type_defs.AnalysisSearchFilterTypeDef" = dataclasses.field()

    Operator = field("Operator")
    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisSearchFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisSearchFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetReference:
    boto3_raw_data: "type_defs.DataSetReferenceTypeDef" = dataclasses.field()

    DataSetPlaceholder = field("DataSetPlaceholder")
    DataSetArn = field("DataSetArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataSetReferenceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSetReferenceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisSummary:
    boto3_raw_data: "type_defs.AnalysisSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    AnalysisId = field("AnalysisId")
    Name = field("Name")
    Status = field("Status")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AnalysisSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AnalysisSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnchorDateConfiguration:
    boto3_raw_data: "type_defs.AnchorDateConfigurationTypeDef" = dataclasses.field()

    AnchorOption = field("AnchorOption")
    ParameterName = field("ParameterName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnchorDateConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnchorDateConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Anchor:
    boto3_raw_data: "type_defs.AnchorTypeDef" = dataclasses.field()

    AnchorType = field("AnchorType")
    TimeGranularity = field("TimeGranularity")
    Offset = field("Offset")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AnchorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AnchorTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SharedViewConfigurations:
    boto3_raw_data: "type_defs.SharedViewConfigurationsTypeDef" = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SharedViewConfigurationsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SharedViewConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardVisualId:
    boto3_raw_data: "type_defs.DashboardVisualIdTypeDef" = dataclasses.field()

    DashboardId = field("DashboardId")
    SheetId = field("SheetId")
    VisualId = field("VisualId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DashboardVisualIdTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardVisualIdTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnonymousUserGenerativeQnAEmbeddingConfiguration:
    boto3_raw_data: (
        "type_defs.AnonymousUserGenerativeQnAEmbeddingConfigurationTypeDef"
    ) = dataclasses.field()

    InitialTopicId = field("InitialTopicId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AnonymousUserGenerativeQnAEmbeddingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AnonymousUserGenerativeQnAEmbeddingConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnonymousUserQSearchBarEmbeddingConfiguration:
    boto3_raw_data: "type_defs.AnonymousUserQSearchBarEmbeddingConfigurationTypeDef" = (
        dataclasses.field()
    )

    InitialTopicId = field("InitialTopicId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AnonymousUserQSearchBarEmbeddingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnonymousUserQSearchBarEmbeddingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ArcAxisDisplayRange:
    boto3_raw_data: "type_defs.ArcAxisDisplayRangeTypeDef" = dataclasses.field()

    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ArcAxisDisplayRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ArcAxisDisplayRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ArcConfiguration:
    boto3_raw_data: "type_defs.ArcConfigurationTypeDef" = dataclasses.field()

    ArcAngle = field("ArcAngle")
    ArcThickness = field("ArcThickness")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ArcConfigurationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ArcConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ArcOptions:
    boto3_raw_data: "type_defs.ArcOptionsTypeDef" = dataclasses.field()

    ArcThickness = field("ArcThickness")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ArcOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ArcOptionsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobAnalysisOverridePropertiesOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobAnalysisOverridePropertiesOutputTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobAnalysisOverridePropertiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobAnalysisOverridePropertiesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobDashboardOverridePropertiesOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobDashboardOverridePropertiesOutputTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobDashboardOverridePropertiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobDashboardOverridePropertiesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobDataSetOverridePropertiesOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobDataSetOverridePropertiesOutputTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobDataSetOverridePropertiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobDataSetOverridePropertiesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobDataSourceOverridePropertiesOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobDataSourceOverridePropertiesOutputTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobDataSourceOverridePropertiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobDataSourceOverridePropertiesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobFolderOverridePropertiesOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobFolderOverridePropertiesOutputTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobFolderOverridePropertiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobFolderOverridePropertiesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobRefreshScheduleOverridePropertiesOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobRefreshScheduleOverridePropertiesOutputTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobRefreshScheduleOverridePropertiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobRefreshScheduleOverridePropertiesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobResourceIdOverrideConfiguration:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobResourceIdOverrideConfigurationTypeDef"
    ) = dataclasses.field()

    PrefixForAllResources = field("PrefixForAllResources")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobResourceIdOverrideConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobResourceIdOverrideConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobThemeOverridePropertiesOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobThemeOverridePropertiesOutputTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobThemeOverridePropertiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobThemeOverridePropertiesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobVPCConnectionOverridePropertiesOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobVPCConnectionOverridePropertiesOutputTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobVPCConnectionOverridePropertiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobVPCConnectionOverridePropertiesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobAnalysisOverrideProperties:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobAnalysisOverridePropertiesTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobAnalysisOverridePropertiesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobAnalysisOverridePropertiesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobDashboardOverrideProperties:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobDashboardOverridePropertiesTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobDashboardOverridePropertiesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobDashboardOverridePropertiesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobDataSetOverrideProperties:
    boto3_raw_data: "type_defs.AssetBundleExportJobDataSetOverridePropertiesTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobDataSetOverridePropertiesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleExportJobDataSetOverridePropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobDataSourceOverrideProperties:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobDataSourceOverridePropertiesTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobDataSourceOverridePropertiesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobDataSourceOverridePropertiesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobFolderOverrideProperties:
    boto3_raw_data: "type_defs.AssetBundleExportJobFolderOverridePropertiesTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobFolderOverridePropertiesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleExportJobFolderOverridePropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobRefreshScheduleOverrideProperties:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobRefreshScheduleOverridePropertiesTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobRefreshScheduleOverridePropertiesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobRefreshScheduleOverridePropertiesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobThemeOverrideProperties:
    boto3_raw_data: "type_defs.AssetBundleExportJobThemeOverridePropertiesTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobThemeOverridePropertiesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleExportJobThemeOverridePropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobVPCConnectionOverrideProperties:
    boto3_raw_data: (
        "type_defs.AssetBundleExportJobVPCConnectionOverridePropertiesTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Properties = field("Properties")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobVPCConnectionOverridePropertiesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleExportJobVPCConnectionOverridePropertiesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobError:
    boto3_raw_data: "type_defs.AssetBundleExportJobErrorTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Type = field("Type")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssetBundleExportJobErrorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleExportJobErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobSummary:
    boto3_raw_data: "type_defs.AssetBundleExportJobSummaryTypeDef" = dataclasses.field()

    JobStatus = field("JobStatus")
    Arn = field("Arn")
    CreatedTime = field("CreatedTime")
    AssetBundleExportJobId = field("AssetBundleExportJobId")
    IncludeAllDependencies = field("IncludeAllDependencies")
    ExportFormat = field("ExportFormat")
    IncludePermissions = field("IncludePermissions")
    IncludeTags = field("IncludeTags")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssetBundleExportJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleExportJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobValidationStrategy:
    boto3_raw_data: "type_defs.AssetBundleExportJobValidationStrategyTypeDef" = (
        dataclasses.field()
    )

    StrictModeForAllResources = field("StrictModeForAllResources")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleExportJobValidationStrategyTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleExportJobValidationStrategyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleExportJobWarning:
    boto3_raw_data: "type_defs.AssetBundleExportJobWarningTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssetBundleExportJobWarningTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleExportJobWarningTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobAnalysisOverrideParameters:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobAnalysisOverrideParametersTypeDef"
    ) = dataclasses.field()

    AnalysisId = field("AnalysisId")
    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobAnalysisOverrideParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobAnalysisOverrideParametersTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleResourcePermissionsOutput:
    boto3_raw_data: "type_defs.AssetBundleResourcePermissionsOutputTypeDef" = (
        dataclasses.field()
    )

    Principals = field("Principals")
    Actions = field("Actions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleResourcePermissionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleResourcePermissionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleResourcePermissions:
    boto3_raw_data: "type_defs.AssetBundleResourcePermissionsTypeDef" = (
        dataclasses.field()
    )

    Principals = field("Principals")
    Actions = field("Actions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssetBundleResourcePermissionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleResourcePermissionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Tag:
    boto3_raw_data: "type_defs.TagTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TagTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TagTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDashboardOverrideParameters:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDashboardOverrideParametersTypeDef"
    ) = dataclasses.field()

    DashboardId = field("DashboardId")
    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDashboardOverrideParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDashboardOverrideParametersTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSourceCredentialPair:
    boto3_raw_data: "type_defs.AssetBundleImportJobDataSourceCredentialPairTypeDef" = (
        dataclasses.field()
    )

    Username = field("Username")
    Password = field("Password")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSourceCredentialPairTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobDataSourceCredentialPairTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SslProperties:
    boto3_raw_data: "type_defs.SslPropertiesTypeDef" = dataclasses.field()

    DisableSsl = field("DisableSsl")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SslPropertiesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SslPropertiesTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcConnectionProperties:
    boto3_raw_data: "type_defs.VpcConnectionPropertiesTypeDef" = dataclasses.field()

    VpcConnectionArn = field("VpcConnectionArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcConnectionPropertiesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcConnectionPropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobError:
    boto3_raw_data: "type_defs.AssetBundleImportJobErrorTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Type = field("Type")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssetBundleImportJobErrorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobFolderOverrideParameters:
    boto3_raw_data: "type_defs.AssetBundleImportJobFolderOverrideParametersTypeDef" = (
        dataclasses.field()
    )

    FolderId = field("FolderId")
    Name = field("Name")
    ParentFolderArn = field("ParentFolderArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobFolderOverrideParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobFolderOverrideParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobRefreshScheduleOverrideParametersOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobRefreshScheduleOverrideParametersOutputTypeDef"
    ) = dataclasses.field()

    DataSetId = field("DataSetId")
    ScheduleId = field("ScheduleId")
    StartAfterDateTime = field("StartAfterDateTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobRefreshScheduleOverrideParametersOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobRefreshScheduleOverrideParametersOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobResourceIdOverrideConfiguration:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobResourceIdOverrideConfigurationTypeDef"
    ) = dataclasses.field()

    PrefixForAllResources = field("PrefixForAllResources")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobResourceIdOverrideConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobResourceIdOverrideConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobThemeOverrideParameters:
    boto3_raw_data: "type_defs.AssetBundleImportJobThemeOverrideParametersTypeDef" = (
        dataclasses.field()
    )

    ThemeId = field("ThemeId")
    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobThemeOverrideParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobThemeOverrideParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobVPCConnectionOverrideParametersOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobVPCConnectionOverrideParametersOutputTypeDef"
    ) = dataclasses.field()

    VPCConnectionId = field("VPCConnectionId")
    Name = field("Name")
    SubnetIds = field("SubnetIds")
    SecurityGroupIds = field("SecurityGroupIds")
    DnsResolvers = field("DnsResolvers")
    RoleArn = field("RoleArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobVPCConnectionOverrideParametersOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobVPCConnectionOverrideParametersOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobVPCConnectionOverrideParameters:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobVPCConnectionOverrideParametersTypeDef"
    ) = dataclasses.field()

    VPCConnectionId = field("VPCConnectionId")
    Name = field("Name")
    SubnetIds = field("SubnetIds")
    SecurityGroupIds = field("SecurityGroupIds")
    DnsResolvers = field("DnsResolvers")
    RoleArn = field("RoleArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobVPCConnectionOverrideParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobVPCConnectionOverrideParametersTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobOverrideValidationStrategy:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobOverrideValidationStrategyTypeDef"
    ) = dataclasses.field()

    StrictModeForAllResources = field("StrictModeForAllResources")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobOverrideValidationStrategyTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobOverrideValidationStrategyTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobSummary:
    boto3_raw_data: "type_defs.AssetBundleImportJobSummaryTypeDef" = dataclasses.field()

    JobStatus = field("JobStatus")
    Arn = field("Arn")
    CreatedTime = field("CreatedTime")
    AssetBundleImportJobId = field("AssetBundleImportJobId")
    FailureAction = field("FailureAction")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssetBundleImportJobSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobWarning:
    boto3_raw_data: "type_defs.AssetBundleImportJobWarningTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssetBundleImportJobWarningTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobWarningTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportSourceDescription:
    boto3_raw_data: "type_defs.AssetBundleImportSourceDescriptionTypeDef" = (
        dataclasses.field()
    )

    Body = field("Body")
    S3Uri = field("S3Uri")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportSourceDescriptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportSourceDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IdentityCenterConfiguration:
    boto3_raw_data: "type_defs.IdentityCenterConfigurationTypeDef" = dataclasses.field()

    EnableIdentityPropagation = field("EnableIdentityPropagation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IdentityCenterConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IdentityCenterConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuroraParameters:
    boto3_raw_data: "type_defs.AuroraParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Database = field("Database")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AuroraParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuroraParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuroraPostgreSqlParameters:
    boto3_raw_data: "type_defs.AuroraPostgreSqlParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Database = field("Database")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AuroraPostgreSqlParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuroraPostgreSqlParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AuthorizedTargetsByService:
    boto3_raw_data: "type_defs.AuthorizedTargetsByServiceTypeDef" = dataclasses.field()

    Service = field("Service")
    AuthorizedTargets = field("AuthorizedTargets")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AuthorizedTargetsByServiceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AuthorizedTargetsByServiceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIotAnalyticsParameters:
    boto3_raw_data: "type_defs.AwsIotAnalyticsParametersTypeDef" = dataclasses.field()

    DataSetName = field("DataSetName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIotAnalyticsParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIotAnalyticsParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateAxisOptions:
    boto3_raw_data: "type_defs.DateAxisOptionsTypeDef" = dataclasses.field()

    MissingDateVisibility = field("MissingDateVisibility")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DateAxisOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DateAxisOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisDisplayMinMaxRange:
    boto3_raw_data: "type_defs.AxisDisplayMinMaxRangeTypeDef" = dataclasses.field()

    Minimum = field("Minimum")
    Maximum = field("Maximum")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AxisDisplayMinMaxRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisDisplayMinMaxRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisLinearScale:
    boto3_raw_data: "type_defs.AxisLinearScaleTypeDef" = dataclasses.field()

    StepCount = field("StepCount")
    StepSize = field("StepSize")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AxisLinearScaleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AxisLinearScaleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisLogarithmicScale:
    boto3_raw_data: "type_defs.AxisLogarithmicScaleTypeDef" = dataclasses.field()

    Base = field("Base")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AxisLogarithmicScaleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisLogarithmicScaleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ItemsLimitConfiguration:
    boto3_raw_data: "type_defs.ItemsLimitConfigurationTypeDef" = dataclasses.field()

    ItemsLimit = field("ItemsLimit")
    OtherCategories = field("OtherCategories")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ItemsLimitConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ItemsLimitConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InvalidTopicReviewedAnswer:
    boto3_raw_data: "type_defs.InvalidTopicReviewedAnswerTypeDef" = dataclasses.field()

    AnswerId = field("AnswerId")
    Error = field("Error")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InvalidTopicReviewedAnswerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InvalidTopicReviewedAnswerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResponseMetadata:
    boto3_raw_data: "type_defs.ResponseMetadataTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    HTTPStatusCode = field("HTTPStatusCode")
    HTTPHeaders = field("HTTPHeaders")
    RetryAttempts = field("RetryAttempts")
    HostId = field("HostId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResponseMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResponseMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SucceededTopicReviewedAnswer:
    boto3_raw_data: "type_defs.SucceededTopicReviewedAnswerTypeDef" = (
        dataclasses.field()
    )

    AnswerId = field("AnswerId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SucceededTopicReviewedAnswerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SucceededTopicReviewedAnswerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDeleteTopicReviewedAnswerRequest:
    boto3_raw_data: "type_defs.BatchDeleteTopicReviewedAnswerRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")
    AnswerIds = field("AnswerIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchDeleteTopicReviewedAnswerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDeleteTopicReviewedAnswerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BigQueryParameters:
    boto3_raw_data: "type_defs.BigQueryParametersTypeDef" = dataclasses.field()

    ProjectId = field("ProjectId")
    DataSetRegion = field("DataSetRegion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BigQueryParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BigQueryParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BinCountOptions:
    boto3_raw_data: "type_defs.BinCountOptionsTypeDef" = dataclasses.field()

    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BinCountOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BinCountOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BinWidthOptions:
    boto3_raw_data: "type_defs.BinWidthOptionsTypeDef" = dataclasses.field()

    Value = field("Value")
    BinCountLimit = field("BinCountLimit")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BinWidthOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BinWidthOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SectionAfterPageBreak:
    boto3_raw_data: "type_defs.SectionAfterPageBreakTypeDef" = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SectionAfterPageBreakTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SectionAfterPageBreakTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BookmarksConfigurations:
    boto3_raw_data: "type_defs.BookmarksConfigurationsTypeDef" = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BookmarksConfigurationsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BookmarksConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BorderStyle:
    boto3_raw_data: "type_defs.BorderStyleTypeDef" = dataclasses.field()

    Show = field("Show")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BorderStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BorderStyleTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotStyleOptions:
    boto3_raw_data: "type_defs.BoxPlotStyleOptionsTypeDef" = dataclasses.field()

    FillStyle = field("FillStyle")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BoxPlotStyleOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotStyleOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PaginationConfiguration:
    boto3_raw_data: "type_defs.PaginationConfigurationTypeDef" = dataclasses.field()

    PageSize = field("PageSize")
    PageNumber = field("PageNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PaginationConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PaginationConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Palette:
    boto3_raw_data: "type_defs.PaletteTypeDef" = dataclasses.field()

    Foreground = field("Foreground")
    Background = field("Background")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PaletteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PaletteTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BrandSummary:
    boto3_raw_data: "type_defs.BrandSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    BrandId = field("BrandId")
    BrandName = field("BrandName")
    Description = field("Description")
    BrandStatus = field("BrandStatus")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BrandSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BrandSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CalculatedColumn:
    boto3_raw_data: "type_defs.CalculatedColumnTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")
    ColumnId = field("ColumnId")
    Expression = field("Expression")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CalculatedColumnTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CalculatedColumnTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CalculatedMeasureField:
    boto3_raw_data: "type_defs.CalculatedMeasureFieldTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    Expression = field("Expression")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CalculatedMeasureFieldTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CalculatedMeasureFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelIngestionRequest:
    boto3_raw_data: "type_defs.CancelIngestionRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")
    IngestionId = field("IngestionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelIngestionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelIngestionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Capabilities:
    boto3_raw_data: "type_defs.CapabilitiesTypeDef" = dataclasses.field()

    ExportToCsv = field("ExportToCsv")
    ExportToExcel = field("ExportToExcel")
    ExportToPdf = field("ExportToPdf")
    PrintReports = field("PrintReports")
    CreateAndUpdateThemes = field("CreateAndUpdateThemes")
    AddOrRunAnomalyDetectionForAnalyses = field("AddOrRunAnomalyDetectionForAnalyses")
    ShareAnalyses = field("ShareAnalyses")
    CreateAndUpdateDatasets = field("CreateAndUpdateDatasets")
    ShareDatasets = field("ShareDatasets")
    SubscribeDashboardEmailReports = field("SubscribeDashboardEmailReports")
    CreateAndUpdateDashboardEmailReports = field("CreateAndUpdateDashboardEmailReports")
    ShareDashboards = field("ShareDashboards")
    CreateAndUpdateThresholdAlerts = field("CreateAndUpdateThresholdAlerts")
    RenameSharedFolders = field("RenameSharedFolders")
    CreateSharedFolders = field("CreateSharedFolders")
    CreateAndUpdateDataSources = field("CreateAndUpdateDataSources")
    ShareDataSources = field("ShareDataSources")
    ViewAccountSPICECapacity = field("ViewAccountSPICECapacity")
    CreateSPICEDataset = field("CreateSPICEDataset")
    ExportToPdfInScheduledReports = field("ExportToPdfInScheduledReports")
    ExportToCsvInScheduledReports = field("ExportToCsvInScheduledReports")
    ExportToExcelInScheduledReports = field("ExportToExcelInScheduledReports")
    IncludeContentInScheduledReportsEmail = field(
        "IncludeContentInScheduledReportsEmail"
    )
    Dashboard = field("Dashboard")
    Analysis = field("Analysis")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CapabilitiesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CapabilitiesTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CastColumnTypeOperation:
    boto3_raw_data: "type_defs.CastColumnTypeOperationTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")
    NewColumnType = field("NewColumnType")
    SubType = field("SubType")
    Format = field("Format")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CastColumnTypeOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CastColumnTypeOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomFilterConfiguration:
    boto3_raw_data: "type_defs.CustomFilterConfigurationTypeDef" = dataclasses.field()

    MatchOperator = field("MatchOperator")
    NullOption = field("NullOption")
    CategoryValue = field("CategoryValue")
    SelectAllOptions = field("SelectAllOptions")
    ParameterName = field("ParameterName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomFilterConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomFilterConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomFilterListConfigurationOutput:
    boto3_raw_data: "type_defs.CustomFilterListConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    MatchOperator = field("MatchOperator")
    NullOption = field("NullOption")
    CategoryValues = field("CategoryValues")
    SelectAllOptions = field("SelectAllOptions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CustomFilterListConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomFilterListConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterListConfigurationOutput:
    boto3_raw_data: "type_defs.FilterListConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    MatchOperator = field("MatchOperator")
    CategoryValues = field("CategoryValues")
    SelectAllOptions = field("SelectAllOptions")
    NullOption = field("NullOption")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FilterListConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterListConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomFilterListConfiguration:
    boto3_raw_data: "type_defs.CustomFilterListConfigurationTypeDef" = (
        dataclasses.field()
    )

    MatchOperator = field("MatchOperator")
    NullOption = field("NullOption")
    CategoryValues = field("CategoryValues")
    SelectAllOptions = field("SelectAllOptions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CustomFilterListConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomFilterListConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterListConfiguration:
    boto3_raw_data: "type_defs.FilterListConfigurationTypeDef" = dataclasses.field()

    MatchOperator = field("MatchOperator")
    CategoryValues = field("CategoryValues")
    SelectAllOptions = field("SelectAllOptions")
    NullOption = field("NullOption")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterListConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterListConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CellValueSynonymOutput:
    boto3_raw_data: "type_defs.CellValueSynonymOutputTypeDef" = dataclasses.field()

    CellValue = field("CellValue")
    Synonyms = field("Synonyms")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CellValueSynonymOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CellValueSynonymOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CellValueSynonym:
    boto3_raw_data: "type_defs.CellValueSynonymTypeDef" = dataclasses.field()

    CellValue = field("CellValue")
    Synonyms = field("Synonyms")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CellValueSynonymTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CellValueSynonymTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SimpleClusterMarker:
    boto3_raw_data: "type_defs.SimpleClusterMarkerTypeDef" = dataclasses.field()

    Color = field("Color")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SimpleClusterMarkerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SimpleClusterMarkerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CollectiveConstantEntry:
    boto3_raw_data: "type_defs.CollectiveConstantEntryTypeDef" = dataclasses.field()

    ConstantType = field("ConstantType")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CollectiveConstantEntryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CollectiveConstantEntryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CollectiveConstantOutput:
    boto3_raw_data: "type_defs.CollectiveConstantOutputTypeDef" = dataclasses.field()

    ValueList = field("ValueList")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CollectiveConstantOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CollectiveConstantOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CollectiveConstant:
    boto3_raw_data: "type_defs.CollectiveConstantTypeDef" = dataclasses.field()

    ValueList = field("ValueList")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CollectiveConstantTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CollectiveConstantTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataColor:
    boto3_raw_data: "type_defs.DataColorTypeDef" = dataclasses.field()

    Color = field("Color")
    DataValue = field("DataValue")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataColorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataColorTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomColor:
    boto3_raw_data: "type_defs.CustomColorTypeDef" = dataclasses.field()

    Color = field("Color")
    FieldValue = field("FieldValue")
    SpecialValue = field("SpecialValue")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CustomColorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CustomColorTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnDescription:
    boto3_raw_data: "type_defs.ColumnDescriptionTypeDef" = dataclasses.field()

    Text = field("Text")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnDescriptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnGroupColumnSchema:
    boto3_raw_data: "type_defs.ColumnGroupColumnSchemaTypeDef" = dataclasses.field()

    Name = field("Name")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ColumnGroupColumnSchemaTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnGroupColumnSchemaTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeoSpatialColumnGroupOutput:
    boto3_raw_data: "type_defs.GeoSpatialColumnGroupOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Columns = field("Columns")
    CountryCode = field("CountryCode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeoSpatialColumnGroupOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeoSpatialColumnGroupOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnLevelPermissionRuleOutput:
    boto3_raw_data: "type_defs.ColumnLevelPermissionRuleOutputTypeDef" = (
        dataclasses.field()
    )

    Principals = field("Principals")
    ColumnNames = field("ColumnNames")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ColumnLevelPermissionRuleOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnLevelPermissionRuleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnLevelPermissionRule:
    boto3_raw_data: "type_defs.ColumnLevelPermissionRuleTypeDef" = dataclasses.field()

    Principals = field("Principals")
    ColumnNames = field("ColumnNames")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ColumnLevelPermissionRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnLevelPermissionRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnSchema:
    boto3_raw_data: "type_defs.ColumnSchemaTypeDef" = dataclasses.field()

    Name = field("Name")
    DataType = field("DataType")
    GeographicRole = field("GeographicRole")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnSchemaTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ColumnSchemaTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComparativeOrderOutput:
    boto3_raw_data: "type_defs.ComparativeOrderOutputTypeDef" = dataclasses.field()

    UseOrdering = field("UseOrdering")
    SpecifedOrder = field("SpecifedOrder")
    TreatUndefinedSpecifiedValues = field("TreatUndefinedSpecifiedValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComparativeOrderOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComparativeOrderOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComparativeOrder:
    boto3_raw_data: "type_defs.ComparativeOrderTypeDef" = dataclasses.field()

    UseOrdering = field("UseOrdering")
    SpecifedOrder = field("SpecifedOrder")
    TreatUndefinedSpecifiedValues = field("TreatUndefinedSpecifiedValues")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ComparativeOrderTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComparativeOrderTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingSolidColor:
    boto3_raw_data: "type_defs.ConditionalFormattingSolidColorTypeDef" = (
        dataclasses.field()
    )

    Expression = field("Expression")
    Color = field("Color")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ConditionalFormattingSolidColorTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingSolidColorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingCustomIconOptions:
    boto3_raw_data: "type_defs.ConditionalFormattingCustomIconOptionsTypeDef" = (
        dataclasses.field()
    )

    Icon = field("Icon")
    UnicodeIcon = field("UnicodeIcon")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ConditionalFormattingCustomIconOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingCustomIconOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingIconDisplayConfiguration:
    boto3_raw_data: "type_defs.ConditionalFormattingIconDisplayConfigurationTypeDef" = (
        dataclasses.field()
    )

    IconDisplayOption = field("IconDisplayOption")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ConditionalFormattingIconDisplayConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingIconDisplayConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingIconSet:
    boto3_raw_data: "type_defs.ConditionalFormattingIconSetTypeDef" = (
        dataclasses.field()
    )

    Expression = field("Expression")
    IconSetType = field("IconSetType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConditionalFormattingIconSetTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingIconSetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContextMenuOption:
    boto3_raw_data: "type_defs.ContextMenuOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ContextMenuOptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContextMenuOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContributionAnalysisFactor:
    boto3_raw_data: "type_defs.ContributionAnalysisFactorTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ContributionAnalysisFactorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContributionAnalysisFactorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAccountSubscriptionRequest:
    boto3_raw_data: "type_defs.CreateAccountSubscriptionRequestTypeDef" = (
        dataclasses.field()
    )

    AuthenticationMethod = field("AuthenticationMethod")
    AwsAccountId = field("AwsAccountId")
    AccountName = field("AccountName")
    NotificationEmail = field("NotificationEmail")
    Edition = field("Edition")
    ActiveDirectoryName = field("ActiveDirectoryName")
    Realm = field("Realm")
    DirectoryId = field("DirectoryId")
    AdminGroup = field("AdminGroup")
    AuthorGroup = field("AuthorGroup")
    ReaderGroup = field("ReaderGroup")
    AdminProGroup = field("AdminProGroup")
    AuthorProGroup = field("AuthorProGroup")
    ReaderProGroup = field("ReaderProGroup")
    FirstName = field("FirstName")
    LastName = field("LastName")
    EmailAddress = field("EmailAddress")
    ContactNumber = field("ContactNumber")
    IAMIdentityCenterInstanceArn = field("IAMIdentityCenterInstanceArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateAccountSubscriptionRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAccountSubscriptionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SignupResponse:
    boto3_raw_data: "type_defs.SignupResponseTypeDef" = dataclasses.field()

    IAMUser = field("IAMUser")
    userLoginName = field("userLoginName")
    accountName = field("accountName")
    directoryType = field("directoryType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SignupResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SignupResponseTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ValidationStrategy:
    boto3_raw_data: "type_defs.ValidationStrategyTypeDef" = dataclasses.field()

    Mode = field("Mode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ValidationStrategyTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ValidationStrategyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetUsageConfiguration:
    boto3_raw_data: "type_defs.DataSetUsageConfigurationTypeDef" = dataclasses.field()

    DisableUseAsDirectQuerySource = field("DisableUseAsDirectQuerySource")
    DisableUseAsImportedSource = field("DisableUseAsImportedSource")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSetUsageConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSetUsageConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RowLevelPermissionDataSet:
    boto3_raw_data: "type_defs.RowLevelPermissionDataSetTypeDef" = dataclasses.field()

    Arn = field("Arn")
    PermissionPolicy = field("PermissionPolicy")
    Namespace = field("Namespace")
    FormatVersion = field("FormatVersion")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RowLevelPermissionDataSetTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RowLevelPermissionDataSetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFolderMembershipRequest:
    boto3_raw_data: "type_defs.CreateFolderMembershipRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    MemberId = field("MemberId")
    MemberType = field("MemberType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateFolderMembershipRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFolderMembershipRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FolderMember:
    boto3_raw_data: "type_defs.FolderMemberTypeDef" = dataclasses.field()

    MemberId = field("MemberId")
    MemberType = field("MemberType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FolderMemberTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FolderMemberTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateGroupMembershipRequest:
    boto3_raw_data: "type_defs.CreateGroupMembershipRequestTypeDef" = (
        dataclasses.field()
    )

    MemberName = field("MemberName")
    GroupName = field("GroupName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateGroupMembershipRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateGroupMembershipRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GroupMember:
    boto3_raw_data: "type_defs.GroupMemberTypeDef" = dataclasses.field()

    Arn = field("Arn")
    MemberName = field("MemberName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GroupMemberTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GroupMemberTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateGroupRequest:
    boto3_raw_data: "type_defs.CreateGroupRequestTypeDef" = dataclasses.field()

    GroupName = field("GroupName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Group:
    boto3_raw_data: "type_defs.GroupTypeDef" = dataclasses.field()

    Arn = field("Arn")
    GroupName = field("GroupName")
    Description = field("Description")
    PrincipalId = field("PrincipalId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GroupTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIAMPolicyAssignmentRequest:
    boto3_raw_data: "type_defs.CreateIAMPolicyAssignmentRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AssignmentName = field("AssignmentName")
    AssignmentStatus = field("AssignmentStatus")
    Namespace = field("Namespace")
    PolicyArn = field("PolicyArn")
    Identities = field("Identities")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateIAMPolicyAssignmentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIAMPolicyAssignmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIngestionRequest:
    boto3_raw_data: "type_defs.CreateIngestionRequestTypeDef" = dataclasses.field()

    DataSetId = field("DataSetId")
    IngestionId = field("IngestionId")
    AwsAccountId = field("AwsAccountId")
    IngestionType = field("IngestionType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateIngestionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIngestionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRoleMembershipRequest:
    boto3_raw_data: "type_defs.CreateRoleMembershipRequestTypeDef" = dataclasses.field()

    MemberName = field("MemberName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    Role = field("Role")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRoleMembershipRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRoleMembershipRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTemplateAliasRequest:
    boto3_raw_data: "type_defs.CreateTemplateAliasRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    AliasName = field("AliasName")
    TemplateVersionNumber = field("TemplateVersionNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTemplateAliasRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTemplateAliasRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateAlias:
    boto3_raw_data: "type_defs.TemplateAliasTypeDef" = dataclasses.field()

    AliasName = field("AliasName")
    Arn = field("Arn")
    TemplateVersionNumber = field("TemplateVersionNumber")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TemplateAliasTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TemplateAliasTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateThemeAliasRequest:
    boto3_raw_data: "type_defs.CreateThemeAliasRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    AliasName = field("AliasName")
    ThemeVersionNumber = field("ThemeVersionNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateThemeAliasRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateThemeAliasRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThemeAlias:
    boto3_raw_data: "type_defs.ThemeAliasTypeDef" = dataclasses.field()

    Arn = field("Arn")
    AliasName = field("AliasName")
    ThemeVersionNumber = field("ThemeVersionNumber")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ThemeAliasTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ThemeAliasTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomInstructions:
    boto3_raw_data: "type_defs.CustomInstructionsTypeDef" = dataclasses.field()

    CustomInstructionsString = field("CustomInstructionsString")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomInstructionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomInstructionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalPlacesConfiguration:
    boto3_raw_data: "type_defs.DecimalPlacesConfigurationTypeDef" = dataclasses.field()

    DecimalPlaces = field("DecimalPlaces")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DecimalPlacesConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalPlacesConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NegativeValueConfiguration:
    boto3_raw_data: "type_defs.NegativeValueConfigurationTypeDef" = dataclasses.field()

    DisplayMode = field("DisplayMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NegativeValueConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NegativeValueConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NullValueFormatConfiguration:
    boto3_raw_data: "type_defs.NullValueFormatConfigurationTypeDef" = (
        dataclasses.field()
    )

    NullString = field("NullString")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NullValueFormatConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NullValueFormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LocalNavigationConfiguration:
    boto3_raw_data: "type_defs.LocalNavigationConfigurationTypeDef" = (
        dataclasses.field()
    )

    TargetSheetId = field("TargetSheetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LocalNavigationConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LocalNavigationConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomActionURLOperation:
    boto3_raw_data: "type_defs.CustomActionURLOperationTypeDef" = dataclasses.field()

    URLTemplate = field("URLTemplate")
    URLTarget = field("URLTarget")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomActionURLOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomActionURLOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomConnectionParameters:
    boto3_raw_data: "type_defs.CustomConnectionParametersTypeDef" = dataclasses.field()

    ConnectionType = field("ConnectionType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomConnectionParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomConnectionParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomNarrativeOptions:
    boto3_raw_data: "type_defs.CustomNarrativeOptionsTypeDef" = dataclasses.field()

    Narrative = field("Narrative")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomNarrativeOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomNarrativeOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomParameterValuesOutput:
    boto3_raw_data: "type_defs.CustomParameterValuesOutputTypeDef" = dataclasses.field()

    StringValues = field("StringValues")
    IntegerValues = field("IntegerValues")
    DecimalValues = field("DecimalValues")
    DateTimeValues = field("DateTimeValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomParameterValuesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomParameterValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InputColumn:
    boto3_raw_data: "type_defs.InputColumnTypeDef" = dataclasses.field()

    Name = field("Name")
    Type = field("Type")
    SubType = field("SubType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InputColumnTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InputColumnTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataPointDrillUpDownOption:
    boto3_raw_data: "type_defs.DataPointDrillUpDownOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataPointDrillUpDownOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataPointDrillUpDownOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataPointMenuLabelOption:
    boto3_raw_data: "type_defs.DataPointMenuLabelOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataPointMenuLabelOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataPointMenuLabelOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataPointTooltipOption:
    boto3_raw_data: "type_defs.DataPointTooltipOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataPointTooltipOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataPointTooltipOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataQAEnabledOption:
    boto3_raw_data: "type_defs.DataQAEnabledOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataQAEnabledOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataQAEnabledOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataStoriesSharingOption:
    boto3_raw_data: "type_defs.DataStoriesSharingOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataStoriesSharingOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataStoriesSharingOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExecutiveSummaryOption:
    boto3_raw_data: "type_defs.ExecutiveSummaryOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExecutiveSummaryOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExecutiveSummaryOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportToCSVOption:
    boto3_raw_data: "type_defs.ExportToCSVOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExportToCSVOptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportToCSVOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportWithHiddenFieldsOption:
    boto3_raw_data: "type_defs.ExportWithHiddenFieldsOptionTypeDef" = (
        dataclasses.field()
    )

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExportWithHiddenFieldsOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportWithHiddenFieldsOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetControlsOption:
    boto3_raw_data: "type_defs.SheetControlsOptionTypeDef" = dataclasses.field()

    VisibilityState = field("VisibilityState")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SheetControlsOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetControlsOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetLayoutElementMaximizationOption:
    boto3_raw_data: "type_defs.SheetLayoutElementMaximizationOptionTypeDef" = (
        dataclasses.field()
    )

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SheetLayoutElementMaximizationOptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetLayoutElementMaximizationOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualAxisSortOption:
    boto3_raw_data: "type_defs.VisualAxisSortOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualAxisSortOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualAxisSortOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualMenuOption:
    boto3_raw_data: "type_defs.VisualMenuOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VisualMenuOptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualMenuOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardSearchFilter:
    boto3_raw_data: "type_defs.DashboardSearchFilterTypeDef" = dataclasses.field()

    Operator = field("Operator")
    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DashboardSearchFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardSearchFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardSummary:
    boto3_raw_data: "type_defs.DashboardSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DashboardId = field("DashboardId")
    Name = field("Name")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")
    PublishedVersionNumber = field("PublishedVersionNumber")
    LastPublishedTime = field("LastPublishedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DashboardSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardVersionSummary:
    boto3_raw_data: "type_defs.DashboardVersionSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    CreatedTime = field("CreatedTime")
    VersionNumber = field("VersionNumber")
    Status = field("Status")
    SourceEntityArn = field("SourceEntityArn")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DashboardVersionSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardVersionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExportHiddenFieldsOption:
    boto3_raw_data: "type_defs.ExportHiddenFieldsOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExportHiddenFieldsOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExportHiddenFieldsOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardVisualResult:
    boto3_raw_data: "type_defs.DashboardVisualResultTypeDef" = dataclasses.field()

    DashboardId = field("DashboardId")
    DashboardName = field("DashboardName")
    SheetId = field("SheetId")
    SheetName = field("SheetName")
    VisualId = field("VisualId")
    VisualTitle = field("VisualTitle")
    VisualSubtitle = field("VisualSubtitle")
    DashboardUrl = field("DashboardUrl")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DashboardVisualResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardVisualResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataAggregation:
    boto3_raw_data: "type_defs.DataAggregationTypeDef" = dataclasses.field()

    DatasetRowDateGranularity = field("DatasetRowDateGranularity")
    DefaultDateColumnName = field("DefaultDateColumnName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataAggregationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataAggregationTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataBarsOptions:
    boto3_raw_data: "type_defs.DataBarsOptionsTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    PositiveColor = field("PositiveColor")
    NegativeColor = field("NegativeColor")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataBarsOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataBarsOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataColorPaletteOutput:
    boto3_raw_data: "type_defs.DataColorPaletteOutputTypeDef" = dataclasses.field()

    Colors = field("Colors")
    MinMaxGradient = field("MinMaxGradient")
    EmptyFillColor = field("EmptyFillColor")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataColorPaletteOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataColorPaletteOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataColorPalette:
    boto3_raw_data: "type_defs.DataColorPaletteTypeDef" = dataclasses.field()

    Colors = field("Colors")
    MinMaxGradient = field("MinMaxGradient")
    EmptyFillColor = field("EmptyFillColor")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataColorPaletteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataColorPaletteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataPathLabelType:
    boto3_raw_data: "type_defs.DataPathLabelTypeTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    FieldValue = field("FieldValue")
    Visibility = field("Visibility")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataPathLabelTypeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataPathLabelTypeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FieldLabelType:
    boto3_raw_data: "type_defs.FieldLabelTypeTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    Visibility = field("Visibility")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FieldLabelTypeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FieldLabelTypeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MaximumLabelType:
    boto3_raw_data: "type_defs.MaximumLabelTypeTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MaximumLabelTypeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MaximumLabelTypeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MinimumLabelType:
    boto3_raw_data: "type_defs.MinimumLabelTypeTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MinimumLabelTypeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MinimumLabelTypeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RangeEndsLabelType:
    boto3_raw_data: "type_defs.RangeEndsLabelTypeTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RangeEndsLabelTypeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RangeEndsLabelTypeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataPathType:
    boto3_raw_data: "type_defs.DataPathTypeTypeDef" = dataclasses.field()

    PivotTableDataPathType = field("PivotTableDataPathType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataPathTypeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataPathTypeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetSearchFilter:
    boto3_raw_data: "type_defs.DataSetSearchFilterTypeDef" = dataclasses.field()

    Operator = field("Operator")
    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSetSearchFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSetSearchFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FieldFolderOutput:
    boto3_raw_data: "type_defs.FieldFolderOutputTypeDef" = dataclasses.field()

    description = field("description")
    columns = field("columns")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FieldFolderOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FieldFolderOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OutputColumn:
    boto3_raw_data: "type_defs.OutputColumnTypeDef" = dataclasses.field()

    Name = field("Name")
    Description = field("Description")
    Type = field("Type")
    SubType = field("SubType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OutputColumnTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OutputColumnTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSourceErrorInfo:
    boto3_raw_data: "type_defs.DataSourceErrorInfoTypeDef" = dataclasses.field()

    Type = field("Type")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSourceErrorInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSourceErrorInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DatabricksParameters:
    boto3_raw_data: "type_defs.DatabricksParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    SqlEndpointPath = field("SqlEndpointPath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DatabricksParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DatabricksParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExasolParameters:
    boto3_raw_data: "type_defs.ExasolParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExasolParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExasolParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImpalaParameters:
    boto3_raw_data: "type_defs.ImpalaParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    SqlEndpointPath = field("SqlEndpointPath")
    Database = field("Database")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImpalaParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImpalaParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JiraParameters:
    boto3_raw_data: "type_defs.JiraParametersTypeDef" = dataclasses.field()

    SiteBaseUrl = field("SiteBaseUrl")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.JiraParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.JiraParametersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MariaDbParameters:
    boto3_raw_data: "type_defs.MariaDbParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Database = field("Database")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MariaDbParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MariaDbParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MySqlParameters:
    boto3_raw_data: "type_defs.MySqlParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Database = field("Database")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MySqlParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MySqlParametersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OracleParameters:
    boto3_raw_data: "type_defs.OracleParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Database = field("Database")
    UseServiceName = field("UseServiceName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OracleParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OracleParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PostgreSqlParameters:
    boto3_raw_data: "type_defs.PostgreSqlParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Database = field("Database")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PostgreSqlParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PostgreSqlParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PrestoParameters:
    boto3_raw_data: "type_defs.PrestoParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Catalog = field("Catalog")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PrestoParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PrestoParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RdsParameters:
    boto3_raw_data: "type_defs.RdsParametersTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    Database = field("Database")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RdsParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RdsParametersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceNowParameters:
    boto3_raw_data: "type_defs.ServiceNowParametersTypeDef" = dataclasses.field()

    SiteBaseUrl = field("SiteBaseUrl")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ServiceNowParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceNowParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SparkParameters:
    boto3_raw_data: "type_defs.SparkParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SparkParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SparkParametersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SqlServerParameters:
    boto3_raw_data: "type_defs.SqlServerParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Database = field("Database")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SqlServerParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SqlServerParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TeradataParameters:
    boto3_raw_data: "type_defs.TeradataParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Database = field("Database")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TeradataParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TeradataParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrinoParameters:
    boto3_raw_data: "type_defs.TrinoParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Catalog = field("Catalog")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TrinoParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TrinoParametersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TwitterParameters:
    boto3_raw_data: "type_defs.TwitterParametersTypeDef" = dataclasses.field()

    Query = field("Query")
    MaxRows = field("MaxRows")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TwitterParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TwitterParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSourceSearchFilter:
    boto3_raw_data: "type_defs.DataSourceSearchFilterTypeDef" = dataclasses.field()

    Operator = field("Operator")
    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSourceSearchFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSourceSearchFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSourceSummary:
    boto3_raw_data: "type_defs.DataSourceSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSourceId = field("DataSourceId")
    Name = field("Name")
    Type = field("Type")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataSourceSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSourceSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeDatasetParameterDefaultValuesOutput:
    boto3_raw_data: "type_defs.DateTimeDatasetParameterDefaultValuesOutputTypeDef" = (
        dataclasses.field()
    )

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DateTimeDatasetParameterDefaultValuesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeDatasetParameterDefaultValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RollingDateConfiguration:
    boto3_raw_data: "type_defs.RollingDateConfigurationTypeDef" = dataclasses.field()

    Expression = field("Expression")
    DataSetIdentifier = field("DataSetIdentifier")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RollingDateConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RollingDateConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeValueWhenUnsetConfigurationOutput:
    boto3_raw_data: "type_defs.DateTimeValueWhenUnsetConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    ValueWhenUnsetOption = field("ValueWhenUnsetOption")
    CustomValue = field("CustomValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DateTimeValueWhenUnsetConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeValueWhenUnsetConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MappedDataSetParameter:
    boto3_raw_data: "type_defs.MappedDataSetParameterTypeDef" = dataclasses.field()

    DataSetIdentifier = field("DataSetIdentifier")
    DataSetParameterName = field("DataSetParameterName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MappedDataSetParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MappedDataSetParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeParameterOutput:
    boto3_raw_data: "type_defs.DateTimeParameterOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DateTimeParameterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetControlInfoIconLabelOptions:
    boto3_raw_data: "type_defs.SheetControlInfoIconLabelOptionsTypeDef" = (
        dataclasses.field()
    )

    Visibility = field("Visibility")
    InfoIconText = field("InfoIconText")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SheetControlInfoIconLabelOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetControlInfoIconLabelOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalDatasetParameterDefaultValuesOutput:
    boto3_raw_data: "type_defs.DecimalDatasetParameterDefaultValuesOutputTypeDef" = (
        dataclasses.field()
    )

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DecimalDatasetParameterDefaultValuesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalDatasetParameterDefaultValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalDatasetParameterDefaultValues:
    boto3_raw_data: "type_defs.DecimalDatasetParameterDefaultValuesTypeDef" = (
        dataclasses.field()
    )

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DecimalDatasetParameterDefaultValuesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalDatasetParameterDefaultValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalValueWhenUnsetConfiguration:
    boto3_raw_data: "type_defs.DecimalValueWhenUnsetConfigurationTypeDef" = (
        dataclasses.field()
    )

    ValueWhenUnsetOption = field("ValueWhenUnsetOption")
    CustomValue = field("CustomValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DecimalValueWhenUnsetConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalValueWhenUnsetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalParameterOutput:
    boto3_raw_data: "type_defs.DecimalParameterOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DecimalParameterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalParameter:
    boto3_raw_data: "type_defs.DecimalParameterTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DecimalParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterSelectableValuesOutput:
    boto3_raw_data: "type_defs.FilterSelectableValuesOutputTypeDef" = (
        dataclasses.field()
    )

    Values = field("Values")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterSelectableValuesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterSelectableValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterSelectableValues:
    boto3_raw_data: "type_defs.FilterSelectableValuesTypeDef" = dataclasses.field()

    Values = field("Values")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterSelectableValuesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterSelectableValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAccountCustomPermissionRequest:
    boto3_raw_data: "type_defs.DeleteAccountCustomPermissionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteAccountCustomPermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAccountCustomPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAccountCustomizationRequest:
    boto3_raw_data: "type_defs.DeleteAccountCustomizationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteAccountCustomizationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAccountCustomizationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAccountSubscriptionRequest:
    boto3_raw_data: "type_defs.DeleteAccountSubscriptionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteAccountSubscriptionRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAccountSubscriptionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAnalysisRequest:
    boto3_raw_data: "type_defs.DeleteAnalysisRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    AnalysisId = field("AnalysisId")
    RecoveryWindowInDays = field("RecoveryWindowInDays")
    ForceDeleteWithoutRecovery = field("ForceDeleteWithoutRecovery")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteAnalysisRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAnalysisRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteBrandAssignmentRequest:
    boto3_raw_data: "type_defs.DeleteBrandAssignmentRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteBrandAssignmentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteBrandAssignmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteBrandRequest:
    boto3_raw_data: "type_defs.DeleteBrandRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    BrandId = field("BrandId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteBrandRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteBrandRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCustomPermissionsRequest:
    boto3_raw_data: "type_defs.DeleteCustomPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    CustomPermissionsName = field("CustomPermissionsName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteCustomPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCustomPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDashboardRequest:
    boto3_raw_data: "type_defs.DeleteDashboardRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    VersionNumber = field("VersionNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteDashboardRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDashboardRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDataSetRefreshPropertiesRequest:
    boto3_raw_data: "type_defs.DeleteDataSetRefreshPropertiesRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteDataSetRefreshPropertiesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDataSetRefreshPropertiesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDataSetRequest:
    boto3_raw_data: "type_defs.DeleteDataSetRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteDataSetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDataSetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDataSourceRequest:
    boto3_raw_data: "type_defs.DeleteDataSourceRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSourceId = field("DataSourceId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteDataSourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDataSourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDefaultQBusinessApplicationRequest:
    boto3_raw_data: "type_defs.DeleteDefaultQBusinessApplicationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteDefaultQBusinessApplicationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDefaultQBusinessApplicationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFolderMembershipRequest:
    boto3_raw_data: "type_defs.DeleteFolderMembershipRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    MemberId = field("MemberId")
    MemberType = field("MemberType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteFolderMembershipRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFolderMembershipRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFolderRequest:
    boto3_raw_data: "type_defs.DeleteFolderRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFolderRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFolderRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteGroupMembershipRequest:
    boto3_raw_data: "type_defs.DeleteGroupMembershipRequestTypeDef" = (
        dataclasses.field()
    )

    MemberName = field("MemberName")
    GroupName = field("GroupName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteGroupMembershipRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteGroupMembershipRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteGroupRequest:
    boto3_raw_data: "type_defs.DeleteGroupRequestTypeDef" = dataclasses.field()

    GroupName = field("GroupName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIAMPolicyAssignmentRequest:
    boto3_raw_data: "type_defs.DeleteIAMPolicyAssignmentRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AssignmentName = field("AssignmentName")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteIAMPolicyAssignmentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIAMPolicyAssignmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIdentityPropagationConfigRequest:
    boto3_raw_data: "type_defs.DeleteIdentityPropagationConfigRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    Service = field("Service")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteIdentityPropagationConfigRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIdentityPropagationConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNamespaceRequest:
    boto3_raw_data: "type_defs.DeleteNamespaceRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteNamespaceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNamespaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRefreshScheduleRequest:
    boto3_raw_data: "type_defs.DeleteRefreshScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    DataSetId = field("DataSetId")
    AwsAccountId = field("AwsAccountId")
    ScheduleId = field("ScheduleId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteRefreshScheduleRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRefreshScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRoleCustomPermissionRequest:
    boto3_raw_data: "type_defs.DeleteRoleCustomPermissionRequestTypeDef" = (
        dataclasses.field()
    )

    Role = field("Role")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteRoleCustomPermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRoleCustomPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRoleMembershipRequest:
    boto3_raw_data: "type_defs.DeleteRoleMembershipRequestTypeDef" = dataclasses.field()

    MemberName = field("MemberName")
    Role = field("Role")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteRoleMembershipRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRoleMembershipRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTemplateAliasRequest:
    boto3_raw_data: "type_defs.DeleteTemplateAliasRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    AliasName = field("AliasName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTemplateAliasRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTemplateAliasRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTemplateRequest:
    boto3_raw_data: "type_defs.DeleteTemplateRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    VersionNumber = field("VersionNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTemplateRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTemplateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteThemeAliasRequest:
    boto3_raw_data: "type_defs.DeleteThemeAliasRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    AliasName = field("AliasName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteThemeAliasRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteThemeAliasRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteThemeRequest:
    boto3_raw_data: "type_defs.DeleteThemeRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    VersionNumber = field("VersionNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteThemeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteThemeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTopicRefreshScheduleRequest:
    boto3_raw_data: "type_defs.DeleteTopicRefreshScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")
    DatasetId = field("DatasetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTopicRefreshScheduleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTopicRefreshScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTopicRequest:
    boto3_raw_data: "type_defs.DeleteTopicRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTopicRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTopicRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteUserByPrincipalIdRequest:
    boto3_raw_data: "type_defs.DeleteUserByPrincipalIdRequestTypeDef" = (
        dataclasses.field()
    )

    PrincipalId = field("PrincipalId")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteUserByPrincipalIdRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteUserByPrincipalIdRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteUserCustomPermissionRequest:
    boto3_raw_data: "type_defs.DeleteUserCustomPermissionRequestTypeDef" = (
        dataclasses.field()
    )

    UserName = field("UserName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteUserCustomPermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteUserCustomPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteUserRequest:
    boto3_raw_data: "type_defs.DeleteUserRequestTypeDef" = dataclasses.field()

    UserName = field("UserName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DeleteUserRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteUserRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVPCConnectionRequest:
    boto3_raw_data: "type_defs.DeleteVPCConnectionRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    VPCConnectionId = field("VPCConnectionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteVPCConnectionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVPCConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountCustomPermissionRequest:
    boto3_raw_data: "type_defs.DescribeAccountCustomPermissionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAccountCustomPermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountCustomPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountCustomizationRequest:
    boto3_raw_data: "type_defs.DescribeAccountCustomizationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    Resolved = field("Resolved")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAccountCustomizationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountCustomizationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountSettingsRequest:
    boto3_raw_data: "type_defs.DescribeAccountSettingsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAccountSettingsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountSettingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountSubscriptionRequest:
    boto3_raw_data: "type_defs.DescribeAccountSubscriptionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAccountSubscriptionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountSubscriptionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAnalysisDefinitionRequest:
    boto3_raw_data: "type_defs.DescribeAnalysisDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AnalysisId = field("AnalysisId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAnalysisDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAnalysisDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAnalysisPermissionsRequest:
    boto3_raw_data: "type_defs.DescribeAnalysisPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AnalysisId = field("AnalysisId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAnalysisPermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAnalysisPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourcePermissionOutput:
    boto3_raw_data: "type_defs.ResourcePermissionOutputTypeDef" = dataclasses.field()

    Principal = field("Principal")
    Actions = field("Actions")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourcePermissionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourcePermissionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAnalysisRequest:
    boto3_raw_data: "type_defs.DescribeAnalysisRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    AnalysisId = field("AnalysisId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAnalysisRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAnalysisRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAssetBundleExportJobRequest:
    boto3_raw_data: "type_defs.DescribeAssetBundleExportJobRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AssetBundleExportJobId = field("AssetBundleExportJobId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAssetBundleExportJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAssetBundleExportJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAssetBundleImportJobRequest:
    boto3_raw_data: "type_defs.DescribeAssetBundleImportJobRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AssetBundleImportJobId = field("AssetBundleImportJobId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAssetBundleImportJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAssetBundleImportJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeBrandAssignmentRequest:
    boto3_raw_data: "type_defs.DescribeBrandAssignmentRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeBrandAssignmentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeBrandAssignmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeBrandPublishedVersionRequest:
    boto3_raw_data: "type_defs.DescribeBrandPublishedVersionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    BrandId = field("BrandId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeBrandPublishedVersionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeBrandPublishedVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeBrandRequest:
    boto3_raw_data: "type_defs.DescribeBrandRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    BrandId = field("BrandId")
    VersionId = field("VersionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeBrandRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeBrandRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCustomPermissionsRequest:
    boto3_raw_data: "type_defs.DescribeCustomPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    CustomPermissionsName = field("CustomPermissionsName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeCustomPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCustomPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardDefinitionRequest:
    boto3_raw_data: "type_defs.DescribeDashboardDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    VersionNumber = field("VersionNumber")
    AliasName = field("AliasName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardPermissionsRequest:
    boto3_raw_data: "type_defs.DescribeDashboardPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardPermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardRequest:
    boto3_raw_data: "type_defs.DescribeDashboardRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    VersionNumber = field("VersionNumber")
    AliasName = field("AliasName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDashboardRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardSnapshotJobRequest:
    boto3_raw_data: "type_defs.DescribeDashboardSnapshotJobRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    SnapshotJobId = field("SnapshotJobId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardSnapshotJobRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardSnapshotJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardSnapshotJobResultRequest:
    boto3_raw_data: "type_defs.DescribeDashboardSnapshotJobResultRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    SnapshotJobId = field("SnapshotJobId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardSnapshotJobResultRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardSnapshotJobResultRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotJobErrorInfo:
    boto3_raw_data: "type_defs.SnapshotJobErrorInfoTypeDef" = dataclasses.field()

    ErrorMessage = field("ErrorMessage")
    ErrorType = field("ErrorType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotJobErrorInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotJobErrorInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardsQAConfigurationRequest:
    boto3_raw_data: "type_defs.DescribeDashboardsQAConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardsQAConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardsQAConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSetPermissionsRequest:
    boto3_raw_data: "type_defs.DescribeDataSetPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDataSetPermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSetPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSetRefreshPropertiesRequest:
    boto3_raw_data: "type_defs.DescribeDataSetRefreshPropertiesRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDataSetRefreshPropertiesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSetRefreshPropertiesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSetRequest:
    boto3_raw_data: "type_defs.DescribeDataSetRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDataSetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSourcePermissionsRequest:
    boto3_raw_data: "type_defs.DescribeDataSourcePermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DataSourceId = field("DataSourceId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDataSourcePermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSourcePermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSourceRequest:
    boto3_raw_data: "type_defs.DescribeDataSourceRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSourceId = field("DataSourceId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDataSourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDefaultQBusinessApplicationRequest:
    boto3_raw_data: "type_defs.DescribeDefaultQBusinessApplicationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDefaultQBusinessApplicationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDefaultQBusinessApplicationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PaginatorConfig:
    boto3_raw_data: "type_defs.PaginatorConfigTypeDef" = dataclasses.field()

    MaxItems = field("MaxItems")
    PageSize = field("PageSize")
    StartingToken = field("StartingToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PaginatorConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PaginatorConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFolderPermissionsRequest:
    boto3_raw_data: "type_defs.DescribeFolderPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    Namespace = field("Namespace")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeFolderPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFolderPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFolderRequest:
    boto3_raw_data: "type_defs.DescribeFolderRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFolderRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFolderRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFolderResolvedPermissionsRequest:
    boto3_raw_data: "type_defs.DescribeFolderResolvedPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    Namespace = field("Namespace")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFolderResolvedPermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFolderResolvedPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Folder:
    boto3_raw_data: "type_defs.FolderTypeDef" = dataclasses.field()

    FolderId = field("FolderId")
    Arn = field("Arn")
    Name = field("Name")
    FolderType = field("FolderType")
    FolderPath = field("FolderPath")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")
    SharingModel = field("SharingModel")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FolderTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FolderTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeGroupMembershipRequest:
    boto3_raw_data: "type_defs.DescribeGroupMembershipRequestTypeDef" = (
        dataclasses.field()
    )

    MemberName = field("MemberName")
    GroupName = field("GroupName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeGroupMembershipRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeGroupMembershipRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeGroupRequest:
    boto3_raw_data: "type_defs.DescribeGroupRequestTypeDef" = dataclasses.field()

    GroupName = field("GroupName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIAMPolicyAssignmentRequest:
    boto3_raw_data: "type_defs.DescribeIAMPolicyAssignmentRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AssignmentName = field("AssignmentName")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIAMPolicyAssignmentRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIAMPolicyAssignmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IAMPolicyAssignment:
    boto3_raw_data: "type_defs.IAMPolicyAssignmentTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    AssignmentId = field("AssignmentId")
    AssignmentName = field("AssignmentName")
    PolicyArn = field("PolicyArn")
    Identities = field("Identities")
    AssignmentStatus = field("AssignmentStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IAMPolicyAssignmentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IAMPolicyAssignmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIngestionRequest:
    boto3_raw_data: "type_defs.DescribeIngestionRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")
    IngestionId = field("IngestionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIngestionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIngestionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpRestrictionRequest:
    boto3_raw_data: "type_defs.DescribeIpRestrictionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIpRestrictionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpRestrictionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeKeyRegistrationRequest:
    boto3_raw_data: "type_defs.DescribeKeyRegistrationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DefaultKeyOnly = field("DefaultKeyOnly")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeKeyRegistrationRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeKeyRegistrationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class QDataKey:
    boto3_raw_data: "type_defs.QDataKeyTypeDef" = dataclasses.field()

    QDataKeyArn = field("QDataKeyArn")
    QDataKeyType = field("QDataKeyType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.QDataKeyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.QDataKeyTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisteredCustomerManagedKey:
    boto3_raw_data: "type_defs.RegisteredCustomerManagedKeyTypeDef" = (
        dataclasses.field()
    )

    KeyArn = field("KeyArn")
    DefaultKey = field("DefaultKey")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RegisteredCustomerManagedKeyTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisteredCustomerManagedKeyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNamespaceRequest:
    boto3_raw_data: "type_defs.DescribeNamespaceRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeNamespaceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNamespaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeQPersonalizationConfigurationRequest:
    boto3_raw_data: "type_defs.DescribeQPersonalizationConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeQPersonalizationConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeQPersonalizationConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeQuickSightQSearchConfigurationRequest:
    boto3_raw_data: "type_defs.DescribeQuickSightQSearchConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeQuickSightQSearchConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeQuickSightQSearchConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRefreshScheduleRequest:
    boto3_raw_data: "type_defs.DescribeRefreshScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")
    ScheduleId = field("ScheduleId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeRefreshScheduleRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRefreshScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRoleCustomPermissionRequest:
    boto3_raw_data: "type_defs.DescribeRoleCustomPermissionRequestTypeDef" = (
        dataclasses.field()
    )

    Role = field("Role")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeRoleCustomPermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRoleCustomPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTemplateAliasRequest:
    boto3_raw_data: "type_defs.DescribeTemplateAliasRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    AliasName = field("AliasName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTemplateAliasRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTemplateAliasRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTemplateDefinitionRequest:
    boto3_raw_data: "type_defs.DescribeTemplateDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    VersionNumber = field("VersionNumber")
    AliasName = field("AliasName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTemplateDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTemplateDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTemplatePermissionsRequest:
    boto3_raw_data: "type_defs.DescribeTemplatePermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTemplatePermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTemplatePermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTemplateRequest:
    boto3_raw_data: "type_defs.DescribeTemplateRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    VersionNumber = field("VersionNumber")
    AliasName = field("AliasName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTemplateRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTemplateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeThemeAliasRequest:
    boto3_raw_data: "type_defs.DescribeThemeAliasRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    AliasName = field("AliasName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeThemeAliasRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeThemeAliasRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeThemePermissionsRequest:
    boto3_raw_data: "type_defs.DescribeThemePermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeThemePermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeThemePermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeThemeRequest:
    boto3_raw_data: "type_defs.DescribeThemeRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    VersionNumber = field("VersionNumber")
    AliasName = field("AliasName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeThemeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeThemeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTopicPermissionsRequest:
    boto3_raw_data: "type_defs.DescribeTopicPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeTopicPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTopicPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTopicRefreshRequest:
    boto3_raw_data: "type_defs.DescribeTopicRefreshRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")
    RefreshId = field("RefreshId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTopicRefreshRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTopicRefreshRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicRefreshDetails:
    boto3_raw_data: "type_defs.TopicRefreshDetailsTypeDef" = dataclasses.field()

    RefreshArn = field("RefreshArn")
    RefreshId = field("RefreshId")
    RefreshStatus = field("RefreshStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicRefreshDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicRefreshDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTopicRefreshScheduleRequest:
    boto3_raw_data: "type_defs.DescribeTopicRefreshScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")
    DatasetId = field("DatasetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTopicRefreshScheduleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTopicRefreshScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicRefreshScheduleOutput:
    boto3_raw_data: "type_defs.TopicRefreshScheduleOutputTypeDef" = dataclasses.field()

    IsEnabled = field("IsEnabled")
    BasedOnSpiceSchedule = field("BasedOnSpiceSchedule")
    StartingAt = field("StartingAt")
    Timezone = field("Timezone")
    RepeatAt = field("RepeatAt")
    TopicScheduleType = field("TopicScheduleType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicRefreshScheduleOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicRefreshScheduleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTopicRequest:
    boto3_raw_data: "type_defs.DescribeTopicRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTopicRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTopicRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeUserRequest:
    boto3_raw_data: "type_defs.DescribeUserRequestTypeDef" = dataclasses.field()

    UserName = field("UserName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeUserRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeUserRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class User:
    boto3_raw_data: "type_defs.UserTypeDef" = dataclasses.field()

    Arn = field("Arn")
    UserName = field("UserName")
    Email = field("Email")
    Role = field("Role")
    IdentityType = field("IdentityType")
    Active = field("Active")
    PrincipalId = field("PrincipalId")
    CustomPermissionsName = field("CustomPermissionsName")
    ExternalLoginFederationProviderType = field("ExternalLoginFederationProviderType")
    ExternalLoginFederationProviderUrl = field("ExternalLoginFederationProviderUrl")
    ExternalLoginId = field("ExternalLoginId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UserTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UserTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVPCConnectionRequest:
    boto3_raw_data: "type_defs.DescribeVPCConnectionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    VPCConnectionId = field("VPCConnectionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeVPCConnectionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVPCConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NegativeFormat:
    boto3_raw_data: "type_defs.NegativeFormatTypeDef" = dataclasses.field()

    Prefix = field("Prefix")
    Suffix = field("Suffix")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NegativeFormatTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NegativeFormatTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DonutCenterOptions:
    boto3_raw_data: "type_defs.DonutCenterOptionsTypeDef" = dataclasses.field()

    LabelVisibility = field("LabelVisibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DonutCenterOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DonutCenterOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListControlSelectAllOptions:
    boto3_raw_data: "type_defs.ListControlSelectAllOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListControlSelectAllOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListControlSelectAllOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ErrorInfo:
    boto3_raw_data: "type_defs.ErrorInfoTypeDef" = dataclasses.field()

    Type = field("Type")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ErrorInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ErrorInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExcludePeriodConfiguration:
    boto3_raw_data: "type_defs.ExcludePeriodConfigurationTypeDef" = dataclasses.field()

    Amount = field("Amount")
    Granularity = field("Granularity")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExcludePeriodConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExcludePeriodConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FailedKeyRegistrationEntry:
    boto3_raw_data: "type_defs.FailedKeyRegistrationEntryTypeDef" = dataclasses.field()

    Message = field("Message")
    StatusCode = field("StatusCode")
    SenderFault = field("SenderFault")
    KeyArn = field("KeyArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FailedKeyRegistrationEntryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FailedKeyRegistrationEntryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FieldFolder:
    boto3_raw_data: "type_defs.FieldFolderTypeDef" = dataclasses.field()

    description = field("description")
    columns = field("columns")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FieldFolderTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FieldFolderTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FieldSort:
    boto3_raw_data: "type_defs.FieldSortTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    Direction = field("Direction")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FieldSortTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FieldSortTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FieldTooltipItem:
    boto3_raw_data: "type_defs.FieldTooltipItemTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    Label = field("Label")
    Visibility = field("Visibility")
    TooltipTarget = field("TooltipTarget")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FieldTooltipItemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FieldTooltipItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapStyleOptions:
    boto3_raw_data: "type_defs.GeospatialMapStyleOptionsTypeDef" = dataclasses.field()

    BaseMapStyle = field("BaseMapStyle")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialMapStyleOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapStyleOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Identifier:
    boto3_raw_data: "type_defs.IdentifierTypeDef" = dataclasses.field()

    Identity = field("Identity")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IdentifierTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IdentifierTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SameSheetTargetVisualConfigurationOutput:
    boto3_raw_data: "type_defs.SameSheetTargetVisualConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    TargetVisuals = field("TargetVisuals")
    TargetVisualOptions = field("TargetVisualOptions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SameSheetTargetVisualConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SameSheetTargetVisualConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SameSheetTargetVisualConfiguration:
    boto3_raw_data: "type_defs.SameSheetTargetVisualConfigurationTypeDef" = (
        dataclasses.field()
    )

    TargetVisuals = field("TargetVisuals")
    TargetVisualOptions = field("TargetVisualOptions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SameSheetTargetVisualConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SameSheetTargetVisualConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterOperation:
    boto3_raw_data: "type_defs.FilterOperationTypeDef" = dataclasses.field()

    ConditionExpression = field("ConditionExpression")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterOperationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilterOperationTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FolderSearchFilter:
    boto3_raw_data: "type_defs.FolderSearchFilterTypeDef" = dataclasses.field()

    Operator = field("Operator")
    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FolderSearchFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FolderSearchFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FolderSummary:
    boto3_raw_data: "type_defs.FolderSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    FolderId = field("FolderId")
    Name = field("Name")
    FolderType = field("FolderType")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")
    SharingModel = field("SharingModel")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FolderSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FolderSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FontSize:
    boto3_raw_data: "type_defs.FontSizeTypeDef" = dataclasses.field()

    Relative = field("Relative")
    Absolute = field("Absolute")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FontSizeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FontSizeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FontWeight:
    boto3_raw_data: "type_defs.FontWeightTypeDef" = dataclasses.field()

    Name = field("Name")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FontWeightTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FontWeightTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Font:
    boto3_raw_data: "type_defs.FontTypeDef" = dataclasses.field()

    FontFamily = field("FontFamily")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FontTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FontTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeBasedForecastProperties:
    boto3_raw_data: "type_defs.TimeBasedForecastPropertiesTypeDef" = dataclasses.field()

    PeriodsForward = field("PeriodsForward")
    PeriodsBackward = field("PeriodsBackward")
    UpperBoundary = field("UpperBoundary")
    LowerBoundary = field("LowerBoundary")
    PredictionInterval = field("PredictionInterval")
    Seasonality = field("Seasonality")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TimeBasedForecastPropertiesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeBasedForecastPropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WhatIfPointScenarioOutput:
    boto3_raw_data: "type_defs.WhatIfPointScenarioOutputTypeDef" = dataclasses.field()

    Date = field("Date")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WhatIfPointScenarioOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WhatIfPointScenarioOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WhatIfRangeScenarioOutput:
    boto3_raw_data: "type_defs.WhatIfRangeScenarioOutputTypeDef" = dataclasses.field()

    StartDate = field("StartDate")
    EndDate = field("EndDate")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WhatIfRangeScenarioOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WhatIfRangeScenarioOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormLayoutScreenCanvasSizeOptions:
    boto3_raw_data: "type_defs.FreeFormLayoutScreenCanvasSizeOptionsTypeDef" = (
        dataclasses.field()
    )

    OptimizedViewPortWidth = field("OptimizedViewPortWidth")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FreeFormLayoutScreenCanvasSizeOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormLayoutScreenCanvasSizeOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormLayoutElementBackgroundStyle:
    boto3_raw_data: "type_defs.FreeFormLayoutElementBackgroundStyleTypeDef" = (
        dataclasses.field()
    )

    Visibility = field("Visibility")
    Color = field("Color")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FreeFormLayoutElementBackgroundStyleTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormLayoutElementBackgroundStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormLayoutElementBorderStyle:
    boto3_raw_data: "type_defs.FreeFormLayoutElementBorderStyleTypeDef" = (
        dataclasses.field()
    )

    Visibility = field("Visibility")
    Color = field("Color")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FreeFormLayoutElementBorderStyleTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormLayoutElementBorderStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LoadingAnimation:
    boto3_raw_data: "type_defs.LoadingAnimationTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LoadingAnimationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LoadingAnimationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartColorConfiguration:
    boto3_raw_data: "type_defs.GaugeChartColorConfigurationTypeDef" = (
        dataclasses.field()
    )

    ForegroundColor = field("ForegroundColor")
    BackgroundColor = field("BackgroundColor")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GaugeChartColorConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartColorConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SessionTag:
    boto3_raw_data: "type_defs.SessionTagTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SessionTagTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SessionTagTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeneratedAnswerResult:
    boto3_raw_data: "type_defs.GeneratedAnswerResultTypeDef" = dataclasses.field()

    QuestionText = field("QuestionText")
    AnswerStatus = field("AnswerStatus")
    TopicId = field("TopicId")
    TopicName = field("TopicName")
    Restatement = field("Restatement")
    QuestionId = field("QuestionId")
    AnswerId = field("AnswerId")
    QuestionUrl = field("QuestionUrl")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeneratedAnswerResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeneratedAnswerResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeoSpatialColumnGroup:
    boto3_raw_data: "type_defs.GeoSpatialColumnGroupTypeDef" = dataclasses.field()

    Name = field("Name")
    Columns = field("Columns")
    CountryCode = field("CountryCode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeoSpatialColumnGroupTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeoSpatialColumnGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialCategoricalDataColor:
    boto3_raw_data: "type_defs.GeospatialCategoricalDataColorTypeDef" = (
        dataclasses.field()
    )

    Color = field("Color")
    DataValue = field("DataValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialCategoricalDataColorTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialCategoricalDataColorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialCircleRadius:
    boto3_raw_data: "type_defs.GeospatialCircleRadiusTypeDef" = dataclasses.field()

    Radius = field("Radius")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialCircleRadiusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialCircleRadiusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLineWidth:
    boto3_raw_data: "type_defs.GeospatialLineWidthTypeDef" = dataclasses.field()

    LineWidth = field("LineWidth")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLineWidthTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLineWidthTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialSolidColor:
    boto3_raw_data: "type_defs.GeospatialSolidColorTypeDef" = dataclasses.field()

    Color = field("Color")
    State = field("State")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialSolidColorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialSolidColorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialCoordinateBounds:
    boto3_raw_data: "type_defs.GeospatialCoordinateBoundsTypeDef" = dataclasses.field()

    North = field("North")
    South = field("South")
    West = field("West")
    East = field("East")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialCoordinateBoundsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialCoordinateBoundsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialStaticFileSource:
    boto3_raw_data: "type_defs.GeospatialStaticFileSourceTypeDef" = dataclasses.field()

    StaticFileId = field("StaticFileId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialStaticFileSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialStaticFileSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialGradientStepColor:
    boto3_raw_data: "type_defs.GeospatialGradientStepColorTypeDef" = dataclasses.field()

    Color = field("Color")
    DataValue = field("DataValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialGradientStepColorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialGradientStepColorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialHeatmapDataColor:
    boto3_raw_data: "type_defs.GeospatialHeatmapDataColorTypeDef" = dataclasses.field()

    Color = field("Color")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialHeatmapDataColorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialHeatmapDataColorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapStyle:
    boto3_raw_data: "type_defs.GeospatialMapStyleTypeDef" = dataclasses.field()

    BaseMapStyle = field("BaseMapStyle")
    BackgroundColor = field("BackgroundColor")
    BaseMapVisibility = field("BaseMapVisibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialMapStyleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialNullSymbolStyle:
    boto3_raw_data: "type_defs.GeospatialNullSymbolStyleTypeDef" = dataclasses.field()

    FillColor = field("FillColor")
    StrokeColor = field("StrokeColor")
    StrokeWidth = field("StrokeWidth")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialNullSymbolStyleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialNullSymbolStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetDashboardEmbedUrlRequest:
    boto3_raw_data: "type_defs.GetDashboardEmbedUrlRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    IdentityType = field("IdentityType")
    SessionLifetimeInMinutes = field("SessionLifetimeInMinutes")
    UndoRedoDisabled = field("UndoRedoDisabled")
    ResetDisabled = field("ResetDisabled")
    StatePersistenceEnabled = field("StatePersistenceEnabled")
    UserArn = field("UserArn")
    Namespace = field("Namespace")
    AdditionalDashboardIds = field("AdditionalDashboardIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetDashboardEmbedUrlRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetDashboardEmbedUrlRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSessionEmbedUrlRequest:
    boto3_raw_data: "type_defs.GetSessionEmbedUrlRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    EntryPoint = field("EntryPoint")
    SessionLifetimeInMinutes = field("SessionLifetimeInMinutes")
    UserArn = field("UserArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetSessionEmbedUrlRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSessionEmbedUrlRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableBorderOptions:
    boto3_raw_data: "type_defs.TableBorderOptionsTypeDef" = dataclasses.field()

    Color = field("Color")
    Thickness = field("Thickness")
    Style = field("Style")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableBorderOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableBorderOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GradientStop:
    boto3_raw_data: "type_defs.GradientStopTypeDef" = dataclasses.field()

    GradientOffset = field("GradientOffset")
    DataValue = field("DataValue")
    Color = field("Color")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GradientStopTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GradientStopTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GridLayoutScreenCanvasSizeOptions:
    boto3_raw_data: "type_defs.GridLayoutScreenCanvasSizeOptionsTypeDef" = (
        dataclasses.field()
    )

    ResizeOption = field("ResizeOption")
    OptimizedViewPortWidth = field("OptimizedViewPortWidth")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GridLayoutScreenCanvasSizeOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GridLayoutScreenCanvasSizeOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GridLayoutElement:
    boto3_raw_data: "type_defs.GridLayoutElementTypeDef" = dataclasses.field()

    ElementId = field("ElementId")
    ElementType = field("ElementType")
    ColumnSpan = field("ColumnSpan")
    RowSpan = field("RowSpan")
    ColumnIndex = field("ColumnIndex")
    RowIndex = field("RowIndex")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GridLayoutElementTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GridLayoutElementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GroupSearchFilter:
    boto3_raw_data: "type_defs.GroupSearchFilterTypeDef" = dataclasses.field()

    Operator = field("Operator")
    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GroupSearchFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GroupSearchFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GutterStyle:
    boto3_raw_data: "type_defs.GutterStyleTypeDef" = dataclasses.field()

    Show = field("Show")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GutterStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GutterStyleTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IAMPolicyAssignmentSummary:
    boto3_raw_data: "type_defs.IAMPolicyAssignmentSummaryTypeDef" = dataclasses.field()

    AssignmentName = field("AssignmentName")
    AssignmentStatus = field("AssignmentStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IAMPolicyAssignmentSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IAMPolicyAssignmentSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageSource:
    boto3_raw_data: "type_defs.ImageSourceTypeDef" = dataclasses.field()

    PublicUrl = field("PublicUrl")
    S3Uri = field("S3Uri")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageSourceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageMenuOption:
    boto3_raw_data: "type_defs.ImageMenuOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageMenuOptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageMenuOptionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LookbackWindow:
    boto3_raw_data: "type_defs.LookbackWindowTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")
    Size = field("Size")
    SizeUnit = field("SizeUnit")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LookbackWindowTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LookbackWindowTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class QueueInfo:
    boto3_raw_data: "type_defs.QueueInfoTypeDef" = dataclasses.field()

    WaitingOnIngestion = field("WaitingOnIngestion")
    QueuedIngestion = field("QueuedIngestion")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.QueueInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.QueueInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RowInfo:
    boto3_raw_data: "type_defs.RowInfoTypeDef" = dataclasses.field()

    RowsIngested = field("RowsIngested")
    RowsDropped = field("RowsDropped")
    TotalRowsInDataset = field("TotalRowsInDataset")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RowInfoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RowInfoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerDatasetParameterDefaultValuesOutput:
    boto3_raw_data: "type_defs.IntegerDatasetParameterDefaultValuesOutputTypeDef" = (
        dataclasses.field()
    )

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.IntegerDatasetParameterDefaultValuesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerDatasetParameterDefaultValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerDatasetParameterDefaultValues:
    boto3_raw_data: "type_defs.IntegerDatasetParameterDefaultValuesTypeDef" = (
        dataclasses.field()
    )

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.IntegerDatasetParameterDefaultValuesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerDatasetParameterDefaultValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerValueWhenUnsetConfiguration:
    boto3_raw_data: "type_defs.IntegerValueWhenUnsetConfigurationTypeDef" = (
        dataclasses.field()
    )

    ValueWhenUnsetOption = field("ValueWhenUnsetOption")
    CustomValue = field("CustomValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.IntegerValueWhenUnsetConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerValueWhenUnsetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerParameterOutput:
    boto3_raw_data: "type_defs.IntegerParameterOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IntegerParameterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerParameter:
    boto3_raw_data: "type_defs.IntegerParameterTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IntegerParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JoinKeyProperties:
    boto3_raw_data: "type_defs.JoinKeyPropertiesTypeDef" = dataclasses.field()

    UniqueKey = field("UniqueKey")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.JoinKeyPropertiesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.JoinKeyPropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPISparklineOptions:
    boto3_raw_data: "type_defs.KPISparklineOptionsTypeDef" = dataclasses.field()

    Type = field("Type")
    Visibility = field("Visibility")
    Color = field("Color")
    TooltipVisibility = field("TooltipVisibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KPISparklineOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPISparklineOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProgressBarOptions:
    boto3_raw_data: "type_defs.ProgressBarOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProgressBarOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProgressBarOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecondaryValueOptions:
    boto3_raw_data: "type_defs.SecondaryValueOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecondaryValueOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecondaryValueOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TrendArrowOptions:
    boto3_raw_data: "type_defs.TrendArrowOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TrendArrowOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TrendArrowOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIVisualStandardLayout:
    boto3_raw_data: "type_defs.KPIVisualStandardLayoutTypeDef" = dataclasses.field()

    Type = field("Type")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KPIVisualStandardLayoutTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIVisualStandardLayoutTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartLineStyleSettings:
    boto3_raw_data: "type_defs.LineChartLineStyleSettingsTypeDef" = dataclasses.field()

    LineVisibility = field("LineVisibility")
    LineInterpolation = field("LineInterpolation")
    LineStyle = field("LineStyle")
    LineWidth = field("LineWidth")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineChartLineStyleSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartLineStyleSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartMarkerStyleSettings:
    boto3_raw_data: "type_defs.LineChartMarkerStyleSettingsTypeDef" = (
        dataclasses.field()
    )

    MarkerVisibility = field("MarkerVisibility")
    MarkerShape = field("MarkerShape")
    MarkerSize = field("MarkerSize")
    MarkerColor = field("MarkerColor")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineChartMarkerStyleSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartMarkerStyleSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MissingDataConfiguration:
    boto3_raw_data: "type_defs.MissingDataConfigurationTypeDef" = dataclasses.field()

    TreatmentOption = field("TreatmentOption")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MissingDataConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MissingDataConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourcePermission:
    boto3_raw_data: "type_defs.ResourcePermissionTypeDef" = dataclasses.field()

    Principal = field("Principal")
    Actions = field("Actions")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourcePermissionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourcePermissionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAnalysesRequest:
    boto3_raw_data: "type_defs.ListAnalysesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAnalysesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAnalysesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAssetBundleExportJobsRequest:
    boto3_raw_data: "type_defs.ListAssetBundleExportJobsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListAssetBundleExportJobsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAssetBundleExportJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAssetBundleImportJobsRequest:
    boto3_raw_data: "type_defs.ListAssetBundleImportJobsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListAssetBundleImportJobsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAssetBundleImportJobsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListBrandsRequest:
    boto3_raw_data: "type_defs.ListBrandsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListBrandsRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListBrandsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListControlSearchOptions:
    boto3_raw_data: "type_defs.ListControlSearchOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListControlSearchOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListControlSearchOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCustomPermissionsRequest:
    boto3_raw_data: "type_defs.ListCustomPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListCustomPermissionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCustomPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDashboardVersionsRequest:
    boto3_raw_data: "type_defs.ListDashboardVersionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDashboardVersionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDashboardVersionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDashboardsRequest:
    boto3_raw_data: "type_defs.ListDashboardsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDashboardsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDashboardsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDataSetsRequest:
    boto3_raw_data: "type_defs.ListDataSetsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDataSetsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDataSetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDataSourcesRequest:
    boto3_raw_data: "type_defs.ListDataSourcesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDataSourcesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDataSourcesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFolderMembersRequest:
    boto3_raw_data: "type_defs.ListFolderMembersRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListFolderMembersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFolderMembersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MemberIdArnPair:
    boto3_raw_data: "type_defs.MemberIdArnPairTypeDef" = dataclasses.field()

    MemberId = field("MemberId")
    MemberArn = field("MemberArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MemberIdArnPairTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MemberIdArnPairTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFoldersForResourceRequest:
    boto3_raw_data: "type_defs.ListFoldersForResourceRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    ResourceArn = field("ResourceArn")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListFoldersForResourceRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFoldersForResourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFoldersRequest:
    boto3_raw_data: "type_defs.ListFoldersRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListFoldersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFoldersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListGroupMembershipsRequest:
    boto3_raw_data: "type_defs.ListGroupMembershipsRequestTypeDef" = dataclasses.field()

    GroupName = field("GroupName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListGroupMembershipsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListGroupMembershipsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListGroupsRequest:
    boto3_raw_data: "type_defs.ListGroupsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListGroupsRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIAMPolicyAssignmentsForUserRequest:
    boto3_raw_data: "type_defs.ListIAMPolicyAssignmentsForUserRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    UserName = field("UserName")
    Namespace = field("Namespace")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListIAMPolicyAssignmentsForUserRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIAMPolicyAssignmentsForUserRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIAMPolicyAssignmentsRequest:
    boto3_raw_data: "type_defs.ListIAMPolicyAssignmentsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    AssignmentStatus = field("AssignmentStatus")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListIAMPolicyAssignmentsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIAMPolicyAssignmentsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIdentityPropagationConfigsRequest:
    boto3_raw_data: "type_defs.ListIdentityPropagationConfigsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListIdentityPropagationConfigsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIdentityPropagationConfigsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIngestionsRequest:
    boto3_raw_data: "type_defs.ListIngestionsRequestTypeDef" = dataclasses.field()

    DataSetId = field("DataSetId")
    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListIngestionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIngestionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListNamespacesRequest:
    boto3_raw_data: "type_defs.ListNamespacesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListNamespacesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListNamespacesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListRefreshSchedulesRequest:
    boto3_raw_data: "type_defs.ListRefreshSchedulesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListRefreshSchedulesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListRefreshSchedulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListRoleMembershipsRequest:
    boto3_raw_data: "type_defs.ListRoleMembershipsRequestTypeDef" = dataclasses.field()

    Role = field("Role")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListRoleMembershipsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListRoleMembershipsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTagsForResourceRequest:
    boto3_raw_data: "type_defs.ListTagsForResourceRequestTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTagsForResourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTagsForResourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTemplateAliasesRequest:
    boto3_raw_data: "type_defs.ListTemplateAliasesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTemplateAliasesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTemplateAliasesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTemplateVersionsRequest:
    boto3_raw_data: "type_defs.ListTemplateVersionsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTemplateVersionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTemplateVersionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateVersionSummary:
    boto3_raw_data: "type_defs.TemplateVersionSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    VersionNumber = field("VersionNumber")
    CreatedTime = field("CreatedTime")
    Status = field("Status")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TemplateVersionSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TemplateVersionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTemplatesRequest:
    boto3_raw_data: "type_defs.ListTemplatesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTemplatesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTemplatesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateSummary:
    boto3_raw_data: "type_defs.TemplateSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    TemplateId = field("TemplateId")
    Name = field("Name")
    LatestVersionNumber = field("LatestVersionNumber")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TemplateSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TemplateSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListThemeAliasesRequest:
    boto3_raw_data: "type_defs.ListThemeAliasesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListThemeAliasesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListThemeAliasesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListThemeVersionsRequest:
    boto3_raw_data: "type_defs.ListThemeVersionsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListThemeVersionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListThemeVersionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThemeVersionSummary:
    boto3_raw_data: "type_defs.ThemeVersionSummaryTypeDef" = dataclasses.field()

    VersionNumber = field("VersionNumber")
    Arn = field("Arn")
    Description = field("Description")
    CreatedTime = field("CreatedTime")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ThemeVersionSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThemeVersionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListThemesRequest:
    boto3_raw_data: "type_defs.ListThemesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListThemesRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListThemesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThemeSummary:
    boto3_raw_data: "type_defs.ThemeSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Name = field("Name")
    ThemeId = field("ThemeId")
    LatestVersionNumber = field("LatestVersionNumber")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ThemeSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ThemeSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTopicRefreshSchedulesRequest:
    boto3_raw_data: "type_defs.ListTopicRefreshSchedulesRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListTopicRefreshSchedulesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTopicRefreshSchedulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTopicReviewedAnswersRequest:
    boto3_raw_data: "type_defs.ListTopicReviewedAnswersRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListTopicReviewedAnswersRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTopicReviewedAnswersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTopicsRequest:
    boto3_raw_data: "type_defs.ListTopicsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListTopicsRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTopicsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicSummary:
    boto3_raw_data: "type_defs.TopicSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    TopicId = field("TopicId")
    Name = field("Name")
    UserExperienceVersion = field("UserExperienceVersion")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUserGroupsRequest:
    boto3_raw_data: "type_defs.ListUserGroupsRequestTypeDef" = dataclasses.field()

    UserName = field("UserName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListUserGroupsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUserGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUsersRequest:
    boto3_raw_data: "type_defs.ListUsersRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListUsersRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUsersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListVPCConnectionsRequest:
    boto3_raw_data: "type_defs.ListVPCConnectionsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListVPCConnectionsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListVPCConnectionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LongFormatText:
    boto3_raw_data: "type_defs.LongFormatTextTypeDef" = dataclasses.field()

    PlainText = field("PlainText")
    RichText = field("RichText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LongFormatTextTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LongFormatTextTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ManifestFileLocation:
    boto3_raw_data: "type_defs.ManifestFileLocationTypeDef" = dataclasses.field()

    Bucket = field("Bucket")
    Key = field("Key")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ManifestFileLocationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ManifestFileLocationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MarginStyle:
    boto3_raw_data: "type_defs.MarginStyleTypeDef" = dataclasses.field()

    Show = field("Show")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MarginStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MarginStyleTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NamedEntityDefinitionMetricOutput:
    boto3_raw_data: "type_defs.NamedEntityDefinitionMetricOutputTypeDef" = (
        dataclasses.field()
    )

    Aggregation = field("Aggregation")
    AggregationFunctionParameters = field("AggregationFunctionParameters")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.NamedEntityDefinitionMetricOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NamedEntityDefinitionMetricOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NamedEntityDefinitionMetric:
    boto3_raw_data: "type_defs.NamedEntityDefinitionMetricTypeDef" = dataclasses.field()

    Aggregation = field("Aggregation")
    AggregationFunctionParameters = field("AggregationFunctionParameters")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NamedEntityDefinitionMetricTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NamedEntityDefinitionMetricTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NamedEntityRef:
    boto3_raw_data: "type_defs.NamedEntityRefTypeDef" = dataclasses.field()

    NamedEntityName = field("NamedEntityName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NamedEntityRefTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NamedEntityRefTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NamespaceError:
    boto3_raw_data: "type_defs.NamespaceErrorTypeDef" = dataclasses.field()

    Type = field("Type")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NamespaceErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NamespaceErrorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkInterface:
    boto3_raw_data: "type_defs.NetworkInterfaceTypeDef" = dataclasses.field()

    SubnetId = field("SubnetId")
    AvailabilityZone = field("AvailabilityZone")
    ErrorMessage = field("ErrorMessage")
    Status = field("Status")
    NetworkInterfaceId = field("NetworkInterfaceId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkInterfaceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkInterfaceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NewDefaultValuesOutput:
    boto3_raw_data: "type_defs.NewDefaultValuesOutputTypeDef" = dataclasses.field()

    StringStaticValues = field("StringStaticValues")
    DecimalStaticValues = field("DecimalStaticValues")
    DateTimeStaticValues = field("DateTimeStaticValues")
    IntegerStaticValues = field("IntegerStaticValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NewDefaultValuesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NewDefaultValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericRangeFilterValue:
    boto3_raw_data: "type_defs.NumericRangeFilterValueTypeDef" = dataclasses.field()

    StaticValue = field("StaticValue")
    Parameter = field("Parameter")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericRangeFilterValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericRangeFilterValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThousandSeparatorOptions:
    boto3_raw_data: "type_defs.ThousandSeparatorOptionsTypeDef" = dataclasses.field()

    Symbol = field("Symbol")
    Visibility = field("Visibility")
    GroupingStyle = field("GroupingStyle")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ThousandSeparatorOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThousandSeparatorOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PercentileAggregation:
    boto3_raw_data: "type_defs.PercentileAggregationTypeDef" = dataclasses.field()

    PercentileValue = field("PercentileValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PercentileAggregationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PercentileAggregationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringParameterOutput:
    boto3_raw_data: "type_defs.StringParameterOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StringParameterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringParameter:
    boto3_raw_data: "type_defs.StringParameterTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StringParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StringParameterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PercentVisibleRange:
    boto3_raw_data: "type_defs.PercentVisibleRangeTypeDef" = dataclasses.field()

    From = field("From")
    To = field("To")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PercentVisibleRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PercentVisibleRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UniqueKeyOutput:
    boto3_raw_data: "type_defs.UniqueKeyOutputTypeDef" = dataclasses.field()

    ColumnNames = field("ColumnNames")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UniqueKeyOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UniqueKeyOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UniqueKey:
    boto3_raw_data: "type_defs.UniqueKeyTypeDef" = dataclasses.field()

    ColumnNames = field("ColumnNames")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UniqueKeyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UniqueKeyTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableConditionalFormattingScope:
    boto3_raw_data: "type_defs.PivotTableConditionalFormattingScopeTypeDef" = (
        dataclasses.field()
    )

    Role = field("Role")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableConditionalFormattingScopeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableConditionalFormattingScopeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTablePaginatedReportOptions:
    boto3_raw_data: "type_defs.PivotTablePaginatedReportOptionsTypeDef" = (
        dataclasses.field()
    )

    VerticalOverflowVisibility = field("VerticalOverflowVisibility")
    OverflowColumnHeaderVisibility = field("OverflowColumnHeaderVisibility")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PivotTablePaginatedReportOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTablePaginatedReportOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldOption:
    boto3_raw_data: "type_defs.PivotTableFieldOptionTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    CustomLabel = field("CustomLabel")
    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableFieldOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldSubtotalOptions:
    boto3_raw_data: "type_defs.PivotTableFieldSubtotalOptionsTypeDef" = (
        dataclasses.field()
    )

    FieldId = field("FieldId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PivotTableFieldSubtotalOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldSubtotalOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableRowsLabelOptions:
    boto3_raw_data: "type_defs.PivotTableRowsLabelOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")
    CustomLabel = field("CustomLabel")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableRowsLabelOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableRowsLabelOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RowAlternateColorOptionsOutput:
    boto3_raw_data: "type_defs.RowAlternateColorOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    RowAlternateColors = field("RowAlternateColors")
    UsePrimaryBackgroundColor = field("UsePrimaryBackgroundColor")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RowAlternateColorOptionsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RowAlternateColorOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RowAlternateColorOptions:
    boto3_raw_data: "type_defs.RowAlternateColorOptionsTypeDef" = dataclasses.field()

    Status = field("Status")
    RowAlternateColors = field("RowAlternateColors")
    UsePrimaryBackgroundColor = field("UsePrimaryBackgroundColor")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RowAlternateColorOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RowAlternateColorOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualItemsLimitConfiguration:
    boto3_raw_data: "type_defs.PluginVisualItemsLimitConfigurationTypeDef" = (
        dataclasses.field()
    )

    ItemsLimit = field("ItemsLimit")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PluginVisualItemsLimitConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualItemsLimitConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualProperty:
    boto3_raw_data: "type_defs.PluginVisualPropertyTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PluginVisualPropertyTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualPropertyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PredictQAResultsRequest:
    boto3_raw_data: "type_defs.PredictQAResultsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    QueryText = field("QueryText")
    IncludeQuickSightQIndex = field("IncludeQuickSightQIndex")
    IncludeGeneratedAnswer = field("IncludeGeneratedAnswer")
    MaxTopicsToConsider = field("MaxTopicsToConsider")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PredictQAResultsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PredictQAResultsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProjectOperationOutput:
    boto3_raw_data: "type_defs.ProjectOperationOutputTypeDef" = dataclasses.field()

    ProjectedColumns = field("ProjectedColumns")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProjectOperationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProjectOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProjectOperation:
    boto3_raw_data: "type_defs.ProjectOperationTypeDef" = dataclasses.field()

    ProjectedColumns = field("ProjectedColumns")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProjectOperationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProjectOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartAreaStyleSettings:
    boto3_raw_data: "type_defs.RadarChartAreaStyleSettingsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RadarChartAreaStyleSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartAreaStyleSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RangeConstant:
    boto3_raw_data: "type_defs.RangeConstantTypeDef" = dataclasses.field()

    Minimum = field("Minimum")
    Maximum = field("Maximum")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RangeConstantTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RangeConstantTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RecentSnapshotsConfigurations:
    boto3_raw_data: "type_defs.RecentSnapshotsConfigurationsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RecentSnapshotsConfigurationsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RecentSnapshotsConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RedshiftIAMParametersOutput:
    boto3_raw_data: "type_defs.RedshiftIAMParametersOutputTypeDef" = dataclasses.field()

    RoleArn = field("RoleArn")
    DatabaseUser = field("DatabaseUser")
    DatabaseGroups = field("DatabaseGroups")
    AutoCreateDatabaseUser = field("AutoCreateDatabaseUser")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RedshiftIAMParametersOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RedshiftIAMParametersOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RedshiftIAMParameters:
    boto3_raw_data: "type_defs.RedshiftIAMParametersTypeDef" = dataclasses.field()

    RoleArn = field("RoleArn")
    DatabaseUser = field("DatabaseUser")
    DatabaseGroups = field("DatabaseGroups")
    AutoCreateDatabaseUser = field("AutoCreateDatabaseUser")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RedshiftIAMParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RedshiftIAMParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReferenceLineCustomLabelConfiguration:
    boto3_raw_data: "type_defs.ReferenceLineCustomLabelConfigurationTypeDef" = (
        dataclasses.field()
    )

    CustomLabel = field("CustomLabel")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReferenceLineCustomLabelConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReferenceLineCustomLabelConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReferenceLineStaticDataConfiguration:
    boto3_raw_data: "type_defs.ReferenceLineStaticDataConfigurationTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReferenceLineStaticDataConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReferenceLineStaticDataConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReferenceLineStyleConfiguration:
    boto3_raw_data: "type_defs.ReferenceLineStyleConfigurationTypeDef" = (
        dataclasses.field()
    )

    Pattern = field("Pattern")
    Color = field("Color")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReferenceLineStyleConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReferenceLineStyleConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RefreshFailureEmailAlert:
    boto3_raw_data: "type_defs.RefreshFailureEmailAlertTypeDef" = dataclasses.field()

    AlertStatus = field("AlertStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RefreshFailureEmailAlertTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RefreshFailureEmailAlertTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScheduleRefreshOnEntity:
    boto3_raw_data: "type_defs.ScheduleRefreshOnEntityTypeDef" = dataclasses.field()

    DayOfWeek = field("DayOfWeek")
    DayOfMonth = field("DayOfMonth")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScheduleRefreshOnEntityTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScheduleRefreshOnEntityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SchedulesConfigurations:
    boto3_raw_data: "type_defs.SchedulesConfigurationsTypeDef" = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SchedulesConfigurationsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SchedulesConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StatePersistenceConfigurations:
    boto3_raw_data: "type_defs.StatePersistenceConfigurationsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StatePersistenceConfigurationsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StatePersistenceConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThresholdAlertsConfigurations:
    boto3_raw_data: "type_defs.ThresholdAlertsConfigurationsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ThresholdAlertsConfigurationsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThresholdAlertsConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisteredUserGenerativeQnAEmbeddingConfiguration:
    boto3_raw_data: (
        "type_defs.RegisteredUserGenerativeQnAEmbeddingConfigurationTypeDef"
    ) = dataclasses.field()

    InitialTopicId = field("InitialTopicId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisteredUserGenerativeQnAEmbeddingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisteredUserGenerativeQnAEmbeddingConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisteredUserQSearchBarEmbeddingConfiguration:
    boto3_raw_data: (
        "type_defs.RegisteredUserQSearchBarEmbeddingConfigurationTypeDef"
    ) = dataclasses.field()

    InitialTopicId = field("InitialTopicId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisteredUserQSearchBarEmbeddingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisteredUserQSearchBarEmbeddingConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RenameColumnOperation:
    boto3_raw_data: "type_defs.RenameColumnOperationTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")
    NewColumnName = field("NewColumnName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RenameColumnOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RenameColumnOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreAnalysisRequest:
    boto3_raw_data: "type_defs.RestoreAnalysisRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    AnalysisId = field("AnalysisId")
    RestoreToFolders = field("RestoreToFolders")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RestoreAnalysisRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreAnalysisRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RowLevelPermissionTagRule:
    boto3_raw_data: "type_defs.RowLevelPermissionTagRuleTypeDef" = dataclasses.field()

    TagKey = field("TagKey")
    ColumnName = field("ColumnName")
    TagMultiValueDelimiter = field("TagMultiValueDelimiter")
    MatchAllValue = field("MatchAllValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RowLevelPermissionTagRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RowLevelPermissionTagRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3BucketConfiguration:
    boto3_raw_data: "type_defs.S3BucketConfigurationTypeDef" = dataclasses.field()

    BucketName = field("BucketName")
    BucketPrefix = field("BucketPrefix")
    BucketRegion = field("BucketRegion")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.S3BucketConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.S3BucketConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UploadSettings:
    boto3_raw_data: "type_defs.UploadSettingsTypeDef" = dataclasses.field()

    Format = field("Format")
    StartFromRow = field("StartFromRow")
    ContainsHeader = field("ContainsHeader")
    TextQualifier = field("TextQualifier")
    Delimiter = field("Delimiter")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UploadSettingsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UploadSettingsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicSearchFilter:
    boto3_raw_data: "type_defs.TopicSearchFilterTypeDef" = dataclasses.field()

    Operator = field("Operator")
    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicSearchFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicSearchFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Spacing:
    boto3_raw_data: "type_defs.SpacingTypeDef" = dataclasses.field()

    Top = field("Top")
    Bottom = field("Bottom")
    Left = field("Left")
    Right = field("Right")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SpacingTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SpacingTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetVisualScopingConfigurationOutput:
    boto3_raw_data: "type_defs.SheetVisualScopingConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    SheetId = field("SheetId")
    Scope = field("Scope")
    VisualIds = field("VisualIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SheetVisualScopingConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetVisualScopingConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetVisualScopingConfiguration:
    boto3_raw_data: "type_defs.SheetVisualScopingConfigurationTypeDef" = (
        dataclasses.field()
    )

    SheetId = field("SheetId")
    Scope = field("Scope")
    VisualIds = field("VisualIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SheetVisualScopingConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetVisualScopingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SemanticEntityTypeOutput:
    boto3_raw_data: "type_defs.SemanticEntityTypeOutputTypeDef" = dataclasses.field()

    TypeName = field("TypeName")
    SubTypeName = field("SubTypeName")
    TypeParameters = field("TypeParameters")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SemanticEntityTypeOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SemanticEntityTypeOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SemanticEntityType:
    boto3_raw_data: "type_defs.SemanticEntityTypeTypeDef" = dataclasses.field()

    TypeName = field("TypeName")
    SubTypeName = field("SubTypeName")
    TypeParameters = field("TypeParameters")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SemanticEntityTypeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SemanticEntityTypeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SemanticTypeOutput:
    boto3_raw_data: "type_defs.SemanticTypeOutputTypeDef" = dataclasses.field()

    TypeName = field("TypeName")
    SubTypeName = field("SubTypeName")
    TypeParameters = field("TypeParameters")
    TruthyCellValue = field("TruthyCellValue")
    TruthyCellValueSynonyms = field("TruthyCellValueSynonyms")
    FalseyCellValue = field("FalseyCellValue")
    FalseyCellValueSynonyms = field("FalseyCellValueSynonyms")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SemanticTypeOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SemanticTypeOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SemanticType:
    boto3_raw_data: "type_defs.SemanticTypeTypeDef" = dataclasses.field()

    TypeName = field("TypeName")
    SubTypeName = field("SubTypeName")
    TypeParameters = field("TypeParameters")
    TruthyCellValue = field("TruthyCellValue")
    TruthyCellValueSynonyms = field("TruthyCellValueSynonyms")
    FalseyCellValue = field("FalseyCellValue")
    FalseyCellValueSynonyms = field("FalseyCellValueSynonyms")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SemanticTypeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SemanticTypeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetElementConfigurationOverrides:
    boto3_raw_data: "type_defs.SheetElementConfigurationOverridesTypeDef" = (
        dataclasses.field()
    )

    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SheetElementConfigurationOverridesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetElementConfigurationOverridesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetImageScalingConfiguration:
    boto3_raw_data: "type_defs.SheetImageScalingConfigurationTypeDef" = (
        dataclasses.field()
    )

    ScalingType = field("ScalingType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SheetImageScalingConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetImageScalingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetImageStaticFileSource:
    boto3_raw_data: "type_defs.SheetImageStaticFileSourceTypeDef" = dataclasses.field()

    StaticFileId = field("StaticFileId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SheetImageStaticFileSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetImageStaticFileSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetImageTooltipText:
    boto3_raw_data: "type_defs.SheetImageTooltipTextTypeDef" = dataclasses.field()

    PlainText = field("PlainText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SheetImageTooltipTextTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetImageTooltipTextTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ShortFormatText:
    boto3_raw_data: "type_defs.ShortFormatTextTypeDef" = dataclasses.field()

    PlainText = field("PlainText")
    RichText = field("RichText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ShortFormatTextTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ShortFormatTextTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class YAxisOptions:
    boto3_raw_data: "type_defs.YAxisOptionsTypeDef" = dataclasses.field()

    YAxis = field("YAxis")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.YAxisOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.YAxisOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Slot:
    boto3_raw_data: "type_defs.SlotTypeDef" = dataclasses.field()

    SlotId = field("SlotId")
    VisualId = field("VisualId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SlotTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SlotTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SmallMultiplesAxisProperties:
    boto3_raw_data: "type_defs.SmallMultiplesAxisPropertiesTypeDef" = (
        dataclasses.field()
    )

    Scale = field("Scale")
    Placement = field("Placement")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SmallMultiplesAxisPropertiesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SmallMultiplesAxisPropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotAnonymousUserRedacted:
    boto3_raw_data: "type_defs.SnapshotAnonymousUserRedactedTypeDef" = (
        dataclasses.field()
    )

    RowLevelPermissionTagKeys = field("RowLevelPermissionTagKeys")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SnapshotAnonymousUserRedactedTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotAnonymousUserRedactedTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotFileSheetSelectionOutput:
    boto3_raw_data: "type_defs.SnapshotFileSheetSelectionOutputTypeDef" = (
        dataclasses.field()
    )

    SheetId = field("SheetId")
    SelectionScope = field("SelectionScope")
    VisualIds = field("VisualIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SnapshotFileSheetSelectionOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotFileSheetSelectionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotFileSheetSelection:
    boto3_raw_data: "type_defs.SnapshotFileSheetSelectionTypeDef" = dataclasses.field()

    SheetId = field("SheetId")
    SelectionScope = field("SelectionScope")
    VisualIds = field("VisualIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotFileSheetSelectionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotFileSheetSelectionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotJobResultErrorInfo:
    boto3_raw_data: "type_defs.SnapshotJobResultErrorInfoTypeDef" = dataclasses.field()

    ErrorMessage = field("ErrorMessage")
    ErrorType = field("ErrorType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotJobResultErrorInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotJobResultErrorInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartDashboardSnapshotJobScheduleRequest:
    boto3_raw_data: "type_defs.StartDashboardSnapshotJobScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    ScheduleId = field("ScheduleId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartDashboardSnapshotJobScheduleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartDashboardSnapshotJobScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StaticFileS3SourceOptions:
    boto3_raw_data: "type_defs.StaticFileS3SourceOptionsTypeDef" = dataclasses.field()

    BucketName = field("BucketName")
    ObjectKey = field("ObjectKey")
    Region = field("Region")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StaticFileS3SourceOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StaticFileS3SourceOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StaticFileUrlSourceOptions:
    boto3_raw_data: "type_defs.StaticFileUrlSourceOptionsTypeDef" = dataclasses.field()

    Url = field("Url")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StaticFileUrlSourceOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StaticFileUrlSourceOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringDatasetParameterDefaultValuesOutput:
    boto3_raw_data: "type_defs.StringDatasetParameterDefaultValuesOutputTypeDef" = (
        dataclasses.field()
    )

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StringDatasetParameterDefaultValuesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringDatasetParameterDefaultValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringDatasetParameterDefaultValues:
    boto3_raw_data: "type_defs.StringDatasetParameterDefaultValuesTypeDef" = (
        dataclasses.field()
    )

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StringDatasetParameterDefaultValuesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringDatasetParameterDefaultValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringValueWhenUnsetConfiguration:
    boto3_raw_data: "type_defs.StringValueWhenUnsetConfigurationTypeDef" = (
        dataclasses.field()
    )

    ValueWhenUnsetOption = field("ValueWhenUnsetOption")
    CustomValue = field("CustomValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StringValueWhenUnsetConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringValueWhenUnsetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableStyleTarget:
    boto3_raw_data: "type_defs.TableStyleTargetTypeDef" = dataclasses.field()

    CellType = field("CellType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TableStyleTargetTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableStyleTargetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SuccessfulKeyRegistrationEntry:
    boto3_raw_data: "type_defs.SuccessfulKeyRegistrationEntryTypeDef" = (
        dataclasses.field()
    )

    KeyArn = field("KeyArn")
    StatusCode = field("StatusCode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SuccessfulKeyRegistrationEntryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SuccessfulKeyRegistrationEntryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableCellImageSizingConfiguration:
    boto3_raw_data: "type_defs.TableCellImageSizingConfigurationTypeDef" = (
        dataclasses.field()
    )

    TableCellImageScalingConfiguration = field("TableCellImageScalingConfiguration")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TableCellImageSizingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableCellImageSizingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TablePaginatedReportOptions:
    boto3_raw_data: "type_defs.TablePaginatedReportOptionsTypeDef" = dataclasses.field()

    VerticalOverflowVisibility = field("VerticalOverflowVisibility")
    OverflowColumnHeaderVisibility = field("OverflowColumnHeaderVisibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TablePaginatedReportOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TablePaginatedReportOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldCustomIconContent:
    boto3_raw_data: "type_defs.TableFieldCustomIconContentTypeDef" = dataclasses.field()

    Icon = field("Icon")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableFieldCustomIconContentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldCustomIconContentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TablePinnedFieldOptionsOutput:
    boto3_raw_data: "type_defs.TablePinnedFieldOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    PinnedLeftFields = field("PinnedLeftFields")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TablePinnedFieldOptionsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TablePinnedFieldOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransposedTableOption:
    boto3_raw_data: "type_defs.TransposedTableOptionTypeDef" = dataclasses.field()

    ColumnType = field("ColumnType")
    ColumnIndex = field("ColumnIndex")
    ColumnWidth = field("ColumnWidth")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransposedTableOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransposedTableOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TablePinnedFieldOptions:
    boto3_raw_data: "type_defs.TablePinnedFieldOptionsTypeDef" = dataclasses.field()

    PinnedLeftFields = field("PinnedLeftFields")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TablePinnedFieldOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TablePinnedFieldOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateSourceTemplate:
    boto3_raw_data: "type_defs.TemplateSourceTemplateTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TemplateSourceTemplateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TemplateSourceTemplateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextControlPlaceholderOptions:
    boto3_raw_data: "type_defs.TextControlPlaceholderOptionsTypeDef" = (
        dataclasses.field()
    )

    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TextControlPlaceholderOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextControlPlaceholderOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextBoxMenuOption:
    boto3_raw_data: "type_defs.TextBoxMenuOptionTypeDef" = dataclasses.field()

    AvailabilityStatus = field("AvailabilityStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TextBoxMenuOptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextBoxMenuOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UIColorPalette:
    boto3_raw_data: "type_defs.UIColorPaletteTypeDef" = dataclasses.field()

    PrimaryForeground = field("PrimaryForeground")
    PrimaryBackground = field("PrimaryBackground")
    SecondaryForeground = field("SecondaryForeground")
    SecondaryBackground = field("SecondaryBackground")
    Accent = field("Accent")
    AccentForeground = field("AccentForeground")
    Danger = field("Danger")
    DangerForeground = field("DangerForeground")
    Warning = field("Warning")
    WarningForeground = field("WarningForeground")
    Success = field("Success")
    SuccessForeground = field("SuccessForeground")
    Dimension = field("Dimension")
    DimensionForeground = field("DimensionForeground")
    Measure = field("Measure")
    MeasureForeground = field("MeasureForeground")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UIColorPaletteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UIColorPaletteTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThemeError:
    boto3_raw_data: "type_defs.ThemeErrorTypeDef" = dataclasses.field()

    Type = field("Type")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ThemeErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ThemeErrorTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicConfigOptions:
    boto3_raw_data: "type_defs.TopicConfigOptionsTypeDef" = dataclasses.field()

    QBusinessInsightsEnabled = field("QBusinessInsightsEnabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicConfigOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicConfigOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIRComparisonMethod:
    boto3_raw_data: "type_defs.TopicIRComparisonMethodTypeDef" = dataclasses.field()

    Type = field("Type")
    Period = field("Period")
    WindowSize = field("WindowSize")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicIRComparisonMethodTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicIRComparisonMethodTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualOptions:
    boto3_raw_data: "type_defs.VisualOptionsTypeDef" = dataclasses.field()

    type = field("type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VisualOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VisualOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicSingularFilterConstant:
    boto3_raw_data: "type_defs.TopicSingularFilterConstantTypeDef" = dataclasses.field()

    ConstantType = field("ConstantType")
    SingularConstant = field("SingularConstant")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicSingularFilterConstantTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicSingularFilterConstantTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TotalAggregationFunction:
    boto3_raw_data: "type_defs.TotalAggregationFunctionTypeDef" = dataclasses.field()

    SimpleTotalAggregationFunction = field("SimpleTotalAggregationFunction")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TotalAggregationFunctionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TotalAggregationFunctionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UntagColumnOperationOutput:
    boto3_raw_data: "type_defs.UntagColumnOperationOutputTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")
    TagNames = field("TagNames")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UntagColumnOperationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UntagColumnOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UntagColumnOperation:
    boto3_raw_data: "type_defs.UntagColumnOperationTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")
    TagNames = field("TagNames")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UntagColumnOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UntagColumnOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UntagResourceRequest:
    boto3_raw_data: "type_defs.UntagResourceRequestTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")
    TagKeys = field("TagKeys")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UntagResourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UntagResourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAccountCustomPermissionRequest:
    boto3_raw_data: "type_defs.UpdateAccountCustomPermissionRequestTypeDef" = (
        dataclasses.field()
    )

    CustomPermissionsName = field("CustomPermissionsName")
    AwsAccountId = field("AwsAccountId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateAccountCustomPermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAccountCustomPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAccountSettingsRequest:
    boto3_raw_data: "type_defs.UpdateAccountSettingsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DefaultNamespace = field("DefaultNamespace")
    NotificationEmail = field("NotificationEmail")
    TerminationProtectionEnabled = field("TerminationProtectionEnabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateAccountSettingsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAccountSettingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateApplicationWithTokenExchangeGrantRequest:
    boto3_raw_data: (
        "type_defs.UpdateApplicationWithTokenExchangeGrantRequestTypeDef"
    ) = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateApplicationWithTokenExchangeGrantRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.UpdateApplicationWithTokenExchangeGrantRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateBrandAssignmentRequest:
    boto3_raw_data: "type_defs.UpdateBrandAssignmentRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    BrandArn = field("BrandArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateBrandAssignmentRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateBrandAssignmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateBrandPublishedVersionRequest:
    boto3_raw_data: "type_defs.UpdateBrandPublishedVersionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    BrandId = field("BrandId")
    VersionId = field("VersionId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateBrandPublishedVersionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateBrandPublishedVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardLinksRequest:
    boto3_raw_data: "type_defs.UpdateDashboardLinksRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    LinkEntities = field("LinkEntities")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDashboardLinksRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardLinksRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardPublishedVersionRequest:
    boto3_raw_data: "type_defs.UpdateDashboardPublishedVersionRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    VersionNumber = field("VersionNumber")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDashboardPublishedVersionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardPublishedVersionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardsQAConfigurationRequest:
    boto3_raw_data: "type_defs.UpdateDashboardsQAConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardsQAStatus = field("DashboardsQAStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDashboardsQAConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardsQAConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDefaultQBusinessApplicationRequest:
    boto3_raw_data: "type_defs.UpdateDefaultQBusinessApplicationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    ApplicationId = field("ApplicationId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDefaultQBusinessApplicationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDefaultQBusinessApplicationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFolderRequest:
    boto3_raw_data: "type_defs.UpdateFolderRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    Name = field("Name")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateFolderRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFolderRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateGroupRequest:
    boto3_raw_data: "type_defs.UpdateGroupRequestTypeDef" = dataclasses.field()

    GroupName = field("GroupName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateGroupRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateGroupRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateIAMPolicyAssignmentRequest:
    boto3_raw_data: "type_defs.UpdateIAMPolicyAssignmentRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AssignmentName = field("AssignmentName")
    Namespace = field("Namespace")
    AssignmentStatus = field("AssignmentStatus")
    PolicyArn = field("PolicyArn")
    Identities = field("Identities")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateIAMPolicyAssignmentRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateIAMPolicyAssignmentRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateIdentityPropagationConfigRequest:
    boto3_raw_data: "type_defs.UpdateIdentityPropagationConfigRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    Service = field("Service")
    AuthorizedTargets = field("AuthorizedTargets")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateIdentityPropagationConfigRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateIdentityPropagationConfigRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateIpRestrictionRequest:
    boto3_raw_data: "type_defs.UpdateIpRestrictionRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    IpRestrictionRuleMap = field("IpRestrictionRuleMap")
    VpcIdRestrictionRuleMap = field("VpcIdRestrictionRuleMap")
    VpcEndpointIdRestrictionRuleMap = field("VpcEndpointIdRestrictionRuleMap")
    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateIpRestrictionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateIpRestrictionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePublicSharingSettingsRequest:
    boto3_raw_data: "type_defs.UpdatePublicSharingSettingsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    PublicSharingEnabled = field("PublicSharingEnabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdatePublicSharingSettingsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePublicSharingSettingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateQPersonalizationConfigurationRequest:
    boto3_raw_data: "type_defs.UpdateQPersonalizationConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    PersonalizationMode = field("PersonalizationMode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateQPersonalizationConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateQPersonalizationConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateQuickSightQSearchConfigurationRequest:
    boto3_raw_data: "type_defs.UpdateQuickSightQSearchConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    QSearchStatus = field("QSearchStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateQuickSightQSearchConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateQuickSightQSearchConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateRoleCustomPermissionRequest:
    boto3_raw_data: "type_defs.UpdateRoleCustomPermissionRequestTypeDef" = (
        dataclasses.field()
    )

    CustomPermissionsName = field("CustomPermissionsName")
    Role = field("Role")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateRoleCustomPermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateRoleCustomPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSPICECapacityConfigurationRequest:
    boto3_raw_data: "type_defs.UpdateSPICECapacityConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    PurchaseMode = field("PurchaseMode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateSPICECapacityConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateSPICECapacityConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTemplateAliasRequest:
    boto3_raw_data: "type_defs.UpdateTemplateAliasRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    AliasName = field("AliasName")
    TemplateVersionNumber = field("TemplateVersionNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTemplateAliasRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTemplateAliasRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateThemeAliasRequest:
    boto3_raw_data: "type_defs.UpdateThemeAliasRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    AliasName = field("AliasName")
    ThemeVersionNumber = field("ThemeVersionNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateThemeAliasRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateThemeAliasRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateUserCustomPermissionRequest:
    boto3_raw_data: "type_defs.UpdateUserCustomPermissionRequestTypeDef" = (
        dataclasses.field()
    )

    UserName = field("UserName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    CustomPermissionsName = field("CustomPermissionsName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateUserCustomPermissionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateUserCustomPermissionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateUserRequest:
    boto3_raw_data: "type_defs.UpdateUserRequestTypeDef" = dataclasses.field()

    UserName = field("UserName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    Email = field("Email")
    Role = field("Role")
    CustomPermissionsName = field("CustomPermissionsName")
    UnapplyCustomPermissions = field("UnapplyCustomPermissions")
    ExternalLoginFederationProviderType = field("ExternalLoginFederationProviderType")
    CustomFederationProviderUrl = field("CustomFederationProviderUrl")
    ExternalLoginId = field("ExternalLoginId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UpdateUserRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateUserRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateVPCConnectionRequest:
    boto3_raw_data: "type_defs.UpdateVPCConnectionRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    VPCConnectionId = field("VPCConnectionId")
    Name = field("Name")
    SubnetIds = field("SubnetIds")
    SecurityGroupIds = field("SecurityGroupIds")
    RoleArn = field("RoleArn")
    DnsResolvers = field("DnsResolvers")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateVPCConnectionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateVPCConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualHighlightOperation:
    boto3_raw_data: "type_defs.VisualHighlightOperationTypeDef" = dataclasses.field()

    Trigger = field("Trigger")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualHighlightOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualHighlightOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartGroupColorConfiguration:
    boto3_raw_data: "type_defs.WaterfallChartGroupColorConfigurationTypeDef" = (
        dataclasses.field()
    )

    PositiveBarColor = field("PositiveBarColor")
    NegativeBarColor = field("NegativeBarColor")
    TotalBarColor = field("TotalBarColor")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.WaterfallChartGroupColorConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartGroupColorConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartOptions:
    boto3_raw_data: "type_defs.WaterfallChartOptionsTypeDef" = dataclasses.field()

    TotalBarLabel = field("TotalBarLabel")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WaterfallChartOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudOptions:
    boto3_raw_data: "type_defs.WordCloudOptionsTypeDef" = dataclasses.field()

    WordOrientation = field("WordOrientation")
    WordScaling = field("WordScaling")
    CloudLayout = field("CloudLayout")
    WordCasing = field("WordCasing")
    WordPadding = field("WordPadding")
    MaximumStringLength = field("MaximumStringLength")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WordCloudOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAccountCustomizationRequest:
    boto3_raw_data: "type_defs.UpdateAccountCustomizationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def AccountCustomization(self):  # pragma: no cover
        return AccountCustomization.make_one(
            self.boto3_raw_data["AccountCustomization"]
        )

    Namespace = field("Namespace")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateAccountCustomizationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAccountCustomizationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisLabelReferenceOptions:
    boto3_raw_data: "type_defs.AxisLabelReferenceOptionsTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AxisLabelReferenceOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisLabelReferenceOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CascadingControlSource:
    boto3_raw_data: "type_defs.CascadingControlSourceTypeDef" = dataclasses.field()

    SourceSheetControlId = field("SourceSheetControlId")

    @cached_property
    def ColumnToMatch(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["ColumnToMatch"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CascadingControlSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CascadingControlSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoryDrillDownFilterOutput:
    boto3_raw_data: "type_defs.CategoryDrillDownFilterOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    CategoryValues = field("CategoryValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CategoryDrillDownFilterOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoryDrillDownFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoryDrillDownFilter:
    boto3_raw_data: "type_defs.CategoryDrillDownFilterTypeDef" = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    CategoryValues = field("CategoryValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoryDrillDownFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoryDrillDownFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContributionAnalysisDefaultOutput:
    boto3_raw_data: "type_defs.ContributionAnalysisDefaultOutputTypeDef" = (
        dataclasses.field()
    )

    MeasureFieldId = field("MeasureFieldId")

    @cached_property
    def ContributorDimensions(self):  # pragma: no cover
        return ColumnIdentifier.make_many(self.boto3_raw_data["ContributorDimensions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ContributionAnalysisDefaultOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContributionAnalysisDefaultOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContributionAnalysisDefault:
    boto3_raw_data: "type_defs.ContributionAnalysisDefaultTypeDef" = dataclasses.field()

    MeasureFieldId = field("MeasureFieldId")

    @cached_property
    def ContributorDimensions(self):  # pragma: no cover
        return ColumnIdentifier.make_many(self.boto3_raw_data["ContributorDimensions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ContributionAnalysisDefaultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContributionAnalysisDefaultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DynamicDefaultValue:
    boto3_raw_data: "type_defs.DynamicDefaultValueTypeDef" = dataclasses.field()

    @cached_property
    def DefaultValueColumn(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["DefaultValueColumn"])

    @cached_property
    def UserNameColumn(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["UserNameColumn"])

    @cached_property
    def GroupNameColumn(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["GroupNameColumn"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DynamicDefaultValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DynamicDefaultValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterOperationSelectedFieldsConfigurationOutput:
    boto3_raw_data: (
        "type_defs.FilterOperationSelectedFieldsConfigurationOutputTypeDef"
    ) = dataclasses.field()

    SelectedFields = field("SelectedFields")
    SelectedFieldOptions = field("SelectedFieldOptions")

    @cached_property
    def SelectedColumns(self):  # pragma: no cover
        return ColumnIdentifier.make_many(self.boto3_raw_data["SelectedColumns"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilterOperationSelectedFieldsConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.FilterOperationSelectedFieldsConfigurationOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterOperationSelectedFieldsConfiguration:
    boto3_raw_data: "type_defs.FilterOperationSelectedFieldsConfigurationTypeDef" = (
        dataclasses.field()
    )

    SelectedFields = field("SelectedFields")
    SelectedFieldOptions = field("SelectedFieldOptions")

    @cached_property
    def SelectedColumns(self):  # pragma: no cover
        return ColumnIdentifier.make_many(self.boto3_raw_data["SelectedColumns"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilterOperationSelectedFieldsConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterOperationSelectedFieldsConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericEqualityDrillDownFilter:
    boto3_raw_data: "type_defs.NumericEqualityDrillDownFilterTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.NumericEqualityDrillDownFilterTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericEqualityDrillDownFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterSelectableValuesOutput:
    boto3_raw_data: "type_defs.ParameterSelectableValuesOutputTypeDef" = (
        dataclasses.field()
    )

    Values = field("Values")

    @cached_property
    def LinkToDataSetColumn(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["LinkToDataSetColumn"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ParameterSelectableValuesOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterSelectableValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterSelectableValues:
    boto3_raw_data: "type_defs.ParameterSelectableValuesTypeDef" = dataclasses.field()

    Values = field("Values")

    @cached_property
    def LinkToDataSetColumn(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["LinkToDataSetColumn"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterSelectableValuesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterSelectableValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeRangeDrillDownFilterOutput:
    boto3_raw_data: "type_defs.TimeRangeDrillDownFilterOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    RangeMinimum = field("RangeMinimum")
    RangeMaximum = field("RangeMaximum")
    TimeGranularity = field("TimeGranularity")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TimeRangeDrillDownFilterOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeRangeDrillDownFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AmazonQInQuickSightDashboardConfigurations:
    boto3_raw_data: "type_defs.AmazonQInQuickSightDashboardConfigurationsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ExecutiveSummary(self):  # pragma: no cover
        return ExecutiveSummaryConfigurations.make_one(
            self.boto3_raw_data["ExecutiveSummary"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AmazonQInQuickSightDashboardConfigurationsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AmazonQInQuickSightDashboardConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AmazonQInQuickSightConsoleConfigurations:
    boto3_raw_data: "type_defs.AmazonQInQuickSightConsoleConfigurationsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataQnA(self):  # pragma: no cover
        return DataQnAConfigurations.make_one(self.boto3_raw_data["DataQnA"])

    @cached_property
    def GenerativeAuthoring(self):  # pragma: no cover
        return GenerativeAuthoringConfigurations.make_one(
            self.boto3_raw_data["GenerativeAuthoring"]
        )

    @cached_property
    def ExecutiveSummary(self):  # pragma: no cover
        return ExecutiveSummaryConfigurations.make_one(
            self.boto3_raw_data["ExecutiveSummary"]
        )

    @cached_property
    def DataStories(self):  # pragma: no cover
        return DataStoriesConfigurations.make_one(self.boto3_raw_data["DataStories"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AmazonQInQuickSightConsoleConfigurationsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AmazonQInQuickSightConsoleConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisError:
    boto3_raw_data: "type_defs.AnalysisErrorTypeDef" = dataclasses.field()

    Type = field("Type")
    Message = field("Message")

    @cached_property
    def ViolatedEntities(self):  # pragma: no cover
        return Entity.make_many(self.boto3_raw_data["ViolatedEntities"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AnalysisErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AnalysisErrorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardError:
    boto3_raw_data: "type_defs.DashboardErrorTypeDef" = dataclasses.field()

    Type = field("Type")
    Message = field("Message")

    @cached_property
    def ViolatedEntities(self):  # pragma: no cover
        return Entity.make_many(self.boto3_raw_data["ViolatedEntities"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DashboardErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DashboardErrorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateError:
    boto3_raw_data: "type_defs.TemplateErrorTypeDef" = dataclasses.field()

    Type = field("Type")
    Message = field("Message")

    @cached_property
    def ViolatedEntities(self):  # pragma: no cover
        return Entity.make_many(self.boto3_raw_data["ViolatedEntities"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TemplateErrorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TemplateErrorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchAnalysesRequest:
    boto3_raw_data: "type_defs.SearchAnalysesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return AnalysisSearchFilter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchAnalysesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchAnalysesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisSourceTemplate:
    boto3_raw_data: "type_defs.AnalysisSourceTemplateTypeDef" = dataclasses.field()

    @cached_property
    def DataSetReferences(self):  # pragma: no cover
        return DataSetReference.make_many(self.boto3_raw_data["DataSetReferences"])

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisSourceTemplateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisSourceTemplateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardSourceTemplate:
    boto3_raw_data: "type_defs.DashboardSourceTemplateTypeDef" = dataclasses.field()

    @cached_property
    def DataSetReferences(self):  # pragma: no cover
        return DataSetReference.make_many(self.boto3_raw_data["DataSetReferences"])

    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DashboardSourceTemplateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardSourceTemplateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateSourceAnalysis:
    boto3_raw_data: "type_defs.TemplateSourceAnalysisTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @cached_property
    def DataSetReferences(self):  # pragma: no cover
        return DataSetReference.make_many(self.boto3_raw_data["DataSetReferences"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TemplateSourceAnalysisTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TemplateSourceAnalysisTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnonymousUserDashboardFeatureConfigurations:
    boto3_raw_data: "type_defs.AnonymousUserDashboardFeatureConfigurationsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SharedView(self):  # pragma: no cover
        return SharedViewConfigurations.make_one(self.boto3_raw_data["SharedView"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AnonymousUserDashboardFeatureConfigurationsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnonymousUserDashboardFeatureConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnonymousUserDashboardVisualEmbeddingConfiguration:
    boto3_raw_data: (
        "type_defs.AnonymousUserDashboardVisualEmbeddingConfigurationTypeDef"
    ) = dataclasses.field()

    @cached_property
    def InitialDashboardVisualId(self):  # pragma: no cover
        return DashboardVisualId.make_one(
            self.boto3_raw_data["InitialDashboardVisualId"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AnonymousUserDashboardVisualEmbeddingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AnonymousUserDashboardVisualEmbeddingConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisteredUserDashboardVisualEmbeddingConfiguration:
    boto3_raw_data: (
        "type_defs.RegisteredUserDashboardVisualEmbeddingConfigurationTypeDef"
    ) = dataclasses.field()

    @cached_property
    def InitialDashboardVisualId(self):  # pragma: no cover
        return DashboardVisualId.make_one(
            self.boto3_raw_data["InitialDashboardVisualId"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisteredUserDashboardVisualEmbeddingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisteredUserDashboardVisualEmbeddingConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ArcAxisConfiguration:
    boto3_raw_data: "type_defs.ArcAxisConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Range(self):  # pragma: no cover
        return ArcAxisDisplayRange.make_one(self.boto3_raw_data["Range"])

    ReserveRange = field("ReserveRange")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ArcAxisConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ArcAxisConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleCloudFormationOverridePropertyConfigurationOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleCloudFormationOverridePropertyConfigurationOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def ResourceIdOverrideConfiguration(self):  # pragma: no cover
        return AssetBundleExportJobResourceIdOverrideConfiguration.make_one(
            self.boto3_raw_data["ResourceIdOverrideConfiguration"]
        )

    @cached_property
    def VPCConnections(self):  # pragma: no cover
        return AssetBundleExportJobVPCConnectionOverridePropertiesOutput.make_many(
            self.boto3_raw_data["VPCConnections"]
        )

    @cached_property
    def RefreshSchedules(self):  # pragma: no cover
        return AssetBundleExportJobRefreshScheduleOverridePropertiesOutput.make_many(
            self.boto3_raw_data["RefreshSchedules"]
        )

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AssetBundleExportJobDataSourceOverridePropertiesOutput.make_many(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def DataSets(self):  # pragma: no cover
        return AssetBundleExportJobDataSetOverridePropertiesOutput.make_many(
            self.boto3_raw_data["DataSets"]
        )

    @cached_property
    def Themes(self):  # pragma: no cover
        return AssetBundleExportJobThemeOverridePropertiesOutput.make_many(
            self.boto3_raw_data["Themes"]
        )

    @cached_property
    def Analyses(self):  # pragma: no cover
        return AssetBundleExportJobAnalysisOverridePropertiesOutput.make_many(
            self.boto3_raw_data["Analyses"]
        )

    @cached_property
    def Dashboards(self):  # pragma: no cover
        return AssetBundleExportJobDashboardOverridePropertiesOutput.make_many(
            self.boto3_raw_data["Dashboards"]
        )

    @cached_property
    def Folders(self):  # pragma: no cover
        return AssetBundleExportJobFolderOverridePropertiesOutput.make_many(
            self.boto3_raw_data["Folders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleCloudFormationOverridePropertyConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleCloudFormationOverridePropertyConfigurationOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleCloudFormationOverridePropertyConfiguration:
    boto3_raw_data: (
        "type_defs.AssetBundleCloudFormationOverridePropertyConfigurationTypeDef"
    ) = dataclasses.field()

    @cached_property
    def ResourceIdOverrideConfiguration(self):  # pragma: no cover
        return AssetBundleExportJobResourceIdOverrideConfiguration.make_one(
            self.boto3_raw_data["ResourceIdOverrideConfiguration"]
        )

    @cached_property
    def VPCConnections(self):  # pragma: no cover
        return AssetBundleExportJobVPCConnectionOverrideProperties.make_many(
            self.boto3_raw_data["VPCConnections"]
        )

    @cached_property
    def RefreshSchedules(self):  # pragma: no cover
        return AssetBundleExportJobRefreshScheduleOverrideProperties.make_many(
            self.boto3_raw_data["RefreshSchedules"]
        )

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AssetBundleExportJobDataSourceOverrideProperties.make_many(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def DataSets(self):  # pragma: no cover
        return AssetBundleExportJobDataSetOverrideProperties.make_many(
            self.boto3_raw_data["DataSets"]
        )

    @cached_property
    def Themes(self):  # pragma: no cover
        return AssetBundleExportJobThemeOverrideProperties.make_many(
            self.boto3_raw_data["Themes"]
        )

    @cached_property
    def Analyses(self):  # pragma: no cover
        return AssetBundleExportJobAnalysisOverrideProperties.make_many(
            self.boto3_raw_data["Analyses"]
        )

    @cached_property
    def Dashboards(self):  # pragma: no cover
        return AssetBundleExportJobDashboardOverrideProperties.make_many(
            self.boto3_raw_data["Dashboards"]
        )

    @cached_property
    def Folders(self):  # pragma: no cover
        return AssetBundleExportJobFolderOverrideProperties.make_many(
            self.boto3_raw_data["Folders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleCloudFormationOverridePropertyConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleCloudFormationOverridePropertyConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobAnalysisOverridePermissionsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobAnalysisOverridePermissionsOutputTypeDef"
    ) = dataclasses.field()

    AnalysisIds = field("AnalysisIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissionsOutput.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobAnalysisOverridePermissionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobAnalysisOverridePermissionsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSetOverridePermissionsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDataSetOverridePermissionsOutputTypeDef"
    ) = dataclasses.field()

    DataSetIds = field("DataSetIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissionsOutput.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSetOverridePermissionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDataSetOverridePermissionsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSourceOverridePermissionsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDataSourceOverridePermissionsOutputTypeDef"
    ) = dataclasses.field()

    DataSourceIds = field("DataSourceIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissionsOutput.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSourceOverridePermissionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDataSourceOverridePermissionsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobFolderOverridePermissionsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobFolderOverridePermissionsOutputTypeDef"
    ) = dataclasses.field()

    FolderIds = field("FolderIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissionsOutput.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobFolderOverridePermissionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobFolderOverridePermissionsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobThemeOverridePermissionsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobThemeOverridePermissionsOutputTypeDef"
    ) = dataclasses.field()

    ThemeIds = field("ThemeIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissionsOutput.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobThemeOverridePermissionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobThemeOverridePermissionsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleResourceLinkSharingConfigurationOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleResourceLinkSharingConfigurationOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissionsOutput.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleResourceLinkSharingConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleResourceLinkSharingConfigurationOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobAnalysisOverridePermissions:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobAnalysisOverridePermissionsTypeDef"
    ) = dataclasses.field()

    AnalysisIds = field("AnalysisIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissions.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobAnalysisOverridePermissionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobAnalysisOverridePermissionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSetOverridePermissions:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDataSetOverridePermissionsTypeDef"
    ) = dataclasses.field()

    DataSetIds = field("DataSetIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissions.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSetOverridePermissionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDataSetOverridePermissionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSourceOverridePermissions:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDataSourceOverridePermissionsTypeDef"
    ) = dataclasses.field()

    DataSourceIds = field("DataSourceIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissions.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSourceOverridePermissionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDataSourceOverridePermissionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobFolderOverridePermissions:
    boto3_raw_data: "type_defs.AssetBundleImportJobFolderOverridePermissionsTypeDef" = (
        dataclasses.field()
    )

    FolderIds = field("FolderIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissions.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobFolderOverridePermissionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobFolderOverridePermissionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobThemeOverridePermissions:
    boto3_raw_data: "type_defs.AssetBundleImportJobThemeOverridePermissionsTypeDef" = (
        dataclasses.field()
    )

    ThemeIds = field("ThemeIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissions.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobThemeOverridePermissionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobThemeOverridePermissionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleResourceLinkSharingConfiguration:
    boto3_raw_data: "type_defs.AssetBundleResourceLinkSharingConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissions.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleResourceLinkSharingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleResourceLinkSharingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobAnalysisOverrideTagsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobAnalysisOverrideTagsOutputTypeDef"
    ) = dataclasses.field()

    AnalysisIds = field("AnalysisIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobAnalysisOverrideTagsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobAnalysisOverrideTagsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobAnalysisOverrideTags:
    boto3_raw_data: "type_defs.AssetBundleImportJobAnalysisOverrideTagsTypeDef" = (
        dataclasses.field()
    )

    AnalysisIds = field("AnalysisIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobAnalysisOverrideTagsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobAnalysisOverrideTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDashboardOverrideTagsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDashboardOverrideTagsOutputTypeDef"
    ) = dataclasses.field()

    DashboardIds = field("DashboardIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDashboardOverrideTagsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDashboardOverrideTagsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDashboardOverrideTags:
    boto3_raw_data: "type_defs.AssetBundleImportJobDashboardOverrideTagsTypeDef" = (
        dataclasses.field()
    )

    DashboardIds = field("DashboardIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDashboardOverrideTagsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobDashboardOverrideTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSetOverrideTagsOutput:
    boto3_raw_data: "type_defs.AssetBundleImportJobDataSetOverrideTagsOutputTypeDef" = (
        dataclasses.field()
    )

    DataSetIds = field("DataSetIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSetOverrideTagsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobDataSetOverrideTagsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSetOverrideTags:
    boto3_raw_data: "type_defs.AssetBundleImportJobDataSetOverrideTagsTypeDef" = (
        dataclasses.field()
    )

    DataSetIds = field("DataSetIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSetOverrideTagsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobDataSetOverrideTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSourceOverrideTagsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDataSourceOverrideTagsOutputTypeDef"
    ) = dataclasses.field()

    DataSourceIds = field("DataSourceIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSourceOverrideTagsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDataSourceOverrideTagsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSourceOverrideTags:
    boto3_raw_data: "type_defs.AssetBundleImportJobDataSourceOverrideTagsTypeDef" = (
        dataclasses.field()
    )

    DataSourceIds = field("DataSourceIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSourceOverrideTagsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobDataSourceOverrideTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobFolderOverrideTagsOutput:
    boto3_raw_data: "type_defs.AssetBundleImportJobFolderOverrideTagsOutputTypeDef" = (
        dataclasses.field()
    )

    FolderIds = field("FolderIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobFolderOverrideTagsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobFolderOverrideTagsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobFolderOverrideTags:
    boto3_raw_data: "type_defs.AssetBundleImportJobFolderOverrideTagsTypeDef" = (
        dataclasses.field()
    )

    FolderIds = field("FolderIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobFolderOverrideTagsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobFolderOverrideTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobThemeOverrideTagsOutput:
    boto3_raw_data: "type_defs.AssetBundleImportJobThemeOverrideTagsOutputTypeDef" = (
        dataclasses.field()
    )

    ThemeIds = field("ThemeIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobThemeOverrideTagsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobThemeOverrideTagsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobThemeOverrideTags:
    boto3_raw_data: "type_defs.AssetBundleImportJobThemeOverrideTagsTypeDef" = (
        dataclasses.field()
    )

    ThemeIds = field("ThemeIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobThemeOverrideTagsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobThemeOverrideTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobVPCConnectionOverrideTagsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobVPCConnectionOverrideTagsOutputTypeDef"
    ) = dataclasses.field()

    VPCConnectionIds = field("VPCConnectionIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobVPCConnectionOverrideTagsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobVPCConnectionOverrideTagsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobVPCConnectionOverrideTags:
    boto3_raw_data: "type_defs.AssetBundleImportJobVPCConnectionOverrideTagsTypeDef" = (
        dataclasses.field()
    )

    VPCConnectionIds = field("VPCConnectionIds")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobVPCConnectionOverrideTagsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobVPCConnectionOverrideTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAccountCustomizationRequest:
    boto3_raw_data: "type_defs.CreateAccountCustomizationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def AccountCustomization(self):  # pragma: no cover
        return AccountCustomization.make_one(
            self.boto3_raw_data["AccountCustomization"]
        )

    Namespace = field("Namespace")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateAccountCustomizationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAccountCustomizationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNamespaceRequest:
    boto3_raw_data: "type_defs.CreateNamespaceRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    IdentityStore = field("IdentityStore")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNamespaceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNamespaceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVPCConnectionRequest:
    boto3_raw_data: "type_defs.CreateVPCConnectionRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    VPCConnectionId = field("VPCConnectionId")
    Name = field("Name")
    SubnetIds = field("SubnetIds")
    SecurityGroupIds = field("SecurityGroupIds")
    RoleArn = field("RoleArn")
    DnsResolvers = field("DnsResolvers")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVPCConnectionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVPCConnectionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterUserRequest:
    boto3_raw_data: "type_defs.RegisterUserRequestTypeDef" = dataclasses.field()

    IdentityType = field("IdentityType")
    Email = field("Email")
    UserRole = field("UserRole")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    IamArn = field("IamArn")
    SessionName = field("SessionName")
    UserName = field("UserName")
    CustomPermissionsName = field("CustomPermissionsName")
    ExternalLoginFederationProviderType = field("ExternalLoginFederationProviderType")
    CustomFederationProviderUrl = field("CustomFederationProviderUrl")
    ExternalLoginId = field("ExternalLoginId")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RegisterUserRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisterUserRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TagResourceRequest:
    boto3_raw_data: "type_defs.TagResourceRequestTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TagResourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TagResourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSourceCredentials:
    boto3_raw_data: "type_defs.AssetBundleImportJobDataSourceCredentialsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CredentialPair(self):  # pragma: no cover
        return AssetBundleImportJobDataSourceCredentialPair.make_one(
            self.boto3_raw_data["CredentialPair"]
        )

    SecretArn = field("SecretArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSourceCredentialsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobDataSourceCredentialsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OAuthParameters:
    boto3_raw_data: "type_defs.OAuthParametersTypeDef" = dataclasses.field()

    TokenProviderUrl = field("TokenProviderUrl")
    OAuthScope = field("OAuthScope")

    @cached_property
    def IdentityProviderVpcConnectionProperties(self):  # pragma: no cover
        return VpcConnectionProperties.make_one(
            self.boto3_raw_data["IdentityProviderVpcConnectionProperties"]
        )

    IdentityProviderResourceUri = field("IdentityProviderResourceUri")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OAuthParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OAuthParametersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobRefreshScheduleOverrideParameters:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobRefreshScheduleOverrideParametersTypeDef"
    ) = dataclasses.field()

    DataSetId = field("DataSetId")
    ScheduleId = field("ScheduleId")
    StartAfterDateTime = field("StartAfterDateTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobRefreshScheduleOverrideParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobRefreshScheduleOverrideParametersTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomParameterValues:
    boto3_raw_data: "type_defs.CustomParameterValuesTypeDef" = dataclasses.field()

    StringValues = field("StringValues")
    IntegerValues = field("IntegerValues")
    DecimalValues = field("DecimalValues")
    DateTimeValues = field("DateTimeValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomParameterValuesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomParameterValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeDatasetParameterDefaultValues:
    boto3_raw_data: "type_defs.DateTimeDatasetParameterDefaultValuesTypeDef" = (
        dataclasses.field()
    )

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DateTimeDatasetParameterDefaultValuesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeDatasetParameterDefaultValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeParameter:
    boto3_raw_data: "type_defs.DateTimeParameterTypeDef" = dataclasses.field()

    Name = field("Name")
    Values = field("Values")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DateTimeParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeValueWhenUnsetConfiguration:
    boto3_raw_data: "type_defs.DateTimeValueWhenUnsetConfigurationTypeDef" = (
        dataclasses.field()
    )

    ValueWhenUnsetOption = field("ValueWhenUnsetOption")
    CustomValue = field("CustomValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DateTimeValueWhenUnsetConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeValueWhenUnsetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NewDefaultValues:
    boto3_raw_data: "type_defs.NewDefaultValuesTypeDef" = dataclasses.field()

    StringStaticValues = field("StringStaticValues")
    DecimalStaticValues = field("DecimalStaticValues")
    DateTimeStaticValues = field("DateTimeStaticValues")
    IntegerStaticValues = field("IntegerStaticValues")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NewDefaultValuesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NewDefaultValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeRangeDrillDownFilter:
    boto3_raw_data: "type_defs.TimeRangeDrillDownFilterTypeDef" = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    RangeMinimum = field("RangeMinimum")
    RangeMaximum = field("RangeMaximum")
    TimeGranularity = field("TimeGranularity")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TimeRangeDrillDownFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeRangeDrillDownFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicRefreshSchedule:
    boto3_raw_data: "type_defs.TopicRefreshScheduleTypeDef" = dataclasses.field()

    IsEnabled = field("IsEnabled")
    BasedOnSpiceSchedule = field("BasedOnSpiceSchedule")
    StartingAt = field("StartingAt")
    Timezone = field("Timezone")
    RepeatAt = field("RepeatAt")
    TopicScheduleType = field("TopicScheduleType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicRefreshScheduleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicRefreshScheduleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WhatIfPointScenario:
    boto3_raw_data: "type_defs.WhatIfPointScenarioTypeDef" = dataclasses.field()

    Date = field("Date")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WhatIfPointScenarioTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WhatIfPointScenarioTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WhatIfRangeScenario:
    boto3_raw_data: "type_defs.WhatIfRangeScenarioTypeDef" = dataclasses.field()

    StartDate = field("StartDate")
    EndDate = field("EndDate")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WhatIfRangeScenarioTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WhatIfRangeScenarioTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportSource:
    boto3_raw_data: "type_defs.AssetBundleImportSourceTypeDef" = dataclasses.field()

    Body = field("Body")
    S3Uri = field("S3Uri")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssetBundleImportSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AthenaParameters:
    boto3_raw_data: "type_defs.AthenaParametersTypeDef" = dataclasses.field()

    WorkGroup = field("WorkGroup")
    RoleArn = field("RoleArn")

    @cached_property
    def IdentityCenterConfiguration(self):  # pragma: no cover
        return IdentityCenterConfiguration.make_one(
            self.boto3_raw_data["IdentityCenterConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AthenaParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AthenaParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisDisplayRangeOutput:
    boto3_raw_data: "type_defs.AxisDisplayRangeOutputTypeDef" = dataclasses.field()

    @cached_property
    def MinMax(self):  # pragma: no cover
        return AxisDisplayMinMaxRange.make_one(self.boto3_raw_data["MinMax"])

    DataDriven = field("DataDriven")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AxisDisplayRangeOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisDisplayRangeOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisDisplayRange:
    boto3_raw_data: "type_defs.AxisDisplayRangeTypeDef" = dataclasses.field()

    @cached_property
    def MinMax(self):  # pragma: no cover
        return AxisDisplayMinMaxRange.make_one(self.boto3_raw_data["MinMax"])

    DataDriven = field("DataDriven")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AxisDisplayRangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisDisplayRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisScale:
    boto3_raw_data: "type_defs.AxisScaleTypeDef" = dataclasses.field()

    @cached_property
    def Linear(self):  # pragma: no cover
        return AxisLinearScale.make_one(self.boto3_raw_data["Linear"])

    @cached_property
    def Logarithmic(self):  # pragma: no cover
        return AxisLogarithmicScale.make_one(self.boto3_raw_data["Logarithmic"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AxisScaleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AxisScaleTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotSortConfiguration:
    boto3_raw_data: "type_defs.ScatterPlotSortConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ScatterPlotLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["ScatterPlotLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScatterPlotSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CancelIngestionResponse:
    boto3_raw_data: "type_defs.CancelIngestionResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    IngestionId = field("IngestionId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CancelIngestionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CancelIngestionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAccountCustomizationResponse:
    boto3_raw_data: "type_defs.CreateAccountCustomizationResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def AccountCustomization(self):  # pragma: no cover
        return AccountCustomization.make_one(
            self.boto3_raw_data["AccountCustomization"]
        )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateAccountCustomizationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAccountCustomizationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAnalysisResponse:
    boto3_raw_data: "type_defs.CreateAnalysisResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    AnalysisId = field("AnalysisId")
    CreationStatus = field("CreationStatus")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAnalysisResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAnalysisResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCustomPermissionsResponse:
    boto3_raw_data: "type_defs.CreateCustomPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    Arn = field("Arn")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateCustomPermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCustomPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDashboardResponse:
    boto3_raw_data: "type_defs.CreateDashboardResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    VersionArn = field("VersionArn")
    DashboardId = field("DashboardId")
    CreationStatus = field("CreationStatus")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDashboardResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDashboardResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDataSetResponse:
    boto3_raw_data: "type_defs.CreateDataSetResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSetId = field("DataSetId")
    IngestionArn = field("IngestionArn")
    IngestionId = field("IngestionId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDataSetResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDataSetResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDataSourceResponse:
    boto3_raw_data: "type_defs.CreateDataSourceResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSourceId = field("DataSourceId")
    CreationStatus = field("CreationStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDataSourceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDataSourceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFolderResponse:
    boto3_raw_data: "type_defs.CreateFolderResponseTypeDef" = dataclasses.field()

    Status = field("Status")
    Arn = field("Arn")
    FolderId = field("FolderId")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFolderResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFolderResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIAMPolicyAssignmentResponse:
    boto3_raw_data: "type_defs.CreateIAMPolicyAssignmentResponseTypeDef" = (
        dataclasses.field()
    )

    AssignmentName = field("AssignmentName")
    AssignmentId = field("AssignmentId")
    AssignmentStatus = field("AssignmentStatus")
    PolicyArn = field("PolicyArn")
    Identities = field("Identities")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateIAMPolicyAssignmentResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIAMPolicyAssignmentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateIngestionResponse:
    boto3_raw_data: "type_defs.CreateIngestionResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    IngestionId = field("IngestionId")
    IngestionStatus = field("IngestionStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateIngestionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateIngestionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateNamespaceResponse:
    boto3_raw_data: "type_defs.CreateNamespaceResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Name = field("Name")
    CapacityRegion = field("CapacityRegion")
    CreationStatus = field("CreationStatus")
    IdentityStore = field("IdentityStore")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateNamespaceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateNamespaceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRefreshScheduleResponse:
    boto3_raw_data: "type_defs.CreateRefreshScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    RequestId = field("RequestId")
    ScheduleId = field("ScheduleId")
    Arn = field("Arn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateRefreshScheduleResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRefreshScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRoleMembershipResponse:
    boto3_raw_data: "type_defs.CreateRoleMembershipResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRoleMembershipResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRoleMembershipResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTemplateResponse:
    boto3_raw_data: "type_defs.CreateTemplateResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    VersionArn = field("VersionArn")
    TemplateId = field("TemplateId")
    CreationStatus = field("CreationStatus")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTemplateResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTemplateResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateThemeResponse:
    boto3_raw_data: "type_defs.CreateThemeResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    VersionArn = field("VersionArn")
    ThemeId = field("ThemeId")
    CreationStatus = field("CreationStatus")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateThemeResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateThemeResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTopicRefreshScheduleResponse:
    boto3_raw_data: "type_defs.CreateTopicRefreshScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")
    DatasetArn = field("DatasetArn")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTopicRefreshScheduleResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTopicRefreshScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTopicResponse:
    boto3_raw_data: "type_defs.CreateTopicResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    TopicId = field("TopicId")
    RefreshArn = field("RefreshArn")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTopicResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTopicResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateVPCConnectionResponse:
    boto3_raw_data: "type_defs.CreateVPCConnectionResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    VPCConnectionId = field("VPCConnectionId")
    CreationStatus = field("CreationStatus")
    AvailabilityStatus = field("AvailabilityStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateVPCConnectionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateVPCConnectionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAccountCustomPermissionResponse:
    boto3_raw_data: "type_defs.DeleteAccountCustomPermissionResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteAccountCustomPermissionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAccountCustomPermissionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAccountCustomizationResponse:
    boto3_raw_data: "type_defs.DeleteAccountCustomizationResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteAccountCustomizationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAccountCustomizationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAccountSubscriptionResponse:
    boto3_raw_data: "type_defs.DeleteAccountSubscriptionResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteAccountSubscriptionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAccountSubscriptionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAnalysisResponse:
    boto3_raw_data: "type_defs.DeleteAnalysisResponseTypeDef" = dataclasses.field()

    Status = field("Status")
    Arn = field("Arn")
    AnalysisId = field("AnalysisId")
    DeletionTime = field("DeletionTime")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteAnalysisResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAnalysisResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteBrandAssignmentResponse:
    boto3_raw_data: "type_defs.DeleteBrandAssignmentResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteBrandAssignmentResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteBrandAssignmentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteBrandResponse:
    boto3_raw_data: "type_defs.DeleteBrandResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteBrandResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteBrandResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteCustomPermissionsResponse:
    boto3_raw_data: "type_defs.DeleteCustomPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    Arn = field("Arn")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteCustomPermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteCustomPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDashboardResponse:
    boto3_raw_data: "type_defs.DeleteDashboardResponseTypeDef" = dataclasses.field()

    Status = field("Status")
    Arn = field("Arn")
    DashboardId = field("DashboardId")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteDashboardResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDashboardResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDataSetRefreshPropertiesResponse:
    boto3_raw_data: "type_defs.DeleteDataSetRefreshPropertiesResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteDataSetRefreshPropertiesResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDataSetRefreshPropertiesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDataSetResponse:
    boto3_raw_data: "type_defs.DeleteDataSetResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSetId = field("DataSetId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteDataSetResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDataSetResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDataSourceResponse:
    boto3_raw_data: "type_defs.DeleteDataSourceResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSourceId = field("DataSourceId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteDataSourceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDataSourceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteDefaultQBusinessApplicationResponse:
    boto3_raw_data: "type_defs.DeleteDefaultQBusinessApplicationResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteDefaultQBusinessApplicationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteDefaultQBusinessApplicationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFolderMembershipResponse:
    boto3_raw_data: "type_defs.DeleteFolderMembershipResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteFolderMembershipResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFolderMembershipResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFolderResponse:
    boto3_raw_data: "type_defs.DeleteFolderResponseTypeDef" = dataclasses.field()

    Status = field("Status")
    Arn = field("Arn")
    FolderId = field("FolderId")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteFolderResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFolderResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteGroupMembershipResponse:
    boto3_raw_data: "type_defs.DeleteGroupMembershipResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteGroupMembershipResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteGroupMembershipResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteGroupResponse:
    boto3_raw_data: "type_defs.DeleteGroupResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteGroupResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteGroupResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIAMPolicyAssignmentResponse:
    boto3_raw_data: "type_defs.DeleteIAMPolicyAssignmentResponseTypeDef" = (
        dataclasses.field()
    )

    AssignmentName = field("AssignmentName")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteIAMPolicyAssignmentResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIAMPolicyAssignmentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteIdentityPropagationConfigResponse:
    boto3_raw_data: "type_defs.DeleteIdentityPropagationConfigResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteIdentityPropagationConfigResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteIdentityPropagationConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteNamespaceResponse:
    boto3_raw_data: "type_defs.DeleteNamespaceResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteNamespaceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteNamespaceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRefreshScheduleResponse:
    boto3_raw_data: "type_defs.DeleteRefreshScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    RequestId = field("RequestId")
    ScheduleId = field("ScheduleId")
    Arn = field("Arn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteRefreshScheduleResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRefreshScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRoleCustomPermissionResponse:
    boto3_raw_data: "type_defs.DeleteRoleCustomPermissionResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteRoleCustomPermissionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRoleCustomPermissionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteRoleMembershipResponse:
    boto3_raw_data: "type_defs.DeleteRoleMembershipResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteRoleMembershipResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteRoleMembershipResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTemplateAliasResponse:
    boto3_raw_data: "type_defs.DeleteTemplateAliasResponseTypeDef" = dataclasses.field()

    Status = field("Status")
    TemplateId = field("TemplateId")
    AliasName = field("AliasName")
    Arn = field("Arn")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTemplateAliasResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTemplateAliasResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTemplateResponse:
    boto3_raw_data: "type_defs.DeleteTemplateResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    Arn = field("Arn")
    TemplateId = field("TemplateId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTemplateResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTemplateResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteThemeAliasResponse:
    boto3_raw_data: "type_defs.DeleteThemeAliasResponseTypeDef" = dataclasses.field()

    AliasName = field("AliasName")
    Arn = field("Arn")
    RequestId = field("RequestId")
    Status = field("Status")
    ThemeId = field("ThemeId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteThemeAliasResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteThemeAliasResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteThemeResponse:
    boto3_raw_data: "type_defs.DeleteThemeResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    RequestId = field("RequestId")
    Status = field("Status")
    ThemeId = field("ThemeId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteThemeResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteThemeResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTopicRefreshScheduleResponse:
    boto3_raw_data: "type_defs.DeleteTopicRefreshScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")
    DatasetArn = field("DatasetArn")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteTopicRefreshScheduleResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTopicRefreshScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteTopicResponse:
    boto3_raw_data: "type_defs.DeleteTopicResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    TopicId = field("TopicId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteTopicResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteTopicResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteUserByPrincipalIdResponse:
    boto3_raw_data: "type_defs.DeleteUserByPrincipalIdResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteUserByPrincipalIdResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteUserByPrincipalIdResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteUserCustomPermissionResponse:
    boto3_raw_data: "type_defs.DeleteUserCustomPermissionResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DeleteUserCustomPermissionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteUserCustomPermissionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteUserResponse:
    boto3_raw_data: "type_defs.DeleteUserResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteUserResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteUserResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteVPCConnectionResponse:
    boto3_raw_data: "type_defs.DeleteVPCConnectionResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    VPCConnectionId = field("VPCConnectionId")
    DeletionStatus = field("DeletionStatus")
    AvailabilityStatus = field("AvailabilityStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteVPCConnectionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteVPCConnectionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountCustomPermissionResponse:
    boto3_raw_data: "type_defs.DescribeAccountCustomPermissionResponseTypeDef" = (
        dataclasses.field()
    )

    CustomPermissionsName = field("CustomPermissionsName")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAccountCustomPermissionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountCustomPermissionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountCustomizationResponse:
    boto3_raw_data: "type_defs.DescribeAccountCustomizationResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def AccountCustomization(self):  # pragma: no cover
        return AccountCustomization.make_one(
            self.boto3_raw_data["AccountCustomization"]
        )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAccountCustomizationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountCustomizationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountSettingsResponse:
    boto3_raw_data: "type_defs.DescribeAccountSettingsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AccountSettings(self):  # pragma: no cover
        return AccountSettings.make_one(self.boto3_raw_data["AccountSettings"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeAccountSettingsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountSettingsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAccountSubscriptionResponse:
    boto3_raw_data: "type_defs.DescribeAccountSubscriptionResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AccountInfo(self):  # pragma: no cover
        return AccountInfo.make_one(self.boto3_raw_data["AccountInfo"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAccountSubscriptionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAccountSubscriptionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeBrandAssignmentResponse:
    boto3_raw_data: "type_defs.DescribeBrandAssignmentResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    BrandArn = field("BrandArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeBrandAssignmentResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeBrandAssignmentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardsQAConfigurationResponse:
    boto3_raw_data: "type_defs.DescribeDashboardsQAConfigurationResponseTypeDef" = (
        dataclasses.field()
    )

    DashboardsQAStatus = field("DashboardsQAStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardsQAConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardsQAConfigurationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDefaultQBusinessApplicationResponse:
    boto3_raw_data: "type_defs.DescribeDefaultQBusinessApplicationResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")
    ApplicationId = field("ApplicationId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDefaultQBusinessApplicationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDefaultQBusinessApplicationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIpRestrictionResponse:
    boto3_raw_data: "type_defs.DescribeIpRestrictionResponseTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    IpRestrictionRuleMap = field("IpRestrictionRuleMap")
    VpcIdRestrictionRuleMap = field("VpcIdRestrictionRuleMap")
    VpcEndpointIdRestrictionRuleMap = field("VpcEndpointIdRestrictionRuleMap")
    Enabled = field("Enabled")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeIpRestrictionResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIpRestrictionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeQPersonalizationConfigurationResponse:
    boto3_raw_data: "type_defs.DescribeQPersonalizationConfigurationResponseTypeDef" = (
        dataclasses.field()
    )

    PersonalizationMode = field("PersonalizationMode")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeQPersonalizationConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeQPersonalizationConfigurationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeQuickSightQSearchConfigurationResponse:
    boto3_raw_data: (
        "type_defs.DescribeQuickSightQSearchConfigurationResponseTypeDef"
    ) = dataclasses.field()

    QSearchStatus = field("QSearchStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeQuickSightQSearchConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeQuickSightQSearchConfigurationResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRoleCustomPermissionResponse:
    boto3_raw_data: "type_defs.DescribeRoleCustomPermissionResponseTypeDef" = (
        dataclasses.field()
    )

    CustomPermissionsName = field("CustomPermissionsName")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeRoleCustomPermissionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRoleCustomPermissionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GenerateEmbedUrlForAnonymousUserResponse:
    boto3_raw_data: "type_defs.GenerateEmbedUrlForAnonymousUserResponseTypeDef" = (
        dataclasses.field()
    )

    EmbedUrl = field("EmbedUrl")
    Status = field("Status")
    RequestId = field("RequestId")
    AnonymousUserArn = field("AnonymousUserArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GenerateEmbedUrlForAnonymousUserResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GenerateEmbedUrlForAnonymousUserResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GenerateEmbedUrlForRegisteredUserResponse:
    boto3_raw_data: "type_defs.GenerateEmbedUrlForRegisteredUserResponseTypeDef" = (
        dataclasses.field()
    )

    EmbedUrl = field("EmbedUrl")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GenerateEmbedUrlForRegisteredUserResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GenerateEmbedUrlForRegisteredUserResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GenerateEmbedUrlForRegisteredUserWithIdentityResponse:
    boto3_raw_data: (
        "type_defs.GenerateEmbedUrlForRegisteredUserWithIdentityResponseTypeDef"
    ) = dataclasses.field()

    EmbedUrl = field("EmbedUrl")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GenerateEmbedUrlForRegisteredUserWithIdentityResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GenerateEmbedUrlForRegisteredUserWithIdentityResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetDashboardEmbedUrlResponse:
    boto3_raw_data: "type_defs.GetDashboardEmbedUrlResponseTypeDef" = (
        dataclasses.field()
    )

    EmbedUrl = field("EmbedUrl")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetDashboardEmbedUrlResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetDashboardEmbedUrlResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSessionEmbedUrlResponse:
    boto3_raw_data: "type_defs.GetSessionEmbedUrlResponseTypeDef" = dataclasses.field()

    EmbedUrl = field("EmbedUrl")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetSessionEmbedUrlResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSessionEmbedUrlResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAnalysesResponse:
    boto3_raw_data: "type_defs.ListAnalysesResponseTypeDef" = dataclasses.field()

    @cached_property
    def AnalysisSummaryList(self):  # pragma: no cover
        return AnalysisSummary.make_many(self.boto3_raw_data["AnalysisSummaryList"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAnalysesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAnalysesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAssetBundleExportJobsResponse:
    boto3_raw_data: "type_defs.ListAssetBundleExportJobsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AssetBundleExportJobSummaryList(self):  # pragma: no cover
        return AssetBundleExportJobSummary.make_many(
            self.boto3_raw_data["AssetBundleExportJobSummaryList"]
        )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListAssetBundleExportJobsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAssetBundleExportJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAssetBundleImportJobsResponse:
    boto3_raw_data: "type_defs.ListAssetBundleImportJobsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AssetBundleImportJobSummaryList(self):  # pragma: no cover
        return AssetBundleImportJobSummary.make_many(
            self.boto3_raw_data["AssetBundleImportJobSummaryList"]
        )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListAssetBundleImportJobsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAssetBundleImportJobsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFoldersForResourceResponse:
    boto3_raw_data: "type_defs.ListFoldersForResourceResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    Folders = field("Folders")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListFoldersForResourceResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFoldersForResourceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIAMPolicyAssignmentsForUserResponse:
    boto3_raw_data: "type_defs.ListIAMPolicyAssignmentsForUserResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ActiveAssignments(self):  # pragma: no cover
        return ActiveIAMPolicyAssignment.make_many(
            self.boto3_raw_data["ActiveAssignments"]
        )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListIAMPolicyAssignmentsForUserResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIAMPolicyAssignmentsForUserResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIdentityPropagationConfigsResponse:
    boto3_raw_data: "type_defs.ListIdentityPropagationConfigsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Services(self):  # pragma: no cover
        return AuthorizedTargetsByService.make_many(self.boto3_raw_data["Services"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListIdentityPropagationConfigsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIdentityPropagationConfigsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListRoleMembershipsResponse:
    boto3_raw_data: "type_defs.ListRoleMembershipsResponseTypeDef" = dataclasses.field()

    MembersList = field("MembersList")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListRoleMembershipsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListRoleMembershipsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTagsForResourceResponse:
    boto3_raw_data: "type_defs.ListTagsForResourceResponseTypeDef" = dataclasses.field()

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTagsForResourceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTagsForResourceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PutDataSetRefreshPropertiesResponse:
    boto3_raw_data: "type_defs.PutDataSetRefreshPropertiesResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PutDataSetRefreshPropertiesResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PutDataSetRefreshPropertiesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RestoreAnalysisResponse:
    boto3_raw_data: "type_defs.RestoreAnalysisResponseTypeDef" = dataclasses.field()

    Status = field("Status")
    Arn = field("Arn")
    AnalysisId = field("AnalysisId")
    RequestId = field("RequestId")
    RestorationFailedFolderArns = field("RestorationFailedFolderArns")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RestoreAnalysisResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RestoreAnalysisResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchAnalysesResponse:
    boto3_raw_data: "type_defs.SearchAnalysesResponseTypeDef" = dataclasses.field()

    @cached_property
    def AnalysisSummaryList(self):  # pragma: no cover
        return AnalysisSummary.make_many(self.boto3_raw_data["AnalysisSummaryList"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchAnalysesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchAnalysesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartAssetBundleExportJobResponse:
    boto3_raw_data: "type_defs.StartAssetBundleExportJobResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    AssetBundleExportJobId = field("AssetBundleExportJobId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartAssetBundleExportJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartAssetBundleExportJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartAssetBundleImportJobResponse:
    boto3_raw_data: "type_defs.StartAssetBundleImportJobResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    AssetBundleImportJobId = field("AssetBundleImportJobId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartAssetBundleImportJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartAssetBundleImportJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartDashboardSnapshotJobResponse:
    boto3_raw_data: "type_defs.StartDashboardSnapshotJobResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    SnapshotJobId = field("SnapshotJobId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartDashboardSnapshotJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartDashboardSnapshotJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartDashboardSnapshotJobScheduleResponse:
    boto3_raw_data: "type_defs.StartDashboardSnapshotJobScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartDashboardSnapshotJobScheduleResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartDashboardSnapshotJobScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TagResourceResponse:
    boto3_raw_data: "type_defs.TagResourceResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TagResourceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TagResourceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UntagResourceResponse:
    boto3_raw_data: "type_defs.UntagResourceResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UntagResourceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UntagResourceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAccountCustomPermissionResponse:
    boto3_raw_data: "type_defs.UpdateAccountCustomPermissionResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateAccountCustomPermissionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAccountCustomPermissionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAccountCustomizationResponse:
    boto3_raw_data: "type_defs.UpdateAccountCustomizationResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def AccountCustomization(self):  # pragma: no cover
        return AccountCustomization.make_one(
            self.boto3_raw_data["AccountCustomization"]
        )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateAccountCustomizationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAccountCustomizationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAccountSettingsResponse:
    boto3_raw_data: "type_defs.UpdateAccountSettingsResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateAccountSettingsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAccountSettingsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAnalysisResponse:
    boto3_raw_data: "type_defs.UpdateAnalysisResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    AnalysisId = field("AnalysisId")
    UpdateStatus = field("UpdateStatus")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateAnalysisResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAnalysisResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateApplicationWithTokenExchangeGrantResponse:
    boto3_raw_data: (
        "type_defs.UpdateApplicationWithTokenExchangeGrantResponseTypeDef"
    ) = dataclasses.field()

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateApplicationWithTokenExchangeGrantResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.UpdateApplicationWithTokenExchangeGrantResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateBrandAssignmentResponse:
    boto3_raw_data: "type_defs.UpdateBrandAssignmentResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    BrandArn = field("BrandArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateBrandAssignmentResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateBrandAssignmentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateBrandPublishedVersionResponse:
    boto3_raw_data: "type_defs.UpdateBrandPublishedVersionResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    VersionId = field("VersionId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateBrandPublishedVersionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateBrandPublishedVersionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateCustomPermissionsResponse:
    boto3_raw_data: "type_defs.UpdateCustomPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    Arn = field("Arn")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateCustomPermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateCustomPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardLinksResponse:
    boto3_raw_data: "type_defs.UpdateDashboardLinksResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")
    DashboardArn = field("DashboardArn")
    LinkEntities = field("LinkEntities")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDashboardLinksResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardLinksResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardPublishedVersionResponse:
    boto3_raw_data: "type_defs.UpdateDashboardPublishedVersionResponseTypeDef" = (
        dataclasses.field()
    )

    DashboardId = field("DashboardId")
    DashboardArn = field("DashboardArn")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDashboardPublishedVersionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardPublishedVersionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardResponse:
    boto3_raw_data: "type_defs.UpdateDashboardResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    VersionArn = field("VersionArn")
    DashboardId = field("DashboardId")
    CreationStatus = field("CreationStatus")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDashboardResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardsQAConfigurationResponse:
    boto3_raw_data: "type_defs.UpdateDashboardsQAConfigurationResponseTypeDef" = (
        dataclasses.field()
    )

    DashboardsQAStatus = field("DashboardsQAStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDashboardsQAConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardsQAConfigurationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDataSetPermissionsResponse:
    boto3_raw_data: "type_defs.UpdateDataSetPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    DataSetArn = field("DataSetArn")
    DataSetId = field("DataSetId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateDataSetPermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDataSetPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDataSetResponse:
    boto3_raw_data: "type_defs.UpdateDataSetResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSetId = field("DataSetId")
    IngestionArn = field("IngestionArn")
    IngestionId = field("IngestionId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDataSetResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDataSetResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDataSourcePermissionsResponse:
    boto3_raw_data: "type_defs.UpdateDataSourcePermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    DataSourceArn = field("DataSourceArn")
    DataSourceId = field("DataSourceId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDataSourcePermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDataSourcePermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDataSourceResponse:
    boto3_raw_data: "type_defs.UpdateDataSourceResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSourceId = field("DataSourceId")
    UpdateStatus = field("UpdateStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDataSourceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDataSourceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDefaultQBusinessApplicationResponse:
    boto3_raw_data: "type_defs.UpdateDefaultQBusinessApplicationResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDefaultQBusinessApplicationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDefaultQBusinessApplicationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFolderResponse:
    boto3_raw_data: "type_defs.UpdateFolderResponseTypeDef" = dataclasses.field()

    Status = field("Status")
    Arn = field("Arn")
    FolderId = field("FolderId")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateFolderResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFolderResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateIAMPolicyAssignmentResponse:
    boto3_raw_data: "type_defs.UpdateIAMPolicyAssignmentResponseTypeDef" = (
        dataclasses.field()
    )

    AssignmentName = field("AssignmentName")
    AssignmentId = field("AssignmentId")
    PolicyArn = field("PolicyArn")
    Identities = field("Identities")
    AssignmentStatus = field("AssignmentStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateIAMPolicyAssignmentResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateIAMPolicyAssignmentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateIdentityPropagationConfigResponse:
    boto3_raw_data: "type_defs.UpdateIdentityPropagationConfigResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateIdentityPropagationConfigResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateIdentityPropagationConfigResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateIpRestrictionResponse:
    boto3_raw_data: "type_defs.UpdateIpRestrictionResponseTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateIpRestrictionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateIpRestrictionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdatePublicSharingSettingsResponse:
    boto3_raw_data: "type_defs.UpdatePublicSharingSettingsResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdatePublicSharingSettingsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdatePublicSharingSettingsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateQPersonalizationConfigurationResponse:
    boto3_raw_data: "type_defs.UpdateQPersonalizationConfigurationResponseTypeDef" = (
        dataclasses.field()
    )

    PersonalizationMode = field("PersonalizationMode")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateQPersonalizationConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateQPersonalizationConfigurationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateQuickSightQSearchConfigurationResponse:
    boto3_raw_data: "type_defs.UpdateQuickSightQSearchConfigurationResponseTypeDef" = (
        dataclasses.field()
    )

    QSearchStatus = field("QSearchStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateQuickSightQSearchConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateQuickSightQSearchConfigurationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateRefreshScheduleResponse:
    boto3_raw_data: "type_defs.UpdateRefreshScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    RequestId = field("RequestId")
    ScheduleId = field("ScheduleId")
    Arn = field("Arn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateRefreshScheduleResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateRefreshScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateRoleCustomPermissionResponse:
    boto3_raw_data: "type_defs.UpdateRoleCustomPermissionResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateRoleCustomPermissionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateRoleCustomPermissionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSPICECapacityConfigurationResponse:
    boto3_raw_data: "type_defs.UpdateSPICECapacityConfigurationResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateSPICECapacityConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateSPICECapacityConfigurationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTemplateResponse:
    boto3_raw_data: "type_defs.UpdateTemplateResponseTypeDef" = dataclasses.field()

    TemplateId = field("TemplateId")
    Arn = field("Arn")
    VersionArn = field("VersionArn")
    CreationStatus = field("CreationStatus")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTemplateResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTemplateResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateThemeResponse:
    boto3_raw_data: "type_defs.UpdateThemeResponseTypeDef" = dataclasses.field()

    ThemeId = field("ThemeId")
    Arn = field("Arn")
    VersionArn = field("VersionArn")
    CreationStatus = field("CreationStatus")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateThemeResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateThemeResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTopicRefreshScheduleResponse:
    boto3_raw_data: "type_defs.UpdateTopicRefreshScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")
    DatasetArn = field("DatasetArn")
    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateTopicRefreshScheduleResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTopicRefreshScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTopicResponse:
    boto3_raw_data: "type_defs.UpdateTopicResponseTypeDef" = dataclasses.field()

    TopicId = field("TopicId")
    Arn = field("Arn")
    RefreshArn = field("RefreshArn")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTopicResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTopicResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateUserCustomPermissionResponse:
    boto3_raw_data: "type_defs.UpdateUserCustomPermissionResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateUserCustomPermissionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateUserCustomPermissionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateVPCConnectionResponse:
    boto3_raw_data: "type_defs.UpdateVPCConnectionResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    VPCConnectionId = field("VPCConnectionId")
    UpdateStatus = field("UpdateStatus")
    AvailabilityStatus = field("AvailabilityStatus")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateVPCConnectionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateVPCConnectionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchCreateTopicReviewedAnswerResponse:
    boto3_raw_data: "type_defs.BatchCreateTopicReviewedAnswerResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")

    @cached_property
    def SucceededAnswers(self):  # pragma: no cover
        return SucceededTopicReviewedAnswer.make_many(
            self.boto3_raw_data["SucceededAnswers"]
        )

    @cached_property
    def InvalidAnswers(self):  # pragma: no cover
        return InvalidTopicReviewedAnswer.make_many(
            self.boto3_raw_data["InvalidAnswers"]
        )

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchCreateTopicReviewedAnswerResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchCreateTopicReviewedAnswerResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDeleteTopicReviewedAnswerResponse:
    boto3_raw_data: "type_defs.BatchDeleteTopicReviewedAnswerResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")

    @cached_property
    def SucceededAnswers(self):  # pragma: no cover
        return SucceededTopicReviewedAnswer.make_many(
            self.boto3_raw_data["SucceededAnswers"]
        )

    @cached_property
    def InvalidAnswers(self):  # pragma: no cover
        return InvalidTopicReviewedAnswer.make_many(
            self.boto3_raw_data["InvalidAnswers"]
        )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchDeleteTopicReviewedAnswerResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDeleteTopicReviewedAnswerResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistogramBinOptions:
    boto3_raw_data: "type_defs.HistogramBinOptionsTypeDef" = dataclasses.field()

    SelectedBinType = field("SelectedBinType")

    @cached_property
    def BinCount(self):  # pragma: no cover
        return BinCountOptions.make_one(self.boto3_raw_data["BinCount"])

    @cached_property
    def BinWidth(self):  # pragma: no cover
        return BinWidthOptions.make_one(self.boto3_raw_data["BinWidth"])

    StartValue = field("StartValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HistogramBinOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HistogramBinOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionRepeatPageBreakConfiguration:
    boto3_raw_data: "type_defs.BodySectionRepeatPageBreakConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def After(self):  # pragma: no cover
        return SectionAfterPageBreak.make_one(self.boto3_raw_data["After"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BodySectionRepeatPageBreakConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BodySectionRepeatPageBreakConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SectionPageBreakConfiguration:
    boto3_raw_data: "type_defs.SectionPageBreakConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def After(self):  # pragma: no cover
        return SectionAfterPageBreak.make_one(self.boto3_raw_data["After"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SectionPageBreakConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SectionPageBreakConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TileStyle:
    boto3_raw_data: "type_defs.TileStyleTypeDef" = dataclasses.field()

    @cached_property
    def Border(self):  # pragma: no cover
        return BorderStyle.make_one(self.boto3_raw_data["Border"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TileStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TileStyleTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotOptions:
    boto3_raw_data: "type_defs.BoxPlotOptionsTypeDef" = dataclasses.field()

    @cached_property
    def StyleOptions(self):  # pragma: no cover
        return BoxPlotStyleOptions.make_one(self.boto3_raw_data["StyleOptions"])

    OutlierVisibility = field("OutlierVisibility")
    AllDataPointsVisibility = field("AllDataPointsVisibility")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BoxPlotOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BoxPlotOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BrandColorPalette:
    boto3_raw_data: "type_defs.BrandColorPaletteTypeDef" = dataclasses.field()

    @cached_property
    def Primary(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["Primary"])

    @cached_property
    def Secondary(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["Secondary"])

    @cached_property
    def Accent(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["Accent"])

    @cached_property
    def Measure(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["Measure"])

    @cached_property
    def Dimension(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["Dimension"])

    @cached_property
    def Success(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["Success"])

    @cached_property
    def Info(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["Info"])

    @cached_property
    def Warning(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["Warning"])

    @cached_property
    def Danger(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["Danger"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BrandColorPaletteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BrandColorPaletteTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NavbarStyle:
    boto3_raw_data: "type_defs.NavbarStyleTypeDef" = dataclasses.field()

    @cached_property
    def GlobalNavbar(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["GlobalNavbar"])

    @cached_property
    def ContextualNavbar(self):  # pragma: no cover
        return Palette.make_one(self.boto3_raw_data["ContextualNavbar"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NavbarStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NavbarStyleTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListBrandsResponse:
    boto3_raw_data: "type_defs.ListBrandsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Brands(self):  # pragma: no cover
        return BrandSummary.make_many(self.boto3_raw_data["Brands"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListBrandsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListBrandsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateColumnsOperationOutput:
    boto3_raw_data: "type_defs.CreateColumnsOperationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Columns(self):  # pragma: no cover
        return CalculatedColumn.make_many(self.boto3_raw_data["Columns"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateColumnsOperationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateColumnsOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateColumnsOperation:
    boto3_raw_data: "type_defs.CreateColumnsOperationTypeDef" = dataclasses.field()

    @cached_property
    def Columns(self):  # pragma: no cover
        return CalculatedColumn.make_many(self.boto3_raw_data["Columns"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateColumnsOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateColumnsOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateCustomPermissionsRequest:
    boto3_raw_data: "type_defs.CreateCustomPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    CustomPermissionsName = field("CustomPermissionsName")

    @cached_property
    def Capabilities(self):  # pragma: no cover
        return Capabilities.make_one(self.boto3_raw_data["Capabilities"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateCustomPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateCustomPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomPermissions:
    boto3_raw_data: "type_defs.CustomPermissionsTypeDef" = dataclasses.field()

    Arn = field("Arn")
    CustomPermissionsName = field("CustomPermissionsName")

    @cached_property
    def Capabilities(self):  # pragma: no cover
        return Capabilities.make_one(self.boto3_raw_data["Capabilities"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CustomPermissionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomPermissionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateCustomPermissionsRequest:
    boto3_raw_data: "type_defs.UpdateCustomPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    CustomPermissionsName = field("CustomPermissionsName")

    @cached_property
    def Capabilities(self):  # pragma: no cover
        return Capabilities.make_one(self.boto3_raw_data["Capabilities"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateCustomPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateCustomPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoryFilterConfigurationOutput:
    boto3_raw_data: "type_defs.CategoryFilterConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FilterListConfiguration(self):  # pragma: no cover
        return FilterListConfigurationOutput.make_one(
            self.boto3_raw_data["FilterListConfiguration"]
        )

    @cached_property
    def CustomFilterListConfiguration(self):  # pragma: no cover
        return CustomFilterListConfigurationOutput.make_one(
            self.boto3_raw_data["CustomFilterListConfiguration"]
        )

    @cached_property
    def CustomFilterConfiguration(self):  # pragma: no cover
        return CustomFilterConfiguration.make_one(
            self.boto3_raw_data["CustomFilterConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CategoryFilterConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoryFilterConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoryFilterConfiguration:
    boto3_raw_data: "type_defs.CategoryFilterConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FilterListConfiguration(self):  # pragma: no cover
        return FilterListConfiguration.make_one(
            self.boto3_raw_data["FilterListConfiguration"]
        )

    @cached_property
    def CustomFilterListConfiguration(self):  # pragma: no cover
        return CustomFilterListConfiguration.make_one(
            self.boto3_raw_data["CustomFilterListConfiguration"]
        )

    @cached_property
    def CustomFilterConfiguration(self):  # pragma: no cover
        return CustomFilterConfiguration.make_one(
            self.boto3_raw_data["CustomFilterConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoryFilterConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoryFilterConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterMarker:
    boto3_raw_data: "type_defs.ClusterMarkerTypeDef" = dataclasses.field()

    @cached_property
    def SimpleClusterMarker(self):  # pragma: no cover
        return SimpleClusterMarker.make_one(self.boto3_raw_data["SimpleClusterMarker"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ClusterMarkerTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ClusterMarkerTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicConstantValueOutput:
    boto3_raw_data: "type_defs.TopicConstantValueOutputTypeDef" = dataclasses.field()

    ConstantType = field("ConstantType")
    Value = field("Value")
    Minimum = field("Minimum")
    Maximum = field("Maximum")

    @cached_property
    def ValueList(self):  # pragma: no cover
        return CollectiveConstantEntry.make_many(self.boto3_raw_data["ValueList"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicConstantValueOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicConstantValueOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicConstantValue:
    boto3_raw_data: "type_defs.TopicConstantValueTypeDef" = dataclasses.field()

    ConstantType = field("ConstantType")
    Value = field("Value")
    Minimum = field("Minimum")
    Maximum = field("Maximum")

    @cached_property
    def ValueList(self):  # pragma: no cover
        return CollectiveConstantEntry.make_many(self.boto3_raw_data["ValueList"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicConstantValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicConstantValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicCategoryFilterConstantOutput:
    boto3_raw_data: "type_defs.TopicCategoryFilterConstantOutputTypeDef" = (
        dataclasses.field()
    )

    ConstantType = field("ConstantType")
    SingularConstant = field("SingularConstant")

    @cached_property
    def CollectiveConstant(self):  # pragma: no cover
        return CollectiveConstantOutput.make_one(
            self.boto3_raw_data["CollectiveConstant"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TopicCategoryFilterConstantOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicCategoryFilterConstantOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicCategoryFilterConstant:
    boto3_raw_data: "type_defs.TopicCategoryFilterConstantTypeDef" = dataclasses.field()

    ConstantType = field("ConstantType")
    SingularConstant = field("SingularConstant")

    @cached_property
    def CollectiveConstant(self):  # pragma: no cover
        return CollectiveConstant.make_one(self.boto3_raw_data["CollectiveConstant"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicCategoryFilterConstantTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicCategoryFilterConstantTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColorScaleOutput:
    boto3_raw_data: "type_defs.ColorScaleOutputTypeDef" = dataclasses.field()

    @cached_property
    def Colors(self):  # pragma: no cover
        return DataColor.make_many(self.boto3_raw_data["Colors"])

    ColorFillType = field("ColorFillType")

    @cached_property
    def NullValueColor(self):  # pragma: no cover
        return DataColor.make_one(self.boto3_raw_data["NullValueColor"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColorScaleOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColorScaleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColorScale:
    boto3_raw_data: "type_defs.ColorScaleTypeDef" = dataclasses.field()

    @cached_property
    def Colors(self):  # pragma: no cover
        return DataColor.make_many(self.boto3_raw_data["Colors"])

    ColorFillType = field("ColorFillType")

    @cached_property
    def NullValueColor(self):  # pragma: no cover
        return DataColor.make_one(self.boto3_raw_data["NullValueColor"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColorScaleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ColorScaleTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColorsConfigurationOutput:
    boto3_raw_data: "type_defs.ColorsConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def CustomColors(self):  # pragma: no cover
        return CustomColor.make_many(self.boto3_raw_data["CustomColors"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ColorsConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColorsConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColorsConfiguration:
    boto3_raw_data: "type_defs.ColorsConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CustomColors(self):  # pragma: no cover
        return CustomColor.make_many(self.boto3_raw_data["CustomColors"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ColorsConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColorsConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnTag:
    boto3_raw_data: "type_defs.ColumnTagTypeDef" = dataclasses.field()

    ColumnGeographicRole = field("ColumnGeographicRole")

    @cached_property
    def ColumnDescription(self):  # pragma: no cover
        return ColumnDescription.make_one(self.boto3_raw_data["ColumnDescription"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnTagTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ColumnTagTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnGroupSchemaOutput:
    boto3_raw_data: "type_defs.ColumnGroupSchemaOutputTypeDef" = dataclasses.field()

    Name = field("Name")

    @cached_property
    def ColumnGroupColumnSchemaList(self):  # pragma: no cover
        return ColumnGroupColumnSchema.make_many(
            self.boto3_raw_data["ColumnGroupColumnSchemaList"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ColumnGroupSchemaOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnGroupSchemaOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnGroupSchema:
    boto3_raw_data: "type_defs.ColumnGroupSchemaTypeDef" = dataclasses.field()

    Name = field("Name")

    @cached_property
    def ColumnGroupColumnSchemaList(self):  # pragma: no cover
        return ColumnGroupColumnSchema.make_many(
            self.boto3_raw_data["ColumnGroupColumnSchemaList"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnGroupSchemaTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnGroupSchemaTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnGroupOutput:
    boto3_raw_data: "type_defs.ColumnGroupOutputTypeDef" = dataclasses.field()

    @cached_property
    def GeoSpatialColumnGroup(self):  # pragma: no cover
        return GeoSpatialColumnGroupOutput.make_one(
            self.boto3_raw_data["GeoSpatialColumnGroup"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnGroupOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnGroupOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetSchemaOutput:
    boto3_raw_data: "type_defs.DataSetSchemaOutputTypeDef" = dataclasses.field()

    @cached_property
    def ColumnSchemaList(self):  # pragma: no cover
        return ColumnSchema.make_many(self.boto3_raw_data["ColumnSchemaList"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSetSchemaOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSetSchemaOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetSchema:
    boto3_raw_data: "type_defs.DataSetSchemaTypeDef" = dataclasses.field()

    @cached_property
    def ColumnSchemaList(self):  # pragma: no cover
        return ColumnSchema.make_many(self.boto3_raw_data["ColumnSchemaList"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataSetSchemaTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataSetSchemaTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingCustomIconCondition:
    boto3_raw_data: "type_defs.ConditionalFormattingCustomIconConditionTypeDef" = (
        dataclasses.field()
    )

    Expression = field("Expression")

    @cached_property
    def IconOptions(self):  # pragma: no cover
        return ConditionalFormattingCustomIconOptions.make_one(
            self.boto3_raw_data["IconOptions"]
        )

    Color = field("Color")

    @cached_property
    def DisplayConfiguration(self):  # pragma: no cover
        return ConditionalFormattingIconDisplayConfiguration.make_one(
            self.boto3_raw_data["DisplayConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ConditionalFormattingCustomIconConditionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingCustomIconConditionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAccountSubscriptionResponse:
    boto3_raw_data: "type_defs.CreateAccountSubscriptionResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SignupResponse(self):  # pragma: no cover
        return SignupResponse.make_one(self.boto3_raw_data["SignupResponse"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateAccountSubscriptionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAccountSubscriptionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetSummary:
    boto3_raw_data: "type_defs.DataSetSummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSetId = field("DataSetId")
    Name = field("Name")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")
    ImportMode = field("ImportMode")

    @cached_property
    def RowLevelPermissionDataSet(self):  # pragma: no cover
        return RowLevelPermissionDataSet.make_one(
            self.boto3_raw_data["RowLevelPermissionDataSet"]
        )

    RowLevelPermissionTagConfigurationApplied = field(
        "RowLevelPermissionTagConfigurationApplied"
    )
    ColumnLevelPermissionRulesApplied = field("ColumnLevelPermissionRulesApplied")
    UseAs = field("UseAs")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataSetSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataSetSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFolderMembershipResponse:
    boto3_raw_data: "type_defs.CreateFolderMembershipResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")

    @cached_property
    def FolderMember(self):  # pragma: no cover
        return FolderMember.make_one(self.boto3_raw_data["FolderMember"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateFolderMembershipResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFolderMembershipResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateGroupMembershipResponse:
    boto3_raw_data: "type_defs.CreateGroupMembershipResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupMember(self):  # pragma: no cover
        return GroupMember.make_one(self.boto3_raw_data["GroupMember"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateGroupMembershipResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateGroupMembershipResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeGroupMembershipResponse:
    boto3_raw_data: "type_defs.DescribeGroupMembershipResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupMember(self):  # pragma: no cover
        return GroupMember.make_one(self.boto3_raw_data["GroupMember"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeGroupMembershipResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeGroupMembershipResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListGroupMembershipsResponse:
    boto3_raw_data: "type_defs.ListGroupMembershipsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupMemberList(self):  # pragma: no cover
        return GroupMember.make_many(self.boto3_raw_data["GroupMemberList"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListGroupMembershipsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListGroupMembershipsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateGroupResponse:
    boto3_raw_data: "type_defs.CreateGroupResponseTypeDef" = dataclasses.field()

    @cached_property
    def Group(self):  # pragma: no cover
        return Group.make_one(self.boto3_raw_data["Group"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateGroupResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateGroupResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeGroupResponse:
    boto3_raw_data: "type_defs.DescribeGroupResponseTypeDef" = dataclasses.field()

    @cached_property
    def Group(self):  # pragma: no cover
        return Group.make_one(self.boto3_raw_data["Group"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeGroupResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeGroupResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListGroupsResponse:
    boto3_raw_data: "type_defs.ListGroupsResponseTypeDef" = dataclasses.field()

    @cached_property
    def GroupList(self):  # pragma: no cover
        return Group.make_many(self.boto3_raw_data["GroupList"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListGroupsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListGroupsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUserGroupsResponse:
    boto3_raw_data: "type_defs.ListUserGroupsResponseTypeDef" = dataclasses.field()

    @cached_property
    def GroupList(self):  # pragma: no cover
        return Group.make_many(self.boto3_raw_data["GroupList"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListUserGroupsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUserGroupsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchGroupsResponse:
    boto3_raw_data: "type_defs.SearchGroupsResponseTypeDef" = dataclasses.field()

    @cached_property
    def GroupList(self):  # pragma: no cover
        return Group.make_many(self.boto3_raw_data["GroupList"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchGroupsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchGroupsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateGroupResponse:
    boto3_raw_data: "type_defs.UpdateGroupResponseTypeDef" = dataclasses.field()

    @cached_property
    def Group(self):  # pragma: no cover
        return Group.make_one(self.boto3_raw_data["Group"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateGroupResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateGroupResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTemplateAliasResponse:
    boto3_raw_data: "type_defs.CreateTemplateAliasResponseTypeDef" = dataclasses.field()

    @cached_property
    def TemplateAlias(self):  # pragma: no cover
        return TemplateAlias.make_one(self.boto3_raw_data["TemplateAlias"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTemplateAliasResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTemplateAliasResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTemplateAliasResponse:
    boto3_raw_data: "type_defs.DescribeTemplateAliasResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TemplateAlias(self):  # pragma: no cover
        return TemplateAlias.make_one(self.boto3_raw_data["TemplateAlias"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeTemplateAliasResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTemplateAliasResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTemplateAliasesResponse:
    boto3_raw_data: "type_defs.ListTemplateAliasesResponseTypeDef" = dataclasses.field()

    @cached_property
    def TemplateAliasList(self):  # pragma: no cover
        return TemplateAlias.make_many(self.boto3_raw_data["TemplateAliasList"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTemplateAliasesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTemplateAliasesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTemplateAliasResponse:
    boto3_raw_data: "type_defs.UpdateTemplateAliasResponseTypeDef" = dataclasses.field()

    @cached_property
    def TemplateAlias(self):  # pragma: no cover
        return TemplateAlias.make_one(self.boto3_raw_data["TemplateAlias"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTemplateAliasResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTemplateAliasResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateThemeAliasResponse:
    boto3_raw_data: "type_defs.CreateThemeAliasResponseTypeDef" = dataclasses.field()

    @cached_property
    def ThemeAlias(self):  # pragma: no cover
        return ThemeAlias.make_one(self.boto3_raw_data["ThemeAlias"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateThemeAliasResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateThemeAliasResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeThemeAliasResponse:
    boto3_raw_data: "type_defs.DescribeThemeAliasResponseTypeDef" = dataclasses.field()

    @cached_property
    def ThemeAlias(self):  # pragma: no cover
        return ThemeAlias.make_one(self.boto3_raw_data["ThemeAlias"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeThemeAliasResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeThemeAliasResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListThemeAliasesResponse:
    boto3_raw_data: "type_defs.ListThemeAliasesResponseTypeDef" = dataclasses.field()

    @cached_property
    def ThemeAliasList(self):  # pragma: no cover
        return ThemeAlias.make_many(self.boto3_raw_data["ThemeAliasList"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListThemeAliasesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListThemeAliasesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateThemeAliasResponse:
    boto3_raw_data: "type_defs.UpdateThemeAliasResponseTypeDef" = dataclasses.field()

    @cached_property
    def ThemeAlias(self):  # pragma: no cover
        return ThemeAlias.make_one(self.boto3_raw_data["ThemeAlias"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateThemeAliasResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateThemeAliasResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomActionNavigationOperation:
    boto3_raw_data: "type_defs.CustomActionNavigationOperationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def LocalNavigationConfiguration(self):  # pragma: no cover
        return LocalNavigationConfiguration.make_one(
            self.boto3_raw_data["LocalNavigationConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CustomActionNavigationOperationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomActionNavigationOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomValuesConfigurationOutput:
    boto3_raw_data: "type_defs.CustomValuesConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CustomValues(self):  # pragma: no cover
        return CustomParameterValuesOutput.make_one(self.boto3_raw_data["CustomValues"])

    IncludeNullValue = field("IncludeNullValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CustomValuesConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomValuesConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomSqlOutput:
    boto3_raw_data: "type_defs.CustomSqlOutputTypeDef" = dataclasses.field()

    DataSourceArn = field("DataSourceArn")
    Name = field("Name")
    SqlQuery = field("SqlQuery")

    @cached_property
    def Columns(self):  # pragma: no cover
        return InputColumn.make_many(self.boto3_raw_data["Columns"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CustomSqlOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CustomSqlOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomSql:
    boto3_raw_data: "type_defs.CustomSqlTypeDef" = dataclasses.field()

    DataSourceArn = field("DataSourceArn")
    Name = field("Name")
    SqlQuery = field("SqlQuery")

    @cached_property
    def Columns(self):  # pragma: no cover
        return InputColumn.make_many(self.boto3_raw_data["Columns"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CustomSqlTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CustomSqlTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RelationalTableOutput:
    boto3_raw_data: "type_defs.RelationalTableOutputTypeDef" = dataclasses.field()

    DataSourceArn = field("DataSourceArn")
    Name = field("Name")

    @cached_property
    def InputColumns(self):  # pragma: no cover
        return InputColumn.make_many(self.boto3_raw_data["InputColumns"])

    Catalog = field("Catalog")
    Schema = field("Schema")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RelationalTableOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RelationalTableOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RelationalTable:
    boto3_raw_data: "type_defs.RelationalTableTypeDef" = dataclasses.field()

    DataSourceArn = field("DataSourceArn")
    Name = field("Name")

    @cached_property
    def InputColumns(self):  # pragma: no cover
        return InputColumn.make_many(self.boto3_raw_data["InputColumns"])

    Catalog = field("Catalog")
    Schema = field("Schema")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RelationalTableTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RelationalTableTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualInteractionOptions:
    boto3_raw_data: "type_defs.VisualInteractionOptionsTypeDef" = dataclasses.field()

    @cached_property
    def VisualMenuOption(self):  # pragma: no cover
        return VisualMenuOption.make_one(self.boto3_raw_data["VisualMenuOption"])

    @cached_property
    def ContextMenuOption(self):  # pragma: no cover
        return ContextMenuOption.make_one(self.boto3_raw_data["ContextMenuOption"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualInteractionOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualInteractionOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchDashboardsRequest:
    boto3_raw_data: "type_defs.SearchDashboardsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return DashboardSearchFilter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchDashboardsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchDashboardsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDashboardsResponse:
    boto3_raw_data: "type_defs.ListDashboardsResponseTypeDef" = dataclasses.field()

    @cached_property
    def DashboardSummaryList(self):  # pragma: no cover
        return DashboardSummary.make_many(self.boto3_raw_data["DashboardSummaryList"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDashboardsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDashboardsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchDashboardsResponse:
    boto3_raw_data: "type_defs.SearchDashboardsResponseTypeDef" = dataclasses.field()

    @cached_property
    def DashboardSummaryList(self):  # pragma: no cover
        return DashboardSummary.make_many(self.boto3_raw_data["DashboardSummaryList"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchDashboardsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchDashboardsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDashboardVersionsResponse:
    boto3_raw_data: "type_defs.ListDashboardVersionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DashboardVersionSummaryList(self):  # pragma: no cover
        return DashboardVersionSummary.make_many(
            self.boto3_raw_data["DashboardVersionSummaryList"]
        )

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListDashboardVersionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDashboardVersionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardVisualPublishOptions:
    boto3_raw_data: "type_defs.DashboardVisualPublishOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ExportHiddenFieldsOption(self):  # pragma: no cover
        return ExportHiddenFieldsOption.make_one(
            self.boto3_raw_data["ExportHiddenFieldsOption"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DashboardVisualPublishOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardVisualPublishOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableInlineVisualization:
    boto3_raw_data: "type_defs.TableInlineVisualizationTypeDef" = dataclasses.field()

    @cached_property
    def DataBars(self):  # pragma: no cover
        return DataBarsOptions.make_one(self.boto3_raw_data["DataBars"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableInlineVisualizationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableInlineVisualizationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataLabelType:
    boto3_raw_data: "type_defs.DataLabelTypeTypeDef" = dataclasses.field()

    @cached_property
    def FieldLabelType(self):  # pragma: no cover
        return FieldLabelType.make_one(self.boto3_raw_data["FieldLabelType"])

    @cached_property
    def DataPathLabelType(self):  # pragma: no cover
        return DataPathLabelType.make_one(self.boto3_raw_data["DataPathLabelType"])

    @cached_property
    def RangeEndsLabelType(self):  # pragma: no cover
        return RangeEndsLabelType.make_one(self.boto3_raw_data["RangeEndsLabelType"])

    @cached_property
    def MinimumLabelType(self):  # pragma: no cover
        return MinimumLabelType.make_one(self.boto3_raw_data["MinimumLabelType"])

    @cached_property
    def MaximumLabelType(self):  # pragma: no cover
        return MaximumLabelType.make_one(self.boto3_raw_data["MaximumLabelType"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataLabelTypeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataLabelTypeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataPathValue:
    boto3_raw_data: "type_defs.DataPathValueTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    FieldValue = field("FieldValue")

    @cached_property
    def DataPathType(self):  # pragma: no cover
        return DataPathType.make_one(self.boto3_raw_data["DataPathType"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataPathValueTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataPathValueTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchDataSetsRequest:
    boto3_raw_data: "type_defs.SearchDataSetsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return DataSetSearchFilter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchDataSetsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchDataSetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchDataSourcesRequest:
    boto3_raw_data: "type_defs.SearchDataSourcesRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return DataSourceSearchFilter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchDataSourcesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchDataSourcesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchDataSourcesResponse:
    boto3_raw_data: "type_defs.SearchDataSourcesResponseTypeDef" = dataclasses.field()

    @cached_property
    def DataSourceSummaries(self):  # pragma: no cover
        return DataSourceSummary.make_many(self.boto3_raw_data["DataSourceSummaries"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchDataSourcesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchDataSourcesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeDatasetParameterOutput:
    boto3_raw_data: "type_defs.DateTimeDatasetParameterOutputTypeDef" = (
        dataclasses.field()
    )

    Id = field("Id")
    Name = field("Name")
    ValueType = field("ValueType")
    TimeGranularity = field("TimeGranularity")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return DateTimeDatasetParameterDefaultValuesOutput.make_one(
            self.boto3_raw_data["DefaultValues"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DateTimeDatasetParameterOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeDatasetParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeRangeFilterValueOutput:
    boto3_raw_data: "type_defs.TimeRangeFilterValueOutputTypeDef" = dataclasses.field()

    StaticValue = field("StaticValue")

    @cached_property
    def RollingDate(self):  # pragma: no cover
        return RollingDateConfiguration.make_one(self.boto3_raw_data["RollingDate"])

    Parameter = field("Parameter")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TimeRangeFilterValueOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeRangeFilterValueOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeRangeFilterValue:
    boto3_raw_data: "type_defs.TimeRangeFilterValueTypeDef" = dataclasses.field()

    StaticValue = field("StaticValue")

    @cached_property
    def RollingDate(self):  # pragma: no cover
        return RollingDateConfiguration.make_one(self.boto3_raw_data["RollingDate"])

    Parameter = field("Parameter")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TimeRangeFilterValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeRangeFilterValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalDatasetParameterOutput:
    boto3_raw_data: "type_defs.DecimalDatasetParameterOutputTypeDef" = (
        dataclasses.field()
    )

    Id = field("Id")
    Name = field("Name")
    ValueType = field("ValueType")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return DecimalDatasetParameterDefaultValuesOutput.make_one(
            self.boto3_raw_data["DefaultValues"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DecimalDatasetParameterOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalDatasetParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAnalysisPermissionsResponse:
    boto3_raw_data: "type_defs.DescribeAnalysisPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    AnalysisId = field("AnalysisId")
    AnalysisArn = field("AnalysisArn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAnalysisPermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAnalysisPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSetPermissionsResponse:
    boto3_raw_data: "type_defs.DescribeDataSetPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    DataSetArn = field("DataSetArn")
    DataSetId = field("DataSetId")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDataSetPermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSetPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSourcePermissionsResponse:
    boto3_raw_data: "type_defs.DescribeDataSourcePermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    DataSourceArn = field("DataSourceArn")
    DataSourceId = field("DataSourceId")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDataSourcePermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSourcePermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFolderPermissionsResponse:
    boto3_raw_data: "type_defs.DescribeFolderPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    FolderId = field("FolderId")
    Arn = field("Arn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFolderPermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFolderPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFolderResolvedPermissionsResponse:
    boto3_raw_data: "type_defs.DescribeFolderResolvedPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    FolderId = field("FolderId")
    Arn = field("Arn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFolderResolvedPermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFolderResolvedPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTemplatePermissionsResponse:
    boto3_raw_data: "type_defs.DescribeTemplatePermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    TemplateId = field("TemplateId")
    TemplateArn = field("TemplateArn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTemplatePermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTemplatePermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeThemePermissionsResponse:
    boto3_raw_data: "type_defs.DescribeThemePermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    ThemeId = field("ThemeId")
    ThemeArn = field("ThemeArn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeThemePermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeThemePermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTopicPermissionsResponse:
    boto3_raw_data: "type_defs.DescribeTopicPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeTopicPermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTopicPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LinkSharingConfigurationOutput:
    boto3_raw_data: "type_defs.LinkSharingConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LinkSharingConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LinkSharingConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAnalysisPermissionsResponse:
    boto3_raw_data: "type_defs.UpdateAnalysisPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    AnalysisArn = field("AnalysisArn")
    AnalysisId = field("AnalysisId")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateAnalysisPermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAnalysisPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFolderPermissionsResponse:
    boto3_raw_data: "type_defs.UpdateFolderPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    Arn = field("Arn")
    FolderId = field("FolderId")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateFolderPermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFolderPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTemplatePermissionsResponse:
    boto3_raw_data: "type_defs.UpdateTemplatePermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    TemplateId = field("TemplateId")
    TemplateArn = field("TemplateArn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateTemplatePermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTemplatePermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateThemePermissionsResponse:
    boto3_raw_data: "type_defs.UpdateThemePermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    ThemeId = field("ThemeId")
    ThemeArn = field("ThemeArn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateThemePermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateThemePermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTopicPermissionsResponse:
    boto3_raw_data: "type_defs.UpdateTopicPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateTopicPermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTopicPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFolderPermissionsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeFolderPermissionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    Namespace = field("Namespace")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFolderPermissionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFolderPermissionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFolderResolvedPermissionsRequestPaginate:
    boto3_raw_data: (
        "type_defs.DescribeFolderResolvedPermissionsRequestPaginateTypeDef"
    ) = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    Namespace = field("Namespace")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeFolderResolvedPermissionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.DescribeFolderResolvedPermissionsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAnalysesRequestPaginate:
    boto3_raw_data: "type_defs.ListAnalysesRequestPaginateTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAnalysesRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAnalysesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAssetBundleExportJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListAssetBundleExportJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListAssetBundleExportJobsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAssetBundleExportJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAssetBundleImportJobsRequestPaginate:
    boto3_raw_data: "type_defs.ListAssetBundleImportJobsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListAssetBundleImportJobsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAssetBundleImportJobsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListBrandsRequestPaginate:
    boto3_raw_data: "type_defs.ListBrandsRequestPaginateTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListBrandsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListBrandsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCustomPermissionsRequestPaginate:
    boto3_raw_data: "type_defs.ListCustomPermissionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListCustomPermissionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCustomPermissionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDashboardVersionsRequestPaginate:
    boto3_raw_data: "type_defs.ListDashboardVersionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListDashboardVersionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDashboardVersionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDashboardsRequestPaginate:
    boto3_raw_data: "type_defs.ListDashboardsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListDashboardsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDashboardsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDataSetsRequestPaginate:
    boto3_raw_data: "type_defs.ListDataSetsRequestPaginateTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDataSetsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDataSetsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDataSourcesRequestPaginate:
    boto3_raw_data: "type_defs.ListDataSourcesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListDataSourcesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDataSourcesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFolderMembersRequestPaginate:
    boto3_raw_data: "type_defs.ListFolderMembersRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListFolderMembersRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFolderMembersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFoldersForResourceRequestPaginate:
    boto3_raw_data: "type_defs.ListFoldersForResourceRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    ResourceArn = field("ResourceArn")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListFoldersForResourceRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFoldersForResourceRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFoldersRequestPaginate:
    boto3_raw_data: "type_defs.ListFoldersRequestPaginateTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListFoldersRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFoldersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListGroupMembershipsRequestPaginate:
    boto3_raw_data: "type_defs.ListGroupMembershipsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    GroupName = field("GroupName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListGroupMembershipsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListGroupMembershipsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListGroupsRequestPaginate:
    boto3_raw_data: "type_defs.ListGroupsRequestPaginateTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListGroupsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListGroupsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIAMPolicyAssignmentsForUserRequestPaginate:
    boto3_raw_data: (
        "type_defs.ListIAMPolicyAssignmentsForUserRequestPaginateTypeDef"
    ) = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    UserName = field("UserName")
    Namespace = field("Namespace")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListIAMPolicyAssignmentsForUserRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListIAMPolicyAssignmentsForUserRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIAMPolicyAssignmentsRequestPaginate:
    boto3_raw_data: "type_defs.ListIAMPolicyAssignmentsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    AssignmentStatus = field("AssignmentStatus")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListIAMPolicyAssignmentsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIAMPolicyAssignmentsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIngestionsRequestPaginate:
    boto3_raw_data: "type_defs.ListIngestionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    DataSetId = field("DataSetId")
    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListIngestionsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIngestionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListNamespacesRequestPaginate:
    boto3_raw_data: "type_defs.ListNamespacesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListNamespacesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListNamespacesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListRoleMembershipsRequestPaginate:
    boto3_raw_data: "type_defs.ListRoleMembershipsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    Role = field("Role")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListRoleMembershipsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListRoleMembershipsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTemplateAliasesRequestPaginate:
    boto3_raw_data: "type_defs.ListTemplateAliasesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListTemplateAliasesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTemplateAliasesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTemplateVersionsRequestPaginate:
    boto3_raw_data: "type_defs.ListTemplateVersionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListTemplateVersionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTemplateVersionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTemplatesRequestPaginate:
    boto3_raw_data: "type_defs.ListTemplatesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTemplatesRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTemplatesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListThemeVersionsRequestPaginate:
    boto3_raw_data: "type_defs.ListThemeVersionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListThemeVersionsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListThemeVersionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListThemesRequestPaginate:
    boto3_raw_data: "type_defs.ListThemesRequestPaginateTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Type = field("Type")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListThemesRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListThemesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUserGroupsRequestPaginate:
    boto3_raw_data: "type_defs.ListUserGroupsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    UserName = field("UserName")
    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListUserGroupsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUserGroupsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUsersRequestPaginate:
    boto3_raw_data: "type_defs.ListUsersRequestPaginateTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListUsersRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUsersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchAnalysesRequestPaginate:
    boto3_raw_data: "type_defs.SearchAnalysesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return AnalysisSearchFilter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SearchAnalysesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchAnalysesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchDashboardsRequestPaginate:
    boto3_raw_data: "type_defs.SearchDashboardsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return DashboardSearchFilter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SearchDashboardsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchDashboardsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchDataSetsRequestPaginate:
    boto3_raw_data: "type_defs.SearchDataSetsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return DataSetSearchFilter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SearchDataSetsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchDataSetsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchDataSourcesRequestPaginate:
    boto3_raw_data: "type_defs.SearchDataSourcesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return DataSourceSearchFilter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SearchDataSourcesRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchDataSourcesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeFolderResponse:
    boto3_raw_data: "type_defs.DescribeFolderResponseTypeDef" = dataclasses.field()

    Status = field("Status")

    @cached_property
    def Folder(self):  # pragma: no cover
        return Folder.make_one(self.boto3_raw_data["Folder"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeFolderResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeFolderResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIAMPolicyAssignmentResponse:
    boto3_raw_data: "type_defs.DescribeIAMPolicyAssignmentResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IAMPolicyAssignment(self):  # pragma: no cover
        return IAMPolicyAssignment.make_one(self.boto3_raw_data["IAMPolicyAssignment"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeIAMPolicyAssignmentResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIAMPolicyAssignmentResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeKeyRegistrationResponse:
    boto3_raw_data: "type_defs.DescribeKeyRegistrationResponseTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def KeyRegistration(self):  # pragma: no cover
        return RegisteredCustomerManagedKey.make_many(
            self.boto3_raw_data["KeyRegistration"]
        )

    @cached_property
    def QDataKey(self):  # pragma: no cover
        return QDataKey.make_one(self.boto3_raw_data["QDataKey"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeKeyRegistrationResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeKeyRegistrationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateKeyRegistrationRequest:
    boto3_raw_data: "type_defs.UpdateKeyRegistrationRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def KeyRegistration(self):  # pragma: no cover
        return RegisteredCustomerManagedKey.make_many(
            self.boto3_raw_data["KeyRegistration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateKeyRegistrationRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateKeyRegistrationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTopicRefreshResponse:
    boto3_raw_data: "type_defs.DescribeTopicRefreshResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RefreshDetails(self):  # pragma: no cover
        return TopicRefreshDetails.make_one(self.boto3_raw_data["RefreshDetails"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTopicRefreshResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTopicRefreshResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTopicRefreshScheduleResponse:
    boto3_raw_data: "type_defs.DescribeTopicRefreshScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")
    DatasetArn = field("DatasetArn")

    @cached_property
    def RefreshSchedule(self):  # pragma: no cover
        return TopicRefreshScheduleOutput.make_one(
            self.boto3_raw_data["RefreshSchedule"]
        )

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTopicRefreshScheduleResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTopicRefreshScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicRefreshScheduleSummary:
    boto3_raw_data: "type_defs.TopicRefreshScheduleSummaryTypeDef" = dataclasses.field()

    DatasetId = field("DatasetId")
    DatasetArn = field("DatasetArn")
    DatasetName = field("DatasetName")

    @cached_property
    def RefreshSchedule(self):  # pragma: no cover
        return TopicRefreshScheduleOutput.make_one(
            self.boto3_raw_data["RefreshSchedule"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicRefreshScheduleSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicRefreshScheduleSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeUserResponse:
    boto3_raw_data: "type_defs.DescribeUserResponseTypeDef" = dataclasses.field()

    @cached_property
    def User(self):  # pragma: no cover
        return User.make_one(self.boto3_raw_data["User"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeUserResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeUserResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListUsersResponse:
    boto3_raw_data: "type_defs.ListUsersResponseTypeDef" = dataclasses.field()

    @cached_property
    def UserList(self):  # pragma: no cover
        return User.make_many(self.boto3_raw_data["UserList"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ListUsersResponseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListUsersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisterUserResponse:
    boto3_raw_data: "type_defs.RegisterUserResponseTypeDef" = dataclasses.field()

    @cached_property
    def User(self):  # pragma: no cover
        return User.make_one(self.boto3_raw_data["User"])

    UserInvitationUrl = field("UserInvitationUrl")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RegisterUserResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisterUserResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateUserResponse:
    boto3_raw_data: "type_defs.UpdateUserResponseTypeDef" = dataclasses.field()

    @cached_property
    def User(self):  # pragma: no cover
        return User.make_one(self.boto3_raw_data["User"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateUserResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateUserResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisplayFormatOptions:
    boto3_raw_data: "type_defs.DisplayFormatOptionsTypeDef" = dataclasses.field()

    UseBlankCellFormat = field("UseBlankCellFormat")
    BlankCellFormat = field("BlankCellFormat")
    DateFormat = field("DateFormat")
    DecimalSeparator = field("DecimalSeparator")
    GroupingSeparator = field("GroupingSeparator")
    UseGrouping = field("UseGrouping")
    FractionDigits = field("FractionDigits")
    Prefix = field("Prefix")
    Suffix = field("Suffix")
    UnitScaler = field("UnitScaler")

    @cached_property
    def NegativeFormat(self):  # pragma: no cover
        return NegativeFormat.make_one(self.boto3_raw_data["NegativeFormat"])

    CurrencySymbol = field("CurrencySymbol")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisplayFormatOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisplayFormatOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DonutOptions:
    boto3_raw_data: "type_defs.DonutOptionsTypeDef" = dataclasses.field()

    @cached_property
    def ArcOptions(self):  # pragma: no cover
        return ArcOptions.make_one(self.boto3_raw_data["ArcOptions"])

    @cached_property
    def DonutCenterOptions(self):  # pragma: no cover
        return DonutCenterOptions.make_one(self.boto3_raw_data["DonutCenterOptions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DonutOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DonutOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterAggMetrics:
    boto3_raw_data: "type_defs.FilterAggMetricsTypeDef" = dataclasses.field()

    @cached_property
    def MetricOperand(self):  # pragma: no cover
        return Identifier.make_one(self.boto3_raw_data["MetricOperand"])

    Function = field("Function")
    SortDirection = field("SortDirection")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterAggMetricsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterAggMetricsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicSortClause:
    boto3_raw_data: "type_defs.TopicSortClauseTypeDef" = dataclasses.field()

    @cached_property
    def Operand(self):  # pragma: no cover
        return Identifier.make_one(self.boto3_raw_data["Operand"])

    SortDirection = field("SortDirection")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicSortClauseTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicSortClauseTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterOperationTargetVisualsConfigurationOutput:
    boto3_raw_data: (
        "type_defs.FilterOperationTargetVisualsConfigurationOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def SameSheetTargetVisualConfiguration(self):  # pragma: no cover
        return SameSheetTargetVisualConfigurationOutput.make_one(
            self.boto3_raw_data["SameSheetTargetVisualConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilterOperationTargetVisualsConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.FilterOperationTargetVisualsConfigurationOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterOperationTargetVisualsConfiguration:
    boto3_raw_data: "type_defs.FilterOperationTargetVisualsConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SameSheetTargetVisualConfiguration(self):  # pragma: no cover
        return SameSheetTargetVisualConfiguration.make_one(
            self.boto3_raw_data["SameSheetTargetVisualConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilterOperationTargetVisualsConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterOperationTargetVisualsConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchFoldersRequestPaginate:
    boto3_raw_data: "type_defs.SearchFoldersRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return FolderSearchFilter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchFoldersRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchFoldersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchFoldersRequest:
    boto3_raw_data: "type_defs.SearchFoldersRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return FolderSearchFilter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchFoldersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchFoldersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFoldersResponse:
    boto3_raw_data: "type_defs.ListFoldersResponseTypeDef" = dataclasses.field()

    Status = field("Status")

    @cached_property
    def FolderSummaryList(self):  # pragma: no cover
        return FolderSummary.make_many(self.boto3_raw_data["FolderSummaryList"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListFoldersResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFoldersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchFoldersResponse:
    boto3_raw_data: "type_defs.SearchFoldersResponseTypeDef" = dataclasses.field()

    Status = field("Status")

    @cached_property
    def FolderSummaryList(self):  # pragma: no cover
        return FolderSummary.make_many(self.boto3_raw_data["FolderSummaryList"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchFoldersResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchFoldersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FontConfiguration:
    boto3_raw_data: "type_defs.FontConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FontSize(self):  # pragma: no cover
        return FontSize.make_one(self.boto3_raw_data["FontSize"])

    FontDecoration = field("FontDecoration")
    FontColor = field("FontColor")

    @cached_property
    def FontWeight(self):  # pragma: no cover
        return FontWeight.make_one(self.boto3_raw_data["FontWeight"])

    FontStyle = field("FontStyle")
    FontFamily = field("FontFamily")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FontConfigurationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FontConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TypographyOutput:
    boto3_raw_data: "type_defs.TypographyOutputTypeDef" = dataclasses.field()

    @cached_property
    def FontFamilies(self):  # pragma: no cover
        return Font.make_many(self.boto3_raw_data["FontFamilies"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TypographyOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TypographyOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Typography:
    boto3_raw_data: "type_defs.TypographyTypeDef" = dataclasses.field()

    @cached_property
    def FontFamilies(self):  # pragma: no cover
        return Font.make_many(self.boto3_raw_data["FontFamilies"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TypographyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TypographyTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ForecastScenarioOutput:
    boto3_raw_data: "type_defs.ForecastScenarioOutputTypeDef" = dataclasses.field()

    @cached_property
    def WhatIfPointScenario(self):  # pragma: no cover
        return WhatIfPointScenarioOutput.make_one(
            self.boto3_raw_data["WhatIfPointScenario"]
        )

    @cached_property
    def WhatIfRangeScenario(self):  # pragma: no cover
        return WhatIfRangeScenarioOutput.make_one(
            self.boto3_raw_data["WhatIfRangeScenario"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ForecastScenarioOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ForecastScenarioOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormLayoutCanvasSizeOptions:
    boto3_raw_data: "type_defs.FreeFormLayoutCanvasSizeOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ScreenCanvasSizeOptions(self):  # pragma: no cover
        return FreeFormLayoutScreenCanvasSizeOptions.make_one(
            self.boto3_raw_data["ScreenCanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FreeFormLayoutCanvasSizeOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormLayoutCanvasSizeOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotAnonymousUser:
    boto3_raw_data: "type_defs.SnapshotAnonymousUserTypeDef" = dataclasses.field()

    @cached_property
    def RowLevelPermissionTags(self):  # pragma: no cover
        return SessionTag.make_many(self.boto3_raw_data["RowLevelPermissionTags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotAnonymousUserTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotAnonymousUserTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class QAResult:
    boto3_raw_data: "type_defs.QAResultTypeDef" = dataclasses.field()

    ResultType = field("ResultType")

    @cached_property
    def DashboardVisual(self):  # pragma: no cover
        return DashboardVisualResult.make_one(self.boto3_raw_data["DashboardVisual"])

    @cached_property
    def GeneratedAnswer(self):  # pragma: no cover
        return GeneratedAnswerResult.make_one(self.boto3_raw_data["GeneratedAnswer"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.QAResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.QAResultTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapState:
    boto3_raw_data: "type_defs.GeospatialMapStateTypeDef" = dataclasses.field()

    @cached_property
    def Bounds(self):  # pragma: no cover
        return GeospatialCoordinateBounds.make_one(self.boto3_raw_data["Bounds"])

    MapNavigation = field("MapNavigation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialMapStateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapStateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialWindowOptions:
    boto3_raw_data: "type_defs.GeospatialWindowOptionsTypeDef" = dataclasses.field()

    @cached_property
    def Bounds(self):  # pragma: no cover
        return GeospatialCoordinateBounds.make_one(self.boto3_raw_data["Bounds"])

    MapZoomMode = field("MapZoomMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialWindowOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialWindowOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialDataSourceItem:
    boto3_raw_data: "type_defs.GeospatialDataSourceItemTypeDef" = dataclasses.field()

    @cached_property
    def StaticFileDataSource(self):  # pragma: no cover
        return GeospatialStaticFileSource.make_one(
            self.boto3_raw_data["StaticFileDataSource"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialDataSourceItemTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialDataSourceItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialHeatmapColorScaleOutput:
    boto3_raw_data: "type_defs.GeospatialHeatmapColorScaleOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Colors(self):  # pragma: no cover
        return GeospatialHeatmapDataColor.make_many(self.boto3_raw_data["Colors"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GeospatialHeatmapColorScaleOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialHeatmapColorScaleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialHeatmapColorScale:
    boto3_raw_data: "type_defs.GeospatialHeatmapColorScaleTypeDef" = dataclasses.field()

    @cached_property
    def Colors(self):  # pragma: no cover
        return GeospatialHeatmapDataColor.make_many(self.boto3_raw_data["Colors"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialHeatmapColorScaleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialHeatmapColorScaleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialNullDataSettings:
    boto3_raw_data: "type_defs.GeospatialNullDataSettingsTypeDef" = dataclasses.field()

    @cached_property
    def SymbolStyle(self):  # pragma: no cover
        return GeospatialNullSymbolStyle.make_one(self.boto3_raw_data["SymbolStyle"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialNullDataSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialNullDataSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableSideBorderOptions:
    boto3_raw_data: "type_defs.TableSideBorderOptionsTypeDef" = dataclasses.field()

    @cached_property
    def InnerVertical(self):  # pragma: no cover
        return TableBorderOptions.make_one(self.boto3_raw_data["InnerVertical"])

    @cached_property
    def InnerHorizontal(self):  # pragma: no cover
        return TableBorderOptions.make_one(self.boto3_raw_data["InnerHorizontal"])

    @cached_property
    def Left(self):  # pragma: no cover
        return TableBorderOptions.make_one(self.boto3_raw_data["Left"])

    @cached_property
    def Right(self):  # pragma: no cover
        return TableBorderOptions.make_one(self.boto3_raw_data["Right"])

    @cached_property
    def Top(self):  # pragma: no cover
        return TableBorderOptions.make_one(self.boto3_raw_data["Top"])

    @cached_property
    def Bottom(self):  # pragma: no cover
        return TableBorderOptions.make_one(self.boto3_raw_data["Bottom"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableSideBorderOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableSideBorderOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GradientColorOutput:
    boto3_raw_data: "type_defs.GradientColorOutputTypeDef" = dataclasses.field()

    @cached_property
    def Stops(self):  # pragma: no cover
        return GradientStop.make_many(self.boto3_raw_data["Stops"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GradientColorOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GradientColorOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GradientColor:
    boto3_raw_data: "type_defs.GradientColorTypeDef" = dataclasses.field()

    @cached_property
    def Stops(self):  # pragma: no cover
        return GradientStop.make_many(self.boto3_raw_data["Stops"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GradientColorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GradientColorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GridLayoutCanvasSizeOptions:
    boto3_raw_data: "type_defs.GridLayoutCanvasSizeOptionsTypeDef" = dataclasses.field()

    @cached_property
    def ScreenCanvasSizeOptions(self):  # pragma: no cover
        return GridLayoutScreenCanvasSizeOptions.make_one(
            self.boto3_raw_data["ScreenCanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GridLayoutCanvasSizeOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GridLayoutCanvasSizeOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchGroupsRequestPaginate:
    boto3_raw_data: "type_defs.SearchGroupsRequestPaginateTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def Filters(self):  # pragma: no cover
        return GroupSearchFilter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchGroupsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchGroupsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchGroupsRequest:
    boto3_raw_data: "type_defs.SearchGroupsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")

    @cached_property
    def Filters(self):  # pragma: no cover
        return GroupSearchFilter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchGroupsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchGroupsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIAMPolicyAssignmentsResponse:
    boto3_raw_data: "type_defs.ListIAMPolicyAssignmentsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IAMPolicyAssignments(self):  # pragma: no cover
        return IAMPolicyAssignmentSummary.make_many(
            self.boto3_raw_data["IAMPolicyAssignments"]
        )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListIAMPolicyAssignmentsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIAMPolicyAssignmentsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageConfiguration:
    boto3_raw_data: "type_defs.ImageConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Source(self):  # pragma: no cover
        return ImageSource.make_one(self.boto3_raw_data["Source"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Image:
    boto3_raw_data: "type_defs.ImageTypeDef" = dataclasses.field()

    @cached_property
    def Source(self):  # pragma: no cover
        return ImageSource.make_one(self.boto3_raw_data["Source"])

    GeneratedImageUrl = field("GeneratedImageUrl")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageInteractionOptions:
    boto3_raw_data: "type_defs.ImageInteractionOptionsTypeDef" = dataclasses.field()

    @cached_property
    def ImageMenuOption(self):  # pragma: no cover
        return ImageMenuOption.make_one(self.boto3_raw_data["ImageMenuOption"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageInteractionOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageInteractionOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IncrementalRefresh:
    boto3_raw_data: "type_defs.IncrementalRefreshTypeDef" = dataclasses.field()

    @cached_property
    def LookbackWindow(self):  # pragma: no cover
        return LookbackWindow.make_one(self.boto3_raw_data["LookbackWindow"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IncrementalRefreshTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IncrementalRefreshTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ingestion:
    boto3_raw_data: "type_defs.IngestionTypeDef" = dataclasses.field()

    Arn = field("Arn")
    IngestionStatus = field("IngestionStatus")
    CreatedTime = field("CreatedTime")
    IngestionId = field("IngestionId")

    @cached_property
    def ErrorInfo(self):  # pragma: no cover
        return ErrorInfo.make_one(self.boto3_raw_data["ErrorInfo"])

    @cached_property
    def RowInfo(self):  # pragma: no cover
        return RowInfo.make_one(self.boto3_raw_data["RowInfo"])

    @cached_property
    def QueueInfo(self):  # pragma: no cover
        return QueueInfo.make_one(self.boto3_raw_data["QueueInfo"])

    IngestionTimeInSeconds = field("IngestionTimeInSeconds")
    IngestionSizeInBytes = field("IngestionSizeInBytes")
    RequestSource = field("RequestSource")
    RequestType = field("RequestType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IngestionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IngestionTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerDatasetParameterOutput:
    boto3_raw_data: "type_defs.IntegerDatasetParameterOutputTypeDef" = (
        dataclasses.field()
    )

    Id = field("Id")
    Name = field("Name")
    ValueType = field("ValueType")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return IntegerDatasetParameterDefaultValuesOutput.make_one(
            self.boto3_raw_data["DefaultValues"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.IntegerDatasetParameterOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerDatasetParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JoinInstruction:
    boto3_raw_data: "type_defs.JoinInstructionTypeDef" = dataclasses.field()

    LeftOperand = field("LeftOperand")
    RightOperand = field("RightOperand")
    Type = field("Type")
    OnClause = field("OnClause")

    @cached_property
    def LeftJoinKeyProperties(self):  # pragma: no cover
        return JoinKeyProperties.make_one(self.boto3_raw_data["LeftJoinKeyProperties"])

    @cached_property
    def RightJoinKeyProperties(self):  # pragma: no cover
        return JoinKeyProperties.make_one(self.boto3_raw_data["RightJoinKeyProperties"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.JoinInstructionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.JoinInstructionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIVisualLayoutOptions:
    boto3_raw_data: "type_defs.KPIVisualLayoutOptionsTypeDef" = dataclasses.field()

    @cached_property
    def StandardLayout(self):  # pragma: no cover
        return KPIVisualStandardLayout.make_one(self.boto3_raw_data["StandardLayout"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KPIVisualLayoutOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIVisualLayoutOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartDefaultSeriesSettings:
    boto3_raw_data: "type_defs.LineChartDefaultSeriesSettingsTypeDef" = (
        dataclasses.field()
    )

    AxisBinding = field("AxisBinding")

    @cached_property
    def LineStyleSettings(self):  # pragma: no cover
        return LineChartLineStyleSettings.make_one(
            self.boto3_raw_data["LineStyleSettings"]
        )

    @cached_property
    def MarkerStyleSettings(self):  # pragma: no cover
        return LineChartMarkerStyleSettings.make_one(
            self.boto3_raw_data["MarkerStyleSettings"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LineChartDefaultSeriesSettingsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartDefaultSeriesSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartSeriesSettings:
    boto3_raw_data: "type_defs.LineChartSeriesSettingsTypeDef" = dataclasses.field()

    @cached_property
    def LineStyleSettings(self):  # pragma: no cover
        return LineChartLineStyleSettings.make_one(
            self.boto3_raw_data["LineStyleSettings"]
        )

    @cached_property
    def MarkerStyleSettings(self):  # pragma: no cover
        return LineChartMarkerStyleSettings.make_one(
            self.boto3_raw_data["MarkerStyleSettings"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineChartSeriesSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartSeriesSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LinkSharingConfiguration:
    boto3_raw_data: "type_defs.LinkSharingConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermission.make_many(self.boto3_raw_data["Permissions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LinkSharingConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LinkSharingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFolderMembersResponse:
    boto3_raw_data: "type_defs.ListFolderMembersResponseTypeDef" = dataclasses.field()

    Status = field("Status")

    @cached_property
    def FolderMemberList(self):  # pragma: no cover
        return MemberIdArnPair.make_many(self.boto3_raw_data["FolderMemberList"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListFolderMembersResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFolderMembersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTemplateVersionsResponse:
    boto3_raw_data: "type_defs.ListTemplateVersionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TemplateVersionSummaryList(self):  # pragma: no cover
        return TemplateVersionSummary.make_many(
            self.boto3_raw_data["TemplateVersionSummaryList"]
        )

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTemplateVersionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTemplateVersionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTemplatesResponse:
    boto3_raw_data: "type_defs.ListTemplatesResponseTypeDef" = dataclasses.field()

    @cached_property
    def TemplateSummaryList(self):  # pragma: no cover
        return TemplateSummary.make_many(self.boto3_raw_data["TemplateSummaryList"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTemplatesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTemplatesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListThemeVersionsResponse:
    boto3_raw_data: "type_defs.ListThemeVersionsResponseTypeDef" = dataclasses.field()

    @cached_property
    def ThemeVersionSummaryList(self):  # pragma: no cover
        return ThemeVersionSummary.make_many(
            self.boto3_raw_data["ThemeVersionSummaryList"]
        )

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListThemeVersionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListThemeVersionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListThemesResponse:
    boto3_raw_data: "type_defs.ListThemesResponseTypeDef" = dataclasses.field()

    @cached_property
    def ThemeSummaryList(self):  # pragma: no cover
        return ThemeSummary.make_many(self.boto3_raw_data["ThemeSummaryList"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListThemesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListThemesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTopicsResponse:
    boto3_raw_data: "type_defs.ListTopicsResponseTypeDef" = dataclasses.field()

    @cached_property
    def TopicsSummaries(self):  # pragma: no cover
        return TopicSummary.make_many(self.boto3_raw_data["TopicsSummaries"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTopicsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTopicsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTopicsResponse:
    boto3_raw_data: "type_defs.SearchTopicsResponseTypeDef" = dataclasses.field()

    @cached_property
    def TopicSummaryList(self):  # pragma: no cover
        return TopicSummary.make_many(self.boto3_raw_data["TopicSummaryList"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchTopicsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchTopicsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualSubtitleLabelOptions:
    boto3_raw_data: "type_defs.VisualSubtitleLabelOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @cached_property
    def FormatText(self):  # pragma: no cover
        return LongFormatText.make_one(self.boto3_raw_data["FormatText"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualSubtitleLabelOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualSubtitleLabelOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3Parameters:
    boto3_raw_data: "type_defs.S3ParametersTypeDef" = dataclasses.field()

    @cached_property
    def ManifestFileLocation(self):  # pragma: no cover
        return ManifestFileLocation.make_one(
            self.boto3_raw_data["ManifestFileLocation"]
        )

    RoleArn = field("RoleArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3ParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3ParametersTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TileLayoutStyle:
    boto3_raw_data: "type_defs.TileLayoutStyleTypeDef" = dataclasses.field()

    @cached_property
    def Gutter(self):  # pragma: no cover
        return GutterStyle.make_one(self.boto3_raw_data["Gutter"])

    @cached_property
    def Margin(self):  # pragma: no cover
        return MarginStyle.make_one(self.boto3_raw_data["Margin"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TileLayoutStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TileLayoutStyleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NamedEntityDefinitionOutput:
    boto3_raw_data: "type_defs.NamedEntityDefinitionOutputTypeDef" = dataclasses.field()

    FieldName = field("FieldName")
    PropertyName = field("PropertyName")
    PropertyRole = field("PropertyRole")
    PropertyUsage = field("PropertyUsage")

    @cached_property
    def Metric(self):  # pragma: no cover
        return NamedEntityDefinitionMetricOutput.make_one(self.boto3_raw_data["Metric"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NamedEntityDefinitionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NamedEntityDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NamedEntityDefinition:
    boto3_raw_data: "type_defs.NamedEntityDefinitionTypeDef" = dataclasses.field()

    FieldName = field("FieldName")
    PropertyName = field("PropertyName")
    PropertyRole = field("PropertyRole")
    PropertyUsage = field("PropertyUsage")

    @cached_property
    def Metric(self):  # pragma: no cover
        return NamedEntityDefinitionMetric.make_one(self.boto3_raw_data["Metric"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NamedEntityDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NamedEntityDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NamespaceInfoV2:
    boto3_raw_data: "type_defs.NamespaceInfoV2TypeDef" = dataclasses.field()

    Name = field("Name")
    Arn = field("Arn")
    CapacityRegion = field("CapacityRegion")
    CreationStatus = field("CreationStatus")
    IdentityStore = field("IdentityStore")

    @cached_property
    def NamespaceError(self):  # pragma: no cover
        return NamespaceError.make_one(self.boto3_raw_data["NamespaceError"])

    IamIdentityCenterApplicationArn = field("IamIdentityCenterApplicationArn")
    IamIdentityCenterInstanceArn = field("IamIdentityCenterInstanceArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NamespaceInfoV2TypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NamespaceInfoV2TypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VPCConnectionSummary:
    boto3_raw_data: "type_defs.VPCConnectionSummaryTypeDef" = dataclasses.field()

    VPCConnectionId = field("VPCConnectionId")
    Arn = field("Arn")
    Name = field("Name")
    VPCId = field("VPCId")
    SecurityGroupIds = field("SecurityGroupIds")
    DnsResolvers = field("DnsResolvers")
    Status = field("Status")
    AvailabilityStatus = field("AvailabilityStatus")

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return NetworkInterface.make_many(self.boto3_raw_data["NetworkInterfaces"])

    RoleArn = field("RoleArn")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VPCConnectionSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VPCConnectionSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VPCConnection:
    boto3_raw_data: "type_defs.VPCConnectionTypeDef" = dataclasses.field()

    VPCConnectionId = field("VPCConnectionId")
    Arn = field("Arn")
    Name = field("Name")
    VPCId = field("VPCId")
    SecurityGroupIds = field("SecurityGroupIds")
    DnsResolvers = field("DnsResolvers")
    Status = field("Status")
    AvailabilityStatus = field("AvailabilityStatus")

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return NetworkInterface.make_many(self.boto3_raw_data["NetworkInterfaces"])

    RoleArn = field("RoleArn")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VPCConnectionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VPCConnectionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OverrideDatasetParameterOperationOutput:
    boto3_raw_data: "type_defs.OverrideDatasetParameterOperationOutputTypeDef" = (
        dataclasses.field()
    )

    ParameterName = field("ParameterName")
    NewParameterName = field("NewParameterName")

    @cached_property
    def NewDefaultValues(self):  # pragma: no cover
        return NewDefaultValuesOutput.make_one(self.boto3_raw_data["NewDefaultValues"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.OverrideDatasetParameterOperationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OverrideDatasetParameterOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericSeparatorConfiguration:
    boto3_raw_data: "type_defs.NumericSeparatorConfigurationTypeDef" = (
        dataclasses.field()
    )

    DecimalSeparator = field("DecimalSeparator")

    @cached_property
    def ThousandsSeparator(self):  # pragma: no cover
        return ThousandSeparatorOptions.make_one(
            self.boto3_raw_data["ThousandsSeparator"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.NumericSeparatorConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericSeparatorConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericalAggregationFunction:
    boto3_raw_data: "type_defs.NumericalAggregationFunctionTypeDef" = (
        dataclasses.field()
    )

    SimpleNumericalAggregation = field("SimpleNumericalAggregation")

    @cached_property
    def PercentileAggregation(self):  # pragma: no cover
        return PercentileAggregation.make_one(
            self.boto3_raw_data["PercentileAggregation"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericalAggregationFunctionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericalAggregationFunctionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParametersOutput:
    boto3_raw_data: "type_defs.ParametersOutputTypeDef" = dataclasses.field()

    @cached_property
    def StringParameters(self):  # pragma: no cover
        return StringParameterOutput.make_many(self.boto3_raw_data["StringParameters"])

    @cached_property
    def IntegerParameters(self):  # pragma: no cover
        return IntegerParameterOutput.make_many(
            self.boto3_raw_data["IntegerParameters"]
        )

    @cached_property
    def DecimalParameters(self):  # pragma: no cover
        return DecimalParameterOutput.make_many(
            self.boto3_raw_data["DecimalParameters"]
        )

    @cached_property
    def DateTimeParameters(self):  # pragma: no cover
        return DateTimeParameterOutput.make_many(
            self.boto3_raw_data["DateTimeParameters"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ParametersOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParametersOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisibleRangeOptions:
    boto3_raw_data: "type_defs.VisibleRangeOptionsTypeDef" = dataclasses.field()

    @cached_property
    def PercentRange(self):  # pragma: no cover
        return PercentVisibleRange.make_one(self.boto3_raw_data["PercentRange"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisibleRangeOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisibleRangeOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PerformanceConfigurationOutput:
    boto3_raw_data: "type_defs.PerformanceConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def UniqueKeys(self):  # pragma: no cover
        return UniqueKeyOutput.make_many(self.boto3_raw_data["UniqueKeys"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PerformanceConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PerformanceConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PerformanceConfiguration:
    boto3_raw_data: "type_defs.PerformanceConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def UniqueKeys(self):  # pragma: no cover
        return UniqueKey.make_many(self.boto3_raw_data["UniqueKeys"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PerformanceConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PerformanceConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualOptionsOutput:
    boto3_raw_data: "type_defs.PluginVisualOptionsOutputTypeDef" = dataclasses.field()

    @cached_property
    def VisualProperties(self):  # pragma: no cover
        return PluginVisualProperty.make_many(self.boto3_raw_data["VisualProperties"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PluginVisualOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualOptions:
    boto3_raw_data: "type_defs.PluginVisualOptionsTypeDef" = dataclasses.field()

    @cached_property
    def VisualProperties(self):  # pragma: no cover
        return PluginVisualProperty.make_many(self.boto3_raw_data["VisualProperties"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PluginVisualOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartSeriesSettings:
    boto3_raw_data: "type_defs.RadarChartSeriesSettingsTypeDef" = dataclasses.field()

    @cached_property
    def AreaStyleSettings(self):  # pragma: no cover
        return RadarChartAreaStyleSettings.make_one(
            self.boto3_raw_data["AreaStyleSettings"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RadarChartSeriesSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartSeriesSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicRangeFilterConstant:
    boto3_raw_data: "type_defs.TopicRangeFilterConstantTypeDef" = dataclasses.field()

    ConstantType = field("ConstantType")

    @cached_property
    def RangeConstant(self):  # pragma: no cover
        return RangeConstant.make_one(self.boto3_raw_data["RangeConstant"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicRangeFilterConstantTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicRangeFilterConstantTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RedshiftParametersOutput:
    boto3_raw_data: "type_defs.RedshiftParametersOutputTypeDef" = dataclasses.field()

    Database = field("Database")
    Host = field("Host")
    Port = field("Port")
    ClusterId = field("ClusterId")

    @cached_property
    def IAMParameters(self):  # pragma: no cover
        return RedshiftIAMParametersOutput.make_one(
            self.boto3_raw_data["IAMParameters"]
        )

    @cached_property
    def IdentityCenterConfiguration(self):  # pragma: no cover
        return IdentityCenterConfiguration.make_one(
            self.boto3_raw_data["IdentityCenterConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RedshiftParametersOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RedshiftParametersOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RefreshFailureConfiguration:
    boto3_raw_data: "type_defs.RefreshFailureConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def EmailAlert(self):  # pragma: no cover
        return RefreshFailureEmailAlert.make_one(self.boto3_raw_data["EmailAlert"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RefreshFailureConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RefreshFailureConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RefreshFrequency:
    boto3_raw_data: "type_defs.RefreshFrequencyTypeDef" = dataclasses.field()

    Interval = field("Interval")

    @cached_property
    def RefreshOnDay(self):  # pragma: no cover
        return ScheduleRefreshOnEntity.make_one(self.boto3_raw_data["RefreshOnDay"])

    Timezone = field("Timezone")
    TimeOfTheDay = field("TimeOfTheDay")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RefreshFrequencyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RefreshFrequencyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RowLevelPermissionTagConfigurationOutput:
    boto3_raw_data: "type_defs.RowLevelPermissionTagConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TagRules(self):  # pragma: no cover
        return RowLevelPermissionTagRule.make_many(self.boto3_raw_data["TagRules"])

    Status = field("Status")
    TagRuleConfigurations = field("TagRuleConfigurations")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RowLevelPermissionTagConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RowLevelPermissionTagConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RowLevelPermissionTagConfiguration:
    boto3_raw_data: "type_defs.RowLevelPermissionTagConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TagRules(self):  # pragma: no cover
        return RowLevelPermissionTagRule.make_many(self.boto3_raw_data["TagRules"])

    Status = field("Status")
    TagRuleConfigurations = field("TagRuleConfigurations")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RowLevelPermissionTagConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RowLevelPermissionTagConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotS3DestinationConfiguration:
    boto3_raw_data: "type_defs.SnapshotS3DestinationConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def BucketConfiguration(self):  # pragma: no cover
        return S3BucketConfiguration.make_one(
            self.boto3_raw_data["BucketConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SnapshotS3DestinationConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotS3DestinationConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3SourceOutput:
    boto3_raw_data: "type_defs.S3SourceOutputTypeDef" = dataclasses.field()

    DataSourceArn = field("DataSourceArn")

    @cached_property
    def InputColumns(self):  # pragma: no cover
        return InputColumn.make_many(self.boto3_raw_data["InputColumns"])

    @cached_property
    def UploadSettings(self):  # pragma: no cover
        return UploadSettings.make_one(self.boto3_raw_data["UploadSettings"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3SourceOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3SourceOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class S3Source:
    boto3_raw_data: "type_defs.S3SourceTypeDef" = dataclasses.field()

    DataSourceArn = field("DataSourceArn")

    @cached_property
    def InputColumns(self):  # pragma: no cover
        return InputColumn.make_many(self.boto3_raw_data["InputColumns"])

    @cached_property
    def UploadSettings(self):  # pragma: no cover
        return UploadSettings.make_one(self.boto3_raw_data["UploadSettings"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.S3SourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.S3SourceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTopicsRequestPaginate:
    boto3_raw_data: "type_defs.SearchTopicsRequestPaginateTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return TopicSearchFilter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchTopicsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchTopicsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchTopicsRequest:
    boto3_raw_data: "type_defs.SearchTopicsRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return TopicSearchFilter.make_many(self.boto3_raw_data["Filters"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchTopicsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchTopicsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SectionBasedLayoutPaperCanvasSizeOptions:
    boto3_raw_data: "type_defs.SectionBasedLayoutPaperCanvasSizeOptionsTypeDef" = (
        dataclasses.field()
    )

    PaperSize = field("PaperSize")
    PaperOrientation = field("PaperOrientation")

    @cached_property
    def PaperMargin(self):  # pragma: no cover
        return Spacing.make_one(self.boto3_raw_data["PaperMargin"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SectionBasedLayoutPaperCanvasSizeOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SectionBasedLayoutPaperCanvasSizeOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SectionStyle:
    boto3_raw_data: "type_defs.SectionStyleTypeDef" = dataclasses.field()

    Height = field("Height")

    @cached_property
    def Padding(self):  # pragma: no cover
        return Spacing.make_one(self.boto3_raw_data["Padding"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SectionStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SectionStyleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SelectedSheetsFilterScopeConfigurationOutput:
    boto3_raw_data: "type_defs.SelectedSheetsFilterScopeConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SheetVisualScopingConfigurations(self):  # pragma: no cover
        return SheetVisualScopingConfigurationOutput.make_many(
            self.boto3_raw_data["SheetVisualScopingConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SelectedSheetsFilterScopeConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SelectedSheetsFilterScopeConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SelectedSheetsFilterScopeConfiguration:
    boto3_raw_data: "type_defs.SelectedSheetsFilterScopeConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SheetVisualScopingConfigurations(self):  # pragma: no cover
        return SheetVisualScopingConfiguration.make_many(
            self.boto3_raw_data["SheetVisualScopingConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SelectedSheetsFilterScopeConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SelectedSheetsFilterScopeConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetElementRenderingRule:
    boto3_raw_data: "type_defs.SheetElementRenderingRuleTypeDef" = dataclasses.field()

    Expression = field("Expression")

    @cached_property
    def ConfigurationOverrides(self):  # pragma: no cover
        return SheetElementConfigurationOverrides.make_one(
            self.boto3_raw_data["ConfigurationOverrides"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SheetElementRenderingRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetElementRenderingRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetImageSource:
    boto3_raw_data: "type_defs.SheetImageSourceTypeDef" = dataclasses.field()

    @cached_property
    def SheetImageStaticFileSource(self):  # pragma: no cover
        return SheetImageStaticFileSource.make_one(
            self.boto3_raw_data["SheetImageStaticFileSource"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SheetImageSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetImageSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetImageTooltipConfiguration:
    boto3_raw_data: "type_defs.SheetImageTooltipConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TooltipText(self):  # pragma: no cover
        return SheetImageTooltipText.make_one(self.boto3_raw_data["TooltipText"])

    Visibility = field("Visibility")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SheetImageTooltipConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetImageTooltipConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualTitleLabelOptions:
    boto3_raw_data: "type_defs.VisualTitleLabelOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @cached_property
    def FormatText(self):  # pragma: no cover
        return ShortFormatText.make_one(self.boto3_raw_data["FormatText"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualTitleLabelOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualTitleLabelOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SingleAxisOptions:
    boto3_raw_data: "type_defs.SingleAxisOptionsTypeDef" = dataclasses.field()

    @cached_property
    def YAxisOptions(self):  # pragma: no cover
        return YAxisOptions.make_one(self.boto3_raw_data["YAxisOptions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SingleAxisOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SingleAxisOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicTemplateOutput:
    boto3_raw_data: "type_defs.TopicTemplateOutputTypeDef" = dataclasses.field()

    TemplateType = field("TemplateType")

    @cached_property
    def Slots(self):  # pragma: no cover
        return Slot.make_many(self.boto3_raw_data["Slots"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicTemplateOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicTemplateOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicTemplate:
    boto3_raw_data: "type_defs.TopicTemplateTypeDef" = dataclasses.field()

    TemplateType = field("TemplateType")

    @cached_property
    def Slots(self):  # pragma: no cover
        return Slot.make_many(self.boto3_raw_data["Slots"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicTemplateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicTemplateTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotUserConfigurationRedacted:
    boto3_raw_data: "type_defs.SnapshotUserConfigurationRedactedTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AnonymousUsers(self):  # pragma: no cover
        return SnapshotAnonymousUserRedacted.make_many(
            self.boto3_raw_data["AnonymousUsers"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SnapshotUserConfigurationRedactedTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotUserConfigurationRedactedTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotFileOutput:
    boto3_raw_data: "type_defs.SnapshotFileOutputTypeDef" = dataclasses.field()

    @cached_property
    def SheetSelections(self):  # pragma: no cover
        return SnapshotFileSheetSelectionOutput.make_many(
            self.boto3_raw_data["SheetSelections"]
        )

    FormatType = field("FormatType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotFileOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotFileOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotFile:
    boto3_raw_data: "type_defs.SnapshotFileTypeDef" = dataclasses.field()

    @cached_property
    def SheetSelections(self):  # pragma: no cover
        return SnapshotFileSheetSelection.make_many(
            self.boto3_raw_data["SheetSelections"]
        )

    FormatType = field("FormatType")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SnapshotFileTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SnapshotFileTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StaticFileSource:
    boto3_raw_data: "type_defs.StaticFileSourceTypeDef" = dataclasses.field()

    @cached_property
    def UrlOptions(self):  # pragma: no cover
        return StaticFileUrlSourceOptions.make_one(self.boto3_raw_data["UrlOptions"])

    @cached_property
    def S3Options(self):  # pragma: no cover
        return StaticFileS3SourceOptions.make_one(self.boto3_raw_data["S3Options"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StaticFileSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StaticFileSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringDatasetParameterOutput:
    boto3_raw_data: "type_defs.StringDatasetParameterOutputTypeDef" = (
        dataclasses.field()
    )

    Id = field("Id")
    Name = field("Name")
    ValueType = field("ValueType")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return StringDatasetParameterDefaultValuesOutput.make_one(
            self.boto3_raw_data["DefaultValues"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StringDatasetParameterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringDatasetParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateKeyRegistrationResponse:
    boto3_raw_data: "type_defs.UpdateKeyRegistrationResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FailedKeyRegistration(self):  # pragma: no cover
        return FailedKeyRegistrationEntry.make_many(
            self.boto3_raw_data["FailedKeyRegistration"]
        )

    @cached_property
    def SuccessfulKeyRegistration(self):  # pragma: no cover
        return SuccessfulKeyRegistrationEntry.make_many(
            self.boto3_raw_data["SuccessfulKeyRegistration"]
        )

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateKeyRegistrationResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateKeyRegistrationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldImageConfiguration:
    boto3_raw_data: "type_defs.TableFieldImageConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SizingOptions(self):  # pragma: no cover
        return TableCellImageSizingConfiguration.make_one(
            self.boto3_raw_data["SizingOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableFieldImageConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldImageConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextBoxInteractionOptions:
    boto3_raw_data: "type_defs.TextBoxInteractionOptionsTypeDef" = dataclasses.field()

    @cached_property
    def TextBoxMenuOption(self):  # pragma: no cover
        return TextBoxMenuOption.make_one(self.boto3_raw_data["TextBoxMenuOption"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TextBoxInteractionOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextBoxInteractionOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicNullFilter:
    boto3_raw_data: "type_defs.TopicNullFilterTypeDef" = dataclasses.field()

    NullFilterType = field("NullFilterType")

    @cached_property
    def Constant(self):  # pragma: no cover
        return TopicSingularFilterConstant.make_one(self.boto3_raw_data["Constant"])

    Inverse = field("Inverse")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicNullFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicNullFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicNumericEqualityFilter:
    boto3_raw_data: "type_defs.TopicNumericEqualityFilterTypeDef" = dataclasses.field()

    @cached_property
    def Constant(self):  # pragma: no cover
        return TopicSingularFilterConstant.make_one(self.boto3_raw_data["Constant"])

    Aggregation = field("Aggregation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicNumericEqualityFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicNumericEqualityFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicRelativeDateFilter:
    boto3_raw_data: "type_defs.TopicRelativeDateFilterTypeDef" = dataclasses.field()

    TimeGranularity = field("TimeGranularity")
    RelativeDateFilterFunction = field("RelativeDateFilterFunction")

    @cached_property
    def Constant(self):  # pragma: no cover
        return TopicSingularFilterConstant.make_one(self.boto3_raw_data["Constant"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicRelativeDateFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicRelativeDateFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TotalAggregationOption:
    boto3_raw_data: "type_defs.TotalAggregationOptionTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def TotalAggregationFunction(self):  # pragma: no cover
        return TotalAggregationFunction.make_one(
            self.boto3_raw_data["TotalAggregationFunction"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TotalAggregationOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TotalAggregationOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualCustomActionDefaults:
    boto3_raw_data: "type_defs.VisualCustomActionDefaultsTypeDef" = dataclasses.field()

    @cached_property
    def highlightOperation(self):  # pragma: no cover
        return VisualHighlightOperation.make_one(
            self.boto3_raw_data["highlightOperation"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualCustomActionDefaultsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualCustomActionDefaultsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartColorConfiguration:
    boto3_raw_data: "type_defs.WaterfallChartColorConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupColorConfiguration(self):  # pragma: no cover
        return WaterfallChartGroupColorConfiguration.make_one(
            self.boto3_raw_data["GroupColorConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.WaterfallChartColorConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartColorConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CascadingControlConfigurationOutput:
    boto3_raw_data: "type_defs.CascadingControlConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SourceControls(self):  # pragma: no cover
        return CascadingControlSource.make_many(self.boto3_raw_data["SourceControls"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CascadingControlConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CascadingControlConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CascadingControlConfiguration:
    boto3_raw_data: "type_defs.CascadingControlConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SourceControls(self):  # pragma: no cover
        return CascadingControlSource.make_many(self.boto3_raw_data["SourceControls"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CascadingControlConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CascadingControlConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeDefaultValuesOutput:
    boto3_raw_data: "type_defs.DateTimeDefaultValuesOutputTypeDef" = dataclasses.field()

    @cached_property
    def DynamicValue(self):  # pragma: no cover
        return DynamicDefaultValue.make_one(self.boto3_raw_data["DynamicValue"])

    StaticValues = field("StaticValues")

    @cached_property
    def RollingDate(self):  # pragma: no cover
        return RollingDateConfiguration.make_one(self.boto3_raw_data["RollingDate"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DateTimeDefaultValuesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeDefaultValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeDefaultValues:
    boto3_raw_data: "type_defs.DateTimeDefaultValuesTypeDef" = dataclasses.field()

    @cached_property
    def DynamicValue(self):  # pragma: no cover
        return DynamicDefaultValue.make_one(self.boto3_raw_data["DynamicValue"])

    StaticValues = field("StaticValues")

    @cached_property
    def RollingDate(self):  # pragma: no cover
        return RollingDateConfiguration.make_one(self.boto3_raw_data["RollingDate"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DateTimeDefaultValuesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeDefaultValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalDefaultValuesOutput:
    boto3_raw_data: "type_defs.DecimalDefaultValuesOutputTypeDef" = dataclasses.field()

    @cached_property
    def DynamicValue(self):  # pragma: no cover
        return DynamicDefaultValue.make_one(self.boto3_raw_data["DynamicValue"])

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DecimalDefaultValuesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalDefaultValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalDefaultValues:
    boto3_raw_data: "type_defs.DecimalDefaultValuesTypeDef" = dataclasses.field()

    @cached_property
    def DynamicValue(self):  # pragma: no cover
        return DynamicDefaultValue.make_one(self.boto3_raw_data["DynamicValue"])

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DecimalDefaultValuesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalDefaultValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerDefaultValuesOutput:
    boto3_raw_data: "type_defs.IntegerDefaultValuesOutputTypeDef" = dataclasses.field()

    @cached_property
    def DynamicValue(self):  # pragma: no cover
        return DynamicDefaultValue.make_one(self.boto3_raw_data["DynamicValue"])

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IntegerDefaultValuesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerDefaultValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerDefaultValues:
    boto3_raw_data: "type_defs.IntegerDefaultValuesTypeDef" = dataclasses.field()

    @cached_property
    def DynamicValue(self):  # pragma: no cover
        return DynamicDefaultValue.make_one(self.boto3_raw_data["DynamicValue"])

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IntegerDefaultValuesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerDefaultValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringDefaultValuesOutput:
    boto3_raw_data: "type_defs.StringDefaultValuesOutputTypeDef" = dataclasses.field()

    @cached_property
    def DynamicValue(self):  # pragma: no cover
        return DynamicDefaultValue.make_one(self.boto3_raw_data["DynamicValue"])

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StringDefaultValuesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringDefaultValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringDefaultValues:
    boto3_raw_data: "type_defs.StringDefaultValuesTypeDef" = dataclasses.field()

    @cached_property
    def DynamicValue(self):  # pragma: no cover
        return DynamicDefaultValue.make_one(self.boto3_raw_data["DynamicValue"])

    StaticValues = field("StaticValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StringDefaultValuesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringDefaultValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DrillDownFilterOutput:
    boto3_raw_data: "type_defs.DrillDownFilterOutputTypeDef" = dataclasses.field()

    @cached_property
    def NumericEqualityFilter(self):  # pragma: no cover
        return NumericEqualityDrillDownFilter.make_one(
            self.boto3_raw_data["NumericEqualityFilter"]
        )

    @cached_property
    def CategoryFilter(self):  # pragma: no cover
        return CategoryDrillDownFilterOutput.make_one(
            self.boto3_raw_data["CategoryFilter"]
        )

    @cached_property
    def TimeRangeFilter(self):  # pragma: no cover
        return TimeRangeDrillDownFilterOutput.make_one(
            self.boto3_raw_data["TimeRangeFilter"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DrillDownFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DrillDownFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisteredUserDashboardFeatureConfigurations:
    boto3_raw_data: "type_defs.RegisteredUserDashboardFeatureConfigurationsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StatePersistence(self):  # pragma: no cover
        return StatePersistenceConfigurations.make_one(
            self.boto3_raw_data["StatePersistence"]
        )

    @cached_property
    def SharedView(self):  # pragma: no cover
        return SharedViewConfigurations.make_one(self.boto3_raw_data["SharedView"])

    @cached_property
    def Bookmarks(self):  # pragma: no cover
        return BookmarksConfigurations.make_one(self.boto3_raw_data["Bookmarks"])

    @cached_property
    def AmazonQInQuickSight(self):  # pragma: no cover
        return AmazonQInQuickSightDashboardConfigurations.make_one(
            self.boto3_raw_data["AmazonQInQuickSight"]
        )

    @cached_property
    def Schedules(self):  # pragma: no cover
        return SchedulesConfigurations.make_one(self.boto3_raw_data["Schedules"])

    @cached_property
    def RecentSnapshots(self):  # pragma: no cover
        return RecentSnapshotsConfigurations.make_one(
            self.boto3_raw_data["RecentSnapshots"]
        )

    @cached_property
    def ThresholdAlerts(self):  # pragma: no cover
        return ThresholdAlertsConfigurations.make_one(
            self.boto3_raw_data["ThresholdAlerts"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisteredUserDashboardFeatureConfigurationsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisteredUserDashboardFeatureConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisteredUserConsoleFeatureConfigurations:
    boto3_raw_data: "type_defs.RegisteredUserConsoleFeatureConfigurationsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StatePersistence(self):  # pragma: no cover
        return StatePersistenceConfigurations.make_one(
            self.boto3_raw_data["StatePersistence"]
        )

    @cached_property
    def SharedView(self):  # pragma: no cover
        return SharedViewConfigurations.make_one(self.boto3_raw_data["SharedView"])

    @cached_property
    def AmazonQInQuickSight(self):  # pragma: no cover
        return AmazonQInQuickSightConsoleConfigurations.make_one(
            self.boto3_raw_data["AmazonQInQuickSight"]
        )

    @cached_property
    def Schedules(self):  # pragma: no cover
        return SchedulesConfigurations.make_one(self.boto3_raw_data["Schedules"])

    @cached_property
    def RecentSnapshots(self):  # pragma: no cover
        return RecentSnapshotsConfigurations.make_one(
            self.boto3_raw_data["RecentSnapshots"]
        )

    @cached_property
    def ThresholdAlerts(self):  # pragma: no cover
        return ThresholdAlertsConfigurations.make_one(
            self.boto3_raw_data["ThresholdAlerts"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisteredUserConsoleFeatureConfigurationsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisteredUserConsoleFeatureConfigurationsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisSourceEntity:
    boto3_raw_data: "type_defs.AnalysisSourceEntityTypeDef" = dataclasses.field()

    @cached_property
    def SourceTemplate(self):  # pragma: no cover
        return AnalysisSourceTemplate.make_one(self.boto3_raw_data["SourceTemplate"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisSourceEntityTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisSourceEntityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardSourceEntity:
    boto3_raw_data: "type_defs.DashboardSourceEntityTypeDef" = dataclasses.field()

    @cached_property
    def SourceTemplate(self):  # pragma: no cover
        return DashboardSourceTemplate.make_one(self.boto3_raw_data["SourceTemplate"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DashboardSourceEntityTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardSourceEntityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateSourceEntity:
    boto3_raw_data: "type_defs.TemplateSourceEntityTypeDef" = dataclasses.field()

    @cached_property
    def SourceAnalysis(self):  # pragma: no cover
        return TemplateSourceAnalysis.make_one(self.boto3_raw_data["SourceAnalysis"])

    @cached_property
    def SourceTemplate(self):  # pragma: no cover
        return TemplateSourceTemplate.make_one(self.boto3_raw_data["SourceTemplate"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TemplateSourceEntityTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TemplateSourceEntityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnonymousUserDashboardEmbeddingConfiguration:
    boto3_raw_data: "type_defs.AnonymousUserDashboardEmbeddingConfigurationTypeDef" = (
        dataclasses.field()
    )

    InitialDashboardId = field("InitialDashboardId")
    EnabledFeatures = field("EnabledFeatures")
    DisabledFeatures = field("DisabledFeatures")

    @cached_property
    def FeatureConfigurations(self):  # pragma: no cover
        return AnonymousUserDashboardFeatureConfigurations.make_one(
            self.boto3_raw_data["FeatureConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AnonymousUserDashboardEmbeddingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnonymousUserDashboardEmbeddingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAssetBundleExportJobResponse:
    boto3_raw_data: "type_defs.DescribeAssetBundleExportJobResponseTypeDef" = (
        dataclasses.field()
    )

    JobStatus = field("JobStatus")
    DownloadUrl = field("DownloadUrl")

    @cached_property
    def Errors(self):  # pragma: no cover
        return AssetBundleExportJobError.make_many(self.boto3_raw_data["Errors"])

    Arn = field("Arn")
    CreatedTime = field("CreatedTime")
    AssetBundleExportJobId = field("AssetBundleExportJobId")
    AwsAccountId = field("AwsAccountId")
    ResourceArns = field("ResourceArns")
    IncludeAllDependencies = field("IncludeAllDependencies")
    ExportFormat = field("ExportFormat")

    @cached_property
    def CloudFormationOverridePropertyConfiguration(self):  # pragma: no cover
        return AssetBundleCloudFormationOverridePropertyConfigurationOutput.make_one(
            self.boto3_raw_data["CloudFormationOverridePropertyConfiguration"]
        )

    RequestId = field("RequestId")
    Status = field("Status")
    IncludePermissions = field("IncludePermissions")
    IncludeTags = field("IncludeTags")

    @cached_property
    def ValidationStrategy(self):  # pragma: no cover
        return AssetBundleExportJobValidationStrategy.make_one(
            self.boto3_raw_data["ValidationStrategy"]
        )

    @cached_property
    def Warnings(self):  # pragma: no cover
        return AssetBundleExportJobWarning.make_many(self.boto3_raw_data["Warnings"])

    IncludeFolderMemberships = field("IncludeFolderMemberships")
    IncludeFolderMembers = field("IncludeFolderMembers")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAssetBundleExportJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAssetBundleExportJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDashboardOverridePermissionsOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDashboardOverridePermissionsOutputTypeDef"
    ) = dataclasses.field()

    DashboardIds = field("DashboardIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissionsOutput.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @cached_property
    def LinkSharingConfiguration(self):  # pragma: no cover
        return AssetBundleResourceLinkSharingConfigurationOutput.make_one(
            self.boto3_raw_data["LinkSharingConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDashboardOverridePermissionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDashboardOverridePermissionsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDashboardOverridePermissions:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDashboardOverridePermissionsTypeDef"
    ) = dataclasses.field()

    DashboardIds = field("DashboardIds")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return AssetBundleResourcePermissions.make_one(
            self.boto3_raw_data["Permissions"]
        )

    @cached_property
    def LinkSharingConfiguration(self):  # pragma: no cover
        return AssetBundleResourceLinkSharingConfiguration.make_one(
            self.boto3_raw_data["LinkSharingConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDashboardOverridePermissionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDashboardOverridePermissionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobOverrideTagsOutput:
    boto3_raw_data: "type_defs.AssetBundleImportJobOverrideTagsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VPCConnections(self):  # pragma: no cover
        return AssetBundleImportJobVPCConnectionOverrideTagsOutput.make_many(
            self.boto3_raw_data["VPCConnections"]
        )

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AssetBundleImportJobDataSourceOverrideTagsOutput.make_many(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def DataSets(self):  # pragma: no cover
        return AssetBundleImportJobDataSetOverrideTagsOutput.make_many(
            self.boto3_raw_data["DataSets"]
        )

    @cached_property
    def Themes(self):  # pragma: no cover
        return AssetBundleImportJobThemeOverrideTagsOutput.make_many(
            self.boto3_raw_data["Themes"]
        )

    @cached_property
    def Analyses(self):  # pragma: no cover
        return AssetBundleImportJobAnalysisOverrideTagsOutput.make_many(
            self.boto3_raw_data["Analyses"]
        )

    @cached_property
    def Dashboards(self):  # pragma: no cover
        return AssetBundleImportJobDashboardOverrideTagsOutput.make_many(
            self.boto3_raw_data["Dashboards"]
        )

    @cached_property
    def Folders(self):  # pragma: no cover
        return AssetBundleImportJobFolderOverrideTagsOutput.make_many(
            self.boto3_raw_data["Folders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobOverrideTagsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobOverrideTagsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobOverrideTags:
    boto3_raw_data: "type_defs.AssetBundleImportJobOverrideTagsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VPCConnections(self):  # pragma: no cover
        return AssetBundleImportJobVPCConnectionOverrideTags.make_many(
            self.boto3_raw_data["VPCConnections"]
        )

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AssetBundleImportJobDataSourceOverrideTags.make_many(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def DataSets(self):  # pragma: no cover
        return AssetBundleImportJobDataSetOverrideTags.make_many(
            self.boto3_raw_data["DataSets"]
        )

    @cached_property
    def Themes(self):  # pragma: no cover
        return AssetBundleImportJobThemeOverrideTags.make_many(
            self.boto3_raw_data["Themes"]
        )

    @cached_property
    def Analyses(self):  # pragma: no cover
        return AssetBundleImportJobAnalysisOverrideTags.make_many(
            self.boto3_raw_data["Analyses"]
        )

    @cached_property
    def Dashboards(self):  # pragma: no cover
        return AssetBundleImportJobDashboardOverrideTags.make_many(
            self.boto3_raw_data["Dashboards"]
        )

    @cached_property
    def Folders(self):  # pragma: no cover
        return AssetBundleImportJobFolderOverrideTags.make_many(
            self.boto3_raw_data["Folders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AssetBundleImportJobOverrideTagsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobOverrideTagsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnowflakeParameters:
    boto3_raw_data: "type_defs.SnowflakeParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Database = field("Database")
    Warehouse = field("Warehouse")
    AuthenticationType = field("AuthenticationType")
    DatabaseAccessControlRole = field("DatabaseAccessControlRole")

    @cached_property
    def OAuthParameters(self):  # pragma: no cover
        return OAuthParameters.make_one(self.boto3_raw_data["OAuthParameters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnowflakeParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnowflakeParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StarburstParameters:
    boto3_raw_data: "type_defs.StarburstParametersTypeDef" = dataclasses.field()

    Host = field("Host")
    Port = field("Port")
    Catalog = field("Catalog")
    ProductType = field("ProductType")
    DatabaseAccessControlRole = field("DatabaseAccessControlRole")
    AuthenticationType = field("AuthenticationType")

    @cached_property
    def OAuthParameters(self):  # pragma: no cover
        return OAuthParameters.make_one(self.boto3_raw_data["OAuthParameters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StarburstParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StarburstParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomValuesConfiguration:
    boto3_raw_data: "type_defs.CustomValuesConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CustomValues(self):  # pragma: no cover
        return CustomParameterValues.make_one(self.boto3_raw_data["CustomValues"])

    IncludeNullValue = field("IncludeNullValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomValuesConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomValuesConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Parameters:
    boto3_raw_data: "type_defs.ParametersTypeDef" = dataclasses.field()

    @cached_property
    def StringParameters(self):  # pragma: no cover
        return StringParameter.make_many(self.boto3_raw_data["StringParameters"])

    @cached_property
    def IntegerParameters(self):  # pragma: no cover
        return IntegerParameter.make_many(self.boto3_raw_data["IntegerParameters"])

    @cached_property
    def DecimalParameters(self):  # pragma: no cover
        return DecimalParameter.make_many(self.boto3_raw_data["DecimalParameters"])

    @cached_property
    def DateTimeParameters(self):  # pragma: no cover
        return DateTimeParameter.make_many(self.boto3_raw_data["DateTimeParameters"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ParametersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ParametersTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DrillDownFilter:
    boto3_raw_data: "type_defs.DrillDownFilterTypeDef" = dataclasses.field()

    @cached_property
    def NumericEqualityFilter(self):  # pragma: no cover
        return NumericEqualityDrillDownFilter.make_one(
            self.boto3_raw_data["NumericEqualityFilter"]
        )

    @cached_property
    def CategoryFilter(self):  # pragma: no cover
        return CategoryDrillDownFilter.make_one(self.boto3_raw_data["CategoryFilter"])

    @cached_property
    def TimeRangeFilter(self):  # pragma: no cover
        return TimeRangeDrillDownFilter.make_one(self.boto3_raw_data["TimeRangeFilter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DrillDownFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DrillDownFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ForecastScenario:
    boto3_raw_data: "type_defs.ForecastScenarioTypeDef" = dataclasses.field()

    @cached_property
    def WhatIfPointScenario(self):  # pragma: no cover
        return WhatIfPointScenario.make_one(self.boto3_raw_data["WhatIfPointScenario"])

    @cached_property
    def WhatIfRangeScenario(self):  # pragma: no cover
        return WhatIfRangeScenario.make_one(self.boto3_raw_data["WhatIfRangeScenario"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ForecastScenarioTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ForecastScenarioTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericAxisOptionsOutput:
    boto3_raw_data: "type_defs.NumericAxisOptionsOutputTypeDef" = dataclasses.field()

    @cached_property
    def Scale(self):  # pragma: no cover
        return AxisScale.make_one(self.boto3_raw_data["Scale"])

    @cached_property
    def Range(self):  # pragma: no cover
        return AxisDisplayRangeOutput.make_one(self.boto3_raw_data["Range"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericAxisOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericAxisOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericAxisOptions:
    boto3_raw_data: "type_defs.NumericAxisOptionsTypeDef" = dataclasses.field()

    @cached_property
    def Scale(self):  # pragma: no cover
        return AxisScale.make_one(self.boto3_raw_data["Scale"])

    @cached_property
    def Range(self):  # pragma: no cover
        return AxisDisplayRange.make_one(self.boto3_raw_data["Range"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericAxisOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericAxisOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BrandElementStyle:
    boto3_raw_data: "type_defs.BrandElementStyleTypeDef" = dataclasses.field()

    @cached_property
    def NavbarStyle(self):  # pragma: no cover
        return NavbarStyle.make_one(self.boto3_raw_data["NavbarStyle"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BrandElementStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BrandElementStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeCustomPermissionsResponse:
    boto3_raw_data: "type_defs.DescribeCustomPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")

    @cached_property
    def CustomPermissions(self):  # pragma: no cover
        return CustomPermissions.make_one(self.boto3_raw_data["CustomPermissions"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeCustomPermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeCustomPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListCustomPermissionsResponse:
    boto3_raw_data: "type_defs.ListCustomPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")

    @cached_property
    def CustomPermissionsList(self):  # pragma: no cover
        return CustomPermissions.make_many(self.boto3_raw_data["CustomPermissionsList"])

    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListCustomPermissionsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListCustomPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClusterMarkerConfiguration:
    boto3_raw_data: "type_defs.ClusterMarkerConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def ClusterMarker(self):  # pragma: no cover
        return ClusterMarker.make_one(self.boto3_raw_data["ClusterMarker"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClusterMarkerConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClusterMarkerConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicCategoryFilterOutput:
    boto3_raw_data: "type_defs.TopicCategoryFilterOutputTypeDef" = dataclasses.field()

    CategoryFilterFunction = field("CategoryFilterFunction")
    CategoryFilterType = field("CategoryFilterType")

    @cached_property
    def Constant(self):  # pragma: no cover
        return TopicCategoryFilterConstantOutput.make_one(
            self.boto3_raw_data["Constant"]
        )

    Inverse = field("Inverse")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicCategoryFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicCategoryFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicCategoryFilter:
    boto3_raw_data: "type_defs.TopicCategoryFilterTypeDef" = dataclasses.field()

    CategoryFilterFunction = field("CategoryFilterFunction")
    CategoryFilterType = field("CategoryFilterType")

    @cached_property
    def Constant(self):  # pragma: no cover
        return TopicCategoryFilterConstant.make_one(self.boto3_raw_data["Constant"])

    Inverse = field("Inverse")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicCategoryFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicCategoryFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TagColumnOperationOutput:
    boto3_raw_data: "type_defs.TagColumnOperationOutputTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")

    @cached_property
    def Tags(self):  # pragma: no cover
        return ColumnTag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TagColumnOperationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TagColumnOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TagColumnOperation:
    boto3_raw_data: "type_defs.TagColumnOperationTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")

    @cached_property
    def Tags(self):  # pragma: no cover
        return ColumnTag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TagColumnOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TagColumnOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetConfigurationOutput:
    boto3_raw_data: "type_defs.DataSetConfigurationOutputTypeDef" = dataclasses.field()

    Placeholder = field("Placeholder")

    @cached_property
    def DataSetSchema(self):  # pragma: no cover
        return DataSetSchemaOutput.make_one(self.boto3_raw_data["DataSetSchema"])

    @cached_property
    def ColumnGroupSchemaList(self):  # pragma: no cover
        return ColumnGroupSchemaOutput.make_many(
            self.boto3_raw_data["ColumnGroupSchemaList"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSetConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSetConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetConfiguration:
    boto3_raw_data: "type_defs.DataSetConfigurationTypeDef" = dataclasses.field()

    Placeholder = field("Placeholder")

    @cached_property
    def DataSetSchema(self):  # pragma: no cover
        return DataSetSchema.make_one(self.boto3_raw_data["DataSetSchema"])

    @cached_property
    def ColumnGroupSchemaList(self):  # pragma: no cover
        return ColumnGroupSchema.make_many(self.boto3_raw_data["ColumnGroupSchemaList"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSetConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingIcon:
    boto3_raw_data: "type_defs.ConditionalFormattingIconTypeDef" = dataclasses.field()

    @cached_property
    def IconSet(self):  # pragma: no cover
        return ConditionalFormattingIconSet.make_one(self.boto3_raw_data["IconSet"])

    @cached_property
    def CustomCondition(self):  # pragma: no cover
        return ConditionalFormattingCustomIconCondition.make_one(
            self.boto3_raw_data["CustomCondition"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConditionalFormattingIconTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingIconTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDataSetsResponse:
    boto3_raw_data: "type_defs.ListDataSetsResponseTypeDef" = dataclasses.field()

    @cached_property
    def DataSetSummaries(self):  # pragma: no cover
        return DataSetSummary.make_many(self.boto3_raw_data["DataSetSummaries"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDataSetsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDataSetsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SearchDataSetsResponse:
    boto3_raw_data: "type_defs.SearchDataSetsResponseTypeDef" = dataclasses.field()

    @cached_property
    def DataSetSummaries(self):  # pragma: no cover
        return DataSetSummary.make_many(self.boto3_raw_data["DataSetSummaries"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SearchDataSetsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SearchDataSetsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DestinationParameterValueConfigurationOutput:
    boto3_raw_data: "type_defs.DestinationParameterValueConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CustomValuesConfiguration(self):  # pragma: no cover
        return CustomValuesConfigurationOutput.make_one(
            self.boto3_raw_data["CustomValuesConfiguration"]
        )

    SelectAllValueOptions = field("SelectAllValueOptions")
    SourceParameterName = field("SourceParameterName")
    SourceField = field("SourceField")

    @cached_property
    def SourceColumn(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["SourceColumn"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DestinationParameterValueConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DestinationParameterValueConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomContentConfiguration:
    boto3_raw_data: "type_defs.CustomContentConfigurationTypeDef" = dataclasses.field()

    ContentUrl = field("ContentUrl")
    ContentType = field("ContentType")
    ImageScaling = field("ImageScaling")

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomContentConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomContentConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardPublishOptions:
    boto3_raw_data: "type_defs.DashboardPublishOptionsTypeDef" = dataclasses.field()

    @cached_property
    def AdHocFilteringOption(self):  # pragma: no cover
        return AdHocFilteringOption.make_one(
            self.boto3_raw_data["AdHocFilteringOption"]
        )

    @cached_property
    def ExportToCSVOption(self):  # pragma: no cover
        return ExportToCSVOption.make_one(self.boto3_raw_data["ExportToCSVOption"])

    @cached_property
    def SheetControlsOption(self):  # pragma: no cover
        return SheetControlsOption.make_one(self.boto3_raw_data["SheetControlsOption"])

    @cached_property
    def VisualPublishOptions(self):  # pragma: no cover
        return DashboardVisualPublishOptions.make_one(
            self.boto3_raw_data["VisualPublishOptions"]
        )

    @cached_property
    def SheetLayoutElementMaximizationOption(self):  # pragma: no cover
        return SheetLayoutElementMaximizationOption.make_one(
            self.boto3_raw_data["SheetLayoutElementMaximizationOption"]
        )

    @cached_property
    def VisualMenuOption(self):  # pragma: no cover
        return VisualMenuOption.make_one(self.boto3_raw_data["VisualMenuOption"])

    @cached_property
    def VisualAxisSortOption(self):  # pragma: no cover
        return VisualAxisSortOption.make_one(
            self.boto3_raw_data["VisualAxisSortOption"]
        )

    @cached_property
    def ExportWithHiddenFieldsOption(self):  # pragma: no cover
        return ExportWithHiddenFieldsOption.make_one(
            self.boto3_raw_data["ExportWithHiddenFieldsOption"]
        )

    @cached_property
    def DataPointDrillUpDownOption(self):  # pragma: no cover
        return DataPointDrillUpDownOption.make_one(
            self.boto3_raw_data["DataPointDrillUpDownOption"]
        )

    @cached_property
    def DataPointMenuLabelOption(self):  # pragma: no cover
        return DataPointMenuLabelOption.make_one(
            self.boto3_raw_data["DataPointMenuLabelOption"]
        )

    @cached_property
    def DataPointTooltipOption(self):  # pragma: no cover
        return DataPointTooltipOption.make_one(
            self.boto3_raw_data["DataPointTooltipOption"]
        )

    @cached_property
    def DataQAEnabledOption(self):  # pragma: no cover
        return DataQAEnabledOption.make_one(self.boto3_raw_data["DataQAEnabledOption"])

    @cached_property
    def ExecutiveSummaryOption(self):  # pragma: no cover
        return ExecutiveSummaryOption.make_one(
            self.boto3_raw_data["ExecutiveSummaryOption"]
        )

    @cached_property
    def DataStoriesSharingOption(self):  # pragma: no cover
        return DataStoriesSharingOption.make_one(
            self.boto3_raw_data["DataStoriesSharingOption"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DashboardPublishOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardPublishOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataPathColor:
    boto3_raw_data: "type_defs.DataPathColorTypeDef" = dataclasses.field()

    @cached_property
    def Element(self):  # pragma: no cover
        return DataPathValue.make_one(self.boto3_raw_data["Element"])

    Color = field("Color")
    TimeGranularity = field("TimeGranularity")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataPathColorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataPathColorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataPathSortOutput:
    boto3_raw_data: "type_defs.DataPathSortOutputTypeDef" = dataclasses.field()

    Direction = field("Direction")

    @cached_property
    def SortPaths(self):  # pragma: no cover
        return DataPathValue.make_many(self.boto3_raw_data["SortPaths"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataPathSortOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataPathSortOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataPathSort:
    boto3_raw_data: "type_defs.DataPathSortTypeDef" = dataclasses.field()

    Direction = field("Direction")

    @cached_property
    def SortPaths(self):  # pragma: no cover
        return DataPathValue.make_many(self.boto3_raw_data["SortPaths"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataPathSortTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataPathSortTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableDataPathOptionOutput:
    boto3_raw_data: "type_defs.PivotTableDataPathOptionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataPathList(self):  # pragma: no cover
        return DataPathValue.make_many(self.boto3_raw_data["DataPathList"])

    Width = field("Width")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PivotTableDataPathOptionOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableDataPathOptionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableDataPathOption:
    boto3_raw_data: "type_defs.PivotTableDataPathOptionTypeDef" = dataclasses.field()

    @cached_property
    def DataPathList(self):  # pragma: no cover
        return DataPathValue.make_many(self.boto3_raw_data["DataPathList"])

    Width = field("Width")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableDataPathOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableDataPathOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldCollapseStateTargetOutput:
    boto3_raw_data: "type_defs.PivotTableFieldCollapseStateTargetOutputTypeDef" = (
        dataclasses.field()
    )

    FieldId = field("FieldId")

    @cached_property
    def FieldDataPathValues(self):  # pragma: no cover
        return DataPathValue.make_many(self.boto3_raw_data["FieldDataPathValues"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableFieldCollapseStateTargetOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldCollapseStateTargetOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldCollapseStateTarget:
    boto3_raw_data: "type_defs.PivotTableFieldCollapseStateTargetTypeDef" = (
        dataclasses.field()
    )

    FieldId = field("FieldId")

    @cached_property
    def FieldDataPathValues(self):  # pragma: no cover
        return DataPathValue.make_many(self.boto3_raw_data["FieldDataPathValues"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableFieldCollapseStateTargetTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldCollapseStateTargetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalDatasetParameter:
    boto3_raw_data: "type_defs.DecimalDatasetParameterTypeDef" = dataclasses.field()

    Id = field("Id")
    Name = field("Name")
    ValueType = field("ValueType")
    DefaultValues = field("DefaultValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DecimalDatasetParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalDatasetParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardPermissionsResponse:
    boto3_raw_data: "type_defs.DescribeDashboardPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    DashboardId = field("DashboardId")
    DashboardArn = field("DashboardArn")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def LinkSharingConfiguration(self):  # pragma: no cover
        return LinkSharingConfigurationOutput.make_one(
            self.boto3_raw_data["LinkSharingConfiguration"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardPermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardPermissionsResponse:
    boto3_raw_data: "type_defs.UpdateDashboardPermissionsResponseTypeDef" = (
        dataclasses.field()
    )

    DashboardArn = field("DashboardArn")
    DashboardId = field("DashboardId")

    @cached_property
    def Permissions(self):  # pragma: no cover
        return ResourcePermissionOutput.make_many(self.boto3_raw_data["Permissions"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def LinkSharingConfiguration(self):  # pragma: no cover
        return LinkSharingConfigurationOutput.make_one(
            self.boto3_raw_data["LinkSharingConfiguration"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDashboardPermissionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardPermissionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTopicRefreshSchedulesResponse:
    boto3_raw_data: "type_defs.ListTopicRefreshSchedulesResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")

    @cached_property
    def RefreshSchedules(self):  # pragma: no cover
        return TopicRefreshScheduleSummary.make_many(
            self.boto3_raw_data["RefreshSchedules"]
        )

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListTopicRefreshSchedulesResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTopicRefreshSchedulesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFormatting:
    boto3_raw_data: "type_defs.DefaultFormattingTypeDef" = dataclasses.field()

    DisplayFormat = field("DisplayFormat")

    @cached_property
    def DisplayFormatOptions(self):  # pragma: no cover
        return DisplayFormatOptions.make_one(
            self.boto3_raw_data["DisplayFormatOptions"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DefaultFormattingTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIRMetricOutput:
    boto3_raw_data: "type_defs.TopicIRMetricOutputTypeDef" = dataclasses.field()

    @cached_property
    def MetricId(self):  # pragma: no cover
        return Identifier.make_one(self.boto3_raw_data["MetricId"])

    @cached_property
    def Function(self):  # pragma: no cover
        return AggFunctionOutput.make_one(self.boto3_raw_data["Function"])

    @cached_property
    def Operands(self):  # pragma: no cover
        return Identifier.make_many(self.boto3_raw_data["Operands"])

    @cached_property
    def ComparisonMethod(self):  # pragma: no cover
        return TopicIRComparisonMethod.make_one(self.boto3_raw_data["ComparisonMethod"])

    Expression = field("Expression")

    @cached_property
    def CalculatedFieldReferences(self):  # pragma: no cover
        return Identifier.make_many(self.boto3_raw_data["CalculatedFieldReferences"])

    DisplayFormat = field("DisplayFormat")

    @cached_property
    def DisplayFormatOptions(self):  # pragma: no cover
        return DisplayFormatOptions.make_one(
            self.boto3_raw_data["DisplayFormatOptions"]
        )

    @cached_property
    def NamedEntity(self):  # pragma: no cover
        return NamedEntityRef.make_one(self.boto3_raw_data["NamedEntity"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicIRMetricOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicIRMetricOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIRMetric:
    boto3_raw_data: "type_defs.TopicIRMetricTypeDef" = dataclasses.field()

    @cached_property
    def MetricId(self):  # pragma: no cover
        return Identifier.make_one(self.boto3_raw_data["MetricId"])

    Function = field("Function")

    @cached_property
    def Operands(self):  # pragma: no cover
        return Identifier.make_many(self.boto3_raw_data["Operands"])

    @cached_property
    def ComparisonMethod(self):  # pragma: no cover
        return TopicIRComparisonMethod.make_one(self.boto3_raw_data["ComparisonMethod"])

    Expression = field("Expression")

    @cached_property
    def CalculatedFieldReferences(self):  # pragma: no cover
        return Identifier.make_many(self.boto3_raw_data["CalculatedFieldReferences"])

    DisplayFormat = field("DisplayFormat")

    @cached_property
    def DisplayFormatOptions(self):  # pragma: no cover
        return DisplayFormatOptions.make_one(
            self.boto3_raw_data["DisplayFormatOptions"]
        )

    @cached_property
    def NamedEntity(self):  # pragma: no cover
        return NamedEntityRef.make_one(self.boto3_raw_data["NamedEntity"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicIRMetricTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicIRMetricTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIRFilterOptionOutput:
    boto3_raw_data: "type_defs.TopicIRFilterOptionOutputTypeDef" = dataclasses.field()

    FilterType = field("FilterType")
    FilterClass = field("FilterClass")

    @cached_property
    def OperandField(self):  # pragma: no cover
        return Identifier.make_one(self.boto3_raw_data["OperandField"])

    Function = field("Function")

    @cached_property
    def Constant(self):  # pragma: no cover
        return TopicConstantValueOutput.make_one(self.boto3_raw_data["Constant"])

    Inverse = field("Inverse")
    NullFilter = field("NullFilter")
    Aggregation = field("Aggregation")
    AggregationFunctionParameters = field("AggregationFunctionParameters")

    @cached_property
    def AggregationPartitionBy(self):  # pragma: no cover
        return AggregationPartitionBy.make_many(
            self.boto3_raw_data["AggregationPartitionBy"]
        )

    @cached_property
    def Range(self):  # pragma: no cover
        return TopicConstantValueOutput.make_one(self.boto3_raw_data["Range"])

    Inclusive = field("Inclusive")
    TimeGranularity = field("TimeGranularity")

    @cached_property
    def LastNextOffset(self):  # pragma: no cover
        return TopicConstantValueOutput.make_one(self.boto3_raw_data["LastNextOffset"])

    @cached_property
    def AggMetrics(self):  # pragma: no cover
        return FilterAggMetrics.make_many(self.boto3_raw_data["AggMetrics"])

    @cached_property
    def TopBottomLimit(self):  # pragma: no cover
        return TopicConstantValueOutput.make_one(self.boto3_raw_data["TopBottomLimit"])

    SortDirection = field("SortDirection")

    @cached_property
    def Anchor(self):  # pragma: no cover
        return Anchor.make_one(self.boto3_raw_data["Anchor"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicIRFilterOptionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicIRFilterOptionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIRGroupBy:
    boto3_raw_data: "type_defs.TopicIRGroupByTypeDef" = dataclasses.field()

    @cached_property
    def FieldName(self):  # pragma: no cover
        return Identifier.make_one(self.boto3_raw_data["FieldName"])

    TimeGranularity = field("TimeGranularity")

    @cached_property
    def Sort(self):  # pragma: no cover
        return TopicSortClause.make_one(self.boto3_raw_data["Sort"])

    DisplayFormat = field("DisplayFormat")

    @cached_property
    def DisplayFormatOptions(self):  # pragma: no cover
        return DisplayFormatOptions.make_one(
            self.boto3_raw_data["DisplayFormatOptions"]
        )

    @cached_property
    def NamedEntity(self):  # pragma: no cover
        return NamedEntityRef.make_one(self.boto3_raw_data["NamedEntity"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicIRGroupByTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicIRGroupByTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomActionFilterOperationOutput:
    boto3_raw_data: "type_defs.CustomActionFilterOperationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SelectedFieldsConfiguration(self):  # pragma: no cover
        return FilterOperationSelectedFieldsConfigurationOutput.make_one(
            self.boto3_raw_data["SelectedFieldsConfiguration"]
        )

    @cached_property
    def TargetVisualsConfiguration(self):  # pragma: no cover
        return FilterOperationTargetVisualsConfigurationOutput.make_one(
            self.boto3_raw_data["TargetVisualsConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CustomActionFilterOperationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomActionFilterOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomActionFilterOperation:
    boto3_raw_data: "type_defs.CustomActionFilterOperationTypeDef" = dataclasses.field()

    @cached_property
    def SelectedFieldsConfiguration(self):  # pragma: no cover
        return FilterOperationSelectedFieldsConfiguration.make_one(
            self.boto3_raw_data["SelectedFieldsConfiguration"]
        )

    @cached_property
    def TargetVisualsConfiguration(self):  # pragma: no cover
        return FilterOperationTargetVisualsConfiguration.make_one(
            self.boto3_raw_data["TargetVisualsConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomActionFilterOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomActionFilterOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisLabelOptions:
    boto3_raw_data: "type_defs.AxisLabelOptionsTypeDef" = dataclasses.field()

    @cached_property
    def FontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["FontConfiguration"])

    CustomLabel = field("CustomLabel")

    @cached_property
    def ApplyTo(self):  # pragma: no cover
        return AxisLabelReferenceOptions.make_one(self.boto3_raw_data["ApplyTo"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AxisLabelOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisLabelOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataLabelOptionsOutput:
    boto3_raw_data: "type_defs.DataLabelOptionsOutputTypeDef" = dataclasses.field()

    Visibility = field("Visibility")
    CategoryLabelVisibility = field("CategoryLabelVisibility")
    MeasureLabelVisibility = field("MeasureLabelVisibility")

    @cached_property
    def DataLabelTypes(self):  # pragma: no cover
        return DataLabelType.make_many(self.boto3_raw_data["DataLabelTypes"])

    Position = field("Position")
    LabelContent = field("LabelContent")

    @cached_property
    def LabelFontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["LabelFontConfiguration"])

    LabelColor = field("LabelColor")
    Overlap = field("Overlap")
    TotalsVisibility = field("TotalsVisibility")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataLabelOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataLabelOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataLabelOptions:
    boto3_raw_data: "type_defs.DataLabelOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")
    CategoryLabelVisibility = field("CategoryLabelVisibility")
    MeasureLabelVisibility = field("MeasureLabelVisibility")

    @cached_property
    def DataLabelTypes(self):  # pragma: no cover
        return DataLabelType.make_many(self.boto3_raw_data["DataLabelTypes"])

    Position = field("Position")
    LabelContent = field("LabelContent")

    @cached_property
    def LabelFontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["LabelFontConfiguration"])

    LabelColor = field("LabelColor")
    Overlap = field("Overlap")
    TotalsVisibility = field("TotalsVisibility")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataLabelOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataLabelOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartDataLabelOptions:
    boto3_raw_data: "type_defs.FunnelChartDataLabelOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")
    CategoryLabelVisibility = field("CategoryLabelVisibility")
    MeasureLabelVisibility = field("MeasureLabelVisibility")
    Position = field("Position")

    @cached_property
    def LabelFontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["LabelFontConfiguration"])

    LabelColor = field("LabelColor")
    MeasureDataLabelStyle = field("MeasureDataLabelStyle")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FunnelChartDataLabelOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartDataLabelOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LabelOptions:
    boto3_raw_data: "type_defs.LabelOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @cached_property
    def FontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["FontConfiguration"])

    CustomLabel = field("CustomLabel")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LabelOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LabelOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PanelTitleOptions:
    boto3_raw_data: "type_defs.PanelTitleOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @cached_property
    def FontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["FontConfiguration"])

    HorizontalTextAlignment = field("HorizontalTextAlignment")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PanelTitleOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PanelTitleOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldCustomTextContent:
    boto3_raw_data: "type_defs.TableFieldCustomTextContentTypeDef" = dataclasses.field()

    @cached_property
    def FontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["FontConfiguration"])

    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableFieldCustomTextContentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldCustomTextContentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ForecastConfigurationOutput:
    boto3_raw_data: "type_defs.ForecastConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def ForecastProperties(self):  # pragma: no cover
        return TimeBasedForecastProperties.make_one(
            self.boto3_raw_data["ForecastProperties"]
        )

    @cached_property
    def Scenario(self):  # pragma: no cover
        return ForecastScenarioOutput.make_one(self.boto3_raw_data["Scenario"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ForecastConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ForecastConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFreeFormLayoutConfiguration:
    boto3_raw_data: "type_defs.DefaultFreeFormLayoutConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CanvasSizeOptions(self):  # pragma: no cover
        return FreeFormLayoutCanvasSizeOptions.make_one(
            self.boto3_raw_data["CanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultFreeFormLayoutConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFreeFormLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotUserConfiguration:
    boto3_raw_data: "type_defs.SnapshotUserConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def AnonymousUsers(self):  # pragma: no cover
        return SnapshotAnonymousUser.make_many(self.boto3_raw_data["AnonymousUsers"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotUserConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotUserConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PredictQAResultsResponse:
    boto3_raw_data: "type_defs.PredictQAResultsResponseTypeDef" = dataclasses.field()

    @cached_property
    def PrimaryResult(self):  # pragma: no cover
        return QAResult.make_one(self.boto3_raw_data["PrimaryResult"])

    @cached_property
    def AdditionalResults(self):  # pragma: no cover
        return QAResult.make_many(self.boto3_raw_data["AdditionalResults"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PredictQAResultsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PredictQAResultsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnGroup:
    boto3_raw_data: "type_defs.ColumnGroupTypeDef" = dataclasses.field()

    GeoSpatialColumnGroup = field("GeoSpatialColumnGroup")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnGroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ColumnGroupTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialHeatmapConfigurationOutput:
    boto3_raw_data: "type_defs.GeospatialHeatmapConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HeatmapColor(self):  # pragma: no cover
        return GeospatialHeatmapColorScaleOutput.make_one(
            self.boto3_raw_data["HeatmapColor"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GeospatialHeatmapConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialHeatmapConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialHeatmapConfiguration:
    boto3_raw_data: "type_defs.GeospatialHeatmapConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HeatmapColor(self):  # pragma: no cover
        return GeospatialHeatmapColorScale.make_one(self.boto3_raw_data["HeatmapColor"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialHeatmapConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialHeatmapConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialCategoricalColorOutput:
    boto3_raw_data: "type_defs.GeospatialCategoricalColorOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategoryDataColors(self):  # pragma: no cover
        return GeospatialCategoricalDataColor.make_many(
            self.boto3_raw_data["CategoryDataColors"]
        )

    NullDataVisibility = field("NullDataVisibility")

    @cached_property
    def NullDataSettings(self):  # pragma: no cover
        return GeospatialNullDataSettings.make_one(
            self.boto3_raw_data["NullDataSettings"]
        )

    DefaultOpacity = field("DefaultOpacity")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialCategoricalColorOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialCategoricalColorOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialCategoricalColor:
    boto3_raw_data: "type_defs.GeospatialCategoricalColorTypeDef" = dataclasses.field()

    @cached_property
    def CategoryDataColors(self):  # pragma: no cover
        return GeospatialCategoricalDataColor.make_many(
            self.boto3_raw_data["CategoryDataColors"]
        )

    NullDataVisibility = field("NullDataVisibility")

    @cached_property
    def NullDataSettings(self):  # pragma: no cover
        return GeospatialNullDataSettings.make_one(
            self.boto3_raw_data["NullDataSettings"]
        )

    DefaultOpacity = field("DefaultOpacity")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialCategoricalColorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialCategoricalColorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialGradientColorOutput:
    boto3_raw_data: "type_defs.GeospatialGradientColorOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StepColors(self):  # pragma: no cover
        return GeospatialGradientStepColor.make_many(self.boto3_raw_data["StepColors"])

    NullDataVisibility = field("NullDataVisibility")

    @cached_property
    def NullDataSettings(self):  # pragma: no cover
        return GeospatialNullDataSettings.make_one(
            self.boto3_raw_data["NullDataSettings"]
        )

    DefaultOpacity = field("DefaultOpacity")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialGradientColorOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialGradientColorOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialGradientColor:
    boto3_raw_data: "type_defs.GeospatialGradientColorTypeDef" = dataclasses.field()

    @cached_property
    def StepColors(self):  # pragma: no cover
        return GeospatialGradientStepColor.make_many(self.boto3_raw_data["StepColors"])

    NullDataVisibility = field("NullDataVisibility")

    @cached_property
    def NullDataSettings(self):  # pragma: no cover
        return GeospatialNullDataSettings.make_one(
            self.boto3_raw_data["NullDataSettings"]
        )

    DefaultOpacity = field("DefaultOpacity")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialGradientColorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialGradientColorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GlobalTableBorderOptions:
    boto3_raw_data: "type_defs.GlobalTableBorderOptionsTypeDef" = dataclasses.field()

    @cached_property
    def UniformBorder(self):  # pragma: no cover
        return TableBorderOptions.make_one(self.boto3_raw_data["UniformBorder"])

    @cached_property
    def SideSpecificBorder(self):  # pragma: no cover
        return TableSideBorderOptions.make_one(
            self.boto3_raw_data["SideSpecificBorder"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GlobalTableBorderOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GlobalTableBorderOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingGradientColorOutput:
    boto3_raw_data: "type_defs.ConditionalFormattingGradientColorOutputTypeDef" = (
        dataclasses.field()
    )

    Expression = field("Expression")

    @cached_property
    def Color(self):  # pragma: no cover
        return GradientColorOutput.make_one(self.boto3_raw_data["Color"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ConditionalFormattingGradientColorOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingGradientColorOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingGradientColor:
    boto3_raw_data: "type_defs.ConditionalFormattingGradientColorTypeDef" = (
        dataclasses.field()
    )

    Expression = field("Expression")

    @cached_property
    def Color(self):  # pragma: no cover
        return GradientColor.make_one(self.boto3_raw_data["Color"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ConditionalFormattingGradientColorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingGradientColorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultGridLayoutConfiguration:
    boto3_raw_data: "type_defs.DefaultGridLayoutConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CanvasSizeOptions(self):  # pragma: no cover
        return GridLayoutCanvasSizeOptions.make_one(
            self.boto3_raw_data["CanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DefaultGridLayoutConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultGridLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GridLayoutConfigurationOutput:
    boto3_raw_data: "type_defs.GridLayoutConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Elements(self):  # pragma: no cover
        return GridLayoutElement.make_many(self.boto3_raw_data["Elements"])

    @cached_property
    def CanvasSizeOptions(self):  # pragma: no cover
        return GridLayoutCanvasSizeOptions.make_one(
            self.boto3_raw_data["CanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GridLayoutConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GridLayoutConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GridLayoutConfiguration:
    boto3_raw_data: "type_defs.GridLayoutConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Elements(self):  # pragma: no cover
        return GridLayoutElement.make_many(self.boto3_raw_data["Elements"])

    @cached_property
    def CanvasSizeOptions(self):  # pragma: no cover
        return GridLayoutCanvasSizeOptions.make_one(
            self.boto3_raw_data["CanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GridLayoutConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GridLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageSetConfiguration:
    boto3_raw_data: "type_defs.ImageSetConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Original(self):  # pragma: no cover
        return ImageConfiguration.make_one(self.boto3_raw_data["Original"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageSetConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageSetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageSet:
    boto3_raw_data: "type_defs.ImageSetTypeDef" = dataclasses.field()

    @cached_property
    def Original(self):  # pragma: no cover
        return Image.make_one(self.boto3_raw_data["Original"])

    @cached_property
    def Height64(self):  # pragma: no cover
        return Image.make_one(self.boto3_raw_data["Height64"])

    @cached_property
    def Height32(self):  # pragma: no cover
        return Image.make_one(self.boto3_raw_data["Height32"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageSetTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageSetTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RefreshConfiguration:
    boto3_raw_data: "type_defs.RefreshConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def IncrementalRefresh(self):  # pragma: no cover
        return IncrementalRefresh.make_one(self.boto3_raw_data["IncrementalRefresh"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RefreshConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RefreshConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeIngestionResponse:
    boto3_raw_data: "type_defs.DescribeIngestionResponseTypeDef" = dataclasses.field()

    @cached_property
    def Ingestion(self):  # pragma: no cover
        return Ingestion.make_one(self.boto3_raw_data["Ingestion"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeIngestionResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeIngestionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListIngestionsResponse:
    boto3_raw_data: "type_defs.ListIngestionsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Ingestions(self):  # pragma: no cover
        return Ingestion.make_many(self.boto3_raw_data["Ingestions"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListIngestionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListIngestionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerDatasetParameter:
    boto3_raw_data: "type_defs.IntegerDatasetParameterTypeDef" = dataclasses.field()

    Id = field("Id")
    Name = field("Name")
    ValueType = field("ValueType")
    DefaultValues = field("DefaultValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IntegerDatasetParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerDatasetParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LogicalTableSource:
    boto3_raw_data: "type_defs.LogicalTableSourceTypeDef" = dataclasses.field()

    @cached_property
    def JoinInstruction(self):  # pragma: no cover
        return JoinInstruction.make_one(self.boto3_raw_data["JoinInstruction"])

    PhysicalTableId = field("PhysicalTableId")
    DataSetArn = field("DataSetArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LogicalTableSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LogicalTableSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataFieldSeriesItem:
    boto3_raw_data: "type_defs.DataFieldSeriesItemTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    AxisBinding = field("AxisBinding")
    FieldValue = field("FieldValue")

    @cached_property
    def Settings(self):  # pragma: no cover
        return LineChartSeriesSettings.make_one(self.boto3_raw_data["Settings"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataFieldSeriesItemTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataFieldSeriesItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FieldSeriesItem:
    boto3_raw_data: "type_defs.FieldSeriesItemTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    AxisBinding = field("AxisBinding")

    @cached_property
    def Settings(self):  # pragma: no cover
        return LineChartSeriesSettings.make_one(self.boto3_raw_data["Settings"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FieldSeriesItemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FieldSeriesItemTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFolderRequest:
    boto3_raw_data: "type_defs.CreateFolderRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    Name = field("Name")
    FolderType = field("FolderType")
    ParentFolderArn = field("ParentFolderArn")
    Permissions = field("Permissions")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    SharingModel = field("SharingModel")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateFolderRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFolderRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAnalysisPermissionsRequest:
    boto3_raw_data: "type_defs.UpdateAnalysisPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AnalysisId = field("AnalysisId")
    GrantPermissions = field("GrantPermissions")
    RevokePermissions = field("RevokePermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateAnalysisPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAnalysisPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardPermissionsRequest:
    boto3_raw_data: "type_defs.UpdateDashboardPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    GrantPermissions = field("GrantPermissions")
    RevokePermissions = field("RevokePermissions")
    GrantLinkPermissions = field("GrantLinkPermissions")
    RevokeLinkPermissions = field("RevokeLinkPermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDashboardPermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDataSetPermissionsRequest:
    boto3_raw_data: "type_defs.UpdateDataSetPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")
    GrantPermissions = field("GrantPermissions")
    RevokePermissions = field("RevokePermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateDataSetPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDataSetPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDataSourcePermissionsRequest:
    boto3_raw_data: "type_defs.UpdateDataSourcePermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DataSourceId = field("DataSourceId")
    GrantPermissions = field("GrantPermissions")
    RevokePermissions = field("RevokePermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateDataSourcePermissionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDataSourcePermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFolderPermissionsRequest:
    boto3_raw_data: "type_defs.UpdateFolderPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    FolderId = field("FolderId")
    GrantPermissions = field("GrantPermissions")
    RevokePermissions = field("RevokePermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateFolderPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFolderPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTemplatePermissionsRequest:
    boto3_raw_data: "type_defs.UpdateTemplatePermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    GrantPermissions = field("GrantPermissions")
    RevokePermissions = field("RevokePermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateTemplatePermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTemplatePermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateThemePermissionsRequest:
    boto3_raw_data: "type_defs.UpdateThemePermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    GrantPermissions = field("GrantPermissions")
    RevokePermissions = field("RevokePermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateThemePermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateThemePermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTopicPermissionsRequest:
    boto3_raw_data: "type_defs.UpdateTopicPermissionsRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")
    GrantPermissions = field("GrantPermissions")
    RevokePermissions = field("RevokePermissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateTopicPermissionsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTopicPermissionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetStyle:
    boto3_raw_data: "type_defs.SheetStyleTypeDef" = dataclasses.field()

    @cached_property
    def Tile(self):  # pragma: no cover
        return TileStyle.make_one(self.boto3_raw_data["Tile"])

    @cached_property
    def TileLayout(self):  # pragma: no cover
        return TileLayoutStyle.make_one(self.boto3_raw_data["TileLayout"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SheetStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SheetStyleTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicNamedEntityOutput:
    boto3_raw_data: "type_defs.TopicNamedEntityOutputTypeDef" = dataclasses.field()

    EntityName = field("EntityName")
    EntityDescription = field("EntityDescription")
    EntitySynonyms = field("EntitySynonyms")

    @cached_property
    def SemanticEntityType(self):  # pragma: no cover
        return SemanticEntityTypeOutput.make_one(
            self.boto3_raw_data["SemanticEntityType"]
        )

    @cached_property
    def Definition(self):  # pragma: no cover
        return NamedEntityDefinitionOutput.make_many(self.boto3_raw_data["Definition"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicNamedEntityOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicNamedEntityOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicNamedEntity:
    boto3_raw_data: "type_defs.TopicNamedEntityTypeDef" = dataclasses.field()

    EntityName = field("EntityName")
    EntityDescription = field("EntityDescription")
    EntitySynonyms = field("EntitySynonyms")

    @cached_property
    def SemanticEntityType(self):  # pragma: no cover
        return SemanticEntityType.make_one(self.boto3_raw_data["SemanticEntityType"])

    @cached_property
    def Definition(self):  # pragma: no cover
        return NamedEntityDefinition.make_many(self.boto3_raw_data["Definition"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicNamedEntityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicNamedEntityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeNamespaceResponse:
    boto3_raw_data: "type_defs.DescribeNamespaceResponseTypeDef" = dataclasses.field()

    @cached_property
    def Namespace(self):  # pragma: no cover
        return NamespaceInfoV2.make_one(self.boto3_raw_data["Namespace"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeNamespaceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeNamespaceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListNamespacesResponse:
    boto3_raw_data: "type_defs.ListNamespacesResponseTypeDef" = dataclasses.field()

    @cached_property
    def Namespaces(self):  # pragma: no cover
        return NamespaceInfoV2.make_many(self.boto3_raw_data["Namespaces"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListNamespacesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListNamespacesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListVPCConnectionsResponse:
    boto3_raw_data: "type_defs.ListVPCConnectionsResponseTypeDef" = dataclasses.field()

    @cached_property
    def VPCConnectionSummaries(self):  # pragma: no cover
        return VPCConnectionSummary.make_many(
            self.boto3_raw_data["VPCConnectionSummaries"]
        )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListVPCConnectionsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListVPCConnectionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeVPCConnectionResponse:
    boto3_raw_data: "type_defs.DescribeVPCConnectionResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def VPCConnection(self):  # pragma: no cover
        return VPCConnection.make_one(self.boto3_raw_data["VPCConnection"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeVPCConnectionResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeVPCConnectionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CurrencyDisplayFormatConfiguration:
    boto3_raw_data: "type_defs.CurrencyDisplayFormatConfigurationTypeDef" = (
        dataclasses.field()
    )

    Prefix = field("Prefix")
    Suffix = field("Suffix")

    @cached_property
    def SeparatorConfiguration(self):  # pragma: no cover
        return NumericSeparatorConfiguration.make_one(
            self.boto3_raw_data["SeparatorConfiguration"]
        )

    Symbol = field("Symbol")

    @cached_property
    def DecimalPlacesConfiguration(self):  # pragma: no cover
        return DecimalPlacesConfiguration.make_one(
            self.boto3_raw_data["DecimalPlacesConfiguration"]
        )

    NumberScale = field("NumberScale")

    @cached_property
    def NegativeValueConfiguration(self):  # pragma: no cover
        return NegativeValueConfiguration.make_one(
            self.boto3_raw_data["NegativeValueConfiguration"]
        )

    @cached_property
    def NullValueFormatConfiguration(self):  # pragma: no cover
        return NullValueFormatConfiguration.make_one(
            self.boto3_raw_data["NullValueFormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CurrencyDisplayFormatConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CurrencyDisplayFormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumberDisplayFormatConfiguration:
    boto3_raw_data: "type_defs.NumberDisplayFormatConfigurationTypeDef" = (
        dataclasses.field()
    )

    Prefix = field("Prefix")
    Suffix = field("Suffix")

    @cached_property
    def SeparatorConfiguration(self):  # pragma: no cover
        return NumericSeparatorConfiguration.make_one(
            self.boto3_raw_data["SeparatorConfiguration"]
        )

    @cached_property
    def DecimalPlacesConfiguration(self):  # pragma: no cover
        return DecimalPlacesConfiguration.make_one(
            self.boto3_raw_data["DecimalPlacesConfiguration"]
        )

    NumberScale = field("NumberScale")

    @cached_property
    def NegativeValueConfiguration(self):  # pragma: no cover
        return NegativeValueConfiguration.make_one(
            self.boto3_raw_data["NegativeValueConfiguration"]
        )

    @cached_property
    def NullValueFormatConfiguration(self):  # pragma: no cover
        return NullValueFormatConfiguration.make_one(
            self.boto3_raw_data["NullValueFormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.NumberDisplayFormatConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumberDisplayFormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PercentageDisplayFormatConfiguration:
    boto3_raw_data: "type_defs.PercentageDisplayFormatConfigurationTypeDef" = (
        dataclasses.field()
    )

    Prefix = field("Prefix")
    Suffix = field("Suffix")

    @cached_property
    def SeparatorConfiguration(self):  # pragma: no cover
        return NumericSeparatorConfiguration.make_one(
            self.boto3_raw_data["SeparatorConfiguration"]
        )

    @cached_property
    def DecimalPlacesConfiguration(self):  # pragma: no cover
        return DecimalPlacesConfiguration.make_one(
            self.boto3_raw_data["DecimalPlacesConfiguration"]
        )

    @cached_property
    def NegativeValueConfiguration(self):  # pragma: no cover
        return NegativeValueConfiguration.make_one(
            self.boto3_raw_data["NegativeValueConfiguration"]
        )

    @cached_property
    def NullValueFormatConfiguration(self):  # pragma: no cover
        return NullValueFormatConfiguration.make_one(
            self.boto3_raw_data["NullValueFormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PercentageDisplayFormatConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PercentageDisplayFormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AggregationFunction:
    boto3_raw_data: "type_defs.AggregationFunctionTypeDef" = dataclasses.field()

    @cached_property
    def NumericalAggregationFunction(self):  # pragma: no cover
        return NumericalAggregationFunction.make_one(
            self.boto3_raw_data["NumericalAggregationFunction"]
        )

    CategoricalAggregationFunction = field("CategoricalAggregationFunction")
    DateAggregationFunction = field("DateAggregationFunction")

    @cached_property
    def AttributeAggregationFunction(self):  # pragma: no cover
        return AttributeAggregationFunction.make_one(
            self.boto3_raw_data["AttributeAggregationFunction"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AggregationFunctionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AggregationFunctionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScrollBarOptions:
    boto3_raw_data: "type_defs.ScrollBarOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @cached_property
    def VisibleRange(self):  # pragma: no cover
        return VisibleRangeOptions.make_one(self.boto3_raw_data["VisibleRange"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ScrollBarOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScrollBarOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicDateRangeFilter:
    boto3_raw_data: "type_defs.TopicDateRangeFilterTypeDef" = dataclasses.field()

    Inclusive = field("Inclusive")

    @cached_property
    def Constant(self):  # pragma: no cover
        return TopicRangeFilterConstant.make_one(self.boto3_raw_data["Constant"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicDateRangeFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicDateRangeFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicNumericRangeFilter:
    boto3_raw_data: "type_defs.TopicNumericRangeFilterTypeDef" = dataclasses.field()

    Inclusive = field("Inclusive")

    @cached_property
    def Constant(self):  # pragma: no cover
        return TopicRangeFilterConstant.make_one(self.boto3_raw_data["Constant"])

    Aggregation = field("Aggregation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicNumericRangeFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicNumericRangeFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RedshiftParameters:
    boto3_raw_data: "type_defs.RedshiftParametersTypeDef" = dataclasses.field()

    Database = field("Database")
    Host = field("Host")
    Port = field("Port")
    ClusterId = field("ClusterId")
    IAMParameters = field("IAMParameters")

    @cached_property
    def IdentityCenterConfiguration(self):  # pragma: no cover
        return IdentityCenterConfiguration.make_one(
            self.boto3_raw_data["IdentityCenterConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RedshiftParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RedshiftParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RefreshScheduleOutput:
    boto3_raw_data: "type_defs.RefreshScheduleOutputTypeDef" = dataclasses.field()

    ScheduleId = field("ScheduleId")

    @cached_property
    def ScheduleFrequency(self):  # pragma: no cover
        return RefreshFrequency.make_one(self.boto3_raw_data["ScheduleFrequency"])

    RefreshType = field("RefreshType")
    StartAfterDateTime = field("StartAfterDateTime")
    Arn = field("Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RefreshScheduleOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RefreshScheduleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RefreshSchedule:
    boto3_raw_data: "type_defs.RefreshScheduleTypeDef" = dataclasses.field()

    ScheduleId = field("ScheduleId")

    @cached_property
    def ScheduleFrequency(self):  # pragma: no cover
        return RefreshFrequency.make_one(self.boto3_raw_data["ScheduleFrequency"])

    RefreshType = field("RefreshType")
    StartAfterDateTime = field("StartAfterDateTime")
    Arn = field("Arn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RefreshScheduleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RefreshScheduleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotDestinationConfigurationOutput:
    boto3_raw_data: "type_defs.SnapshotDestinationConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def S3Destinations(self):  # pragma: no cover
        return SnapshotS3DestinationConfiguration.make_many(
            self.boto3_raw_data["S3Destinations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SnapshotDestinationConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotDestinationConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotDestinationConfiguration:
    boto3_raw_data: "type_defs.SnapshotDestinationConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def S3Destinations(self):  # pragma: no cover
        return SnapshotS3DestinationConfiguration.make_many(
            self.boto3_raw_data["S3Destinations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SnapshotDestinationConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotDestinationConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotJobS3Result:
    boto3_raw_data: "type_defs.SnapshotJobS3ResultTypeDef" = dataclasses.field()

    @cached_property
    def S3DestinationConfiguration(self):  # pragma: no cover
        return SnapshotS3DestinationConfiguration.make_one(
            self.boto3_raw_data["S3DestinationConfiguration"]
        )

    S3Uri = field("S3Uri")

    @cached_property
    def ErrorInfo(self):  # pragma: no cover
        return SnapshotJobResultErrorInfo.make_many(self.boto3_raw_data["ErrorInfo"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotJobS3ResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotJobS3ResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PhysicalTableOutput:
    boto3_raw_data: "type_defs.PhysicalTableOutputTypeDef" = dataclasses.field()

    @cached_property
    def RelationalTable(self):  # pragma: no cover
        return RelationalTableOutput.make_one(self.boto3_raw_data["RelationalTable"])

    @cached_property
    def CustomSql(self):  # pragma: no cover
        return CustomSqlOutput.make_one(self.boto3_raw_data["CustomSql"])

    @cached_property
    def S3Source(self):  # pragma: no cover
        return S3SourceOutput.make_one(self.boto3_raw_data["S3Source"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PhysicalTableOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PhysicalTableOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SectionBasedLayoutCanvasSizeOptions:
    boto3_raw_data: "type_defs.SectionBasedLayoutCanvasSizeOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PaperCanvasSizeOptions(self):  # pragma: no cover
        return SectionBasedLayoutPaperCanvasSizeOptions.make_one(
            self.boto3_raw_data["PaperCanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SectionBasedLayoutCanvasSizeOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SectionBasedLayoutCanvasSizeOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterScopeConfigurationOutput:
    boto3_raw_data: "type_defs.FilterScopeConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SelectedSheets(self):  # pragma: no cover
        return SelectedSheetsFilterScopeConfigurationOutput.make_one(
            self.boto3_raw_data["SelectedSheets"]
        )

    AllSheets = field("AllSheets")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FilterScopeConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterScopeConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterScopeConfiguration:
    boto3_raw_data: "type_defs.FilterScopeConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def SelectedSheets(self):  # pragma: no cover
        return SelectedSheetsFilterScopeConfiguration.make_one(
            self.boto3_raw_data["SelectedSheets"]
        )

    AllSheets = field("AllSheets")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterScopeConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterScopeConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormLayoutElementOutput:
    boto3_raw_data: "type_defs.FreeFormLayoutElementOutputTypeDef" = dataclasses.field()

    ElementId = field("ElementId")
    ElementType = field("ElementType")
    XAxisLocation = field("XAxisLocation")
    YAxisLocation = field("YAxisLocation")
    Width = field("Width")
    Height = field("Height")
    Visibility = field("Visibility")

    @cached_property
    def RenderingRules(self):  # pragma: no cover
        return SheetElementRenderingRule.make_many(
            self.boto3_raw_data["RenderingRules"]
        )

    @cached_property
    def BorderStyle(self):  # pragma: no cover
        return FreeFormLayoutElementBorderStyle.make_one(
            self.boto3_raw_data["BorderStyle"]
        )

    @cached_property
    def SelectedBorderStyle(self):  # pragma: no cover
        return FreeFormLayoutElementBorderStyle.make_one(
            self.boto3_raw_data["SelectedBorderStyle"]
        )

    @cached_property
    def BackgroundStyle(self):  # pragma: no cover
        return FreeFormLayoutElementBackgroundStyle.make_one(
            self.boto3_raw_data["BackgroundStyle"]
        )

    @cached_property
    def LoadingAnimation(self):  # pragma: no cover
        return LoadingAnimation.make_one(self.boto3_raw_data["LoadingAnimation"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FreeFormLayoutElementOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormLayoutElementOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormLayoutElement:
    boto3_raw_data: "type_defs.FreeFormLayoutElementTypeDef" = dataclasses.field()

    ElementId = field("ElementId")
    ElementType = field("ElementType")
    XAxisLocation = field("XAxisLocation")
    YAxisLocation = field("YAxisLocation")
    Width = field("Width")
    Height = field("Height")
    Visibility = field("Visibility")

    @cached_property
    def RenderingRules(self):  # pragma: no cover
        return SheetElementRenderingRule.make_many(
            self.boto3_raw_data["RenderingRules"]
        )

    @cached_property
    def BorderStyle(self):  # pragma: no cover
        return FreeFormLayoutElementBorderStyle.make_one(
            self.boto3_raw_data["BorderStyle"]
        )

    @cached_property
    def SelectedBorderStyle(self):  # pragma: no cover
        return FreeFormLayoutElementBorderStyle.make_one(
            self.boto3_raw_data["SelectedBorderStyle"]
        )

    @cached_property
    def BackgroundStyle(self):  # pragma: no cover
        return FreeFormLayoutElementBackgroundStyle.make_one(
            self.boto3_raw_data["BackgroundStyle"]
        )

    @cached_property
    def LoadingAnimation(self):  # pragma: no cover
        return LoadingAnimation.make_one(self.boto3_raw_data["LoadingAnimation"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FreeFormLayoutElementTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormLayoutElementTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotFileGroupOutput:
    boto3_raw_data: "type_defs.SnapshotFileGroupOutputTypeDef" = dataclasses.field()

    @cached_property
    def Files(self):  # pragma: no cover
        return SnapshotFileOutput.make_many(self.boto3_raw_data["Files"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotFileGroupOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotFileGroupOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotFileGroup:
    boto3_raw_data: "type_defs.SnapshotFileGroupTypeDef" = dataclasses.field()

    @cached_property
    def Files(self):  # pragma: no cover
        return SnapshotFile.make_many(self.boto3_raw_data["Files"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SnapshotFileGroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotFileGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageStaticFile:
    boto3_raw_data: "type_defs.ImageStaticFileTypeDef" = dataclasses.field()

    StaticFileId = field("StaticFileId")

    @cached_property
    def Source(self):  # pragma: no cover
        return StaticFileSource.make_one(self.boto3_raw_data["Source"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageStaticFileTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ImageStaticFileTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SpatialStaticFile:
    boto3_raw_data: "type_defs.SpatialStaticFileTypeDef" = dataclasses.field()

    StaticFileId = field("StaticFileId")

    @cached_property
    def Source(self):  # pragma: no cover
        return StaticFileSource.make_one(self.boto3_raw_data["Source"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SpatialStaticFileTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SpatialStaticFileTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DatasetParameterOutput:
    boto3_raw_data: "type_defs.DatasetParameterOutputTypeDef" = dataclasses.field()

    @cached_property
    def StringDatasetParameter(self):  # pragma: no cover
        return StringDatasetParameterOutput.make_one(
            self.boto3_raw_data["StringDatasetParameter"]
        )

    @cached_property
    def DecimalDatasetParameter(self):  # pragma: no cover
        return DecimalDatasetParameterOutput.make_one(
            self.boto3_raw_data["DecimalDatasetParameter"]
        )

    @cached_property
    def IntegerDatasetParameter(self):  # pragma: no cover
        return IntegerDatasetParameterOutput.make_one(
            self.boto3_raw_data["IntegerDatasetParameter"]
        )

    @cached_property
    def DateTimeDatasetParameter(self):  # pragma: no cover
        return DateTimeDatasetParameterOutput.make_one(
            self.boto3_raw_data["DateTimeDatasetParameter"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DatasetParameterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DatasetParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringDatasetParameter:
    boto3_raw_data: "type_defs.StringDatasetParameterTypeDef" = dataclasses.field()

    Id = field("Id")
    Name = field("Name")
    ValueType = field("ValueType")
    DefaultValues = field("DefaultValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StringDatasetParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringDatasetParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetTextBox:
    boto3_raw_data: "type_defs.SheetTextBoxTypeDef" = dataclasses.field()

    SheetTextBoxId = field("SheetTextBoxId")
    Content = field("Content")

    @cached_property
    def Interactions(self):  # pragma: no cover
        return TextBoxInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SheetTextBoxTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SheetTextBoxTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetOptionsOutput:
    boto3_raw_data: "type_defs.AssetOptionsOutputTypeDef" = dataclasses.field()

    Timezone = field("Timezone")
    WeekStart = field("WeekStart")
    QBusinessInsightsStatus = field("QBusinessInsightsStatus")
    ExcludedDataSetArns = field("ExcludedDataSetArns")

    @cached_property
    def CustomActionDefaults(self):  # pragma: no cover
        return VisualCustomActionDefaults.make_one(
            self.boto3_raw_data["CustomActionDefaults"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssetOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetOptions:
    boto3_raw_data: "type_defs.AssetOptionsTypeDef" = dataclasses.field()

    Timezone = field("Timezone")
    WeekStart = field("WeekStart")
    QBusinessInsightsStatus = field("QBusinessInsightsStatus")
    ExcludedDataSetArns = field("ExcludedDataSetArns")

    @cached_property
    def CustomActionDefaults(self):  # pragma: no cover
        return VisualCustomActionDefaults.make_one(
            self.boto3_raw_data["CustomActionDefaults"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AssetOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AssetOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterCrossSheetControlOutput:
    boto3_raw_data: "type_defs.FilterCrossSheetControlOutputTypeDef" = (
        dataclasses.field()
    )

    FilterControlId = field("FilterControlId")
    SourceFilterId = field("SourceFilterId")

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfigurationOutput.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FilterCrossSheetControlOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterCrossSheetControlOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterCrossSheetControl:
    boto3_raw_data: "type_defs.FilterCrossSheetControlTypeDef" = dataclasses.field()

    FilterControlId = field("FilterControlId")
    SourceFilterId = field("SourceFilterId")

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfiguration.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterCrossSheetControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterCrossSheetControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeParameterDeclarationOutput:
    boto3_raw_data: "type_defs.DateTimeParameterDeclarationOutputTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return DateTimeDefaultValuesOutput.make_one(
            self.boto3_raw_data["DefaultValues"]
        )

    TimeGranularity = field("TimeGranularity")

    @cached_property
    def ValueWhenUnset(self):  # pragma: no cover
        return DateTimeValueWhenUnsetConfigurationOutput.make_one(
            self.boto3_raw_data["ValueWhenUnset"]
        )

    @cached_property
    def MappedDataSetParameters(self):  # pragma: no cover
        return MappedDataSetParameter.make_many(
            self.boto3_raw_data["MappedDataSetParameters"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DateTimeParameterDeclarationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeParameterDeclarationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeParameterDeclaration:
    boto3_raw_data: "type_defs.DateTimeParameterDeclarationTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return DateTimeDefaultValues.make_one(self.boto3_raw_data["DefaultValues"])

    TimeGranularity = field("TimeGranularity")

    @cached_property
    def ValueWhenUnset(self):  # pragma: no cover
        return DateTimeValueWhenUnsetConfiguration.make_one(
            self.boto3_raw_data["ValueWhenUnset"]
        )

    @cached_property
    def MappedDataSetParameters(self):  # pragma: no cover
        return MappedDataSetParameter.make_many(
            self.boto3_raw_data["MappedDataSetParameters"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DateTimeParameterDeclarationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeParameterDeclarationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalParameterDeclarationOutput:
    boto3_raw_data: "type_defs.DecimalParameterDeclarationOutputTypeDef" = (
        dataclasses.field()
    )

    ParameterValueType = field("ParameterValueType")
    Name = field("Name")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return DecimalDefaultValuesOutput.make_one(self.boto3_raw_data["DefaultValues"])

    @cached_property
    def ValueWhenUnset(self):  # pragma: no cover
        return DecimalValueWhenUnsetConfiguration.make_one(
            self.boto3_raw_data["ValueWhenUnset"]
        )

    @cached_property
    def MappedDataSetParameters(self):  # pragma: no cover
        return MappedDataSetParameter.make_many(
            self.boto3_raw_data["MappedDataSetParameters"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DecimalParameterDeclarationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalParameterDeclarationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DecimalParameterDeclaration:
    boto3_raw_data: "type_defs.DecimalParameterDeclarationTypeDef" = dataclasses.field()

    ParameterValueType = field("ParameterValueType")
    Name = field("Name")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return DecimalDefaultValues.make_one(self.boto3_raw_data["DefaultValues"])

    @cached_property
    def ValueWhenUnset(self):  # pragma: no cover
        return DecimalValueWhenUnsetConfiguration.make_one(
            self.boto3_raw_data["ValueWhenUnset"]
        )

    @cached_property
    def MappedDataSetParameters(self):  # pragma: no cover
        return MappedDataSetParameter.make_many(
            self.boto3_raw_data["MappedDataSetParameters"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DecimalParameterDeclarationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DecimalParameterDeclarationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerParameterDeclarationOutput:
    boto3_raw_data: "type_defs.IntegerParameterDeclarationOutputTypeDef" = (
        dataclasses.field()
    )

    ParameterValueType = field("ParameterValueType")
    Name = field("Name")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return IntegerDefaultValuesOutput.make_one(self.boto3_raw_data["DefaultValues"])

    @cached_property
    def ValueWhenUnset(self):  # pragma: no cover
        return IntegerValueWhenUnsetConfiguration.make_one(
            self.boto3_raw_data["ValueWhenUnset"]
        )

    @cached_property
    def MappedDataSetParameters(self):  # pragma: no cover
        return MappedDataSetParameter.make_many(
            self.boto3_raw_data["MappedDataSetParameters"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.IntegerParameterDeclarationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerParameterDeclarationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerParameterDeclaration:
    boto3_raw_data: "type_defs.IntegerParameterDeclarationTypeDef" = dataclasses.field()

    ParameterValueType = field("ParameterValueType")
    Name = field("Name")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return IntegerDefaultValues.make_one(self.boto3_raw_data["DefaultValues"])

    @cached_property
    def ValueWhenUnset(self):  # pragma: no cover
        return IntegerValueWhenUnsetConfiguration.make_one(
            self.boto3_raw_data["ValueWhenUnset"]
        )

    @cached_property
    def MappedDataSetParameters(self):  # pragma: no cover
        return MappedDataSetParameter.make_many(
            self.boto3_raw_data["MappedDataSetParameters"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IntegerParameterDeclarationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerParameterDeclarationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringParameterDeclarationOutput:
    boto3_raw_data: "type_defs.StringParameterDeclarationOutputTypeDef" = (
        dataclasses.field()
    )

    ParameterValueType = field("ParameterValueType")
    Name = field("Name")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return StringDefaultValuesOutput.make_one(self.boto3_raw_data["DefaultValues"])

    @cached_property
    def ValueWhenUnset(self):  # pragma: no cover
        return StringValueWhenUnsetConfiguration.make_one(
            self.boto3_raw_data["ValueWhenUnset"]
        )

    @cached_property
    def MappedDataSetParameters(self):  # pragma: no cover
        return MappedDataSetParameter.make_many(
            self.boto3_raw_data["MappedDataSetParameters"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StringParameterDeclarationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringParameterDeclarationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringParameterDeclaration:
    boto3_raw_data: "type_defs.StringParameterDeclarationTypeDef" = dataclasses.field()

    ParameterValueType = field("ParameterValueType")
    Name = field("Name")

    @cached_property
    def DefaultValues(self):  # pragma: no cover
        return StringDefaultValues.make_one(self.boto3_raw_data["DefaultValues"])

    @cached_property
    def ValueWhenUnset(self):  # pragma: no cover
        return StringValueWhenUnsetConfiguration.make_one(
            self.boto3_raw_data["ValueWhenUnset"]
        )

    @cached_property
    def MappedDataSetParameters(self):  # pragma: no cover
        return MappedDataSetParameter.make_many(
            self.boto3_raw_data["MappedDataSetParameters"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StringParameterDeclarationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringParameterDeclarationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeHierarchyOutput:
    boto3_raw_data: "type_defs.DateTimeHierarchyOutputTypeDef" = dataclasses.field()

    HierarchyId = field("HierarchyId")

    @cached_property
    def DrillDownFilters(self):  # pragma: no cover
        return DrillDownFilterOutput.make_many(self.boto3_raw_data["DrillDownFilters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DateTimeHierarchyOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeHierarchyOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExplicitHierarchyOutput:
    boto3_raw_data: "type_defs.ExplicitHierarchyOutputTypeDef" = dataclasses.field()

    HierarchyId = field("HierarchyId")

    @cached_property
    def Columns(self):  # pragma: no cover
        return ColumnIdentifier.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def DrillDownFilters(self):  # pragma: no cover
        return DrillDownFilterOutput.make_many(self.boto3_raw_data["DrillDownFilters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ExplicitHierarchyOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExplicitHierarchyOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PredefinedHierarchyOutput:
    boto3_raw_data: "type_defs.PredefinedHierarchyOutputTypeDef" = dataclasses.field()

    HierarchyId = field("HierarchyId")

    @cached_property
    def Columns(self):  # pragma: no cover
        return ColumnIdentifier.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def DrillDownFilters(self):  # pragma: no cover
        return DrillDownFilterOutput.make_many(self.boto3_raw_data["DrillDownFilters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PredefinedHierarchyOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PredefinedHierarchyOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisteredUserDashboardEmbeddingConfiguration:
    boto3_raw_data: "type_defs.RegisteredUserDashboardEmbeddingConfigurationTypeDef" = (
        dataclasses.field()
    )

    InitialDashboardId = field("InitialDashboardId")

    @cached_property
    def FeatureConfigurations(self):  # pragma: no cover
        return RegisteredUserDashboardFeatureConfigurations.make_one(
            self.boto3_raw_data["FeatureConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisteredUserDashboardEmbeddingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RegisteredUserDashboardEmbeddingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisteredUserQuickSightConsoleEmbeddingConfiguration:
    boto3_raw_data: (
        "type_defs.RegisteredUserQuickSightConsoleEmbeddingConfigurationTypeDef"
    ) = dataclasses.field()

    InitialPath = field("InitialPath")

    @cached_property
    def FeatureConfigurations(self):  # pragma: no cover
        return RegisteredUserConsoleFeatureConfigurations.make_one(
            self.boto3_raw_data["FeatureConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisteredUserQuickSightConsoleEmbeddingConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisteredUserQuickSightConsoleEmbeddingConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnonymousUserEmbeddingExperienceConfiguration:
    boto3_raw_data: "type_defs.AnonymousUserEmbeddingExperienceConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Dashboard(self):  # pragma: no cover
        return AnonymousUserDashboardEmbeddingConfiguration.make_one(
            self.boto3_raw_data["Dashboard"]
        )

    @cached_property
    def DashboardVisual(self):  # pragma: no cover
        return AnonymousUserDashboardVisualEmbeddingConfiguration.make_one(
            self.boto3_raw_data["DashboardVisual"]
        )

    @cached_property
    def QSearchBar(self):  # pragma: no cover
        return AnonymousUserQSearchBarEmbeddingConfiguration.make_one(
            self.boto3_raw_data["QSearchBar"]
        )

    @cached_property
    def GenerativeQnA(self):  # pragma: no cover
        return AnonymousUserGenerativeQnAEmbeddingConfiguration.make_one(
            self.boto3_raw_data["GenerativeQnA"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AnonymousUserEmbeddingExperienceConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnonymousUserEmbeddingExperienceConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartAssetBundleExportJobRequest:
    boto3_raw_data: "type_defs.StartAssetBundleExportJobRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AssetBundleExportJobId = field("AssetBundleExportJobId")
    ResourceArns = field("ResourceArns")
    ExportFormat = field("ExportFormat")
    IncludeAllDependencies = field("IncludeAllDependencies")
    CloudFormationOverridePropertyConfiguration = field(
        "CloudFormationOverridePropertyConfiguration"
    )
    IncludePermissions = field("IncludePermissions")
    IncludeTags = field("IncludeTags")

    @cached_property
    def ValidationStrategy(self):  # pragma: no cover
        return AssetBundleExportJobValidationStrategy.make_one(
            self.boto3_raw_data["ValidationStrategy"]
        )

    IncludeFolderMemberships = field("IncludeFolderMemberships")
    IncludeFolderMembers = field("IncludeFolderMembers")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartAssetBundleExportJobRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartAssetBundleExportJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobOverridePermissionsOutput:
    boto3_raw_data: "type_defs.AssetBundleImportJobOverridePermissionsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AssetBundleImportJobDataSourceOverridePermissionsOutput.make_many(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def DataSets(self):  # pragma: no cover
        return AssetBundleImportJobDataSetOverridePermissionsOutput.make_many(
            self.boto3_raw_data["DataSets"]
        )

    @cached_property
    def Themes(self):  # pragma: no cover
        return AssetBundleImportJobThemeOverridePermissionsOutput.make_many(
            self.boto3_raw_data["Themes"]
        )

    @cached_property
    def Analyses(self):  # pragma: no cover
        return AssetBundleImportJobAnalysisOverridePermissionsOutput.make_many(
            self.boto3_raw_data["Analyses"]
        )

    @cached_property
    def Dashboards(self):  # pragma: no cover
        return AssetBundleImportJobDashboardOverridePermissionsOutput.make_many(
            self.boto3_raw_data["Dashboards"]
        )

    @cached_property
    def Folders(self):  # pragma: no cover
        return AssetBundleImportJobFolderOverridePermissionsOutput.make_many(
            self.boto3_raw_data["Folders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobOverridePermissionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobOverridePermissionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobOverridePermissions:
    boto3_raw_data: "type_defs.AssetBundleImportJobOverridePermissionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AssetBundleImportJobDataSourceOverridePermissions.make_many(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def DataSets(self):  # pragma: no cover
        return AssetBundleImportJobDataSetOverridePermissions.make_many(
            self.boto3_raw_data["DataSets"]
        )

    @cached_property
    def Themes(self):  # pragma: no cover
        return AssetBundleImportJobThemeOverridePermissions.make_many(
            self.boto3_raw_data["Themes"]
        )

    @cached_property
    def Analyses(self):  # pragma: no cover
        return AssetBundleImportJobAnalysisOverridePermissions.make_many(
            self.boto3_raw_data["Analyses"]
        )

    @cached_property
    def Dashboards(self):  # pragma: no cover
        return AssetBundleImportJobDashboardOverridePermissions.make_many(
            self.boto3_raw_data["Dashboards"]
        )

    @cached_property
    def Folders(self):  # pragma: no cover
        return AssetBundleImportJobFolderOverridePermissions.make_many(
            self.boto3_raw_data["Folders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobOverridePermissionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobOverridePermissionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSourceParametersOutput:
    boto3_raw_data: "type_defs.DataSourceParametersOutputTypeDef" = dataclasses.field()

    @cached_property
    def AmazonElasticsearchParameters(self):  # pragma: no cover
        return AmazonElasticsearchParameters.make_one(
            self.boto3_raw_data["AmazonElasticsearchParameters"]
        )

    @cached_property
    def AthenaParameters(self):  # pragma: no cover
        return AthenaParameters.make_one(self.boto3_raw_data["AthenaParameters"])

    @cached_property
    def AuroraParameters(self):  # pragma: no cover
        return AuroraParameters.make_one(self.boto3_raw_data["AuroraParameters"])

    @cached_property
    def AuroraPostgreSqlParameters(self):  # pragma: no cover
        return AuroraPostgreSqlParameters.make_one(
            self.boto3_raw_data["AuroraPostgreSqlParameters"]
        )

    @cached_property
    def AwsIotAnalyticsParameters(self):  # pragma: no cover
        return AwsIotAnalyticsParameters.make_one(
            self.boto3_raw_data["AwsIotAnalyticsParameters"]
        )

    @cached_property
    def JiraParameters(self):  # pragma: no cover
        return JiraParameters.make_one(self.boto3_raw_data["JiraParameters"])

    @cached_property
    def MariaDbParameters(self):  # pragma: no cover
        return MariaDbParameters.make_one(self.boto3_raw_data["MariaDbParameters"])

    @cached_property
    def MySqlParameters(self):  # pragma: no cover
        return MySqlParameters.make_one(self.boto3_raw_data["MySqlParameters"])

    @cached_property
    def OracleParameters(self):  # pragma: no cover
        return OracleParameters.make_one(self.boto3_raw_data["OracleParameters"])

    @cached_property
    def PostgreSqlParameters(self):  # pragma: no cover
        return PostgreSqlParameters.make_one(
            self.boto3_raw_data["PostgreSqlParameters"]
        )

    @cached_property
    def PrestoParameters(self):  # pragma: no cover
        return PrestoParameters.make_one(self.boto3_raw_data["PrestoParameters"])

    @cached_property
    def RdsParameters(self):  # pragma: no cover
        return RdsParameters.make_one(self.boto3_raw_data["RdsParameters"])

    @cached_property
    def RedshiftParameters(self):  # pragma: no cover
        return RedshiftParametersOutput.make_one(
            self.boto3_raw_data["RedshiftParameters"]
        )

    @cached_property
    def S3Parameters(self):  # pragma: no cover
        return S3Parameters.make_one(self.boto3_raw_data["S3Parameters"])

    @cached_property
    def ServiceNowParameters(self):  # pragma: no cover
        return ServiceNowParameters.make_one(
            self.boto3_raw_data["ServiceNowParameters"]
        )

    @cached_property
    def SnowflakeParameters(self):  # pragma: no cover
        return SnowflakeParameters.make_one(self.boto3_raw_data["SnowflakeParameters"])

    @cached_property
    def SparkParameters(self):  # pragma: no cover
        return SparkParameters.make_one(self.boto3_raw_data["SparkParameters"])

    @cached_property
    def SqlServerParameters(self):  # pragma: no cover
        return SqlServerParameters.make_one(self.boto3_raw_data["SqlServerParameters"])

    @cached_property
    def TeradataParameters(self):  # pragma: no cover
        return TeradataParameters.make_one(self.boto3_raw_data["TeradataParameters"])

    @cached_property
    def TwitterParameters(self):  # pragma: no cover
        return TwitterParameters.make_one(self.boto3_raw_data["TwitterParameters"])

    @cached_property
    def AmazonOpenSearchParameters(self):  # pragma: no cover
        return AmazonOpenSearchParameters.make_one(
            self.boto3_raw_data["AmazonOpenSearchParameters"]
        )

    @cached_property
    def ExasolParameters(self):  # pragma: no cover
        return ExasolParameters.make_one(self.boto3_raw_data["ExasolParameters"])

    @cached_property
    def DatabricksParameters(self):  # pragma: no cover
        return DatabricksParameters.make_one(
            self.boto3_raw_data["DatabricksParameters"]
        )

    @cached_property
    def StarburstParameters(self):  # pragma: no cover
        return StarburstParameters.make_one(self.boto3_raw_data["StarburstParameters"])

    @cached_property
    def TrinoParameters(self):  # pragma: no cover
        return TrinoParameters.make_one(self.boto3_raw_data["TrinoParameters"])

    @cached_property
    def BigQueryParameters(self):  # pragma: no cover
        return BigQueryParameters.make_one(self.boto3_raw_data["BigQueryParameters"])

    @cached_property
    def ImpalaParameters(self):  # pragma: no cover
        return ImpalaParameters.make_one(self.boto3_raw_data["ImpalaParameters"])

    @cached_property
    def CustomConnectionParameters(self):  # pragma: no cover
        return CustomConnectionParameters.make_one(
            self.boto3_raw_data["CustomConnectionParameters"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSourceParametersOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSourceParametersOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DestinationParameterValueConfiguration:
    boto3_raw_data: "type_defs.DestinationParameterValueConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CustomValuesConfiguration(self):  # pragma: no cover
        return CustomValuesConfiguration.make_one(
            self.boto3_raw_data["CustomValuesConfiguration"]
        )

    SelectAllValueOptions = field("SelectAllValueOptions")
    SourceParameterName = field("SourceParameterName")
    SourceField = field("SourceField")

    @cached_property
    def SourceColumn(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["SourceColumn"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DestinationParameterValueConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DestinationParameterValueConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeDatasetParameter:
    boto3_raw_data: "type_defs.DateTimeDatasetParameterTypeDef" = dataclasses.field()

    Id = field("Id")
    Name = field("Name")
    ValueType = field("ValueType")
    TimeGranularity = field("TimeGranularity")
    DefaultValues = field("DefaultValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DateTimeDatasetParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeDatasetParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OverrideDatasetParameterOperation:
    boto3_raw_data: "type_defs.OverrideDatasetParameterOperationTypeDef" = (
        dataclasses.field()
    )

    ParameterName = field("ParameterName")
    NewParameterName = field("NewParameterName")
    NewDefaultValues = field("NewDefaultValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.OverrideDatasetParameterOperationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OverrideDatasetParameterOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeHierarchy:
    boto3_raw_data: "type_defs.DateTimeHierarchyTypeDef" = dataclasses.field()

    HierarchyId = field("HierarchyId")

    @cached_property
    def DrillDownFilters(self):  # pragma: no cover
        return DrillDownFilter.make_many(self.boto3_raw_data["DrillDownFilters"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DateTimeHierarchyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeHierarchyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExplicitHierarchy:
    boto3_raw_data: "type_defs.ExplicitHierarchyTypeDef" = dataclasses.field()

    HierarchyId = field("HierarchyId")

    @cached_property
    def Columns(self):  # pragma: no cover
        return ColumnIdentifier.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def DrillDownFilters(self):  # pragma: no cover
        return DrillDownFilter.make_many(self.boto3_raw_data["DrillDownFilters"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ExplicitHierarchyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExplicitHierarchyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PredefinedHierarchy:
    boto3_raw_data: "type_defs.PredefinedHierarchyTypeDef" = dataclasses.field()

    HierarchyId = field("HierarchyId")

    @cached_property
    def Columns(self):  # pragma: no cover
        return ColumnIdentifier.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def DrillDownFilters(self):  # pragma: no cover
        return DrillDownFilter.make_many(self.boto3_raw_data["DrillDownFilters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PredefinedHierarchyTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PredefinedHierarchyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTopicRefreshScheduleRequest:
    boto3_raw_data: "type_defs.CreateTopicRefreshScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")
    DatasetArn = field("DatasetArn")
    RefreshSchedule = field("RefreshSchedule")
    DatasetName = field("DatasetName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateTopicRefreshScheduleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTopicRefreshScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTopicRefreshScheduleRequest:
    boto3_raw_data: "type_defs.UpdateTopicRefreshScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")
    DatasetId = field("DatasetId")
    RefreshSchedule = field("RefreshSchedule")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateTopicRefreshScheduleRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTopicRefreshScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ForecastConfiguration:
    boto3_raw_data: "type_defs.ForecastConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def ForecastProperties(self):  # pragma: no cover
        return TimeBasedForecastProperties.make_one(
            self.boto3_raw_data["ForecastProperties"]
        )

    @cached_property
    def Scenario(self):  # pragma: no cover
        return ForecastScenario.make_one(self.boto3_raw_data["Scenario"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ForecastConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ForecastConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisDataOptionsOutput:
    boto3_raw_data: "type_defs.AxisDataOptionsOutputTypeDef" = dataclasses.field()

    @cached_property
    def NumericAxisOptions(self):  # pragma: no cover
        return NumericAxisOptionsOutput.make_one(
            self.boto3_raw_data["NumericAxisOptions"]
        )

    @cached_property
    def DateAxisOptions(self):  # pragma: no cover
        return DateAxisOptions.make_one(self.boto3_raw_data["DateAxisOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AxisDataOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisDataOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisDataOptions:
    boto3_raw_data: "type_defs.AxisDataOptionsTypeDef" = dataclasses.field()

    @cached_property
    def NumericAxisOptions(self):  # pragma: no cover
        return NumericAxisOptions.make_one(self.boto3_raw_data["NumericAxisOptions"])

    @cached_property
    def DateAxisOptions(self):  # pragma: no cover
        return DateAxisOptions.make_one(self.boto3_raw_data["DateAxisOptions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AxisDataOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AxisDataOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ApplicationTheme:
    boto3_raw_data: "type_defs.ApplicationThemeTypeDef" = dataclasses.field()

    @cached_property
    def BrandColorPalette(self):  # pragma: no cover
        return BrandColorPalette.make_one(self.boto3_raw_data["BrandColorPalette"])

    @cached_property
    def BrandElementStyle(self):  # pragma: no cover
        return BrandElementStyle.make_one(self.boto3_raw_data["BrandElementStyle"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ApplicationThemeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ApplicationThemeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIRFilterOption:
    boto3_raw_data: "type_defs.TopicIRFilterOptionTypeDef" = dataclasses.field()

    FilterType = field("FilterType")
    FilterClass = field("FilterClass")

    @cached_property
    def OperandField(self):  # pragma: no cover
        return Identifier.make_one(self.boto3_raw_data["OperandField"])

    Function = field("Function")
    Constant = field("Constant")
    Inverse = field("Inverse")
    NullFilter = field("NullFilter")
    Aggregation = field("Aggregation")
    AggregationFunctionParameters = field("AggregationFunctionParameters")

    @cached_property
    def AggregationPartitionBy(self):  # pragma: no cover
        return AggregationPartitionBy.make_many(
            self.boto3_raw_data["AggregationPartitionBy"]
        )

    Range = field("Range")
    Inclusive = field("Inclusive")
    TimeGranularity = field("TimeGranularity")
    LastNextOffset = field("LastNextOffset")

    @cached_property
    def AggMetrics(self):  # pragma: no cover
        return FilterAggMetrics.make_many(self.boto3_raw_data["AggMetrics"])

    TopBottomLimit = field("TopBottomLimit")
    SortDirection = field("SortDirection")

    @cached_property
    def Anchor(self):  # pragma: no cover
        return Anchor.make_one(self.boto3_raw_data["Anchor"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicIRFilterOptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicIRFilterOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformOperationOutput:
    boto3_raw_data: "type_defs.TransformOperationOutputTypeDef" = dataclasses.field()

    @cached_property
    def ProjectOperation(self):  # pragma: no cover
        return ProjectOperationOutput.make_one(self.boto3_raw_data["ProjectOperation"])

    @cached_property
    def FilterOperation(self):  # pragma: no cover
        return FilterOperation.make_one(self.boto3_raw_data["FilterOperation"])

    @cached_property
    def CreateColumnsOperation(self):  # pragma: no cover
        return CreateColumnsOperationOutput.make_one(
            self.boto3_raw_data["CreateColumnsOperation"]
        )

    @cached_property
    def RenameColumnOperation(self):  # pragma: no cover
        return RenameColumnOperation.make_one(
            self.boto3_raw_data["RenameColumnOperation"]
        )

    @cached_property
    def CastColumnTypeOperation(self):  # pragma: no cover
        return CastColumnTypeOperation.make_one(
            self.boto3_raw_data["CastColumnTypeOperation"]
        )

    @cached_property
    def TagColumnOperation(self):  # pragma: no cover
        return TagColumnOperationOutput.make_one(
            self.boto3_raw_data["TagColumnOperation"]
        )

    @cached_property
    def UntagColumnOperation(self):  # pragma: no cover
        return UntagColumnOperationOutput.make_one(
            self.boto3_raw_data["UntagColumnOperation"]
        )

    @cached_property
    def OverrideDatasetParameterOperation(self):  # pragma: no cover
        return OverrideDatasetParameterOperationOutput.make_one(
            self.boto3_raw_data["OverrideDatasetParameterOperation"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransformOperationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransformOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SetParameterValueConfigurationOutput:
    boto3_raw_data: "type_defs.SetParameterValueConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    DestinationParameterName = field("DestinationParameterName")

    @cached_property
    def Value(self):  # pragma: no cover
        return DestinationParameterValueConfigurationOutput.make_one(
            self.boto3_raw_data["Value"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SetParameterValueConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SetParameterValueConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualPaletteOutput:
    boto3_raw_data: "type_defs.VisualPaletteOutputTypeDef" = dataclasses.field()

    ChartColor = field("ChartColor")

    @cached_property
    def ColorMap(self):  # pragma: no cover
        return DataPathColor.make_many(self.boto3_raw_data["ColorMap"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualPaletteOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualPaletteOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualPalette:
    boto3_raw_data: "type_defs.VisualPaletteTypeDef" = dataclasses.field()

    ChartColor = field("ChartColor")

    @cached_property
    def ColorMap(self):  # pragma: no cover
        return DataPathColor.make_many(self.boto3_raw_data["ColorMap"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VisualPaletteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VisualPaletteTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldCollapseStateOptionOutput:
    boto3_raw_data: "type_defs.PivotTableFieldCollapseStateOptionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Target(self):  # pragma: no cover
        return PivotTableFieldCollapseStateTargetOutput.make_one(
            self.boto3_raw_data["Target"]
        )

    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableFieldCollapseStateOptionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldCollapseStateOptionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldCollapseStateOption:
    boto3_raw_data: "type_defs.PivotTableFieldCollapseStateOptionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Target(self):  # pragma: no cover
        return PivotTableFieldCollapseStateTarget.make_one(
            self.boto3_raw_data["Target"]
        )

    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableFieldCollapseStateOptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldCollapseStateOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicCalculatedFieldOutput:
    boto3_raw_data: "type_defs.TopicCalculatedFieldOutputTypeDef" = dataclasses.field()

    CalculatedFieldName = field("CalculatedFieldName")
    Expression = field("Expression")
    CalculatedFieldDescription = field("CalculatedFieldDescription")
    CalculatedFieldSynonyms = field("CalculatedFieldSynonyms")
    IsIncludedInTopic = field("IsIncludedInTopic")
    DisableIndexing = field("DisableIndexing")
    ColumnDataRole = field("ColumnDataRole")
    TimeGranularity = field("TimeGranularity")

    @cached_property
    def DefaultFormatting(self):  # pragma: no cover
        return DefaultFormatting.make_one(self.boto3_raw_data["DefaultFormatting"])

    Aggregation = field("Aggregation")

    @cached_property
    def ComparativeOrder(self):  # pragma: no cover
        return ComparativeOrderOutput.make_one(self.boto3_raw_data["ComparativeOrder"])

    @cached_property
    def SemanticType(self):  # pragma: no cover
        return SemanticTypeOutput.make_one(self.boto3_raw_data["SemanticType"])

    AllowedAggregations = field("AllowedAggregations")
    NotAllowedAggregations = field("NotAllowedAggregations")
    NeverAggregateInFilter = field("NeverAggregateInFilter")

    @cached_property
    def CellValueSynonyms(self):  # pragma: no cover
        return CellValueSynonymOutput.make_many(
            self.boto3_raw_data["CellValueSynonyms"]
        )

    NonAdditive = field("NonAdditive")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicCalculatedFieldOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicCalculatedFieldOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicCalculatedField:
    boto3_raw_data: "type_defs.TopicCalculatedFieldTypeDef" = dataclasses.field()

    CalculatedFieldName = field("CalculatedFieldName")
    Expression = field("Expression")
    CalculatedFieldDescription = field("CalculatedFieldDescription")
    CalculatedFieldSynonyms = field("CalculatedFieldSynonyms")
    IsIncludedInTopic = field("IsIncludedInTopic")
    DisableIndexing = field("DisableIndexing")
    ColumnDataRole = field("ColumnDataRole")
    TimeGranularity = field("TimeGranularity")

    @cached_property
    def DefaultFormatting(self):  # pragma: no cover
        return DefaultFormatting.make_one(self.boto3_raw_data["DefaultFormatting"])

    Aggregation = field("Aggregation")

    @cached_property
    def ComparativeOrder(self):  # pragma: no cover
        return ComparativeOrder.make_one(self.boto3_raw_data["ComparativeOrder"])

    @cached_property
    def SemanticType(self):  # pragma: no cover
        return SemanticType.make_one(self.boto3_raw_data["SemanticType"])

    AllowedAggregations = field("AllowedAggregations")
    NotAllowedAggregations = field("NotAllowedAggregations")
    NeverAggregateInFilter = field("NeverAggregateInFilter")

    @cached_property
    def CellValueSynonyms(self):  # pragma: no cover
        return CellValueSynonym.make_many(self.boto3_raw_data["CellValueSynonyms"])

    NonAdditive = field("NonAdditive")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicCalculatedFieldTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicCalculatedFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicColumnOutput:
    boto3_raw_data: "type_defs.TopicColumnOutputTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")
    ColumnFriendlyName = field("ColumnFriendlyName")
    ColumnDescription = field("ColumnDescription")
    ColumnSynonyms = field("ColumnSynonyms")
    ColumnDataRole = field("ColumnDataRole")
    Aggregation = field("Aggregation")
    IsIncludedInTopic = field("IsIncludedInTopic")
    DisableIndexing = field("DisableIndexing")

    @cached_property
    def ComparativeOrder(self):  # pragma: no cover
        return ComparativeOrderOutput.make_one(self.boto3_raw_data["ComparativeOrder"])

    @cached_property
    def SemanticType(self):  # pragma: no cover
        return SemanticTypeOutput.make_one(self.boto3_raw_data["SemanticType"])

    TimeGranularity = field("TimeGranularity")
    AllowedAggregations = field("AllowedAggregations")
    NotAllowedAggregations = field("NotAllowedAggregations")

    @cached_property
    def DefaultFormatting(self):  # pragma: no cover
        return DefaultFormatting.make_one(self.boto3_raw_data["DefaultFormatting"])

    NeverAggregateInFilter = field("NeverAggregateInFilter")

    @cached_property
    def CellValueSynonyms(self):  # pragma: no cover
        return CellValueSynonymOutput.make_many(
            self.boto3_raw_data["CellValueSynonyms"]
        )

    NonAdditive = field("NonAdditive")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicColumnOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicColumnOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicColumn:
    boto3_raw_data: "type_defs.TopicColumnTypeDef" = dataclasses.field()

    ColumnName = field("ColumnName")
    ColumnFriendlyName = field("ColumnFriendlyName")
    ColumnDescription = field("ColumnDescription")
    ColumnSynonyms = field("ColumnSynonyms")
    ColumnDataRole = field("ColumnDataRole")
    Aggregation = field("Aggregation")
    IsIncludedInTopic = field("IsIncludedInTopic")
    DisableIndexing = field("DisableIndexing")

    @cached_property
    def ComparativeOrder(self):  # pragma: no cover
        return ComparativeOrder.make_one(self.boto3_raw_data["ComparativeOrder"])

    @cached_property
    def SemanticType(self):  # pragma: no cover
        return SemanticType.make_one(self.boto3_raw_data["SemanticType"])

    TimeGranularity = field("TimeGranularity")
    AllowedAggregations = field("AllowedAggregations")
    NotAllowedAggregations = field("NotAllowedAggregations")

    @cached_property
    def DefaultFormatting(self):  # pragma: no cover
        return DefaultFormatting.make_one(self.boto3_raw_data["DefaultFormatting"])

    NeverAggregateInFilter = field("NeverAggregateInFilter")

    @cached_property
    def CellValueSynonyms(self):  # pragma: no cover
        return CellValueSynonym.make_many(self.boto3_raw_data["CellValueSynonyms"])

    NonAdditive = field("NonAdditive")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicColumnTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicColumnTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContributionAnalysisTimeRangesOutput:
    boto3_raw_data: "type_defs.ContributionAnalysisTimeRangesOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StartRange(self):  # pragma: no cover
        return TopicIRFilterOptionOutput.make_one(self.boto3_raw_data["StartRange"])

    @cached_property
    def EndRange(self):  # pragma: no cover
        return TopicIRFilterOptionOutput.make_one(self.boto3_raw_data["EndRange"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ContributionAnalysisTimeRangesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContributionAnalysisTimeRangesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ChartAxisLabelOptionsOutput:
    boto3_raw_data: "type_defs.ChartAxisLabelOptionsOutputTypeDef" = dataclasses.field()

    Visibility = field("Visibility")
    SortIconVisibility = field("SortIconVisibility")

    @cached_property
    def AxisLabelOptions(self):  # pragma: no cover
        return AxisLabelOptions.make_many(self.boto3_raw_data["AxisLabelOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ChartAxisLabelOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ChartAxisLabelOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ChartAxisLabelOptions:
    boto3_raw_data: "type_defs.ChartAxisLabelOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")
    SortIconVisibility = field("SortIconVisibility")

    @cached_property
    def AxisLabelOptions(self):  # pragma: no cover
        return AxisLabelOptions.make_many(self.boto3_raw_data["AxisLabelOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ChartAxisLabelOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ChartAxisLabelOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisTickLabelOptions:
    boto3_raw_data: "type_defs.AxisTickLabelOptionsTypeDef" = dataclasses.field()

    @cached_property
    def LabelOptions(self):  # pragma: no cover
        return LabelOptions.make_one(self.boto3_raw_data["LabelOptions"])

    RotationAngle = field("RotationAngle")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AxisTickLabelOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisTickLabelOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimePickerControlDisplayOptions:
    boto3_raw_data: "type_defs.DateTimePickerControlDisplayOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TitleOptions(self):  # pragma: no cover
        return LabelOptions.make_one(self.boto3_raw_data["TitleOptions"])

    DateTimeFormat = field("DateTimeFormat")

    @cached_property
    def InfoIconLabelOptions(self):  # pragma: no cover
        return SheetControlInfoIconLabelOptions.make_one(
            self.boto3_raw_data["InfoIconLabelOptions"]
        )

    HelperTextVisibility = field("HelperTextVisibility")
    DateIconVisibility = field("DateIconVisibility")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DateTimePickerControlDisplayOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimePickerControlDisplayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DropDownControlDisplayOptions:
    boto3_raw_data: "type_defs.DropDownControlDisplayOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SelectAllOptions(self):  # pragma: no cover
        return ListControlSelectAllOptions.make_one(
            self.boto3_raw_data["SelectAllOptions"]
        )

    @cached_property
    def TitleOptions(self):  # pragma: no cover
        return LabelOptions.make_one(self.boto3_raw_data["TitleOptions"])

    @cached_property
    def InfoIconLabelOptions(self):  # pragma: no cover
        return SheetControlInfoIconLabelOptions.make_one(
            self.boto3_raw_data["InfoIconLabelOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DropDownControlDisplayOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DropDownControlDisplayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LegendOptions:
    boto3_raw_data: "type_defs.LegendOptionsTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @cached_property
    def Title(self):  # pragma: no cover
        return LabelOptions.make_one(self.boto3_raw_data["Title"])

    Position = field("Position")
    Width = field("Width")
    Height = field("Height")

    @cached_property
    def ValueFontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["ValueFontConfiguration"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LegendOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LegendOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListControlDisplayOptions:
    boto3_raw_data: "type_defs.ListControlDisplayOptionsTypeDef" = dataclasses.field()

    @cached_property
    def SearchOptions(self):  # pragma: no cover
        return ListControlSearchOptions.make_one(self.boto3_raw_data["SearchOptions"])

    @cached_property
    def SelectAllOptions(self):  # pragma: no cover
        return ListControlSelectAllOptions.make_one(
            self.boto3_raw_data["SelectAllOptions"]
        )

    @cached_property
    def TitleOptions(self):  # pragma: no cover
        return LabelOptions.make_one(self.boto3_raw_data["TitleOptions"])

    @cached_property
    def InfoIconLabelOptions(self):  # pragma: no cover
        return SheetControlInfoIconLabelOptions.make_one(
            self.boto3_raw_data["InfoIconLabelOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListControlDisplayOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListControlDisplayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RelativeDateTimeControlDisplayOptions:
    boto3_raw_data: "type_defs.RelativeDateTimeControlDisplayOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TitleOptions(self):  # pragma: no cover
        return LabelOptions.make_one(self.boto3_raw_data["TitleOptions"])

    DateTimeFormat = field("DateTimeFormat")

    @cached_property
    def InfoIconLabelOptions(self):  # pragma: no cover
        return SheetControlInfoIconLabelOptions.make_one(
            self.boto3_raw_data["InfoIconLabelOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RelativeDateTimeControlDisplayOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RelativeDateTimeControlDisplayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SliderControlDisplayOptions:
    boto3_raw_data: "type_defs.SliderControlDisplayOptionsTypeDef" = dataclasses.field()

    @cached_property
    def TitleOptions(self):  # pragma: no cover
        return LabelOptions.make_one(self.boto3_raw_data["TitleOptions"])

    @cached_property
    def InfoIconLabelOptions(self):  # pragma: no cover
        return SheetControlInfoIconLabelOptions.make_one(
            self.boto3_raw_data["InfoIconLabelOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SliderControlDisplayOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SliderControlDisplayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextAreaControlDisplayOptions:
    boto3_raw_data: "type_defs.TextAreaControlDisplayOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TitleOptions(self):  # pragma: no cover
        return LabelOptions.make_one(self.boto3_raw_data["TitleOptions"])

    @cached_property
    def PlaceholderOptions(self):  # pragma: no cover
        return TextControlPlaceholderOptions.make_one(
            self.boto3_raw_data["PlaceholderOptions"]
        )

    @cached_property
    def InfoIconLabelOptions(self):  # pragma: no cover
        return SheetControlInfoIconLabelOptions.make_one(
            self.boto3_raw_data["InfoIconLabelOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TextAreaControlDisplayOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextAreaControlDisplayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextFieldControlDisplayOptions:
    boto3_raw_data: "type_defs.TextFieldControlDisplayOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TitleOptions(self):  # pragma: no cover
        return LabelOptions.make_one(self.boto3_raw_data["TitleOptions"])

    @cached_property
    def PlaceholderOptions(self):  # pragma: no cover
        return TextControlPlaceholderOptions.make_one(
            self.boto3_raw_data["PlaceholderOptions"]
        )

    @cached_property
    def InfoIconLabelOptions(self):  # pragma: no cover
        return SheetControlInfoIconLabelOptions.make_one(
            self.boto3_raw_data["InfoIconLabelOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TextFieldControlDisplayOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextFieldControlDisplayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PanelConfiguration:
    boto3_raw_data: "type_defs.PanelConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Title(self):  # pragma: no cover
        return PanelTitleOptions.make_one(self.boto3_raw_data["Title"])

    BorderVisibility = field("BorderVisibility")
    BorderThickness = field("BorderThickness")
    BorderStyle = field("BorderStyle")
    BorderColor = field("BorderColor")
    GutterVisibility = field("GutterVisibility")
    GutterSpacing = field("GutterSpacing")
    BackgroundVisibility = field("BackgroundVisibility")
    BackgroundColor = field("BackgroundColor")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PanelConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PanelConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldLinkContentConfiguration:
    boto3_raw_data: "type_defs.TableFieldLinkContentConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CustomTextContent(self):  # pragma: no cover
        return TableFieldCustomTextContent.make_one(
            self.boto3_raw_data["CustomTextContent"]
        )

    @cached_property
    def CustomIconContent(self):  # pragma: no cover
        return TableFieldCustomIconContent.make_one(
            self.boto3_raw_data["CustomIconContent"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TableFieldLinkContentConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldLinkContentConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPointStyleOptionsOutput:
    boto3_raw_data: "type_defs.GeospatialPointStyleOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    SelectedPointStyle = field("SelectedPointStyle")

    @cached_property
    def ClusterMarkerConfiguration(self):  # pragma: no cover
        return ClusterMarkerConfiguration.make_one(
            self.boto3_raw_data["ClusterMarkerConfiguration"]
        )

    @cached_property
    def HeatmapConfiguration(self):  # pragma: no cover
        return GeospatialHeatmapConfigurationOutput.make_one(
            self.boto3_raw_data["HeatmapConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GeospatialPointStyleOptionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPointStyleOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPointStyleOptions:
    boto3_raw_data: "type_defs.GeospatialPointStyleOptionsTypeDef" = dataclasses.field()

    SelectedPointStyle = field("SelectedPointStyle")

    @cached_property
    def ClusterMarkerConfiguration(self):  # pragma: no cover
        return ClusterMarkerConfiguration.make_one(
            self.boto3_raw_data["ClusterMarkerConfiguration"]
        )

    @cached_property
    def HeatmapConfiguration(self):  # pragma: no cover
        return GeospatialHeatmapConfiguration.make_one(
            self.boto3_raw_data["HeatmapConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPointStyleOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPointStyleOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialColorOutput:
    boto3_raw_data: "type_defs.GeospatialColorOutputTypeDef" = dataclasses.field()

    @cached_property
    def Solid(self):  # pragma: no cover
        return GeospatialSolidColor.make_one(self.boto3_raw_data["Solid"])

    @cached_property
    def Gradient(self):  # pragma: no cover
        return GeospatialGradientColorOutput.make_one(self.boto3_raw_data["Gradient"])

    @cached_property
    def Categorical(self):  # pragma: no cover
        return GeospatialCategoricalColorOutput.make_one(
            self.boto3_raw_data["Categorical"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialColorOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialColorOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialColor:
    boto3_raw_data: "type_defs.GeospatialColorTypeDef" = dataclasses.field()

    @cached_property
    def Solid(self):  # pragma: no cover
        return GeospatialSolidColor.make_one(self.boto3_raw_data["Solid"])

    @cached_property
    def Gradient(self):  # pragma: no cover
        return GeospatialGradientColor.make_one(self.boto3_raw_data["Gradient"])

    @cached_property
    def Categorical(self):  # pragma: no cover
        return GeospatialCategoricalColor.make_one(self.boto3_raw_data["Categorical"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GeospatialColorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GeospatialColorTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableCellStyle:
    boto3_raw_data: "type_defs.TableCellStyleTypeDef" = dataclasses.field()

    Visibility = field("Visibility")

    @cached_property
    def FontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["FontConfiguration"])

    TextWrap = field("TextWrap")
    HorizontalTextAlignment = field("HorizontalTextAlignment")
    VerticalTextAlignment = field("VerticalTextAlignment")
    BackgroundColor = field("BackgroundColor")
    Height = field("Height")

    @cached_property
    def Border(self):  # pragma: no cover
        return GlobalTableBorderOptions.make_one(self.boto3_raw_data["Border"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TableCellStyleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TableCellStyleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingColorOutput:
    boto3_raw_data: "type_defs.ConditionalFormattingColorOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Solid(self):  # pragma: no cover
        return ConditionalFormattingSolidColor.make_one(self.boto3_raw_data["Solid"])

    @cached_property
    def Gradient(self):  # pragma: no cover
        return ConditionalFormattingGradientColorOutput.make_one(
            self.boto3_raw_data["Gradient"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ConditionalFormattingColorOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingColorOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConditionalFormattingColor:
    boto3_raw_data: "type_defs.ConditionalFormattingColorTypeDef" = dataclasses.field()

    @cached_property
    def Solid(self):  # pragma: no cover
        return ConditionalFormattingSolidColor.make_one(self.boto3_raw_data["Solid"])

    @cached_property
    def Gradient(self):  # pragma: no cover
        return ConditionalFormattingGradientColor.make_one(
            self.boto3_raw_data["Gradient"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConditionalFormattingColorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConditionalFormattingColorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultInteractiveLayoutConfiguration:
    boto3_raw_data: "type_defs.DefaultInteractiveLayoutConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Grid(self):  # pragma: no cover
        return DefaultGridLayoutConfiguration.make_one(self.boto3_raw_data["Grid"])

    @cached_property
    def FreeForm(self):  # pragma: no cover
        return DefaultFreeFormLayoutConfiguration.make_one(
            self.boto3_raw_data["FreeForm"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultInteractiveLayoutConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultInteractiveLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetControlLayoutConfigurationOutput:
    boto3_raw_data: "type_defs.SheetControlLayoutConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GridLayout(self):  # pragma: no cover
        return GridLayoutConfigurationOutput.make_one(self.boto3_raw_data["GridLayout"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SheetControlLayoutConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetControlLayoutConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetControlLayoutConfiguration:
    boto3_raw_data: "type_defs.SheetControlLayoutConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GridLayout(self):  # pragma: no cover
        return GridLayoutConfiguration.make_one(self.boto3_raw_data["GridLayout"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SheetControlLayoutConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetControlLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LogoSetConfiguration:
    boto3_raw_data: "type_defs.LogoSetConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Primary(self):  # pragma: no cover
        return ImageSetConfiguration.make_one(self.boto3_raw_data["Primary"])

    @cached_property
    def Favicon(self):  # pragma: no cover
        return ImageSetConfiguration.make_one(self.boto3_raw_data["Favicon"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LogoSetConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LogoSetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LogoSet:
    boto3_raw_data: "type_defs.LogoSetTypeDef" = dataclasses.field()

    @cached_property
    def Primary(self):  # pragma: no cover
        return ImageSet.make_one(self.boto3_raw_data["Primary"])

    @cached_property
    def Favicon(self):  # pragma: no cover
        return ImageSet.make_one(self.boto3_raw_data["Favicon"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LogoSetTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LogoSetTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSetRefreshProperties:
    boto3_raw_data: "type_defs.DataSetRefreshPropertiesTypeDef" = dataclasses.field()

    @cached_property
    def RefreshConfiguration(self):  # pragma: no cover
        return RefreshConfiguration.make_one(
            self.boto3_raw_data["RefreshConfiguration"]
        )

    @cached_property
    def FailureConfiguration(self):  # pragma: no cover
        return RefreshFailureConfiguration.make_one(
            self.boto3_raw_data["FailureConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSetRefreshPropertiesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSetRefreshPropertiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SeriesItem:
    boto3_raw_data: "type_defs.SeriesItemTypeDef" = dataclasses.field()

    @cached_property
    def FieldSeriesItem(self):  # pragma: no cover
        return FieldSeriesItem.make_one(self.boto3_raw_data["FieldSeriesItem"])

    @cached_property
    def DataFieldSeriesItem(self):  # pragma: no cover
        return DataFieldSeriesItem.make_one(self.boto3_raw_data["DataFieldSeriesItem"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SeriesItemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SeriesItemTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThemeConfigurationOutput:
    boto3_raw_data: "type_defs.ThemeConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def DataColorPalette(self):  # pragma: no cover
        return DataColorPaletteOutput.make_one(self.boto3_raw_data["DataColorPalette"])

    @cached_property
    def UIColorPalette(self):  # pragma: no cover
        return UIColorPalette.make_one(self.boto3_raw_data["UIColorPalette"])

    @cached_property
    def Sheet(self):  # pragma: no cover
        return SheetStyle.make_one(self.boto3_raw_data["Sheet"])

    @cached_property
    def Typography(self):  # pragma: no cover
        return TypographyOutput.make_one(self.boto3_raw_data["Typography"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ThemeConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThemeConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThemeConfiguration:
    boto3_raw_data: "type_defs.ThemeConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def DataColorPalette(self):  # pragma: no cover
        return DataColorPalette.make_one(self.boto3_raw_data["DataColorPalette"])

    @cached_property
    def UIColorPalette(self):  # pragma: no cover
        return UIColorPalette.make_one(self.boto3_raw_data["UIColorPalette"])

    @cached_property
    def Sheet(self):  # pragma: no cover
        return SheetStyle.make_one(self.boto3_raw_data["Sheet"])

    @cached_property
    def Typography(self):  # pragma: no cover
        return Typography.make_one(self.boto3_raw_data["Typography"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ThemeConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThemeConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComparisonFormatConfiguration:
    boto3_raw_data: "type_defs.ComparisonFormatConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NumberDisplayFormatConfiguration(self):  # pragma: no cover
        return NumberDisplayFormatConfiguration.make_one(
            self.boto3_raw_data["NumberDisplayFormatConfiguration"]
        )

    @cached_property
    def PercentageDisplayFormatConfiguration(self):  # pragma: no cover
        return PercentageDisplayFormatConfiguration.make_one(
            self.boto3_raw_data["PercentageDisplayFormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ComparisonFormatConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComparisonFormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericFormatConfiguration:
    boto3_raw_data: "type_defs.NumericFormatConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def NumberDisplayFormatConfiguration(self):  # pragma: no cover
        return NumberDisplayFormatConfiguration.make_one(
            self.boto3_raw_data["NumberDisplayFormatConfiguration"]
        )

    @cached_property
    def CurrencyDisplayFormatConfiguration(self):  # pragma: no cover
        return CurrencyDisplayFormatConfiguration.make_one(
            self.boto3_raw_data["CurrencyDisplayFormatConfiguration"]
        )

    @cached_property
    def PercentageDisplayFormatConfiguration(self):  # pragma: no cover
        return PercentageDisplayFormatConfiguration.make_one(
            self.boto3_raw_data["PercentageDisplayFormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericFormatConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericFormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AggregationSortConfiguration:
    boto3_raw_data: "type_defs.AggregationSortConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    SortDirection = field("SortDirection")

    @cached_property
    def AggregationFunction(self):  # pragma: no cover
        return AggregationFunction.make_one(self.boto3_raw_data["AggregationFunction"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AggregationSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AggregationSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnSort:
    boto3_raw_data: "type_defs.ColumnSortTypeDef" = dataclasses.field()

    @cached_property
    def SortBy(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["SortBy"])

    Direction = field("Direction")

    @cached_property
    def AggregationFunction(self):  # pragma: no cover
        return AggregationFunction.make_one(self.boto3_raw_data["AggregationFunction"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnSortTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ColumnSortTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnTooltipItem:
    boto3_raw_data: "type_defs.ColumnTooltipItemTypeDef" = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    Label = field("Label")
    Visibility = field("Visibility")

    @cached_property
    def Aggregation(self):  # pragma: no cover
        return AggregationFunction.make_one(self.boto3_raw_data["Aggregation"])

    TooltipTarget = field("TooltipTarget")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnTooltipItemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnTooltipItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReferenceLineDynamicDataConfiguration:
    boto3_raw_data: "type_defs.ReferenceLineDynamicDataConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def Calculation(self):  # pragma: no cover
        return NumericalAggregationFunction.make_one(self.boto3_raw_data["Calculation"])

    @cached_property
    def MeasureAggregationFunction(self):  # pragma: no cover
        return AggregationFunction.make_one(
            self.boto3_raw_data["MeasureAggregationFunction"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReferenceLineDynamicDataConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReferenceLineDynamicDataConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicFilterOutput:
    boto3_raw_data: "type_defs.TopicFilterOutputTypeDef" = dataclasses.field()

    FilterName = field("FilterName")
    OperandFieldName = field("OperandFieldName")
    FilterDescription = field("FilterDescription")
    FilterClass = field("FilterClass")
    FilterSynonyms = field("FilterSynonyms")
    FilterType = field("FilterType")

    @cached_property
    def CategoryFilter(self):  # pragma: no cover
        return TopicCategoryFilterOutput.make_one(self.boto3_raw_data["CategoryFilter"])

    @cached_property
    def NumericEqualityFilter(self):  # pragma: no cover
        return TopicNumericEqualityFilter.make_one(
            self.boto3_raw_data["NumericEqualityFilter"]
        )

    @cached_property
    def NumericRangeFilter(self):  # pragma: no cover
        return TopicNumericRangeFilter.make_one(
            self.boto3_raw_data["NumericRangeFilter"]
        )

    @cached_property
    def DateRangeFilter(self):  # pragma: no cover
        return TopicDateRangeFilter.make_one(self.boto3_raw_data["DateRangeFilter"])

    @cached_property
    def RelativeDateFilter(self):  # pragma: no cover
        return TopicRelativeDateFilter.make_one(
            self.boto3_raw_data["RelativeDateFilter"]
        )

    @cached_property
    def NullFilter(self):  # pragma: no cover
        return TopicNullFilter.make_one(self.boto3_raw_data["NullFilter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicFilterOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicFilter:
    boto3_raw_data: "type_defs.TopicFilterTypeDef" = dataclasses.field()

    FilterName = field("FilterName")
    OperandFieldName = field("OperandFieldName")
    FilterDescription = field("FilterDescription")
    FilterClass = field("FilterClass")
    FilterSynonyms = field("FilterSynonyms")
    FilterType = field("FilterType")

    @cached_property
    def CategoryFilter(self):  # pragma: no cover
        return TopicCategoryFilter.make_one(self.boto3_raw_data["CategoryFilter"])

    @cached_property
    def NumericEqualityFilter(self):  # pragma: no cover
        return TopicNumericEqualityFilter.make_one(
            self.boto3_raw_data["NumericEqualityFilter"]
        )

    @cached_property
    def NumericRangeFilter(self):  # pragma: no cover
        return TopicNumericRangeFilter.make_one(
            self.boto3_raw_data["NumericRangeFilter"]
        )

    @cached_property
    def DateRangeFilter(self):  # pragma: no cover
        return TopicDateRangeFilter.make_one(self.boto3_raw_data["DateRangeFilter"])

    @cached_property
    def RelativeDateFilter(self):  # pragma: no cover
        return TopicRelativeDateFilter.make_one(
            self.boto3_raw_data["RelativeDateFilter"]
        )

    @cached_property
    def NullFilter(self):  # pragma: no cover
        return TopicNullFilter.make_one(self.boto3_raw_data["NullFilter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicFilterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeRefreshScheduleResponse:
    boto3_raw_data: "type_defs.DescribeRefreshScheduleResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RefreshSchedule(self):  # pragma: no cover
        return RefreshScheduleOutput.make_one(self.boto3_raw_data["RefreshSchedule"])

    Status = field("Status")
    RequestId = field("RequestId")
    Arn = field("Arn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeRefreshScheduleResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeRefreshScheduleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListRefreshSchedulesResponse:
    boto3_raw_data: "type_defs.ListRefreshSchedulesResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RefreshSchedules(self):  # pragma: no cover
        return RefreshScheduleOutput.make_many(self.boto3_raw_data["RefreshSchedules"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListRefreshSchedulesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListRefreshSchedulesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotJobResultFileGroup:
    boto3_raw_data: "type_defs.SnapshotJobResultFileGroupTypeDef" = dataclasses.field()

    @cached_property
    def Files(self):  # pragma: no cover
        return SnapshotFileOutput.make_many(self.boto3_raw_data["Files"])

    @cached_property
    def S3Results(self):  # pragma: no cover
        return SnapshotJobS3Result.make_many(self.boto3_raw_data["S3Results"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotJobResultFileGroupTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotJobResultFileGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PhysicalTable:
    boto3_raw_data: "type_defs.PhysicalTableTypeDef" = dataclasses.field()

    RelationalTable = field("RelationalTable")
    CustomSql = field("CustomSql")
    S3Source = field("S3Source")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PhysicalTableTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PhysicalTableTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultSectionBasedLayoutConfiguration:
    boto3_raw_data: "type_defs.DefaultSectionBasedLayoutConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CanvasSizeOptions(self):  # pragma: no cover
        return SectionBasedLayoutCanvasSizeOptions.make_one(
            self.boto3_raw_data["CanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultSectionBasedLayoutConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultSectionBasedLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormLayoutConfigurationOutput:
    boto3_raw_data: "type_defs.FreeFormLayoutConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Elements(self):  # pragma: no cover
        return FreeFormLayoutElementOutput.make_many(self.boto3_raw_data["Elements"])

    @cached_property
    def CanvasSizeOptions(self):  # pragma: no cover
        return FreeFormLayoutCanvasSizeOptions.make_one(
            self.boto3_raw_data["CanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FreeFormLayoutConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormLayoutConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormSectionLayoutConfigurationOutput:
    boto3_raw_data: "type_defs.FreeFormSectionLayoutConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Elements(self):  # pragma: no cover
        return FreeFormLayoutElementOutput.make_many(self.boto3_raw_data["Elements"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FreeFormSectionLayoutConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormSectionLayoutConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormLayoutConfiguration:
    boto3_raw_data: "type_defs.FreeFormLayoutConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Elements(self):  # pragma: no cover
        return FreeFormLayoutElement.make_many(self.boto3_raw_data["Elements"])

    @cached_property
    def CanvasSizeOptions(self):  # pragma: no cover
        return FreeFormLayoutCanvasSizeOptions.make_one(
            self.boto3_raw_data["CanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FreeFormLayoutConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FreeFormSectionLayoutConfiguration:
    boto3_raw_data: "type_defs.FreeFormSectionLayoutConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Elements(self):  # pragma: no cover
        return FreeFormLayoutElement.make_many(self.boto3_raw_data["Elements"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FreeFormSectionLayoutConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FreeFormSectionLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotConfigurationOutput:
    boto3_raw_data: "type_defs.SnapshotConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def FileGroups(self):  # pragma: no cover
        return SnapshotFileGroupOutput.make_many(self.boto3_raw_data["FileGroups"])

    @cached_property
    def DestinationConfiguration(self):  # pragma: no cover
        return SnapshotDestinationConfigurationOutput.make_one(
            self.boto3_raw_data["DestinationConfiguration"]
        )

    @cached_property
    def Parameters(self):  # pragma: no cover
        return ParametersOutput.make_one(self.boto3_raw_data["Parameters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotConfiguration:
    boto3_raw_data: "type_defs.SnapshotConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FileGroups(self):  # pragma: no cover
        return SnapshotFileGroup.make_many(self.boto3_raw_data["FileGroups"])

    @cached_property
    def DestinationConfiguration(self):  # pragma: no cover
        return SnapshotDestinationConfiguration.make_one(
            self.boto3_raw_data["DestinationConfiguration"]
        )

    @cached_property
    def Parameters(self):  # pragma: no cover
        return Parameters.make_one(self.boto3_raw_data["Parameters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SnapshotConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StaticFile:
    boto3_raw_data: "type_defs.StaticFileTypeDef" = dataclasses.field()

    @cached_property
    def ImageStaticFile(self):  # pragma: no cover
        return ImageStaticFile.make_one(self.boto3_raw_data["ImageStaticFile"])

    @cached_property
    def SpatialStaticFile(self):  # pragma: no cover
        return SpatialStaticFile.make_one(self.boto3_raw_data["SpatialStaticFile"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StaticFileTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StaticFileTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterDeclarationOutput:
    boto3_raw_data: "type_defs.ParameterDeclarationOutputTypeDef" = dataclasses.field()

    @cached_property
    def StringParameterDeclaration(self):  # pragma: no cover
        return StringParameterDeclarationOutput.make_one(
            self.boto3_raw_data["StringParameterDeclaration"]
        )

    @cached_property
    def DecimalParameterDeclaration(self):  # pragma: no cover
        return DecimalParameterDeclarationOutput.make_one(
            self.boto3_raw_data["DecimalParameterDeclaration"]
        )

    @cached_property
    def IntegerParameterDeclaration(self):  # pragma: no cover
        return IntegerParameterDeclarationOutput.make_one(
            self.boto3_raw_data["IntegerParameterDeclaration"]
        )

    @cached_property
    def DateTimeParameterDeclaration(self):  # pragma: no cover
        return DateTimeParameterDeclarationOutput.make_one(
            self.boto3_raw_data["DateTimeParameterDeclaration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterDeclarationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterDeclarationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterDeclaration:
    boto3_raw_data: "type_defs.ParameterDeclarationTypeDef" = dataclasses.field()

    @cached_property
    def StringParameterDeclaration(self):  # pragma: no cover
        return StringParameterDeclaration.make_one(
            self.boto3_raw_data["StringParameterDeclaration"]
        )

    @cached_property
    def DecimalParameterDeclaration(self):  # pragma: no cover
        return DecimalParameterDeclaration.make_one(
            self.boto3_raw_data["DecimalParameterDeclaration"]
        )

    @cached_property
    def IntegerParameterDeclaration(self):  # pragma: no cover
        return IntegerParameterDeclaration.make_one(
            self.boto3_raw_data["IntegerParameterDeclaration"]
        )

    @cached_property
    def DateTimeParameterDeclaration(self):  # pragma: no cover
        return DateTimeParameterDeclaration.make_one(
            self.boto3_raw_data["DateTimeParameterDeclaration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterDeclarationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterDeclarationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnHierarchyOutput:
    boto3_raw_data: "type_defs.ColumnHierarchyOutputTypeDef" = dataclasses.field()

    @cached_property
    def ExplicitHierarchy(self):  # pragma: no cover
        return ExplicitHierarchyOutput.make_one(
            self.boto3_raw_data["ExplicitHierarchy"]
        )

    @cached_property
    def DateTimeHierarchy(self):  # pragma: no cover
        return DateTimeHierarchyOutput.make_one(
            self.boto3_raw_data["DateTimeHierarchy"]
        )

    @cached_property
    def PredefinedHierarchy(self):  # pragma: no cover
        return PredefinedHierarchyOutput.make_one(
            self.boto3_raw_data["PredefinedHierarchy"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ColumnHierarchyOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnHierarchyOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RegisteredUserEmbeddingExperienceConfiguration:
    boto3_raw_data: (
        "type_defs.RegisteredUserEmbeddingExperienceConfigurationTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Dashboard(self):  # pragma: no cover
        return RegisteredUserDashboardEmbeddingConfiguration.make_one(
            self.boto3_raw_data["Dashboard"]
        )

    @cached_property
    def QuickSightConsole(self):  # pragma: no cover
        return RegisteredUserQuickSightConsoleEmbeddingConfiguration.make_one(
            self.boto3_raw_data["QuickSightConsole"]
        )

    @cached_property
    def QSearchBar(self):  # pragma: no cover
        return RegisteredUserQSearchBarEmbeddingConfiguration.make_one(
            self.boto3_raw_data["QSearchBar"]
        )

    @cached_property
    def DashboardVisual(self):  # pragma: no cover
        return RegisteredUserDashboardVisualEmbeddingConfiguration.make_one(
            self.boto3_raw_data["DashboardVisual"]
        )

    @cached_property
    def GenerativeQnA(self):  # pragma: no cover
        return RegisteredUserGenerativeQnAEmbeddingConfiguration.make_one(
            self.boto3_raw_data["GenerativeQnA"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RegisteredUserEmbeddingExperienceConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RegisteredUserEmbeddingExperienceConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GenerateEmbedUrlForAnonymousUserRequest:
    boto3_raw_data: "type_defs.GenerateEmbedUrlForAnonymousUserRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    Namespace = field("Namespace")
    AuthorizedResourceArns = field("AuthorizedResourceArns")

    @cached_property
    def ExperienceConfiguration(self):  # pragma: no cover
        return AnonymousUserEmbeddingExperienceConfiguration.make_one(
            self.boto3_raw_data["ExperienceConfiguration"]
        )

    SessionLifetimeInMinutes = field("SessionLifetimeInMinutes")

    @cached_property
    def SessionTags(self):  # pragma: no cover
        return SessionTag.make_many(self.boto3_raw_data["SessionTags"])

    AllowedDomains = field("AllowedDomains")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GenerateEmbedUrlForAnonymousUserRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GenerateEmbedUrlForAnonymousUserRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSourceOverrideParametersOutput:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDataSourceOverrideParametersOutputTypeDef"
    ) = dataclasses.field()

    DataSourceId = field("DataSourceId")
    Name = field("Name")

    @cached_property
    def DataSourceParameters(self):  # pragma: no cover
        return DataSourceParametersOutput.make_one(
            self.boto3_raw_data["DataSourceParameters"]
        )

    @cached_property
    def VpcConnectionProperties(self):  # pragma: no cover
        return VpcConnectionProperties.make_one(
            self.boto3_raw_data["VpcConnectionProperties"]
        )

    @cached_property
    def SslProperties(self):  # pragma: no cover
        return SslProperties.make_one(self.boto3_raw_data["SslProperties"])

    @cached_property
    def Credentials(self):  # pragma: no cover
        return AssetBundleImportJobDataSourceCredentials.make_one(
            self.boto3_raw_data["Credentials"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSourceOverrideParametersOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDataSourceOverrideParametersOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSource:
    boto3_raw_data: "type_defs.DataSourceTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSourceId = field("DataSourceId")
    Name = field("Name")
    Type = field("Type")
    Status = field("Status")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @cached_property
    def DataSourceParameters(self):  # pragma: no cover
        return DataSourceParametersOutput.make_one(
            self.boto3_raw_data["DataSourceParameters"]
        )

    @cached_property
    def AlternateDataSourceParameters(self):  # pragma: no cover
        return DataSourceParametersOutput.make_many(
            self.boto3_raw_data["AlternateDataSourceParameters"]
        )

    @cached_property
    def VpcConnectionProperties(self):  # pragma: no cover
        return VpcConnectionProperties.make_one(
            self.boto3_raw_data["VpcConnectionProperties"]
        )

    @cached_property
    def SslProperties(self):  # pragma: no cover
        return SslProperties.make_one(self.boto3_raw_data["SslProperties"])

    @cached_property
    def ErrorInfo(self):  # pragma: no cover
        return DataSourceErrorInfo.make_one(self.boto3_raw_data["ErrorInfo"])

    SecretArn = field("SecretArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataSourceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SetParameterValueConfiguration:
    boto3_raw_data: "type_defs.SetParameterValueConfigurationTypeDef" = (
        dataclasses.field()
    )

    DestinationParameterName = field("DestinationParameterName")

    @cached_property
    def Value(self):  # pragma: no cover
        return DestinationParameterValueConfiguration.make_one(
            self.boto3_raw_data["Value"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SetParameterValueConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SetParameterValueConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnHierarchy:
    boto3_raw_data: "type_defs.ColumnHierarchyTypeDef" = dataclasses.field()

    @cached_property
    def ExplicitHierarchy(self):  # pragma: no cover
        return ExplicitHierarchy.make_one(self.boto3_raw_data["ExplicitHierarchy"])

    @cached_property
    def DateTimeHierarchy(self):  # pragma: no cover
        return DateTimeHierarchy.make_one(self.boto3_raw_data["DateTimeHierarchy"])

    @cached_property
    def PredefinedHierarchy(self):  # pragma: no cover
        return PredefinedHierarchy.make_one(self.boto3_raw_data["PredefinedHierarchy"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ColumnHierarchyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ColumnHierarchyTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LogicalTableOutput:
    boto3_raw_data: "type_defs.LogicalTableOutputTypeDef" = dataclasses.field()

    Alias = field("Alias")

    @cached_property
    def Source(self):  # pragma: no cover
        return LogicalTableSource.make_one(self.boto3_raw_data["Source"])

    @cached_property
    def DataTransforms(self):  # pragma: no cover
        return TransformOperationOutput.make_many(self.boto3_raw_data["DataTransforms"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LogicalTableOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LogicalTableOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomActionSetParametersOperationOutput:
    boto3_raw_data: "type_defs.CustomActionSetParametersOperationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ParameterValueConfigurations(self):  # pragma: no cover
        return SetParameterValueConfigurationOutput.make_many(
            self.boto3_raw_data["ParameterValueConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CustomActionSetParametersOperationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomActionSetParametersOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldOptionsOutput:
    boto3_raw_data: "type_defs.PivotTableFieldOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SelectedFieldOptions(self):  # pragma: no cover
        return PivotTableFieldOption.make_many(
            self.boto3_raw_data["SelectedFieldOptions"]
        )

    @cached_property
    def DataPathOptions(self):  # pragma: no cover
        return PivotTableDataPathOptionOutput.make_many(
            self.boto3_raw_data["DataPathOptions"]
        )

    @cached_property
    def CollapseStateOptions(self):  # pragma: no cover
        return PivotTableFieldCollapseStateOptionOutput.make_many(
            self.boto3_raw_data["CollapseStateOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableFieldOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldOptions:
    boto3_raw_data: "type_defs.PivotTableFieldOptionsTypeDef" = dataclasses.field()

    @cached_property
    def SelectedFieldOptions(self):  # pragma: no cover
        return PivotTableFieldOption.make_many(
            self.boto3_raw_data["SelectedFieldOptions"]
        )

    @cached_property
    def DataPathOptions(self):  # pragma: no cover
        return PivotTableDataPathOption.make_many(
            self.boto3_raw_data["DataPathOptions"]
        )

    @cached_property
    def CollapseStateOptions(self):  # pragma: no cover
        return PivotTableFieldCollapseStateOption.make_many(
            self.boto3_raw_data["CollapseStateOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableFieldOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIRContributionAnalysisOutput:
    boto3_raw_data: "type_defs.TopicIRContributionAnalysisOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Factors(self):  # pragma: no cover
        return ContributionAnalysisFactor.make_many(self.boto3_raw_data["Factors"])

    @cached_property
    def TimeRanges(self):  # pragma: no cover
        return ContributionAnalysisTimeRangesOutput.make_one(
            self.boto3_raw_data["TimeRanges"]
        )

    Direction = field("Direction")
    SortType = field("SortType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TopicIRContributionAnalysisOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicIRContributionAnalysisOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisDisplayOptionsOutput:
    boto3_raw_data: "type_defs.AxisDisplayOptionsOutputTypeDef" = dataclasses.field()

    @cached_property
    def TickLabelOptions(self):  # pragma: no cover
        return AxisTickLabelOptions.make_one(self.boto3_raw_data["TickLabelOptions"])

    AxisLineVisibility = field("AxisLineVisibility")
    GridLineVisibility = field("GridLineVisibility")

    @cached_property
    def DataOptions(self):  # pragma: no cover
        return AxisDataOptionsOutput.make_one(self.boto3_raw_data["DataOptions"])

    @cached_property
    def ScrollbarOptions(self):  # pragma: no cover
        return ScrollBarOptions.make_one(self.boto3_raw_data["ScrollbarOptions"])

    AxisOffset = field("AxisOffset")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AxisDisplayOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisDisplayOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AxisDisplayOptions:
    boto3_raw_data: "type_defs.AxisDisplayOptionsTypeDef" = dataclasses.field()

    @cached_property
    def TickLabelOptions(self):  # pragma: no cover
        return AxisTickLabelOptions.make_one(self.boto3_raw_data["TickLabelOptions"])

    AxisLineVisibility = field("AxisLineVisibility")
    GridLineVisibility = field("GridLineVisibility")

    @cached_property
    def DataOptions(self):  # pragma: no cover
        return AxisDataOptions.make_one(self.boto3_raw_data["DataOptions"])

    @cached_property
    def ScrollbarOptions(self):  # pragma: no cover
        return ScrollBarOptions.make_one(self.boto3_raw_data["ScrollbarOptions"])

    AxisOffset = field("AxisOffset")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AxisDisplayOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AxisDisplayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultDateTimePickerControlOptions:
    boto3_raw_data: "type_defs.DefaultDateTimePickerControlOptionsTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return DateTimePickerControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultDateTimePickerControlOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultDateTimePickerControlOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterDateTimePickerControl:
    boto3_raw_data: "type_defs.FilterDateTimePickerControlTypeDef" = dataclasses.field()

    FilterControlId = field("FilterControlId")
    Title = field("Title")
    SourceFilterId = field("SourceFilterId")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return DateTimePickerControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    Type = field("Type")
    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterDateTimePickerControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterDateTimePickerControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterDateTimePickerControl:
    boto3_raw_data: "type_defs.ParameterDateTimePickerControlTypeDef" = (
        dataclasses.field()
    )

    ParameterControlId = field("ParameterControlId")
    Title = field("Title")
    SourceParameterName = field("SourceParameterName")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return DateTimePickerControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ParameterDateTimePickerControlTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterDateTimePickerControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFilterDropDownControlOptionsOutput:
    boto3_raw_data: "type_defs.DefaultFilterDropDownControlOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return DropDownControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return FilterSelectableValuesOutput.make_one(
            self.boto3_raw_data["SelectableValues"]
        )

    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultFilterDropDownControlOptionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFilterDropDownControlOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFilterDropDownControlOptions:
    boto3_raw_data: "type_defs.DefaultFilterDropDownControlOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return DropDownControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return FilterSelectableValues.make_one(self.boto3_raw_data["SelectableValues"])

    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultFilterDropDownControlOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFilterDropDownControlOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterDropDownControlOutput:
    boto3_raw_data: "type_defs.FilterDropDownControlOutputTypeDef" = dataclasses.field()

    FilterControlId = field("FilterControlId")
    Title = field("Title")
    SourceFilterId = field("SourceFilterId")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return DropDownControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return FilterSelectableValuesOutput.make_one(
            self.boto3_raw_data["SelectableValues"]
        )

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfigurationOutput.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterDropDownControlOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterDropDownControlOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterDropDownControl:
    boto3_raw_data: "type_defs.FilterDropDownControlTypeDef" = dataclasses.field()

    FilterControlId = field("FilterControlId")
    Title = field("Title")
    SourceFilterId = field("SourceFilterId")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return DropDownControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return FilterSelectableValues.make_one(self.boto3_raw_data["SelectableValues"])

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfiguration.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterDropDownControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterDropDownControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterDropDownControlOutput:
    boto3_raw_data: "type_defs.ParameterDropDownControlOutputTypeDef" = (
        dataclasses.field()
    )

    ParameterControlId = field("ParameterControlId")
    Title = field("Title")
    SourceParameterName = field("SourceParameterName")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return DropDownControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return ParameterSelectableValuesOutput.make_one(
            self.boto3_raw_data["SelectableValues"]
        )

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfigurationOutput.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ParameterDropDownControlOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterDropDownControlOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterDropDownControl:
    boto3_raw_data: "type_defs.ParameterDropDownControlTypeDef" = dataclasses.field()

    ParameterControlId = field("ParameterControlId")
    Title = field("Title")
    SourceParameterName = field("SourceParameterName")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return DropDownControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return ParameterSelectableValues.make_one(
            self.boto3_raw_data["SelectableValues"]
        )

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfiguration.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterDropDownControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterDropDownControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFilterListControlOptionsOutput:
    boto3_raw_data: "type_defs.DefaultFilterListControlOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return ListControlDisplayOptions.make_one(self.boto3_raw_data["DisplayOptions"])

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return FilterSelectableValuesOutput.make_one(
            self.boto3_raw_data["SelectableValues"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultFilterListControlOptionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFilterListControlOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFilterListControlOptions:
    boto3_raw_data: "type_defs.DefaultFilterListControlOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return ListControlDisplayOptions.make_one(self.boto3_raw_data["DisplayOptions"])

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return FilterSelectableValues.make_one(self.boto3_raw_data["SelectableValues"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DefaultFilterListControlOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFilterListControlOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterListControlOutput:
    boto3_raw_data: "type_defs.FilterListControlOutputTypeDef" = dataclasses.field()

    FilterControlId = field("FilterControlId")
    Title = field("Title")
    SourceFilterId = field("SourceFilterId")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return ListControlDisplayOptions.make_one(self.boto3_raw_data["DisplayOptions"])

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return FilterSelectableValuesOutput.make_one(
            self.boto3_raw_data["SelectableValues"]
        )

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfigurationOutput.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterListControlOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterListControlOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterListControl:
    boto3_raw_data: "type_defs.FilterListControlTypeDef" = dataclasses.field()

    FilterControlId = field("FilterControlId")
    Title = field("Title")
    SourceFilterId = field("SourceFilterId")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return ListControlDisplayOptions.make_one(self.boto3_raw_data["DisplayOptions"])

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return FilterSelectableValues.make_one(self.boto3_raw_data["SelectableValues"])

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfiguration.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterListControlTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterListControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterListControlOutput:
    boto3_raw_data: "type_defs.ParameterListControlOutputTypeDef" = dataclasses.field()

    ParameterControlId = field("ParameterControlId")
    Title = field("Title")
    SourceParameterName = field("SourceParameterName")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return ListControlDisplayOptions.make_one(self.boto3_raw_data["DisplayOptions"])

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return ParameterSelectableValuesOutput.make_one(
            self.boto3_raw_data["SelectableValues"]
        )

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfigurationOutput.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterListControlOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterListControlOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterListControl:
    boto3_raw_data: "type_defs.ParameterListControlTypeDef" = dataclasses.field()

    ParameterControlId = field("ParameterControlId")
    Title = field("Title")
    SourceParameterName = field("SourceParameterName")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return ListControlDisplayOptions.make_one(self.boto3_raw_data["DisplayOptions"])

    Type = field("Type")

    @cached_property
    def SelectableValues(self):  # pragma: no cover
        return ParameterSelectableValues.make_one(
            self.boto3_raw_data["SelectableValues"]
        )

    @cached_property
    def CascadingControlConfiguration(self):  # pragma: no cover
        return CascadingControlConfiguration.make_one(
            self.boto3_raw_data["CascadingControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterListControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterListControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultRelativeDateTimeControlOptions:
    boto3_raw_data: "type_defs.DefaultRelativeDateTimeControlOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return RelativeDateTimeControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultRelativeDateTimeControlOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultRelativeDateTimeControlOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterRelativeDateTimeControl:
    boto3_raw_data: "type_defs.FilterRelativeDateTimeControlTypeDef" = (
        dataclasses.field()
    )

    FilterControlId = field("FilterControlId")
    Title = field("Title")
    SourceFilterId = field("SourceFilterId")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return RelativeDateTimeControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    CommitMode = field("CommitMode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FilterRelativeDateTimeControlTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterRelativeDateTimeControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultSliderControlOptions:
    boto3_raw_data: "type_defs.DefaultSliderControlOptionsTypeDef" = dataclasses.field()

    MaximumValue = field("MaximumValue")
    MinimumValue = field("MinimumValue")
    StepSize = field("StepSize")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return SliderControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DefaultSliderControlOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultSliderControlOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterSliderControl:
    boto3_raw_data: "type_defs.FilterSliderControlTypeDef" = dataclasses.field()

    FilterControlId = field("FilterControlId")
    Title = field("Title")
    SourceFilterId = field("SourceFilterId")
    MaximumValue = field("MaximumValue")
    MinimumValue = field("MinimumValue")
    StepSize = field("StepSize")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return SliderControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterSliderControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterSliderControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterSliderControl:
    boto3_raw_data: "type_defs.ParameterSliderControlTypeDef" = dataclasses.field()

    ParameterControlId = field("ParameterControlId")
    Title = field("Title")
    SourceParameterName = field("SourceParameterName")
    MaximumValue = field("MaximumValue")
    MinimumValue = field("MinimumValue")
    StepSize = field("StepSize")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return SliderControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterSliderControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterSliderControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultTextAreaControlOptions:
    boto3_raw_data: "type_defs.DefaultTextAreaControlOptionsTypeDef" = (
        dataclasses.field()
    )

    Delimiter = field("Delimiter")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return TextAreaControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DefaultTextAreaControlOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultTextAreaControlOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterTextAreaControl:
    boto3_raw_data: "type_defs.FilterTextAreaControlTypeDef" = dataclasses.field()

    FilterControlId = field("FilterControlId")
    Title = field("Title")
    SourceFilterId = field("SourceFilterId")
    Delimiter = field("Delimiter")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return TextAreaControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterTextAreaControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterTextAreaControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterTextAreaControl:
    boto3_raw_data: "type_defs.ParameterTextAreaControlTypeDef" = dataclasses.field()

    ParameterControlId = field("ParameterControlId")
    Title = field("Title")
    SourceParameterName = field("SourceParameterName")
    Delimiter = field("Delimiter")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return TextAreaControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterTextAreaControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterTextAreaControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultTextFieldControlOptions:
    boto3_raw_data: "type_defs.DefaultTextFieldControlOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return TextFieldControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DefaultTextFieldControlOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultTextFieldControlOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterTextFieldControl:
    boto3_raw_data: "type_defs.FilterTextFieldControlTypeDef" = dataclasses.field()

    FilterControlId = field("FilterControlId")
    Title = field("Title")
    SourceFilterId = field("SourceFilterId")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return TextFieldControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterTextFieldControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterTextFieldControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterTextFieldControl:
    boto3_raw_data: "type_defs.ParameterTextFieldControlTypeDef" = dataclasses.field()

    ParameterControlId = field("ParameterControlId")
    Title = field("Title")
    SourceParameterName = field("SourceParameterName")

    @cached_property
    def DisplayOptions(self):  # pragma: no cover
        return TextFieldControlDisplayOptions.make_one(
            self.boto3_raw_data["DisplayOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterTextFieldControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterTextFieldControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SmallMultiplesOptions:
    boto3_raw_data: "type_defs.SmallMultiplesOptionsTypeDef" = dataclasses.field()

    MaxVisibleRows = field("MaxVisibleRows")
    MaxVisibleColumns = field("MaxVisibleColumns")

    @cached_property
    def PanelConfiguration(self):  # pragma: no cover
        return PanelConfiguration.make_one(self.boto3_raw_data["PanelConfiguration"])

    @cached_property
    def XAxis(self):  # pragma: no cover
        return SmallMultiplesAxisProperties.make_one(self.boto3_raw_data["XAxis"])

    @cached_property
    def YAxis(self):  # pragma: no cover
        return SmallMultiplesAxisProperties.make_one(self.boto3_raw_data["YAxis"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SmallMultiplesOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SmallMultiplesOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldLinkConfiguration:
    boto3_raw_data: "type_defs.TableFieldLinkConfigurationTypeDef" = dataclasses.field()

    Target = field("Target")

    @cached_property
    def Content(self):  # pragma: no cover
        return TableFieldLinkContentConfiguration.make_one(
            self.boto3_raw_data["Content"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableFieldLinkConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldLinkConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialCircleSymbolStyleOutput:
    boto3_raw_data: "type_defs.GeospatialCircleSymbolStyleOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FillColor(self):  # pragma: no cover
        return GeospatialColorOutput.make_one(self.boto3_raw_data["FillColor"])

    @cached_property
    def StrokeColor(self):  # pragma: no cover
        return GeospatialColorOutput.make_one(self.boto3_raw_data["StrokeColor"])

    @cached_property
    def StrokeWidth(self):  # pragma: no cover
        return GeospatialLineWidth.make_one(self.boto3_raw_data["StrokeWidth"])

    @cached_property
    def CircleRadius(self):  # pragma: no cover
        return GeospatialCircleRadius.make_one(self.boto3_raw_data["CircleRadius"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GeospatialCircleSymbolStyleOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialCircleSymbolStyleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLineSymbolStyleOutput:
    boto3_raw_data: "type_defs.GeospatialLineSymbolStyleOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FillColor(self):  # pragma: no cover
        return GeospatialColorOutput.make_one(self.boto3_raw_data["FillColor"])

    @cached_property
    def LineWidth(self):  # pragma: no cover
        return GeospatialLineWidth.make_one(self.boto3_raw_data["LineWidth"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialLineSymbolStyleOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLineSymbolStyleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPolygonSymbolStyleOutput:
    boto3_raw_data: "type_defs.GeospatialPolygonSymbolStyleOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FillColor(self):  # pragma: no cover
        return GeospatialColorOutput.make_one(self.boto3_raw_data["FillColor"])

    @cached_property
    def StrokeColor(self):  # pragma: no cover
        return GeospatialColorOutput.make_one(self.boto3_raw_data["StrokeColor"])

    @cached_property
    def StrokeWidth(self):  # pragma: no cover
        return GeospatialLineWidth.make_one(self.boto3_raw_data["StrokeWidth"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GeospatialPolygonSymbolStyleOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPolygonSymbolStyleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialCircleSymbolStyle:
    boto3_raw_data: "type_defs.GeospatialCircleSymbolStyleTypeDef" = dataclasses.field()

    @cached_property
    def FillColor(self):  # pragma: no cover
        return GeospatialColor.make_one(self.boto3_raw_data["FillColor"])

    @cached_property
    def StrokeColor(self):  # pragma: no cover
        return GeospatialColor.make_one(self.boto3_raw_data["StrokeColor"])

    @cached_property
    def StrokeWidth(self):  # pragma: no cover
        return GeospatialLineWidth.make_one(self.boto3_raw_data["StrokeWidth"])

    @cached_property
    def CircleRadius(self):  # pragma: no cover
        return GeospatialCircleRadius.make_one(self.boto3_raw_data["CircleRadius"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialCircleSymbolStyleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialCircleSymbolStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLineSymbolStyle:
    boto3_raw_data: "type_defs.GeospatialLineSymbolStyleTypeDef" = dataclasses.field()

    @cached_property
    def FillColor(self):  # pragma: no cover
        return GeospatialColor.make_one(self.boto3_raw_data["FillColor"])

    @cached_property
    def LineWidth(self):  # pragma: no cover
        return GeospatialLineWidth.make_one(self.boto3_raw_data["LineWidth"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLineSymbolStyleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLineSymbolStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPolygonSymbolStyle:
    boto3_raw_data: "type_defs.GeospatialPolygonSymbolStyleTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FillColor(self):  # pragma: no cover
        return GeospatialColor.make_one(self.boto3_raw_data["FillColor"])

    @cached_property
    def StrokeColor(self):  # pragma: no cover
        return GeospatialColor.make_one(self.boto3_raw_data["StrokeColor"])

    @cached_property
    def StrokeWidth(self):  # pragma: no cover
        return GeospatialLineWidth.make_one(self.boto3_raw_data["StrokeWidth"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPolygonSymbolStyleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPolygonSymbolStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableOptionsOutput:
    boto3_raw_data: "type_defs.PivotTableOptionsOutputTypeDef" = dataclasses.field()

    MetricPlacement = field("MetricPlacement")
    SingleMetricVisibility = field("SingleMetricVisibility")
    ColumnNamesVisibility = field("ColumnNamesVisibility")
    ToggleButtonsVisibility = field("ToggleButtonsVisibility")

    @cached_property
    def ColumnHeaderStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["ColumnHeaderStyle"])

    @cached_property
    def RowHeaderStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["RowHeaderStyle"])

    @cached_property
    def CellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["CellStyle"])

    @cached_property
    def RowFieldNamesStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["RowFieldNamesStyle"])

    @cached_property
    def RowAlternateColorOptions(self):  # pragma: no cover
        return RowAlternateColorOptionsOutput.make_one(
            self.boto3_raw_data["RowAlternateColorOptions"]
        )

    CollapsedRowDimensionsVisibility = field("CollapsedRowDimensionsVisibility")
    RowsLayout = field("RowsLayout")

    @cached_property
    def RowsLabelOptions(self):  # pragma: no cover
        return PivotTableRowsLabelOptions.make_one(
            self.boto3_raw_data["RowsLabelOptions"]
        )

    DefaultCellWidth = field("DefaultCellWidth")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableOptions:
    boto3_raw_data: "type_defs.PivotTableOptionsTypeDef" = dataclasses.field()

    MetricPlacement = field("MetricPlacement")
    SingleMetricVisibility = field("SingleMetricVisibility")
    ColumnNamesVisibility = field("ColumnNamesVisibility")
    ToggleButtonsVisibility = field("ToggleButtonsVisibility")

    @cached_property
    def ColumnHeaderStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["ColumnHeaderStyle"])

    @cached_property
    def RowHeaderStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["RowHeaderStyle"])

    @cached_property
    def CellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["CellStyle"])

    @cached_property
    def RowFieldNamesStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["RowFieldNamesStyle"])

    @cached_property
    def RowAlternateColorOptions(self):  # pragma: no cover
        return RowAlternateColorOptions.make_one(
            self.boto3_raw_data["RowAlternateColorOptions"]
        )

    CollapsedRowDimensionsVisibility = field("CollapsedRowDimensionsVisibility")
    RowsLayout = field("RowsLayout")

    @cached_property
    def RowsLabelOptions(self):  # pragma: no cover
        return PivotTableRowsLabelOptions.make_one(
            self.boto3_raw_data["RowsLabelOptions"]
        )

    DefaultCellWidth = field("DefaultCellWidth")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PivotTableOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTotalOptionsOutput:
    boto3_raw_data: "type_defs.PivotTotalOptionsOutputTypeDef" = dataclasses.field()

    TotalsVisibility = field("TotalsVisibility")
    Placement = field("Placement")
    ScrollStatus = field("ScrollStatus")
    CustomLabel = field("CustomLabel")

    @cached_property
    def TotalCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["TotalCellStyle"])

    @cached_property
    def ValueCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["ValueCellStyle"])

    @cached_property
    def MetricHeaderCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["MetricHeaderCellStyle"])

    @cached_property
    def TotalAggregationOptions(self):  # pragma: no cover
        return TotalAggregationOption.make_many(
            self.boto3_raw_data["TotalAggregationOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTotalOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTotalOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTotalOptions:
    boto3_raw_data: "type_defs.PivotTotalOptionsTypeDef" = dataclasses.field()

    TotalsVisibility = field("TotalsVisibility")
    Placement = field("Placement")
    ScrollStatus = field("ScrollStatus")
    CustomLabel = field("CustomLabel")

    @cached_property
    def TotalCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["TotalCellStyle"])

    @cached_property
    def ValueCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["ValueCellStyle"])

    @cached_property
    def MetricHeaderCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["MetricHeaderCellStyle"])

    @cached_property
    def TotalAggregationOptions(self):  # pragma: no cover
        return TotalAggregationOption.make_many(
            self.boto3_raw_data["TotalAggregationOptions"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PivotTotalOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTotalOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubtotalOptionsOutput:
    boto3_raw_data: "type_defs.SubtotalOptionsOutputTypeDef" = dataclasses.field()

    TotalsVisibility = field("TotalsVisibility")
    CustomLabel = field("CustomLabel")
    FieldLevel = field("FieldLevel")

    @cached_property
    def FieldLevelOptions(self):  # pragma: no cover
        return PivotTableFieldSubtotalOptions.make_many(
            self.boto3_raw_data["FieldLevelOptions"]
        )

    @cached_property
    def TotalCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["TotalCellStyle"])

    @cached_property
    def ValueCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["ValueCellStyle"])

    @cached_property
    def MetricHeaderCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["MetricHeaderCellStyle"])

    @cached_property
    def StyleTargets(self):  # pragma: no cover
        return TableStyleTarget.make_many(self.boto3_raw_data["StyleTargets"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SubtotalOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SubtotalOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SubtotalOptions:
    boto3_raw_data: "type_defs.SubtotalOptionsTypeDef" = dataclasses.field()

    TotalsVisibility = field("TotalsVisibility")
    CustomLabel = field("CustomLabel")
    FieldLevel = field("FieldLevel")

    @cached_property
    def FieldLevelOptions(self):  # pragma: no cover
        return PivotTableFieldSubtotalOptions.make_many(
            self.boto3_raw_data["FieldLevelOptions"]
        )

    @cached_property
    def TotalCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["TotalCellStyle"])

    @cached_property
    def ValueCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["ValueCellStyle"])

    @cached_property
    def MetricHeaderCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["MetricHeaderCellStyle"])

    @cached_property
    def StyleTargets(self):  # pragma: no cover
        return TableStyleTarget.make_many(self.boto3_raw_data["StyleTargets"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SubtotalOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SubtotalOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableOptionsOutput:
    boto3_raw_data: "type_defs.TableOptionsOutputTypeDef" = dataclasses.field()

    Orientation = field("Orientation")

    @cached_property
    def HeaderStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["HeaderStyle"])

    @cached_property
    def CellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["CellStyle"])

    @cached_property
    def RowAlternateColorOptions(self):  # pragma: no cover
        return RowAlternateColorOptionsOutput.make_one(
            self.boto3_raw_data["RowAlternateColorOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableOptions:
    boto3_raw_data: "type_defs.TableOptionsTypeDef" = dataclasses.field()

    Orientation = field("Orientation")

    @cached_property
    def HeaderStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["HeaderStyle"])

    @cached_property
    def CellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["CellStyle"])

    @cached_property
    def RowAlternateColorOptions(self):  # pragma: no cover
        return RowAlternateColorOptions.make_one(
            self.boto3_raw_data["RowAlternateColorOptions"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TableOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TableOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TotalOptionsOutput:
    boto3_raw_data: "type_defs.TotalOptionsOutputTypeDef" = dataclasses.field()

    TotalsVisibility = field("TotalsVisibility")
    Placement = field("Placement")
    ScrollStatus = field("ScrollStatus")
    CustomLabel = field("CustomLabel")

    @cached_property
    def TotalCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["TotalCellStyle"])

    @cached_property
    def TotalAggregationOptions(self):  # pragma: no cover
        return TotalAggregationOption.make_many(
            self.boto3_raw_data["TotalAggregationOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TotalOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TotalOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TotalOptions:
    boto3_raw_data: "type_defs.TotalOptionsTypeDef" = dataclasses.field()

    TotalsVisibility = field("TotalsVisibility")
    Placement = field("Placement")
    ScrollStatus = field("ScrollStatus")
    CustomLabel = field("CustomLabel")

    @cached_property
    def TotalCellStyle(self):  # pragma: no cover
        return TableCellStyle.make_one(self.boto3_raw_data["TotalCellStyle"])

    @cached_property
    def TotalAggregationOptions(self):  # pragma: no cover
        return TotalAggregationOption.make_many(
            self.boto3_raw_data["TotalAggregationOptions"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TotalOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TotalOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartArcConditionalFormattingOutput:
    boto3_raw_data: "type_defs.GaugeChartArcConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ForegroundColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["ForegroundColor"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GaugeChartArcConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartArcConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartPrimaryValueConditionalFormattingOutput:
    boto3_raw_data: (
        "type_defs.GaugeChartPrimaryValueConditionalFormattingOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["TextColor"]
        )

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GaugeChartPrimaryValueConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GaugeChartPrimaryValueConditionalFormattingOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIActualValueConditionalFormattingOutput:
    boto3_raw_data: "type_defs.KPIActualValueConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["TextColor"]
        )

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.KPIActualValueConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIActualValueConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIComparisonValueConditionalFormattingOutput:
    boto3_raw_data: "type_defs.KPIComparisonValueConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["TextColor"]
        )

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.KPIComparisonValueConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIComparisonValueConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIPrimaryValueConditionalFormattingOutput:
    boto3_raw_data: "type_defs.KPIPrimaryValueConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["TextColor"]
        )

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.KPIPrimaryValueConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIPrimaryValueConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIProgressBarConditionalFormattingOutput:
    boto3_raw_data: "type_defs.KPIProgressBarConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ForegroundColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["ForegroundColor"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.KPIProgressBarConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIProgressBarConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ShapeConditionalFormatOutput:
    boto3_raw_data: "type_defs.ShapeConditionalFormatOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def BackgroundColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["BackgroundColor"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ShapeConditionalFormatOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ShapeConditionalFormatOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableRowConditionalFormattingOutput:
    boto3_raw_data: "type_defs.TableRowConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def BackgroundColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["BackgroundColor"]
        )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["TextColor"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TableRowConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableRowConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextConditionalFormatOutput:
    boto3_raw_data: "type_defs.TextConditionalFormatOutputTypeDef" = dataclasses.field()

    @cached_property
    def BackgroundColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["BackgroundColor"]
        )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColorOutput.make_one(
            self.boto3_raw_data["TextColor"]
        )

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TextConditionalFormatOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextConditionalFormatOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartArcConditionalFormatting:
    boto3_raw_data: "type_defs.GaugeChartArcConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ForegroundColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(
            self.boto3_raw_data["ForegroundColor"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GaugeChartArcConditionalFormattingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartArcConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartPrimaryValueConditionalFormatting:
    boto3_raw_data: "type_defs.GaugeChartPrimaryValueConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(self.boto3_raw_data["TextColor"])

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GaugeChartPrimaryValueConditionalFormattingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartPrimaryValueConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIActualValueConditionalFormatting:
    boto3_raw_data: "type_defs.KPIActualValueConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(self.boto3_raw_data["TextColor"])

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.KPIActualValueConditionalFormattingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIActualValueConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIComparisonValueConditionalFormatting:
    boto3_raw_data: "type_defs.KPIComparisonValueConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(self.boto3_raw_data["TextColor"])

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.KPIComparisonValueConditionalFormattingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIComparisonValueConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIPrimaryValueConditionalFormatting:
    boto3_raw_data: "type_defs.KPIPrimaryValueConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(self.boto3_raw_data["TextColor"])

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.KPIPrimaryValueConditionalFormattingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIPrimaryValueConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIProgressBarConditionalFormatting:
    boto3_raw_data: "type_defs.KPIProgressBarConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ForegroundColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(
            self.boto3_raw_data["ForegroundColor"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.KPIProgressBarConditionalFormattingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIProgressBarConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ShapeConditionalFormat:
    boto3_raw_data: "type_defs.ShapeConditionalFormatTypeDef" = dataclasses.field()

    @cached_property
    def BackgroundColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(
            self.boto3_raw_data["BackgroundColor"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ShapeConditionalFormatTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ShapeConditionalFormatTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableRowConditionalFormatting:
    boto3_raw_data: "type_defs.TableRowConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def BackgroundColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(
            self.boto3_raw_data["BackgroundColor"]
        )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(self.boto3_raw_data["TextColor"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TableRowConditionalFormattingTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableRowConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TextConditionalFormat:
    boto3_raw_data: "type_defs.TextConditionalFormatTypeDef" = dataclasses.field()

    @cached_property
    def BackgroundColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(
            self.boto3_raw_data["BackgroundColor"]
        )

    @cached_property
    def TextColor(self):  # pragma: no cover
        return ConditionalFormattingColor.make_one(self.boto3_raw_data["TextColor"])

    @cached_property
    def Icon(self):  # pragma: no cover
        return ConditionalFormattingIcon.make_one(self.boto3_raw_data["Icon"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TextConditionalFormatTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TextConditionalFormatTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetControlLayoutOutput:
    boto3_raw_data: "type_defs.SheetControlLayoutOutputTypeDef" = dataclasses.field()

    @cached_property
    def Configuration(self):  # pragma: no cover
        return SheetControlLayoutConfigurationOutput.make_one(
            self.boto3_raw_data["Configuration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SheetControlLayoutOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetControlLayoutOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetControlLayout:
    boto3_raw_data: "type_defs.SheetControlLayoutTypeDef" = dataclasses.field()

    @cached_property
    def Configuration(self):  # pragma: no cover
        return SheetControlLayoutConfiguration.make_one(
            self.boto3_raw_data["Configuration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SheetControlLayoutTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetControlLayoutTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LogoConfiguration:
    boto3_raw_data: "type_defs.LogoConfigurationTypeDef" = dataclasses.field()

    AltText = field("AltText")

    @cached_property
    def LogoSet(self):  # pragma: no cover
        return LogoSetConfiguration.make_one(self.boto3_raw_data["LogoSet"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LogoConfigurationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LogoConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Logo:
    boto3_raw_data: "type_defs.LogoTypeDef" = dataclasses.field()

    AltText = field("AltText")

    @cached_property
    def LogoSet(self):  # pragma: no cover
        return LogoSet.make_one(self.boto3_raw_data["LogoSet"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LogoTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LogoTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSetOverrideParameters:
    boto3_raw_data: "type_defs.AssetBundleImportJobDataSetOverrideParametersTypeDef" = (
        dataclasses.field()
    )

    DataSetId = field("DataSetId")
    Name = field("Name")

    @cached_property
    def DataSetRefreshProperties(self):  # pragma: no cover
        return DataSetRefreshProperties.make_one(
            self.boto3_raw_data["DataSetRefreshProperties"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSetOverrideParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobDataSetOverrideParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSetRefreshPropertiesResponse:
    boto3_raw_data: "type_defs.DescribeDataSetRefreshPropertiesResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def DataSetRefreshProperties(self):  # pragma: no cover
        return DataSetRefreshProperties.make_one(
            self.boto3_raw_data["DataSetRefreshProperties"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDataSetRefreshPropertiesResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSetRefreshPropertiesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PutDataSetRefreshPropertiesRequest:
    boto3_raw_data: "type_defs.PutDataSetRefreshPropertiesRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")

    @cached_property
    def DataSetRefreshProperties(self):  # pragma: no cover
        return DataSetRefreshProperties.make_one(
            self.boto3_raw_data["DataSetRefreshProperties"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PutDataSetRefreshPropertiesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PutDataSetRefreshPropertiesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThemeVersion:
    boto3_raw_data: "type_defs.ThemeVersionTypeDef" = dataclasses.field()

    VersionNumber = field("VersionNumber")
    Arn = field("Arn")
    Description = field("Description")
    BaseThemeId = field("BaseThemeId")
    CreatedTime = field("CreatedTime")

    @cached_property
    def Configuration(self):  # pragma: no cover
        return ThemeConfigurationOutput.make_one(self.boto3_raw_data["Configuration"])

    @cached_property
    def Errors(self):  # pragma: no cover
        return ThemeError.make_many(self.boto3_raw_data["Errors"])

    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ThemeVersionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ThemeVersionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComparisonConfiguration:
    boto3_raw_data: "type_defs.ComparisonConfigurationTypeDef" = dataclasses.field()

    ComparisonMethod = field("ComparisonMethod")

    @cached_property
    def ComparisonFormat(self):  # pragma: no cover
        return ComparisonFormatConfiguration.make_one(
            self.boto3_raw_data["ComparisonFormat"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComparisonConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComparisonConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateTimeFormatConfiguration:
    boto3_raw_data: "type_defs.DateTimeFormatConfigurationTypeDef" = dataclasses.field()

    DateTimeFormat = field("DateTimeFormat")

    @cached_property
    def NullValueFormatConfiguration(self):  # pragma: no cover
        return NullValueFormatConfiguration.make_one(
            self.boto3_raw_data["NullValueFormatConfiguration"]
        )

    @cached_property
    def NumericFormatConfiguration(self):  # pragma: no cover
        return NumericFormatConfiguration.make_one(
            self.boto3_raw_data["NumericFormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DateTimeFormatConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateTimeFormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumberFormatConfiguration:
    boto3_raw_data: "type_defs.NumberFormatConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return NumericFormatConfiguration.make_one(
            self.boto3_raw_data["FormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumberFormatConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumberFormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReferenceLineValueLabelConfiguration:
    boto3_raw_data: "type_defs.ReferenceLineValueLabelConfigurationTypeDef" = (
        dataclasses.field()
    )

    RelativePosition = field("RelativePosition")

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return NumericFormatConfiguration.make_one(
            self.boto3_raw_data["FormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ReferenceLineValueLabelConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReferenceLineValueLabelConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringFormatConfiguration:
    boto3_raw_data: "type_defs.StringFormatConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def NullValueFormatConfiguration(self):  # pragma: no cover
        return NullValueFormatConfiguration.make_one(
            self.boto3_raw_data["NullValueFormatConfiguration"]
        )

    @cached_property
    def NumericFormatConfiguration(self):  # pragma: no cover
        return NumericFormatConfiguration.make_one(
            self.boto3_raw_data["NumericFormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StringFormatConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringFormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionDynamicCategoryDimensionConfigurationOutput:
    boto3_raw_data: (
        "type_defs.BodySectionDynamicCategoryDimensionConfigurationOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    Limit = field("Limit")

    @cached_property
    def SortByMetrics(self):  # pragma: no cover
        return ColumnSort.make_many(self.boto3_raw_data["SortByMetrics"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BodySectionDynamicCategoryDimensionConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.BodySectionDynamicCategoryDimensionConfigurationOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionDynamicCategoryDimensionConfiguration:
    boto3_raw_data: (
        "type_defs.BodySectionDynamicCategoryDimensionConfigurationTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    Limit = field("Limit")

    @cached_property
    def SortByMetrics(self):  # pragma: no cover
        return ColumnSort.make_many(self.boto3_raw_data["SortByMetrics"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BodySectionDynamicCategoryDimensionConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.BodySectionDynamicCategoryDimensionConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionDynamicNumericDimensionConfigurationOutput:
    boto3_raw_data: (
        "type_defs.BodySectionDynamicNumericDimensionConfigurationOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    Limit = field("Limit")

    @cached_property
    def SortByMetrics(self):  # pragma: no cover
        return ColumnSort.make_many(self.boto3_raw_data["SortByMetrics"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BodySectionDynamicNumericDimensionConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.BodySectionDynamicNumericDimensionConfigurationOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionDynamicNumericDimensionConfiguration:
    boto3_raw_data: (
        "type_defs.BodySectionDynamicNumericDimensionConfigurationTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    Limit = field("Limit")

    @cached_property
    def SortByMetrics(self):  # pragma: no cover
        return ColumnSort.make_many(self.boto3_raw_data["SortByMetrics"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BodySectionDynamicNumericDimensionConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.BodySectionDynamicNumericDimensionConfigurationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FieldSortOptions:
    boto3_raw_data: "type_defs.FieldSortOptionsTypeDef" = dataclasses.field()

    @cached_property
    def FieldSort(self):  # pragma: no cover
        return FieldSort.make_one(self.boto3_raw_data["FieldSort"])

    @cached_property
    def ColumnSort(self):  # pragma: no cover
        return ColumnSort.make_one(self.boto3_raw_data["ColumnSort"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FieldSortOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FieldSortOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableSortByOutput:
    boto3_raw_data: "type_defs.PivotTableSortByOutputTypeDef" = dataclasses.field()

    @cached_property
    def Field(self):  # pragma: no cover
        return FieldSort.make_one(self.boto3_raw_data["Field"])

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnSort.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def DataPath(self):  # pragma: no cover
        return DataPathSortOutput.make_one(self.boto3_raw_data["DataPath"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableSortByOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableSortByOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableSortBy:
    boto3_raw_data: "type_defs.PivotTableSortByTypeDef" = dataclasses.field()

    @cached_property
    def Field(self):  # pragma: no cover
        return FieldSort.make_one(self.boto3_raw_data["Field"])

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnSort.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def DataPath(self):  # pragma: no cover
        return DataPathSort.make_one(self.boto3_raw_data["DataPath"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PivotTableSortByTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableSortByTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TooltipItem:
    boto3_raw_data: "type_defs.TooltipItemTypeDef" = dataclasses.field()

    @cached_property
    def FieldTooltipItem(self):  # pragma: no cover
        return FieldTooltipItem.make_one(self.boto3_raw_data["FieldTooltipItem"])

    @cached_property
    def ColumnTooltipItem(self):  # pragma: no cover
        return ColumnTooltipItem.make_one(self.boto3_raw_data["ColumnTooltipItem"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TooltipItemTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TooltipItemTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReferenceLineDataConfiguration:
    boto3_raw_data: "type_defs.ReferenceLineDataConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StaticConfiguration(self):  # pragma: no cover
        return ReferenceLineStaticDataConfiguration.make_one(
            self.boto3_raw_data["StaticConfiguration"]
        )

    @cached_property
    def DynamicConfiguration(self):  # pragma: no cover
        return ReferenceLineDynamicDataConfiguration.make_one(
            self.boto3_raw_data["DynamicConfiguration"]
        )

    AxisBinding = field("AxisBinding")
    SeriesType = field("SeriesType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReferenceLineDataConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReferenceLineDataConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DatasetMetadataOutput:
    boto3_raw_data: "type_defs.DatasetMetadataOutputTypeDef" = dataclasses.field()

    DatasetArn = field("DatasetArn")
    DatasetName = field("DatasetName")
    DatasetDescription = field("DatasetDescription")

    @cached_property
    def DataAggregation(self):  # pragma: no cover
        return DataAggregation.make_one(self.boto3_raw_data["DataAggregation"])

    @cached_property
    def Filters(self):  # pragma: no cover
        return TopicFilterOutput.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def Columns(self):  # pragma: no cover
        return TopicColumnOutput.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def CalculatedFields(self):  # pragma: no cover
        return TopicCalculatedFieldOutput.make_many(
            self.boto3_raw_data["CalculatedFields"]
        )

    @cached_property
    def NamedEntities(self):  # pragma: no cover
        return TopicNamedEntityOutput.make_many(self.boto3_raw_data["NamedEntities"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DatasetMetadataOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DatasetMetadataOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DatasetMetadata:
    boto3_raw_data: "type_defs.DatasetMetadataTypeDef" = dataclasses.field()

    DatasetArn = field("DatasetArn")
    DatasetName = field("DatasetName")
    DatasetDescription = field("DatasetDescription")

    @cached_property
    def DataAggregation(self):  # pragma: no cover
        return DataAggregation.make_one(self.boto3_raw_data["DataAggregation"])

    @cached_property
    def Filters(self):  # pragma: no cover
        return TopicFilter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def Columns(self):  # pragma: no cover
        return TopicColumn.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def CalculatedFields(self):  # pragma: no cover
        return TopicCalculatedField.make_many(self.boto3_raw_data["CalculatedFields"])

    @cached_property
    def NamedEntities(self):  # pragma: no cover
        return TopicNamedEntity.make_many(self.boto3_raw_data["NamedEntities"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DatasetMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DatasetMetadataTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSourceParameters:
    boto3_raw_data: "type_defs.DataSourceParametersTypeDef" = dataclasses.field()

    @cached_property
    def AmazonElasticsearchParameters(self):  # pragma: no cover
        return AmazonElasticsearchParameters.make_one(
            self.boto3_raw_data["AmazonElasticsearchParameters"]
        )

    @cached_property
    def AthenaParameters(self):  # pragma: no cover
        return AthenaParameters.make_one(self.boto3_raw_data["AthenaParameters"])

    @cached_property
    def AuroraParameters(self):  # pragma: no cover
        return AuroraParameters.make_one(self.boto3_raw_data["AuroraParameters"])

    @cached_property
    def AuroraPostgreSqlParameters(self):  # pragma: no cover
        return AuroraPostgreSqlParameters.make_one(
            self.boto3_raw_data["AuroraPostgreSqlParameters"]
        )

    @cached_property
    def AwsIotAnalyticsParameters(self):  # pragma: no cover
        return AwsIotAnalyticsParameters.make_one(
            self.boto3_raw_data["AwsIotAnalyticsParameters"]
        )

    @cached_property
    def JiraParameters(self):  # pragma: no cover
        return JiraParameters.make_one(self.boto3_raw_data["JiraParameters"])

    @cached_property
    def MariaDbParameters(self):  # pragma: no cover
        return MariaDbParameters.make_one(self.boto3_raw_data["MariaDbParameters"])

    @cached_property
    def MySqlParameters(self):  # pragma: no cover
        return MySqlParameters.make_one(self.boto3_raw_data["MySqlParameters"])

    @cached_property
    def OracleParameters(self):  # pragma: no cover
        return OracleParameters.make_one(self.boto3_raw_data["OracleParameters"])

    @cached_property
    def PostgreSqlParameters(self):  # pragma: no cover
        return PostgreSqlParameters.make_one(
            self.boto3_raw_data["PostgreSqlParameters"]
        )

    @cached_property
    def PrestoParameters(self):  # pragma: no cover
        return PrestoParameters.make_one(self.boto3_raw_data["PrestoParameters"])

    @cached_property
    def RdsParameters(self):  # pragma: no cover
        return RdsParameters.make_one(self.boto3_raw_data["RdsParameters"])

    RedshiftParameters = field("RedshiftParameters")

    @cached_property
    def S3Parameters(self):  # pragma: no cover
        return S3Parameters.make_one(self.boto3_raw_data["S3Parameters"])

    @cached_property
    def ServiceNowParameters(self):  # pragma: no cover
        return ServiceNowParameters.make_one(
            self.boto3_raw_data["ServiceNowParameters"]
        )

    @cached_property
    def SnowflakeParameters(self):  # pragma: no cover
        return SnowflakeParameters.make_one(self.boto3_raw_data["SnowflakeParameters"])

    @cached_property
    def SparkParameters(self):  # pragma: no cover
        return SparkParameters.make_one(self.boto3_raw_data["SparkParameters"])

    @cached_property
    def SqlServerParameters(self):  # pragma: no cover
        return SqlServerParameters.make_one(self.boto3_raw_data["SqlServerParameters"])

    @cached_property
    def TeradataParameters(self):  # pragma: no cover
        return TeradataParameters.make_one(self.boto3_raw_data["TeradataParameters"])

    @cached_property
    def TwitterParameters(self):  # pragma: no cover
        return TwitterParameters.make_one(self.boto3_raw_data["TwitterParameters"])

    @cached_property
    def AmazonOpenSearchParameters(self):  # pragma: no cover
        return AmazonOpenSearchParameters.make_one(
            self.boto3_raw_data["AmazonOpenSearchParameters"]
        )

    @cached_property
    def ExasolParameters(self):  # pragma: no cover
        return ExasolParameters.make_one(self.boto3_raw_data["ExasolParameters"])

    @cached_property
    def DatabricksParameters(self):  # pragma: no cover
        return DatabricksParameters.make_one(
            self.boto3_raw_data["DatabricksParameters"]
        )

    @cached_property
    def StarburstParameters(self):  # pragma: no cover
        return StarburstParameters.make_one(self.boto3_raw_data["StarburstParameters"])

    @cached_property
    def TrinoParameters(self):  # pragma: no cover
        return TrinoParameters.make_one(self.boto3_raw_data["TrinoParameters"])

    @cached_property
    def BigQueryParameters(self):  # pragma: no cover
        return BigQueryParameters.make_one(self.boto3_raw_data["BigQueryParameters"])

    @cached_property
    def ImpalaParameters(self):  # pragma: no cover
        return ImpalaParameters.make_one(self.boto3_raw_data["ImpalaParameters"])

    @cached_property
    def CustomConnectionParameters(self):  # pragma: no cover
        return CustomConnectionParameters.make_one(
            self.boto3_raw_data["CustomConnectionParameters"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSourceParametersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSourceParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateRefreshScheduleRequest:
    boto3_raw_data: "type_defs.CreateRefreshScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    DataSetId = field("DataSetId")
    AwsAccountId = field("AwsAccountId")
    Schedule = field("Schedule")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateRefreshScheduleRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateRefreshScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateRefreshScheduleRequest:
    boto3_raw_data: "type_defs.UpdateRefreshScheduleRequestTypeDef" = (
        dataclasses.field()
    )

    DataSetId = field("DataSetId")
    AwsAccountId = field("AwsAccountId")
    Schedule = field("Schedule")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateRefreshScheduleRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateRefreshScheduleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnonymousUserSnapshotJobResult:
    boto3_raw_data: "type_defs.AnonymousUserSnapshotJobResultTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FileGroups(self):  # pragma: no cover
        return SnapshotJobResultFileGroup.make_many(self.boto3_raw_data["FileGroups"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AnonymousUserSnapshotJobResultTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnonymousUserSnapshotJobResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultPaginatedLayoutConfiguration:
    boto3_raw_data: "type_defs.DefaultPaginatedLayoutConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SectionBased(self):  # pragma: no cover
        return DefaultSectionBasedLayoutConfiguration.make_one(
            self.boto3_raw_data["SectionBased"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultPaginatedLayoutConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultPaginatedLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SectionLayoutConfigurationOutput:
    boto3_raw_data: "type_defs.SectionLayoutConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FreeFormLayout(self):  # pragma: no cover
        return FreeFormSectionLayoutConfigurationOutput.make_one(
            self.boto3_raw_data["FreeFormLayout"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SectionLayoutConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SectionLayoutConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SectionLayoutConfiguration:
    boto3_raw_data: "type_defs.SectionLayoutConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FreeFormLayout(self):  # pragma: no cover
        return FreeFormSectionLayoutConfiguration.make_one(
            self.boto3_raw_data["FreeFormLayout"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SectionLayoutConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SectionLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardSnapshotJobResponse:
    boto3_raw_data: "type_defs.DescribeDashboardSnapshotJobResponseTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    SnapshotJobId = field("SnapshotJobId")

    @cached_property
    def UserConfiguration(self):  # pragma: no cover
        return SnapshotUserConfigurationRedacted.make_one(
            self.boto3_raw_data["UserConfiguration"]
        )

    @cached_property
    def SnapshotConfiguration(self):  # pragma: no cover
        return SnapshotConfigurationOutput.make_one(
            self.boto3_raw_data["SnapshotConfiguration"]
        )

    Arn = field("Arn")
    JobStatus = field("JobStatus")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardSnapshotJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardSnapshotJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GenerateEmbedUrlForRegisteredUserRequest:
    boto3_raw_data: "type_defs.GenerateEmbedUrlForRegisteredUserRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    UserArn = field("UserArn")

    @cached_property
    def ExperienceConfiguration(self):  # pragma: no cover
        return RegisteredUserEmbeddingExperienceConfiguration.make_one(
            self.boto3_raw_data["ExperienceConfiguration"]
        )

    SessionLifetimeInMinutes = field("SessionLifetimeInMinutes")
    AllowedDomains = field("AllowedDomains")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GenerateEmbedUrlForRegisteredUserRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GenerateEmbedUrlForRegisteredUserRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GenerateEmbedUrlForRegisteredUserWithIdentityRequest:
    boto3_raw_data: (
        "type_defs.GenerateEmbedUrlForRegisteredUserWithIdentityRequestTypeDef"
    ) = dataclasses.field()

    AwsAccountId = field("AwsAccountId")

    @cached_property
    def ExperienceConfiguration(self):  # pragma: no cover
        return RegisteredUserEmbeddingExperienceConfiguration.make_one(
            self.boto3_raw_data["ExperienceConfiguration"]
        )

    SessionLifetimeInMinutes = field("SessionLifetimeInMinutes")
    AllowedDomains = field("AllowedDomains")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GenerateEmbedUrlForRegisteredUserWithIdentityRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.GenerateEmbedUrlForRegisteredUserWithIdentityRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSourceResponse:
    boto3_raw_data: "type_defs.DescribeDataSourceResponseTypeDef" = dataclasses.field()

    @cached_property
    def DataSource(self):  # pragma: no cover
        return DataSource.make_one(self.boto3_raw_data["DataSource"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDataSourceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSourceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListDataSourcesResponse:
    boto3_raw_data: "type_defs.ListDataSourcesResponseTypeDef" = dataclasses.field()

    @cached_property
    def DataSources(self):  # pragma: no cover
        return DataSource.make_many(self.boto3_raw_data["DataSources"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListDataSourcesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListDataSourcesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomActionSetParametersOperation:
    boto3_raw_data: "type_defs.CustomActionSetParametersOperationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ParameterValueConfigurations(self):  # pragma: no cover
        return SetParameterValueConfiguration.make_many(
            self.boto3_raw_data["ParameterValueConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CustomActionSetParametersOperationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomActionSetParametersOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DatasetParameter:
    boto3_raw_data: "type_defs.DatasetParameterTypeDef" = dataclasses.field()

    StringDatasetParameter = field("StringDatasetParameter")
    DecimalDatasetParameter = field("DecimalDatasetParameter")
    IntegerDatasetParameter = field("IntegerDatasetParameter")
    DateTimeDatasetParameter = field("DateTimeDatasetParameter")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DatasetParameterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DatasetParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TransformOperation:
    boto3_raw_data: "type_defs.TransformOperationTypeDef" = dataclasses.field()

    ProjectOperation = field("ProjectOperation")

    @cached_property
    def FilterOperation(self):  # pragma: no cover
        return FilterOperation.make_one(self.boto3_raw_data["FilterOperation"])

    CreateColumnsOperation = field("CreateColumnsOperation")

    @cached_property
    def RenameColumnOperation(self):  # pragma: no cover
        return RenameColumnOperation.make_one(
            self.boto3_raw_data["RenameColumnOperation"]
        )

    @cached_property
    def CastColumnTypeOperation(self):  # pragma: no cover
        return CastColumnTypeOperation.make_one(
            self.boto3_raw_data["CastColumnTypeOperation"]
        )

    TagColumnOperation = field("TagColumnOperation")
    UntagColumnOperation = field("UntagColumnOperation")
    OverrideDatasetParameterOperation = field("OverrideDatasetParameterOperation")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TransformOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TransformOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContributionAnalysisTimeRanges:
    boto3_raw_data: "type_defs.ContributionAnalysisTimeRangesTypeDef" = (
        dataclasses.field()
    )

    StartRange = field("StartRange")
    EndRange = field("EndRange")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ContributionAnalysisTimeRangesTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContributionAnalysisTimeRangesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSet:
    boto3_raw_data: "type_defs.DataSetTypeDef" = dataclasses.field()

    Arn = field("Arn")
    DataSetId = field("DataSetId")
    Name = field("Name")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")
    PhysicalTableMap = field("PhysicalTableMap")
    LogicalTableMap = field("LogicalTableMap")

    @cached_property
    def OutputColumns(self):  # pragma: no cover
        return OutputColumn.make_many(self.boto3_raw_data["OutputColumns"])

    ImportMode = field("ImportMode")
    ConsumedSpiceCapacityInBytes = field("ConsumedSpiceCapacityInBytes")

    @cached_property
    def ColumnGroups(self):  # pragma: no cover
        return ColumnGroupOutput.make_many(self.boto3_raw_data["ColumnGroups"])

    FieldFolders = field("FieldFolders")

    @cached_property
    def RowLevelPermissionDataSet(self):  # pragma: no cover
        return RowLevelPermissionDataSet.make_one(
            self.boto3_raw_data["RowLevelPermissionDataSet"]
        )

    @cached_property
    def RowLevelPermissionTagConfiguration(self):  # pragma: no cover
        return RowLevelPermissionTagConfigurationOutput.make_one(
            self.boto3_raw_data["RowLevelPermissionTagConfiguration"]
        )

    @cached_property
    def ColumnLevelPermissionRules(self):  # pragma: no cover
        return ColumnLevelPermissionRuleOutput.make_many(
            self.boto3_raw_data["ColumnLevelPermissionRules"]
        )

    @cached_property
    def DataSetUsageConfiguration(self):  # pragma: no cover
        return DataSetUsageConfiguration.make_one(
            self.boto3_raw_data["DataSetUsageConfiguration"]
        )

    @cached_property
    def DatasetParameters(self):  # pragma: no cover
        return DatasetParameterOutput.make_many(
            self.boto3_raw_data["DatasetParameters"]
        )

    @cached_property
    def PerformanceConfiguration(self):  # pragma: no cover
        return PerformanceConfigurationOutput.make_one(
            self.boto3_raw_data["PerformanceConfiguration"]
        )

    UseAs = field("UseAs")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DataSetTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DataSetTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageCustomActionOperationOutput:
    boto3_raw_data: "type_defs.ImageCustomActionOperationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def NavigationOperation(self):  # pragma: no cover
        return CustomActionNavigationOperation.make_one(
            self.boto3_raw_data["NavigationOperation"]
        )

    @cached_property
    def URLOperation(self):  # pragma: no cover
        return CustomActionURLOperation.make_one(self.boto3_raw_data["URLOperation"])

    @cached_property
    def SetParametersOperation(self):  # pragma: no cover
        return CustomActionSetParametersOperationOutput.make_one(
            self.boto3_raw_data["SetParametersOperation"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ImageCustomActionOperationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageCustomActionOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LayerCustomActionOperationOutput:
    boto3_raw_data: "type_defs.LayerCustomActionOperationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FilterOperation(self):  # pragma: no cover
        return CustomActionFilterOperationOutput.make_one(
            self.boto3_raw_data["FilterOperation"]
        )

    @cached_property
    def NavigationOperation(self):  # pragma: no cover
        return CustomActionNavigationOperation.make_one(
            self.boto3_raw_data["NavigationOperation"]
        )

    @cached_property
    def URLOperation(self):  # pragma: no cover
        return CustomActionURLOperation.make_one(self.boto3_raw_data["URLOperation"])

    @cached_property
    def SetParametersOperation(self):  # pragma: no cover
        return CustomActionSetParametersOperationOutput.make_one(
            self.boto3_raw_data["SetParametersOperation"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LayerCustomActionOperationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LayerCustomActionOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualCustomActionOperationOutput:
    boto3_raw_data: "type_defs.VisualCustomActionOperationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FilterOperation(self):  # pragma: no cover
        return CustomActionFilterOperationOutput.make_one(
            self.boto3_raw_data["FilterOperation"]
        )

    @cached_property
    def NavigationOperation(self):  # pragma: no cover
        return CustomActionNavigationOperation.make_one(
            self.boto3_raw_data["NavigationOperation"]
        )

    @cached_property
    def URLOperation(self):  # pragma: no cover
        return CustomActionURLOperation.make_one(self.boto3_raw_data["URLOperation"])

    @cached_property
    def SetParametersOperation(self):  # pragma: no cover
        return CustomActionSetParametersOperationOutput.make_one(
            self.boto3_raw_data["SetParametersOperation"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VisualCustomActionOperationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualCustomActionOperationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIROutput:
    boto3_raw_data: "type_defs.TopicIROutputTypeDef" = dataclasses.field()

    @cached_property
    def Metrics(self):  # pragma: no cover
        return TopicIRMetricOutput.make_many(self.boto3_raw_data["Metrics"])

    @cached_property
    def GroupByList(self):  # pragma: no cover
        return TopicIRGroupBy.make_many(self.boto3_raw_data["GroupByList"])

    @cached_property
    def Filters(self):  # pragma: no cover
        return TopicIRFilterOptionOutput.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def Sort(self):  # pragma: no cover
        return TopicSortClause.make_one(self.boto3_raw_data["Sort"])

    @cached_property
    def ContributionAnalysis(self):  # pragma: no cover
        return TopicIRContributionAnalysisOutput.make_one(
            self.boto3_raw_data["ContributionAnalysis"]
        )

    @cached_property
    def Visual(self):  # pragma: no cover
        return VisualOptions.make_one(self.boto3_raw_data["Visual"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicIROutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicIROutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineSeriesAxisDisplayOptionsOutput:
    boto3_raw_data: "type_defs.LineSeriesAxisDisplayOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AxisOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(self.boto3_raw_data["AxisOptions"])

    @cached_property
    def MissingDataConfigurations(self):  # pragma: no cover
        return MissingDataConfiguration.make_many(
            self.boto3_raw_data["MissingDataConfigurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LineSeriesAxisDisplayOptionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineSeriesAxisDisplayOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineSeriesAxisDisplayOptions:
    boto3_raw_data: "type_defs.LineSeriesAxisDisplayOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AxisOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["AxisOptions"])

    @cached_property
    def MissingDataConfigurations(self):  # pragma: no cover
        return MissingDataConfiguration.make_many(
            self.boto3_raw_data["MissingDataConfigurations"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineSeriesAxisDisplayOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineSeriesAxisDisplayOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFilterControlOptionsOutput:
    boto3_raw_data: "type_defs.DefaultFilterControlOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DefaultDateTimePickerOptions(self):  # pragma: no cover
        return DefaultDateTimePickerControlOptions.make_one(
            self.boto3_raw_data["DefaultDateTimePickerOptions"]
        )

    @cached_property
    def DefaultListOptions(self):  # pragma: no cover
        return DefaultFilterListControlOptionsOutput.make_one(
            self.boto3_raw_data["DefaultListOptions"]
        )

    @cached_property
    def DefaultDropdownOptions(self):  # pragma: no cover
        return DefaultFilterDropDownControlOptionsOutput.make_one(
            self.boto3_raw_data["DefaultDropdownOptions"]
        )

    @cached_property
    def DefaultTextFieldOptions(self):  # pragma: no cover
        return DefaultTextFieldControlOptions.make_one(
            self.boto3_raw_data["DefaultTextFieldOptions"]
        )

    @cached_property
    def DefaultTextAreaOptions(self):  # pragma: no cover
        return DefaultTextAreaControlOptions.make_one(
            self.boto3_raw_data["DefaultTextAreaOptions"]
        )

    @cached_property
    def DefaultSliderOptions(self):  # pragma: no cover
        return DefaultSliderControlOptions.make_one(
            self.boto3_raw_data["DefaultSliderOptions"]
        )

    @cached_property
    def DefaultRelativeDateTimeOptions(self):  # pragma: no cover
        return DefaultRelativeDateTimeControlOptions.make_one(
            self.boto3_raw_data["DefaultRelativeDateTimeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultFilterControlOptionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFilterControlOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFilterControlOptions:
    boto3_raw_data: "type_defs.DefaultFilterControlOptionsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultDateTimePickerOptions(self):  # pragma: no cover
        return DefaultDateTimePickerControlOptions.make_one(
            self.boto3_raw_data["DefaultDateTimePickerOptions"]
        )

    @cached_property
    def DefaultListOptions(self):  # pragma: no cover
        return DefaultFilterListControlOptions.make_one(
            self.boto3_raw_data["DefaultListOptions"]
        )

    @cached_property
    def DefaultDropdownOptions(self):  # pragma: no cover
        return DefaultFilterDropDownControlOptions.make_one(
            self.boto3_raw_data["DefaultDropdownOptions"]
        )

    @cached_property
    def DefaultTextFieldOptions(self):  # pragma: no cover
        return DefaultTextFieldControlOptions.make_one(
            self.boto3_raw_data["DefaultTextFieldOptions"]
        )

    @cached_property
    def DefaultTextAreaOptions(self):  # pragma: no cover
        return DefaultTextAreaControlOptions.make_one(
            self.boto3_raw_data["DefaultTextAreaOptions"]
        )

    @cached_property
    def DefaultSliderOptions(self):  # pragma: no cover
        return DefaultSliderControlOptions.make_one(
            self.boto3_raw_data["DefaultSliderOptions"]
        )

    @cached_property
    def DefaultRelativeDateTimeOptions(self):  # pragma: no cover
        return DefaultRelativeDateTimeControlOptions.make_one(
            self.boto3_raw_data["DefaultRelativeDateTimeOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DefaultFilterControlOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFilterControlOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterControlOutput:
    boto3_raw_data: "type_defs.FilterControlOutputTypeDef" = dataclasses.field()

    @cached_property
    def DateTimePicker(self):  # pragma: no cover
        return FilterDateTimePickerControl.make_one(
            self.boto3_raw_data["DateTimePicker"]
        )

    @cached_property
    def List(self):  # pragma: no cover
        return FilterListControlOutput.make_one(self.boto3_raw_data["List"])

    @cached_property
    def Dropdown(self):  # pragma: no cover
        return FilterDropDownControlOutput.make_one(self.boto3_raw_data["Dropdown"])

    @cached_property
    def TextField(self):  # pragma: no cover
        return FilterTextFieldControl.make_one(self.boto3_raw_data["TextField"])

    @cached_property
    def TextArea(self):  # pragma: no cover
        return FilterTextAreaControl.make_one(self.boto3_raw_data["TextArea"])

    @cached_property
    def Slider(self):  # pragma: no cover
        return FilterSliderControl.make_one(self.boto3_raw_data["Slider"])

    @cached_property
    def RelativeDateTime(self):  # pragma: no cover
        return FilterRelativeDateTimeControl.make_one(
            self.boto3_raw_data["RelativeDateTime"]
        )

    @cached_property
    def CrossSheet(self):  # pragma: no cover
        return FilterCrossSheetControlOutput.make_one(self.boto3_raw_data["CrossSheet"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilterControlOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterControlOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterControl:
    boto3_raw_data: "type_defs.FilterControlTypeDef" = dataclasses.field()

    @cached_property
    def DateTimePicker(self):  # pragma: no cover
        return FilterDateTimePickerControl.make_one(
            self.boto3_raw_data["DateTimePicker"]
        )

    @cached_property
    def List(self):  # pragma: no cover
        return FilterListControl.make_one(self.boto3_raw_data["List"])

    @cached_property
    def Dropdown(self):  # pragma: no cover
        return FilterDropDownControl.make_one(self.boto3_raw_data["Dropdown"])

    @cached_property
    def TextField(self):  # pragma: no cover
        return FilterTextFieldControl.make_one(self.boto3_raw_data["TextField"])

    @cached_property
    def TextArea(self):  # pragma: no cover
        return FilterTextAreaControl.make_one(self.boto3_raw_data["TextArea"])

    @cached_property
    def Slider(self):  # pragma: no cover
        return FilterSliderControl.make_one(self.boto3_raw_data["Slider"])

    @cached_property
    def RelativeDateTime(self):  # pragma: no cover
        return FilterRelativeDateTimeControl.make_one(
            self.boto3_raw_data["RelativeDateTime"]
        )

    @cached_property
    def CrossSheet(self):  # pragma: no cover
        return FilterCrossSheetControl.make_one(self.boto3_raw_data["CrossSheet"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterControlTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilterControlTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterControlOutput:
    boto3_raw_data: "type_defs.ParameterControlOutputTypeDef" = dataclasses.field()

    @cached_property
    def DateTimePicker(self):  # pragma: no cover
        return ParameterDateTimePickerControl.make_one(
            self.boto3_raw_data["DateTimePicker"]
        )

    @cached_property
    def List(self):  # pragma: no cover
        return ParameterListControlOutput.make_one(self.boto3_raw_data["List"])

    @cached_property
    def Dropdown(self):  # pragma: no cover
        return ParameterDropDownControlOutput.make_one(self.boto3_raw_data["Dropdown"])

    @cached_property
    def TextField(self):  # pragma: no cover
        return ParameterTextFieldControl.make_one(self.boto3_raw_data["TextField"])

    @cached_property
    def TextArea(self):  # pragma: no cover
        return ParameterTextAreaControl.make_one(self.boto3_raw_data["TextArea"])

    @cached_property
    def Slider(self):  # pragma: no cover
        return ParameterSliderControl.make_one(self.boto3_raw_data["Slider"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterControlOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterControlOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterControl:
    boto3_raw_data: "type_defs.ParameterControlTypeDef" = dataclasses.field()

    @cached_property
    def DateTimePicker(self):  # pragma: no cover
        return ParameterDateTimePickerControl.make_one(
            self.boto3_raw_data["DateTimePicker"]
        )

    @cached_property
    def List(self):  # pragma: no cover
        return ParameterListControl.make_one(self.boto3_raw_data["List"])

    @cached_property
    def Dropdown(self):  # pragma: no cover
        return ParameterDropDownControl.make_one(self.boto3_raw_data["Dropdown"])

    @cached_property
    def TextField(self):  # pragma: no cover
        return ParameterTextFieldControl.make_one(self.boto3_raw_data["TextField"])

    @cached_property
    def TextArea(self):  # pragma: no cover
        return ParameterTextAreaControl.make_one(self.boto3_raw_data["TextArea"])

    @cached_property
    def Slider(self):  # pragma: no cover
        return ParameterSliderControl.make_one(self.boto3_raw_data["Slider"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ParameterControlTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldURLConfiguration:
    boto3_raw_data: "type_defs.TableFieldURLConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def LinkConfiguration(self):  # pragma: no cover
        return TableFieldLinkConfiguration.make_one(
            self.boto3_raw_data["LinkConfiguration"]
        )

    @cached_property
    def ImageConfiguration(self):  # pragma: no cover
        return TableFieldImageConfiguration.make_one(
            self.boto3_raw_data["ImageConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableFieldURLConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldURLConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPointStyleOutput:
    boto3_raw_data: "type_defs.GeospatialPointStyleOutputTypeDef" = dataclasses.field()

    @cached_property
    def CircleSymbolStyle(self):  # pragma: no cover
        return GeospatialCircleSymbolStyleOutput.make_one(
            self.boto3_raw_data["CircleSymbolStyle"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPointStyleOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPointStyleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLineStyleOutput:
    boto3_raw_data: "type_defs.GeospatialLineStyleOutputTypeDef" = dataclasses.field()

    @cached_property
    def LineSymbolStyle(self):  # pragma: no cover
        return GeospatialLineSymbolStyleOutput.make_one(
            self.boto3_raw_data["LineSymbolStyle"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLineStyleOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLineStyleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPolygonStyleOutput:
    boto3_raw_data: "type_defs.GeospatialPolygonStyleOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PolygonSymbolStyle(self):  # pragma: no cover
        return GeospatialPolygonSymbolStyleOutput.make_one(
            self.boto3_raw_data["PolygonSymbolStyle"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPolygonStyleOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPolygonStyleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPointStyle:
    boto3_raw_data: "type_defs.GeospatialPointStyleTypeDef" = dataclasses.field()

    @cached_property
    def CircleSymbolStyle(self):  # pragma: no cover
        return GeospatialCircleSymbolStyle.make_one(
            self.boto3_raw_data["CircleSymbolStyle"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPointStyleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPointStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLineStyle:
    boto3_raw_data: "type_defs.GeospatialLineStyleTypeDef" = dataclasses.field()

    @cached_property
    def LineSymbolStyle(self):  # pragma: no cover
        return GeospatialLineSymbolStyle.make_one(
            self.boto3_raw_data["LineSymbolStyle"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLineStyleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLineStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPolygonStyle:
    boto3_raw_data: "type_defs.GeospatialPolygonStyleTypeDef" = dataclasses.field()

    @cached_property
    def PolygonSymbolStyle(self):  # pragma: no cover
        return GeospatialPolygonSymbolStyle.make_one(
            self.boto3_raw_data["PolygonSymbolStyle"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPolygonStyleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPolygonStyleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableTotalOptionsOutput:
    boto3_raw_data: "type_defs.PivotTableTotalOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RowSubtotalOptions(self):  # pragma: no cover
        return SubtotalOptionsOutput.make_one(self.boto3_raw_data["RowSubtotalOptions"])

    @cached_property
    def ColumnSubtotalOptions(self):  # pragma: no cover
        return SubtotalOptionsOutput.make_one(
            self.boto3_raw_data["ColumnSubtotalOptions"]
        )

    @cached_property
    def RowTotalOptions(self):  # pragma: no cover
        return PivotTotalOptionsOutput.make_one(self.boto3_raw_data["RowTotalOptions"])

    @cached_property
    def ColumnTotalOptions(self):  # pragma: no cover
        return PivotTotalOptionsOutput.make_one(
            self.boto3_raw_data["ColumnTotalOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableTotalOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableTotalOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableTotalOptions:
    boto3_raw_data: "type_defs.PivotTableTotalOptionsTypeDef" = dataclasses.field()

    @cached_property
    def RowSubtotalOptions(self):  # pragma: no cover
        return SubtotalOptions.make_one(self.boto3_raw_data["RowSubtotalOptions"])

    @cached_property
    def ColumnSubtotalOptions(self):  # pragma: no cover
        return SubtotalOptions.make_one(self.boto3_raw_data["ColumnSubtotalOptions"])

    @cached_property
    def RowTotalOptions(self):  # pragma: no cover
        return PivotTotalOptions.make_one(self.boto3_raw_data["RowTotalOptions"])

    @cached_property
    def ColumnTotalOptions(self):  # pragma: no cover
        return PivotTotalOptions.make_one(self.boto3_raw_data["ColumnTotalOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableTotalOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableTotalOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartConditionalFormattingOptionOutput:
    boto3_raw_data: "type_defs.GaugeChartConditionalFormattingOptionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrimaryValue(self):  # pragma: no cover
        return GaugeChartPrimaryValueConditionalFormattingOutput.make_one(
            self.boto3_raw_data["PrimaryValue"]
        )

    @cached_property
    def Arc(self):  # pragma: no cover
        return GaugeChartArcConditionalFormattingOutput.make_one(
            self.boto3_raw_data["Arc"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GaugeChartConditionalFormattingOptionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartConditionalFormattingOptionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIConditionalFormattingOptionOutput:
    boto3_raw_data: "type_defs.KPIConditionalFormattingOptionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrimaryValue(self):  # pragma: no cover
        return KPIPrimaryValueConditionalFormattingOutput.make_one(
            self.boto3_raw_data["PrimaryValue"]
        )

    @cached_property
    def ProgressBar(self):  # pragma: no cover
        return KPIProgressBarConditionalFormattingOutput.make_one(
            self.boto3_raw_data["ProgressBar"]
        )

    @cached_property
    def ActualValue(self):  # pragma: no cover
        return KPIActualValueConditionalFormattingOutput.make_one(
            self.boto3_raw_data["ActualValue"]
        )

    @cached_property
    def ComparisonValue(self):  # pragma: no cover
        return KPIComparisonValueConditionalFormattingOutput.make_one(
            self.boto3_raw_data["ComparisonValue"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.KPIConditionalFormattingOptionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIConditionalFormattingOptionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapShapeConditionalFormattingOutput:
    boto3_raw_data: "type_defs.FilledMapShapeConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    FieldId = field("FieldId")

    @cached_property
    def Format(self):  # pragma: no cover
        return ShapeConditionalFormatOutput.make_one(self.boto3_raw_data["Format"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilledMapShapeConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapShapeConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableCellConditionalFormattingOutput:
    boto3_raw_data: "type_defs.PivotTableCellConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    FieldId = field("FieldId")

    @cached_property
    def TextFormat(self):  # pragma: no cover
        return TextConditionalFormatOutput.make_one(self.boto3_raw_data["TextFormat"])

    @cached_property
    def Scope(self):  # pragma: no cover
        return PivotTableConditionalFormattingScope.make_one(
            self.boto3_raw_data["Scope"]
        )

    @cached_property
    def Scopes(self):  # pragma: no cover
        return PivotTableConditionalFormattingScope.make_many(
            self.boto3_raw_data["Scopes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableCellConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableCellConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableCellConditionalFormattingOutput:
    boto3_raw_data: "type_defs.TableCellConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    FieldId = field("FieldId")

    @cached_property
    def TextFormat(self):  # pragma: no cover
        return TextConditionalFormatOutput.make_one(self.boto3_raw_data["TextFormat"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TableCellConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableCellConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartConditionalFormattingOption:
    boto3_raw_data: "type_defs.GaugeChartConditionalFormattingOptionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrimaryValue(self):  # pragma: no cover
        return GaugeChartPrimaryValueConditionalFormatting.make_one(
            self.boto3_raw_data["PrimaryValue"]
        )

    @cached_property
    def Arc(self):  # pragma: no cover
        return GaugeChartArcConditionalFormatting.make_one(self.boto3_raw_data["Arc"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GaugeChartConditionalFormattingOptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartConditionalFormattingOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIConditionalFormattingOption:
    boto3_raw_data: "type_defs.KPIConditionalFormattingOptionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PrimaryValue(self):  # pragma: no cover
        return KPIPrimaryValueConditionalFormatting.make_one(
            self.boto3_raw_data["PrimaryValue"]
        )

    @cached_property
    def ProgressBar(self):  # pragma: no cover
        return KPIProgressBarConditionalFormatting.make_one(
            self.boto3_raw_data["ProgressBar"]
        )

    @cached_property
    def ActualValue(self):  # pragma: no cover
        return KPIActualValueConditionalFormatting.make_one(
            self.boto3_raw_data["ActualValue"]
        )

    @cached_property
    def ComparisonValue(self):  # pragma: no cover
        return KPIComparisonValueConditionalFormatting.make_one(
            self.boto3_raw_data["ComparisonValue"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.KPIConditionalFormattingOptionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIConditionalFormattingOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapShapeConditionalFormatting:
    boto3_raw_data: "type_defs.FilledMapShapeConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    FieldId = field("FieldId")

    @cached_property
    def Format(self):  # pragma: no cover
        return ShapeConditionalFormat.make_one(self.boto3_raw_data["Format"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilledMapShapeConditionalFormattingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapShapeConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableCellConditionalFormatting:
    boto3_raw_data: "type_defs.PivotTableCellConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    FieldId = field("FieldId")

    @cached_property
    def TextFormat(self):  # pragma: no cover
        return TextConditionalFormat.make_one(self.boto3_raw_data["TextFormat"])

    @cached_property
    def Scope(self):  # pragma: no cover
        return PivotTableConditionalFormattingScope.make_one(
            self.boto3_raw_data["Scope"]
        )

    @cached_property
    def Scopes(self):  # pragma: no cover
        return PivotTableConditionalFormattingScope.make_many(
            self.boto3_raw_data["Scopes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableCellConditionalFormattingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableCellConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableCellConditionalFormatting:
    boto3_raw_data: "type_defs.TableCellConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    FieldId = field("FieldId")

    @cached_property
    def TextFormat(self):  # pragma: no cover
        return TextConditionalFormat.make_one(self.boto3_raw_data["TextFormat"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TableCellConditionalFormattingTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableCellConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BrandDefinition:
    boto3_raw_data: "type_defs.BrandDefinitionTypeDef" = dataclasses.field()

    BrandName = field("BrandName")
    Description = field("Description")

    @cached_property
    def ApplicationTheme(self):  # pragma: no cover
        return ApplicationTheme.make_one(self.boto3_raw_data["ApplicationTheme"])

    @cached_property
    def LogoConfiguration(self):  # pragma: no cover
        return LogoConfiguration.make_one(self.boto3_raw_data["LogoConfiguration"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BrandDefinitionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BrandDefinitionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BrandDetail:
    boto3_raw_data: "type_defs.BrandDetailTypeDef" = dataclasses.field()

    BrandId = field("BrandId")
    Arn = field("Arn")
    BrandStatus = field("BrandStatus")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")
    VersionId = field("VersionId")
    VersionStatus = field("VersionStatus")
    Errors = field("Errors")

    @cached_property
    def Logo(self):  # pragma: no cover
        return Logo.make_one(self.boto3_raw_data["Logo"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BrandDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BrandDetailTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobOverrideParametersOutput:
    boto3_raw_data: "type_defs.AssetBundleImportJobOverrideParametersOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ResourceIdOverrideConfiguration(self):  # pragma: no cover
        return AssetBundleImportJobResourceIdOverrideConfiguration.make_one(
            self.boto3_raw_data["ResourceIdOverrideConfiguration"]
        )

    @cached_property
    def VPCConnections(self):  # pragma: no cover
        return AssetBundleImportJobVPCConnectionOverrideParametersOutput.make_many(
            self.boto3_raw_data["VPCConnections"]
        )

    @cached_property
    def RefreshSchedules(self):  # pragma: no cover
        return AssetBundleImportJobRefreshScheduleOverrideParametersOutput.make_many(
            self.boto3_raw_data["RefreshSchedules"]
        )

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AssetBundleImportJobDataSourceOverrideParametersOutput.make_many(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def DataSets(self):  # pragma: no cover
        return AssetBundleImportJobDataSetOverrideParameters.make_many(
            self.boto3_raw_data["DataSets"]
        )

    @cached_property
    def Themes(self):  # pragma: no cover
        return AssetBundleImportJobThemeOverrideParameters.make_many(
            self.boto3_raw_data["Themes"]
        )

    @cached_property
    def Analyses(self):  # pragma: no cover
        return AssetBundleImportJobAnalysisOverrideParameters.make_many(
            self.boto3_raw_data["Analyses"]
        )

    @cached_property
    def Dashboards(self):  # pragma: no cover
        return AssetBundleImportJobDashboardOverrideParameters.make_many(
            self.boto3_raw_data["Dashboards"]
        )

    @cached_property
    def Folders(self):  # pragma: no cover
        return AssetBundleImportJobFolderOverrideParameters.make_many(
            self.boto3_raw_data["Folders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobOverrideParametersOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobOverrideParametersOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Theme:
    boto3_raw_data: "type_defs.ThemeTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Name = field("Name")
    ThemeId = field("ThemeId")

    @cached_property
    def Version(self):  # pragma: no cover
        return ThemeVersion.make_one(self.boto3_raw_data["Version"])

    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")
    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ThemeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ThemeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateThemeRequest:
    boto3_raw_data: "type_defs.CreateThemeRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    Name = field("Name")
    BaseThemeId = field("BaseThemeId")
    Configuration = field("Configuration")
    VersionDescription = field("VersionDescription")
    Permissions = field("Permissions")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateThemeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateThemeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateThemeRequest:
    boto3_raw_data: "type_defs.UpdateThemeRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    ThemeId = field("ThemeId")
    BaseThemeId = field("BaseThemeId")
    Name = field("Name")
    VersionDescription = field("VersionDescription")
    Configuration = field("Configuration")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateThemeRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateThemeRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartOptions:
    boto3_raw_data: "type_defs.GaugeChartOptionsTypeDef" = dataclasses.field()

    PrimaryValueDisplayType = field("PrimaryValueDisplayType")

    @cached_property
    def Comparison(self):  # pragma: no cover
        return ComparisonConfiguration.make_one(self.boto3_raw_data["Comparison"])

    @cached_property
    def ArcAxis(self):  # pragma: no cover
        return ArcAxisConfiguration.make_one(self.boto3_raw_data["ArcAxis"])

    @cached_property
    def Arc(self):  # pragma: no cover
        return ArcConfiguration.make_one(self.boto3_raw_data["Arc"])

    @cached_property
    def PrimaryValueFontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(
            self.boto3_raw_data["PrimaryValueFontConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GaugeChartOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIOptions:
    boto3_raw_data: "type_defs.KPIOptionsTypeDef" = dataclasses.field()

    @cached_property
    def ProgressBar(self):  # pragma: no cover
        return ProgressBarOptions.make_one(self.boto3_raw_data["ProgressBar"])

    @cached_property
    def TrendArrows(self):  # pragma: no cover
        return TrendArrowOptions.make_one(self.boto3_raw_data["TrendArrows"])

    @cached_property
    def SecondaryValue(self):  # pragma: no cover
        return SecondaryValueOptions.make_one(self.boto3_raw_data["SecondaryValue"])

    @cached_property
    def Comparison(self):  # pragma: no cover
        return ComparisonConfiguration.make_one(self.boto3_raw_data["Comparison"])

    PrimaryValueDisplayType = field("PrimaryValueDisplayType")

    @cached_property
    def PrimaryValueFontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(
            self.boto3_raw_data["PrimaryValueFontConfiguration"]
        )

    @cached_property
    def SecondaryValueFontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(
            self.boto3_raw_data["SecondaryValueFontConfiguration"]
        )

    @cached_property
    def Sparkline(self):  # pragma: no cover
        return KPISparklineOptions.make_one(self.boto3_raw_data["Sparkline"])

    @cached_property
    def VisualLayoutOptions(self):  # pragma: no cover
        return KPIVisualLayoutOptions.make_one(
            self.boto3_raw_data["VisualLayoutOptions"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KPIOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.KPIOptionsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateDimensionField:
    boto3_raw_data: "type_defs.DateDimensionFieldTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    DateGranularity = field("DateGranularity")
    HierarchyId = field("HierarchyId")

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return DateTimeFormatConfiguration.make_one(
            self.boto3_raw_data["FormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DateDimensionFieldTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateDimensionFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateMeasureField:
    boto3_raw_data: "type_defs.DateMeasureFieldTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    AggregationFunction = field("AggregationFunction")

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return DateTimeFormatConfiguration.make_one(
            self.boto3_raw_data["FormatConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DateMeasureFieldTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DateMeasureFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericalDimensionField:
    boto3_raw_data: "type_defs.NumericalDimensionFieldTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    HierarchyId = field("HierarchyId")

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return NumberFormatConfiguration.make_one(
            self.boto3_raw_data["FormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericalDimensionFieldTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericalDimensionFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericalMeasureField:
    boto3_raw_data: "type_defs.NumericalMeasureFieldTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def AggregationFunction(self):  # pragma: no cover
        return NumericalAggregationFunction.make_one(
            self.boto3_raw_data["AggregationFunction"]
        )

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return NumberFormatConfiguration.make_one(
            self.boto3_raw_data["FormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericalMeasureFieldTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericalMeasureFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReferenceLineLabelConfiguration:
    boto3_raw_data: "type_defs.ReferenceLineLabelConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ValueLabelConfiguration(self):  # pragma: no cover
        return ReferenceLineValueLabelConfiguration.make_one(
            self.boto3_raw_data["ValueLabelConfiguration"]
        )

    @cached_property
    def CustomLabelConfiguration(self):  # pragma: no cover
        return ReferenceLineCustomLabelConfiguration.make_one(
            self.boto3_raw_data["CustomLabelConfiguration"]
        )

    @cached_property
    def FontConfiguration(self):  # pragma: no cover
        return FontConfiguration.make_one(self.boto3_raw_data["FontConfiguration"])

    FontColor = field("FontColor")
    HorizontalPosition = field("HorizontalPosition")
    VerticalPosition = field("VerticalPosition")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ReferenceLineLabelConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ReferenceLineLabelConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoricalDimensionField:
    boto3_raw_data: "type_defs.CategoricalDimensionFieldTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    HierarchyId = field("HierarchyId")

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return StringFormatConfiguration.make_one(
            self.boto3_raw_data["FormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoricalDimensionFieldTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoricalDimensionFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoricalMeasureField:
    boto3_raw_data: "type_defs.CategoricalMeasureFieldTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    AggregationFunction = field("AggregationFunction")

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return StringFormatConfiguration.make_one(
            self.boto3_raw_data["FormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoricalMeasureFieldTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoricalMeasureFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FormatConfiguration:
    boto3_raw_data: "type_defs.FormatConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def StringFormatConfiguration(self):  # pragma: no cover
        return StringFormatConfiguration.make_one(
            self.boto3_raw_data["StringFormatConfiguration"]
        )

    @cached_property
    def NumberFormatConfiguration(self):  # pragma: no cover
        return NumberFormatConfiguration.make_one(
            self.boto3_raw_data["NumberFormatConfiguration"]
        )

    @cached_property
    def DateTimeFormatConfiguration(self):  # pragma: no cover
        return DateTimeFormatConfiguration.make_one(
            self.boto3_raw_data["DateTimeFormatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FormatConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FormatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionRepeatDimensionConfigurationOutput:
    boto3_raw_data: "type_defs.BodySectionRepeatDimensionConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DynamicCategoryDimensionConfiguration(self):  # pragma: no cover
        return BodySectionDynamicCategoryDimensionConfigurationOutput.make_one(
            self.boto3_raw_data["DynamicCategoryDimensionConfiguration"]
        )

    @cached_property
    def DynamicNumericDimensionConfiguration(self):  # pragma: no cover
        return BodySectionDynamicNumericDimensionConfigurationOutput.make_one(
            self.boto3_raw_data["DynamicNumericDimensionConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BodySectionRepeatDimensionConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BodySectionRepeatDimensionConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionRepeatDimensionConfiguration:
    boto3_raw_data: "type_defs.BodySectionRepeatDimensionConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DynamicCategoryDimensionConfiguration(self):  # pragma: no cover
        return BodySectionDynamicCategoryDimensionConfiguration.make_one(
            self.boto3_raw_data["DynamicCategoryDimensionConfiguration"]
        )

    @cached_property
    def DynamicNumericDimensionConfiguration(self):  # pragma: no cover
        return BodySectionDynamicNumericDimensionConfiguration.make_one(
            self.boto3_raw_data["DynamicNumericDimensionConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BodySectionRepeatDimensionConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BodySectionRepeatDimensionConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartSortConfigurationOutput:
    boto3_raw_data: "type_defs.BarChartSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def ColorSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["ColorSort"])

    @cached_property
    def ColorItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(self.boto3_raw_data["ColorItemsLimit"])

    @cached_property
    def SmallMultiplesSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["SmallMultiplesSort"])

    @cached_property
    def SmallMultiplesLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["SmallMultiplesLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BarChartSortConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BarChartSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartSortConfiguration:
    boto3_raw_data: "type_defs.BarChartSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def ColorSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["ColorSort"])

    @cached_property
    def ColorItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(self.boto3_raw_data["ColorItemsLimit"])

    @cached_property
    def SmallMultiplesSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["SmallMultiplesSort"])

    @cached_property
    def SmallMultiplesLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["SmallMultiplesLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BarChartSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BarChartSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotSortConfigurationOutput:
    boto3_raw_data: "type_defs.BoxPlotSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def PaginationConfiguration(self):  # pragma: no cover
        return PaginationConfiguration.make_one(
            self.boto3_raw_data["PaginationConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BoxPlotSortConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotSortConfiguration:
    boto3_raw_data: "type_defs.BoxPlotSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def PaginationConfiguration(self):  # pragma: no cover
        return PaginationConfiguration.make_one(
            self.boto3_raw_data["PaginationConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BoxPlotSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartSortConfigurationOutput:
    boto3_raw_data: "type_defs.ComboChartSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def ColorSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["ColorSort"])

    @cached_property
    def ColorItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(self.boto3_raw_data["ColorItemsLimit"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ComboChartSortConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartSortConfiguration:
    boto3_raw_data: "type_defs.ComboChartSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def ColorSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["ColorSort"])

    @cached_property
    def ColorItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(self.boto3_raw_data["ColorItemsLimit"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComboChartSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapSortConfigurationOutput:
    boto3_raw_data: "type_defs.FilledMapSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FilledMapSortConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapSortConfiguration:
    boto3_raw_data: "type_defs.FilledMapSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilledMapSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartSortConfigurationOutput:
    boto3_raw_data: "type_defs.FunnelChartSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FunnelChartSortConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartSortConfiguration:
    boto3_raw_data: "type_defs.FunnelChartSortConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FunnelChartSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapSortConfigurationOutput:
    boto3_raw_data: "type_defs.HeatMapSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HeatMapRowSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["HeatMapRowSort"])

    @cached_property
    def HeatMapColumnSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["HeatMapColumnSort"])

    @cached_property
    def HeatMapRowItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["HeatMapRowItemsLimitConfiguration"]
        )

    @cached_property
    def HeatMapColumnItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["HeatMapColumnItemsLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.HeatMapSortConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeatMapSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapSortConfiguration:
    boto3_raw_data: "type_defs.HeatMapSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def HeatMapRowSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["HeatMapRowSort"])

    @cached_property
    def HeatMapColumnSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["HeatMapColumnSort"])

    @cached_property
    def HeatMapRowItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["HeatMapRowItemsLimitConfiguration"]
        )

    @cached_property
    def HeatMapColumnItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["HeatMapColumnItemsLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HeatMapSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeatMapSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPISortConfigurationOutput:
    boto3_raw_data: "type_defs.KPISortConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def TrendGroupSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["TrendGroupSort"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KPISortConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPISortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPISortConfiguration:
    boto3_raw_data: "type_defs.KPISortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def TrendGroupSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["TrendGroupSort"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KPISortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPISortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartSortConfigurationOutput:
    boto3_raw_data: "type_defs.LineChartSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimitConfiguration"]
        )

    @cached_property
    def ColorItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["ColorItemsLimitConfiguration"]
        )

    @cached_property
    def SmallMultiplesSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["SmallMultiplesSort"])

    @cached_property
    def SmallMultiplesLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["SmallMultiplesLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LineChartSortConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartSortConfiguration:
    boto3_raw_data: "type_defs.LineChartSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimitConfiguration"]
        )

    @cached_property
    def ColorItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["ColorItemsLimitConfiguration"]
        )

    @cached_property
    def SmallMultiplesSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["SmallMultiplesSort"])

    @cached_property
    def SmallMultiplesLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["SmallMultiplesLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineChartSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartSortConfigurationOutput:
    boto3_raw_data: "type_defs.PieChartSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def SmallMultiplesSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["SmallMultiplesSort"])

    @cached_property
    def SmallMultiplesLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["SmallMultiplesLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PieChartSortConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PieChartSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartSortConfiguration:
    boto3_raw_data: "type_defs.PieChartSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def SmallMultiplesSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["SmallMultiplesSort"])

    @cached_property
    def SmallMultiplesLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["SmallMultiplesLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PieChartSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PieChartSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualTableQuerySortOutput:
    boto3_raw_data: "type_defs.PluginVisualTableQuerySortOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RowSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["RowSort"])

    @cached_property
    def ItemsLimitConfiguration(self):  # pragma: no cover
        return PluginVisualItemsLimitConfiguration.make_one(
            self.boto3_raw_data["ItemsLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PluginVisualTableQuerySortOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualTableQuerySortOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualTableQuerySort:
    boto3_raw_data: "type_defs.PluginVisualTableQuerySortTypeDef" = dataclasses.field()

    @cached_property
    def RowSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["RowSort"])

    @cached_property
    def ItemsLimitConfiguration(self):  # pragma: no cover
        return PluginVisualItemsLimitConfiguration.make_one(
            self.boto3_raw_data["ItemsLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PluginVisualTableQuerySortTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualTableQuerySortTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartSortConfigurationOutput:
    boto3_raw_data: "type_defs.RadarChartSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def ColorSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["ColorSort"])

    @cached_property
    def ColorItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(self.boto3_raw_data["ColorItemsLimit"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RadarChartSortConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartSortConfiguration:
    boto3_raw_data: "type_defs.RadarChartSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def ColorSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["ColorSort"])

    @cached_property
    def ColorItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(self.boto3_raw_data["ColorItemsLimit"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RadarChartSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramSortConfigurationOutput:
    boto3_raw_data: "type_defs.SankeyDiagramSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def WeightSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["WeightSort"])

    @cached_property
    def SourceItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(self.boto3_raw_data["SourceItemsLimit"])

    @cached_property
    def DestinationItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["DestinationItemsLimit"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SankeyDiagramSortConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramSortConfiguration:
    boto3_raw_data: "type_defs.SankeyDiagramSortConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def WeightSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["WeightSort"])

    @cached_property
    def SourceItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(self.boto3_raw_data["SourceItemsLimit"])

    @cached_property
    def DestinationItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["DestinationItemsLimit"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SankeyDiagramSortConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableSortConfigurationOutput:
    boto3_raw_data: "type_defs.TableSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RowSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["RowSort"])

    @cached_property
    def PaginationConfiguration(self):  # pragma: no cover
        return PaginationConfiguration.make_one(
            self.boto3_raw_data["PaginationConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableSortConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableSortConfiguration:
    boto3_raw_data: "type_defs.TableSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def RowSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["RowSort"])

    @cached_property
    def PaginationConfiguration(self):  # pragma: no cover
        return PaginationConfiguration.make_one(
            self.boto3_raw_data["PaginationConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapSortConfigurationOutput:
    boto3_raw_data: "type_defs.TreeMapSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def TreeMapSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["TreeMapSort"])

    @cached_property
    def TreeMapGroupItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["TreeMapGroupItemsLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TreeMapSortConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TreeMapSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapSortConfiguration:
    boto3_raw_data: "type_defs.TreeMapSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def TreeMapSort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["TreeMapSort"])

    @cached_property
    def TreeMapGroupItemsLimitConfiguration(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["TreeMapGroupItemsLimitConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TreeMapSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TreeMapSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartSortConfigurationOutput:
    boto3_raw_data: "type_defs.WaterfallChartSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def BreakdownItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["BreakdownItemsLimit"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.WaterfallChartSortConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartSortConfiguration:
    boto3_raw_data: "type_defs.WaterfallChartSortConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @cached_property
    def BreakdownItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["BreakdownItemsLimit"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.WaterfallChartSortConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudSortConfigurationOutput:
    boto3_raw_data: "type_defs.WordCloudSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.WordCloudSortConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudSortConfiguration:
    boto3_raw_data: "type_defs.WordCloudSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def CategoryItemsLimit(self):  # pragma: no cover
        return ItemsLimitConfiguration.make_one(
            self.boto3_raw_data["CategoryItemsLimit"]
        )

    @cached_property
    def CategorySort(self):  # pragma: no cover
        return FieldSortOptions.make_many(self.boto3_raw_data["CategorySort"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WordCloudSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotFieldSortOptionsOutput:
    boto3_raw_data: "type_defs.PivotFieldSortOptionsOutputTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def SortBy(self):  # pragma: no cover
        return PivotTableSortByOutput.make_one(self.boto3_raw_data["SortBy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotFieldSortOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotFieldSortOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotFieldSortOptions:
    boto3_raw_data: "type_defs.PivotFieldSortOptionsTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def SortBy(self):  # pragma: no cover
        return PivotTableSortBy.make_one(self.boto3_raw_data["SortBy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotFieldSortOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotFieldSortOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FieldBasedTooltipOutput:
    boto3_raw_data: "type_defs.FieldBasedTooltipOutputTypeDef" = dataclasses.field()

    AggregationVisibility = field("AggregationVisibility")
    TooltipTitleType = field("TooltipTitleType")

    @cached_property
    def TooltipFields(self):  # pragma: no cover
        return TooltipItem.make_many(self.boto3_raw_data["TooltipFields"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FieldBasedTooltipOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FieldBasedTooltipOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FieldBasedTooltip:
    boto3_raw_data: "type_defs.FieldBasedTooltipTypeDef" = dataclasses.field()

    AggregationVisibility = field("AggregationVisibility")
    TooltipTitleType = field("TooltipTitleType")

    @cached_property
    def TooltipFields(self):  # pragma: no cover
        return TooltipItem.make_many(self.boto3_raw_data["TooltipFields"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FieldBasedTooltipTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FieldBasedTooltipTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicDetailsOutput:
    boto3_raw_data: "type_defs.TopicDetailsOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Description = field("Description")
    UserExperienceVersion = field("UserExperienceVersion")

    @cached_property
    def DataSets(self):  # pragma: no cover
        return DatasetMetadataOutput.make_many(self.boto3_raw_data["DataSets"])

    @cached_property
    def ConfigOptions(self):  # pragma: no cover
        return TopicConfigOptions.make_one(self.boto3_raw_data["ConfigOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicDetails:
    boto3_raw_data: "type_defs.TopicDetailsTypeDef" = dataclasses.field()

    Name = field("Name")
    Description = field("Description")
    UserExperienceVersion = field("UserExperienceVersion")

    @cached_property
    def DataSets(self):  # pragma: no cover
        return DatasetMetadata.make_many(self.boto3_raw_data["DataSets"])

    @cached_property
    def ConfigOptions(self):  # pragma: no cover
        return TopicConfigOptions.make_one(self.boto3_raw_data["ConfigOptions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicDetailsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobDataSourceOverrideParameters:
    boto3_raw_data: (
        "type_defs.AssetBundleImportJobDataSourceOverrideParametersTypeDef"
    ) = dataclasses.field()

    DataSourceId = field("DataSourceId")
    Name = field("Name")

    @cached_property
    def DataSourceParameters(self):  # pragma: no cover
        return DataSourceParameters.make_one(
            self.boto3_raw_data["DataSourceParameters"]
        )

    @cached_property
    def VpcConnectionProperties(self):  # pragma: no cover
        return VpcConnectionProperties.make_one(
            self.boto3_raw_data["VpcConnectionProperties"]
        )

    @cached_property
    def SslProperties(self):  # pragma: no cover
        return SslProperties.make_one(self.boto3_raw_data["SslProperties"])

    @cached_property
    def Credentials(self):  # pragma: no cover
        return AssetBundleImportJobDataSourceCredentials.make_one(
            self.boto3_raw_data["Credentials"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobDataSourceOverrideParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AssetBundleImportJobDataSourceOverrideParametersTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SnapshotJobResult:
    boto3_raw_data: "type_defs.SnapshotJobResultTypeDef" = dataclasses.field()

    @cached_property
    def AnonymousUsers(self):  # pragma: no cover
        return AnonymousUserSnapshotJobResult.make_many(
            self.boto3_raw_data["AnonymousUsers"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SnapshotJobResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SnapshotJobResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultNewSheetConfiguration:
    boto3_raw_data: "type_defs.DefaultNewSheetConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InteractiveLayoutConfiguration(self):  # pragma: no cover
        return DefaultInteractiveLayoutConfiguration.make_one(
            self.boto3_raw_data["InteractiveLayoutConfiguration"]
        )

    @cached_property
    def PaginatedLayoutConfiguration(self):  # pragma: no cover
        return DefaultPaginatedLayoutConfiguration.make_one(
            self.boto3_raw_data["PaginatedLayoutConfiguration"]
        )

    SheetContentType = field("SheetContentType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DefaultNewSheetConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultNewSheetConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionContentOutput:
    boto3_raw_data: "type_defs.BodySectionContentOutputTypeDef" = dataclasses.field()

    @cached_property
    def Layout(self):  # pragma: no cover
        return SectionLayoutConfigurationOutput.make_one(self.boto3_raw_data["Layout"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BodySectionContentOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BodySectionContentOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeaderFooterSectionConfigurationOutput:
    boto3_raw_data: "type_defs.HeaderFooterSectionConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    SectionId = field("SectionId")

    @cached_property
    def Layout(self):  # pragma: no cover
        return SectionLayoutConfigurationOutput.make_one(self.boto3_raw_data["Layout"])

    @cached_property
    def Style(self):  # pragma: no cover
        return SectionStyle.make_one(self.boto3_raw_data["Style"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HeaderFooterSectionConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeaderFooterSectionConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionContent:
    boto3_raw_data: "type_defs.BodySectionContentTypeDef" = dataclasses.field()

    @cached_property
    def Layout(self):  # pragma: no cover
        return SectionLayoutConfiguration.make_one(self.boto3_raw_data["Layout"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BodySectionContentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BodySectionContentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeaderFooterSectionConfiguration:
    boto3_raw_data: "type_defs.HeaderFooterSectionConfigurationTypeDef" = (
        dataclasses.field()
    )

    SectionId = field("SectionId")

    @cached_property
    def Layout(self):  # pragma: no cover
        return SectionLayoutConfiguration.make_one(self.boto3_raw_data["Layout"])

    @cached_property
    def Style(self):  # pragma: no cover
        return SectionStyle.make_one(self.boto3_raw_data["Style"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.HeaderFooterSectionConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeaderFooterSectionConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartDashboardSnapshotJobRequest:
    boto3_raw_data: "type_defs.StartDashboardSnapshotJobRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    SnapshotJobId = field("SnapshotJobId")

    @cached_property
    def UserConfiguration(self):  # pragma: no cover
        return SnapshotUserConfiguration.make_one(
            self.boto3_raw_data["UserConfiguration"]
        )

    SnapshotConfiguration = field("SnapshotConfiguration")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartDashboardSnapshotJobRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartDashboardSnapshotJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageCustomActionOperation:
    boto3_raw_data: "type_defs.ImageCustomActionOperationTypeDef" = dataclasses.field()

    @cached_property
    def NavigationOperation(self):  # pragma: no cover
        return CustomActionNavigationOperation.make_one(
            self.boto3_raw_data["NavigationOperation"]
        )

    @cached_property
    def URLOperation(self):  # pragma: no cover
        return CustomActionURLOperation.make_one(self.boto3_raw_data["URLOperation"])

    @cached_property
    def SetParametersOperation(self):  # pragma: no cover
        return CustomActionSetParametersOperation.make_one(
            self.boto3_raw_data["SetParametersOperation"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageCustomActionOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageCustomActionOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LayerCustomActionOperation:
    boto3_raw_data: "type_defs.LayerCustomActionOperationTypeDef" = dataclasses.field()

    @cached_property
    def FilterOperation(self):  # pragma: no cover
        return CustomActionFilterOperation.make_one(
            self.boto3_raw_data["FilterOperation"]
        )

    @cached_property
    def NavigationOperation(self):  # pragma: no cover
        return CustomActionNavigationOperation.make_one(
            self.boto3_raw_data["NavigationOperation"]
        )

    @cached_property
    def URLOperation(self):  # pragma: no cover
        return CustomActionURLOperation.make_one(self.boto3_raw_data["URLOperation"])

    @cached_property
    def SetParametersOperation(self):  # pragma: no cover
        return CustomActionSetParametersOperation.make_one(
            self.boto3_raw_data["SetParametersOperation"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LayerCustomActionOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LayerCustomActionOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualCustomActionOperation:
    boto3_raw_data: "type_defs.VisualCustomActionOperationTypeDef" = dataclasses.field()

    @cached_property
    def FilterOperation(self):  # pragma: no cover
        return CustomActionFilterOperation.make_one(
            self.boto3_raw_data["FilterOperation"]
        )

    @cached_property
    def NavigationOperation(self):  # pragma: no cover
        return CustomActionNavigationOperation.make_one(
            self.boto3_raw_data["NavigationOperation"]
        )

    @cached_property
    def URLOperation(self):  # pragma: no cover
        return CustomActionURLOperation.make_one(self.boto3_raw_data["URLOperation"])

    @cached_property
    def SetParametersOperation(self):  # pragma: no cover
        return CustomActionSetParametersOperation.make_one(
            self.boto3_raw_data["SetParametersOperation"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualCustomActionOperationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualCustomActionOperationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDataSetResponse:
    boto3_raw_data: "type_defs.DescribeDataSetResponseTypeDef" = dataclasses.field()

    @cached_property
    def DataSet(self):  # pragma: no cover
        return DataSet.make_one(self.boto3_raw_data["DataSet"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDataSetResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDataSetResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageCustomActionOutput:
    boto3_raw_data: "type_defs.ImageCustomActionOutputTypeDef" = dataclasses.field()

    CustomActionId = field("CustomActionId")
    Name = field("Name")
    Trigger = field("Trigger")

    @cached_property
    def ActionOperations(self):  # pragma: no cover
        return ImageCustomActionOperationOutput.make_many(
            self.boto3_raw_data["ActionOperations"]
        )

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImageCustomActionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageCustomActionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LayerCustomActionOutput:
    boto3_raw_data: "type_defs.LayerCustomActionOutputTypeDef" = dataclasses.field()

    CustomActionId = field("CustomActionId")
    Name = field("Name")
    Trigger = field("Trigger")

    @cached_property
    def ActionOperations(self):  # pragma: no cover
        return LayerCustomActionOperationOutput.make_many(
            self.boto3_raw_data["ActionOperations"]
        )

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LayerCustomActionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LayerCustomActionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualCustomActionOutput:
    boto3_raw_data: "type_defs.VisualCustomActionOutputTypeDef" = dataclasses.field()

    CustomActionId = field("CustomActionId")
    Name = field("Name")
    Trigger = field("Trigger")

    @cached_property
    def ActionOperations(self):  # pragma: no cover
        return VisualCustomActionOperationOutput.make_many(
            self.boto3_raw_data["ActionOperations"]
        )

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualCustomActionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualCustomActionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicVisualOutput:
    boto3_raw_data: "type_defs.TopicVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    Role = field("Role")

    @cached_property
    def Ir(self):  # pragma: no cover
        return TopicIROutput.make_one(self.boto3_raw_data["Ir"])

    SupportingVisuals = field("SupportingVisuals")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicVisualOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFilterControlConfigurationOutput:
    boto3_raw_data: "type_defs.DefaultFilterControlConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    Title = field("Title")

    @cached_property
    def ControlOptions(self):  # pragma: no cover
        return DefaultFilterControlOptionsOutput.make_one(
            self.boto3_raw_data["ControlOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultFilterControlConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFilterControlConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DefaultFilterControlConfiguration:
    boto3_raw_data: "type_defs.DefaultFilterControlConfigurationTypeDef" = (
        dataclasses.field()
    )

    Title = field("Title")

    @cached_property
    def ControlOptions(self):  # pragma: no cover
        return DefaultFilterControlOptions.make_one(
            self.boto3_raw_data["ControlOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DefaultFilterControlConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DefaultFilterControlConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldOption:
    boto3_raw_data: "type_defs.TableFieldOptionTypeDef" = dataclasses.field()

    FieldId = field("FieldId")
    Width = field("Width")
    CustomLabel = field("CustomLabel")
    Visibility = field("Visibility")

    @cached_property
    def URLStyling(self):  # pragma: no cover
        return TableFieldURLConfiguration.make_one(self.boto3_raw_data["URLStyling"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TableFieldOptionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPointLayerOutput:
    boto3_raw_data: "type_defs.GeospatialPointLayerOutputTypeDef" = dataclasses.field()

    @cached_property
    def Style(self):  # pragma: no cover
        return GeospatialPointStyleOutput.make_one(self.boto3_raw_data["Style"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPointLayerOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPointLayerOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLineLayerOutput:
    boto3_raw_data: "type_defs.GeospatialLineLayerOutputTypeDef" = dataclasses.field()

    @cached_property
    def Style(self):  # pragma: no cover
        return GeospatialLineStyleOutput.make_one(self.boto3_raw_data["Style"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLineLayerOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLineLayerOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPolygonLayerOutput:
    boto3_raw_data: "type_defs.GeospatialPolygonLayerOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Style(self):  # pragma: no cover
        return GeospatialPolygonStyleOutput.make_one(self.boto3_raw_data["Style"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPolygonLayerOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPolygonLayerOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPointLayer:
    boto3_raw_data: "type_defs.GeospatialPointLayerTypeDef" = dataclasses.field()

    @cached_property
    def Style(self):  # pragma: no cover
        return GeospatialPointStyle.make_one(self.boto3_raw_data["Style"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPointLayerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPointLayerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLineLayer:
    boto3_raw_data: "type_defs.GeospatialLineLayerTypeDef" = dataclasses.field()

    @cached_property
    def Style(self):  # pragma: no cover
        return GeospatialLineStyle.make_one(self.boto3_raw_data["Style"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLineLayerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLineLayerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialPolygonLayer:
    boto3_raw_data: "type_defs.GeospatialPolygonLayerTypeDef" = dataclasses.field()

    @cached_property
    def Style(self):  # pragma: no cover
        return GeospatialPolygonStyle.make_one(self.boto3_raw_data["Style"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialPolygonLayerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialPolygonLayerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartConditionalFormattingOutput:
    boto3_raw_data: "type_defs.GaugeChartConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return GaugeChartConditionalFormattingOptionOutput.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GaugeChartConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIConditionalFormattingOutput:
    boto3_raw_data: "type_defs.KPIConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return KPIConditionalFormattingOptionOutput.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.KPIConditionalFormattingOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapConditionalFormattingOptionOutput:
    boto3_raw_data: "type_defs.FilledMapConditionalFormattingOptionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Shape(self):  # pragma: no cover
        return FilledMapShapeConditionalFormattingOutput.make_one(
            self.boto3_raw_data["Shape"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilledMapConditionalFormattingOptionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapConditionalFormattingOptionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableConditionalFormattingOptionOutput:
    boto3_raw_data: "type_defs.PivotTableConditionalFormattingOptionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Cell(self):  # pragma: no cover
        return PivotTableCellConditionalFormattingOutput.make_one(
            self.boto3_raw_data["Cell"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableConditionalFormattingOptionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableConditionalFormattingOptionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableConditionalFormattingOptionOutput:
    boto3_raw_data: "type_defs.TableConditionalFormattingOptionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Cell(self):  # pragma: no cover
        return TableCellConditionalFormattingOutput.make_one(
            self.boto3_raw_data["Cell"]
        )

    @cached_property
    def Row(self):  # pragma: no cover
        return TableRowConditionalFormattingOutput.make_one(self.boto3_raw_data["Row"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TableConditionalFormattingOptionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableConditionalFormattingOptionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartConditionalFormatting:
    boto3_raw_data: "type_defs.GaugeChartConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return GaugeChartConditionalFormattingOption.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GaugeChartConditionalFormattingTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIConditionalFormatting:
    boto3_raw_data: "type_defs.KPIConditionalFormattingTypeDef" = dataclasses.field()

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return KPIConditionalFormattingOption.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KPIConditionalFormattingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapConditionalFormattingOption:
    boto3_raw_data: "type_defs.FilledMapConditionalFormattingOptionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Shape(self):  # pragma: no cover
        return FilledMapShapeConditionalFormatting.make_one(
            self.boto3_raw_data["Shape"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilledMapConditionalFormattingOptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapConditionalFormattingOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableConditionalFormattingOption:
    boto3_raw_data: "type_defs.PivotTableConditionalFormattingOptionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Cell(self):  # pragma: no cover
        return PivotTableCellConditionalFormatting.make_one(self.boto3_raw_data["Cell"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableConditionalFormattingOptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableConditionalFormattingOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableConditionalFormattingOption:
    boto3_raw_data: "type_defs.TableConditionalFormattingOptionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Cell(self):  # pragma: no cover
        return TableCellConditionalFormatting.make_one(self.boto3_raw_data["Cell"])

    @cached_property
    def Row(self):  # pragma: no cover
        return TableRowConditionalFormatting.make_one(self.boto3_raw_data["Row"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TableConditionalFormattingOptionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableConditionalFormattingOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateBrandRequest:
    boto3_raw_data: "type_defs.CreateBrandRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    BrandId = field("BrandId")

    @cached_property
    def BrandDefinition(self):  # pragma: no cover
        return BrandDefinition.make_one(self.boto3_raw_data["BrandDefinition"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateBrandRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateBrandRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateBrandRequest:
    boto3_raw_data: "type_defs.UpdateBrandRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    BrandId = field("BrandId")

    @cached_property
    def BrandDefinition(self):  # pragma: no cover
        return BrandDefinition.make_one(self.boto3_raw_data["BrandDefinition"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateBrandRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateBrandRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateBrandResponse:
    boto3_raw_data: "type_defs.CreateBrandResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")

    @cached_property
    def BrandDetail(self):  # pragma: no cover
        return BrandDetail.make_one(self.boto3_raw_data["BrandDetail"])

    @cached_property
    def BrandDefinition(self):  # pragma: no cover
        return BrandDefinition.make_one(self.boto3_raw_data["BrandDefinition"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateBrandResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateBrandResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeBrandPublishedVersionResponse:
    boto3_raw_data: "type_defs.DescribeBrandPublishedVersionResponseTypeDef" = (
        dataclasses.field()
    )

    RequestId = field("RequestId")

    @cached_property
    def BrandDetail(self):  # pragma: no cover
        return BrandDetail.make_one(self.boto3_raw_data["BrandDetail"])

    @cached_property
    def BrandDefinition(self):  # pragma: no cover
        return BrandDefinition.make_one(self.boto3_raw_data["BrandDefinition"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeBrandPublishedVersionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeBrandPublishedVersionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeBrandResponse:
    boto3_raw_data: "type_defs.DescribeBrandResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")

    @cached_property
    def BrandDetail(self):  # pragma: no cover
        return BrandDetail.make_one(self.boto3_raw_data["BrandDetail"])

    @cached_property
    def BrandDefinition(self):  # pragma: no cover
        return BrandDefinition.make_one(self.boto3_raw_data["BrandDefinition"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeBrandResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeBrandResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateBrandResponse:
    boto3_raw_data: "type_defs.UpdateBrandResponseTypeDef" = dataclasses.field()

    RequestId = field("RequestId")

    @cached_property
    def BrandDetail(self):  # pragma: no cover
        return BrandDetail.make_one(self.boto3_raw_data["BrandDetail"])

    @cached_property
    def BrandDefinition(self):  # pragma: no cover
        return BrandDefinition.make_one(self.boto3_raw_data["BrandDefinition"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateBrandResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateBrandResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAssetBundleImportJobResponse:
    boto3_raw_data: "type_defs.DescribeAssetBundleImportJobResponseTypeDef" = (
        dataclasses.field()
    )

    JobStatus = field("JobStatus")

    @cached_property
    def Errors(self):  # pragma: no cover
        return AssetBundleImportJobError.make_many(self.boto3_raw_data["Errors"])

    @cached_property
    def RollbackErrors(self):  # pragma: no cover
        return AssetBundleImportJobError.make_many(
            self.boto3_raw_data["RollbackErrors"]
        )

    Arn = field("Arn")
    CreatedTime = field("CreatedTime")
    AssetBundleImportJobId = field("AssetBundleImportJobId")
    AwsAccountId = field("AwsAccountId")

    @cached_property
    def AssetBundleImportSource(self):  # pragma: no cover
        return AssetBundleImportSourceDescription.make_one(
            self.boto3_raw_data["AssetBundleImportSource"]
        )

    @cached_property
    def OverrideParameters(self):  # pragma: no cover
        return AssetBundleImportJobOverrideParametersOutput.make_one(
            self.boto3_raw_data["OverrideParameters"]
        )

    FailureAction = field("FailureAction")
    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def OverridePermissions(self):  # pragma: no cover
        return AssetBundleImportJobOverridePermissionsOutput.make_one(
            self.boto3_raw_data["OverridePermissions"]
        )

    @cached_property
    def OverrideTags(self):  # pragma: no cover
        return AssetBundleImportJobOverrideTagsOutput.make_one(
            self.boto3_raw_data["OverrideTags"]
        )

    @cached_property
    def OverrideValidationStrategy(self):  # pragma: no cover
        return AssetBundleImportJobOverrideValidationStrategy.make_one(
            self.boto3_raw_data["OverrideValidationStrategy"]
        )

    @cached_property
    def Warnings(self):  # pragma: no cover
        return AssetBundleImportJobWarning.make_many(self.boto3_raw_data["Warnings"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAssetBundleImportJobResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAssetBundleImportJobResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeThemeResponse:
    boto3_raw_data: "type_defs.DescribeThemeResponseTypeDef" = dataclasses.field()

    @cached_property
    def Theme(self):  # pragma: no cover
        return Theme.make_one(self.boto3_raw_data["Theme"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeThemeResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeThemeResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ReferenceLine:
    boto3_raw_data: "type_defs.ReferenceLineTypeDef" = dataclasses.field()

    @cached_property
    def DataConfiguration(self):  # pragma: no cover
        return ReferenceLineDataConfiguration.make_one(
            self.boto3_raw_data["DataConfiguration"]
        )

    Status = field("Status")

    @cached_property
    def StyleConfiguration(self):  # pragma: no cover
        return ReferenceLineStyleConfiguration.make_one(
            self.boto3_raw_data["StyleConfiguration"]
        )

    @cached_property
    def LabelConfiguration(self):  # pragma: no cover
        return ReferenceLineLabelConfiguration.make_one(
            self.boto3_raw_data["LabelConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ReferenceLineTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ReferenceLineTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DimensionField:
    boto3_raw_data: "type_defs.DimensionFieldTypeDef" = dataclasses.field()

    @cached_property
    def NumericalDimensionField(self):  # pragma: no cover
        return NumericalDimensionField.make_one(
            self.boto3_raw_data["NumericalDimensionField"]
        )

    @cached_property
    def CategoricalDimensionField(self):  # pragma: no cover
        return CategoricalDimensionField.make_one(
            self.boto3_raw_data["CategoricalDimensionField"]
        )

    @cached_property
    def DateDimensionField(self):  # pragma: no cover
        return DateDimensionField.make_one(self.boto3_raw_data["DateDimensionField"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DimensionFieldTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DimensionFieldTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MeasureField:
    boto3_raw_data: "type_defs.MeasureFieldTypeDef" = dataclasses.field()

    @cached_property
    def NumericalMeasureField(self):  # pragma: no cover
        return NumericalMeasureField.make_one(
            self.boto3_raw_data["NumericalMeasureField"]
        )

    @cached_property
    def CategoricalMeasureField(self):  # pragma: no cover
        return CategoricalMeasureField.make_one(
            self.boto3_raw_data["CategoricalMeasureField"]
        )

    @cached_property
    def DateMeasureField(self):  # pragma: no cover
        return DateMeasureField.make_one(self.boto3_raw_data["DateMeasureField"])

    @cached_property
    def CalculatedMeasureField(self):  # pragma: no cover
        return CalculatedMeasureField.make_one(
            self.boto3_raw_data["CalculatedMeasureField"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MeasureFieldTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MeasureFieldTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnConfigurationOutput:
    boto3_raw_data: "type_defs.ColumnConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return FormatConfiguration.make_one(self.boto3_raw_data["FormatConfiguration"])

    Role = field("Role")

    @cached_property
    def ColorsConfiguration(self):  # pragma: no cover
        return ColorsConfigurationOutput.make_one(
            self.boto3_raw_data["ColorsConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ColumnConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ColumnConfiguration:
    boto3_raw_data: "type_defs.ColumnConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return FormatConfiguration.make_one(self.boto3_raw_data["FormatConfiguration"])

    Role = field("Role")

    @cached_property
    def ColorsConfiguration(self):  # pragma: no cover
        return ColorsConfiguration.make_one(self.boto3_raw_data["ColorsConfiguration"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ColumnConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ColumnConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnaggregatedField:
    boto3_raw_data: "type_defs.UnaggregatedFieldTypeDef" = dataclasses.field()

    FieldId = field("FieldId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def FormatConfiguration(self):  # pragma: no cover
        return FormatConfiguration.make_one(self.boto3_raw_data["FormatConfiguration"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UnaggregatedFieldTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnaggregatedFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionRepeatConfigurationOutput:
    boto3_raw_data: "type_defs.BodySectionRepeatConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DimensionConfigurations(self):  # pragma: no cover
        return BodySectionRepeatDimensionConfigurationOutput.make_many(
            self.boto3_raw_data["DimensionConfigurations"]
        )

    @cached_property
    def PageBreakConfiguration(self):  # pragma: no cover
        return BodySectionRepeatPageBreakConfiguration.make_one(
            self.boto3_raw_data["PageBreakConfiguration"]
        )

    NonRepeatingVisuals = field("NonRepeatingVisuals")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BodySectionRepeatConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BodySectionRepeatConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionRepeatConfiguration:
    boto3_raw_data: "type_defs.BodySectionRepeatConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DimensionConfigurations(self):  # pragma: no cover
        return BodySectionRepeatDimensionConfiguration.make_many(
            self.boto3_raw_data["DimensionConfigurations"]
        )

    @cached_property
    def PageBreakConfiguration(self):  # pragma: no cover
        return BodySectionRepeatPageBreakConfiguration.make_one(
            self.boto3_raw_data["PageBreakConfiguration"]
        )

    NonRepeatingVisuals = field("NonRepeatingVisuals")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BodySectionRepeatConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BodySectionRepeatConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualSortConfigurationOutput:
    boto3_raw_data: "type_defs.PluginVisualSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PluginVisualTableQuerySort(self):  # pragma: no cover
        return PluginVisualTableQuerySortOutput.make_one(
            self.boto3_raw_data["PluginVisualTableQuerySort"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PluginVisualSortConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualSortConfiguration:
    boto3_raw_data: "type_defs.PluginVisualSortConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PluginVisualTableQuerySort(self):  # pragma: no cover
        return PluginVisualTableQuerySort.make_one(
            self.boto3_raw_data["PluginVisualTableQuerySort"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PluginVisualSortConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableSortConfigurationOutput:
    boto3_raw_data: "type_defs.PivotTableSortConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldSortOptions(self):  # pragma: no cover
        return PivotFieldSortOptionsOutput.make_many(
            self.boto3_raw_data["FieldSortOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableSortConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableSortConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableSortConfiguration:
    boto3_raw_data: "type_defs.PivotTableSortConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldSortOptions(self):  # pragma: no cover
        return PivotFieldSortOptions.make_many(self.boto3_raw_data["FieldSortOptions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableSortConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableSortConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TooltipOptionsOutput:
    boto3_raw_data: "type_defs.TooltipOptionsOutputTypeDef" = dataclasses.field()

    TooltipVisibility = field("TooltipVisibility")
    SelectedTooltipType = field("SelectedTooltipType")

    @cached_property
    def FieldBasedTooltip(self):  # pragma: no cover
        return FieldBasedTooltipOutput.make_one(
            self.boto3_raw_data["FieldBasedTooltip"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TooltipOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TooltipOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TooltipOptions:
    boto3_raw_data: "type_defs.TooltipOptionsTypeDef" = dataclasses.field()

    TooltipVisibility = field("TooltipVisibility")
    SelectedTooltipType = field("SelectedTooltipType")

    @cached_property
    def FieldBasedTooltip(self):  # pragma: no cover
        return FieldBasedTooltip.make_one(self.boto3_raw_data["FieldBasedTooltip"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TooltipOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TooltipOptionsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTopicResponse:
    boto3_raw_data: "type_defs.DescribeTopicResponseTypeDef" = dataclasses.field()

    Arn = field("Arn")
    TopicId = field("TopicId")

    @cached_property
    def Topic(self):  # pragma: no cover
        return TopicDetailsOutput.make_one(self.boto3_raw_data["Topic"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def CustomInstructions(self):  # pragma: no cover
        return CustomInstructions.make_one(self.boto3_raw_data["CustomInstructions"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTopicResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTopicResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssetBundleImportJobOverrideParameters:
    boto3_raw_data: "type_defs.AssetBundleImportJobOverrideParametersTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ResourceIdOverrideConfiguration(self):  # pragma: no cover
        return AssetBundleImportJobResourceIdOverrideConfiguration.make_one(
            self.boto3_raw_data["ResourceIdOverrideConfiguration"]
        )

    @cached_property
    def VPCConnections(self):  # pragma: no cover
        return AssetBundleImportJobVPCConnectionOverrideParameters.make_many(
            self.boto3_raw_data["VPCConnections"]
        )

    @cached_property
    def RefreshSchedules(self):  # pragma: no cover
        return AssetBundleImportJobRefreshScheduleOverrideParameters.make_many(
            self.boto3_raw_data["RefreshSchedules"]
        )

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AssetBundleImportJobDataSourceOverrideParameters.make_many(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def DataSets(self):  # pragma: no cover
        return AssetBundleImportJobDataSetOverrideParameters.make_many(
            self.boto3_raw_data["DataSets"]
        )

    @cached_property
    def Themes(self):  # pragma: no cover
        return AssetBundleImportJobThemeOverrideParameters.make_many(
            self.boto3_raw_data["Themes"]
        )

    @cached_property
    def Analyses(self):  # pragma: no cover
        return AssetBundleImportJobAnalysisOverrideParameters.make_many(
            self.boto3_raw_data["Analyses"]
        )

    @cached_property
    def Dashboards(self):  # pragma: no cover
        return AssetBundleImportJobDashboardOverrideParameters.make_many(
            self.boto3_raw_data["Dashboards"]
        )

    @cached_property
    def Folders(self):  # pragma: no cover
        return AssetBundleImportJobFolderOverrideParameters.make_many(
            self.boto3_raw_data["Folders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AssetBundleImportJobOverrideParametersTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssetBundleImportJobOverrideParametersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CredentialPair:
    boto3_raw_data: "type_defs.CredentialPairTypeDef" = dataclasses.field()

    Username = field("Username")
    Password = field("Password")
    AlternateDataSourceParameters = field("AlternateDataSourceParameters")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CredentialPairTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CredentialPairTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardSnapshotJobResultResponse:
    boto3_raw_data: "type_defs.DescribeDashboardSnapshotJobResultResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    JobStatus = field("JobStatus")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @cached_property
    def Result(self):  # pragma: no cover
        return SnapshotJobResult.make_one(self.boto3_raw_data["Result"])

    @cached_property
    def ErrorInfo(self):  # pragma: no cover
        return SnapshotJobErrorInfo.make_one(self.boto3_raw_data["ErrorInfo"])

    RequestId = field("RequestId")
    Status = field("Status")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardSnapshotJobResultResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardSnapshotJobResultResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisDefaults:
    boto3_raw_data: "type_defs.AnalysisDefaultsTypeDef" = dataclasses.field()

    @cached_property
    def DefaultNewSheetConfiguration(self):  # pragma: no cover
        return DefaultNewSheetConfiguration.make_one(
            self.boto3_raw_data["DefaultNewSheetConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AnalysisDefaultsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisDefaultsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImageCustomAction:
    boto3_raw_data: "type_defs.ImageCustomActionTypeDef" = dataclasses.field()

    CustomActionId = field("CustomActionId")
    Name = field("Name")
    Trigger = field("Trigger")

    @cached_property
    def ActionOperations(self):  # pragma: no cover
        return ImageCustomActionOperation.make_many(
            self.boto3_raw_data["ActionOperations"]
        )

    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ImageCustomActionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImageCustomActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LayerCustomAction:
    boto3_raw_data: "type_defs.LayerCustomActionTypeDef" = dataclasses.field()

    CustomActionId = field("CustomActionId")
    Name = field("Name")
    Trigger = field("Trigger")

    @cached_property
    def ActionOperations(self):  # pragma: no cover
        return LayerCustomActionOperation.make_many(
            self.boto3_raw_data["ActionOperations"]
        )

    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LayerCustomActionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LayerCustomActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualCustomAction:
    boto3_raw_data: "type_defs.VisualCustomActionTypeDef" = dataclasses.field()

    CustomActionId = field("CustomActionId")
    Name = field("Name")
    Trigger = field("Trigger")

    @cached_property
    def ActionOperations(self):  # pragma: no cover
        return VisualCustomActionOperation.make_many(
            self.boto3_raw_data["ActionOperations"]
        )

    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VisualCustomActionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VisualCustomActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LogicalTable:
    boto3_raw_data: "type_defs.LogicalTableTypeDef" = dataclasses.field()

    Alias = field("Alias")

    @cached_property
    def Source(self):  # pragma: no cover
        return LogicalTableSource.make_one(self.boto3_raw_data["Source"])

    DataTransforms = field("DataTransforms")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LogicalTableTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LogicalTableTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIRContributionAnalysis:
    boto3_raw_data: "type_defs.TopicIRContributionAnalysisTypeDef" = dataclasses.field()

    @cached_property
    def Factors(self):  # pragma: no cover
        return ContributionAnalysisFactor.make_many(self.boto3_raw_data["Factors"])

    TimeRanges = field("TimeRanges")
    Direction = field("Direction")
    SortType = field("SortType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicIRContributionAnalysisTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicIRContributionAnalysisTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetImageOutput:
    boto3_raw_data: "type_defs.SheetImageOutputTypeDef" = dataclasses.field()

    SheetImageId = field("SheetImageId")

    @cached_property
    def Source(self):  # pragma: no cover
        return SheetImageSource.make_one(self.boto3_raw_data["Source"])

    @cached_property
    def Scaling(self):  # pragma: no cover
        return SheetImageScalingConfiguration.make_one(self.boto3_raw_data["Scaling"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return SheetImageTooltipConfiguration.make_one(self.boto3_raw_data["Tooltip"])

    ImageContentAltText = field("ImageContentAltText")

    @cached_property
    def Interactions(self):  # pragma: no cover
        return ImageInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return ImageCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SheetImageOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetImageOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomContentVisualOutput:
    boto3_raw_data: "type_defs.CustomContentVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    DataSetIdentifier = field("DataSetIdentifier")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return CustomContentConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomContentVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomContentVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EmptyVisualOutput:
    boto3_raw_data: "type_defs.EmptyVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    DataSetIdentifier = field("DataSetIdentifier")

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EmptyVisualOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EmptyVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicReviewedAnswer:
    boto3_raw_data: "type_defs.TopicReviewedAnswerTypeDef" = dataclasses.field()

    AnswerId = field("AnswerId")
    DatasetArn = field("DatasetArn")
    Question = field("Question")
    Arn = field("Arn")

    @cached_property
    def Mir(self):  # pragma: no cover
        return TopicIROutput.make_one(self.boto3_raw_data["Mir"])

    @cached_property
    def PrimaryVisual(self):  # pragma: no cover
        return TopicVisualOutput.make_one(self.boto3_raw_data["PrimaryVisual"])

    @cached_property
    def Template(self):  # pragma: no cover
        return TopicTemplateOutput.make_one(self.boto3_raw_data["Template"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopicReviewedAnswerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopicReviewedAnswerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoryFilterOutput:
    boto3_raw_data: "type_defs.CategoryFilterOutputTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def Configuration(self):  # pragma: no cover
        return CategoryFilterConfigurationOutput.make_one(
            self.boto3_raw_data["Configuration"]
        )

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfigurationOutput.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoryFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoryFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoryInnerFilterOutput:
    boto3_raw_data: "type_defs.CategoryInnerFilterOutputTypeDef" = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def Configuration(self):  # pragma: no cover
        return CategoryFilterConfigurationOutput.make_one(
            self.boto3_raw_data["Configuration"]
        )

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfigurationOutput.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoryInnerFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoryInnerFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericEqualityFilterOutput:
    boto3_raw_data: "type_defs.NumericEqualityFilterOutputTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    MatchOperator = field("MatchOperator")
    NullOption = field("NullOption")
    Value = field("Value")
    SelectAllOptions = field("SelectAllOptions")

    @cached_property
    def AggregationFunction(self):  # pragma: no cover
        return AggregationFunction.make_one(self.boto3_raw_data["AggregationFunction"])

    ParameterName = field("ParameterName")

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfigurationOutput.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericEqualityFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericEqualityFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericRangeFilterOutput:
    boto3_raw_data: "type_defs.NumericRangeFilterOutputTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    NullOption = field("NullOption")
    IncludeMinimum = field("IncludeMinimum")
    IncludeMaximum = field("IncludeMaximum")

    @cached_property
    def RangeMinimum(self):  # pragma: no cover
        return NumericRangeFilterValue.make_one(self.boto3_raw_data["RangeMinimum"])

    @cached_property
    def RangeMaximum(self):  # pragma: no cover
        return NumericRangeFilterValue.make_one(self.boto3_raw_data["RangeMaximum"])

    SelectAllOptions = field("SelectAllOptions")

    @cached_property
    def AggregationFunction(self):  # pragma: no cover
        return AggregationFunction.make_one(self.boto3_raw_data["AggregationFunction"])

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfigurationOutput.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericRangeFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericRangeFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RelativeDatesFilterOutput:
    boto3_raw_data: "type_defs.RelativeDatesFilterOutputTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def AnchorDateConfiguration(self):  # pragma: no cover
        return AnchorDateConfiguration.make_one(
            self.boto3_raw_data["AnchorDateConfiguration"]
        )

    TimeGranularity = field("TimeGranularity")
    RelativeDateType = field("RelativeDateType")
    NullOption = field("NullOption")
    MinimumGranularity = field("MinimumGranularity")
    RelativeDateValue = field("RelativeDateValue")
    ParameterName = field("ParameterName")

    @cached_property
    def ExcludePeriodConfiguration(self):  # pragma: no cover
        return ExcludePeriodConfiguration.make_one(
            self.boto3_raw_data["ExcludePeriodConfiguration"]
        )

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfigurationOutput.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RelativeDatesFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RelativeDatesFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeEqualityFilterOutput:
    boto3_raw_data: "type_defs.TimeEqualityFilterOutputTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    Value = field("Value")
    ParameterName = field("ParameterName")
    TimeGranularity = field("TimeGranularity")

    @cached_property
    def RollingDate(self):  # pragma: no cover
        return RollingDateConfiguration.make_one(self.boto3_raw_data["RollingDate"])

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfigurationOutput.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TimeEqualityFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeEqualityFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeRangeFilterOutput:
    boto3_raw_data: "type_defs.TimeRangeFilterOutputTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    NullOption = field("NullOption")
    IncludeMinimum = field("IncludeMinimum")
    IncludeMaximum = field("IncludeMaximum")

    @cached_property
    def RangeMinimumValue(self):  # pragma: no cover
        return TimeRangeFilterValueOutput.make_one(
            self.boto3_raw_data["RangeMinimumValue"]
        )

    @cached_property
    def RangeMaximumValue(self):  # pragma: no cover
        return TimeRangeFilterValueOutput.make_one(
            self.boto3_raw_data["RangeMaximumValue"]
        )

    @cached_property
    def ExcludePeriodConfiguration(self):  # pragma: no cover
        return ExcludePeriodConfiguration.make_one(
            self.boto3_raw_data["ExcludePeriodConfiguration"]
        )

    TimeGranularity = field("TimeGranularity")

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfigurationOutput.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TimeRangeFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeRangeFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopBottomFilterOutput:
    boto3_raw_data: "type_defs.TopBottomFilterOutputTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def AggregationSortConfigurations(self):  # pragma: no cover
        return AggregationSortConfiguration.make_many(
            self.boto3_raw_data["AggregationSortConfigurations"]
        )

    Limit = field("Limit")
    TimeGranularity = field("TimeGranularity")
    ParameterName = field("ParameterName")

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfigurationOutput.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopBottomFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopBottomFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoryFilter:
    boto3_raw_data: "type_defs.CategoryFilterTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def Configuration(self):  # pragma: no cover
        return CategoryFilterConfiguration.make_one(
            self.boto3_raw_data["Configuration"]
        )

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfiguration.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CategoryFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CategoryFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CategoryInnerFilter:
    boto3_raw_data: "type_defs.CategoryInnerFilterTypeDef" = dataclasses.field()

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def Configuration(self):  # pragma: no cover
        return CategoryFilterConfiguration.make_one(
            self.boto3_raw_data["Configuration"]
        )

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfiguration.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CategoryInnerFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CategoryInnerFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericEqualityFilter:
    boto3_raw_data: "type_defs.NumericEqualityFilterTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    MatchOperator = field("MatchOperator")
    NullOption = field("NullOption")
    Value = field("Value")
    SelectAllOptions = field("SelectAllOptions")

    @cached_property
    def AggregationFunction(self):  # pragma: no cover
        return AggregationFunction.make_one(self.boto3_raw_data["AggregationFunction"])

    ParameterName = field("ParameterName")

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfiguration.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericEqualityFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericEqualityFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumericRangeFilter:
    boto3_raw_data: "type_defs.NumericRangeFilterTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    NullOption = field("NullOption")
    IncludeMinimum = field("IncludeMinimum")
    IncludeMaximum = field("IncludeMaximum")

    @cached_property
    def RangeMinimum(self):  # pragma: no cover
        return NumericRangeFilterValue.make_one(self.boto3_raw_data["RangeMinimum"])

    @cached_property
    def RangeMaximum(self):  # pragma: no cover
        return NumericRangeFilterValue.make_one(self.boto3_raw_data["RangeMaximum"])

    SelectAllOptions = field("SelectAllOptions")

    @cached_property
    def AggregationFunction(self):  # pragma: no cover
        return AggregationFunction.make_one(self.boto3_raw_data["AggregationFunction"])

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfiguration.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NumericRangeFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NumericRangeFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RelativeDatesFilter:
    boto3_raw_data: "type_defs.RelativeDatesFilterTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def AnchorDateConfiguration(self):  # pragma: no cover
        return AnchorDateConfiguration.make_one(
            self.boto3_raw_data["AnchorDateConfiguration"]
        )

    TimeGranularity = field("TimeGranularity")
    RelativeDateType = field("RelativeDateType")
    NullOption = field("NullOption")
    MinimumGranularity = field("MinimumGranularity")
    RelativeDateValue = field("RelativeDateValue")
    ParameterName = field("ParameterName")

    @cached_property
    def ExcludePeriodConfiguration(self):  # pragma: no cover
        return ExcludePeriodConfiguration.make_one(
            self.boto3_raw_data["ExcludePeriodConfiguration"]
        )

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfiguration.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RelativeDatesFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RelativeDatesFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeEqualityFilter:
    boto3_raw_data: "type_defs.TimeEqualityFilterTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    Value = field("Value")
    ParameterName = field("ParameterName")
    TimeGranularity = field("TimeGranularity")

    @cached_property
    def RollingDate(self):  # pragma: no cover
        return RollingDateConfiguration.make_one(self.boto3_raw_data["RollingDate"])

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfiguration.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TimeEqualityFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TimeEqualityFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TimeRangeFilter:
    boto3_raw_data: "type_defs.TimeRangeFilterTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    NullOption = field("NullOption")
    IncludeMinimum = field("IncludeMinimum")
    IncludeMaximum = field("IncludeMaximum")

    @cached_property
    def RangeMinimumValue(self):  # pragma: no cover
        return TimeRangeFilterValue.make_one(self.boto3_raw_data["RangeMinimumValue"])

    @cached_property
    def RangeMaximumValue(self):  # pragma: no cover
        return TimeRangeFilterValue.make_one(self.boto3_raw_data["RangeMaximumValue"])

    @cached_property
    def ExcludePeriodConfiguration(self):  # pragma: no cover
        return ExcludePeriodConfiguration.make_one(
            self.boto3_raw_data["ExcludePeriodConfiguration"]
        )

    TimeGranularity = field("TimeGranularity")

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfiguration.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TimeRangeFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TimeRangeFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopBottomFilter:
    boto3_raw_data: "type_defs.TopBottomFilterTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    @cached_property
    def AggregationSortConfigurations(self):  # pragma: no cover
        return AggregationSortConfiguration.make_many(
            self.boto3_raw_data["AggregationSortConfigurations"]
        )

    Limit = field("Limit")
    TimeGranularity = field("TimeGranularity")
    ParameterName = field("ParameterName")

    @cached_property
    def DefaultFilterControlConfiguration(self):  # pragma: no cover
        return DefaultFilterControlConfiguration.make_one(
            self.boto3_raw_data["DefaultFilterControlConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopBottomFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopBottomFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldOptionsOutput:
    boto3_raw_data: "type_defs.TableFieldOptionsOutputTypeDef" = dataclasses.field()

    @cached_property
    def SelectedFieldOptions(self):  # pragma: no cover
        return TableFieldOption.make_many(self.boto3_raw_data["SelectedFieldOptions"])

    Order = field("Order")

    @cached_property
    def PinnedFieldOptions(self):  # pragma: no cover
        return TablePinnedFieldOptionsOutput.make_one(
            self.boto3_raw_data["PinnedFieldOptions"]
        )

    @cached_property
    def TransposedTableOptions(self):  # pragma: no cover
        return TransposedTableOption.make_many(
            self.boto3_raw_data["TransposedTableOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableFieldOptionsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldOptions:
    boto3_raw_data: "type_defs.TableFieldOptionsTypeDef" = dataclasses.field()

    @cached_property
    def SelectedFieldOptions(self):  # pragma: no cover
        return TableFieldOption.make_many(self.boto3_raw_data["SelectedFieldOptions"])

    Order = field("Order")

    @cached_property
    def PinnedFieldOptions(self):  # pragma: no cover
        return TablePinnedFieldOptions.make_one(
            self.boto3_raw_data["PinnedFieldOptions"]
        )

    @cached_property
    def TransposedTableOptions(self):  # pragma: no cover
        return TransposedTableOption.make_many(
            self.boto3_raw_data["TransposedTableOptions"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TableFieldOptionsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerDefinitionOutput:
    boto3_raw_data: "type_defs.GeospatialLayerDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PointLayer(self):  # pragma: no cover
        return GeospatialPointLayerOutput.make_one(self.boto3_raw_data["PointLayer"])

    @cached_property
    def LineLayer(self):  # pragma: no cover
        return GeospatialLineLayerOutput.make_one(self.boto3_raw_data["LineLayer"])

    @cached_property
    def PolygonLayer(self):  # pragma: no cover
        return GeospatialPolygonLayerOutput.make_one(
            self.boto3_raw_data["PolygonLayer"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialLayerDefinitionOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerDefinition:
    boto3_raw_data: "type_defs.GeospatialLayerDefinitionTypeDef" = dataclasses.field()

    @cached_property
    def PointLayer(self):  # pragma: no cover
        return GeospatialPointLayer.make_one(self.boto3_raw_data["PointLayer"])

    @cached_property
    def LineLayer(self):  # pragma: no cover
        return GeospatialLineLayer.make_one(self.boto3_raw_data["LineLayer"])

    @cached_property
    def PolygonLayer(self):  # pragma: no cover
        return GeospatialPolygonLayer.make_one(self.boto3_raw_data["PolygonLayer"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLayerDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapConditionalFormattingOutput:
    boto3_raw_data: "type_defs.FilledMapConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return FilledMapConditionalFormattingOptionOutput.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilledMapConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableConditionalFormattingOutput:
    boto3_raw_data: "type_defs.PivotTableConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return PivotTableConditionalFormattingOptionOutput.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableConditionalFormattingOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableConditionalFormattingOutput:
    boto3_raw_data: "type_defs.TableConditionalFormattingOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return TableConditionalFormattingOptionOutput.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TableConditionalFormattingOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableConditionalFormattingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapConditionalFormatting:
    boto3_raw_data: "type_defs.FilledMapConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return FilledMapConditionalFormattingOption.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FilledMapConditionalFormattingTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableConditionalFormatting:
    boto3_raw_data: "type_defs.PivotTableConditionalFormattingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return PivotTableConditionalFormattingOption.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PivotTableConditionalFormattingTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableConditionalFormatting:
    boto3_raw_data: "type_defs.TableConditionalFormattingTypeDef" = dataclasses.field()

    @cached_property
    def ConditionalFormattingOptions(self):  # pragma: no cover
        return TableConditionalFormattingOption.make_many(
            self.boto3_raw_data["ConditionalFormattingOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableConditionalFormattingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableConditionalFormattingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UniqueValuesComputation:
    boto3_raw_data: "type_defs.UniqueValuesComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Name = field("Name")

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Category"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UniqueValuesComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UniqueValuesComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.BarChartAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Colors"])

    @cached_property
    def SmallMultiples(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["SmallMultiples"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BarChartAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BarChartAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartAggregatedFieldWells:
    boto3_raw_data: "type_defs.BarChartAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Colors"])

    @cached_property
    def SmallMultiples(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["SmallMultiples"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BarChartAggregatedFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BarChartAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.BoxPlotAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupBy(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["GroupBy"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BoxPlotAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotAggregatedFieldWells:
    boto3_raw_data: "type_defs.BoxPlotAggregatedFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def GroupBy(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["GroupBy"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BoxPlotAggregatedFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.ComboChartAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def BarValues(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["BarValues"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Colors"])

    @cached_property
    def LineValues(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["LineValues"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ComboChartAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartAggregatedFieldWells:
    boto3_raw_data: "type_defs.ComboChartAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def BarValues(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["BarValues"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Colors"])

    @cached_property
    def LineValues(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["LineValues"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ComboChartAggregatedFieldWellsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.FilledMapAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Geospatial(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Geospatial"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FilledMapAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapAggregatedFieldWells:
    boto3_raw_data: "type_defs.FilledMapAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Geospatial(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Geospatial"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FilledMapAggregatedFieldWellsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ForecastComputation:
    boto3_raw_data: "type_defs.ForecastComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Name = field("Name")

    @cached_property
    def Time(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Time"])

    @cached_property
    def Value(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["Value"])

    PeriodsForward = field("PeriodsForward")
    PeriodsBackward = field("PeriodsBackward")
    UpperBoundary = field("UpperBoundary")
    LowerBoundary = field("LowerBoundary")
    PredictionInterval = field("PredictionInterval")
    Seasonality = field("Seasonality")
    CustomSeasonalityValue = field("CustomSeasonalityValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ForecastComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ForecastComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.FunnelChartAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FunnelChartAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartAggregatedFieldWells:
    boto3_raw_data: "type_defs.FunnelChartAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FunnelChartAggregatedFieldWellsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartFieldWellsOutput:
    boto3_raw_data: "type_defs.GaugeChartFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def TargetValues(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["TargetValues"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GaugeChartFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartFieldWells:
    boto3_raw_data: "type_defs.GaugeChartFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def TargetValues(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["TargetValues"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GaugeChartFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerColorFieldOutput:
    boto3_raw_data: "type_defs.GeospatialLayerColorFieldOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ColorDimensionsFields(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["ColorDimensionsFields"])

    @cached_property
    def ColorValuesFields(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["ColorValuesFields"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialLayerColorFieldOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerColorFieldOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerColorField:
    boto3_raw_data: "type_defs.GeospatialLayerColorFieldTypeDef" = dataclasses.field()

    @cached_property
    def ColorDimensionsFields(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["ColorDimensionsFields"])

    @cached_property
    def ColorValuesFields(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["ColorValuesFields"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLayerColorFieldTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerColorFieldTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.GeospatialMapAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Geospatial(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Geospatial"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Colors"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GeospatialMapAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapAggregatedFieldWells:
    boto3_raw_data: "type_defs.GeospatialMapAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Geospatial(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Geospatial"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Colors"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GeospatialMapAggregatedFieldWellsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GrowthRateComputation:
    boto3_raw_data: "type_defs.GrowthRateComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Name = field("Name")

    @cached_property
    def Time(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Time"])

    @cached_property
    def Value(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["Value"])

    PeriodSize = field("PeriodSize")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GrowthRateComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GrowthRateComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.HeatMapAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Rows(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Rows"])

    @cached_property
    def Columns(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HeatMapAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeatMapAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapAggregatedFieldWells:
    boto3_raw_data: "type_defs.HeatMapAggregatedFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def Rows(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Rows"])

    @cached_property
    def Columns(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HeatMapAggregatedFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeatMapAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistogramAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.HistogramAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.HistogramAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HistogramAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistogramAggregatedFieldWells:
    boto3_raw_data: "type_defs.HistogramAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.HistogramAggregatedFieldWellsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HistogramAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIFieldWellsOutput:
    boto3_raw_data: "type_defs.KPIFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def TargetValues(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["TargetValues"])

    @cached_property
    def TrendGroups(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["TrendGroups"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KPIFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIFieldWells:
    boto3_raw_data: "type_defs.KPIFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def TargetValues(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["TargetValues"])

    @cached_property
    def TrendGroups(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["TrendGroups"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KPIFieldWellsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.KPIFieldWellsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.LineChartAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Colors"])

    @cached_property
    def SmallMultiples(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["SmallMultiples"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.LineChartAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartAggregatedFieldWells:
    boto3_raw_data: "type_defs.LineChartAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Colors"])

    @cached_property
    def SmallMultiples(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["SmallMultiples"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.LineChartAggregatedFieldWellsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MaximumMinimumComputation:
    boto3_raw_data: "type_defs.MaximumMinimumComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Type = field("Type")
    Name = field("Name")

    @cached_property
    def Time(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Time"])

    @cached_property
    def Value(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["Value"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MaximumMinimumComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MaximumMinimumComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MetricComparisonComputation:
    boto3_raw_data: "type_defs.MetricComparisonComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Name = field("Name")

    @cached_property
    def Time(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Time"])

    @cached_property
    def FromValue(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["FromValue"])

    @cached_property
    def TargetValue(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["TargetValue"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.MetricComparisonComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.MetricComparisonComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PeriodOverPeriodComputation:
    boto3_raw_data: "type_defs.PeriodOverPeriodComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Name = field("Name")

    @cached_property
    def Time(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Time"])

    @cached_property
    def Value(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["Value"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PeriodOverPeriodComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PeriodOverPeriodComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PeriodToDateComputation:
    boto3_raw_data: "type_defs.PeriodToDateComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Name = field("Name")

    @cached_property
    def Time(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Time"])

    @cached_property
    def Value(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["Value"])

    PeriodTimeGranularity = field("PeriodTimeGranularity")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PeriodToDateComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PeriodToDateComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.PieChartAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def SmallMultiples(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["SmallMultiples"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PieChartAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PieChartAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartAggregatedFieldWells:
    boto3_raw_data: "type_defs.PieChartAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def SmallMultiples(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["SmallMultiples"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PieChartAggregatedFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PieChartAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.PivotTableAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Rows(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Rows"])

    @cached_property
    def Columns(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.PivotTableAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableAggregatedFieldWells:
    boto3_raw_data: "type_defs.PivotTableAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Rows(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Rows"])

    @cached_property
    def Columns(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Columns"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PivotTableAggregatedFieldWellsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.RadarChartAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Color(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Color"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RadarChartAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartAggregatedFieldWells:
    boto3_raw_data: "type_defs.RadarChartAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Color(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Color"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RadarChartAggregatedFieldWellsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.SankeyDiagramAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Source(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Source"])

    @cached_property
    def Destination(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Destination"])

    @cached_property
    def Weight(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Weight"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SankeyDiagramAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramAggregatedFieldWells:
    boto3_raw_data: "type_defs.SankeyDiagramAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Source(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Source"])

    @cached_property
    def Destination(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Destination"])

    @cached_property
    def Weight(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Weight"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SankeyDiagramAggregatedFieldWellsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotCategoricallyAggregatedFieldWellsOutput:
    boto3_raw_data: (
        "type_defs.ScatterPlotCategoricallyAggregatedFieldWellsOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def XAxis(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["XAxis"])

    @cached_property
    def YAxis(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["YAxis"])

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Size(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Size"])

    @cached_property
    def Label(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Label"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScatterPlotCategoricallyAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ScatterPlotCategoricallyAggregatedFieldWellsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotCategoricallyAggregatedFieldWells:
    boto3_raw_data: "type_defs.ScatterPlotCategoricallyAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def XAxis(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["XAxis"])

    @cached_property
    def YAxis(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["YAxis"])

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Size(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Size"])

    @cached_property
    def Label(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Label"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScatterPlotCategoricallyAggregatedFieldWellsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotCategoricallyAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotUnaggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.ScatterPlotUnaggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def XAxis(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["XAxis"])

    @cached_property
    def YAxis(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["YAxis"])

    @cached_property
    def Size(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Size"])

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Label(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Label"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScatterPlotUnaggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotUnaggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotUnaggregatedFieldWells:
    boto3_raw_data: "type_defs.ScatterPlotUnaggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def XAxis(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["XAxis"])

    @cached_property
    def YAxis(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["YAxis"])

    @cached_property
    def Size(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Size"])

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Category"])

    @cached_property
    def Label(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Label"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ScatterPlotUnaggregatedFieldWellsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotUnaggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.TableAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupBy(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["GroupBy"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TableAggregatedFieldWellsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableAggregatedFieldWells:
    boto3_raw_data: "type_defs.TableAggregatedFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def GroupBy(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["GroupBy"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableAggregatedFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopBottomMoversComputation:
    boto3_raw_data: "type_defs.TopBottomMoversComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Type = field("Type")
    Name = field("Name")

    @cached_property
    def Time(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Time"])

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Category"])

    @cached_property
    def Value(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["Value"])

    MoverSize = field("MoverSize")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopBottomMoversComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopBottomMoversComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopBottomRankedComputation:
    boto3_raw_data: "type_defs.TopBottomRankedComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Type = field("Type")
    Name = field("Name")

    @cached_property
    def Category(self):  # pragma: no cover
        return DimensionField.make_one(self.boto3_raw_data["Category"])

    @cached_property
    def Value(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["Value"])

    ResultSize = field("ResultSize")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TopBottomRankedComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TopBottomRankedComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TotalAggregationComputation:
    boto3_raw_data: "type_defs.TotalAggregationComputationTypeDef" = dataclasses.field()

    ComputationId = field("ComputationId")
    Name = field("Name")

    @cached_property
    def Value(self):  # pragma: no cover
        return MeasureField.make_one(self.boto3_raw_data["Value"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TotalAggregationComputationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TotalAggregationComputationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.TreeMapAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Groups(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Groups"])

    @cached_property
    def Sizes(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Sizes"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Colors"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TreeMapAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TreeMapAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapAggregatedFieldWells:
    boto3_raw_data: "type_defs.TreeMapAggregatedFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def Groups(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Groups"])

    @cached_property
    def Sizes(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Sizes"])

    @cached_property
    def Colors(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Colors"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TreeMapAggregatedFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TreeMapAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.WaterfallChartAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Categories(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Categories"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def Breakdowns(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Breakdowns"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.WaterfallChartAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartAggregatedFieldWells:
    boto3_raw_data: "type_defs.WaterfallChartAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Categories(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Categories"])

    @cached_property
    def Values(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Values"])

    @cached_property
    def Breakdowns(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Breakdowns"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.WaterfallChartAggregatedFieldWellsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudAggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.WordCloudAggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupBy(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["GroupBy"])

    @cached_property
    def Size(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Size"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.WordCloudAggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudAggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudAggregatedFieldWells:
    boto3_raw_data: "type_defs.WordCloudAggregatedFieldWellsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupBy(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["GroupBy"])

    @cached_property
    def Size(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Size"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.WordCloudAggregatedFieldWellsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudAggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualFieldWellOutput:
    boto3_raw_data: "type_defs.PluginVisualFieldWellOutputTypeDef" = dataclasses.field()

    AxisName = field("AxisName")

    @cached_property
    def Dimensions(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Dimensions"])

    @cached_property
    def Measures(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Measures"])

    @cached_property
    def Unaggregated(self):  # pragma: no cover
        return UnaggregatedField.make_many(self.boto3_raw_data["Unaggregated"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PluginVisualFieldWellOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualFieldWellOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualFieldWell:
    boto3_raw_data: "type_defs.PluginVisualFieldWellTypeDef" = dataclasses.field()

    AxisName = field("AxisName")

    @cached_property
    def Dimensions(self):  # pragma: no cover
        return DimensionField.make_many(self.boto3_raw_data["Dimensions"])

    @cached_property
    def Measures(self):  # pragma: no cover
        return MeasureField.make_many(self.boto3_raw_data["Measures"])

    @cached_property
    def Unaggregated(self):  # pragma: no cover
        return UnaggregatedField.make_many(self.boto3_raw_data["Unaggregated"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PluginVisualFieldWellTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualFieldWellTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableUnaggregatedFieldWellsOutput:
    boto3_raw_data: "type_defs.TableUnaggregatedFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Values(self):  # pragma: no cover
        return UnaggregatedField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.TableUnaggregatedFieldWellsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableUnaggregatedFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableUnaggregatedFieldWells:
    boto3_raw_data: "type_defs.TableUnaggregatedFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def Values(self):  # pragma: no cover
        return UnaggregatedField.make_many(self.boto3_raw_data["Values"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableUnaggregatedFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableUnaggregatedFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionConfigurationOutput:
    boto3_raw_data: "type_defs.BodySectionConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    SectionId = field("SectionId")

    @cached_property
    def Content(self):  # pragma: no cover
        return BodySectionContentOutput.make_one(self.boto3_raw_data["Content"])

    @cached_property
    def Style(self):  # pragma: no cover
        return SectionStyle.make_one(self.boto3_raw_data["Style"])

    @cached_property
    def PageBreakConfiguration(self):  # pragma: no cover
        return SectionPageBreakConfiguration.make_one(
            self.boto3_raw_data["PageBreakConfiguration"]
        )

    @cached_property
    def RepeatConfiguration(self):  # pragma: no cover
        return BodySectionRepeatConfigurationOutput.make_one(
            self.boto3_raw_data["RepeatConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BodySectionConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BodySectionConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BodySectionConfiguration:
    boto3_raw_data: "type_defs.BodySectionConfigurationTypeDef" = dataclasses.field()

    SectionId = field("SectionId")

    @cached_property
    def Content(self):  # pragma: no cover
        return BodySectionContent.make_one(self.boto3_raw_data["Content"])

    @cached_property
    def Style(self):  # pragma: no cover
        return SectionStyle.make_one(self.boto3_raw_data["Style"])

    @cached_property
    def PageBreakConfiguration(self):  # pragma: no cover
        return SectionPageBreakConfiguration.make_one(
            self.boto3_raw_data["PageBreakConfiguration"]
        )

    @cached_property
    def RepeatConfiguration(self):  # pragma: no cover
        return BodySectionRepeatConfiguration.make_one(
            self.boto3_raw_data["RepeatConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BodySectionConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BodySectionConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTopicRequest:
    boto3_raw_data: "type_defs.CreateTopicRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")
    Topic = field("Topic")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    FolderArns = field("FolderArns")

    @cached_property
    def CustomInstructions(self):  # pragma: no cover
        return CustomInstructions.make_one(self.boto3_raw_data["CustomInstructions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTopicRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTopicRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTopicRequest:
    boto3_raw_data: "type_defs.UpdateTopicRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")
    Topic = field("Topic")

    @cached_property
    def CustomInstructions(self):  # pragma: no cover
        return CustomInstructions.make_one(self.boto3_raw_data["CustomInstructions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTopicRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTopicRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataSourceCredentials:
    boto3_raw_data: "type_defs.DataSourceCredentialsTypeDef" = dataclasses.field()

    @cached_property
    def CredentialPair(self):  # pragma: no cover
        return CredentialPair.make_one(self.boto3_raw_data["CredentialPair"])

    CopySourceArn = field("CopySourceArn")
    SecretArn = field("SecretArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataSourceCredentialsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataSourceCredentialsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetImage:
    boto3_raw_data: "type_defs.SheetImageTypeDef" = dataclasses.field()

    SheetImageId = field("SheetImageId")

    @cached_property
    def Source(self):  # pragma: no cover
        return SheetImageSource.make_one(self.boto3_raw_data["Source"])

    @cached_property
    def Scaling(self):  # pragma: no cover
        return SheetImageScalingConfiguration.make_one(self.boto3_raw_data["Scaling"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return SheetImageTooltipConfiguration.make_one(self.boto3_raw_data["Tooltip"])

    ImageContentAltText = field("ImageContentAltText")

    @cached_property
    def Interactions(self):  # pragma: no cover
        return ImageInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return ImageCustomAction.make_many(self.boto3_raw_data["Actions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SheetImageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SheetImageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomContentVisual:
    boto3_raw_data: "type_defs.CustomContentVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    DataSetIdentifier = field("DataSetIdentifier")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return CustomContentConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomContentVisualTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomContentVisualTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EmptyVisual:
    boto3_raw_data: "type_defs.EmptyVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    DataSetIdentifier = field("DataSetIdentifier")

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.EmptyVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.EmptyVisualTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Sheet:
    boto3_raw_data: "type_defs.SheetTypeDef" = dataclasses.field()

    SheetId = field("SheetId")
    Name = field("Name")

    @cached_property
    def Images(self):  # pragma: no cover
        return SheetImageOutput.make_many(self.boto3_raw_data["Images"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SheetTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SheetTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTopicReviewedAnswersResponse:
    boto3_raw_data: "type_defs.ListTopicReviewedAnswersResponseTypeDef" = (
        dataclasses.field()
    )

    TopicId = field("TopicId")
    TopicArn = field("TopicArn")

    @cached_property
    def Answers(self):  # pragma: no cover
        return TopicReviewedAnswer.make_many(self.boto3_raw_data["Answers"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListTopicReviewedAnswersResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTopicReviewedAnswersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InnerFilterOutput:
    boto3_raw_data: "type_defs.InnerFilterOutputTypeDef" = dataclasses.field()

    @cached_property
    def CategoryInnerFilter(self):  # pragma: no cover
        return CategoryInnerFilterOutput.make_one(
            self.boto3_raw_data["CategoryInnerFilter"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InnerFilterOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InnerFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InnerFilter:
    boto3_raw_data: "type_defs.InnerFilterTypeDef" = dataclasses.field()

    @cached_property
    def CategoryInnerFilter(self):  # pragma: no cover
        return CategoryInnerFilter.make_one(self.boto3_raw_data["CategoryInnerFilter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InnerFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InnerFilterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartFieldWellsOutput:
    boto3_raw_data: "type_defs.BarChartFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def BarChartAggregatedFieldWells(self):  # pragma: no cover
        return BarChartAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["BarChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BarChartFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BarChartFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartFieldWells:
    boto3_raw_data: "type_defs.BarChartFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def BarChartAggregatedFieldWells(self):  # pragma: no cover
        return BarChartAggregatedFieldWells.make_one(
            self.boto3_raw_data["BarChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BarChartFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BarChartFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotFieldWellsOutput:
    boto3_raw_data: "type_defs.BoxPlotFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def BoxPlotAggregatedFieldWells(self):  # pragma: no cover
        return BoxPlotAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["BoxPlotAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BoxPlotFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotFieldWells:
    boto3_raw_data: "type_defs.BoxPlotFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def BoxPlotAggregatedFieldWells(self):  # pragma: no cover
        return BoxPlotAggregatedFieldWells.make_one(
            self.boto3_raw_data["BoxPlotAggregatedFieldWells"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BoxPlotFieldWellsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartFieldWellsOutput:
    boto3_raw_data: "type_defs.ComboChartFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def ComboChartAggregatedFieldWells(self):  # pragma: no cover
        return ComboChartAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["ComboChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComboChartFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartFieldWells:
    boto3_raw_data: "type_defs.ComboChartFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def ComboChartAggregatedFieldWells(self):  # pragma: no cover
        return ComboChartAggregatedFieldWells.make_one(
            self.boto3_raw_data["ComboChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComboChartFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapFieldWellsOutput:
    boto3_raw_data: "type_defs.FilledMapFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def FilledMapAggregatedFieldWells(self):  # pragma: no cover
        return FilledMapAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["FilledMapAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilledMapFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapFieldWells:
    boto3_raw_data: "type_defs.FilledMapFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def FilledMapAggregatedFieldWells(self):  # pragma: no cover
        return FilledMapAggregatedFieldWells.make_one(
            self.boto3_raw_data["FilledMapAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilledMapFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartFieldWellsOutput:
    boto3_raw_data: "type_defs.FunnelChartFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def FunnelChartAggregatedFieldWells(self):  # pragma: no cover
        return FunnelChartAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["FunnelChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FunnelChartFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartFieldWells:
    boto3_raw_data: "type_defs.FunnelChartFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def FunnelChartAggregatedFieldWells(self):  # pragma: no cover
        return FunnelChartAggregatedFieldWells.make_one(
            self.boto3_raw_data["FunnelChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FunnelChartFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartConfigurationOutput:
    boto3_raw_data: "type_defs.GaugeChartConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return GaugeChartFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def GaugeChartOptions(self):  # pragma: no cover
        return GaugeChartOptions.make_one(self.boto3_raw_data["GaugeChartOptions"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def TooltipOptions(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["TooltipOptions"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def ColorConfiguration(self):  # pragma: no cover
        return GaugeChartColorConfiguration.make_one(
            self.boto3_raw_data["ColorConfiguration"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GaugeChartConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartConfiguration:
    boto3_raw_data: "type_defs.GaugeChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return GaugeChartFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def GaugeChartOptions(self):  # pragma: no cover
        return GaugeChartOptions.make_one(self.boto3_raw_data["GaugeChartOptions"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def TooltipOptions(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["TooltipOptions"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def ColorConfiguration(self):  # pragma: no cover
        return GaugeChartColorConfiguration.make_one(
            self.boto3_raw_data["ColorConfiguration"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GaugeChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerJoinDefinitionOutput:
    boto3_raw_data: "type_defs.GeospatialLayerJoinDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    ShapeKeyField = field("ShapeKeyField")

    @cached_property
    def DatasetKeyField(self):  # pragma: no cover
        return UnaggregatedField.make_one(self.boto3_raw_data["DatasetKeyField"])

    @cached_property
    def ColorField(self):  # pragma: no cover
        return GeospatialLayerColorFieldOutput.make_one(
            self.boto3_raw_data["ColorField"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GeospatialLayerJoinDefinitionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerJoinDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerJoinDefinition:
    boto3_raw_data: "type_defs.GeospatialLayerJoinDefinitionTypeDef" = (
        dataclasses.field()
    )

    ShapeKeyField = field("ShapeKeyField")

    @cached_property
    def DatasetKeyField(self):  # pragma: no cover
        return UnaggregatedField.make_one(self.boto3_raw_data["DatasetKeyField"])

    @cached_property
    def ColorField(self):  # pragma: no cover
        return GeospatialLayerColorField.make_one(self.boto3_raw_data["ColorField"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialLayerJoinDefinitionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerJoinDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapFieldWellsOutput:
    boto3_raw_data: "type_defs.GeospatialMapFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GeospatialMapAggregatedFieldWells(self):  # pragma: no cover
        return GeospatialMapAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["GeospatialMapAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialMapFieldWellsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapFieldWells:
    boto3_raw_data: "type_defs.GeospatialMapFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def GeospatialMapAggregatedFieldWells(self):  # pragma: no cover
        return GeospatialMapAggregatedFieldWells.make_one(
            self.boto3_raw_data["GeospatialMapAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialMapFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapFieldWellsOutput:
    boto3_raw_data: "type_defs.HeatMapFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def HeatMapAggregatedFieldWells(self):  # pragma: no cover
        return HeatMapAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["HeatMapAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HeatMapFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeatMapFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapFieldWells:
    boto3_raw_data: "type_defs.HeatMapFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def HeatMapAggregatedFieldWells(self):  # pragma: no cover
        return HeatMapAggregatedFieldWells.make_one(
            self.boto3_raw_data["HeatMapAggregatedFieldWells"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HeatMapFieldWellsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeatMapFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistogramFieldWellsOutput:
    boto3_raw_data: "type_defs.HistogramFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def HistogramAggregatedFieldWells(self):  # pragma: no cover
        return HistogramAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["HistogramAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HistogramFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HistogramFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistogramFieldWells:
    boto3_raw_data: "type_defs.HistogramFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def HistogramAggregatedFieldWells(self):  # pragma: no cover
        return HistogramAggregatedFieldWells.make_one(
            self.boto3_raw_data["HistogramAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HistogramFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HistogramFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIConfigurationOutput:
    boto3_raw_data: "type_defs.KPIConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return KPIFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return KPISortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def KPIOptions(self):  # pragma: no cover
        return KPIOptions.make_one(self.boto3_raw_data["KPIOptions"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.KPIConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIConfiguration:
    boto3_raw_data: "type_defs.KPIConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return KPIFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return KPISortConfiguration.make_one(self.boto3_raw_data["SortConfiguration"])

    @cached_property
    def KPIOptions(self):  # pragma: no cover
        return KPIOptions.make_one(self.boto3_raw_data["KPIOptions"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KPIConfigurationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.KPIConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartFieldWellsOutput:
    boto3_raw_data: "type_defs.LineChartFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def LineChartAggregatedFieldWells(self):  # pragma: no cover
        return LineChartAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["LineChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineChartFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartFieldWells:
    boto3_raw_data: "type_defs.LineChartFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def LineChartAggregatedFieldWells(self):  # pragma: no cover
        return LineChartAggregatedFieldWells.make_one(
            self.boto3_raw_data["LineChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineChartFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartFieldWellsOutput:
    boto3_raw_data: "type_defs.PieChartFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def PieChartAggregatedFieldWells(self):  # pragma: no cover
        return PieChartAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["PieChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PieChartFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PieChartFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartFieldWells:
    boto3_raw_data: "type_defs.PieChartFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def PieChartAggregatedFieldWells(self):  # pragma: no cover
        return PieChartAggregatedFieldWells.make_one(
            self.boto3_raw_data["PieChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PieChartFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PieChartFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldWellsOutput:
    boto3_raw_data: "type_defs.PivotTableFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def PivotTableAggregatedFieldWells(self):  # pragma: no cover
        return PivotTableAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["PivotTableAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableFieldWells:
    boto3_raw_data: "type_defs.PivotTableFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def PivotTableAggregatedFieldWells(self):  # pragma: no cover
        return PivotTableAggregatedFieldWells.make_one(
            self.boto3_raw_data["PivotTableAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartFieldWellsOutput:
    boto3_raw_data: "type_defs.RadarChartFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def RadarChartAggregatedFieldWells(self):  # pragma: no cover
        return RadarChartAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["RadarChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RadarChartFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartFieldWells:
    boto3_raw_data: "type_defs.RadarChartFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def RadarChartAggregatedFieldWells(self):  # pragma: no cover
        return RadarChartAggregatedFieldWells.make_one(
            self.boto3_raw_data["RadarChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RadarChartFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramFieldWellsOutput:
    boto3_raw_data: "type_defs.SankeyDiagramFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SankeyDiagramAggregatedFieldWells(self):  # pragma: no cover
        return SankeyDiagramAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["SankeyDiagramAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SankeyDiagramFieldWellsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramFieldWells:
    boto3_raw_data: "type_defs.SankeyDiagramFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def SankeyDiagramAggregatedFieldWells(self):  # pragma: no cover
        return SankeyDiagramAggregatedFieldWells.make_one(
            self.boto3_raw_data["SankeyDiagramAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SankeyDiagramFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotFieldWellsOutput:
    boto3_raw_data: "type_defs.ScatterPlotFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def ScatterPlotCategoricallyAggregatedFieldWells(self):  # pragma: no cover
        return ScatterPlotCategoricallyAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["ScatterPlotCategoricallyAggregatedFieldWells"]
        )

    @cached_property
    def ScatterPlotUnaggregatedFieldWells(self):  # pragma: no cover
        return ScatterPlotUnaggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["ScatterPlotUnaggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScatterPlotFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotFieldWells:
    boto3_raw_data: "type_defs.ScatterPlotFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def ScatterPlotCategoricallyAggregatedFieldWells(self):  # pragma: no cover
        return ScatterPlotCategoricallyAggregatedFieldWells.make_one(
            self.boto3_raw_data["ScatterPlotCategoricallyAggregatedFieldWells"]
        )

    @cached_property
    def ScatterPlotUnaggregatedFieldWells(self):  # pragma: no cover
        return ScatterPlotUnaggregatedFieldWells.make_one(
            self.boto3_raw_data["ScatterPlotUnaggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScatterPlotFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Computation:
    boto3_raw_data: "type_defs.ComputationTypeDef" = dataclasses.field()

    @cached_property
    def TopBottomRanked(self):  # pragma: no cover
        return TopBottomRankedComputation.make_one(
            self.boto3_raw_data["TopBottomRanked"]
        )

    @cached_property
    def TopBottomMovers(self):  # pragma: no cover
        return TopBottomMoversComputation.make_one(
            self.boto3_raw_data["TopBottomMovers"]
        )

    @cached_property
    def TotalAggregation(self):  # pragma: no cover
        return TotalAggregationComputation.make_one(
            self.boto3_raw_data["TotalAggregation"]
        )

    @cached_property
    def MaximumMinimum(self):  # pragma: no cover
        return MaximumMinimumComputation.make_one(self.boto3_raw_data["MaximumMinimum"])

    @cached_property
    def MetricComparison(self):  # pragma: no cover
        return MetricComparisonComputation.make_one(
            self.boto3_raw_data["MetricComparison"]
        )

    @cached_property
    def PeriodOverPeriod(self):  # pragma: no cover
        return PeriodOverPeriodComputation.make_one(
            self.boto3_raw_data["PeriodOverPeriod"]
        )

    @cached_property
    def PeriodToDate(self):  # pragma: no cover
        return PeriodToDateComputation.make_one(self.boto3_raw_data["PeriodToDate"])

    @cached_property
    def GrowthRate(self):  # pragma: no cover
        return GrowthRateComputation.make_one(self.boto3_raw_data["GrowthRate"])

    @cached_property
    def UniqueValues(self):  # pragma: no cover
        return UniqueValuesComputation.make_one(self.boto3_raw_data["UniqueValues"])

    @cached_property
    def Forecast(self):  # pragma: no cover
        return ForecastComputation.make_one(self.boto3_raw_data["Forecast"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ComputationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ComputationTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapFieldWellsOutput:
    boto3_raw_data: "type_defs.TreeMapFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def TreeMapAggregatedFieldWells(self):  # pragma: no cover
        return TreeMapAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["TreeMapAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TreeMapFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TreeMapFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapFieldWells:
    boto3_raw_data: "type_defs.TreeMapFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def TreeMapAggregatedFieldWells(self):  # pragma: no cover
        return TreeMapAggregatedFieldWells.make_one(
            self.boto3_raw_data["TreeMapAggregatedFieldWells"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TreeMapFieldWellsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TreeMapFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartFieldWellsOutput:
    boto3_raw_data: "type_defs.WaterfallChartFieldWellsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def WaterfallChartAggregatedFieldWells(self):  # pragma: no cover
        return WaterfallChartAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["WaterfallChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.WaterfallChartFieldWellsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartFieldWells:
    boto3_raw_data: "type_defs.WaterfallChartFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def WaterfallChartAggregatedFieldWells(self):  # pragma: no cover
        return WaterfallChartAggregatedFieldWells.make_one(
            self.boto3_raw_data["WaterfallChartAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WaterfallChartFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudFieldWellsOutput:
    boto3_raw_data: "type_defs.WordCloudFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def WordCloudAggregatedFieldWells(self):  # pragma: no cover
        return WordCloudAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["WordCloudAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WordCloudFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudFieldWells:
    boto3_raw_data: "type_defs.WordCloudFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def WordCloudAggregatedFieldWells(self):  # pragma: no cover
        return WordCloudAggregatedFieldWells.make_one(
            self.boto3_raw_data["WordCloudAggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WordCloudFieldWellsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudFieldWellsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualConfigurationOutput:
    boto3_raw_data: "type_defs.PluginVisualConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return PluginVisualFieldWellOutput.make_many(self.boto3_raw_data["FieldWells"])

    @cached_property
    def VisualOptions(self):  # pragma: no cover
        return PluginVisualOptionsOutput.make_one(self.boto3_raw_data["VisualOptions"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return PluginVisualSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PluginVisualConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualConfiguration:
    boto3_raw_data: "type_defs.PluginVisualConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return PluginVisualFieldWell.make_many(self.boto3_raw_data["FieldWells"])

    @cached_property
    def VisualOptions(self):  # pragma: no cover
        return PluginVisualOptions.make_one(self.boto3_raw_data["VisualOptions"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return PluginVisualSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PluginVisualConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldWellsOutput:
    boto3_raw_data: "type_defs.TableFieldWellsOutputTypeDef" = dataclasses.field()

    @cached_property
    def TableAggregatedFieldWells(self):  # pragma: no cover
        return TableAggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["TableAggregatedFieldWells"]
        )

    @cached_property
    def TableUnaggregatedFieldWells(self):  # pragma: no cover
        return TableUnaggregatedFieldWellsOutput.make_one(
            self.boto3_raw_data["TableUnaggregatedFieldWells"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableFieldWellsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableFieldWellsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableFieldWells:
    boto3_raw_data: "type_defs.TableFieldWellsTypeDef" = dataclasses.field()

    @cached_property
    def TableAggregatedFieldWells(self):  # pragma: no cover
        return TableAggregatedFieldWells.make_one(
            self.boto3_raw_data["TableAggregatedFieldWells"]
        )

    @cached_property
    def TableUnaggregatedFieldWells(self):  # pragma: no cover
        return TableUnaggregatedFieldWells.make_one(
            self.boto3_raw_data["TableUnaggregatedFieldWells"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TableFieldWellsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TableFieldWellsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SectionBasedLayoutConfigurationOutput:
    boto3_raw_data: "type_defs.SectionBasedLayoutConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HeaderSections(self):  # pragma: no cover
        return HeaderFooterSectionConfigurationOutput.make_many(
            self.boto3_raw_data["HeaderSections"]
        )

    @cached_property
    def BodySections(self):  # pragma: no cover
        return BodySectionConfigurationOutput.make_many(
            self.boto3_raw_data["BodySections"]
        )

    @cached_property
    def FooterSections(self):  # pragma: no cover
        return HeaderFooterSectionConfigurationOutput.make_many(
            self.boto3_raw_data["FooterSections"]
        )

    @cached_property
    def CanvasSizeOptions(self):  # pragma: no cover
        return SectionBasedLayoutCanvasSizeOptions.make_one(
            self.boto3_raw_data["CanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SectionBasedLayoutConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SectionBasedLayoutConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SectionBasedLayoutConfiguration:
    boto3_raw_data: "type_defs.SectionBasedLayoutConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HeaderSections(self):  # pragma: no cover
        return HeaderFooterSectionConfiguration.make_many(
            self.boto3_raw_data["HeaderSections"]
        )

    @cached_property
    def BodySections(self):  # pragma: no cover
        return BodySectionConfiguration.make_many(self.boto3_raw_data["BodySections"])

    @cached_property
    def FooterSections(self):  # pragma: no cover
        return HeaderFooterSectionConfiguration.make_many(
            self.boto3_raw_data["FooterSections"]
        )

    @cached_property
    def CanvasSizeOptions(self):  # pragma: no cover
        return SectionBasedLayoutCanvasSizeOptions.make_one(
            self.boto3_raw_data["CanvasSizeOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SectionBasedLayoutConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SectionBasedLayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartAssetBundleImportJobRequest:
    boto3_raw_data: "type_defs.StartAssetBundleImportJobRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    AssetBundleImportJobId = field("AssetBundleImportJobId")

    @cached_property
    def AssetBundleImportSource(self):  # pragma: no cover
        return AssetBundleImportSource.make_one(
            self.boto3_raw_data["AssetBundleImportSource"]
        )

    OverrideParameters = field("OverrideParameters")
    FailureAction = field("FailureAction")
    OverridePermissions = field("OverridePermissions")
    OverrideTags = field("OverrideTags")

    @cached_property
    def OverrideValidationStrategy(self):  # pragma: no cover
        return AssetBundleImportJobOverrideValidationStrategy.make_one(
            self.boto3_raw_data["OverrideValidationStrategy"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StartAssetBundleImportJobRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartAssetBundleImportJobRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDataSourceRequest:
    boto3_raw_data: "type_defs.CreateDataSourceRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSourceId = field("DataSourceId")
    Name = field("Name")
    Type = field("Type")
    DataSourceParameters = field("DataSourceParameters")

    @cached_property
    def Credentials(self):  # pragma: no cover
        return DataSourceCredentials.make_one(self.boto3_raw_data["Credentials"])

    Permissions = field("Permissions")

    @cached_property
    def VpcConnectionProperties(self):  # pragma: no cover
        return VpcConnectionProperties.make_one(
            self.boto3_raw_data["VpcConnectionProperties"]
        )

    @cached_property
    def SslProperties(self):  # pragma: no cover
        return SslProperties.make_one(self.boto3_raw_data["SslProperties"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    FolderArns = field("FolderArns")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDataSourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDataSourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDataSourceRequest:
    boto3_raw_data: "type_defs.UpdateDataSourceRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSourceId = field("DataSourceId")
    Name = field("Name")
    DataSourceParameters = field("DataSourceParameters")

    @cached_property
    def Credentials(self):  # pragma: no cover
        return DataSourceCredentials.make_one(self.boto3_raw_data["Credentials"])

    @cached_property
    def VpcConnectionProperties(self):  # pragma: no cover
        return VpcConnectionProperties.make_one(
            self.boto3_raw_data["VpcConnectionProperties"]
        )

    @cached_property
    def SslProperties(self):  # pragma: no cover
        return SslProperties.make_one(self.boto3_raw_data["SslProperties"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDataSourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDataSourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDataSetRequest:
    boto3_raw_data: "type_defs.CreateDataSetRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")
    Name = field("Name")
    PhysicalTableMap = field("PhysicalTableMap")
    ImportMode = field("ImportMode")
    LogicalTableMap = field("LogicalTableMap")
    ColumnGroups = field("ColumnGroups")
    FieldFolders = field("FieldFolders")
    Permissions = field("Permissions")

    @cached_property
    def RowLevelPermissionDataSet(self):  # pragma: no cover
        return RowLevelPermissionDataSet.make_one(
            self.boto3_raw_data["RowLevelPermissionDataSet"]
        )

    RowLevelPermissionTagConfiguration = field("RowLevelPermissionTagConfiguration")
    ColumnLevelPermissionRules = field("ColumnLevelPermissionRules")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    @cached_property
    def DataSetUsageConfiguration(self):  # pragma: no cover
        return DataSetUsageConfiguration.make_one(
            self.boto3_raw_data["DataSetUsageConfiguration"]
        )

    DatasetParameters = field("DatasetParameters")
    FolderArns = field("FolderArns")
    PerformanceConfiguration = field("PerformanceConfiguration")
    UseAs = field("UseAs")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDataSetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDataSetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDataSetRequest:
    boto3_raw_data: "type_defs.UpdateDataSetRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DataSetId = field("DataSetId")
    Name = field("Name")
    PhysicalTableMap = field("PhysicalTableMap")
    ImportMode = field("ImportMode")
    LogicalTableMap = field("LogicalTableMap")
    ColumnGroups = field("ColumnGroups")
    FieldFolders = field("FieldFolders")

    @cached_property
    def RowLevelPermissionDataSet(self):  # pragma: no cover
        return RowLevelPermissionDataSet.make_one(
            self.boto3_raw_data["RowLevelPermissionDataSet"]
        )

    RowLevelPermissionTagConfiguration = field("RowLevelPermissionTagConfiguration")
    ColumnLevelPermissionRules = field("ColumnLevelPermissionRules")

    @cached_property
    def DataSetUsageConfiguration(self):  # pragma: no cover
        return DataSetUsageConfiguration.make_one(
            self.boto3_raw_data["DataSetUsageConfiguration"]
        )

    DatasetParameters = field("DatasetParameters")
    PerformanceConfiguration = field("PerformanceConfiguration")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDataSetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDataSetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicIR:
    boto3_raw_data: "type_defs.TopicIRTypeDef" = dataclasses.field()

    Metrics = field("Metrics")

    @cached_property
    def GroupByList(self):  # pragma: no cover
        return TopicIRGroupBy.make_many(self.boto3_raw_data["GroupByList"])

    Filters = field("Filters")

    @cached_property
    def Sort(self):  # pragma: no cover
        return TopicSortClause.make_one(self.boto3_raw_data["Sort"])

    ContributionAnalysis = field("ContributionAnalysis")

    @cached_property
    def Visual(self):  # pragma: no cover
        return VisualOptions.make_one(self.boto3_raw_data["Visual"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicIRTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicIRTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Analysis:
    boto3_raw_data: "type_defs.AnalysisTypeDef" = dataclasses.field()

    AnalysisId = field("AnalysisId")
    Arn = field("Arn")
    Name = field("Name")
    Status = field("Status")

    @cached_property
    def Errors(self):  # pragma: no cover
        return AnalysisError.make_many(self.boto3_raw_data["Errors"])

    DataSetArns = field("DataSetArns")
    ThemeArn = field("ThemeArn")
    CreatedTime = field("CreatedTime")
    LastUpdatedTime = field("LastUpdatedTime")

    @cached_property
    def Sheets(self):  # pragma: no cover
        return Sheet.make_many(self.boto3_raw_data["Sheets"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AnalysisTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AnalysisTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardVersion:
    boto3_raw_data: "type_defs.DashboardVersionTypeDef" = dataclasses.field()

    CreatedTime = field("CreatedTime")

    @cached_property
    def Errors(self):  # pragma: no cover
        return DashboardError.make_many(self.boto3_raw_data["Errors"])

    VersionNumber = field("VersionNumber")
    Status = field("Status")
    Arn = field("Arn")
    SourceEntityArn = field("SourceEntityArn")
    DataSetArns = field("DataSetArns")
    Description = field("Description")
    ThemeArn = field("ThemeArn")

    @cached_property
    def Sheets(self):  # pragma: no cover
        return Sheet.make_many(self.boto3_raw_data["Sheets"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DashboardVersionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardVersionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateVersion:
    boto3_raw_data: "type_defs.TemplateVersionTypeDef" = dataclasses.field()

    CreatedTime = field("CreatedTime")

    @cached_property
    def Errors(self):  # pragma: no cover
        return TemplateError.make_many(self.boto3_raw_data["Errors"])

    VersionNumber = field("VersionNumber")
    Status = field("Status")

    @cached_property
    def DataSetConfigurations(self):  # pragma: no cover
        return DataSetConfigurationOutput.make_many(
            self.boto3_raw_data["DataSetConfigurations"]
        )

    Description = field("Description")
    SourceEntityArn = field("SourceEntityArn")
    ThemeArn = field("ThemeArn")

    @cached_property
    def Sheets(self):  # pragma: no cover
        return Sheet.make_many(self.boto3_raw_data["Sheets"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TemplateVersionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TemplateVersionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NestedFilterOutput:
    boto3_raw_data: "type_defs.NestedFilterOutputTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    IncludeInnerSet = field("IncludeInnerSet")

    @cached_property
    def InnerFilter(self):  # pragma: no cover
        return InnerFilterOutput.make_one(self.boto3_raw_data["InnerFilter"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NestedFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NestedFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NestedFilter:
    boto3_raw_data: "type_defs.NestedFilterTypeDef" = dataclasses.field()

    FilterId = field("FilterId")

    @cached_property
    def Column(self):  # pragma: no cover
        return ColumnIdentifier.make_one(self.boto3_raw_data["Column"])

    IncludeInnerSet = field("IncludeInnerSet")

    @cached_property
    def InnerFilter(self):  # pragma: no cover
        return InnerFilter.make_one(self.boto3_raw_data["InnerFilter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NestedFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NestedFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartConfigurationOutput:
    boto3_raw_data: "type_defs.BarChartConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return BarChartFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return BarChartSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    Orientation = field("Orientation")
    BarsArrangement = field("BarsArrangement")

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def SmallMultiplesOptions(self):  # pragma: no cover
        return SmallMultiplesOptions.make_one(
            self.boto3_raw_data["SmallMultiplesOptions"]
        )

    @cached_property
    def CategoryAxis(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(self.boto3_raw_data["CategoryAxis"])

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def ValueAxis(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(self.boto3_raw_data["ValueAxis"])

    @cached_property
    def ValueLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["ValueLabelOptions"]
        )

    @cached_property
    def ColorLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["ColorLabelOptions"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def ReferenceLines(self):  # pragma: no cover
        return ReferenceLine.make_many(self.boto3_raw_data["ReferenceLines"])

    @cached_property
    def ContributionAnalysisDefaults(self):  # pragma: no cover
        return ContributionAnalysisDefaultOutput.make_many(
            self.boto3_raw_data["ContributionAnalysisDefaults"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BarChartConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BarChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartConfiguration:
    boto3_raw_data: "type_defs.BarChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return BarChartFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return BarChartSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    Orientation = field("Orientation")
    BarsArrangement = field("BarsArrangement")

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def SmallMultiplesOptions(self):  # pragma: no cover
        return SmallMultiplesOptions.make_one(
            self.boto3_raw_data["SmallMultiplesOptions"]
        )

    @cached_property
    def CategoryAxis(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["CategoryAxis"])

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def ValueAxis(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["ValueAxis"])

    @cached_property
    def ValueLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["ValueLabelOptions"])

    @cached_property
    def ColorLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["ColorLabelOptions"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def ReferenceLines(self):  # pragma: no cover
        return ReferenceLine.make_many(self.boto3_raw_data["ReferenceLines"])

    @cached_property
    def ContributionAnalysisDefaults(self):  # pragma: no cover
        return ContributionAnalysisDefault.make_many(
            self.boto3_raw_data["ContributionAnalysisDefaults"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BarChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BarChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotChartConfigurationOutput:
    boto3_raw_data: "type_defs.BoxPlotChartConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return BoxPlotFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return BoxPlotSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def BoxPlotOptions(self):  # pragma: no cover
        return BoxPlotOptions.make_one(self.boto3_raw_data["BoxPlotOptions"])

    @cached_property
    def CategoryAxis(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(self.boto3_raw_data["CategoryAxis"])

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def PrimaryYAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["PrimaryYAxisDisplayOptions"]
        )

    @cached_property
    def PrimaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["PrimaryYAxisLabelOptions"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def ReferenceLines(self):  # pragma: no cover
        return ReferenceLine.make_many(self.boto3_raw_data["ReferenceLines"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BoxPlotChartConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotChartConfiguration:
    boto3_raw_data: "type_defs.BoxPlotChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return BoxPlotFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return BoxPlotSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def BoxPlotOptions(self):  # pragma: no cover
        return BoxPlotOptions.make_one(self.boto3_raw_data["BoxPlotOptions"])

    @cached_property
    def CategoryAxis(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["CategoryAxis"])

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def PrimaryYAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(
            self.boto3_raw_data["PrimaryYAxisDisplayOptions"]
        )

    @cached_property
    def PrimaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["PrimaryYAxisLabelOptions"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def ReferenceLines(self):  # pragma: no cover
        return ReferenceLine.make_many(self.boto3_raw_data["ReferenceLines"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BoxPlotChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartConfigurationOutput:
    boto3_raw_data: "type_defs.ComboChartConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return ComboChartFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return ComboChartSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    BarsArrangement = field("BarsArrangement")

    @cached_property
    def CategoryAxis(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(self.boto3_raw_data["CategoryAxis"])

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def PrimaryYAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["PrimaryYAxisDisplayOptions"]
        )

    @cached_property
    def PrimaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["PrimaryYAxisLabelOptions"]
        )

    @cached_property
    def SecondaryYAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["SecondaryYAxisDisplayOptions"]
        )

    @cached_property
    def SecondaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["SecondaryYAxisLabelOptions"]
        )

    @cached_property
    def SingleAxisOptions(self):  # pragma: no cover
        return SingleAxisOptions.make_one(self.boto3_raw_data["SingleAxisOptions"])

    @cached_property
    def ColorLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["ColorLabelOptions"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def BarDataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["BarDataLabels"])

    @cached_property
    def LineDataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["LineDataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def ReferenceLines(self):  # pragma: no cover
        return ReferenceLine.make_many(self.boto3_raw_data["ReferenceLines"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ComboChartConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartConfiguration:
    boto3_raw_data: "type_defs.ComboChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return ComboChartFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return ComboChartSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    BarsArrangement = field("BarsArrangement")

    @cached_property
    def CategoryAxis(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["CategoryAxis"])

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def PrimaryYAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(
            self.boto3_raw_data["PrimaryYAxisDisplayOptions"]
        )

    @cached_property
    def PrimaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["PrimaryYAxisLabelOptions"]
        )

    @cached_property
    def SecondaryYAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(
            self.boto3_raw_data["SecondaryYAxisDisplayOptions"]
        )

    @cached_property
    def SecondaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["SecondaryYAxisLabelOptions"]
        )

    @cached_property
    def SingleAxisOptions(self):  # pragma: no cover
        return SingleAxisOptions.make_one(self.boto3_raw_data["SingleAxisOptions"])

    @cached_property
    def ColorLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["ColorLabelOptions"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def BarDataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["BarDataLabels"])

    @cached_property
    def LineDataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["LineDataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def ReferenceLines(self):  # pragma: no cover
        return ReferenceLine.make_many(self.boto3_raw_data["ReferenceLines"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComboChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapConfigurationOutput:
    boto3_raw_data: "type_defs.FilledMapConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return FilledMapFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return FilledMapSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def WindowOptions(self):  # pragma: no cover
        return GeospatialWindowOptions.make_one(self.boto3_raw_data["WindowOptions"])

    @cached_property
    def MapStyleOptions(self):  # pragma: no cover
        return GeospatialMapStyleOptions.make_one(
            self.boto3_raw_data["MapStyleOptions"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilledMapConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapConfiguration:
    boto3_raw_data: "type_defs.FilledMapConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return FilledMapFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return FilledMapSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def WindowOptions(self):  # pragma: no cover
        return GeospatialWindowOptions.make_one(self.boto3_raw_data["WindowOptions"])

    @cached_property
    def MapStyleOptions(self):  # pragma: no cover
        return GeospatialMapStyleOptions.make_one(
            self.boto3_raw_data["MapStyleOptions"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilledMapConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartConfigurationOutput:
    boto3_raw_data: "type_defs.FunnelChartConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return FunnelChartFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return FunnelChartSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def ValueLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["ValueLabelOptions"]
        )

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def DataLabelOptions(self):  # pragma: no cover
        return FunnelChartDataLabelOptions.make_one(
            self.boto3_raw_data["DataLabelOptions"]
        )

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.FunnelChartConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartConfiguration:
    boto3_raw_data: "type_defs.FunnelChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return FunnelChartFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return FunnelChartSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def ValueLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["ValueLabelOptions"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def DataLabelOptions(self):  # pragma: no cover
        return FunnelChartDataLabelOptions.make_one(
            self.boto3_raw_data["DataLabelOptions"]
        )

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FunnelChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartVisualOutput:
    boto3_raw_data: "type_defs.GaugeChartVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return GaugeChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return GaugeChartConditionalFormattingOutput.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GaugeChartVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GaugeChartVisual:
    boto3_raw_data: "type_defs.GaugeChartVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return GaugeChartConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return GaugeChartConditionalFormatting.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GaugeChartVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GaugeChartVisualTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerItemOutput:
    boto3_raw_data: "type_defs.GeospatialLayerItemOutputTypeDef" = dataclasses.field()

    LayerId = field("LayerId")
    LayerType = field("LayerType")

    @cached_property
    def DataSource(self):  # pragma: no cover
        return GeospatialDataSourceItem.make_one(self.boto3_raw_data["DataSource"])

    Label = field("Label")
    Visibility = field("Visibility")

    @cached_property
    def LayerDefinition(self):  # pragma: no cover
        return GeospatialLayerDefinitionOutput.make_one(
            self.boto3_raw_data["LayerDefinition"]
        )

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def JoinDefinition(self):  # pragma: no cover
        return GeospatialLayerJoinDefinitionOutput.make_one(
            self.boto3_raw_data["JoinDefinition"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return LayerCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLayerItemOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerItemOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerItem:
    boto3_raw_data: "type_defs.GeospatialLayerItemTypeDef" = dataclasses.field()

    LayerId = field("LayerId")
    LayerType = field("LayerType")

    @cached_property
    def DataSource(self):  # pragma: no cover
        return GeospatialDataSourceItem.make_one(self.boto3_raw_data["DataSource"])

    Label = field("Label")
    Visibility = field("Visibility")

    @cached_property
    def LayerDefinition(self):  # pragma: no cover
        return GeospatialLayerDefinition.make_one(
            self.boto3_raw_data["LayerDefinition"]
        )

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def JoinDefinition(self):  # pragma: no cover
        return GeospatialLayerJoinDefinition.make_one(
            self.boto3_raw_data["JoinDefinition"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return LayerCustomAction.make_many(self.boto3_raw_data["Actions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialLayerItemTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapConfigurationOutput:
    boto3_raw_data: "type_defs.GeospatialMapConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return GeospatialMapFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def WindowOptions(self):  # pragma: no cover
        return GeospatialWindowOptions.make_one(self.boto3_raw_data["WindowOptions"])

    @cached_property
    def MapStyleOptions(self):  # pragma: no cover
        return GeospatialMapStyleOptions.make_one(
            self.boto3_raw_data["MapStyleOptions"]
        )

    @cached_property
    def PointStyleOptions(self):  # pragma: no cover
        return GeospatialPointStyleOptionsOutput.make_one(
            self.boto3_raw_data["PointStyleOptions"]
        )

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialMapConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapConfiguration:
    boto3_raw_data: "type_defs.GeospatialMapConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return GeospatialMapFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def WindowOptions(self):  # pragma: no cover
        return GeospatialWindowOptions.make_one(self.boto3_raw_data["WindowOptions"])

    @cached_property
    def MapStyleOptions(self):  # pragma: no cover
        return GeospatialMapStyleOptions.make_one(
            self.boto3_raw_data["MapStyleOptions"]
        )

    @cached_property
    def PointStyleOptions(self):  # pragma: no cover
        return GeospatialPointStyleOptions.make_one(
            self.boto3_raw_data["PointStyleOptions"]
        )

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialMapConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapConfigurationOutput:
    boto3_raw_data: "type_defs.HeatMapConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return HeatMapFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return HeatMapSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def RowAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["RowAxisDisplayOptions"]
        )

    @cached_property
    def RowLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["RowLabelOptions"]
        )

    @cached_property
    def ColumnAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["ColumnAxisDisplayOptions"]
        )

    @cached_property
    def ColumnLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["ColumnLabelOptions"]
        )

    @cached_property
    def ColorScale(self):  # pragma: no cover
        return ColorScaleOutput.make_one(self.boto3_raw_data["ColorScale"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HeatMapConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeatMapConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapConfiguration:
    boto3_raw_data: "type_defs.HeatMapConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return HeatMapFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return HeatMapSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def RowAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["RowAxisDisplayOptions"])

    @cached_property
    def RowLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["RowLabelOptions"])

    @cached_property
    def ColumnAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(
            self.boto3_raw_data["ColumnAxisDisplayOptions"]
        )

    @cached_property
    def ColumnLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["ColumnLabelOptions"])

    @cached_property
    def ColorScale(self):  # pragma: no cover
        return ColorScale.make_one(self.boto3_raw_data["ColorScale"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HeatMapConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeatMapConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistogramConfigurationOutput:
    boto3_raw_data: "type_defs.HistogramConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return HistogramFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def XAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["XAxisDisplayOptions"]
        )

    @cached_property
    def XAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["XAxisLabelOptions"]
        )

    @cached_property
    def YAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["YAxisDisplayOptions"]
        )

    @cached_property
    def BinOptions(self):  # pragma: no cover
        return HistogramBinOptions.make_one(self.boto3_raw_data["BinOptions"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HistogramConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HistogramConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistogramConfiguration:
    boto3_raw_data: "type_defs.HistogramConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return HistogramFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def XAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["XAxisDisplayOptions"])

    @cached_property
    def XAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["XAxisLabelOptions"])

    @cached_property
    def YAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["YAxisDisplayOptions"])

    @cached_property
    def BinOptions(self):  # pragma: no cover
        return HistogramBinOptions.make_one(self.boto3_raw_data["BinOptions"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HistogramConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HistogramConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIVisualOutput:
    boto3_raw_data: "type_defs.KPIVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return KPIConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return KPIConditionalFormattingOutput.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KPIVisualOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.KPIVisualOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KPIVisual:
    boto3_raw_data: "type_defs.KPIVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return KPIConfiguration.make_one(self.boto3_raw_data["ChartConfiguration"])

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return KPIConditionalFormatting.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KPIVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.KPIVisualTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartConfigurationOutput:
    boto3_raw_data: "type_defs.LineChartConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return LineChartFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return LineChartSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def ForecastConfigurations(self):  # pragma: no cover
        return ForecastConfigurationOutput.make_many(
            self.boto3_raw_data["ForecastConfigurations"]
        )

    Type = field("Type")

    @cached_property
    def SmallMultiplesOptions(self):  # pragma: no cover
        return SmallMultiplesOptions.make_one(
            self.boto3_raw_data["SmallMultiplesOptions"]
        )

    @cached_property
    def XAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["XAxisDisplayOptions"]
        )

    @cached_property
    def XAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["XAxisLabelOptions"]
        )

    @cached_property
    def PrimaryYAxisDisplayOptions(self):  # pragma: no cover
        return LineSeriesAxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["PrimaryYAxisDisplayOptions"]
        )

    @cached_property
    def PrimaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["PrimaryYAxisLabelOptions"]
        )

    @cached_property
    def SecondaryYAxisDisplayOptions(self):  # pragma: no cover
        return LineSeriesAxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["SecondaryYAxisDisplayOptions"]
        )

    @cached_property
    def SecondaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["SecondaryYAxisLabelOptions"]
        )

    @cached_property
    def SingleAxisOptions(self):  # pragma: no cover
        return SingleAxisOptions.make_one(self.boto3_raw_data["SingleAxisOptions"])

    @cached_property
    def DefaultSeriesSettings(self):  # pragma: no cover
        return LineChartDefaultSeriesSettings.make_one(
            self.boto3_raw_data["DefaultSeriesSettings"]
        )

    @cached_property
    def Series(self):  # pragma: no cover
        return SeriesItem.make_many(self.boto3_raw_data["Series"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def ReferenceLines(self):  # pragma: no cover
        return ReferenceLine.make_many(self.boto3_raw_data["ReferenceLines"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def ContributionAnalysisDefaults(self):  # pragma: no cover
        return ContributionAnalysisDefaultOutput.make_many(
            self.boto3_raw_data["ContributionAnalysisDefaults"]
        )

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineChartConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartConfiguration:
    boto3_raw_data: "type_defs.LineChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return LineChartFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return LineChartSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def ForecastConfigurations(self):  # pragma: no cover
        return ForecastConfiguration.make_many(
            self.boto3_raw_data["ForecastConfigurations"]
        )

    Type = field("Type")

    @cached_property
    def SmallMultiplesOptions(self):  # pragma: no cover
        return SmallMultiplesOptions.make_one(
            self.boto3_raw_data["SmallMultiplesOptions"]
        )

    @cached_property
    def XAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["XAxisDisplayOptions"])

    @cached_property
    def XAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["XAxisLabelOptions"])

    @cached_property
    def PrimaryYAxisDisplayOptions(self):  # pragma: no cover
        return LineSeriesAxisDisplayOptions.make_one(
            self.boto3_raw_data["PrimaryYAxisDisplayOptions"]
        )

    @cached_property
    def PrimaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["PrimaryYAxisLabelOptions"]
        )

    @cached_property
    def SecondaryYAxisDisplayOptions(self):  # pragma: no cover
        return LineSeriesAxisDisplayOptions.make_one(
            self.boto3_raw_data["SecondaryYAxisDisplayOptions"]
        )

    @cached_property
    def SecondaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["SecondaryYAxisLabelOptions"]
        )

    @cached_property
    def SingleAxisOptions(self):  # pragma: no cover
        return SingleAxisOptions.make_one(self.boto3_raw_data["SingleAxisOptions"])

    @cached_property
    def DefaultSeriesSettings(self):  # pragma: no cover
        return LineChartDefaultSeriesSettings.make_one(
            self.boto3_raw_data["DefaultSeriesSettings"]
        )

    @cached_property
    def Series(self):  # pragma: no cover
        return SeriesItem.make_many(self.boto3_raw_data["Series"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def ReferenceLines(self):  # pragma: no cover
        return ReferenceLine.make_many(self.boto3_raw_data["ReferenceLines"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def ContributionAnalysisDefaults(self):  # pragma: no cover
        return ContributionAnalysisDefault.make_many(
            self.boto3_raw_data["ContributionAnalysisDefaults"]
        )

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartConfigurationOutput:
    boto3_raw_data: "type_defs.PieChartConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return PieChartFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return PieChartSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def DonutOptions(self):  # pragma: no cover
        return DonutOptions.make_one(self.boto3_raw_data["DonutOptions"])

    @cached_property
    def SmallMultiplesOptions(self):  # pragma: no cover
        return SmallMultiplesOptions.make_one(
            self.boto3_raw_data["SmallMultiplesOptions"]
        )

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def ValueLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["ValueLabelOptions"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def ContributionAnalysisDefaults(self):  # pragma: no cover
        return ContributionAnalysisDefaultOutput.make_many(
            self.boto3_raw_data["ContributionAnalysisDefaults"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PieChartConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PieChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartConfiguration:
    boto3_raw_data: "type_defs.PieChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return PieChartFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return PieChartSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def DonutOptions(self):  # pragma: no cover
        return DonutOptions.make_one(self.boto3_raw_data["DonutOptions"])

    @cached_property
    def SmallMultiplesOptions(self):  # pragma: no cover
        return SmallMultiplesOptions.make_one(
            self.boto3_raw_data["SmallMultiplesOptions"]
        )

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def ValueLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["ValueLabelOptions"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def ContributionAnalysisDefaults(self):  # pragma: no cover
        return ContributionAnalysisDefault.make_many(
            self.boto3_raw_data["ContributionAnalysisDefaults"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PieChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PieChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableConfigurationOutput:
    boto3_raw_data: "type_defs.PivotTableConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return PivotTableFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return PivotTableSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def TableOptions(self):  # pragma: no cover
        return PivotTableOptionsOutput.make_one(self.boto3_raw_data["TableOptions"])

    @cached_property
    def TotalOptions(self):  # pragma: no cover
        return PivotTableTotalOptionsOutput.make_one(
            self.boto3_raw_data["TotalOptions"]
        )

    @cached_property
    def FieldOptions(self):  # pragma: no cover
        return PivotTableFieldOptionsOutput.make_one(
            self.boto3_raw_data["FieldOptions"]
        )

    @cached_property
    def PaginatedReportOptions(self):  # pragma: no cover
        return PivotTablePaginatedReportOptions.make_one(
            self.boto3_raw_data["PaginatedReportOptions"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.PivotTableConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableConfiguration:
    boto3_raw_data: "type_defs.PivotTableConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return PivotTableFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return PivotTableSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def TableOptions(self):  # pragma: no cover
        return PivotTableOptions.make_one(self.boto3_raw_data["TableOptions"])

    @cached_property
    def TotalOptions(self):  # pragma: no cover
        return PivotTableTotalOptions.make_one(self.boto3_raw_data["TotalOptions"])

    @cached_property
    def FieldOptions(self):  # pragma: no cover
        return PivotTableFieldOptions.make_one(self.boto3_raw_data["FieldOptions"])

    @cached_property
    def PaginatedReportOptions(self):  # pragma: no cover
        return PivotTablePaginatedReportOptions.make_one(
            self.boto3_raw_data["PaginatedReportOptions"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartConfigurationOutput:
    boto3_raw_data: "type_defs.RadarChartConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return RadarChartFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return RadarChartSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    Shape = field("Shape")

    @cached_property
    def BaseSeriesSettings(self):  # pragma: no cover
        return RadarChartSeriesSettings.make_one(
            self.boto3_raw_data["BaseSeriesSettings"]
        )

    StartAngle = field("StartAngle")

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    AlternateBandColorsVisibility = field("AlternateBandColorsVisibility")
    AlternateBandEvenColor = field("AlternateBandEvenColor")
    AlternateBandOddColor = field("AlternateBandOddColor")

    @cached_property
    def CategoryAxis(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(self.boto3_raw_data["CategoryAxis"])

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def ColorAxis(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(self.boto3_raw_data["ColorAxis"])

    @cached_property
    def ColorLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["ColorLabelOptions"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    AxesRangeScale = field("AxesRangeScale")

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RadarChartConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartConfiguration:
    boto3_raw_data: "type_defs.RadarChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return RadarChartFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return RadarChartSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    Shape = field("Shape")

    @cached_property
    def BaseSeriesSettings(self):  # pragma: no cover
        return RadarChartSeriesSettings.make_one(
            self.boto3_raw_data["BaseSeriesSettings"]
        )

    StartAngle = field("StartAngle")

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    AlternateBandColorsVisibility = field("AlternateBandColorsVisibility")
    AlternateBandEvenColor = field("AlternateBandEvenColor")
    AlternateBandOddColor = field("AlternateBandOddColor")

    @cached_property
    def CategoryAxis(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["CategoryAxis"])

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def ColorAxis(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["ColorAxis"])

    @cached_property
    def ColorLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["ColorLabelOptions"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    AxesRangeScale = field("AxesRangeScale")

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RadarChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramChartConfigurationOutput:
    boto3_raw_data: "type_defs.SankeyDiagramChartConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return SankeyDiagramFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return SankeyDiagramSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SankeyDiagramChartConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramChartConfiguration:
    boto3_raw_data: "type_defs.SankeyDiagramChartConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return SankeyDiagramFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return SankeyDiagramSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SankeyDiagramChartConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotConfigurationOutput:
    boto3_raw_data: "type_defs.ScatterPlotConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return ScatterPlotFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return ScatterPlotSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def XAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["XAxisLabelOptions"]
        )

    @cached_property
    def XAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["XAxisDisplayOptions"]
        )

    @cached_property
    def YAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["YAxisLabelOptions"]
        )

    @cached_property
    def YAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["YAxisDisplayOptions"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ScatterPlotConfigurationOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotConfiguration:
    boto3_raw_data: "type_defs.ScatterPlotConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return ScatterPlotFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return ScatterPlotSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def XAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["XAxisLabelOptions"])

    @cached_property
    def XAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["XAxisDisplayOptions"])

    @cached_property
    def YAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["YAxisLabelOptions"])

    @cached_property
    def YAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(self.boto3_raw_data["YAxisDisplayOptions"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScatterPlotConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InsightConfigurationOutput:
    boto3_raw_data: "type_defs.InsightConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def Computations(self):  # pragma: no cover
        return Computation.make_many(self.boto3_raw_data["Computations"])

    @cached_property
    def CustomNarrative(self):  # pragma: no cover
        return CustomNarrativeOptions.make_one(self.boto3_raw_data["CustomNarrative"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InsightConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InsightConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InsightConfiguration:
    boto3_raw_data: "type_defs.InsightConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def Computations(self):  # pragma: no cover
        return Computation.make_many(self.boto3_raw_data["Computations"])

    @cached_property
    def CustomNarrative(self):  # pragma: no cover
        return CustomNarrativeOptions.make_one(self.boto3_raw_data["CustomNarrative"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InsightConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InsightConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapConfigurationOutput:
    boto3_raw_data: "type_defs.TreeMapConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return TreeMapFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return TreeMapSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def GroupLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["GroupLabelOptions"]
        )

    @cached_property
    def SizeLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["SizeLabelOptions"]
        )

    @cached_property
    def ColorLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["ColorLabelOptions"]
        )

    @cached_property
    def ColorScale(self):  # pragma: no cover
        return ColorScaleOutput.make_one(self.boto3_raw_data["ColorScale"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptionsOutput.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TreeMapConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TreeMapConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapConfiguration:
    boto3_raw_data: "type_defs.TreeMapConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return TreeMapFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return TreeMapSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def GroupLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["GroupLabelOptions"])

    @cached_property
    def SizeLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["SizeLabelOptions"])

    @cached_property
    def ColorLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(self.boto3_raw_data["ColorLabelOptions"])

    @cached_property
    def ColorScale(self):  # pragma: no cover
        return ColorScale.make_one(self.boto3_raw_data["ColorScale"])

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def Tooltip(self):  # pragma: no cover
        return TooltipOptions.make_one(self.boto3_raw_data["Tooltip"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TreeMapConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TreeMapConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartConfigurationOutput:
    boto3_raw_data: "type_defs.WaterfallChartConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return WaterfallChartFieldWellsOutput.make_one(
            self.boto3_raw_data["FieldWells"]
        )

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return WaterfallChartSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def WaterfallChartOptions(self):  # pragma: no cover
        return WaterfallChartOptions.make_one(
            self.boto3_raw_data["WaterfallChartOptions"]
        )

    @cached_property
    def CategoryAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["CategoryAxisLabelOptions"]
        )

    @cached_property
    def CategoryAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["CategoryAxisDisplayOptions"]
        )

    @cached_property
    def PrimaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["PrimaryYAxisLabelOptions"]
        )

    @cached_property
    def PrimaryYAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptionsOutput.make_one(
            self.boto3_raw_data["PrimaryYAxisDisplayOptions"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptionsOutput.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPaletteOutput.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def ColorConfiguration(self):  # pragma: no cover
        return WaterfallChartColorConfiguration.make_one(
            self.boto3_raw_data["ColorConfiguration"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.WaterfallChartConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallChartConfiguration:
    boto3_raw_data: "type_defs.WaterfallChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return WaterfallChartFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return WaterfallChartSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def WaterfallChartOptions(self):  # pragma: no cover
        return WaterfallChartOptions.make_one(
            self.boto3_raw_data["WaterfallChartOptions"]
        )

    @cached_property
    def CategoryAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["CategoryAxisLabelOptions"]
        )

    @cached_property
    def CategoryAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(
            self.boto3_raw_data["CategoryAxisDisplayOptions"]
        )

    @cached_property
    def PrimaryYAxisLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["PrimaryYAxisLabelOptions"]
        )

    @cached_property
    def PrimaryYAxisDisplayOptions(self):  # pragma: no cover
        return AxisDisplayOptions.make_one(
            self.boto3_raw_data["PrimaryYAxisDisplayOptions"]
        )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def DataLabels(self):  # pragma: no cover
        return DataLabelOptions.make_one(self.boto3_raw_data["DataLabels"])

    @cached_property
    def VisualPalette(self):  # pragma: no cover
        return VisualPalette.make_one(self.boto3_raw_data["VisualPalette"])

    @cached_property
    def ColorConfiguration(self):  # pragma: no cover
        return WaterfallChartColorConfiguration.make_one(
            self.boto3_raw_data["ColorConfiguration"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WaterfallChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudChartConfigurationOutput:
    boto3_raw_data: "type_defs.WordCloudChartConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return WordCloudFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return WordCloudSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptionsOutput.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def WordCloudOptions(self):  # pragma: no cover
        return WordCloudOptions.make_one(self.boto3_raw_data["WordCloudOptions"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.WordCloudChartConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudChartConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudChartConfiguration:
    boto3_raw_data: "type_defs.WordCloudChartConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return WordCloudFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return WordCloudSortConfiguration.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def CategoryLabelOptions(self):  # pragma: no cover
        return ChartAxisLabelOptions.make_one(
            self.boto3_raw_data["CategoryLabelOptions"]
        )

    @cached_property
    def WordCloudOptions(self):  # pragma: no cover
        return WordCloudOptions.make_one(self.boto3_raw_data["WordCloudOptions"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WordCloudChartConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudChartConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisualOutput:
    boto3_raw_data: "type_defs.PluginVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    PluginArn = field("PluginArn")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return PluginVisualConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PluginVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PluginVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PluginVisual:
    boto3_raw_data: "type_defs.PluginVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    PluginArn = field("PluginArn")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return PluginVisualConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PluginVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PluginVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableConfigurationOutput:
    boto3_raw_data: "type_defs.TableConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return TableFieldWellsOutput.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return TableSortConfigurationOutput.make_one(
            self.boto3_raw_data["SortConfiguration"]
        )

    @cached_property
    def TableOptions(self):  # pragma: no cover
        return TableOptionsOutput.make_one(self.boto3_raw_data["TableOptions"])

    @cached_property
    def TotalOptions(self):  # pragma: no cover
        return TotalOptionsOutput.make_one(self.boto3_raw_data["TotalOptions"])

    @cached_property
    def FieldOptions(self):  # pragma: no cover
        return TableFieldOptionsOutput.make_one(self.boto3_raw_data["FieldOptions"])

    @cached_property
    def PaginatedReportOptions(self):  # pragma: no cover
        return TablePaginatedReportOptions.make_one(
            self.boto3_raw_data["PaginatedReportOptions"]
        )

    @cached_property
    def TableInlineVisualizations(self):  # pragma: no cover
        return TableInlineVisualization.make_many(
            self.boto3_raw_data["TableInlineVisualizations"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableConfiguration:
    boto3_raw_data: "type_defs.TableConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def FieldWells(self):  # pragma: no cover
        return TableFieldWells.make_one(self.boto3_raw_data["FieldWells"])

    @cached_property
    def SortConfiguration(self):  # pragma: no cover
        return TableSortConfiguration.make_one(self.boto3_raw_data["SortConfiguration"])

    @cached_property
    def TableOptions(self):  # pragma: no cover
        return TableOptions.make_one(self.boto3_raw_data["TableOptions"])

    @cached_property
    def TotalOptions(self):  # pragma: no cover
        return TotalOptions.make_one(self.boto3_raw_data["TotalOptions"])

    @cached_property
    def FieldOptions(self):  # pragma: no cover
        return TableFieldOptions.make_one(self.boto3_raw_data["FieldOptions"])

    @cached_property
    def PaginatedReportOptions(self):  # pragma: no cover
        return TablePaginatedReportOptions.make_one(
            self.boto3_raw_data["PaginatedReportOptions"]
        )

    @cached_property
    def TableInlineVisualizations(self):  # pragma: no cover
        return TableInlineVisualization.make_many(
            self.boto3_raw_data["TableInlineVisualizations"]
        )

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TableConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LayoutConfigurationOutput:
    boto3_raw_data: "type_defs.LayoutConfigurationOutputTypeDef" = dataclasses.field()

    @cached_property
    def GridLayout(self):  # pragma: no cover
        return GridLayoutConfigurationOutput.make_one(self.boto3_raw_data["GridLayout"])

    @cached_property
    def FreeFormLayout(self):  # pragma: no cover
        return FreeFormLayoutConfigurationOutput.make_one(
            self.boto3_raw_data["FreeFormLayout"]
        )

    @cached_property
    def SectionBasedLayout(self):  # pragma: no cover
        return SectionBasedLayoutConfigurationOutput.make_one(
            self.boto3_raw_data["SectionBasedLayout"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LayoutConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LayoutConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LayoutConfiguration:
    boto3_raw_data: "type_defs.LayoutConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def GridLayout(self):  # pragma: no cover
        return GridLayoutConfiguration.make_one(self.boto3_raw_data["GridLayout"])

    @cached_property
    def FreeFormLayout(self):  # pragma: no cover
        return FreeFormLayoutConfiguration.make_one(
            self.boto3_raw_data["FreeFormLayout"]
        )

    @cached_property
    def SectionBasedLayout(self):  # pragma: no cover
        return SectionBasedLayoutConfiguration.make_one(
            self.boto3_raw_data["SectionBasedLayout"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LayoutConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LayoutConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAnalysisResponse:
    boto3_raw_data: "type_defs.DescribeAnalysisResponseTypeDef" = dataclasses.field()

    @cached_property
    def Analysis(self):  # pragma: no cover
        return Analysis.make_one(self.boto3_raw_data["Analysis"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeAnalysisResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAnalysisResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Dashboard:
    boto3_raw_data: "type_defs.DashboardTypeDef" = dataclasses.field()

    DashboardId = field("DashboardId")
    Arn = field("Arn")
    Name = field("Name")

    @cached_property
    def Version(self):  # pragma: no cover
        return DashboardVersion.make_one(self.boto3_raw_data["Version"])

    CreatedTime = field("CreatedTime")
    LastPublishedTime = field("LastPublishedTime")
    LastUpdatedTime = field("LastUpdatedTime")
    LinkEntities = field("LinkEntities")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DashboardTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DashboardTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Template:
    boto3_raw_data: "type_defs.TemplateTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Name = field("Name")

    @cached_property
    def Version(self):  # pragma: no cover
        return TemplateVersion.make_one(self.boto3_raw_data["Version"])

    TemplateId = field("TemplateId")
    LastUpdatedTime = field("LastUpdatedTime")
    CreatedTime = field("CreatedTime")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TemplateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TemplateTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterOutput:
    boto3_raw_data: "type_defs.FilterOutputTypeDef" = dataclasses.field()

    @cached_property
    def CategoryFilter(self):  # pragma: no cover
        return CategoryFilterOutput.make_one(self.boto3_raw_data["CategoryFilter"])

    @cached_property
    def NumericRangeFilter(self):  # pragma: no cover
        return NumericRangeFilterOutput.make_one(
            self.boto3_raw_data["NumericRangeFilter"]
        )

    @cached_property
    def NumericEqualityFilter(self):  # pragma: no cover
        return NumericEqualityFilterOutput.make_one(
            self.boto3_raw_data["NumericEqualityFilter"]
        )

    @cached_property
    def TimeEqualityFilter(self):  # pragma: no cover
        return TimeEqualityFilterOutput.make_one(
            self.boto3_raw_data["TimeEqualityFilter"]
        )

    @cached_property
    def TimeRangeFilter(self):  # pragma: no cover
        return TimeRangeFilterOutput.make_one(self.boto3_raw_data["TimeRangeFilter"])

    @cached_property
    def RelativeDatesFilter(self):  # pragma: no cover
        return RelativeDatesFilterOutput.make_one(
            self.boto3_raw_data["RelativeDatesFilter"]
        )

    @cached_property
    def TopBottomFilter(self):  # pragma: no cover
        return TopBottomFilterOutput.make_one(self.boto3_raw_data["TopBottomFilter"])

    @cached_property
    def NestedFilter(self):  # pragma: no cover
        return NestedFilterOutput.make_one(self.boto3_raw_data["NestedFilter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilterOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Filter:
    boto3_raw_data: "type_defs.FilterTypeDef" = dataclasses.field()

    @cached_property
    def CategoryFilter(self):  # pragma: no cover
        return CategoryFilter.make_one(self.boto3_raw_data["CategoryFilter"])

    @cached_property
    def NumericRangeFilter(self):  # pragma: no cover
        return NumericRangeFilter.make_one(self.boto3_raw_data["NumericRangeFilter"])

    @cached_property
    def NumericEqualityFilter(self):  # pragma: no cover
        return NumericEqualityFilter.make_one(
            self.boto3_raw_data["NumericEqualityFilter"]
        )

    @cached_property
    def TimeEqualityFilter(self):  # pragma: no cover
        return TimeEqualityFilter.make_one(self.boto3_raw_data["TimeEqualityFilter"])

    @cached_property
    def TimeRangeFilter(self):  # pragma: no cover
        return TimeRangeFilter.make_one(self.boto3_raw_data["TimeRangeFilter"])

    @cached_property
    def RelativeDatesFilter(self):  # pragma: no cover
        return RelativeDatesFilter.make_one(self.boto3_raw_data["RelativeDatesFilter"])

    @cached_property
    def TopBottomFilter(self):  # pragma: no cover
        return TopBottomFilter.make_one(self.boto3_raw_data["TopBottomFilter"])

    @cached_property
    def NestedFilter(self):  # pragma: no cover
        return NestedFilter.make_one(self.boto3_raw_data["NestedFilter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartVisualOutput:
    boto3_raw_data: "type_defs.BarChartVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return BarChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BarChartVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BarChartVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BarChartVisual:
    boto3_raw_data: "type_defs.BarChartVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return BarChartConfiguration.make_one(self.boto3_raw_data["ChartConfiguration"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BarChartVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BarChartVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotVisualOutput:
    boto3_raw_data: "type_defs.BoxPlotVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return BoxPlotChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BoxPlotVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BoxPlotVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BoxPlotVisual:
    boto3_raw_data: "type_defs.BoxPlotVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return BoxPlotChartConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BoxPlotVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BoxPlotVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartVisualOutput:
    boto3_raw_data: "type_defs.ComboChartVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return ComboChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ComboChartVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComboChartVisual:
    boto3_raw_data: "type_defs.ComboChartVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return ComboChartConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ComboChartVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComboChartVisualTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapVisualOutput:
    boto3_raw_data: "type_defs.FilledMapVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return FilledMapConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return FilledMapConditionalFormattingOutput.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FilledMapVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilledMapVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilledMapVisual:
    boto3_raw_data: "type_defs.FilledMapVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return FilledMapConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return FilledMapConditionalFormatting.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilledMapVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilledMapVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartVisualOutput:
    boto3_raw_data: "type_defs.FunnelChartVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return FunnelChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FunnelChartVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FunnelChartVisual:
    boto3_raw_data: "type_defs.FunnelChartVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return FunnelChartConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FunnelChartVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FunnelChartVisualTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerMapConfigurationOutput:
    boto3_raw_data: "type_defs.GeospatialLayerMapConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def MapLayers(self):  # pragma: no cover
        return GeospatialLayerItemOutput.make_many(self.boto3_raw_data["MapLayers"])

    @cached_property
    def MapState(self):  # pragma: no cover
        return GeospatialMapState.make_one(self.boto3_raw_data["MapState"])

    @cached_property
    def MapStyle(self):  # pragma: no cover
        return GeospatialMapStyle.make_one(self.boto3_raw_data["MapStyle"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GeospatialLayerMapConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerMapConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialLayerMapConfiguration:
    boto3_raw_data: "type_defs.GeospatialLayerMapConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Legend(self):  # pragma: no cover
        return LegendOptions.make_one(self.boto3_raw_data["Legend"])

    @cached_property
    def MapLayers(self):  # pragma: no cover
        return GeospatialLayerItem.make_many(self.boto3_raw_data["MapLayers"])

    @cached_property
    def MapState(self):  # pragma: no cover
        return GeospatialMapState.make_one(self.boto3_raw_data["MapState"])

    @cached_property
    def MapStyle(self):  # pragma: no cover
        return GeospatialMapStyle.make_one(self.boto3_raw_data["MapStyle"])

    @cached_property
    def Interactions(self):  # pragma: no cover
        return VisualInteractionOptions.make_one(self.boto3_raw_data["Interactions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GeospatialLayerMapConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialLayerMapConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapVisualOutput:
    boto3_raw_data: "type_defs.GeospatialMapVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return GeospatialMapConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialMapVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeospatialMapVisual:
    boto3_raw_data: "type_defs.GeospatialMapVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return GeospatialMapConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeospatialMapVisualTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeospatialMapVisualTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapVisualOutput:
    boto3_raw_data: "type_defs.HeatMapVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return HeatMapConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HeatMapVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HeatMapVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HeatMapVisual:
    boto3_raw_data: "type_defs.HeatMapVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return HeatMapConfiguration.make_one(self.boto3_raw_data["ChartConfiguration"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HeatMapVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HeatMapVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistogramVisualOutput:
    boto3_raw_data: "type_defs.HistogramVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return HistogramConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.HistogramVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.HistogramVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HistogramVisual:
    boto3_raw_data: "type_defs.HistogramVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return HistogramConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HistogramVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HistogramVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartVisualOutput:
    boto3_raw_data: "type_defs.LineChartVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return LineChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LineChartVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LineChartVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LineChartVisual:
    boto3_raw_data: "type_defs.LineChartVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return LineChartConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LineChartVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LineChartVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartVisualOutput:
    boto3_raw_data: "type_defs.PieChartVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return PieChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PieChartVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PieChartVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PieChartVisual:
    boto3_raw_data: "type_defs.PieChartVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return PieChartConfiguration.make_one(self.boto3_raw_data["ChartConfiguration"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PieChartVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PieChartVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableVisualOutput:
    boto3_raw_data: "type_defs.PivotTableVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return PivotTableConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return PivotTableConditionalFormattingOutput.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PivotTableVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PivotTableVisual:
    boto3_raw_data: "type_defs.PivotTableVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return PivotTableConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return PivotTableConditionalFormatting.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PivotTableVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PivotTableVisualTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartVisualOutput:
    boto3_raw_data: "type_defs.RadarChartVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return RadarChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RadarChartVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RadarChartVisual:
    boto3_raw_data: "type_defs.RadarChartVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return RadarChartConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RadarChartVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RadarChartVisualTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramVisualOutput:
    boto3_raw_data: "type_defs.SankeyDiagramVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return SankeyDiagramChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SankeyDiagramVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SankeyDiagramVisual:
    boto3_raw_data: "type_defs.SankeyDiagramVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return SankeyDiagramChartConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SankeyDiagramVisualTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SankeyDiagramVisualTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotVisualOutput:
    boto3_raw_data: "type_defs.ScatterPlotVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return ScatterPlotConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ScatterPlotVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ScatterPlotVisual:
    boto3_raw_data: "type_defs.ScatterPlotVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return ScatterPlotConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ScatterPlotVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ScatterPlotVisualTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InsightVisualOutput:
    boto3_raw_data: "type_defs.InsightVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    DataSetIdentifier = field("DataSetIdentifier")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def InsightConfiguration(self):  # pragma: no cover
        return InsightConfigurationOutput.make_one(
            self.boto3_raw_data["InsightConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InsightVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InsightVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InsightVisual:
    boto3_raw_data: "type_defs.InsightVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    DataSetIdentifier = field("DataSetIdentifier")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def InsightConfiguration(self):  # pragma: no cover
        return InsightConfiguration.make_one(
            self.boto3_raw_data["InsightConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InsightVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InsightVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapVisualOutput:
    boto3_raw_data: "type_defs.TreeMapVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return TreeMapConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TreeMapVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TreeMapVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TreeMapVisual:
    boto3_raw_data: "type_defs.TreeMapVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return TreeMapConfiguration.make_one(self.boto3_raw_data["ChartConfiguration"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TreeMapVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TreeMapVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallVisualOutput:
    boto3_raw_data: "type_defs.WaterfallVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return WaterfallChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WaterfallVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WaterfallVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WaterfallVisual:
    boto3_raw_data: "type_defs.WaterfallVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return WaterfallChartConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WaterfallVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WaterfallVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudVisualOutput:
    boto3_raw_data: "type_defs.WordCloudVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return WordCloudChartConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchyOutput.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.WordCloudVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WordCloudVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WordCloudVisual:
    boto3_raw_data: "type_defs.WordCloudVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return WordCloudChartConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    @cached_property
    def ColumnHierarchies(self):  # pragma: no cover
        return ColumnHierarchy.make_many(self.boto3_raw_data["ColumnHierarchies"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WordCloudVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WordCloudVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableVisualOutput:
    boto3_raw_data: "type_defs.TableVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return TableConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return TableConditionalFormattingOutput.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomActionOutput.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TableVisualOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TableVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TableVisual:
    boto3_raw_data: "type_defs.TableVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return TableConfiguration.make_one(self.boto3_raw_data["ChartConfiguration"])

    @cached_property
    def ConditionalFormatting(self):  # pragma: no cover
        return TableConditionalFormatting.make_one(
            self.boto3_raw_data["ConditionalFormatting"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return VisualCustomAction.make_many(self.boto3_raw_data["Actions"])

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TableVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TableVisualTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LayoutOutput:
    boto3_raw_data: "type_defs.LayoutOutputTypeDef" = dataclasses.field()

    @cached_property
    def Configuration(self):  # pragma: no cover
        return LayoutConfigurationOutput.make_one(self.boto3_raw_data["Configuration"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LayoutOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LayoutOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Layout:
    boto3_raw_data: "type_defs.LayoutTypeDef" = dataclasses.field()

    @cached_property
    def Configuration(self):  # pragma: no cover
        return LayoutConfiguration.make_one(self.boto3_raw_data["Configuration"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LayoutTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LayoutTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TopicVisual:
    boto3_raw_data: "type_defs.TopicVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    Role = field("Role")
    Ir = field("Ir")
    SupportingVisuals = field("SupportingVisuals")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TopicVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TopicVisualTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardResponse:
    boto3_raw_data: "type_defs.DescribeDashboardResponseTypeDef" = dataclasses.field()

    @cached_property
    def Dashboard(self):  # pragma: no cover
        return Dashboard.make_one(self.boto3_raw_data["Dashboard"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeDashboardResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTemplateResponse:
    boto3_raw_data: "type_defs.DescribeTemplateResponseTypeDef" = dataclasses.field()

    @cached_property
    def Template(self):  # pragma: no cover
        return Template.make_one(self.boto3_raw_data["Template"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeTemplateResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTemplateResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterGroupOutput:
    boto3_raw_data: "type_defs.FilterGroupOutputTypeDef" = dataclasses.field()

    FilterGroupId = field("FilterGroupId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return FilterOutput.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def ScopeConfiguration(self):  # pragma: no cover
        return FilterScopeConfigurationOutput.make_one(
            self.boto3_raw_data["ScopeConfiguration"]
        )

    CrossDataset = field("CrossDataset")
    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterGroupOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FilterGroupOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilterGroup:
    boto3_raw_data: "type_defs.FilterGroupTypeDef" = dataclasses.field()

    FilterGroupId = field("FilterGroupId")

    @cached_property
    def Filters(self):  # pragma: no cover
        return Filter.make_many(self.boto3_raw_data["Filters"])

    @cached_property
    def ScopeConfiguration(self):  # pragma: no cover
        return FilterScopeConfiguration.make_one(
            self.boto3_raw_data["ScopeConfiguration"]
        )

    CrossDataset = field("CrossDataset")
    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilterGroupTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilterGroupTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LayerMapVisualOutput:
    boto3_raw_data: "type_defs.LayerMapVisualOutputTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    DataSetIdentifier = field("DataSetIdentifier")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return GeospatialLayerMapConfigurationOutput.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.LayerMapVisualOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LayerMapVisualOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LayerMapVisual:
    boto3_raw_data: "type_defs.LayerMapVisualTypeDef" = dataclasses.field()

    VisualId = field("VisualId")
    DataSetIdentifier = field("DataSetIdentifier")

    @cached_property
    def Title(self):  # pragma: no cover
        return VisualTitleLabelOptions.make_one(self.boto3_raw_data["Title"])

    @cached_property
    def Subtitle(self):  # pragma: no cover
        return VisualSubtitleLabelOptions.make_one(self.boto3_raw_data["Subtitle"])

    @cached_property
    def ChartConfiguration(self):  # pragma: no cover
        return GeospatialLayerMapConfiguration.make_one(
            self.boto3_raw_data["ChartConfiguration"]
        )

    VisualContentAltText = field("VisualContentAltText")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LayerMapVisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.LayerMapVisualTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VisualOutput:
    boto3_raw_data: "type_defs.VisualOutputTypeDef" = dataclasses.field()

    @cached_property
    def TableVisual(self):  # pragma: no cover
        return TableVisualOutput.make_one(self.boto3_raw_data["TableVisual"])

    @cached_property
    def PivotTableVisual(self):  # pragma: no cover
        return PivotTableVisualOutput.make_one(self.boto3_raw_data["PivotTableVisual"])

    @cached_property
    def BarChartVisual(self):  # pragma: no cover
        return BarChartVisualOutput.make_one(self.boto3_raw_data["BarChartVisual"])

    @cached_property
    def KPIVisual(self):  # pragma: no cover
        return KPIVisualOutput.make_one(self.boto3_raw_data["KPIVisual"])

    @cached_property
    def PieChartVisual(self):  # pragma: no cover
        return PieChartVisualOutput.make_one(self.boto3_raw_data["PieChartVisual"])

    @cached_property
    def GaugeChartVisual(self):  # pragma: no cover
        return GaugeChartVisualOutput.make_one(self.boto3_raw_data["GaugeChartVisual"])

    @cached_property
    def LineChartVisual(self):  # pragma: no cover
        return LineChartVisualOutput.make_one(self.boto3_raw_data["LineChartVisual"])

    @cached_property
    def HeatMapVisual(self):  # pragma: no cover
        return HeatMapVisualOutput.make_one(self.boto3_raw_data["HeatMapVisual"])

    @cached_property
    def TreeMapVisual(self):  # pragma: no cover
        return TreeMapVisualOutput.make_one(self.boto3_raw_data["TreeMapVisual"])

    @cached_property
    def GeospatialMapVisual(self):  # pragma: no cover
        return GeospatialMapVisualOutput.make_one(
            self.boto3_raw_data["GeospatialMapVisual"]
        )

    @cached_property
    def FilledMapVisual(self):  # pragma: no cover
        return FilledMapVisualOutput.make_one(self.boto3_raw_data["FilledMapVisual"])

    @cached_property
    def LayerMapVisual(self):  # pragma: no cover
        return LayerMapVisualOutput.make_one(self.boto3_raw_data["LayerMapVisual"])

    @cached_property
    def FunnelChartVisual(self):  # pragma: no cover
        return FunnelChartVisualOutput.make_one(
            self.boto3_raw_data["FunnelChartVisual"]
        )

    @cached_property
    def ScatterPlotVisual(self):  # pragma: no cover
        return ScatterPlotVisualOutput.make_one(
            self.boto3_raw_data["ScatterPlotVisual"]
        )

    @cached_property
    def ComboChartVisual(self):  # pragma: no cover
        return ComboChartVisualOutput.make_one(self.boto3_raw_data["ComboChartVisual"])

    @cached_property
    def BoxPlotVisual(self):  # pragma: no cover
        return BoxPlotVisualOutput.make_one(self.boto3_raw_data["BoxPlotVisual"])

    @cached_property
    def WaterfallVisual(self):  # pragma: no cover
        return WaterfallVisualOutput.make_one(self.boto3_raw_data["WaterfallVisual"])

    @cached_property
    def HistogramVisual(self):  # pragma: no cover
        return HistogramVisualOutput.make_one(self.boto3_raw_data["HistogramVisual"])

    @cached_property
    def WordCloudVisual(self):  # pragma: no cover
        return WordCloudVisualOutput.make_one(self.boto3_raw_data["WordCloudVisual"])

    @cached_property
    def InsightVisual(self):  # pragma: no cover
        return InsightVisualOutput.make_one(self.boto3_raw_data["InsightVisual"])

    @cached_property
    def SankeyDiagramVisual(self):  # pragma: no cover
        return SankeyDiagramVisualOutput.make_one(
            self.boto3_raw_data["SankeyDiagramVisual"]
        )

    @cached_property
    def CustomContentVisual(self):  # pragma: no cover
        return CustomContentVisualOutput.make_one(
            self.boto3_raw_data["CustomContentVisual"]
        )

    @cached_property
    def EmptyVisual(self):  # pragma: no cover
        return EmptyVisualOutput.make_one(self.boto3_raw_data["EmptyVisual"])

    @cached_property
    def RadarChartVisual(self):  # pragma: no cover
        return RadarChartVisualOutput.make_one(self.boto3_raw_data["RadarChartVisual"])

    @cached_property
    def PluginVisual(self):  # pragma: no cover
        return PluginVisualOutput.make_one(self.boto3_raw_data["PluginVisual"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VisualOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VisualOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Visual:
    boto3_raw_data: "type_defs.VisualTypeDef" = dataclasses.field()

    @cached_property
    def TableVisual(self):  # pragma: no cover
        return TableVisual.make_one(self.boto3_raw_data["TableVisual"])

    @cached_property
    def PivotTableVisual(self):  # pragma: no cover
        return PivotTableVisual.make_one(self.boto3_raw_data["PivotTableVisual"])

    @cached_property
    def BarChartVisual(self):  # pragma: no cover
        return BarChartVisual.make_one(self.boto3_raw_data["BarChartVisual"])

    @cached_property
    def KPIVisual(self):  # pragma: no cover
        return KPIVisual.make_one(self.boto3_raw_data["KPIVisual"])

    @cached_property
    def PieChartVisual(self):  # pragma: no cover
        return PieChartVisual.make_one(self.boto3_raw_data["PieChartVisual"])

    @cached_property
    def GaugeChartVisual(self):  # pragma: no cover
        return GaugeChartVisual.make_one(self.boto3_raw_data["GaugeChartVisual"])

    @cached_property
    def LineChartVisual(self):  # pragma: no cover
        return LineChartVisual.make_one(self.boto3_raw_data["LineChartVisual"])

    @cached_property
    def HeatMapVisual(self):  # pragma: no cover
        return HeatMapVisual.make_one(self.boto3_raw_data["HeatMapVisual"])

    @cached_property
    def TreeMapVisual(self):  # pragma: no cover
        return TreeMapVisual.make_one(self.boto3_raw_data["TreeMapVisual"])

    @cached_property
    def GeospatialMapVisual(self):  # pragma: no cover
        return GeospatialMapVisual.make_one(self.boto3_raw_data["GeospatialMapVisual"])

    @cached_property
    def FilledMapVisual(self):  # pragma: no cover
        return FilledMapVisual.make_one(self.boto3_raw_data["FilledMapVisual"])

    @cached_property
    def LayerMapVisual(self):  # pragma: no cover
        return LayerMapVisual.make_one(self.boto3_raw_data["LayerMapVisual"])

    @cached_property
    def FunnelChartVisual(self):  # pragma: no cover
        return FunnelChartVisual.make_one(self.boto3_raw_data["FunnelChartVisual"])

    @cached_property
    def ScatterPlotVisual(self):  # pragma: no cover
        return ScatterPlotVisual.make_one(self.boto3_raw_data["ScatterPlotVisual"])

    @cached_property
    def ComboChartVisual(self):  # pragma: no cover
        return ComboChartVisual.make_one(self.boto3_raw_data["ComboChartVisual"])

    @cached_property
    def BoxPlotVisual(self):  # pragma: no cover
        return BoxPlotVisual.make_one(self.boto3_raw_data["BoxPlotVisual"])

    @cached_property
    def WaterfallVisual(self):  # pragma: no cover
        return WaterfallVisual.make_one(self.boto3_raw_data["WaterfallVisual"])

    @cached_property
    def HistogramVisual(self):  # pragma: no cover
        return HistogramVisual.make_one(self.boto3_raw_data["HistogramVisual"])

    @cached_property
    def WordCloudVisual(self):  # pragma: no cover
        return WordCloudVisual.make_one(self.boto3_raw_data["WordCloudVisual"])

    @cached_property
    def InsightVisual(self):  # pragma: no cover
        return InsightVisual.make_one(self.boto3_raw_data["InsightVisual"])

    @cached_property
    def SankeyDiagramVisual(self):  # pragma: no cover
        return SankeyDiagramVisual.make_one(self.boto3_raw_data["SankeyDiagramVisual"])

    @cached_property
    def CustomContentVisual(self):  # pragma: no cover
        return CustomContentVisual.make_one(self.boto3_raw_data["CustomContentVisual"])

    @cached_property
    def EmptyVisual(self):  # pragma: no cover
        return EmptyVisual.make_one(self.boto3_raw_data["EmptyVisual"])

    @cached_property
    def RadarChartVisual(self):  # pragma: no cover
        return RadarChartVisual.make_one(self.boto3_raw_data["RadarChartVisual"])

    @cached_property
    def PluginVisual(self):  # pragma: no cover
        return PluginVisual.make_one(self.boto3_raw_data["PluginVisual"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VisualTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VisualTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTopicReviewedAnswer:
    boto3_raw_data: "type_defs.CreateTopicReviewedAnswerTypeDef" = dataclasses.field()

    AnswerId = field("AnswerId")
    DatasetArn = field("DatasetArn")
    Question = field("Question")
    Mir = field("Mir")
    PrimaryVisual = field("PrimaryVisual")
    Template = field("Template")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTopicReviewedAnswerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTopicReviewedAnswerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetDefinitionOutput:
    boto3_raw_data: "type_defs.SheetDefinitionOutputTypeDef" = dataclasses.field()

    SheetId = field("SheetId")
    Title = field("Title")
    Description = field("Description")
    Name = field("Name")

    @cached_property
    def ParameterControls(self):  # pragma: no cover
        return ParameterControlOutput.make_many(
            self.boto3_raw_data["ParameterControls"]
        )

    @cached_property
    def FilterControls(self):  # pragma: no cover
        return FilterControlOutput.make_many(self.boto3_raw_data["FilterControls"])

    @cached_property
    def Visuals(self):  # pragma: no cover
        return VisualOutput.make_many(self.boto3_raw_data["Visuals"])

    @cached_property
    def TextBoxes(self):  # pragma: no cover
        return SheetTextBox.make_many(self.boto3_raw_data["TextBoxes"])

    @cached_property
    def Images(self):  # pragma: no cover
        return SheetImageOutput.make_many(self.boto3_raw_data["Images"])

    @cached_property
    def Layouts(self):  # pragma: no cover
        return LayoutOutput.make_many(self.boto3_raw_data["Layouts"])

    @cached_property
    def SheetControlLayouts(self):  # pragma: no cover
        return SheetControlLayoutOutput.make_many(
            self.boto3_raw_data["SheetControlLayouts"]
        )

    ContentType = field("ContentType")

    @cached_property
    def CustomActionDefaults(self):  # pragma: no cover
        return VisualCustomActionDefaults.make_one(
            self.boto3_raw_data["CustomActionDefaults"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SheetDefinitionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SheetDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SheetDefinition:
    boto3_raw_data: "type_defs.SheetDefinitionTypeDef" = dataclasses.field()

    SheetId = field("SheetId")
    Title = field("Title")
    Description = field("Description")
    Name = field("Name")

    @cached_property
    def ParameterControls(self):  # pragma: no cover
        return ParameterControl.make_many(self.boto3_raw_data["ParameterControls"])

    @cached_property
    def FilterControls(self):  # pragma: no cover
        return FilterControl.make_many(self.boto3_raw_data["FilterControls"])

    @cached_property
    def Visuals(self):  # pragma: no cover
        return Visual.make_many(self.boto3_raw_data["Visuals"])

    @cached_property
    def TextBoxes(self):  # pragma: no cover
        return SheetTextBox.make_many(self.boto3_raw_data["TextBoxes"])

    @cached_property
    def Images(self):  # pragma: no cover
        return SheetImage.make_many(self.boto3_raw_data["Images"])

    @cached_property
    def Layouts(self):  # pragma: no cover
        return Layout.make_many(self.boto3_raw_data["Layouts"])

    @cached_property
    def SheetControlLayouts(self):  # pragma: no cover
        return SheetControlLayout.make_many(self.boto3_raw_data["SheetControlLayouts"])

    ContentType = field("ContentType")

    @cached_property
    def CustomActionDefaults(self):  # pragma: no cover
        return VisualCustomActionDefaults.make_one(
            self.boto3_raw_data["CustomActionDefaults"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SheetDefinitionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SheetDefinitionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchCreateTopicReviewedAnswerRequest:
    boto3_raw_data: "type_defs.BatchCreateTopicReviewedAnswerRequestTypeDef" = (
        dataclasses.field()
    )

    AwsAccountId = field("AwsAccountId")
    TopicId = field("TopicId")

    @cached_property
    def Answers(self):  # pragma: no cover
        return CreateTopicReviewedAnswer.make_many(self.boto3_raw_data["Answers"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchCreateTopicReviewedAnswerRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchCreateTopicReviewedAnswerRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisDefinitionOutput:
    boto3_raw_data: "type_defs.AnalysisDefinitionOutputTypeDef" = dataclasses.field()

    @cached_property
    def DataSetIdentifierDeclarations(self):  # pragma: no cover
        return DataSetIdentifierDeclaration.make_many(
            self.boto3_raw_data["DataSetIdentifierDeclarations"]
        )

    @cached_property
    def Sheets(self):  # pragma: no cover
        return SheetDefinitionOutput.make_many(self.boto3_raw_data["Sheets"])

    @cached_property
    def CalculatedFields(self):  # pragma: no cover
        return CalculatedField.make_many(self.boto3_raw_data["CalculatedFields"])

    @cached_property
    def ParameterDeclarations(self):  # pragma: no cover
        return ParameterDeclarationOutput.make_many(
            self.boto3_raw_data["ParameterDeclarations"]
        )

    @cached_property
    def FilterGroups(self):  # pragma: no cover
        return FilterGroupOutput.make_many(self.boto3_raw_data["FilterGroups"])

    @cached_property
    def ColumnConfigurations(self):  # pragma: no cover
        return ColumnConfigurationOutput.make_many(
            self.boto3_raw_data["ColumnConfigurations"]
        )

    @cached_property
    def AnalysisDefaults(self):  # pragma: no cover
        return AnalysisDefaults.make_one(self.boto3_raw_data["AnalysisDefaults"])

    @cached_property
    def Options(self):  # pragma: no cover
        return AssetOptionsOutput.make_one(self.boto3_raw_data["Options"])

    @cached_property
    def QueryExecutionOptions(self):  # pragma: no cover
        return QueryExecutionOptions.make_one(
            self.boto3_raw_data["QueryExecutionOptions"]
        )

    @cached_property
    def StaticFiles(self):  # pragma: no cover
        return StaticFile.make_many(self.boto3_raw_data["StaticFiles"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisDefinitionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardVersionDefinitionOutput:
    boto3_raw_data: "type_defs.DashboardVersionDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataSetIdentifierDeclarations(self):  # pragma: no cover
        return DataSetIdentifierDeclaration.make_many(
            self.boto3_raw_data["DataSetIdentifierDeclarations"]
        )

    @cached_property
    def Sheets(self):  # pragma: no cover
        return SheetDefinitionOutput.make_many(self.boto3_raw_data["Sheets"])

    @cached_property
    def CalculatedFields(self):  # pragma: no cover
        return CalculatedField.make_many(self.boto3_raw_data["CalculatedFields"])

    @cached_property
    def ParameterDeclarations(self):  # pragma: no cover
        return ParameterDeclarationOutput.make_many(
            self.boto3_raw_data["ParameterDeclarations"]
        )

    @cached_property
    def FilterGroups(self):  # pragma: no cover
        return FilterGroupOutput.make_many(self.boto3_raw_data["FilterGroups"])

    @cached_property
    def ColumnConfigurations(self):  # pragma: no cover
        return ColumnConfigurationOutput.make_many(
            self.boto3_raw_data["ColumnConfigurations"]
        )

    @cached_property
    def AnalysisDefaults(self):  # pragma: no cover
        return AnalysisDefaults.make_one(self.boto3_raw_data["AnalysisDefaults"])

    @cached_property
    def Options(self):  # pragma: no cover
        return AssetOptionsOutput.make_one(self.boto3_raw_data["Options"])

    @cached_property
    def StaticFiles(self):  # pragma: no cover
        return StaticFile.make_many(self.boto3_raw_data["StaticFiles"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DashboardVersionDefinitionOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardVersionDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateVersionDefinitionOutput:
    boto3_raw_data: "type_defs.TemplateVersionDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataSetConfigurations(self):  # pragma: no cover
        return DataSetConfigurationOutput.make_many(
            self.boto3_raw_data["DataSetConfigurations"]
        )

    @cached_property
    def Sheets(self):  # pragma: no cover
        return SheetDefinitionOutput.make_many(self.boto3_raw_data["Sheets"])

    @cached_property
    def CalculatedFields(self):  # pragma: no cover
        return CalculatedField.make_many(self.boto3_raw_data["CalculatedFields"])

    @cached_property
    def ParameterDeclarations(self):  # pragma: no cover
        return ParameterDeclarationOutput.make_many(
            self.boto3_raw_data["ParameterDeclarations"]
        )

    @cached_property
    def FilterGroups(self):  # pragma: no cover
        return FilterGroupOutput.make_many(self.boto3_raw_data["FilterGroups"])

    @cached_property
    def ColumnConfigurations(self):  # pragma: no cover
        return ColumnConfigurationOutput.make_many(
            self.boto3_raw_data["ColumnConfigurations"]
        )

    @cached_property
    def AnalysisDefaults(self):  # pragma: no cover
        return AnalysisDefaults.make_one(self.boto3_raw_data["AnalysisDefaults"])

    @cached_property
    def Options(self):  # pragma: no cover
        return AssetOptionsOutput.make_one(self.boto3_raw_data["Options"])

    @cached_property
    def QueryExecutionOptions(self):  # pragma: no cover
        return QueryExecutionOptions.make_one(
            self.boto3_raw_data["QueryExecutionOptions"]
        )

    @cached_property
    def StaticFiles(self):  # pragma: no cover
        return StaticFile.make_many(self.boto3_raw_data["StaticFiles"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.TemplateVersionDefinitionOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TemplateVersionDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AnalysisDefinition:
    boto3_raw_data: "type_defs.AnalysisDefinitionTypeDef" = dataclasses.field()

    @cached_property
    def DataSetIdentifierDeclarations(self):  # pragma: no cover
        return DataSetIdentifierDeclaration.make_many(
            self.boto3_raw_data["DataSetIdentifierDeclarations"]
        )

    @cached_property
    def Sheets(self):  # pragma: no cover
        return SheetDefinition.make_many(self.boto3_raw_data["Sheets"])

    @cached_property
    def CalculatedFields(self):  # pragma: no cover
        return CalculatedField.make_many(self.boto3_raw_data["CalculatedFields"])

    @cached_property
    def ParameterDeclarations(self):  # pragma: no cover
        return ParameterDeclaration.make_many(
            self.boto3_raw_data["ParameterDeclarations"]
        )

    @cached_property
    def FilterGroups(self):  # pragma: no cover
        return FilterGroup.make_many(self.boto3_raw_data["FilterGroups"])

    @cached_property
    def ColumnConfigurations(self):  # pragma: no cover
        return ColumnConfiguration.make_many(
            self.boto3_raw_data["ColumnConfigurations"]
        )

    @cached_property
    def AnalysisDefaults(self):  # pragma: no cover
        return AnalysisDefaults.make_one(self.boto3_raw_data["AnalysisDefaults"])

    @cached_property
    def Options(self):  # pragma: no cover
        return AssetOptions.make_one(self.boto3_raw_data["Options"])

    @cached_property
    def QueryExecutionOptions(self):  # pragma: no cover
        return QueryExecutionOptions.make_one(
            self.boto3_raw_data["QueryExecutionOptions"]
        )

    @cached_property
    def StaticFiles(self):  # pragma: no cover
        return StaticFile.make_many(self.boto3_raw_data["StaticFiles"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AnalysisDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AnalysisDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DashboardVersionDefinition:
    boto3_raw_data: "type_defs.DashboardVersionDefinitionTypeDef" = dataclasses.field()

    @cached_property
    def DataSetIdentifierDeclarations(self):  # pragma: no cover
        return DataSetIdentifierDeclaration.make_many(
            self.boto3_raw_data["DataSetIdentifierDeclarations"]
        )

    @cached_property
    def Sheets(self):  # pragma: no cover
        return SheetDefinition.make_many(self.boto3_raw_data["Sheets"])

    @cached_property
    def CalculatedFields(self):  # pragma: no cover
        return CalculatedField.make_many(self.boto3_raw_data["CalculatedFields"])

    @cached_property
    def ParameterDeclarations(self):  # pragma: no cover
        return ParameterDeclaration.make_many(
            self.boto3_raw_data["ParameterDeclarations"]
        )

    @cached_property
    def FilterGroups(self):  # pragma: no cover
        return FilterGroup.make_many(self.boto3_raw_data["FilterGroups"])

    @cached_property
    def ColumnConfigurations(self):  # pragma: no cover
        return ColumnConfiguration.make_many(
            self.boto3_raw_data["ColumnConfigurations"]
        )

    @cached_property
    def AnalysisDefaults(self):  # pragma: no cover
        return AnalysisDefaults.make_one(self.boto3_raw_data["AnalysisDefaults"])

    @cached_property
    def Options(self):  # pragma: no cover
        return AssetOptions.make_one(self.boto3_raw_data["Options"])

    @cached_property
    def StaticFiles(self):  # pragma: no cover
        return StaticFile.make_many(self.boto3_raw_data["StaticFiles"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DashboardVersionDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DashboardVersionDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TemplateVersionDefinition:
    boto3_raw_data: "type_defs.TemplateVersionDefinitionTypeDef" = dataclasses.field()

    @cached_property
    def DataSetConfigurations(self):  # pragma: no cover
        return DataSetConfiguration.make_many(
            self.boto3_raw_data["DataSetConfigurations"]
        )

    @cached_property
    def Sheets(self):  # pragma: no cover
        return SheetDefinition.make_many(self.boto3_raw_data["Sheets"])

    @cached_property
    def CalculatedFields(self):  # pragma: no cover
        return CalculatedField.make_many(self.boto3_raw_data["CalculatedFields"])

    @cached_property
    def ParameterDeclarations(self):  # pragma: no cover
        return ParameterDeclaration.make_many(
            self.boto3_raw_data["ParameterDeclarations"]
        )

    @cached_property
    def FilterGroups(self):  # pragma: no cover
        return FilterGroup.make_many(self.boto3_raw_data["FilterGroups"])

    @cached_property
    def ColumnConfigurations(self):  # pragma: no cover
        return ColumnConfiguration.make_many(
            self.boto3_raw_data["ColumnConfigurations"]
        )

    @cached_property
    def AnalysisDefaults(self):  # pragma: no cover
        return AnalysisDefaults.make_one(self.boto3_raw_data["AnalysisDefaults"])

    @cached_property
    def Options(self):  # pragma: no cover
        return AssetOptions.make_one(self.boto3_raw_data["Options"])

    @cached_property
    def QueryExecutionOptions(self):  # pragma: no cover
        return QueryExecutionOptions.make_one(
            self.boto3_raw_data["QueryExecutionOptions"]
        )

    @cached_property
    def StaticFiles(self):  # pragma: no cover
        return StaticFile.make_many(self.boto3_raw_data["StaticFiles"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TemplateVersionDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TemplateVersionDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeAnalysisDefinitionResponse:
    boto3_raw_data: "type_defs.DescribeAnalysisDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    AnalysisId = field("AnalysisId")
    Name = field("Name")

    @cached_property
    def Errors(self):  # pragma: no cover
        return AnalysisError.make_many(self.boto3_raw_data["Errors"])

    ResourceStatus = field("ResourceStatus")
    ThemeArn = field("ThemeArn")

    @cached_property
    def Definition(self):  # pragma: no cover
        return AnalysisDefinitionOutput.make_one(self.boto3_raw_data["Definition"])

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeAnalysisDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeAnalysisDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeDashboardDefinitionResponse:
    boto3_raw_data: "type_defs.DescribeDashboardDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    DashboardId = field("DashboardId")

    @cached_property
    def Errors(self):  # pragma: no cover
        return DashboardError.make_many(self.boto3_raw_data["Errors"])

    Name = field("Name")
    ResourceStatus = field("ResourceStatus")
    ThemeArn = field("ThemeArn")

    @cached_property
    def Definition(self):  # pragma: no cover
        return DashboardVersionDefinitionOutput.make_one(
            self.boto3_raw_data["Definition"]
        )

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def DashboardPublishOptions(self):  # pragma: no cover
        return DashboardPublishOptions.make_one(
            self.boto3_raw_data["DashboardPublishOptions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeDashboardDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeDashboardDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeTemplateDefinitionResponse:
    boto3_raw_data: "type_defs.DescribeTemplateDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    TemplateId = field("TemplateId")

    @cached_property
    def Errors(self):  # pragma: no cover
        return TemplateError.make_many(self.boto3_raw_data["Errors"])

    ResourceStatus = field("ResourceStatus")
    ThemeArn = field("ThemeArn")

    @cached_property
    def Definition(self):  # pragma: no cover
        return TemplateVersionDefinitionOutput.make_one(
            self.boto3_raw_data["Definition"]
        )

    Status = field("Status")
    RequestId = field("RequestId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeTemplateDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeTemplateDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAnalysisRequest:
    boto3_raw_data: "type_defs.CreateAnalysisRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    AnalysisId = field("AnalysisId")
    Name = field("Name")
    Parameters = field("Parameters")
    Permissions = field("Permissions")

    @cached_property
    def SourceEntity(self):  # pragma: no cover
        return AnalysisSourceEntity.make_one(self.boto3_raw_data["SourceEntity"])

    ThemeArn = field("ThemeArn")

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    Definition = field("Definition")

    @cached_property
    def ValidationStrategy(self):  # pragma: no cover
        return ValidationStrategy.make_one(self.boto3_raw_data["ValidationStrategy"])

    FolderArns = field("FolderArns")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAnalysisRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAnalysisRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAnalysisRequest:
    boto3_raw_data: "type_defs.UpdateAnalysisRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    AnalysisId = field("AnalysisId")
    Name = field("Name")
    Parameters = field("Parameters")

    @cached_property
    def SourceEntity(self):  # pragma: no cover
        return AnalysisSourceEntity.make_one(self.boto3_raw_data["SourceEntity"])

    ThemeArn = field("ThemeArn")
    Definition = field("Definition")

    @cached_property
    def ValidationStrategy(self):  # pragma: no cover
        return ValidationStrategy.make_one(self.boto3_raw_data["ValidationStrategy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateAnalysisRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAnalysisRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateDashboardRequest:
    boto3_raw_data: "type_defs.CreateDashboardRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    Name = field("Name")
    Parameters = field("Parameters")
    Permissions = field("Permissions")

    @cached_property
    def SourceEntity(self):  # pragma: no cover
        return DashboardSourceEntity.make_one(self.boto3_raw_data["SourceEntity"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VersionDescription = field("VersionDescription")

    @cached_property
    def DashboardPublishOptions(self):  # pragma: no cover
        return DashboardPublishOptions.make_one(
            self.boto3_raw_data["DashboardPublishOptions"]
        )

    ThemeArn = field("ThemeArn")
    Definition = field("Definition")

    @cached_property
    def ValidationStrategy(self):  # pragma: no cover
        return ValidationStrategy.make_one(self.boto3_raw_data["ValidationStrategy"])

    FolderArns = field("FolderArns")
    LinkSharingConfiguration = field("LinkSharingConfiguration")
    LinkEntities = field("LinkEntities")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateDashboardRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateDashboardRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateDashboardRequest:
    boto3_raw_data: "type_defs.UpdateDashboardRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    DashboardId = field("DashboardId")
    Name = field("Name")

    @cached_property
    def SourceEntity(self):  # pragma: no cover
        return DashboardSourceEntity.make_one(self.boto3_raw_data["SourceEntity"])

    Parameters = field("Parameters")
    VersionDescription = field("VersionDescription")

    @cached_property
    def DashboardPublishOptions(self):  # pragma: no cover
        return DashboardPublishOptions.make_one(
            self.boto3_raw_data["DashboardPublishOptions"]
        )

    ThemeArn = field("ThemeArn")
    Definition = field("Definition")

    @cached_property
    def ValidationStrategy(self):  # pragma: no cover
        return ValidationStrategy.make_one(self.boto3_raw_data["ValidationStrategy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateDashboardRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateDashboardRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTemplateRequest:
    boto3_raw_data: "type_defs.CreateTemplateRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")
    Name = field("Name")
    Permissions = field("Permissions")

    @cached_property
    def SourceEntity(self):  # pragma: no cover
        return TemplateSourceEntity.make_one(self.boto3_raw_data["SourceEntity"])

    @cached_property
    def Tags(self):  # pragma: no cover
        return Tag.make_many(self.boto3_raw_data["Tags"])

    VersionDescription = field("VersionDescription")
    Definition = field("Definition")

    @cached_property
    def ValidationStrategy(self):  # pragma: no cover
        return ValidationStrategy.make_one(self.boto3_raw_data["ValidationStrategy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTemplateRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTemplateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateTemplateRequest:
    boto3_raw_data: "type_defs.UpdateTemplateRequestTypeDef" = dataclasses.field()

    AwsAccountId = field("AwsAccountId")
    TemplateId = field("TemplateId")

    @cached_property
    def SourceEntity(self):  # pragma: no cover
        return TemplateSourceEntity.make_one(self.boto3_raw_data["SourceEntity"])

    VersionDescription = field("VersionDescription")
    Name = field("Name")
    Definition = field("Definition")

    @cached_property
    def ValidationStrategy(self):  # pragma: no cover
        return ValidationStrategy.make_one(self.boto3_raw_data["ValidationStrategy"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateTemplateRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateTemplateRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]

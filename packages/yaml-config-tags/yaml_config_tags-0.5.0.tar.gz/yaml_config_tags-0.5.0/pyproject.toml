[project]
name = "yaml-config-tags"
version = "0.5.0"
description = "Custom tags to extend YAML for managing advanced configurations easily within a file. Environment variables, includes, and jinja templating."
authors = [{ name = "Adrian Panella", email = "ianchi74@outlook.com" }]
readme = "README.md"
license = "MIT"

keywords = ["yaml", "config"]

requires-python = ">=3.11"

[tool.poetry]
homepage = "https://github.com/ianchi/yaml-config-tags"
repository = "https://github.com/ianchi/yaml-config-tags.git"
documentation = "https://github.com/ianchi/yaml-config-tags"

[tool.poetry.dependencies]
python = "^3.11"
jinja2 = "^3.1.4"
pyyaml = "^6.0.2"


[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
ruff = "^0.8.2"
pyright = "^1.1.390"
commitizen = "^4.1.0"
pre-commit = "^4.0.1"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
coverage = "^7.6.9"
pytest-cov = "^6.0.0"

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true

[tool.black]
line-length = 100

[tool.ruff]
# Assume Python 3.11
target-version = "py311"
src = ["."]

# Same as Black.
line-length = 100

[tool.ruff.lint]
# Be strict, ignoring globaly as few rules as possible
# prefer to ignore locally on the source code.

ignore = [
  "ANN003", # missing-type-kwargs
  "ANN101", # missing-type-self
  "ANN102", # missing-type-cls
  "D105",   # Missing docstring in magic method
  "D107",   # Missing docstring in `__init__`
  "TD002",  # Missing author in TODO
  "TD003",  # Missing issue link in TODO
  "COM812", # Missing trailing comma
  "TID252", # Prefer absolute imports over relative imports from parent modules

  # remove these ignores to find all pending work
  "FIX002", # Line contains TODO
  "ERA001", # Found commented-out code

]

# Enable all linting rules to catch most known antipatterns and erros
# Don't enable styling rules as we use Black for that

select = [
  "F",     # Pyflakes
  "E",     # pycodestyle - Error
  "W",     # pycodestyle - Warning
  "I",     # isort
  "N",     # pep8-naming
  "D",     # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ANN",   # flake8-annotations
  "ASYNC", # flake8-async
  "S",     # flake8-bandit
  "BLE",   # flake8-blind-except
  "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  "COM",   # flake8-commas

  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "T10",  # flake8-debugger
  "EXE",  # flake8-executable
  "FA",   # flake8-future-annotations
  "ISC",  # flake8-implicit-str-concat
  "ICN",  # flake8-import-conventions
  "LOG",  # flake8-logging
  "G",    # flake8-logging-format
  "INP",  # flake8-no-pep420
  "PIE",  # flake8-pie
  "T20",  # flake8-print
  "PYI",  # flake8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "INT",  # flake8-gettext
  "ARG",  # flake8-unused-arguments
  "TD",   # flake8-todos
  "FIX",  # flake8-fixme
  "ERA",  # eradicate
  "PD",   # pandas-vet
  "PGH",  # pygrep-hooks
  "PL",   # pylint
  "FLY",  # flynt
  "NPY",  # Numpy
  #"FAST", # FastAPI
  "PERF", # Perflint
  "RUF",  # Ruff
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.per-file-ignores]
"**/tests/**/test_*.py" = [
  # at least this three should be fine in tests:
  "S101",    # asserts allowed in tests...
  "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
  "FBT",     # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
  "PLR2004", # Magic value used in comparison, ...
  "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
  "E712",
  "INP001",  # allow implicit namespace for folder grouping
  "ANN201",  # allow missing type in test
]
"**/scripts/**/*.py" = [
  "T201",   # allow print for scripts
  "INP001", # allow implicit modules
]

"**/*.ipynb" = [
  "PLE1142", #  `await` should be used within an async function
]

[tool.ruff.pydocstyle]
convention = "google" # Accepts: "google", "numpy", or "pep257".

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pyright]
venvPath = "."
venv = ".venv"
exclude = ["**/node_modules", "**/__pycache__", ".venv/"]
reportMissingImports = "error"
pythonVersion = "3.11"
pythonPlatform = "Linux"

[tool.coverage.run]
include = ["app/*"]
data_file = ".coverage/data"

[tool.coverage.report]
fail_under = 80
skip_covered = true
show_missing = true
format = "text"

[tool.pytest.ini_options]
